<html>
<head>
<title>Cleaner, more elegant, and wrong</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Cleaner, more elegant, and wrong</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 22, 2004 / year-entry #155</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>84</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Just because you can't see the error path doesn't mean it doesn't exist. Here's a snippet from a book on C# programming, taken from the chapter on how great exceptions are. try { AccessDatabase accessDb = new AccessDatabase(); accessDb.GenerateDatabase(); } catch (Exception e) { // Inspect caught exception } public void GenerateDatabase() { CreatePhysicalDatabase(); CreateTables();...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Just because you can't see the error path doesn't mean it doesn't exist.
</p>
<p>
Here's a snippet from a book on C# programming, taken from the chapter
on how great exceptions are.
</p>
<blockquote CLASS=q>
<pre>try {
  AccessDatabase accessDb = new AccessDatabase();
  accessDb.GenerateDatabase();
} catch (Exception e) {
  // Inspect caught exception
}

public void GenerateDatabase()
{
  CreatePhysicalDatabase();
  CreateTables();
  CreateIndexes();
}
</pre>
<p>Notice how much cleaner and more elegant [this] solution is.
</p>
</blockquote>
<p>
Cleaner, more elegant, and wrong.
</p>
<p>
Suppose an exception is thrown during CreateIndexes().
The GenerateDatabase() function doesn't catch it, so the
error is thrown back out to the caller, where it is caught.
</p>
<p>
But when the exception left GenerateDatabase(), important
information was lost: The state of the database creation.
The code that catches the exception doesn't know which step
in database creation failed.  Does it need to delete the indexes?
Does it need to delete the tables?  Does it need to delete
the physical database?  It doesn't know.
</p>
<p>
So if there is a problem creating CreateIndexes(), you leak
a physical database file and a table forever.
(Since these are presumably files on disk, they hang around
indefinitely.)
</p>
<p>
Writing correct code in the exception-throwing model is in a sense
<i>harder</i> than in an error-code model, since <i>anything</i>
can fail, and you have to be ready for it.
In an error-code model, it's obvious when you have to check for
errors: When you get an error code.
In an exception model, you just have to know that errors can occur
anywhere.
</p>
<p>
In other words, in an error-code model, it is obvious when somebody
failed to handle an error: They didn't check the error code.
But in an exception-throwing model, it is not obvious from looking at
the code whether somebody handled the error, since the error is not
explicit.
</p>
<p>
Consider the following:
</p>
<pre>
Guy AddNewGuy(string name)
{
 Guy guy = new Guy(name);
 AddToLeague(guy);
 guy.Team = ChooseRandomTeam();
 return guy;
}
</pre>
<p>
This function creates a new Guy, adds him to the league, and
assigns him to a team randomly.
How can this be simpler?
</p>
<p>
Remember: Every line is a possible error.
</p>
<dl>
<dt>
What if an exception is thrown by "new Guy(name)"?</p>
<dd>
<p>
Well, fortunately, we haven't yet started doing anything, so
no harm done.
</p>
<dt>
What if an exception is thrown by "AddToLeague(guy)"?</p>
<dd>
<p>
The "guy" we created will be abandoned, but the GC will clean that up.
</p>
<dt>
What if an exception is thrown by "guy.Team = ChooseRandomTeam()"?</p>
<dd>
<p>
Uh-oh, now we're in trouble.  We already added the guy to the league.
If somebody catches this exception, they're going to find a guy in the
league who doesn't belong to any team.
If there's some code that walks through all the members of the league
and uses the guy.Team member, they're going to
take a NullReferenceException since guy.Team isn't initialized yet.
</p>
</dl>
<p>
When you're writing code, do you think about what the consequences
of an exception would be if it were raised by each line of code?
<strong>You have to do this if you intend to write correct code</strong>.
</p>
<p>
Okay, so how to fix this?  Reorder the operations.
</p>
<pre>
Guy AddNewGuy(string name)
{
 Guy guy = new Guy(name);
 guy.Team = ChooseRandomTeam();
 AddToLeague(guy);
 return guy;
}
</pre>
<p>
This seemingly insignificant change has a big effect on error
recovery.  By delaying the commitment of the data (adding the guy
to the league), any exceptions taken during the construction of the
guy do not have any lasting effect.  All that happens is that a
partly-constructed guy gets abandoned and eventually gets cleaned up by GC.
</p>
<p>
General design principle:  Don't commit data until they are ready.
</p>
<p>
Of course, this example was rather simple since
the steps in setting up the guy had no side-effects.
If something went wrong during set-up, we could just abandon the
guy and let the GC handle the cleanup.
</p>
<p>
In the real world, things are a lot messier.
Consider the following:
</p>
<pre>
Guy AddNewGuy(string name)
{
 Guy guy = new Guy(name);
 guy.Team = ChooseRandomTeam();
 guy.Team.Add(guy);
 AddToLeague(guy);
 return guy;
}
</pre>
<p>
This does the same thing as our corrected function, except that somebody
decided that it would be more efficient if each team kept a list of members,
so you have to add yourself to the team you intend to join.
What consequences does this have on the function's correctness?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (84)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-166453">
				<div id="div-comment-166453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dennis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166453">
			April 22, 2004 at 7:34 am</a>		</div>

		<p>Another general design principle: use Finally, and never leave a function without the data being in a consistent state.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166463">
				<div id="div-comment-166463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff Clark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166463">
			April 22, 2004 at 7:49 am</a>		</div>

		<p>In the last example the problem is if an exception occurs during AddToLeague(guy) you have a guy on a team but he doesn&#8217;t belong to the league.  As in the previous post, use a finally to remove guy from the team before leaving.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166503">
				<div id="div-comment-166503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166503">
			April 22, 2004 at 8:32 am</a>		</div>

		<p>I&#8217;m not familiar with C#, but I know that with C++, have a properly written destructor should take care of lots of these problems.  In the examples above, for instance, the Guy object&#8217;s destructor should remove him from any leagues and/or teams to which he belongs.  Well-written destructors go a long way toward the production of exception-safe code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166513">
				<div id="div-comment-166513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166513">
			April 22, 2004 at 8:42 am</a>		</div>

		<p>All you did was push the problem somewhere else. In C++ the problem is knowing when to call &quot;delete&quot; (and therefore cause the destructor to run).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166523">
				<div id="div-comment-166523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.xml-blog.com' rel='external nofollow' class='url'>Christian Romney</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166523">
			April 22, 2004 at 8:52 am</a>		</div>

		<p>Sorry:</p>
<p>public class Guy<br />
<br />{<br />
<br />    public LeagueTeam Team<br />
<br />    {<br />
<br />        set<br />
<br />        {<br />
<br />            try<br />
<br />            {<br />
<br />                value.Add(this);<br />
<br />                _team = value;<br />
<br />            }<br />
<br />            catch (Exception ex)<br />
<br />            {<br />
<br />                // rollback any possible effect<br />
<br />                if (null != value &amp;&amp; value.Contains(this))<br />
<br />                {<br />
<br />                    value.Remove(this);<br />
<br />                    _team = null;<br />
<br />                }<br />
<br />            }<br />
<br />        }<br />
<br />        get<br />
<br />        {<br />
<br />            return _team;<br />
<br />        }<br />
<br />    }<br />
<br />}<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166533">
				<div id="div-comment-166533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166533">
			April 22, 2004 at 9:05 am</a>		</div>

		<p>You forgot to rethrow the exception. And this only fixes the setting of the team. Adding to the league is still an exception point.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166543">
				<div id="div-comment-166543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jelovic.com' rel='external nofollow' class='url'>Dejan Jelovic</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166543">
			April 22, 2004 at 9:06 am</a>		</div>

		<p>Do a Google search for Dave Abraham&#8217;s exception safety guarantees.</p>
<p>Dave is clearest thinkers on exception safety by far.</p>
<p>Sometimes you can emply the &quot;strong guarantee&quot; which says that everything is transactional and that all functions should undo what they did if an exception is thrown.</p>
<p>Sometimes that&#8217;s not possible (&quot;how do you unfire a booster rocket?&quot;) or not practical (performance) to have the strong guarantee, and then you have to go for the basic guarantee.</p>
<p>And why do I have to type these longish comments inside this little edit box?</p>
<p>Dejan</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166563">
				<div id="div-comment-166563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.xml-blog.com' rel='external nofollow' class='url'>Christian Romney</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166563">
			April 22, 2004 at 9:11 am</a>		</div>

		<p>Misread &#8212; league. Gotcha.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166573">
				<div id="div-comment-166573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ericlippert' rel='external nofollow' class='url'>Eric Lippert</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166573">
			April 22, 2004 at 9:11 am</a>		</div>

		<p>This &quot;worst practice&quot; of designing bad error handling has security impacts as well.  Imagine if instead of CreateDatabase(); CreateTable(); it was CreateUser(); CreateRandomPassword();  !  You don&#8217;t want to get into situations where you create users with blank passwords and then die horribly.</p>
<p>Or, worse, DebitCheckingAccount(); CreditSavingsAccount();</p>
<p>Any time sensitive data that must be consistent is manipulated, you&#8217;ve got to get the error handling right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166553">
				<div id="div-comment-166553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.xml-blog.com' rel='external nofollow' class='url'>Christian Romney</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166553">
			April 22, 2004 at 9:13 am</a>		</div>

		<p>Quite right. Fogot to rethrow, but if you wrap the caught exception, how is the addition to the team a problem? In other words,</p>
<p>public class Guy<br />
<br />{<br />
<br />  public LeagueTeam Team<br />
<br />  {<br />
<br />    set<br />
<br />    {<br />
<br />      try<br />
<br />      {<br />
<br />        value.Add(this);<br />
<br />        _team = value;<br />
<br />      }<br />
<br />      catch (Exception ex)<br />
<br />      {<br />
<br />        // rollback any possible effect<br />
<br />        if (null != value &amp;&amp; value.Contains(this))<br />
<br />        {<br />
<br />          value.Remove(this);<br />
<br />          _team = null;<br />
<br />        }<br />
<br />        throw new ApplicationException(&quot;Could not join guy to league.&quot;, ex);<br />
<br />      }<br />
<br />    }<br />
<br />    get<br />
<br />    {<br />
<br />      return _team;<br />
<br />    }<br />
<br />  }<br />
<br />}<br />
<br />The application is in a consistent state because the guy&#8217;s team isn&#8217;t set and the team doesn&#8217;t have the guy. Am I missing something?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166583">
				<div id="div-comment-166583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166583">
			April 22, 2004 at 9:15 am</a>		</div>

		<p>But if an exception is thrown adding the guy to the league, you now have a team with a guy that doesn&#8217;t belong to the league.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166593">
				<div id="div-comment-166593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.xml-blog.com' rel='external nofollow' class='url'>Christian Romney</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166593">
			April 22, 2004 at 9:20 am</a>		</div>

		<p>Team should handle adding the guy to the league as well inside the Add(Guy guy) so that when you join one, you join the other.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166613">
				<div id="div-comment-166613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166613">
			April 22, 2004 at 9:48 am</a>		</div>

		<p>That works if there is only one thing to be done outside adding to the league (picking a team). But what if there are several things you need to do, like say, assign the guy a membership number and adding to the orientation meeting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166633">
				<div id="div-comment-166633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.xml-blog.com' rel='external nofollow' class='url'>Christian Romney</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166633">
			April 22, 2004 at 9:57 am</a>		</div>

		<p>Not sure where you&#8217;re going with this, we could add requirements ad nauseum. :) How would you handle this?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166643">
				<div id="div-comment-166643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tony Cox</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166643">
			April 22, 2004 at 10:00 am</a>		</div>

		<p>I think the underlying point here is that exceptions don&#8217;t really make handling errors correctly any easier. As amply demonstrated by the multiple incorrect attempts to correct Raymond&#8217;s example.</p>
<p>All this is why I&#8217;m a big fan of explicit handling and error codes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166653">
				<div id="div-comment-166653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166653">
			April 22, 2004 at 10:13 am</a>		</div>

		<p>Right, my point is that it isn&#8217;t any easier. It&#8217;s different. And in my opinion, harder since the error handling is much more subtle.</p>
<p>Christian: Specifically, I was pointing out that your solution wasn&#8217;t generalizable. It solved the immediate problem but wasn&#8217;t agile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166663">
				<div id="div-comment-166663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dino Viehland [msft]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166663">
			April 22, 2004 at 10:25 am</a>		</div>

		<p>I&#8217;d add that in addition to the fact that these calls can fail due to the obvious reasons you also need to consider Thread.Abort() and Out Of Memory in managed code.</p>
<p>Imagine if you&#8217;re doing:</p>
<p>try<br />
<br />{<br />
<br />  MayFail();<br />
<br />}<br />
<br />finally<br />
<br />{<br />
<br /> RollbackState();<br />
<br />}</p>
<p>and RollbackState hasn&#8217;t been JITed yet!  If MayFail failed due to OOM then the call to RollbackState may fail as well.</p>
<p>And Thread.Abort can happen pretty much anywhere so you won&#8217;t know what your state was like when you finally handle the exception.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166683">
				<div id="div-comment-166683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.xml-blog.com' rel='external nofollow' class='url'>Christian Romney</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166683">
			April 22, 2004 at 10:36 am</a>		</div>

		<p>I was doing the simplest thing that could possibly work. Generalization can happen during refactoring. I get the distinct feeling I need a Zen slap because I fail to see the point. I&#8217;m clear on the fact that every line of code is a potential exception waiting to happen, but the critiques are still too vague for me. Could someone point out a generalizable/&quot;good&quot; solution? I have yet to see one&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166703">
				<div id="div-comment-166703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.klbarrus.com/' rel='external nofollow' class='url'>Karl Barrus</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166703">
			April 22, 2004 at 10:55 am</a>		</div>

		<p>Some of this is covered in Sutter&#8217;s &quot;Exceptional C++&quot; book, which covers exception handling while building a C++ stack implementation.  Dave Abrahams&#8217; reasoning about exceptions are included, which includes some rules of thumb about order of operations (operations that throw versus operations that change state, etc.)</p>
<p>I think Raymond is not saying you can&#8217;t fix the code (er&#8230; sorry about the double negative), he&#8217;s saying that exception handling doesn&#8217;t magically make it easier &#8211; often you have to be more careful to do it correctly so you aren&#8217;t dangling between valid states.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166723">
				<div id="div-comment-166723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166723">
			April 22, 2004 at 11:22 am</a>		</div>

		<p>It&#8217;s good that setting the property did internal rollback, but the next layer out may also have to do rollback, so you can&#8217;t fix it entirely in the property itself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166733">
				<div id="div-comment-166733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.xml-blog.com' rel='external nofollow' class='url'>Christian Romney</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166733">
			April 22, 2004 at 11:30 am</a>		</div>

		<p>I agree, but that&#8217;s a &quot;higher-level&quot; rollback. The setters just handle rollbacks associated with bi-directional associations (object state consistency). This is where Command objects with Undo support or transactions come into play (for higher-order consistency).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166743">
				<div id="div-comment-166743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">E</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166743">
			April 22, 2004 at 1:03 pm</a>		</div>

		<p>Raymond,</p>
<p>Can you show the right way to do it not using exceptions and using error codes instead?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166763">
				<div id="div-comment-166763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166763">
			April 22, 2004 at 2:08 pm</a>		</div>

		<p>Eric:<br />
<br />&gt; Or, worse, DebitCheckingAccount(); CreditSavingsAccount();</p>
<p>&gt;Any time sensitive data that must be consistent is manipulated, you&#8217;ve got to get the error handling right.</p>
<p>That code is usually written as:<br />
<br />DebitCheckingAccount(context);<br />
<br />CreditSavingsAccount(context);<br />
<br />commit(context);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166773">
				<div id="div-comment-166773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas H&#228;ber</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166773">
			April 22, 2004 at 2:29 pm</a>		</div>

		<p>If somebody terminates the thread which this is happening, then I suppose either of these scenario could happen:<br />
<br />1) this was the only thread in the process, so the process terminates too.<br />
<br />2) this was a worker-thread, and the main-thread can find out about this.</p>
<p>Nr. 1 is the easiest, IMHO. I think of something such as Outlook here. Suddenly the computer crashed while it was doing something. Next time you start it, Outlook sees that it was terminated and scans the mailbox-file for possible corruptions.</p>
<p>For nr. 2 the main-thread needs some way to find out that the worker-thread was terminated in an inconsistent state. If so, then it could (try) to clean up the mess left behind.</p>
<p>For the banking-example above[1], some transaction-mechanism should be there. Then the transaction manager can &#8216;just&#8217; do a rollback.</p>
<p>But uh, yeah.. since I&#8217;ve started to write a book or something about transactions here now :P, IMO this clearly underlines Raymond&#8217;s point here :)</p>
<p>[1] <a target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2004/04/22/118161.aspx#118252" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2004/04/22/118161.aspx#118252</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166783">
				<div id="div-comment-166783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">B.Y.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166783">
			April 22, 2004 at 2:53 pm</a>		</div>

		<p>Writing complete and proper error handling code is difficult and requires lots of testing, it doesn&#8217;t matter if you use exceptions or error-code model.</p>
<p>I always suspected that exceptions were invented by programmers saying, &quot;it&#8217;s so difficult to write proper error-handling code, so let&#8217;s invent something that magically traps all errors&quot;. Of course being able to trap them doesn&#8217;t mean error conditions are handled properly.</p>
<p>Exceptions have no real advantage over error-code model. Most people use it because they have to, or because they believe it&#8217;s an &quot;advanced&quot; feature.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166483">
				<div id="div-comment-166483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CLP</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166483">
			April 22, 2004 at 8:03 am</a>		</div>

		<p>Program for *transactions*&#8230; and not necessarily only database transactions, but program with the whole transaction concept in mind.  Either an entire operation must complete successfully or the whole thing fails.  Always ask what happens if only a part of the transaction fails.  Program not only to correctly handle internal exceptions, but consider how your component might fit into a larger transaction.  Is it possible to rollback what your code has just done if later code requests that it be cancelled?  Think transactions&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166793">
				<div id="div-comment-166793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog@hronk.com' rel='external nofollow' class='url'>Jason McCullough</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166793">
			April 22, 2004 at 3:20 pm</a>		</div>

		<p>&quot;Right, my point is that it isn&#8217;t any easier. It&#8217;s different. And in my opinion, harder since the error handling is much more subtle.&quot;</p>
<p>I personally find it a lot easier to do a line-by line &quot;can this throw a non-hardware error (out of memory, etc.)&quot; inspection than decoding what&#8217;s effectively a giant if/then error handling jump table.</p>
<p>I don&#8217;t see in this case how using error status checking would resolve the half-created object problem, either, unfortunately.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166823">
				<div id="div-comment-166823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166823">
			April 22, 2004 at 3:59 pm</a>		</div>

		<p>&quot;I personally find it a lot easier to do a line-by line &quot;can this throw a non-hardware error (out of memory, etc.)&quot; inspection than decoding what&#8217;s effectively a giant if/then error handling jump table.&quot;</p>
<p>True. However if you&#8217;re coming to code that&#8217;s already been written, you have to do this analysis all over again since the absence of recovery code could mean &quot;Somebody thought about this and decided no recovery code was necessary&quot; or it could mean &quot;Nobody thought about this.&quot; Few people add the comment like &quot;it&#8217;s okay if this throws an exception because xyz&quot; to their code.</p>
<p>Error code paradigm is much wordier &#8211; checking error codes everywhere &#8211; but it&#8217;s obvious when somebody forgot to check an error code. And in the cases where somebody wants to ignore an error code, they usually add a little comment &quot;ignoring error code because xyz&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166843">
				<div id="div-comment-166843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jason G</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166843">
			April 22, 2004 at 5:02 pm</a>		</div>

		<p>Jason McCullough,</p>
<p>Another easier part is that with error codes you know exactly where the error happened and should know how to recover from that point.</p>
<p>With exceptions, you have to do a lot of detective work to figure out where you were.</p>
<p>Part of the commit/rollback problem is why I like Fowler&#8217;s Unit of Work pattern, though I have yet to use it.</p>
<p>It&#8217;s funny. This exact scenario happened today when I was debugging some framework code from our collaboration partner.  The main form load method was parsing an XML file which was malformed, and the uncaught exception caused it to skip asking the user to log in (as well as not closing an annoying splash screen.)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166713">
				<div id="div-comment-166713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.xml-blog.com' rel='external nofollow' class='url'>Christian Romney</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166713">
			April 22, 2004 at 11:10 am</a>		</div>

		<p>I&#8217;ll definitely agree with that and add that there are never any *magic* fixes in writing code, be it using exceptions or something else. Exceptions aren&#8217;t a panacea, but they do help the programmer add structure to exception handling. I guess where I thought this was going was that Raymond was going to offer us a better pattern. The one thing I like about the solution I postulated was that you let the setters take care of the bidirectional association and rollback in case of failure. I like this approach better than having one monolithic method that sets Guy&#8217;s Team and Guy&#8217;s League. That way the client call isn&#8217;t burdened with state management for a bunch of objects, but rather can simply react to a failure in whatever way makes sense for the app and be confident that the system is in a consistent state. I, for one, think this approach is broadly applicable and hence was confused when Raymond pointed out that it wasn&#8217;t generalizable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166873">
				<div id="div-comment-166873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166873">
			April 22, 2004 at 6:20 pm</a>		</div>

		<p>this seems short sighted.</p>
<p>as a wise person i once knew said:<br />
<br />its as wide as it is long.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166883">
				<div id="div-comment-166883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166883">
			April 22, 2004 at 6:28 pm</a>		</div>

		<p>&quot;Right, my point is that it isn&#8217;t any easier. It&#8217;s different. And in my opinion, harder since the error handling is much more subtle.&quot;</p>
<p>you can make the same argument for fortran over oo languages, observe:</p>
<p>s/it/oo languages/<br />
<br />s/error handling/flow control/<br />
<br />.<br />
<br />.<br />
<br />.</p>
<p>i bet you can fill in the rest of the details.</p>
<p>also,</p>
<p>dear raymond,<br />
<br />i am sorry for not consolidating my comments into a single post.  i am a thoughtless individual.  spurn me.</p>
<p>-nathan</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166903">
				<div id="div-comment-166903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://matt@fanhome.com' rel='external nofollow' class='url'>MR</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166903">
			April 22, 2004 at 8:29 pm</a>		</div>

		<p>Maybe this isn&#8217;t a good (too simple?) example &#8212; but if you handled this in a DBMS the transaction logic would handle every error case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166913">
				<div id="div-comment-166913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166913">
			April 22, 2004 at 9:16 pm</a>		</div>

		<p>MR, Raymond&#8217;s just using this case as an example.  It&#8217;s a strawman to illustrate a point.</p>
<p>And doing this in a dbms would be a LOT more complicated.</p>
<p>The discussion here isn&#8217;t about how to solve a problem.  It&#8217;s about the fact that exception handling doesn&#8217;t make issues with correctness go away.</p>
<p>Please take careful note that this is now at least four senior Microsoft bloggers that&#8217;ve commented that &quot;Exception handling isn&#8217;t a panacea&quot; either on this thread or on other threads (Raymond, Eric Lippert, Michael Grier (<a target="_new" href="http://weblogs.asp.net/mgrier/archive/2004/02/18/75324.aspx" rel="nofollow">http://weblogs.asp.net/mgrier/archive/2004/02/18/75324.aspx</a>) and now me (assuming I can play in the same league as the other three))  And other Microsoft people who aren&#8217;t bloggers have also made similar comments.</p>
<p>Trust us :)  Exceptions don&#8217;t make a developers job any easier.  They&#8217;re a different paradigm than return code checking, but&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166803">
				<div id="div-comment-166803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.windojitsu.com/' rel='external nofollow' class='url'>Shawn A. Van Ness</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166803">
			April 22, 2004 at 3:22 pm</a>		</div>

		<p>Hmm&#8230; I think that, even if one reaches the conclusion that &quot;all unexpected exceptions are fundamentally unrecoverable, and the only safe thing to do is terminate the process&quot;, then still, you gotta admit that exception-handling makes *that* chore a bit easier. :)</p>
<p>For the most part, that&#8217;s all I use it for &#8212; I establish one big catch-all near the top of a thread&#8217;s stack frame (which does nothing but attempt to log the error or display a msgbox or whatever, and then exit).</p>
<p>Then, I take care to wrap calls to any especially exception-prone functions (such as file- and network-i/o) in a more strongly-typed catch-block, closer to the bottom of the stack frame&#8230;</p>
<p>During testing and debugging, if an unexpected exception occurs, I investigate it as I would any other type of &quot;crash&quot; bug, and take steps to guard against it &#8212; maybe with a try/catch block, or maybe by doing better validation, etc.</p>
<p>That basic strategy gets me reasonably solid code, for a reasonably small amount of typing &#8212; I&#8217;m satisfied with it.</p>
<p>I do, however, regret that there are so many &quot;especially exception-prone functions&quot; in the FCL which don&#8217;t return explicit error-information.  Many features of the FCL force us to use exception-handling as flow control, and that&#8217;s wrong.  A try/catch block is almost always more cumbersome than an if statement.</p>
<p>But they&#8217;re both equally easy to forget, or neglect.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166923">
				<div id="div-comment-166923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tony Cox</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166923">
			April 22, 2004 at 10:31 pm</a>		</div>

		<p>nathan: I guess the difference between exceptions and object-orientation is that introducing object-orientation into your coding is perhaps more &#8216;fail safe&#8217; than introducing exception handling.</p>
<p>With exceptions, you pretty much have to decide that you&#8217;re going to handle exceptions properly everywhere, otherwise subtle cases fall through the cracks. So it&#8217;s difficult to merge with non-exception codebases, and to introduce yourself to as a developer slowly. In addition, as Raymond has illustrated, exception handling has some pretty subtle failure modes, while at the same time giving you a false sense of correctness.</p>
<p>With object-orientation you can start to use pieces of object-oriented methodology a piece at a time, without having to convert all the code it touches. So you can introduce yourself to the concepts slowly. And it tends to be more &#8216;fail safe&#8217;, the failure modes are more immediately obvious, and the subtle ones are less catastrophic (e.g. poor performance rather than incorrect behavior).</p>
<p>At core, object-orientation is about reducing the amount of global knowledge you need to have. You only deal with an object&#8217;s interface, without having to worry about its implemention, or whether it might be polymorphic. That&#8217;s clearly a helpful paradigm.</p>
<p>Proper implementation of exceptions involves just as much non-local knowledge as traditional error handling, it&#8217;s just dressed up to give the illusion otherwise. Which is, in my opinion, why so many problems arise.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166813">
				<div id="div-comment-166813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166813">
			April 22, 2004 at 3:53 pm</a>		</div>

		<p>I&#8217;m not familiar enough with C# to comment, but Java suffers from a very similar problem.  That is, *no operation can be guaranteed not to throw*.  This makes it so hard to write classes that offer any of Abraham&#8217;s exception levels.  It even makes it hard to maintain consistency in any non-trivial object.  And I should note that this isn&#8217;t even directly related to Exceptions vs Error Codes per se, it has more to do with the fact that these failures can occur at any point.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166943">
				<div id="div-comment-166943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Dougherty</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166943">
			April 22, 2004 at 11:41 pm</a>		</div>

		<p>In Scott Meyers&#8217; excellent &quot;Effective C++ CD&quot;, he includes some magazine articles.  Here are his introductory comments on a 1994 article on exceptions:</p>
<p>&quot;&quot;Exception Handling: A False Sense of Security&quot; by Tom Cargill. It&#8217;s hard to overestimate the influence this article had on the C++ community when it appeared in the November-December 1994 issue of the &#176;C++ Report. At that time, most C++ programmers thought there was little more to exceptions than try, throw, and catch. Tom showed just how wrong that was. (They didn&#8217;t call his column &quot;C++ Gadfly&quot; for nothing.) He demonstrated that writing exception-safe code isn&#8217;t just hard, it&#8217;s really hard. In addition, Tom challenged the C++ community to come up with rules for writing exception-safe programs. It took years before those rules began to appear in print, and the difficulties Tom identified affected work on the standard C++ library until the final days of its specification.&quot; </p>
<p>Here is the link for the CD:<br />
<br /><a target="_new" href="http://www.awprofessional.com/titles/0-201-31015-5/" rel="nofollow">http://www.awprofessional.com/titles/0-201-31015-5/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166933">
				<div id="div-comment-166933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://buzzfrog.blogs.com/zabrak/2004/04/exceptions_1_cl.html' rel='external nofollow' class='url'>Dag K&#246;nig</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166933">
			April 23, 2004 at 1:57 am</a>		</div>

		<p>L&#229;ter det konstigt, men jag &#228;r faktiskt intresserad av Exceptions? Allts&#229; felhanteringen i .NET. Men vad &#228;r egentligen exceptions och n&#228;r och hur skall dessa anv&#228;ndas? Vid f&#246;rsta anblicken kanske detta inte verkar vara n&#229;gon sv&#229;r fr&#229;ga att svara p&#229;,</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166973">
				<div id="div-comment-166973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Moi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166973">
			April 23, 2004 at 1:25 am</a>		</div>

		<p>*cough*AOP*cough*</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-167053">
				<div id="div-comment-167053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://joel.fouse.net' rel='external nofollow' class='url'>Joel Fouse</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167053">
			April 23, 2004 at 9:04 am</a>		</div>

		<p>The point should also be made that, from a performance standpoint, exceptions can be expensive (at least they can be in Java; not sure how difference C# is on this).  It&#8217;s much more efficient to check for erroneous conditions in logic than to wait for something to break.  For example, if you&#8217;re accepting user input that&#8217;ll be stored as a numeric type, make sure (via code) it looks like a number before trying to cast it as one.  The compiler may require you to use a try/catch around the cast, but you can reduce the likelihood that you&#8217;ll actually get an exceptional condition.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-167063">
				<div id="div-comment-167063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog@hronk.com' rel='external nofollow' class='url'>Jason McCullough</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167063">
			April 23, 2004 at 9:14 am</a>		</div>

		<p>Perhaps there&#8217;s more going on here than just error codes vs. exceptions.  I suspect this has more to do with a procedural vs. OO paradigm delta than the specifics of exceptions.</p>
<p>1) Your first example up there, the create database one from the book, is a procedural definition of constructing something; why not just use a constructor?  Failed constructors have the nice benefit of automatic unwinding; cleaning up should be the responsibility of the object, not the person creating a copy of the object, unless you&#8217;re dealing with a very strange boundary case.  Not sure why it was written that way, unless it was a static object factory method.  Which begs the question of why they didn&#8217;t write cleanup code for their library.</p>
<p>2) &quot;The system is too screwed up to handle the error&quot; scenario has no sigificant differences in the error handling or exception paradigms; if the file system just blew up, you can&#8217;t clean up files while handling a file system exception or a file system error.</p>
<p>3) Of course trivial exception handling won&#8217;t work if you partially commit objects, such as your AddNewGuy() example.</p>
<p>&quot;With exceptions, you have to do a lot of detective work to figure out where you were.&quot;</p>
<p>If you have to do detective work to figure out where you where, You&#8217;re Doing It Wrong. &#8482;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166983">
				<div id="div-comment-166983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">_</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166983">
			April 23, 2004 at 2:29 am</a>		</div>

		<p>*cough* RAII *cough*</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-167073">
				<div id="div-comment-167073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167073">
			April 23, 2004 at 9:30 am</a>		</div>

		<p>Jason: &quot;Failed constructors have the nice benefit of automatic unwinding&quot;.  Um.  Forgive me, but if you do:</p>
<p>class Foo<br />
<br />{<br />
<br />    Foo()<br />
<br />    {<br />
<br />        CreateDatabase();<br />
<br />        CreateIndexes();<br />
<br />        CreateTables()<br />
<br />    }<br />
<br />}</p>
<p>Where is the automatic unwinding done if CreateTables throws?  How is the database created in CreateDatabase() deleted?</p>
<p>Moving work into a constructor doesn&#8217;t fix the problem.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-167123">
				<div id="div-comment-167123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">_</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167123">
			April 23, 2004 at 10:37 am</a>		</div>

		<p>If you write a destructor it does fix the problem and that&#8217;s RAII.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-167133">
				<div id="div-comment-167133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">_</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167133">
			April 23, 2004 at 10:38 am</a>		</div>

		<p>God, it&#8217;s disturbing how many programmers never heard of it. &quot;final&quot; or &quot;finally&quot; is such a lousy concept compared to it, but obviously it&#8217;s above certain people.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-167143">
				<div id="div-comment-167143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167143">
			April 23, 2004 at 10:59 am</a>		</div>

		<p>The problem with using the destructor is that the destructor is nondeterministic in the CLR.</p>
<p>From the RAII web page, &quot;.NET uses non-deterministic garbage collection, much like Java, and RAII techniques are not directly applicable to .NET.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-167163">
				<div id="div-comment-167163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">gregb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167163">
			April 23, 2004 at 11:28 am</a>		</div>

		<p>Andrei Alexandrescu and Petru Marginean have a good C++ solution to this problem:</p>
<p><a target="_new" href="http://www.moderncppdesign.com/publications/cuj-12-2000.html" rel="nofollow">http://www.moderncppdesign.com/publications/cuj-12-2000.html</a></p>
<p>In the context of this problem it&#8217;d look something like this:</p>
<p>Guy guy = new Guy(name);<br />
<br />guy.Team = ChooseRandomTeam();<br />
<br />guy.Team.Add(guy);<br />
<br />ScopeGuard guard = MakeObjGuard(guy.Team, &amp;Team::pop_back);<br />
<br />AddToLeague(guy);<br />
<br />guard.Dismiss();<br />
<br />return guy;</p>
<p>You still have to think about what&#8217;s happening, but the solution isn&#8217;t necessarily ugly.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-167183">
				<div id="div-comment-167183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tony Cox</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167183">
			April 23, 2004 at 12:46 pm</a>		</div>

		<p>It just seems to me that there are all these contortions suggested to make exceptions work correctly, that it&#8217;s somewhat defeating the purpose.</p>
<p>Exceptions were supposed to make error handling easier and less, well, error prone. In practice, it&#8217;s not entirely clear to me that they succeed.</p>
<p>The question is not whether error handling can be done correctly with exceptions. Of course it can. The question is, once you did that, was it really any easier than just straightforward procedural error-code propagation?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166993">
				<div id="div-comment-166993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.xml-blog.com' rel='external nofollow' class='url'>Christian Romney</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-166993">
			April 23, 2004 at 5:51 am</a>		</div>

		<p>I have got to say that I disagree wholeheartedly with the &quot;error code&quot; approach. Using an error code because it let&#8217;s you know exactly what went wrong completely ignores custom exceptions. The type of the exception along with all the rich information that accompanies it can tell you much more than a code. Exceptions *can* also make code easier to understand by allowing one to structure the program in a way that clearly separates normal logic from error conditions. The point is poor error handling can be written using either paradigm, but I believe the judicious use of excpetions introduces benefits that outweigh the risks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-167013">
				<div id="div-comment-167013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.blowery.org/' rel='external nofollow' class='url'>Ben Lowery</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167013">
			April 23, 2004 at 7:16 am</a>		</div>

		<p>*cough* an acronym is not an argument *cough*</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-167203">
				<div id="div-comment-167203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167203">
			April 23, 2004 at 2:28 pm</a>		</div>

		<p>class Foo<br />
<br />{<br />
<br />public:<br />
<br />  Foo () : database (), indexes (), tables () {}<br />
<br />private:<br />
<br />  Database database;<br />
<br />  Indexes indexes;<br />
<br />  Tables tables;<br />
<br />}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-167213">
				<div id="div-comment-167213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167213">
			April 23, 2004 at 2:31 pm</a>		</div>

		<p>So how does the Database know whether it&#8217;s supposed to delete the file during destruction or whether it&#8217;s supposed to let the file continue to exist?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-167243">
				<div id="div-comment-167243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://beust.com/weblog' rel='external nofollow' class='url'>Cedric</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167243">
			April 23, 2004 at 4:48 pm</a>		</div>

		<p>Raymond, your post is a pretty strong argument for checked exceptions.  If exceptions are not checked, you need to rely on the programmer to check the documentation and hope that the said documentation is up to date&#8230;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-167283">
				<div id="div-comment-167283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">_</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167283">
			April 24, 2004 at 2:07 am</a>		</div>

		<blockquote><p>
  The question is, once you did that, was it<br />
  <br />&gt; really any easier than just straightforward<br />
  <br />&gt; procedural error-code propagation?</p>
<p>Absolutely. It&#8217;s just a matter of <em>really</em> getting used to exceptions. Once you &quot;got it&quot; it&#8217;s infinetly more powerful and simple than any error code system could ever be.</p>
<p>&gt; The problem with using the destructor is that<br />
  <br />&gt; the destructor is nondeterministic in the<br />
  <br />&gt; CLR.</p>
<p>That&#8217;s why the modern C++ model is so much better than C#, Java, &#8230; you can have deterministic behaviour AND non-leaking code.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-167293">
				<div id="div-comment-167293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LVK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167293">
			April 24, 2004 at 3:51 am</a>		</div>

		<p>Guy AddNewGuy(string name)<br />
<br />{<br />
<br />    Guy guy = new Guy(name);<br />
<br />    guy.Team = ChooseRandomTeam();<br />
<br />    try<br />
<br />    {<br />
<br />        guy.Team.Add(guy);<br />
<br />        try<br />
<br />        {<br />
<br />            AddToLeague(guy);<br />
<br />        }<br />
<br />        catch (Exception ex) // should be explicit<br />
<br />        {<br />
<br />            if (LeagueContains(guy))<br />
<br />                RemoveFromLeague(guy);<br />
<br />            throw;<br />
<br />        }</p>
<p>    }<br />
<br />    catch (Exception ex) // should be explicit<br />
<br />    {<br />
<br />        if (guy.Team.Contains(guy))<br />
<br />            guy.Team.Remove(guy);<br />
<br />        throw;<br />
<br />    }<br />
<br />    return guy;<br />
<br />}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-167303">
				<div id="div-comment-167303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.owlmountain.com' rel='external nofollow' class='url'>Tim Burns</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167303">
			April 24, 2004 at 7:51 am</a>		</div>

		<p>Like most of the &quot;Exceptions are Bad&quot; posts I&#8217;ve seen, the problem isn&#8217;t that exceptions are bad: the problem is that your code is bad.  You don&#8217;t carry the state with you through each method.  It should be written like this:</p>
<p>&lt;pre&gt;<br />
<br />public void GenerateDatabase()<br />
<br />{<br />
<br />  Database d = lookupDatabase();<br />
<br />  try {<br />
<br />    CreatePhysicalDatabase(d);<br />
<br />    CreateTables(d);<br />
<br />    CreateIndexes(d);<br />
<br />  }<br />
<br />  catch ( Exception e ) {<br />
<br />    d.undo();<br />
<br />  }<br />
<br />  finally {<br />
<br />    d.release();<br />
<br />  }<br />
<br />}<br />
<br />&lt;/pre&gt;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-167313">
				<div id="div-comment-167313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167313">
			April 24, 2004 at 8:18 am</a>		</div>

		<p>Tim: Hooray. Now if only people actually wrote code that way. Certainly the most popular books don&#8217;t. </p>
<p>(Though you forgot the rethrow, and you forgot to wrap the undo() call in its own exception handler.)</p>
<p>_: You get deterministic destruction but also the burden of invoking it at the right time (and the correct number of times): </p>
<p>Guy&amp; GetLoaner()<br />
<br />{<br />
<br />Guy g(&#8230;);<br />
<br />return g; // oops<br />
<br />} </p>
<p>It&#8217;s more complicated if GetLoaner() sometimes returns an existing guy and sometimes returns a new guy. How is the caller to know whether it should be destructed when the caller is finished with him? You&#8217;ve traded one complexity for another.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-167323">
				<div id="div-comment-167323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167323">
			April 24, 2004 at 9:55 am</a>		</div>

		<p>I am inheriting a codebase where their idea of exception handling is to:</p>
<p>bool l_bReturn;<br />
<br />try<br />
<br />{<br />
<br />//do work<br />
<br />l_bReturn = true;<br />
<br />}<br />
<br />catch (Exception &amp;e)<br />
<br />{<br />
<br />//log message<br />
<br />l_bReturn = false;<br />
<br />}<br />
<br />return l_bReturn;</p>
<p>Not only are we catching ALL errors (including access violation which IMHO means the user data can no longer be assumed to be 100% correct), we are ignoring the actual error and just logging the message.  It makes for nice stack traces but one of the big points of exception handling is to not have to check return values.</p>
<p>So not only are we ignoring errors and probably leaving &quot;operations&quot; partially done, we are still depending on people checking return values.</p>
<p>I really need a good paper or book that I can give to them to help me win my case that this is a very bad thing.  Well, IMHO. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-167443">
				<div id="div-comment-167443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizza</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167443">
			April 26, 2004 at 6:17 am</a>		</div>

		<p>&quot;Raymond, your post is a pretty strong argument for checked exceptions.&quot;</p>
<p>No it isn&#8217;t.  There are AFAIK no good arguments in favour of checked exceptions.</p>
<p>Checked exceptions don&#8217;t solve this issue at all.  Checked exceptions enforce catching of exceptions (or writing code to say /yes, I really did want this to escape/).  They don&#8217;t enforce correct handling of exceptions (catch(Exception e) {} is rife in Java), and they don&#8217;t enforce transactional semantics.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-167453">
				<div id="div-comment-167453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dmitri Papichev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167453">
			April 26, 2004 at 7:06 am</a>		</div>

		<p>&lt;b&gt;<br />
<br />Cleaner, more elegant, and wrong. </p>
<p>Suppose an exception is thrown during CreateIndexes(). The GenerateDatabase() function doesn&#8217;t catch it, so the error is thrown back out to the caller, where it is caught. </p>
<p>But when the exception left GenerateDatabase(), important information was lost: The state of the database creation. The code that catches the exception doesn&#8217;t know which step in database creation failed. Does it need to delete the indexes? Does it need to delete the tables? Does it need to delete the physical database? It doesn&#8217;t know. </p>
<p>So if there is a problem creating CreateIndexes(), you leak a physical database file and a table forever. (Since these are presumably files on disk, they hang around indefinitely.)<br />
<br />==================================<br />
<br />&lt;/b&gt;<br />
<br />[How I can &quot;quote&quot; the message I am replying to?]</p>
<p>Yo can&#8217;t say for sure that the solution referred is wrong. It would be quite right if you catch the exceptions in each of   CreatePhysicalDatabase(), CreateTables(), CreateIndexes() routines, run the local error-handling code, and then propagate only the exceptions you need to the outer level (to the caller). Actually, that in most cases should mean not just re-throwing the exception catched, but throwing another one.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-167703">
				<div id="div-comment-167703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167703">
			April 26, 2004 at 11:23 am</a>		</div>

		<p>&quot;Checked exceptions don&#8217;t solve this issue at all. Checked exceptions enforce catching of exceptions (or writing code to say /yes, I really did want this to escape/). They don&#8217;t enforce correct handling of exceptions (catch(Exception e) {} is rife in Java), and they don&#8217;t enforce transactional semantics.&quot;</p>
<p>No solution can be presented if programmers bend the rules in the wrong direction on purpose. Your &quot;argument&quot; against checked exceptions is the same as catching an error code and then do nothing with it. </p>
<p>The original sample suffers from the same problem. The exception mechanism is used in an obvious false manner. The same sample could be produced by not catching error-code return values (or not doing anything with them), then saying &quot;error codes are flawed bla bla bla&quot;.</p>
<p>One argument against exceptions stated is that there is less state available to the error handling party. The beauty of exceptions is a matter of fact that it is an object which can be filled with all kinds of specific error information, provided you define a subclass for it. Using return codes, which is usually an int or a bool, actually provides much much less information, and in a much less defined way as well (error const hell anyone?).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-167843">
				<div id="div-comment-167843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-167843">
			April 26, 2004 at 5:21 pm</a>		</div>

		<p>Well LarryO already cited my blog but the thing here is that even most C and C++ developers don&#8217;t understand &quot;how to use exceptions correctly&quot;.  Java and C# don&#8217;t even have the basic language constructs necessary to make them work.  (See the quoted blog entry for details.)</p>
<p>Moving towards a more database/transactional-workspace kind of design is interesting; I built a system like that back at Digital but the per-frame overhead of managing transaction state is excessive for general purpose programming.</p>
<p>The thing is this.  This code is obviously probably buggy:</p>
<p>HRESULT hr = foo();<br />
<br />if (SUCCEEDED(hr)) hr = bar();<br />
<br />if (hr == WHATEVER_E_NOTFOUND) {<br />
<br />   // aha, foo didn&#8217;t find it!<br />
<br />   &#8230;<br />
<br />}</p>
<p>it&#8217;s not obvious if this code is buggy</p>
<p>try {<br />
<br />   foo();<br />
<br />   bar();<br />
<br />} catch (NotFoundException e) {<br />
<br />   // aha, not found!<br />
<br />   &#8230;<br />
<br />}</p>
<p>it&#8217;s totally unobvious that this code is buggy:</p>
<p>try {<br />
<br />   foo(a, b, c);<br />
<br />} catch (NotFoundException e) {<br />
<br />   // aha, foo didn&#8217;t find it!<br />
<br />   &#8230;<br />
<br />}</p>
<p>(The last one is buggy because implicit conversions may have occurred coercing the parameters for the function call.)</p>
<p>I think that something that would help people see this much more easily would be to be able to overlay a (potential) control flow diagram on top of the source code.  Seeing all four  independent control flow arrows from the foo(a,b,c) line to the catch statement would help highlight the problem.</p>
<p>Now, of course, the real problem is that changes to the implementations of the types of a, b and c may arbitrarily rearrange the control flow.  You might want to try to write:</p>
<p>RealFirstParameterType p1 = a;<br />
<br />RealSecondParameterType p2 = b;<br />
<br />RealThirdParameterType p3 = c;<br />
<br />try {<br />
<br />   foo(p1, p2, p3);<br />
<br />} catch (NotFoundException e) {<br />
<br />   // whew, only foo could have thrown this!<br />
<br />   &#8230;<br />
<br />}</p>
<p>but that comment is a lie.  You have no reason to believe that the same overload that you used to call is still the one selected.  Also if you believe destructors can throw in C++, foo could have returned an object which was destroyed and originated the NotFoundException.</p>
<p>I used to think that exceptions were the best thing since sliced bread.  I now conclude that it&#8217;s almost impossible to write high quality code that uses them.  Yes, it&#8217;s possible, I&#8217;ve done it and one of my past teams where we sold exceptions heavily have done what is necessary to do it.  But man, it&#8217;s not easy and it&#8217;s really not easy for people to walk up to the code and grok it.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168343">
				<div id="div-comment-168343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pete.gontier.org/' rel='external nofollow' class='url'>Pete Gontier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-168343">
			April 27, 2004 at 10:59 am</a>		</div>

		<p>Any language feature won&#8217;t work well in some situations. Even in C++, every time you call operator new, you have to think about exceptions. The problem with approaching exceptions from the perspective of C# and Java is that you don&#8217;t have proper destructors, so you&#8217;ll never see a place in which exceptions really shine. And even then you have to trust yourself and your teammates to understand them (just like any other language feature).</p>
<p>As an aside, this notion that &quot;the GC will clean it up&quot; is downright quaint. Memory is the least interesting resource I manage. Why are people so obsessed with it? I suspect it&#8217;s merely easy to talk about.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168473">
				<div id="div-comment-168473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-168473">
			April 27, 2004 at 12:44 pm</a>		</div>

		<p>&quot;Moving towards a more database/transactional-workspace kind of design is interesting.&quot;</p>
<p>Using the &quot;using&quot; statement of C# this is quite easy to do already in C#:</p>
<p>using (Trans trans = new Trans()) {<br />
<br />  trans.doStuff(a + b);<br />
<br />  trans.commit();<br />
<br />}</p>
<p>This example is actually a form of exception handling as well. The trans will always be disposed immediately after the using statement, and it&#8217;s to check in the trans if the commit was called and executed properly. Difficult to introduce bugs using this approach.</p>
<p>The most bugs I see in everyday work are objects which don&#8217;t manage their state properly. Improper exception use may be one of the symptons, but they are not the sole cause of objects going into an invalid state (without throwing exceptions BEFORE that happens). It&#8217;s just a matter of knowing what the hell you are doing&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168553">
				<div id="div-comment-168553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-168553">
			April 27, 2004 at 2:13 pm</a>		</div>

		<p>Using does not suffice.  The CLR (not C#) lacks the facilties to do exception-free rollback, either via IDisposable or try/finally.</p>
<p>In C++ it&#8217;s possible but it&#8217;s ugly and people don&#8217;t know how to read/write/maintain the code.</p>
<p>It could be that we&#8217;ve lived with statuses for so long that it&#8217;s the devil we know vs. the devil we don&#8217;t know but it&#8217;s much easier to spot the bugs in status based source code than exception based source code.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168563">
				<div id="div-comment-168563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.geekdojo.net/justin/' rel='external nofollow' class='url'>Justin Rudd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-168563">
			April 27, 2004 at 2:38 pm</a>		</div>

		<p>How bout this&#8230;</p>
<p>Assuming class Team has an ID that uniquely identifies it in an array&#8230;</p>
<p>Guy AddNewGuy(string name)<br />
<br />{<br />
<br /> Guy guy = new Guy(name);</p>
<p> Team t = ChooseRandomTeam();<br />
<br /> t = t.Clone(); // doesn&#8217;t need to be deep&#8230;</p>
<p> t.Add(guy);<br />
<br /> AddToLeague(guy);</p>
<p> // ID is just an index into an array<br />
<br /> UpdateTeam(t);</p>
<p> return guy;<br />
<br />}</p>
<p>You clone the Team which doesn&#8217;t need to be deep because you don&#8217;t care about copies of the guys, just the underlying array.  Add the guy to the clone, then add the guy to the league.  If the league fails, the team that is stored in the array (behind the scenes of ChooseRandomTeam) isn&#8217;t modified.  The call to UpdateTeam(t) simply updates the team in the array with the new team.  The old team object gets GC&#8217;ed later on.  This even protects against Array.SetValue throwing an exception as long as any exceptions happen before the underlying memory is touched.</p>
<p>Now you are cloning the team object which could cause a large memory allocation.</p>
<p>Thoughts?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168653">
				<div id="div-comment-168653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-168653">
			April 27, 2004 at 6:09 pm</a>		</div>

		<p>4/27/2004 10:59 AM Pete Gontier:</p>
<p>&gt; As an aside, this notion that &quot;the GC will<br />
<br />&gt; clean it up&quot; is downright quaint. Memory is<br />
<br />&gt; the least interesting resource I manage.</p>
<p>This reminds me of Dr. Pizza&#8217;s statement in another thread.  Finally I understood the intent of his/her statement, and yours looks similar.  But memory management still cannot be ignored.</p>
<p>With some kinds of handles you can call DuplicateHandle().  When each user no longer needs the object they can call CloseHandle().  When the object&#8217;s last handle gets closed the object might be suitably disposed of.  For kinds of handles which cannot be passed to DuplicateHandle(), and for Schroedinger&#8217;s handles (kinds of handles where MSDN doesn&#8217;t say if you can pass them to DuplicateHandle()), the situation is tougher.</p>
<p>With memory management, when one DLL needs to pass a pointer to another DLL and neither one really knows when the object can be disposed of, you get blue screens and/or leaks.  GC has a purpose.</p>
<p>On the other hand, in an embedded system that I coded in C++, destructors take around 16% of the CPU time and constructors take around 14%.  The only solution I can find at present is to re-code the whole thing in C, allocate each temporary object once (or make them static variables if sizes are known at coding time), and consider freeing them once if there&#8217;s going to be a shutdown operation other than power-off.  Of course a 25% reduction in CPU time isn&#8217;t going to be enough, but it&#8217;s the first thing to do because it&#8217;s the biggest waste.  Yes memory is the least interesting resource, but memory doesn&#8217;t care whether I&#8217;m interested or not, I have to deal with it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168613">
				<div id="div-comment-168613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.geekdojo.net/justin/archive/2004/04/27/1788.aspx' rel='external nofollow' class='url'>JIS</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-168613">
			April 27, 2004 at 8:28 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168793">
				<div id="div-comment-168793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">StinkyMinky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-168793">
			April 28, 2004 at 7:26 am</a>		</div>

		<p>&lt;rant&gt;<br />
<br />I think this is more than Exception Handling.</p>
<p>The sample code itself stinks whether error handling is involved or not.  When I saw the sample code, my nose perked up and detected foul odor.</p>
<p>&gt;  CreatePhysicalDatabase();<br />
<br />&gt;  CreateTables();<br />
<br />&gt;  CreateIndexes();</p>
<p>I would like to call this &#8216;blind calling&#8217; or &#8216;implicit calling&#8217; because you don&#8217;t know how the system is changing or evolving.  There is no return value or no parameter.  This anti-pattern usually shows up the procedural language but it also frequently shows up in OO language.</p>
<p>&#8216;Blind calling&#8217; anti-pattern is bad because you don&#8217;t know what aspect of the system the caller is affecting.  In OO, an object is affected by external caller&#8217;s message.  So the caller knows that he/she is changing or affecting the object.  But the original example is basically old procedural function calls masquerading to be OO.  The object is calling private methods blindly not knowing affected actor/part of the system.</p>
<p>You have to treat these private methods as the same as object method.  Pass in the object that you want to have work done.  Unless you do that, you are just assuming that the function is doing something for you.</p>
<p>Basically, &#8216;blind caller&#8217; anti-pattern has the same behavior as old global variable anti-pattern &#8211; you don&#8217;t know what is going on.</p>
<p>That&#8217;s why Tim Burns&#8217; solution is excellent.</p>
<p><a target="_new" href="http://weblogs.asp.net/oldnewthing/archive/2004/04/22/118161.aspx#119473" rel="nofollow">http://weblogs.asp.net/oldnewthing/archive/2004/04/22/118161.aspx#119473</a></p>
<p>This shows that each function call will affect the database server.  You are delegating method to work on the database.</p>
<p>This is a bad programming exercise. </p>
<p>&lt;/rant&gt;</p>
<p>This goes to the basic assumption &#8211; if you write a good program with a few smells, it is easier to implement correct &#8216;Exception&#8217; handling.</p>
<p>I guess it is a universal truth of programming &#8211; it does not matter how well language is designed &#8211; it is still people who is writing it.  Garbage In &#8211; Garbage Out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-169033">
				<div id="div-comment-169033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Geoffrey Elliott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-169033">
			April 28, 2004 at 3:10 pm</a>		</div>

		<p>My team has had great success using nested blocks with explicit error handling required.  This is a methodology that is compatible with both exceptions and error codes (6 of 1, half dozen of the other).  We use error codes because we&#8217;re writing C++ COM objects so it&#8217;s easier to be consistent across the board.  Our code for this problem would look like:</p>
<p>HRESULT hr;<br />
<br />AccessDatabase *accessDb = new AccessDatabas();<br />
<br />if( accessDb != NULL )<br />
<br />{<br />
<br /> hr = accessDb-&gt;GenerateDatabase();<br />
<br /> if( FAILED( hr ) )<br />
<br /> {<br />
<br />  delete accessDb;<br />
<br /> }<br />
<br />}<br />
<br />else<br />
<br />{<br />
<br /> hr = E_OUTOFMEMORY;<br />
<br />}</p>
<p>HRESULT accessDb::GenerateDatabase()<br />
<br />{<br />
<br /> HRESULT hr;</p>
<p> hr = CreatePhysicalDatabase();<br />
<br /> if( SUCCEEDED( hr ) )<br />
<br /> {<br />
<br />  hr = CreateTables();<br />
<br />  if( SUCCEEDED( hr ) )<br />
<br />  {<br />
<br />   hr = CreateIndexes();</p>
<p>   if( FAILED( hr ) )<br />
<br />   {<br />
<br />    DestroyTables();<br />
<br />   }<br />
<br />  }</p>
<p>  if( FAILED( hr ) )<br />
<br />  {<br />
<br />   DestroyPhysicalDatabase();<br />
<br />  }<br />
<br /> }<br />
<br />}</p>
<p>If we were using exceptions, it would look like this:</p>
<p>AccessDatabase *accessDb = new AccessDatabas();<br />
<br />try<br />
<br />{<br />
<br /> accessDb-&gt;GenerateDatabase();<br />
<br />}<br />
<br />catch( e )<br />
<br />{<br />
<br /> delete accessDb;<br />
<br /> throw e;<br />
<br />}</p>
<p>void accessDb::GenerateDatabase()<br />
<br />{</p>
<p> CreatePhysicalDatabase();</p>
<p> try<br />
<br /> {<br />
<br />  CreateTables();</p>
<p>  try<br />
<br />  {<br />
<br />   CreateIndexes();<br />
<br />  }<br />
<br />  catch( e )<br />
<br />  {<br />
<br />   try<br />
<br />   {<br />
<br />    DestroyTables();<br />
<br />   }<br />
<br />   throw e;<br />
<br />  }<br />
<br /> }<br />
<br /> catch( e )<br />
<br /> {<br />
<br />  try<br />
<br />  {<br />
<br />   DestroyPhysicialDatabase();<br />
<br />  }<br />
<br />  throw e;<br />
<br /> }<br />
<br />}</p>
<p>At the end of the day, we think the error code version is easier to read and understand (perhaps because we&#8217;re more familiar with it).  But either way, the thinking that needs to go into the problem is the same, either way.</p>
<p>&#8211; Geoff</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-169253">
				<div id="div-comment-169253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.diku.dk/hjemmesider/studerende/firefly/' rel='external nofollow' class='url'>Peter Lund</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-169253">
			April 29, 2004 at 3:09 am</a>		</div>

		<p>Raymond, you make me wonder why the exceptions aren&#8217;t a problem in Standard ML, the language Bjarne Stroustrup got them from.</p>
<p>I really am puzzled.</p>
<p>Could it be because ML programmers are brighter than Mort and hence better programmers? </p>
<p>Could it be that ML is much more coherent language and nice and functional and stuff?</p>
<p>Don&#8217;t seem like good answers to me (even though they typically /are/ much better programmers and ML really /is/ a much more coherent language than the chimera C++).</p>
<p>Thank you for planting this thought &#8211; I&#8217;ll probably think about it on/off for the next month or two :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-170073">
				<div id="div-comment-170073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-170073">
			April 30, 2004 at 10:43 am</a>		</div>

		<p>Functional languages are where most of the exception &quot;research&quot; if you will call it that comes from and note something very very interesting &#8211; the complexity of error path rollback is entirely due to side effects.  memory allocation, starting a database transaction, changing fields in a structure in memory, all side effects.</p>
<p>When you lack side effects, transactional rollback is trivial.  When all your side effects are managed by something like a database whose sole job in life is, if nothing else, to preserve the ACID transactional characteristics, &quot;all&quot; you have to do is remember to abort the transaction.  (Which is someething that the &quot;using&quot; syntax paradigm is absolutely perfect for.)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-171503">
				<div id="div-comment-171503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dvxp.com/' rel='external nofollow' class='url'>Ries Vriend</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-171503">
			May 5, 2004 at 2:16 pm</a>		</div>

		<p>My personal credo: &quot; Just because you missed an error path doesn&#8217;t mean you can pinpoint its source from a user support call as easily as an exception that was only caughed by your global or top-level catch-all exception handler. &quot;</p>
<p>As for the example: there is only one side effect that needs to be handled in an lower-level handler, and that is the Access Database (the MDB file) being left in an inconsistent state.</p>
<p>So instead of cluttering up the GenerateDatabase method with all sorts or error code return value checks, all that&#8217;s needed is to cleanup in case of an exception. No matter WHAT happens, you will always be able to pointpoint the cause, line number, etc, provided you have at least a global/ thread handler.</p>
<p>string mdbFile = @&quot;c:mydb.mdb&quot;;<br />
<br />  AccessDatabase accessDb = new AccessDatabase(mdbFile);<br />
<br />  using(accessDb) {<br />
<br />    accessDb.GenerateDatabase();<br />
<br />  }<br />
<br />}</p>
<p>public void GenerateDatabase()<br />
<br />{<br />
<br />  try {<br />
<br />    CreatePhysicalDatabase();<br />
<br />    CreateTables();<br />
<br />    CreateIndexes();<br />
<br />  }<br />
<br />  catch (Exception e) {<br />
<br />    if (File.Exists(this.mdbFileName))<br />
<br />      File.Delete(this.mdbFileName);<br />
<br />    throw new Exception(&quot;Could not generate: &quot; + this.mdbFileName, e);<br />
<br />  }<br />
<br />}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-182163">
				<div id="div-comment-182163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.baus.net' rel='external nofollow' class='url'>christopher baus</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-182163">
			June 10, 2004 at 1:38 am</a>		</div>

		<p>This is EXACTLY the problem that scope guard solves.  You are using the wrong language.  This can be solved in C++.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-182383">
				<div id="div-comment-182383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-182383">
			June 10, 2004 at 10:44 am</a>		</div>

		<p>Commenting on this article has been closed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-200713">
				<div id="div-comment-200713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.acceleration.net/ryan/archive/2004/08/03/221.aspx' rel='external nofollow' class='url'>:-$</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-200713">
			August 3, 2004 at 5:06 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-221623">
				<div id="div-comment-221623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.geekdojo.net/justin/archive/0001/01/01/1788.aspx' rel='external nofollow' class='url'>JIS</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-221623">
			October 28, 2004 at 7:13 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-239623">
				<div id="div-comment-239623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2005/01/06/347666.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-239623">
			January 6, 2005 at 9:58 am</a>		</div>

		<p>It may be easier for you, but it makes it harder for everyone else.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-244253">
				<div id="div-comment-244253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2005/01/14/352949.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-244253">
			January 14, 2005 at 10:00 am</a>		</div>

		<p>It&#8217;s not that exceptions are inherent bad, it&#8217;s that it&#8217;s hard to code to them and hard to tell that somebody did it right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-401233">
				<div id="div-comment-401233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://notgartner.com/posts/4170.aspx' rel='external nofollow' class='url'>Community Blogs</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-401233">
			July 16, 2006 at 10:56 am</a>		</div>

		<p>Readify does apparently. We have a technical mailing list internally that most of the technical folk</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-494653">
				<div id="div-comment-494653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://soci.hu/blog/index.php/2007/04/18/apro-korultekintes-a-vista-forraskodban/' rel='external nofollow' class='url'>Soci blog &raquo; Blog Archive &raquo; Apr?? k??r??ltekint??s a Vista forr??sk??dban</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-494653">
			April 18, 2007 at 4:20 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://soci.hu/blog/index.php/2007/04/18/apro-korultekintes-a-vista-forraskodban/" rel="nofollow">http://soci.hu/blog/index.php/2007/04/18/apro-korultekintes-a-vista-forraskodban/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-547893">
				<div id="div-comment-547893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mikesdump.wordpress.com/2005/05/11/error-handling/' rel='external nofollow' class='url'>Error Handling &laquo; Mike&#8217;s Dump</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-547893">
			September 8, 2007 at 7:25 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://mikesdump.wordpress.com/2005/05/11/error-handling/" rel="nofollow">http://mikesdump.wordpress.com/2005/05/11/error-handling/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-577923">
				<div id="div-comment-577923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.brainfarters.com/?p=54' rel='external nofollow' class='url'>Brainfarters &raquo; Blog Archive &raquo; Exception Handling</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040422-00/?p=39683#comment-577923">
			December 14, 2007 at 7:28 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.brainfarters.com/?p=54" rel="nofollow">http://www.brainfarters.com/?p=54</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

