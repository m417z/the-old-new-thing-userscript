<html>
<head>
<title>How do I create a shortcut whose target is specified by a relative path?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I create a shortcut whose target is specified by a relative path?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 19, 2017 / year-entry #233</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171019-00/?p=97247</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It's already in there.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Commenter Richard wonders
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20160902-00/?p=94235#comment-1263505">
if there's such a thing as a "relative" shortcut</a>
whose target is specified by a path relative to the shortcut itself.
</p>
<p>
Let's start with a program that creates a normal shortcut.
This is a Little Program which does little to no error checking.
</p>
<pre>
#define UNICODE
#define <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20040212-00/?p=40643">_UNICODE</a>
#define STRICT
#include &lt;windows.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;atlbase.h&gt;
#include &lt;pathcch.h&gt;

int __cdecl wmain(int, wchar_t **)
{
 <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20040520-00/?p=39243">CCoInitialize</a> init;

 CComPtr&lt;IShellLink&gt; link;
 link.CoCreateInstance(CLSID_ShellLink);

 wchar_t path[MAX_PATH];
 GetModuleFileName(GetModuleHandle(nullptr), path, ARRAYSIZE(path));
 link-&gt;SetPath(path);

 PathCchRemoveFileSpec(path, ARRAYSIZE(path));
 PathCchAppend(path, ARRAYSIZE(path), L"Awesome.lnk");

 CComQIPtr&lt;IPersistFile&gt;(link)-&gt;Save(path, FALSE);

 return 0;
}
</pre>
<p>
When run, this program creates a shortcut to itself
in the same directory as the program.
</p>
<p>
Here are the changes necessary to make the shortcut
remember that the target's location relative to the shortcut itself:
</p>
<pre>
//
</pre>
<p>
It's a trick.
Normal shortcuts already remember the target's location
relative to the shortcut itself.
</p>
<p>
However, the relative path is not used until other
avenues have been exhausted.
To give the relative path more prominence,
let's disable the other avenues.
</p>
<pre>
#define UNICODE
#define <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20040212-00/?p=40643">_UNICODE</a>
#define STRICT
#include &lt;windows.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;atlbase.h&gt;
#include &lt;pathcch.h&gt;

int __cdecl wmain(int, wchar_t **)
{
 <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20040520-00/?p=39243">CCoInitialize</a> init;

 CComPtr&lt;IShellLink&gt; link;
 link.CoCreateInstance(CLSID_ShellLink);

 <font COLOR=blue>// Disable other ways of resolving the shortcut
 CComQIPtr&lt;IShellLinkDataList&gt; dataList(link);
 DWORD flags;
 dataList-&gt;GetFlags(&amp;flags);
 flags |= SLDF_FORCE_NO_LINKINFO;
 flags |= SLDF_FORCE_NO_LINKTRACK;
 dataList-&gt;SetFlags(flags);</font>

 wchar_t path[MAX_PATH];
 GetModuleFileName(GetModuleHandle(nullptr), path, ARRAYSIZE(path));
 link-&gt;SetPath(path);

 PathCchRemoveFileSpec(path, ARRAYSIZE(path));
 PathCchAppend(path, ARRAYSIZE(path), L"Awesome.lnk");

 CComQIPtr&lt;IPersistFile&gt;(link)-&gt;Save(path, FALSE);

 return 0;
}
</pre>
<p>
The <code>SLDF_</code><code>FORCE_</code><code>NO_</code><code>LINKINFO</code> flag
disables the information the shell normally creates to
identify the volume that contains the shortcut target.
This is used, for example, if the target was on a network volume,
so the shell can reconnect to that volume in order to find the target.
</p>
<p>
The
<code>SLDF_</code><code>FORCE_</code><code>NO_</code><code>LINKTRACK</code> flag
disables the information the shell normally creates to
identify the object with the assistance of the
<a HREF="https://support.microsoft.com/help/312403/distributed-link-tracking-on-windows-based-domain-controllers">
distributed link tracking service</a>.
</p>
<p>
Deleting those two pieces of information means that
the shell cannot use them to help find the shortcut.
If the file doesn't exist at the specified absolute path,
then the relative path will be applied to the location of
the shortcut itself,
and the shell will look for the file at the resulting location.
</p>
<p>
<b>Bonus chatter</b>:
The
<code>IShell&shy;Link::</code><code>Set&shy;RelativePath</code>
method
is for the benefit of code which
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20110224-00/?p=11403">
stores shortcuts in places other than files</a>.
You call
<code>IShell&shy;Link::</code><code>Set&shy;RelativePath</code>
before saving the shortcut to memory,
passing a path to a location you want to pretend the shortcut
file is saved.
The shell will remember the path to the shortcut target relative
to the path you pass in.
Conversely, after you load the shortcut from memory,
you call
<code>IShell&shy;Link::</code><code>Set&shy;RelativePath</code>
to specify the path to pretend the shortcut was loaded from.
The relative path remembered when the shortcut was saved
will be applied to this path to help find the target.
</p>
<p>
<b>Double bonus chatter</b>:
You can use a
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20130503-00/?p=4463">
simple pidl</a>
to make the shortcut target reside at any path you like.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1 parent" id="comment-1313196">
				<div id="div-comment-1313196" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171019-00/?p=97247#comment-1313196">
			October 19, 2017 at 7:12 am</a>		</div>

		<p>So SetRelativePath() actually sets an <i>absolute</i> path from which relative paths will be resolved?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1313206">
				<div id="div-comment-1313206" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171019-00/?p=97247#comment-1313206">
			October 19, 2017 at 7:36 am</a>		</div>

		<p>You have to be wearing the correct-colored glasses. SetRelativePath means &#8220;Please set the relative path, using this absolute path as a reference point.&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1313215">
				<div id="div-comment-1313215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171019-00/?p=97247#comment-1313215">
			October 19, 2017 at 8:10 am</a>		</div>

		<p>The example from the MSDN documentation does not use SetRelativePath() for a shortcut that is stored in &#8220;places other than files&#8221;, but for a shortcut stored in a .lnk file. Is this recommended/necessary, or is this carried out automatically if Resolve() is called, and therefore obsolete?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1313225">
				<div id="div-comment-1313225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171019-00/?p=97247#comment-1313225">
			October 19, 2017 at 9:27 am</a>		</div>

		<p>IShellLink knows nothing about whether it comes from an IPersistFile or some other storage facility, so SetRelativePath() before Resolve() should be good practice? But that contradicts your bonus chatter. I&#8217;m confused.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1313255">
				<div id="div-comment-1313255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171019-00/?p=97247#comment-1313255">
			October 20, 2017 at 12:27 am</a>		</div>

		<p>The example for SetRelativePath()  (<a href="https://msdn.microsoft.com/de-de/library/windows/desktop/bb761054(v=vs.85)" rel="nofollow">https://msdn.microsoft.com/de-de/library/windows/desktop/bb761054(v=vs.85)</a>.aspx) suggests to call it *two* times: After the creation of the link and also before resolving the link.</p>
<p>The naming as also the description of SetRelativePath() in MSDN is poor. This method does not set a relative path at all, and it is not clear, how the given file name is used. There is only some very vague text (&#8220;can be used to help the link resolution process&#8221;), but no functional or declarative description, when and how to given filename is evaluated, and when and how it is really used.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1313315">
				<div id="div-comment-1313315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171019-00/?p=97247#comment-1313315">
			October 20, 2017 at 10:14 am</a>		</div>

		<p>Thank you.<br />
I guess now I&#8217;m nearly famous :)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

