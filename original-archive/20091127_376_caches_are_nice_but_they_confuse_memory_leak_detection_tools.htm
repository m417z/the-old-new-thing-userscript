<html>
<head>
<title>Caches are nice, but they confuse memory leak detection tools</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Caches are nice, but they confuse memory leak detection tools</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 27, 2009 / year-entry #377</td></tr>
<tr><td><b>Tags:</b></td><td>tipssupport</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Knowledge Base article 139071 has the technically correct but easily misinterpreted title FIX: OLE Automation BSTR caching will cause memory leak sources in Windows 2000. The title is misleading because it makes you think that Oh, this is a fix for a memory leak in OLE Automation, but that's not what it is. The BSTR...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Knowledge Base article 139071 has the technically correct but easily misinterpreted title <a href="http://support.microsoft.com/kb/139071"> FIX: OLE Automation BSTR caching will cause memory leak sources in Windows 2000</a>. The title is misleading because it makes you think that <i>Oh, this is a fix for a memory leak in OLE Automation</i>, but that's not what it is.</p>
<p> The <code>BSTR</code> is the string type used by OLE Automation, and since strings are used a lot, OLE Automation maintains a cache of recently-freed strings which it can re-use when somebody allocates a new one. Caches are nice (though you need to make sure <a href="http://blogs.msdn.com/oldnewthing/archive/2006/05/02/588350.aspx"> you have a good replacement policy</a>), but they confuse memory leak detection tools, because the memory leak detection tool will not be able to match up the allocator with the deallocator. What the memory leak detection tool sees is not the creation and freeing of strings but rather the allocation and deallocation of memory. And if there is a string cache (say, of just one entry, for simplicity), what the memory leak detection tool sees is only a part of the real story. </p>
<ul>
<li>Program (line 1): Creates string 1. </li>
<li>String manager: <u>Allocates memory block A</u> for string 1. </li>
<li>Program (line 2): Frees string 1. </li>
<li>String manager: Puts memory block A into cache. </li>
<li>Program (line 3): Creates string 2. </li>
<li>String manager: Re-uses memory block A for string 2. </li>
<li>Program (line 4): Creates string 3. </li>
<li>String manager: <u>Allocates memory block B</u> for string 3. </li>
<li>Program (line 5): Frees string 3. </li>
<li>String manager: Puts memory block B into cache. </li>
<li>Program (line 6): Frees string 2. </li>
<li>String manager: <u>Deallocates memory block A</u> since there is no room     in the cache. </li>
</ul>
<p> Your program sees only the lines marked <i>Program:</i>, and the memory leak detection tool sees only the underlined part. As a result, the memory leak detection tool sees a warped view of the program's string usage: </p>
<ul>
<li>Line 1 of your program allocates memory block A. </li>
<li>Line 4 of your program allocates memory block B. </li>
<li>Line 6 of your program deallocates memory block A. </li>
</ul>
<p> Notice that the memory leak detection tool thinks that line&nbsp;6 freed the memory allocated by line&nbsp;1, even though the two lines of the program are unrelated. Line&nbsp;6 is freeing string&nbsp;2, and line&nbsp;1 is creating string&nbsp;1! </p>
<p> Notice also that the memory leak detection tool will report a memory leak, because it sees that you allocated two memory blocks but deallocated only one of them. The memory leak detection tool will say, "Memory allocated at line&nbsp;4 is never freed." And you stare at line&nbsp;4 of your program and insist that the memory leak detection tool is on crack because there, you freed it right at the very next line! You chalk this up as "Stupid memory leak detection tool, it has all these useless false positives." </p>
<p> Even worse: Suppose somebody deletes line&nbsp;6 of your program, thereby introducing a genuine memory leak. Now the memory leak detection tool will report two leaks: </p>
<ul>
<li>Memory allocated at line&nbsp;1 is never freed. </li>
<li>Memory allocated at line&nbsp;4 is never freed. </li>
</ul>
<p> You already marked the second report as bogus during your last round of investigation. Now you look at the first report, and decide that it too is bogus; I mean look, we free the string right there at line&nbsp;2! </p>
<p> Result: A memory leak is introduced, the memory leak detection tool finds it, but you discard it as another bug in the memory leak detection tool. </p>
<p> When you're doing memory leak detection, it helps to disable your caches. That way, the high-level object creation and destruction performed in your program maps more directly to the low-level memory allocation and deallocation functions tracked by the memory leak detection tool. In our example, if there were no cache, then every <i>Create string</i> would map directly to an <i>Allocate memory</i> call, and every <i>Free string</i> would map directly to a <i>Deallocate memory</i> call. </p>
<p> What KB article 139071 is trying to say is <i>FIX: OLE Automation BSTR cache cannot be disabled in Windows 2000</i>. Windows&nbsp;XP already contains support for the <code>OANOCACHE</code> environment variable, which disables the <code>BSTR</code> cache so <a href="http://blogs.msdn.com/larryosterman/archive/2004/09/28/235304.aspx"> you can investigate those <code>BSTR</code> leaks more effectively</a>. The hotfix adds support for <code>OANOCACHE</code> to Windows&nbsp;2000. </p>
<p> <b>Bonus chatter</b>: Why do we have <code>BSTR</code> anyway? Why not just use null-terminated strings everywhere? </p>
<p> The <code>BSTR</code> data type was introduced by Visual Basic. They couldn't use null-terminated strings because Basic permits nulls to be embedded in strings. Whereas Win32 is based on the K&amp;R&nbsp;C&amp;nbsp way of doing things, <a href="http://blogs.msdn.com/oldnewthing/archive/2004/12/22/329884.aspx"> OLE automation is based on the Basic way of doing things</a>. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-789623">
				<div id="div-comment-789623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789623">
			November 27, 2009 at 8:05 am</a>		</div>

		<p>Also, the multiple heaps approach confuses the Leak Detection Tools. For example, if I need to load some data</p>
<p>into some memory structures &#8211; I create a class with a HANDLE initialized with HeapCreate(&#8230;) and I&#8217;ll allocate all</p>
<p>my data from this allocator. That&#8217;s what MSDN suggests. And that works wonders for performance &#8211; in class</p>
<p>destructor I simply call HeapDestroy() instead of thousands calls to free()/delete, etc. Clean and fast! However,</p>
<p>I am constantly getting the &quot;bugs&quot; assigned to me which say: &quot;A lot of leaks reported in module XYZ! (my module)&quot;.</p>
<p>I am tired of explaining the situation to SQA guys, actually&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-789663">
				<div id="div-comment-789663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789663">
			November 27, 2009 at 9:26 am</a>		</div>

		<p>Today&#8217;s post is right on what I am currently working on.</p>
<p>I wasted a day trying to figure out why STLport seemed to leak each and every allocation to end up discovering it does its own pooling/caching in the back. Why can&#8217;t these guys just use the OS&#8217;s allocator and let it do its job is beyond me. It has been optimized for this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-789683">
				<div id="div-comment-789683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789683">
			November 27, 2009 at 9:34 am</a>		</div>

		<p>This is one of several reasons I find the memory-leak tools to be really frustrating.</p>
<p>Even the ones that cost thousands of dollars &#8212; at least the two or three high-end ones I&#8217;ve tried &#8212; throw up so many false-positives that it&#8217;s very time consuming to sift through them looking for the legitimate problems.</p>
<p>(And that&#8217;s if they don&#8217;t fall over completely on a large/complex project.)</p>
<p>It&#8217;s a very difficult problem to solve, to be fair to them, but when they ask $$$$ for solutions that don&#8217;t really work I don&#8217;t have much sympathy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-789693">
				<div id="div-comment-789693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789693">
			November 27, 2009 at 10:09 am</a>		</div>

		<p>I fully agree Teo. Microsoft should expose APIs using counted strings and deprecate the old ones.</p>
<p>As to whether the BSTR way of implementing counted strings is a panacea, well I&#8217;ve had my doubts on that, but it&#8217;s a million times better than the C way.</p>
<p>Some weirder parts of the BSTR way are obviously there for some compatibility with the C way, which is funny since from VB you can&#8217;t actually call a DLL function that needs a C string without some conversion taking place (for the &#8230;A functions this is conversion to the local code page, for the &#8230;W functions this is copying the contents to a Byte array). Unless you write a typelib, but most people don&#8217;t bother.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-789703">
				<div id="div-comment-789703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JohnQPublic</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789703">
			November 27, 2009 at 10:31 am</a>		</div>

		<p>Was it not a design goal of BSTR to have a common allocator/deallocator function that everyone could agree on when working with strings? &nbsp;I suppose everyone could have relied on CoTaskMemAlloc/CoTaskMemFree for strings, but BSTR seems like it was tailor made for this purpose.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-789753">
				<div id="div-comment-789753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789753">
			November 27, 2009 at 12:31 pm</a>		</div>

		<blockquote><p>
  &gt; I fully agree Teo. Microsoft should expose APIs using counted strings and deprecate the old ones.
</p></blockquote>
<p>Why bother? Support for OLE and even the Win32 API is archiac legacy stuff. .NET is the way forward. Surely? :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-789763">
				<div id="div-comment-789763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jdanielsmith.spaces.live.com' rel='external nofollow' class='url'>J. Daniel Smith</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789763">
			November 27, 2009 at 12:39 pm</a>		</div>

		<p>@porter: +1 (although perhaps not the most popular stance at this blog).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-789643">
				<div id="div-comment-789643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Teo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789643">
			November 27, 2009 at 8:52 am</a>		</div>

		<p>I find quite amusing and embarrising at the same time that, on the lowest levels, NT uses counted strings in the form of UNICODE_STRING structure, and basically evety high-level language uses counted strings, be they std::basic_string&lt;&gt;, BSTR, Delphi&#8217;s string, .net String etc. But they *must* talk to each other using null-terminated interface of Win32 API middle-man:(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-789843">
				<div id="div-comment-789843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Friday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789843">
			November 27, 2009 at 9:20 pm</a>		</div>

		<p>Can OANOCACHE be used for non-debug purposes?</p>
<p>To improve stability and/or speed?</p>
<p>Don&#8217;t look at me like that, I&#8217;m not a programmer. :) I just haven&#8217;t seen it non-debugging context and am curious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-789853">
				<div id="div-comment-789853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789853">
			November 27, 2009 at 11:37 pm</a>		</div>

		<p>I&#8217;m having similar problems with SHGetKnownFolderIDList and other shell functions. They create multiple memory allocations, probably for caching purposes.</p>
<p>Anybody knows how to make the shell free its caches on shutdown? So I can see what the true leaks are? OANOCACHE has no effect in this case.</p>
<div class=post>[<i>I believe the checked build of Windows does what you want. (Sometimes I wonder why we make a checked build since it seems nobody runs it.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-789953">
				<div id="div-comment-789953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789953">
			November 29, 2009 at 2:30 pm</a>		</div>

		<p>[I believe the checked build of Windows does what you want. (Sometimes I wonder why we make a checked build since it seems nobody runs it.) -Raymond]</p>
<p>Well, only MSDN subscribers even has access to checked builds of Windows.</p>
<div class=post>[<i>Then subscribe to MSDN. <a href="http://msdn.microsoft.com/aa718661.aspx" rel="nofollow">There are many benefits to being an MSDN subscriber</a>. For example, you get to be one of those &#8220;customers&#8221; I often write about. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-789963">
				<div id="div-comment-789963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789963">
			November 29, 2009 at 3:04 pm</a>		</div>

		<p>[I believe the checked build of Windows does what you want. (Sometimes I wonder why we make a checked build since it seems nobody runs it.) -Raymond]</p>
<p>Rename it to &quot;Windows Debug Build&quot;? AFAIK the term &quot;checked&quot; isn&#8217;t a common synonym for &quot;debug&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-789973">
				<div id="div-comment-789973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789973">
			November 29, 2009 at 4:06 pm</a>		</div>

		<p>&gt; Rename it to &quot;Windows Debug Build&quot;? AFAIK the term &quot;checked&quot; isn&#8217;t a common synonym for &quot;debug&quot;.</p>
<p>IIRC, it&#8217;s not actually a debug build, though. &nbsp;It&#8217;s just the release build with assertions and similar diagnostic *checks* enabled. &nbsp;The debug build is something else.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-789983">
				<div id="div-comment-789983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-789983">
			November 29, 2009 at 5:29 pm</a>		</div>

		<p>&quot;IIRC, it&#8217;s not actually a debug build, though. &nbsp;It&#8217;s just the release build with assertions and similar diagnostic *checks* enabled. &nbsp;The debug build is something else.&quot;</p>
<p>Larry Osterman has the story:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/larryosterman/archive/2005/08/31/458572.aspx" rel="nofollow">http://blogs.msdn.com/larryosterman/archive/2005/08/31/458572.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-790013">
				<div id="div-comment-790013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-790013">
			November 30, 2009 at 3:43 am</a>		</div>

		<p>BSTRs themselves can have null characters which makes them different from regular C style null terminated strings. This could have been a requirement to create this new string type?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-790003">
				<div id="div-comment-790003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Teo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091127-00/?p=15883#comment-790003">
			November 29, 2009 at 11:44 pm</a>		</div>

		<p>&gt;&gt; Sometimes I wonder why we make a checked build since it seems nobody runs it</p>
<p>Well, for user-mode stuff it is not that helpful but for kernel-mode it&#8217;s a life saver. Most certainly *somebody does* run it, like us :-P</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

