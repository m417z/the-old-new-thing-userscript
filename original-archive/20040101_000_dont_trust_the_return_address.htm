<html>
<head>
<title>Don't trust the return address</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Don&#8217;t trust the return address</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 1, 2004 / year-entry #1</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040101-00/?p=41223</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>17</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Sometimes people ask, "So I know how to get my return address [use the _ReturnAddress() intrinsic]; how do I figure out what DLL that return address belongs to?" Beware. Even if you figure out which DLL the return address belongs to [use Get­Module­Handle­Ex(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS)], that doesn't mean that that is actually the DLL that called you....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Sometimes people ask, "So I know how to get my return address
[use
<a HREF="http://msdn.microsoft.com/en-us/library/64ez38eh(v=vs.100).aspx">
the _ReturnAddress() intrinsic</a>];
how do I figure out what DLL that return address belongs to?"</p>
<p>
Beware.
</p>
<p>
Even if you figure out which DLL the return address belongs to
[use
<a HREF="http://msdn.microsoft.com/en-us/library/windows/desktop/ms683200(v=vs.100).aspx">
Get&shy;Module&shy;Handle&shy;Ex(GET_<wbr>MODULE_<wbr>HANDLE_<wbr>EX_<wbr>FLAG_<wbr>FROM_<wbr>ADDRESS)</a>],
that doesn't mean that that is actually the DLL that called you.
</p>
<p>
A common trick is to search through a "trusted" DLL for some code
bytes that coincidentally match ones you (the attacker) want to execute.
This can be something as simple as a "retd" instruction, which
are quite abundant. The attacker then builds a stack frame that
looks like this, for, say, a function that takes two parameters.
</p>
<pre>
trusted_retd
hacked parameter 1
hacked parameter 2
hacker_code_addr
</pre>
<p>
After building this stack frame, the attacker then jumps to
the start of the function being attacked.
</p>
<p>
The function being attacked looks
at the return address and sees <code>trusted_retd</code>,
which resides in a trusted DLL.  It then foolishly trusts the
caller and allows some unsafe operation to occur, using
hacked parameters 1 and 2. The function being attacked then
does a "retd 8" to return and clean the parameters.
This transfers control to the <code>trusted_retd</code>,
which performs a simple <code>retd</code>, which now gives
control to the <code>hacker_code_addr</code>, and the hacker
can use the result to continue his nefarious work.
</p>
<p>
This is why you should be concerned if somebody says,
"This code verifies that its caller is trusted..."
How do they know who the caller really is?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-119223">
				<div id="div-comment-119223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ep</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040101-00/?p=41223#comment-119223">
			January 1, 2004 at 8:42 am</a>		</div>

		<p>So is there a way to verify that my caller is trusted and allows some operations?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-119233">
				<div id="div-comment-119233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040101-00/?p=41223#comment-119233">
			January 1, 2004 at 9:56 am</a>		</div>

		<p>Raymond, see this yet?<br />
<br /><a target="_new" href="http://www.latext.com/pm/comments/P134_0_1_0/" rel="nofollow">http://www.latext.com/pm/comments/P134_0_1_0/</a><br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-119263">
				<div id="div-comment-119263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/ptorr/' rel='external nofollow' class='url'>Peter Torr</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040101-00/?p=41223#comment-119263">
			January 1, 2004 at 12:02 pm</a>		</div>

		<p>Well, in .NET you have IPermission.Demand() to see if all your callers have the right permissions, or SecurityAction.LinkDemand if you just want to check your immediate caller (which is generally a really bad idea &#8212; avoid using LinkDemands to enforce security; they&#8217;re better suited to improving API usability).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-119293">
				<div id="div-comment-119293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.virtualdub.org/' rel='external nofollow' class='url'>Phaeron</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040101-00/?p=41223#comment-119293">
			January 1, 2004 at 2:40 pm</a>		</div>

		<p>There are other reasons why the return address shouldn&#8217;t be used to determine the caller: the source may be a dynamically generated code fragment, and the call to the DLL function may be a tail call (jmp dword ptr [__imp__DefWindowProc@16]).</p>
<p>Incidentally, what is the &quot;sanctioned&quot; method of emulating GetModuleHandleEx(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS) on pre-XP platforms?  The only way I know of is to VirtualQuery() the address and case the AllocationBase to HMODULE.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-119313">
				<div id="div-comment-119313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040101-00/?p=41223#comment-119313">
			January 1, 2004 at 3:16 pm</a>		</div>

		<p>zz: It looks like they focused on my phrase &quot;You dummy&quot;. I didn&#8217;t mean it to be as insulting to the user as it turned out. I should have written &quot;Psst&quot; instead, but what&#8217;s done is done.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-119343">
				<div id="div-comment-119343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve Sheppard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040101-00/?p=41223#comment-119343">
			January 1, 2004 at 8:02 pm</a>		</div>

		<p>No, you did the right thing. You wrote what you meant, they CHOSE to be insulted by it. Don&#8217;t play the PC game by trying to guess what they will insulted by because the answer is eveything. Anyone who reads your blog regularly knows what you mean and to hell with idiots like that guy. </p>
<p>Keep up the good work!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-119453">
				<div id="div-comment-119453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Lund/firefly@diku.dk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040101-00/?p=41223#comment-119453">
			January 3, 2004 at 1:54 am</a>		</div>

		<p>why would anyone try to get the return address?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-119513">
				<div id="div-comment-119513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040101-00/?p=41223#comment-119513">
			January 3, 2004 at 8:49 am</a>		</div>

		<p>Because they want to do things &quot;only if their caller is trusted&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-119533">
				<div id="div-comment-119533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Lund/firefly@diku.dk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040101-00/?p=41223#comment-119533">
			January 3, 2004 at 9:30 am</a>		</div>

		<p>But, but&#8230; that *really* makes no sense :)</p>
<p>Reminds me of the Poly/Turbo/Borland Pascal programmers I&#8217;ve met who wanted an &quot;exit2&quot; pseudo procedure that would leave not just one but /two/ procedures.</p>
<p>(exit is like return in C without an argument, Pascal can have nested functions unlike C (but like gcc))</p>
<p>I thought at least *somebody* had had a real need for it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-135533">
				<div id="div-comment-135533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.rentamidget.com/archives/000031.html' rel='external nofollow' class='url'>The Millionth Monkey Speaks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040101-00/?p=41223#comment-135533">
			January 12, 2004 at 11:16 am</a>		</div>

		<p>Recently on Raymond Chens blog he had a post about not trusting return addresses. Specifically to not use the _ReturnAddress() intrinsic and GetModuleHandleEx to figure out if the caller is trusted. I had to try and come up with a&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-136363">
				<div id="div-comment-136363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/roberthorvick/archive/0001/01/01/59014.aspx' rel='external nofollow' class='url'>Robert Horvick's Weblog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040101-00/?p=41223#comment-136363">
			January 15, 2004 at 11:40 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-136343">
				<div id="div-comment-136343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/roberthorvick/archive/2004/01/15/59014.aspx' rel='external nofollow' class='url'>Robert Horvick's Weblog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040101-00/?p=41223#comment-136343">
			January 15, 2004 at 11:41 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-156543">
				<div id="div-comment-156543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/03/20/93176.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040101-00/?p=41223#comment-156543">
			March 20, 2004 at 9:18 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-277123">
				<div id="div-comment-277123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/05/23/421024.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040101-00/?p=41223#comment-277123">
			May 23, 2005 at 9:00 am</a>		</div>

		<p>Because there sometimes isn&#8217;t enough information to determine what the &amp;quot;right&amp;quot; order is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-291533">
				<div id="div-comment-291533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/07/20/440918.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040101-00/?p=41223#comment-291533">
			July 20, 2005 at 10:00 am</a>		</div>

		<p>Counterintuitive results from the file search.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-342853">
				<div id="div-comment-342853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/02/03/524071.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040101-00/?p=41223#comment-342853">
			February 3, 2006 at 10:00 am</a>		</div>

		<p>Thanks to code injection.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-409883">
				<div id="div-comment-409883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/08/17/704232.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040101-00/?p=41223#comment-409883">
			August 17, 2006 at 10:00 am</a>		</div>

		<p>No really, you can&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

