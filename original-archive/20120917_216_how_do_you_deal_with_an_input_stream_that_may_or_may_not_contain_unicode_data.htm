<html>
<head>
<title>How do you deal with an input stream that may or may not contain Unicode data?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do you deal with an input stream that may or may not contain Unicode data?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 17, 2012 / year-entry #217</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>27</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Dewi Morgan reinterpreted a question from a Suggestion Box of times past as "How do you deal with an input stream that may or may not contain Unicode data?" A related question from Dave wondered how applications that use CP_ACP to store data could ensure that the data is interpreted in the same code page...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Dewi Morgan reinterpreted a question from a Suggestion Box of times past as "<a href="http://blogs.msdn.com/b/oldnewthing/archive/2007/10/22/5586861.aspx#5612543">How do you deal with an input stream that may or may not contain Unicode data</a>?" A related question from Dave wondered <a href="http://blogs.msdn.com/b/oldnewthing/archive/2009/01/15/9319761.aspx#9321243"> how applications that use <code>CP_ACP</code> to store data could ensure that the data is interpreted in the same code page by the recipient</a>. "If I send a .txt file to a person in China, do they just go through code pages until it seems to display correctly?"</p>
<p> These questions are <a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/03/01/541266.aspx"> additional manifestations</a> of <a href="http://blogs.msdn.com/b/oldnewthing/archive/2005/03/08/389527.aspx"> <i>Keep your eye on the code page</i></a>. </p>
<p> When you store data, you need to have some sort of agreement (either explicit or implicit) with the code that reads the data as to how the data should be interpreted. Are they four-byte sign-magnitude integers stored in big-endian format? Are they two-byte ones-complement signed integers stored in little-endian format? Or maybe they are IEEE floating-point data stored in 80-bit format. If there is no agreement between the two parties, then confusion will ensue. </p>
<p> That your data consists of text does not exempt you from this requirement. Is the text encoded in UTF-16LE? Or maybe it's UTF-8. Or perhaps it's in some other 8-bit character set. If the two sides don't agree, then there will be confusion. </p>
<p> In the case of files encoded in <code>CP_ACP</code>, you have a problem if the source and destination have different values for <code>CP_ACP</code>. That text file you generate on a US-English system (where <code>CP_ACP</code> is 1252) may not make sense when decoded on a Chinese-Simplified system (where <code>CP_ACP</code> is 936). It so happens that all Windows 8-bit code pages agree on code points 0 through 127, so if you restrict yourself to that set, you are safe. The Windows shell team was not so careful, and they slipped some characters into a header file <a href="http://blogs.msdn.com/michkap/archive/2009/09/11/9894019.aspx"> which are illegal when decoded in code page 932</a> (the <code>CP_ACP</code> used in Japan). The systems in Japan do not cycle through all the code pages looking for one that decodes without errors; they just use their local value of <code>CP_ACP</code>, and if the file makes no sense, then <a href="http://en.wikipedia.org/wiki/Mojibake"> I guess it makes no sense</a>. </p>
<p> If you are in the unfortunate situation of having to consume data where the encoding is unspecified, you will find yourself <a href="http://blogs.msdn.com/b/oldnewthing/archive/2007/04/17/2158334.aspx"> forced to guess</a>. And if you guess wrong, <a href="http://en.wikipedia.org/wiki/Bush_hid_the_facts"> the result can be embarrassing</a>. </p>
<p> <b>Bonus chatter</b>: I remember one case where a customer asked, "We need to convert a string of chars into a string of wchars. What code page should we pass to the <code>Multi&shy;Byte&shy;To&shy;Wide&shy;Char</code> function?" </p>
<p> I replied, "What code page is your char string in?" </p>
<p> There was no response. I guess they realized that once they answered that question, they had their answer. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1011323">
				<div id="div-comment-1011323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011323">
			September 17, 2012 at 8:06 am</a>		</div>

		<p>[ The Windows shell team was not so careful, and they slipped some characters into a header file which are illegal when decoded in code page 932 ]</p>
<p>Ah yes, the one I considered a compiler bug. Invalid characters in comments should not bomb the compiler. They sure as heck don&#39;t bomb gcc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1011343">
				<div id="div-comment-1011343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011343">
			September 17, 2012 at 9:04 am</a>		</div>

		<p>Is there any reason to use CP_ACP anymore? I can see using UTF-8 (or its ASCII subset) and I can see using UTF-16, but CP_ACP on any data that might leave the machine is just asking for trouble.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011353">
				<div id="div-comment-1011353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henning Makholm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011353">
			September 17, 2012 at 9:09 am</a>		</div>

		<p>@Joshua: What would you have the compiler do? If it cannot decode the incoming byte steam into characters, it has no way of knowing where the comment ENDS, so exiting with a polite error message would seem to be the Right Thing to do.</p>
<p>GCC&#39;s behavior is appropriate for a compiler that decides to assume that the source file encoding is always &quot;some unspecified 8-bit charset with ASCII at the bottom and something at the top&quot;, where the meaning of the somethings is not relevant except insofar as their byte values can be dumped raw into the source file for string and character constants. However, a compiler that tries to support input encodings outside this pattern cannot afford to be so cavalier. With stateful encodings such as ISO/IEC 2022, ignoring decoding errors and scanning forward to find the next pair of bytes that look like &quot;*/&quot; may risk finding something that was not intended as a comment delimiter at all, or may conversely miss something that WAS intended as a comment delimiter because a shift state was lost.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1011363">
				<div id="div-comment-1011363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A. Skrobov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011363">
			September 17, 2012 at 9:09 am</a>		</div>

		<p>[ It so happens that all Windows 8-bit code pages agree on code points 0 through 127 ]</p>
<p>How about backslash, ¥ (Yen sign), and ₩ (Won sign) ?</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/michkap/archive/2005/09/17/469941.aspx" rel="nofollow">blogs.msdn.com/&#8230;/469941.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011373">
				<div id="div-comment-1011373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011373">
			September 17, 2012 at 9:09 am</a>		</div>

		<p>@Maurits</p>
<p>The only reason I can see for not using Unicode is that you have to interface with some old cruft.</p>
<p>Otherwise, why not make life easy for yourself and use what has been the standard encoding for the life of the Windows NT family of systems?</p>
<p>Sure, you still have a residual issue or two: UTF-8/UTF-16, endianness. &nbsp;But that&#39;s nothing compared to what you used to have to care about.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1011383">
				<div id="div-comment-1011383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pcooper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011383">
			September 17, 2012 at 9:29 am</a>		</div>

		<p>I find that most tools work with Unicode just fine, and just don&#39;t use it by default. And as long as you set your encodings all along your chain of applications, it all works great. But they don&#39;t use it by default for backwards compatibility. One day they may be able to change the defaults, but sadly it might not be yet.</p>
<p>Also, in case anyone hadn&#39;t seen it yet, Joel Spolsky&#39;s article on this is great for explaining the basics: <a rel="nofollow" target="_new" href="http://www.joelonsoftware.com/articles/Unicode.html" rel="nofollow">http://www.joelonsoftware.com/&#8230;/Unicode.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011393">
				<div id="div-comment-1011393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011393">
			September 17, 2012 at 9:45 am</a>		</div>

		<p>@Pcooper: Yep. All together now: ‘There Ain&#39;t No Such Thing As Plain Text.’</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1011413">
				<div id="div-comment-1011413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011413">
			September 17, 2012 at 10:40 am</a>		</div>

		<p>@A. Skrobov</p>
<p>In this situation they are just font face replacement for the backslash/reverse soldus. To Windows itself, it still treats it as a .</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011423">
				<div id="div-comment-1011423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">No</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011423">
			September 17, 2012 at 11:33 am</a>		</div>

		<p>There&#39;s a much simpler approach: all byte streams are UTF-8 until proven otherwise. This rule works the vast majority of the time. In a UTF-8 world, we do have &quot;plain text&quot;. The world outside Building 26 lives in this UTF-8 world. We can go a long, long way toward making Windows more sane by just making UTF-8 a valid multibyte encoding and switching all systems to it by default.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1011433">
				<div id="div-comment-1011433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011433">
			September 17, 2012 at 12:15 pm</a>		</div>

		<p>@Henning Makholm: The C language is defined in 7 bit. If dropping chars until resync doesn&#39;t work, the file is in a completely inappropriate encoding. Obviously you can&#39;t drop chars unless the lexer state is inside comment though.</p>
<p>Also, if you get decode errors in header files, there&#39;s an excellent chance the reason you&#39;re getting them is you guessed the wrong encoding. Slam it back to 7 bit in that case.</p>
<div class="post">[<i>The C language does not define its character set in terms of bits or even ASCII. It says that (5.1.1.2) phase 1 of translation is &quot;Physical source file mutibyte characters are mapped, in an implementation-defined manner, to the source character set.&quot; This is done <span style="text-decoration:underline;">before</span> comments are stripped in phase 3. Per 5.2.1, the source character set consists of the basic character set and the extended character set. There is no requirement that the base character set be 7-bit ASCII. (EBCDIC encoding is legal, and most of the interesting characters in EBCDIC are greater than 128.) And the language permits extended characters in comments and string literals. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011443">
				<div id="div-comment-1011443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011443">
			September 17, 2012 at 12:19 pm</a>		</div>

		<p>@No: Well do I know it, but Michael Kaplan says it cannot be done. I say screw it, fix the core APIs and most programs will behave. If anybody needs to use a program that broke, that&#39;s what program specific encoding declarations are for (note you could decide to give either the old or the new program the specific encoding rather than the session encoding).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1011453">
				<div id="div-comment-1011453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011453">
			September 17, 2012 at 12:56 pm</a>		</div>

		<p>Queue UTF-8 Napoleons in 3&#8230;2&#8230;1&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011463">
				<div id="div-comment-1011463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jas71_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>jas71@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011463">
			September 17, 2012 at 3:23 pm</a>		</div>

		<p>I like some of those dual-purpose objects, in computing and elsewhere &#8211; like the Sysinternals tools where a single EXE would deliver the appropriate tool on the DOS-based Windows family and both 32 and 64 bit Windows NT, rather than make the user figure our whether they need proxex64.exe, procex32.exe or procex95.exe &#8211; or carefully crafted sentences which have a meaning in two different language, or the entire German conversation consisting largely of the word &quot;morgen&quot;, used both as a greeting and to mean &#39;tomorrow&#39;.</p>
<p>In a way, all PE executables do this, with a &#39;DOS stub&#39; if run from the DOS command prompt &#8211; usually just showing an error message that it requires Windows, but occasionally having other functionality, like loading up the HX DOS extender to allow (some) Win32 code to run under DOS too. I think I once saw an EXE file which worked as a DOS diagnostic program, a bootable ISO image running the same diagnostic program standalone, and also as a Windows program which burned itself to CD to boot from &#8211; quite a clever trick.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-andycadley2 odd alt thread-odd thread-alt depth-1" id="comment-1011473">
				<div id="div-comment-1011473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011473">
			September 17, 2012 at 3:31 pm</a>		</div>

		<p>@No, LOL. Try telling that to 90% of the *nix world and pretty much every F/OSS application out there. Along with huge swathes of other applications written in C/C++ that absolutely and resolutely believe that one byte = one character. It&#39;s fine to say we live in a UTF-8 world if what you&#39;re mostly dealing with is really just ASCII text, but the minute you hit the multi-byte world (which happens even more with UTF-8 than with ANSI) things start to break very, very quickly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011483">
				<div id="div-comment-1011483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">chentiangemalc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011483">
			September 17, 2012 at 4:57 pm</a>		</div>

		<p>I think guess work can be greatly assisted if you know the target language of data. For example if you don&#39;t know the encoding, but you know it&#39;s supposed to be Chinese, you can work out the encoding used, as evidenced by various &quot;encoding fixers&quot; that turn gibberish back into Chinese text.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1011493">
				<div id="div-comment-1011493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011493">
			September 17, 2012 at 6:20 pm</a>		</div>

		<p>@AndyCadley: It&#39;s funny how little broke when UNIX shifted from 8-bit clean ASCII to UTF-8. Most of what broke turned out to be not 8-bit clean in corner cases and a few programs that fell down on chopped ends of UTF-8 strings (when interfacing with the old programs).</p>
<p>[&#8230;Per 5.2.1, the source character set consists of the basic character set and the extended character set. There is no requirement that the base character set be 7-bit ASCII&#8230;..]</p>
<p>Which turns out the be technically true but irrelevant as there is no CP_ other than UTF-7 that doesn&#39;t have 7-BIT so we can exclude those. As for the strings containing embedded characters, that&#39;s why I said drop bytes if inside comments.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011513">
				<div id="div-comment-1011513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011513">
			September 17, 2012 at 6:45 pm</a>		</div>

		<p>@Joshua</p>
<p>Actually not that irrelevant since it means that the compiler is codepage agnostic. This means that the compiler itself can use any codepage as long as it can handle all of the basic C characters, and UTF-7 can, so you can&#39;t even exclude that. So basically, the compiler can use UTF-8, UTF-16 or even UTF-32 as its basic character set and not have any standard issues.</p>
<p>This is also why it isn&#39;t easy to drop unknown bytes inside comments. What happens if the malformed bytes include one or both of the */ of a multi line comment? You will end up with a malformed program. So if a compiler does just drop comments even if it can&#39;t parse all of it under the assumption &quot;it is all a comment&quot; then you will end up with the possibility of the compiler incorrectly translating the program. While it is frustrating, I agree with a compiler error in the cases where it can&#39;t successfully read everything.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1011523">
				<div id="div-comment-1011523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011523">
			September 17, 2012 at 7:15 pm</a>		</div>

		<p>@Malcolm: I don&#39;t think so&#8230; Take Google translate for example. Sometimes it&#39;s autodetect feature detects Simplified Chinese as Japanese&#8230; :P (Although I think the codepage has changed automatically in the C&amp;P process, so what Google translate see is the bytes after it changed to UTF-8)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011533">
				<div id="div-comment-1011533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">caf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011533">
			September 17, 2012 at 10:36 pm</a>		</div>

		<p>“ I replied, &quot;What code page is your char string in?&quot; ”</p>
<p>Raymond demonstrates the Socratic method ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1011543">
				<div id="div-comment-1011543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Skyborne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011543">
			September 18, 2012 at 5:40 am</a>		</div>

		<p>After using {popular open-source database that silently mangles input by default}, and Python, I have to say I&#39;m in favor of halting noisily on input encoding errors. &nbsp;Programming is hard enough when you think you know what you&#39;re doing; going full garbage-in/garbage-out makes tracing the source of the error especially painful.</p>
<p>@AndyCadley, I haven&#39;t had UTF-8 issues in FOSS in ages. &nbsp;Other than cleaning up messes other people made by throwing utf-8 byte streams into &quot;latin1&quot; columns (which are, in fact, windows-1252) of {popular database}.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011653">
				<div id="div-comment-1011653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011653">
			September 18, 2012 at 11:20 am</a>		</div>

		<p>Wow, that&#39;s one way of doing header file switches I&#39;ve never seen.</p>
<p>/me wonders why.</p>
<p>/me is sure it has nothing to do with encoding.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1011673">
				<div id="div-comment-1011673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011673">
			September 18, 2012 at 12:28 pm</a>		</div>

		<p>When you&#39;re dealing with a really widely depoloyed product (like Windows), &quot;vanishingly small&quot; risks happen all the time.</p>
<p>Suppose there is a bug that only hits 0.1% of users.</p>
<p>If you have ten million users, that hits 10,000 people.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011583">
				<div id="div-comment-1011583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011583">
			September 18, 2012 at 8:14 am</a>		</div>

		<p>@Crescens2k: If that happens in the example encoding, the end multibyte sequence will cause a compiler error. The probability of a malformed stream being fixed to compile by dropping bytes and then causing a runtime error is vanishingly small.</p>
<div class="post">[<i>I disagree that the risk is vanishingly small. Consider:<br /><code>/* ❦ ENABLE_EXTRA_BOOST /* change symbol to close-comment for extra boost */</code><br />This is a plausible pattern for configuration header&nbsp;files. If the ❦ gets mis-parsed as a close-comment, extra boost will be enabled when it shouldn&#39;t. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1011703">
				<div id="div-comment-1011703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011703">
			September 18, 2012 at 3:51 pm</a>		</div>

		<p>One that I ran into in the past is that the ASCII code point for backslash can be a valid trailing byte in the Shift-JIS code page. &nbsp;If the C compiler is not aware that your source file is Shift-JIS, and you have one of these Japanese characters at the end of a single-line comment, the compiler will consider the following line to be a comment as well. &nbsp;That was a fun one to figure out.</p>
<p>Personally, I use precomposed UTF-8 for application internals, then convert between that and whatever the OS expected when calling into the OS-abstraction libraries. &nbsp;In Linux, it passes through. &nbsp;In Windows, it converts to and from UTF-16. &nbsp;In Mac OS X, it normally passes through, but sometimes needs to do precomposed&lt;-&gt;composite conversion.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011713">
				<div id="div-comment-1011713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011713">
			September 18, 2012 at 4:40 pm</a>		</div>

		<p>@Myria: Ah yes the // bozo where invisible. I always considered that a bug in the language specification itself. Really, I can&#39;t come up with a good excuse for a language to have a syntactical element that changes code behavior based on trailing whitespace.</p>
<p>Oh and this one&#39;s worse. Copy your file in binary mode to a *nix machine and the compilation results changes (because ^M and ^J are now two characters rather than one).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt thread-odd thread-alt depth-1" id="comment-1011893">
				<div id="div-comment-1011893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011893">
			September 19, 2012 at 11:16 am</a>		</div>

		<p>For a long while, Windows SDK had an extravagant apostrophe in mmsystem.h which caused a warning in Hebrew code page. The problem was that Visual Studio 6 insisted on using this code page and resources language (in the dialogue editor) based on the computer regional settings.</p>
<p>But this was only a warning.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1011963">
				<div id="div-comment-1011963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120917-00/?p=6583#comment-1011963">
			September 19, 2012 at 4:35 pm</a>		</div>

		<p>@Alex Cohn, can you give me more information on the mmsystem.h apostrophe? &nbsp;I&#39;m looking at some versions going back as far as 1999 and I&#39;m not seeing it (though I might not be looking correctly.) You can email me at (mateer at microsoft dot com) in case I forget to check this thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

