<html>
<head>
<title>Converting from traditional to simplified Chinese, part 2: Using the dictionary</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Converting from traditional to simplified Chinese, part 2: Using the dictionary</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 12, 2005 / year-entry #187</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050712-10/?p=34963</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Now that we have our traditional-to-simplified pseudo-dictionary, we can use it to generate simplified Chinese words in our Chinese/English dictionary. class StringPool { public: StringPool(); ~StringPool(); LPWSTR AllocString(const WCHAR* pszBegin, const WCHAR* pszEnd); LPWSTR DupString(const WCHAR* pszBegin) { return AllocString(pszBegin, pszBegin + lstrlen(pszBegin)); } ... }; The DupString method is a convenience we will use...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Now that we have our traditional-to-simplified pseudo-dictionary,
we can use it to generate simplified Chinese words in our
Chinese/English dictionary.
</p>
<pre>
class StringPool
{
public:
 StringPool();
 ~StringPool();
 LPWSTR AllocString(const WCHAR* pszBegin, const WCHAR* pszEnd);
 <font COLOR=blue>LPWSTR DupString(const WCHAR* pszBegin)
 {
  return AllocString(pszBegin, pszBegin + lstrlen(pszBegin));
 }</font>
 ...
};
</pre>
<p>
The <code>DupString</code> method is a convenience we will use
below.
</p>
<pre>
Dictionary::Dictionary()
{
 ...
    if (de.Parse(buf, buf + cchResult, m_pool)) {
     <font COLOR=blue>bool fSimp = false;
     for (int i = 0; de.m_pszTrad[i]; i++) {
      if (pmap-&gt;Map(de.m_pszTrad[i])) {
       fSimp = true;
       break;
      }
     }
     if (fSimp) {
      de.m_pszSimp = m_pool.DupString(de.m_pszTrad);
      for (int i = 0; de.m_pszTrad[i]; i++) {
       if (pmap-&gt;Map(de.m_pszTrad[i])) {
        de.m_pszSimp[i] = pmap-&gt;Map(de.m_pszTrad[i]);
       }
      }
     } else {
      de.m_pszSimp = NULL;
     }</font>
     v.push_back(de);
    }
 ...
}
</pre>
<p>
After we parse each entry from the dictionary, we scan the
traditional Chinese characters to see if any of them have
been simplified.
If so, then we copy the traditional Chinese string and
use the <code>Trad2Simp</code> object to convert it to
simplified Chinese.
</p>
<p>
If the string is the same in both simplified and traditional
Chinese, then we set <code>m_pszSimp</code> to <code>NULL</code>.
This may seem a bit odd, but it'll come in handy later.
Yes, it makes the <code>m_pszSimp</code> member difficult
to use.  I could have created an accessor function for it
(so that it falls back to traditional Chinese if
the simplified Chinese is <code>NULL</code>),
but I'm feeling lazy right now, and this is just a one-shot program.
</p>
<pre>
void RootWindow::OnGetDispInfo(NMLVDISPINFO* pnmv)
{
 ...
  switch (pnmv->item.iSubItem) {
   case COL_TRAD:    pszResult = de.m_pszTrad;    break;
   <font COLOR=blue>case COL_SIMP:    pszResult =
      de.m_pszSimp ? de.m_pszSimp : de.m_pszTrad; break;</font>
   case COL_PINYIN:  pszResult = de.m_pszPinyin;  break;
   case COL_ENGLISH: pszResult = de.m_pszEnglish; break;
  }
 ...
}
</pre>
<p>
Finally, we tell our <code>OnGetDispInfo</code> handler
what to return when the listview asks for the text that goes
into the simplified Chinese column.
With these changes, we can display both the traditional and
simplified Chinese for each entry in our dictionary.
</p>
<p>
Next time, a minor tweak to our display code,
which happens to illustrate custom-draw as a nice side-effect.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-290213">
				<div id="div-comment-290213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hmmm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050712-10/?p=34963#comment-290213">
			July 12, 2005 at 11:55 am</a>		</div>

		<p>All well and good, but will this help get Longhorn shipped (with some features, please) any quicker? Or is this whole blogging thing (not Raymnod Chan specifically, but M$-wide) just a way to increase &quot;visibility&quot; and play a little CYA for the stack-rank game?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-290233">
				<div id="div-comment-290233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050712-10/?p=34963#comment-290233">
			July 12, 2005 at 12:10 pm</a>		</div>

		<p>I just happened to come across this dictionary design. Very interesting. Just wondering if you would take this all the way thru and finally expose as it as a COM Component.<br />
<br /> I am also interested in how MS folks design their UI apps(like Office) with automation in their mind. Would you please blog on this sometime in future? Thanks for the wonderful insights your blogs bring.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-290253">
				<div id="div-comment-290253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050712-10/?p=34963#comment-290253">
			July 12, 2005 at 2:55 pm</a>		</div>

		<p>hmmm: The #1 priority at all times at Microsoft is helping existing customers.  The #2 priority varies between fixing security issues (when there are some assigned to you), and working on your project.</p>
<p>This isn&#8217;t about ranking (god knows Raymond don&#8217;t need more reputation) &#8212; it&#8217;s about helping people deal with the strange world of Win32 programming.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ryanmy odd alt thread-odd thread-alt depth-1" id="comment-290263">
				<div id="div-comment-290263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ryanmy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050712-10/?p=34963#comment-290263">
			July 12, 2005 at 3:27 pm</a>		</div>

		<p>Ben makes excellent points&#8230; and in any case, Raymond is known to write posts for this blog far, far in advance &#8212; sometimes months ahead &#8212; in order to ensure that they keep coming even when all of us are hunkered down for Beta 1.  (That&#8217;s why I haven&#8217;t updated lately :P)</p>
<p>By the way, you might want to spew your drivel over at some of the Google guys &#8212; they&#8217;re actually required to spend part of their day working on something other than their product.   (But then, if it spends years in public beta, can it really be said to ship?) It&#8217;s funny how double standards work&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-290223">
				<div id="div-comment-290223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Craig Ringer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050712-10/?p=34963#comment-290223">
			July 12, 2005 at 12:04 pm</a>		</div>

		<p>Personally, I find this weblog very interesting and useful. That&#8217;s despite the fact that I don&#8217;t even *use* win32, let alone program for it, unless I really can&#8217;t avoid it.</p>
<p>Also, consider the public discussion and feedback that comes of things like this. I can&#8217;t help but see that being useful. It might not &quot;help get longhorn shipped&quot; any faster, but I imagine it&#8217;ll help it be better designed. Personally, I&#8217;d prefer that.</p>
<p>You might also do well to get the name of the person whose weblog you are criticising correct in future.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-290283">
				<div id="div-comment-290283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mattd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050712-10/?p=34963#comment-290283">
			July 12, 2005 at 6:34 pm</a>		</div>

		<p>hmmmm,<br />
<br />Why are you in a hurry to get longhorn? What is so big about it. I thought basicly everything a dev would care about is being back ported anyway? With WinFS pulled I just don&#8217;t see much to it. Even the newly dropped screen shots were a bit *yawn*. I will say that the new driver model with WDF looks cool but&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-290303">
				<div id="div-comment-290303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan Moore</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050712-10/?p=34963#comment-290303">
			July 13, 2005 at 12:30 am</a>		</div>

		<p>Is there some reasoning behind the choice to use LPWSTR (or LPCWSTR) over WCHAR* (or const WCHAR*)?  At first it seemed that LPWSTR was only being used for a null terminated array, however the StringPool::DupString method eliminates that idea.  </p>
<p>I guess that I have never really understood the point of the LPTYPE vs TYPE*.  Or the point of the CHAR typedef for that matter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-290313">
				<div id="div-comment-290313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050712-10/?p=34963#comment-290313">
			July 13, 2005 at 10:35 am</a>		</div>

		<p>Nathan: You&#8217;re right, I should&#8217;ve used LPCWSTR since the string is null-terminated.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

