<html>
<head>
<title>CoUninitalize will ask a DLL if it is okay to unload now, but the answer is a foregone conclusion</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>CoUninitalize will ask a DLL if it is okay to unload now, but the answer is a foregone conclusion</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 6, 2013 / year-entry #296</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20131106-00/?p=2723</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The Dll­Can­Unload­Now entry point is exported by COM in-proc servers. COM host applications call Co­Free­Unused­Libraries periodically to ask COM to do DLL housecleaning, and in response, COM asks each DLL if it is okay to be unloaded. If so, then COM unloads the DLL. What is not well-known is that COM also does DLL housecleaning...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The
<code>Dll&shy;Can&shy;Unload&shy;Now</code> entry point
is exported by COM in-proc servers.
COM host applications call
<code>Co&shy;Free&shy;Unused&shy;Libraries</code> periodically
to ask COM to do DLL housecleaning,
and in response, COM asks each DLL if it is okay to be unloaded.
If so, then COM unloads the DLL.
</p>
<p>
What is not well-known is that COM also does DLL housecleaning
when you shut down the last apartment by calling
<code>Co&shy;Uninitialize</code>.
When that happens, COM will still go around asking each DLL
whether it's okay to be unloaded,
but the question is merely a formality, because
<i>regardless of your answer, COM will unload you anyway</i>.
</p>
<p>
The story here is that COM is being shut down for the process,
so COM knows that when the last
<code>Co&shy;Uninitialize</code> is finished,
all COM objects will be destroyed.
After all, if you don't have COM, then you can't have any COM objects.
</p>
<p>
As a courtesy, COM will ask you,
"Is it okay to unload you?"
in case you want to do some early cleanup.
But it will ignore your answer.
</p>
<p>
This means that you need to exercise caution if you call
<code>Co&shy;Uninitialize</code> or
<code>Co&shy;Free&shy;Unused&shy;Libraries</code> from
your COM in-proc server,
because the call may end up freeing your code out from under you.
</p>
<p>
For example, one third-party crash I investigated boiled down to a
COM object whose destructor went like this:
</p>
<pre>
MyComObject::~MyComObject()
{
 .. blah blah blah ..

 // Let DllCanUnloadNow know that we have one
 // fewer active COM object
 _Module.Unlock();

 CoFreeUnusedLibraries();
}
</pre>
<p>
It so happened that this was the last COM object created
by the DLL,
so the <code>_Module.<wbr>Unlock()</code> call dropped
the DLL object count to zero.
The COM server then inexplicably called
<code>Co&shy;Free&shy;Unused&shy;Libraries</code> (something
that is supposed to be called by the host, not a plug-in),
and
<code>Co&shy;Free&shy;Unused&shy;Libraries</code> did
what it was told and asked each DLL,
"Hey,
do you mind if I unload you now?"
The DLL's
<code>Dll&shy;Can&shy;Unload&shy;Now</code> function
saw that the active COM object count was zero,
so it said,
"Sure, go ahead."
</p>
<p>
I hope you see where this is going.
</p>
<p>
COM unloads your DLL because you said you were okay
with it.
The call to
<code>Co&shy;Free&shy;Unused&shy;Libraries</code> eventually
returns,
but its return address is inside the <code>My&shy;Com&shy;Object</code>
destructor, which was unloaded because
<i>you said it was okay to unload</i>.
</p>
<p>
The fix here is to remove the call to
<code>Co&shy;Free&shy;Unused&shy;Libraries</code>.
It shouldn't have been there in the first place.
</p>
<p>
A more common error is creating a background thread
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/11/05/10463645.aspx">
without bumping the DLL reference count</a>.
When the last COM apartment shuts down, COM will free
your DLL,
thereby stranding your worker thread.
You need to use the
<code>Free&shy;Library&shy;And&shy;Exit&shy;Thread</code>
trick to keep your DLL loaded until the background thread finishes.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1087843">
				<div id="div-comment-1087843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Niklas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131106-00/?p=2723#comment-1087843">
			November 6, 2013 at 10:01 am</a>		</div>

		<p>What&#39;s with all the COM articles lately? Is it having a renaissance?</p>
<p>(One time I almost thought it was deprecated in favor of newer technologies.)</p>
<div class="post">[<em>Huh? My last COM article was in <a href="http://blogs.msdn.com/b/oldnewthing/archive/2013/07/21/10435335.aspx">July</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1087863">
				<div id="div-comment-1087863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131106-00/?p=2723#comment-1087863">
			November 6, 2013 at 11:43 am</a>		</div>

		<p>I think he is referring to the fact that you have been using COM in a lot of your little programs lately.</p>
<div class="post"><em>I don&#39;t choose topics based on whether the API happens to be exposed as a COM interface. I didn&#39;t realize people thought I did. &quot;Gosh, I should write about topics that happen to use COM interface.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1087873">
				<div id="div-comment-1087873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Grier [MSFT]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131106-00/?p=2723#comment-1087873">
			November 6, 2013 at 12:00 pm</a>		</div>

		<p>COM is dead? &nbsp;Hardly! &nbsp;COM is the fundamental underpinnings of WinRT the next generation API. &nbsp;LarryO may cringe with me saying this but basically WinRT == COM + real metadata to describe interfaces instead of typeinfos. &nbsp;It turns out you don&#39;t have to build a whole virtual machine infrastructure to get the benefits of well described metadata.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1087883">
				<div id="div-comment-1087883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131106-00/?p=2723#comment-1087883">
			November 6, 2013 at 1:06 pm</a>		</div>

		<p>Maybe Iâ€™m missing something obvious here but it looks to me that even after removal of the call to CoFreeUnusedLibraries there is still a racing condition between the host calling it and the COM object leaving the destructor.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1087923">
				<div id="div-comment-1087923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131106-00/?p=2723#comment-1087923">
			November 6, 2013 at 9:38 pm</a>		</div>

		<p>@K:</p>
<p>According to the MSDN from the documentation for CoFreeUnusedLibrariesEx, CoFreeUnusedLibraries is basically the equivalent of CoFreeUnusedLibrariesEx(INFINITE, 0); and this defaults to a 10 minute delay for MTA and NA threads, if the object is used within that period of time, then Windows will remove it from the pending list and cancel the unload.</p>
<p>You should read <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms678413(v=vs.85).aspx">msdn.microsoft.com/&#8230;/ms678413(v=vs.85).aspx</a> for a detailed description.</p>
<p>The CoFreeUnusedLibraries function is marked as 16 bit compatibility, so it is no wonder that the original design wasn&#39;t thread safe.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1087943">
				<div id="div-comment-1087943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Niklas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131106-00/?p=2723#comment-1087943">
			November 7, 2013 at 1:53 am</a>		</div>

		<p>&gt; Huh? My last COM article was in July.</p>
<p>I kinda connected the article before this one to COM as well. Maybe that was not the case on closer consideration. Well, it was about unloading at least :)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

