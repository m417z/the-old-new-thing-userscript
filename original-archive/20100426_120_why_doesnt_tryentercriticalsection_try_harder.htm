<html>
<head>
<title>Why doesn't TryEnterCriticalSection try harder?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why doesn&#8217;t TryEnterCriticalSection try harder?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 26, 2010 / year-entry #121</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>23</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Bart wants to know why the Try­Enter­Critical­Section gives up if the critical section is busy instead of trying the number of times specified by the critical section spin count. Actually, there was another condition on the proposed new behavior: "but does not release its timeslice to the OS if it fails to get it while...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Bart wants to know
<a HREF="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#1317239">
why the <code>Try&shy;Enter&shy;Critical&shy;Section</code>
gives up if the critical
section is busy instead of trying the number of times specified by
the critical section spin count</a>.
</p>
<p>
Actually, there was another condition on the proposed new behavior:
"but does not release its timeslice
to the OS if it fails to get it while spinning."
This second condition is a non-starter because you can't prevent
the operating system from taking your timeslice away from you.
The best you can do is detect that you lost your previous
timeslice when you receive the next one.
And even that is expensive: You have to keep watching the CPU cycle
counter, and if it jumps by too much, then you lost your timeslice.
(And you might have lost it due to a hardware interrupt or paging.
Good luck stopping those from happening.)
</p>
<p>
Even if there were a cheap way of detecting that the operating system
was about to take your timeslice away from you, what good would it do?
"Oh, my calculations indicate that if I spin one more time,
I will lose my timeslice, so I'll just fail and return."
Now the application regains control with 2 instructions left
in its timeslice.
That's not even enough time to test the return value and take
a conditional jump!
Even if the <code>Try&shy;Enter&shy;Critical&shy;Section</code> managed to
return just before the timeslice expired, that's hardly any
consolation, because the timeslice is going to expire
before the application can react to it.
Whatever purpose there was to "up to the point where you're
about to release the timeslice"
is lost.
</p>
<p>
Okay, maybe the intention of that clause was
"without intentionally releasing its timeslice
(but if it loses its timeslice in the normal course of events,
well that's the way the cookie crumbles)."
That brings us back to the original question.
Why doesn't <code>Try&shy;Enter&shy;Critical&shy;Section</code> try harder?
Well, because if it tried harder, then the people who didn't want
it to try hard at all would complain that it tried too hard.
</p>
<p>
The function <code>Try&shy;Enter&shy;Critical&shy;Section</code> may have
been ambiguously named, because it doesn't describe <i>how hard</i>
the function should try.
Though in general, functions named <code>TryXxx</code> try only once,
and that's the number of times
<code>Try&shy;Enter&shy;Critical&shy;Section</code> tries.
Perhaps a clearer (but bulkier name) would have been
<code>Enter&shy;Critical&shy;Section&shy;If&shy;Not&shy;Owned&shy;By&shy;Another&shy;Thread</code>.
</p>
<p>
The <code>Try&shy;Enter&shy;Critical&shy;Section</code> function
represents the core of the
<code>Enter&shy;Critical&shy;Section</code> function.
In pseudocode, the two functions work like this:
</p>
<pre>
BOOL TryEnterCriticalSection(CRITICAL_SECTION *CriticalSection)
{
  atomically {
   if (CriticalSection is free or is owned by the current thread) {
     claim the critical section and return TRUE;
   }
  }
  return FALSE;
}

void EnterCriticalSection(CRITICAL_SECTION *CriticalSection)
{
 for (;;) {
  DWORD SpinTimes = 0;
  do {
    if (TryEnterCriticalSection(CriticalSection)) return;
  } while (++SpinTimes &lt; GetSpinCount(CriticalSection));
  WaitForCriticalSectionOwnerToLeave(CriticalSection);
 }
}
</pre>
<p>
The <code>Try&shy;Enter&shy;Critical&shy;Section</code> function represents
the smallest meaningful part of the <code>Enter&shy;Critical&shy;Section</code>
process.
If you want it to spin, you can write your own
<code>Try&shy;Enter&shy;Critical&shy;Section&shy;With&shy;Spin&shy;Count</code>
function:
</p>
<pre>
BOOL TryEnterCriticalSectionWithSpinCount(
    CRITICAL_SECTION *CriticalSection,
    DWORD SpinCount)
{
  DWORD SpinTimes = 0;
  do {
    if (TryEnterCriticalSection(CriticalSection)) return TRUE;
  } while (++SpinTimes &lt; SpinCount);
  return FALSE;
}
</pre>
<p>
(Unfortunately, there is no
<code>Get&shy;Critical&shy;Section&shy;Spin&shy;Count</code>
function, so you'll just have to keep track of it yourself.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-828613">
				<div id="div-comment-828613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">w8</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828613">
			April 26, 2010 at 7:54 am</a>		</div>

		<p>Why does EnterCriticalSection wait for critical section owner to leave?</p>
<p>And why can TryEnterCriticalSection enter an already owned cs?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-828623">
				<div id="div-comment-828623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bill</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828623">
			April 26, 2010 at 8:29 am</a>		</div>

		<p>w8:</p>
<p>EnterCriticalSection waits for the owner to leave because the section is critical.</p>
<p>TryEnterCriticalSection does not enter an already owned CS. It tries to enter it and fails. The return value lets the caller know it failed and that the caller had better not do whatever it is thinking about doing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-828633">
				<div id="div-comment-828633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828633">
			April 26, 2010 at 8:43 am</a>		</div>

		<p>@w8:</p>
<p>The CS state contains a ThreadId of the owner. If a CS is not owned, that field is some value that can&#8217;t be an id, like 0 or -1.</p>
<blockquote><p>
  Why does EnterCriticalSection wait for critical section owner to leave?
</p></blockquote>
<p>Because that&#8217;s what its documentation says.</p>
<blockquote><p>
  And why can TryEnterCriticalSection enter an already owned cs?
</p></blockquote>
<p>It can only enter it if <em>this</em> thread already owns it. Same as EnterCriticalSection.</p>
<p>Although I think the application design should avoid using the reentrancy. It may make code maintenance very difficult, in the area of lock hierarchy and deadlock avoidance. If you acquire a CS recursively, that mostly happens because you call functions while holding it. And calling functions while holding a lock is something you should avoid.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-828663">
				<div id="div-comment-828663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828663">
			April 26, 2010 at 9:37 am</a>		</div>

		<p>Is it overly pessimistic that my first thought on reading the question was: &quot;I bet this is going to be used for premature optimization&quot;. &nbsp;</p>
<p>I&#8217;d also bet the number of programmers playing with the spin count on their mutexes is massively higher than the number who&#8217;ve profiled the code sufficiently well to determine that lock-contention and semaphore overhead is actually a bottleneck&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-828673">
				<div id="div-comment-828673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">alex</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828673">
			April 26, 2010 at 10:00 am</a>		</div>

		<p>One common case when you use TryLock is when what you are trying to do is optional. &nbsp;Ie, receiving the result of another thread that may or may not be done but will take awhile holding the lock to return the value. &nbsp;If you are spinning in a loop doing useful work and checking for the result you don&#8217;t want to get blocked from doing work while the other thread is still holding the lock. &nbsp;A simple example might be updating app statistics, not necessary for any particular step but should be done once in awhile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-828693">
				<div id="div-comment-828693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828693">
			April 26, 2010 at 12:08 pm</a>		</div>

		<p>Perhaps this is too much to ask, but maybe the people who ask a question like this should read a book on concurrent programming, attend a class on the subject at a decent university, or even read someone else&#8217;s source code or disassemble proprietary implementations, etc., before they start asking. &nbsp;These things become much more apparent when you know what you&#8217;re talking about.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-828703">
				<div id="div-comment-828703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://windowssucks.wordpress.com/' rel='external nofollow' class='url'>WndSks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828703">
			April 26, 2010 at 1:49 pm</a>		</div>

		<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/magazine/cc164040.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/magazine/cc164040.aspx</a> sort of documents and extends the CRITICAL_SECTION struct (I know MSDNMag != official docs)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-828713">
				<div id="div-comment-828713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DodgyBob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828713">
			April 26, 2010 at 9:37 pm</a>		</div>

		<p>Maybe MS needs some more API calls:</p>
<p>Try&#173;Enter&#173;Critical&#173;Section</p>
<p>Try&#173;Enter&#173;Critical&#173;SectionABitHarder</p>
<p>Try&#173;Enter&#173;Critical&#173;SectionAsMuchAsPracticable</p>
<p>Try&#173;Enter&#173;Critical&#173;SectionEvenHarderStill</p>
<p>and so on.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-828733">
				<div id="div-comment-828733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828733">
			April 26, 2010 at 10:31 pm</a>		</div>

		<p>@Anonymous: I remember our OS course. We drilled heavily on concurrent processing, doing all sorts of locks and stuff, and why we do it.</p>
<p>Now I get a bit paranoid when doing re-entrant stuff with all the locks.</p>
<p>Re-entrant locks are useful if you have helper functions that require grabbing the lock, and wrappers around those that encapsulate more functionality and also require the same lock. You can architect around it, but it can be annoying.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-828743">
				<div id="div-comment-828743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828743">
			April 26, 2010 at 11:08 pm</a>		</div>

		<p>@DodgyBob</p>
<p>While you surely intended that for parody purposes, I&#8217;ve always thought you should stash a few fake features in your product to please demanding customers. Placebo features, if you will.</p>
<p>Stuff your &quot;Try&#173;Enter&#173;Critical&#173;SectionABitHarder&quot; in a DLL, have it sleep for 1ms, then call Try&#173;Enter&#173;Critical&#173;Section. Don&#8217;t document the function, just leave it there. When some customer who clearly doesn&#8217;t know what they are doing comes demanding improvements, you can show them this &quot;secret&quot; undocumented solution. They will probably walk away pleased.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-828753">
				<div id="div-comment-828753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">-Sander1981-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828753">
			April 27, 2010 at 4:53 am</a>		</div>

		<p>@Scott</p>
<p>Now you have two functions to maintain&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-828763">
				<div id="div-comment-828763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828763">
			April 27, 2010 at 5:33 am</a>		</div>

		<p>@DodgyBob</p>
<p>More like:</p>
<p>Try&#173;Enter&#173;Critical&#173;Section</p>
<p>Try&#173;Enter&#173;Critical&#173;SectionEx</p>
<p>Try&#173;Enter&#173;Critical&#173;SectionEx2</p>
<p>Try&#173;Enter&#173;Critical&#173;SectionEx2Ex</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-828793">
				<div id="div-comment-828793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828793">
			April 27, 2010 at 8:18 am</a>		</div>

		<p>DontTryEnterCriticalSection would be an easier decoy function from the maintenance viewpoint.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-828803">
				<div id="div-comment-828803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://windowssucks.wordpress.com/' rel='external nofollow' class='url'>WndSks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828803">
			April 27, 2010 at 8:20 am</a>		</div>

		<p>One could argue that there should be a EnterCriticalSectionHighPriority (In a multi reader single writer scenario where writes are important and infrequent)</p>
<p>I have not really looked at the internals of how the CS works, so I&#8217;m not sure if it would be possible. Just inc&#8217;ing the refcount and forcing the threadowner to your own thread would cause issues with recursion for a thread that already had the lock. (I&#8217;m guessing threadowner is not verified on CS leave)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-828823">
				<div id="div-comment-828823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828823">
			April 27, 2010 at 8:37 am</a>		</div>

		<p>@WndSks,</p>
<p>Try to define your &quot;high priority&quot; behavior. You&#8217;ll see that it doesn&#8217;t make sense.</p>
<p>In one possible CS implementations, the threads would be waiting for the CS&#8217;s internal event, if the CS is already owned. When CS is released and the event is signalled, the kernel will release the first thread in the wait list (in most cases; barring some special circumstances). Thus, it gives CS some fairness. There is no facility to move a thread into the head of the wait list.</p>
<p>Also, if at the same moment the CS is released, yet another thread tries to claim it, it could get it first, even though there are other threads in the line.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-828843">
				<div id="div-comment-828843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">WndSks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828843">
			April 27, 2010 at 9:28 am</a>		</div>

		<p>@Alexandre Grigoriev: The point of a HighPriority function (aka AquireExclusiveStarveShared) is not to be fair. If you could set yourself as the ownerthread without actually having the lock, other waiting threads would see that the lock is held and after spinning, they would end up back at the end of the events wait list. (The tricky part is of course to not screw up the recursive aquire algorithm for the thread that really has the lock)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-828863">
				<div id="div-comment-828863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828863">
			April 27, 2010 at 10:11 am</a>		</div>

		<p>@WndSks,</p>
<p>If you want a high priority requestor to put itself to the head of waiting queue, you need two events, meaning two waiting queues. It&#8217;s definitely doable. Write your own implementation, it&#8217;s not rocket science.</p>
<p>If you mean exclusive/shared usage semantics (read-write locking), see InitializeSRWLock and related functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-828873">
				<div id="div-comment-828873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828873">
			April 27, 2010 at 11:24 am</a>		</div>

		<p>@DodgyBob:</p>
<p>You left off</p>
<p>TryEnterCriticalSectionUntilAcquired()</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-828883">
				<div id="div-comment-828883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">WndSks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828883">
			April 27, 2010 at 11:35 am</a>		</div>

		<p>@Alexandre Grigoriev: InitializeSRWLock is Vista+ and is not recursive (and does not favor writers either since that is the point of my post)</p>
<p>The problem with homegrown locks is the lack of debugger support. That is why I suggested that the missing CS api (if there is one) is not some kind of try-more, but a priority-enter</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-828963">
				<div id="div-comment-828963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828963">
			April 27, 2010 at 2:27 pm</a>		</div>

		<p>@WndSks: That link you posted needs a HUGE cageat:</p>
<blockquote><p>
  Editor&#8217;s Update &#8211; 7/23/2004: This article is intended for informational purposes only and its contents should not be used to create production code. The article discusses undocumented data structures and processes internal to the Windows operating system that are subject to change in future versions, such as Longhorn.]
</p></blockquote>
<p>Actually, Raymond even posted about that very article 6.4 years ago, though I can&#8217;t fault you for not knowing about that:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2003/12/18/44425.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2003/12/18/44425.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-828983">
				<div id="div-comment-828983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-828983">
			April 27, 2010 at 2:50 pm</a>		</div>

		<p>I&#8217;m kind of surprised that someone asked this question. I&#8217;ve never hat to use critical sections myself and yet it seemed perfectly logical what &quot;TryEnter..&quot; means.</p>
<p>Actually the title reads like it were from The Daily WTF.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829093">
				<div id="div-comment-829093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://markk-b.sitesled.com/' rel='external nofollow' class='url'>MarkKB</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-829093">
			April 28, 2010 at 2:23 am</a>		</div>

		<p>@DodgyBob:</p>
<p>Personally, I think those APIs should be named as follows:</p>
<p>TryEnterCriticalSection</p>
<p>TryEnterCriticalSectionHard</p>
<p>TryEnterCriticalSectionHarder</p>
<p>TryEnterCriticalSectionHardWithAVengence</p>
<p>LiveFreeOrTryEnterCriticalSectionHard</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829183">
				<div id="div-comment-829183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100426-00/?p=14243#comment-829183">
			April 29, 2010 at 3:18 am</a>		</div>

		<p>Or perhaps,</p>
<p>ThereIsNoTryOnlyDoOrDoNotEnterCriticalSection</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

