<html>
<head>
<title>An extensible interlocked arithmetic function (via lambdas)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>An extensible interlocked arithmetic function (via lambdas)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 16, 2014 / year-entry #123</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Some time ago, I noted that you can build other interlocked operations out of Interlocked­Compare­Exchange. Here's an example: using System.Threading; public static int InterlockedMax(ref int location, int value) { int initialValue, newValue; do { initialValue = location; newValue = Math.Max(initialValue, value); } while (Interlocked.CompareExchange(ref location, newValue, initialValue) != initialValue); return initialValue; } (There's a corresponding...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Some time ago, I noted that
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/09/15/229915.aspx">
you can build other interlocked operations out of
<code>Interlocked&shy;Compare&shy;Exchange</code></a>.
Here's an example:
</p>
<pre>
using System.Threading;

public static int InterlockedMax(ref int location, int value)
{
    int initialValue, newValue;
    do
    {
        initialValue = location;
        newValue = Math.Max(initialValue, value);
    }
    while (Interlocked.CompareExchange(ref location, newValue,
                                       initialValue) != initialValue);
    return initialValue;
}
</pre>
<p>
(There's a corresponding C++ version, which I leave as an exercise.)
</p>
<p>
This function atomically updates a "highest value seen so far" variable.
It follows the usual pattern:
</p>
<ul>
<li>Capture the starting value.
<li>Do a computation based on that value.
<li>Compare-exchange the new value in.
<li>If the compare-exchange failed, then start over.
</ul>
<p>
(For bonus points, add an
early-out if the operation should be abandoned.)
</p>
<p>
You can make this function extensible by use of lambdas,
so that you can update the old value with any computation you like.
</p>
<pre>
using System;
using System.Threading;

public static int InterlockedCombine(ref int location,
                                     Func&lt;int, int&gt; update)
{
    int initialValue, newValue;
    do
    {
        initialValue = location;
        newValue = update(initialValue);
    }
    while (Interlocked.CompareExchange(ref location, newValue,
                                       initialValue) != initialValue);
    return initialValue;
}

public static int InterlockedMax(ref int location, int value)
{
    return InterlockedCombine(ref location,
                              v =&gt; Math.Max(v, value));
}

public static int InterlockedMultiply(ref int location, int value)
{
    return InterlockedCombine(ref location,
                              v =&gt; v * value);
}

public static int InterlockedIncrementWithSaturation(
    ref int location, int maximum)
{
    return InterlockedCombine(ref location,
                              v =&gt; v &lt; maximum ? v + 1 : maximum);
}

public static int InterlockedCompareExchangeIfNotEqual(
    ref int location, int newValue, int avoidValue)
{
    return InterlockedCombine(ref location,
                              v =&gt; v != avoidValue ? newValue : avoidValue);
}
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1124743">
				<div id="div-comment-1124743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124743">
			May 16, 2014 at 8:56 am</a>		</div>

		<p>A possible problem I see is the following: Two threads running on different processors can get stuck in an infinite loop if they attempt, for example, InterlockedMultiply(location, -1) at the same time. But making the latter possible is probably the reason for using interlocked functions in the first place.</p>
<div class="post">[<em>InterlockedIncrement has the same problem. (On most processors, InterlockedIncrement is written in terms of InterlockedCompareExchange, so if two threads are both trying to increment, then theoretically they can lock each other out.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1124753">
				<div id="div-comment-1124753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124753">
			May 16, 2014 at 10:56 am</a>		</div>

		<p>@Robert: No they wouldn&#39;t, but a single thread running InterlockedMultiply(location, 1) would.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1124763">
				<div id="div-comment-1124763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124763">
			May 16, 2014 at 11:09 am</a>		</div>

		<p>@Joshua</p>
<p>O.K., I got it now. I missed the &quot;compare&quot; part of CompareExchange. Though I don&#39;t see the problem with InterlockedMultiply(location, 1).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1124783">
				<div id="div-comment-1124783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathaniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124783">
			May 16, 2014 at 11:39 am</a>		</div>

		<p>@Robert: what value do you get if you multiply it by one? How will the loop terminate in that case?</p>
<div class="post">[<em>The return value of CompareExchange is the <span style="text-decoration:underline;">previous</span> value, not the updated value. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1124793">
				<div id="div-comment-1124793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124793">
			May 16, 2014 at 12:09 pm</a>		</div>

		<p>[The return value of CompareExchange is the previous value, not the updated value. -Raymond]</p>
<p>When multiplying by 1, previous = updated. I can&#39;t believe I had to write this.</p>
<div class="post">[<em>So what&#39;s the problem? The previous value matches, so the loop terminates. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1124803">
				<div id="div-comment-1124803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">viniaks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124803">
			May 16, 2014 at 12:27 pm</a>		</div>

		<p>if multipling by 1, initialValue = location = newValue, CompareExchange() will return the initialValue, and the function will exit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1124813">
				<div id="div-comment-1124813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124813">
			May 16, 2014 at 1:00 pm</a>		</div>

		<p>@Robert:</p>
<p>There will always be one contender who succeeds with the update.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1124843">
				<div id="div-comment-1124843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124843">
			May 16, 2014 at 2:15 pm</a>		</div>

		<p>&quot;InterlockedIncrement has the same problem&quot; Is this actually true? On Ix86 (and probably AMD64) the CPU is going to whatever bus locking is required, increment the value and then invalidate the cache on the other cores in one operation. There is no loop to get stuck in.</p>
<p>On Win95 (and Win98&amp;ME?) InterlockedIncrement (Ix86) is just LOCK INC while later versions of Windows seem to use LOCK XADD which gets you the correct previous value and not just a &quot;isZero bool&quot;. Sadly I don&#39;t think the VC intrinsic will ever generate the LOCK INC version :(</p>
<div class="post">[<em>Great, now look at the other processor architectures, like AXP, MIPS, PPC, ARM. They don&#39;t have bus-locked operations. Everybody else uses LL/SC. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1124873">
				<div id="div-comment-1124873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124873">
			May 16, 2014 at 4:13 pm</a>		</div>

		<p>[So what&#39;s the problem? The previous value matches, so the loop terminates. -Raymond]</p>
<p>Ok I screwed that one up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1124823">
				<div id="div-comment-1124823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124823">
			May 16, 2014 at 1:10 pm</a>		</div>

		<p>I think we have to clarify how InterlockedÂ­CompareÂ­Exchange actually works. Basically it does the following atomically:</p>
<p>InterlockedÂ­CompareÂ­Exchange(destination, newVal, prevVal) {</p>
<p> &nbsp; &nbsp; curVal = *destination;</p>
<p> &nbsp; &nbsp; if (curVal == prevVal) {</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; *destination = newVal;</p>
<p> &nbsp; &nbsp; }</p>
<p> &nbsp; &nbsp; return curVal;</p>
<p>}</p>
<p>So neither a single thread incrementing, nor two threads multiplying by -1, or one thread multiplying by 1 will be a problem. Well there&#39;s the age-old ABA problem (ll/SC instead of CAS solves that one nicely but we can fix it for CAS too &#8211; that needs pretty much a custom approach though), but that&#39;s it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1124863">
				<div id="div-comment-1124863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124863">
			May 16, 2014 at 3:54 pm</a>		</div>

		<p>@Robert: Yes, livelock is *possible*, but it is unlikely to be stable in the long term, so one processor almost certainly will win. &nbsp;With interrupts, caching and other hardware activity, modern processors are quite nondeterministic at the clock cycle level, which makes InterlockedCompareExchange loops actually work well enough for uses such as this. &nbsp;Windows RT uses InterlockedCompareExchange loops like this, yet isn&#39;t seen to randomly freeze, so clearly this strategy is OK in practice on at least some load-linked store-conditional architectures, too.</p>
<p>@voo: ABA is only a problem if there is an external meaning to the exchanged values such that it matters which of the two threads acts upon the new value. &nbsp;For example, when they represent a pointer to a memory area that needs to be freed, as in SLIST_ENTRYs. &nbsp;But for something like simple numeric computations or reference counts, there&#39;s no reason to care if the ABA situation occurs &#8211; you get the result you wanted anyway.</p>
<p>@skSdnW: Visual Studio will generate &quot;lock inc&quot;, &quot;lock dec&quot; or &quot;lock add&quot; if you do _InterlockedIncrement or _InterlockedDecrement in such a way that either doesn&#39;t care about the new value or only cares about the new value in a way that only depends on the flags. &nbsp;For example, this resulted in Visual Studio 2013 generating &quot;lock add [rcx], -1&quot; followed by &quot;setz al&quot; instead of a &quot;lock xadd&quot;-based implementation:</p>
<p>bool DecrementAndAmILast(volatile long *var) { return _InterlockedDecrement(var) == 0; }</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1124883">
				<div id="div-comment-1124883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124883">
			May 17, 2014 at 2:04 am</a>		</div>

		<p>Joshua: it would help if you kept the &quot;I&#39;m a programmer, how dare you disagree with me?&quot; attitude out of the comments. We&#39;re all familiar enough with it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1124893">
				<div id="div-comment-1124893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124893">
			May 17, 2014 at 4:31 am</a>		</div>

		<p>Would there be an observable difference in behaviour if you compared newValue to initialValue before bothering with the compare exchange?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1124913">
				<div id="div-comment-1124913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124913">
			May 17, 2014 at 2:19 pm</a>		</div>

		<p>@Neil: CompareExchange gives ordering guarantees (full memory barrier actually), so on most architectures a normal load wouldn&#39;t be equivalent. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1124933">
				<div id="div-comment-1124933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124933">
			May 19, 2014 at 7:15 am</a>		</div>

		<p>@Neil:</p>
<p>Using an additional compare will not make it any more effective, and if anything, will make a collision more likely.</p>
<p>In x86/x64 processors, interlocked operations on RAM are as fast as loading a value from L1 cache and storing it back to L1 cache. There is no global bus lock involved. Thus, it doesn&#39;t make sense to try to optimize it out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1124943">
				<div id="div-comment-1124943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124943">
			May 19, 2014 at 9:16 am</a>		</div>

		<p>@alegr1: It would be interesting to know how they could be on an actual dual processor machine. I would think with modern processor speed the speed of light comes into play.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1124953">
				<div id="div-comment-1124953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124953">
			May 19, 2014 at 11:12 am</a>		</div>

		<p>Raymond: &quot;On most processors, InterlockedIncrement is written in terms of InterlockedCompareExchange&quot;.</p>
<p>I always wondered why processors don&#39;t (or can&#39;t) implement an InterlockedIncrement (or decrement) in hardware, with setting the result flags and such at the same time. &nbsp;But the more I think about it, the more it seems that doing an InterlocledCompareExchange is about the only way, even at the hardware level&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1124963">
				<div id="div-comment-1124963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124963">
			May 19, 2014 at 11:23 am</a>		</div>

		<p>@DWalker: I always thought it was about having as few multi-bus access instructions as possible. These are special on RISC architectures.</p>
<p>Hmm odd grammar. Would be multi-(bus access) if English has precedence order parenthesis.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1124983">
				<div id="div-comment-1124983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1124983">
			May 19, 2014 at 5:11 pm</a>		</div>

		<p>@alegr1, but even that implies invalidating caches in other cores when they intersect the same address, so it still has a noticeable overhead when there&#39;s even mild contention. &nbsp;Otherwise, spinning locks would all be pink flying unicorns suitable for all purposes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125013">
				<div id="div-comment-1125013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Another John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1125013">
			May 20, 2014 at 1:31 am</a>		</div>

		<p>John Doe: &quot;Otherwise, spinning locks would all be pink flying unicorns suitable for all purposes.&quot;</p>
<p>Best comment ever :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jonathan-timssungard-com even thread-even depth-1" id="comment-1125043">
				<div id="div-comment-1125043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/carbon+twelve' rel='external nofollow' class='url'>carbon twelve</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140516-00/?p=973#comment-1125043">
			May 20, 2014 at 5:28 am</a>		</div>

		<p>@Joshua: Two hyphens would do the job: multi-bus-access.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

