<html>
<head>
<title>Watching thread messages disappear</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Watching thread messages disappear</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 27, 2005 / year-entry #107</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050427-10/?p=35763</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">We saw last time that thread messages are eaten by modal loops. Today we'll illustrate, and then we'll try to fix it next time. Start with our scratch program and make the following changes: #include <shellapi.h> BOOL IsThreadMessage(MSG *pmsg) { if (pmsg->hwnd == NULL) { switch (pmsg->message) { case WM_APP: MessageBeep(-1); return TRUE; } }...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/04/26/412116.aspx">
We saw last time that thread messages are eaten by modal loops</a>.
Today we'll illustrate, and then we'll try to fix it next time.
</p>
<p>
Start with our scratch program and make the following changes:
</p>
<pre>
<font COLOR=blue>#include &lt;shellapi.h&gt;</font>

<font COLOR=blue>BOOL IsThreadMessage(MSG *pmsg)
{
 if (pmsg-&gt;hwnd == NULL) {
  switch (pmsg-&gt;message) {
   case WM_APP: MessageBeep(-1); return TRUE;
  }
 }
 return FALSE;
}</font>

<font COLOR=blue>// For illustration, we'll post a thread message every two seconds
DWORD CALLBACK ThreadProc(void *lpParameter)
{
 DWORD dwThread = PtrToUint(lpParameter);
 for (;;) {
  Sleep(2000);
  PostThreadMessage(dwThread, WM_APP, 0, 0);
 }
 return 0;
}</font>

BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
<font COLOR=blue> // Start the timer that posts the thread message
 DWORD dwThread;
 HANDLE hThread = CreateThread(NULL, 0, ThreadProc,
       UintToPtr(GetCurrentThreadId()), 0, &dwThread);
 if (!hThread) return FALSE;
 CloseHandle(hThread);

 // create some content - just to make things interesting
 g_hwndChild = CreateWindow(WC_LISTVIEW, NULL,
                            WS_CHILD | WS_VISIBLE | LVS_ICON, 0, 0, 0, 0,
                            hwnd, (HMENU)1, g_hinst, 0);
    if (!g_hwndChild) return FALSE;
    SHFILEINFO sfi;
    HIMAGELIST himl = (HIMAGELIST)SHGetFileInfo(TEXT("C:\\"), 0,
            &amp;sfi, sizeof(sfi),
            SHGFI_SYSICONINDEX | SHGFI_DISPLAYNAME | SHGFI_LARGEICON);
    if (!himl) return FALSE;
    ListView_SetImageList(g_hwndChild, himl, LVSIL_NORMAL);
    for (int i = 0; i &lt; 50; i++) {
     LVITEM item;
     item.iItem = i;
     item.iSubItem = 0;
     item.mask = LVIF_TEXT | LVIF_IMAGE;
     item.pszText = sfi.szDisplayName;
     item.iImage = sfi.iIcon;
     if (ListView_InsertItem(g_hwndChild, &amp;item) &lt; 0) return FALSE;
    }</font>
    return TRUE;
}

<font COLOR=blue>void OnClose(HWND hwnd)
{
 if (MessageBox(hwnd, TEXT("Really?"), TEXT("Title"),
     MB_YESNO) == IDYES) {
  DestroyWindow(hwnd);
 }
}</font>

// add to window procedure
<font COLOR=blue>    HANDLE_MSG(hwnd, WM_CLOSE, OnClose);</font>

    while (GetMessage(&amp;msg, NULL, 0, 0)) {
      <font COLOR=blue>if (!IsThreadMessage(&amp;msg)) {</font>
        TranslateMessage(&amp;msg);
        DispatchMessage(&amp;msg);
      <font COLOR=blue>}</font>
    }
</pre>
<p>
Run this program and notice that it beeps every two seconds,
or at least it does most of the time. If you right-click on the
caption bar or grab the edge of the window to start resizing it
or grab the scollbar or start a drag-selection or display a message box,
the beeps stop.
That's because all of those actions are modal operations, and
the modal message loop is eating the thread messages.
</p>
<p>
Save this program because we'll come back to it.
</p>
<p>
The obvious solution is to post the message to the main window
itself rather than to the thread.
You have a window handle; use it!
</p>
<pre>
DWORD CALLBACK ThreadProc(void *lpParameter)
{
 <font COLOR=blue>HWND hwnd = reinterpret_cast&lt;HWND&gt;(lpParameter);</font>
 for (;;) {
  Sleep(2000);
  <font COLOR=blue>PostMessage(hwnd</font>, WM_APP, 0, 0);
 }
 return 0;
}

 HANDLE hThread = CreateThread(NULL, 0, ThreadProc,
       <font COLOR=blue>reinterpret_cast&lt;void*&gt;(hwnd)</font>, 0, &amp;dwThread);

// add to window procedure
<font COLOR=blue> case WM_APP: MessageBeep(-1); return 0;</font>

    while (GetMessage(&amp;msg, NULL, 0, 0)) {
      <font COLOR=blue><strike>if (!IsThreadMessage(&amp;msg)) {</strike></font>
        TranslateMessage(&amp;msg);
        DispatchMessage(&amp;msg);
      <font COLOR=blue><strike>}</strike></font>
    }
</pre>
<p>
Now that that problem has been solved, I'm going to tempt fate
and solve the problem <strong>the wrong way</strong> because I
want to illustrate message filters.
Next time.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-273093">
				<div id="div-comment-273093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ragi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050427-10/?p=35763#comment-273093">
			April 27, 2005 at 4:42 pm</a>		</div>

		<p>Why not use our new c++ scratch program?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-273103">
				<div id="div-comment-273103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050427-10/?p=35763#comment-273103">
			April 27, 2005 at 4:47 pm</a>		</div>

		<p>Because this program is simple enough that it doesn&#8217;t need it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-273213">
				<div id="div-comment-273213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josh Koppang</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050427-10/?p=35763#comment-273213">
			April 28, 2005 at 8:49 pm</a>		</div>

		<p>That explains why the progress bars on dialogs for certain operations in Windows (and other programs) like copying files, etc. Stop when you click and move them. I had always expected something like this, but never really cared to investigate.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

