<html>
<head>
<title>How do I call SetTimer with a timer ID that is guaranteed not to conflict with any other timer ID?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I call SetTimer with a timer ID that is guaranteed not to conflict with any other timer ID?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 24, 2015 / year-entry #200</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150924-00/?p=91521</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Suppose you want to create a timer for a window, but you don't know what timers that window already has running. You don't want your timer to overwrite any existing timer, so you need to find a unique ID for your timer. If this were for a window message, you could use Register­Window­Message, but there...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Suppose you want to create a timer for a window,
but you don't know what timers that window already has running.
You don't want your timer to overwrite any existing timer,
so you need to find a unique ID for your timer.
If this were for a window message,
you could use
<code>Register&shy;Window&shy;Message</code>,
but there is no
corresponding
<code>Register&shy;Timer&shy;Id</code> function.
How do you generate a unique timer ID?</p>
<p>
Every window gets to decide how to assign its own timer IDs,
which are 32-bit integers on 32-bit Windows
or 64-bit integers on 64-bit Windows.
If you are an outsider,
then you will have to negotiate with the window for
a timer ID.
There is no standard for this, so you will have to talk
to whoever wrote the code for the window
and come to some sort of agreement.
"Okay, Bob, I'll let you have timers in the range 1000 to 1999."
</p>
<p>
But what if you don't personally know the person who wrote
the code for the window,
and the documentation for the window class does not specify
how to negotiate a timer ID?
</p>
<p>
If you don't have a way to negotiate a timer ID for a window,
then just
create your own window and put your timer there.
Since you created your own window,
you control the window class,
and you can set the rules for how timer IDs are assigned
for that window class.
</p>
<p>
It's hardly a coincidence that the timer ID space is the same
size as the address space.
You can allocate some memory to track the timer
(you probably have already done this),
and use the address of that memory as the timer ID.
Another common design is to use the
handle to the object associated with the timer
as the timer ID.
</p></p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1201931">
				<div id="div-comment-1201931" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150924-00/?p=91521#comment-1201931">
			September 24, 2015 at 7:03 am</a>		</div>

		<p>And then you get to interact with my code. If I only placed 1 timer on my Window (the usual case), WM_TIMER isn&#39;t going to look at TimerId at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1201921">
				<div id="div-comment-1201921" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150924-00/?p=91521#comment-1201921">
			September 24, 2015 at 7:14 am</a>		</div>

		<p>@Joshua: Not an issue, your code never sees their timer callback. &nbsp;Either they used a timer procedure, or subclassed your window procedure and didn&#39;t forward it to you.</p>
<p>If your code sees it, it means it didn&#39;t reach the code meant to handle it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1201911">
				<div id="div-comment-1201911" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150924-00/?p=91521#comment-1201911">
			September 24, 2015 at 7:30 am</a>		</div>

		<p>@Ben Voigt: Actually it can be an issue, I came across it once (had to debug it to figure out what went wrong). Some third party control created a global refresh timer without checking the timer ID and ended up reacting to unrelated timers. Can&#39;t remember how exactly the timers were configured though. There may have been global hooks involved in the controls implementation, it was an onscreen keyboard control. We ended up not buying that control ;)</p>
<div class="post">[<em>Strange, because both of the standard ways of doing this avoid letting the original window procedure see the unknown timer message. You can register your timer with a <code>TIMERPROC</code>, in which the message is handled inside <code>Dispatch&shy;Message</code> and never reaches the window procedure; or you subclass the window and pick off the timer without forwarding to the original window procedure. If they installed a global hook, then they will see all sorts of timers they didn&#39;t create, so that can&#39;t be it either. Unless they also assumed that there were no other windows on their thread? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1201901">
				<div id="div-comment-1201901" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150924-00/?p=91521#comment-1201901">
			September 24, 2015 at 7:49 am</a>		</div>

		<p>@Someone: Ahh, well that&#39;s not your code seeing their timer, it is their code seeing your timer. &nbsp;The subclass procedure definitely needs to be written to forward timers it doesn&#39;t own to the original window procedure.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1201871">
				<div id="div-comment-1201871" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150924-00/?p=91521#comment-1201871">
			September 24, 2015 at 10:28 am</a>		</div>

		<p>My guess: they handled WM_TIMER inside the message loop for some (probably bad) reason, rather than calling DispatchMessage and handling it in the window proc. Hope they never create any modal dialogs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1201831">
				<div id="div-comment-1201831" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">boogaloo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150924-00/?p=91521#comment-1201831">
			September 24, 2015 at 2:06 pm</a>		</div>

		<p>@parkrrrr: They might have done it on purpose so that the timer didn&#39;t do anything when a modal dialogue was up. Quite a few programmers don&#39;t expect their timers to fire when a message box is up for instance, it&#39;s quite funny when they put up a message box from the timer and their screen gets filled with them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1201811">
				<div id="div-comment-1201811" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150924-00/?p=91521#comment-1201811">
			September 25, 2015 at 12:33 am</a>		</div>

		<p>@Raymond: They probably tested their onscreen keyboard mostly as a standalone process or in simple test programs, never in a real application, even though usage as embedded control was a supported and advertised configuration (and the one we were looking for at that time). That&#39;s the only way I can imagine someone coming up with something that broken. We sent them a bugreport but never heared back from them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1201401">
				<div id="div-comment-1201401" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cowardly Anon Moose</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150924-00/?p=91521#comment-1201401">
			September 28, 2015 at 11:33 pm</a>		</div>

		<p>&gt; It&#39;s hardly a coincidence that the timer ID space is the same size as the address space.</p>
<p>So someone intentionally designed it this way?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

