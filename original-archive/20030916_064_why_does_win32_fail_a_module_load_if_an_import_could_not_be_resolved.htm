<html>
<head>
<title>Why does Win32 fail a module load if an import could not be resolved?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does Win32 fail a module load if an import could not be resolved?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 16, 2003 / year-entry #65</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20030916-00/?p=42473</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Because we tried it the other way and it was much worse. In 16-bit Windows, a module that didn't satisfy all its imports would still load. As long as you didn't call a missing import, you were fine. If you did try to call a missing import, you crashed pretty spectacularly with the dreaded Unrecoverable...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>         Because we tried it the other way and it was much worse.      </p>
</p>
<p>         In 16-bit Windows, a module that didn't satisfy all its imports would still load.         As long as you didn't call a missing import, you were fine. If you did try to call         a missing import, you crashed pretty spectacularly with the dreaded <a href="http://www.xploiter.com/programming/c/borland/658.html">Unrecoverable         Application Error</a> dialog.      </p>
<p>         The Win32 folks decided that this was a bad design, because often people would take         Fred App, designed for Windows 3.1, and run it on Windows 3.0, and it would run great         for about an hour, at which point Fred App would call a function that was available         only in Windows 3.1 (like, say, <code>GetSaveFileName</code>) and crash as a result.      </p>
<p>         So the Win32 folks decided that if an import could not be resolved, the app should         fail loading. If the makers of Fred App wanted to run on Windows 3.0 after all, they         could indicate this by using <code>GetProcAddress</code> explicitly. Because if you         have to call <code>GetProcAddress</code> explicitly, it'll probably occur to you to         check the return value.      </p>
<p>          This issue comes up occasionally when people wish out loud, "Gosh, there should be         a way I could mark an import as 'optional' - if it couldn't bind, the load should         not fail. It would be the app's responsibility to verify that the bind succeeded before         calling it." These people are unwittingly asking for history to repeat itself.       </body></p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-124523">
				<div id="div-comment-124523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">C-J Berg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030916-00/?p=42473#comment-124523">
			September 16, 2003 at 12:08 pm</a>		</div>

		<p>A good answer to those asking the question could be &quot;use delay loaded imports&quot; (<a href="http://msdn.microsoft.com/library/en-us/vccore/html/vcconlinkersupportfordelayedloadingofdlls.asp" rel="nofollow">http://msdn.microsoft.com/library/en-us/vccore/html/vcconlinkersupportfordelayedloadingofdlls.asp</a>)? The programmer must of course still add code for handling loader errors, but the framework for loading the imports on demand is already there, and it&#8217;s a smooth one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-124533">
				<div id="div-comment-124533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030916-00/?p=42473#comment-124533">
			September 17, 2003 at 8:31 am</a>		</div>

		<p>You can do this on Linux and MacOS X (iirc) using weak refs. It&#8217;s a useful technique, but requires support from the actual libraries you&#8217;re linking against (the symbols must be marked as weak). You can check if the symbol is null before calling it.</p>
<p>Typically, dlopen/GetProcAddress is a better way to proceed though, even if it is less convenient.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-124543">
				<div id="div-comment-124543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030916-00/?p=42473#comment-124543">
			September 17, 2003 at 11:16 am</a>		</div>

		<p>I&#8217;m not saying that it can&#8217;t be done. I was trying to explain why allowing it to be done by default was a bad idea.  For example, how many people check for a null before using a weak ref or a delayloaded import? Do they even know or care that the function they are calling is weak/delayloaded? Apparently not, because I&#8217;ve seen apps crash due to a failed delayloaded import &#8211; we&#8217;ve reinvented the Windows 3.1 Unrecoverable Application Error dialog.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-124553">
				<div id="div-comment-124553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">C-J Berg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030916-00/?p=42473#comment-124553">
			September 17, 2003 at 12:53 pm</a>		</div>

		<p>Of course you did not say anything like it couldn&#8217;t be done, and I did not for once think that <em>you</em> did not know about it. However, I thought it would be a good thing letting people know about delay-loaded imports, in case they did not already know.</p>
<p>When it comes to handling loader failures for delay-loaded imports, the linker documentation is very clear stating that your code &quot;must handle errors robustly&quot; and elaborates on how it can be done through exceptions (SEH) or hooks. If used correctly, I even think it’s less error-prone than having a bunch of GetProcAddress-calls scattered throughout your code. After all, many crashes I see on my computers are due to failure of checking return values and dereferencing null pointers. And you wouldn’t use delay-loaded imports indeliberately (using a weak reference is another thing, even another OS).</p>
<p>By the way, I love reading your retrospects on things like the system tr&#8230; uhm, notification area. Please keep them coming! :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-124563">
				<div id="div-comment-124563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.iseran.com/Steve/blog/' rel='external nofollow' class='url'>Steve Loughran</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030916-00/?p=42473#comment-124563">
			September 18, 2003 at 1:47 am</a>		</div>

		<p>I see the point here, but what about a more pressing issue (at least for me):-</p>
<p>Why didn&#8217;t CoCreateInstance() load a library using LoadLibraryEx() and not LoadLibrary() &#8230; it makes it significantly harder to chain DLL loading in a COM object?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-597903">
				<div id="div-comment-597903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2008/02/04/7439592.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030916-00/?p=42473#comment-597903">
			February 4, 2008 at 10:33 am</a>		</div>

		<p>If you forward to a function, it still has to exist.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

