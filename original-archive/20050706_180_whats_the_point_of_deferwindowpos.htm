<html>
<head>
<title>What's the point of DeferWindowPos?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What&#8217;s the point of DeferWindowPos?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 6, 2005 / year-entry #181</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>23</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The purpose of the DeferWindowPos function is to move multiple child windows at one go. This reduces somewhat the amount of repainting that goes on when windows move around. Take that DC brush sample from a few months ago and make the following changes: HWND g_hwndChildren[2]; BOOL OnCreate(HWND hwnd, LPCREATESTRUCT lpcs) { const static COLORREF...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The purpose of
<a HREF="http://msdn.microsoft.com/library/en-us/winui/WinUI/WindowsUserInterface/Windowing/Windows/WindowReference/WindowFunctions/DeferWindowPos.asp">
the <code>DeferWindowPos</code> function</a>
is to move multiple child windows at one go.
This reduces somewhat the amount of repainting that goes on
when windows move around.</p>
<p>Take
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/04/20/410031.aspx">
that DC brush sample from a few months ago</a>
and make the following changes:
</p>
<pre>
<font COLOR=blue>HWND g_hwndChildren[2];</font>

BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
 <font COLOR=blue>const static COLORREF s_rgclr[2] =
    { RGB(255,0,0), RGB(0,255,0) };
 for (int i = 0; i &lt; 2; i++) {
  g_hwndChildren[i]</font> = CreateWindow(TEXT("static"), NULL,
        WS_VISIBLE | WS_CHILD, 0, 0, 0, 0,
        hwnd, <font COLOR=blue>(HMENU)IntToPtr(s_rgclr[i])</font>, g_hinst, 0);
  if (!<font COLOR=blue>g_hwndChildren[i]</font>) return FALSE;
 <font COLOR=blue>}</font>
 return TRUE;
}
</pre>
<p>
Notice that I'm using the control ID to hold the desired color.
We retrieve it when choosing our background color.
</p>
<pre>
HBRUSH OnCtlColor(HWND hwnd, HDC hdc, HWND hwndChild, int type)
{
  <font COLOR=blue>Sleep(500);</font>
  SetDCBrushColor(hdc, <font COLOR=blue>(COLORREF)GetDlgCtrlID(hwndChild)</font>);
  return GetStockBrush(DC_BRUSH);
}

    HANDLE_MSG(hwnd, WM_CTLCOLORSTATIC, OnCtlColor);
</pre>
<p>
I threw in a half-second sleep.
This will make the painting a little easier to see.
</p>
<pre>
void
OnSize(HWND hwnd, UINT state, int cx, int cy)
{
  <font COLOR=blue>int cxHalf = cx/2;
  SetWindowPos(g_hwndChildren[0],
               NULL, 0, 0, cxHalf, cy,
               SWP_NOZORDER | SWP_NOOWNERZORDER | SWP_NOACTIVATE);
  SetWindowPos(g_hwndChildren[1],
               NULL, cxHalf, 0, cx-cxHalf, cy,
               SWP_NOZORDER | SWP_NOOWNERZORDER | SWP_NOACTIVATE);</font>
}
</pre>
<p>
We place the two child windows side by side in our client area.
For our first pass, we'll use
<a HREF="http://msdn.microsoft.com/library/en-us/winui/WinUI/WindowsUserInterface/Windowing/Windows/WindowReference/WindowFunctions/SetWindowPos.asp">
the <code>SetWindowPos</code> function</a>
to position the windows.
</p>
<p>
Compile and run this program, and once it's up, click the maximize box.
Observe carefully which parts of the green rectangle get repainted.
</p>
<p>
Now let's change our positioning code to use
<a HREF="http://msdn.microsoft.com/library/en-us/winui/WinUI/WindowsUserInterface/Windowing/Windows/WindowReference/WindowFunctions/DeferWindowPos.asp">
the <code>DeferWindowPos</code> function</a>.
The usage pattern for the deferred window positioning functions is
as follows:
</p>
<pre>
HDWP hdwp = BeginDeferWindowPos(n);
if (hdwp) hdwp = DeferWindowPos(hdwp, ...); // 1 [fixed 7/7]
if (hdwp) hdwp = DeferWindowPos(hdwp, ...); // 2
if (hdwp) hdwp = DeferWindowPos(hdwp, ...); // 3
...
if (hdwp) hdwp = DeferWindowPos(hdwp, ...); // n
if (hdwp) EndDeferWindowPos(hdwp);
</pre>
<p>
There are some key points here.
</p>
<ul>
<li>The value you pass to
<a HREF="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/windows/windowreference/windowfunctions/begindeferwindowpos.asp">
the <code>BeginDeferWindowPos</code> function</a>
is the number of windows you intend to move.
It's okay if you get this value wrong, but getting it right
will reduce the number of internal reallocations.</p>
<li>The return value from <code>DeferWindowPos</code> is stored
back into the <code>hdwp</code> because the return value is not
necessarily the same as the value originally passed in.
If the deferral bookkeeping needs to perform a reallocation,
the <code>DeferWindowPos</code> function returns a handle to the
new defer information; the old defer information is no longer valid.
What's more, if the deferral fails, the old defer information is
<strong>destroyed</strong>.  This is different from the
<code>realloc</code> function which leaves the original object
unchanged if the reallocation fails.
The pattern <nobr><code>p = realloc(p, ...)</code></nobr> is a memory leak,
but the pattern <nobr><code>hdwp = DeferWindowPos(hdwp, ...)</code></nobr>
is not.
</ul>
<p>
That second point is important.
<a HREF="http://msdn.microsoft.com/library/en-us/dnwui/html/msdn_chicoapp.asp">
Many people get it wrong</a>.
</p>
<p>
Okay, now that you're all probably scared of this function,
let's change our repositioning code to take advantage of deferred
window positioning.
It's really not that hard at all.
(Save these changes to a new file, though. We'll want to run the old
and new versions side by side.)
</p>
<pre>
void
OnSize(HWND hwnd, UINT state, int cx, int cy)
{
  <font COLOR=blue>HDWP hdwp = BeginDeferWindowPos(2);</font>
  int cxHalf = cx/2;
  <font COLOR=blue>if (hdwp) hdwp = DeferWindowPos(hdwp,</font> g_hwndChildren[0],
               NULL, 0, 0, cxHalf, cy,
               SWP_NOZORDER | SWP_NOOWNERZORDER | SWP_NOACTIVATE);
  <font COLOR=blue>if (hdwp) hdwp = DeferWindowPos(hdwp,</font> g_hwndChildren[1],
               NULL, cxHalf, 0, cx-cxHalf, cy,
               SWP_NOZORDER | SWP_NOOWNERZORDER | SWP_NOACTIVATE);
  <font COLOR=blue>if (hdwp) EndDeferWindowPos(hdwp);</font>
}
</pre>
<p>
Compile and run this program, and again, once it's up, maximize
the window and observe which regions repaint.  Observe that there
is slightly less repainting in the new version compared to the old version.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-289043">
				<div id="div-comment-289043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.slovenskoo.com' rel='external nofollow' class='url'>muro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289043">
			July 6, 2005 at 10:26 am</a>		</div>

		<p>I don&#8217;t understand the purpose of the &quot;if&quot; in front of each call to DeferWindowPos(&#8230;). why is it there (each if statement is terminated by &#8216;;&#8217;).</p>
<p>Was it there for error processing?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-289053">
				<div id="div-comment-289053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.slovenskoo.com' rel='external nofollow' class='url'>muro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289053">
			July 6, 2005 at 10:28 am</a>		</div>

		<p>sorry, my bad. I&#8217;m overworked&#8230; programming for too long today.<br />
<br />I thought (hdwp) was a cast :)<br />
<br />now I&#8217;m so humilated&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-289063">
				<div id="div-comment-289063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289063">
			July 6, 2005 at 10:43 am</a>		</div>

		<p>Well I have problems with this example because it&#8217;s not <em>guaranteed</em> to work.  I mean, it&#8217;ll practically work, but really what should be done is writing some sort of implementation that implements a list of windows and positions, and falls through.  Something like:</p>
<p>enum EHDWPException<br />
<br />{<br />
<br />  kHDWPException<br />
<br />};</p>
<p>struct SWindowAndPosition<br />
<br />{<br />
<br />  HWND mWindow;<br />
<br />  int posx, posy, cx, cy;<br />
<br />};</p>
<p>static HDWP filter_hdwp( HDWP check )<br />
<br />{<br />
<br />  if ( !check )<br />
<br />  {<br />
<br />    throw kHDWPException;<br />
<br />  }</p>
<p>  return check;<br />
<br />}</p>
<p>void move_list( std::list&lt;SWindowAndPosition&gt; const &amp;windows )<br />
<br />{<br />
<br />  try<br />
<br />  {<br />
<br />    HDWP hdwp = filter_hdwp( BeginDeferWindowPos( windows.size() );</p>
<p>    for ( list&lt;SWindowAndPosition&gt;::const_iterator it = windows.begin(); it != windows.end(); ++it )<br />
<br />    {<br />
<br />      hdwp = filter_hdwp( DeferWindowPos( hdwp, it-&gt;mWindow, NULL, it-&gt;posx, it-&gt;posy, it-&gt;cx, it-&gt;cy, SWP_NOZORDER | SWP_NOOWNERZORDER | SWP_NOACTIVATE ) );<br />
<br />    }</p>
<p>    EndDeferWindowPos( hdwp );<br />
<br />  }<br />
<br />  catch ( EHDWPException )<br />
<br />  {<br />
<br />    // do a for loop calling SetWindowPos instead&#8230;.<br />
<br />  }<br />
<br />}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-289073">
				<div id="div-comment-289073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289073">
			July 6, 2005 at 10:54 am</a>		</div>

		<p>&#8230;  ugh.  is there a way to do preformatted text correctly ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-289083">
				<div id="div-comment-289083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.csc.calpoly.edu/~bfriesen/' rel='external nofollow' class='url'>Brian Friesen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289083">
			July 6, 2005 at 11:09 am</a>		</div>

		<p>I only first discovered DeferWindowPos about 2 months ago.  At the time I was working on a resizable app and was calling SetWindowPos to reposition/resize about half a dozen controls.  I tried DeferWindowPos instead and was amazed how much smoother it ran, far less flicker.  Definitely a cool API, I only wish I knew about it sooner. :)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-289093">
				<div id="div-comment-289093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas Haeber</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289093">
			July 6, 2005 at 11:31 am</a>		</div>

		<p>&quot;Okay, now that you&#8217;re all probably scared of this function, let&#8217;s change our repositioning code to take advantage of deferred window positioning.&quot;</p>
<p>Nah didn&#8217;t scare me much, the puzzles you posted at the 4. July were A LOT more scarier then DeferWindowPos :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-289123">
				<div id="div-comment-289123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">carlso</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289123">
			July 6, 2005 at 12:14 pm</a>		</div>

		<p>It&#8217;s a bit of a hassle to deal with the failure case of DeferWindowPos().  I&#8217;ve always wondered what could possibly cause that function to fail.  According to the docs, &quot;insufficient system resources&quot; can cause failure.  But it seems that all &quot;resources&quot; should be allocated during the BeginDeferWindowPos(n) call.  And, if you got &quot;n&quot; right, then the calls to DeferWindowPos() would never fail.</p>
<p>I have never coded with that assumption, but it would certainly make my code a lot cleaner if I could.</p>
<p>Any comments?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-289133">
				<div id="div-comment-289133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://luminance.org/' rel='external nofollow' class='url'>Kevin Gadd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289133">
			July 6, 2005 at 12:15 pm</a>		</div>

		<p>Shouldn&#8217;t it be DeferWindowPos(hdwp, hwnd, &#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-289143">
				<div id="div-comment-289143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">carlso</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289143">
			July 6, 2005 at 12:26 pm</a>		</div>

		<blockquote><p>
  The other big difference is that when a window is resized with DeferWindowPos, it doesn&#8217;t consistently receive WM_SIZE.</p>
<p>The WM_SIZE message tends to be problematic in general (IMHO).  When a window is resized, the wndproc will first receive a WM_WINDOWPOSCHANGED message.  It is only when you call DefWindowProc() on this message that you&#8217;ll see a WM_SIZE message &#8212; and it seems like there might be some logic that does not send the WM_SIZE message if Windows thinks the size hasn&#8217;t changed.</p>
<p>I do all of my resize handling on WM_WINDOWPOSCHANGED and this works well (even with DeferWindowPos).  The only thing you need to look out for is that Windows sends a WM_SIZE message when a window is first created (and you will NOT see the corresponding WM_WINDOWPOSCHANGED at this time), so you may need to explicitly call your sizing handler on window creation if your logic depends on that.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-289153">
				<div id="div-comment-289153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Dunn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289153">
			July 6, 2005 at 12:46 pm</a>		</div>

		<blockquote><p>
  &quot;How to Adapt an App for Chicago,&quot; in the July 1994 issue of the Microsoft Developer Network News</p>
<p>I have a strange urge to go read that article&#8230;
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-289163">
				<div id="div-comment-289163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289163">
			July 6, 2005 at 1:40 pm</a>		</div>

		<blockquote><p>
  The pattern p = realloc(p, &#8230;) is a memory leak</p>
<p>Are you sure about that? Which realloc are you talking about, then?
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-289173">
				<div id="div-comment-289173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289173">
			July 6, 2005 at 2:49 pm</a>		</div>

		<blockquote><p>
  &gt; The pattern p = realloc(p, &#8230;) is a memory leak </p>
<p>&gt; Are you sure about that? Which realloc are you talking about, then? </p>
<p>Yes, quite sure.</p>
<p>If realloc fails, then it returns NULL, but p is still valid, at least until you assign NULL to it and leak what p was pointing to.<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-289183">
				<div id="div-comment-289183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mongo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289183">
			July 6, 2005 at 5:56 pm</a>		</div>

		<p>I would assume (but haven&#8217;t checked, I&#8217;ll admit) that the SWP_NOCOPYBITS flag ought to solve the problem where you appear to get a window copied. If you&#8217;re not specifying that, then Windows appears to try to efficiently move the windows &#8211; only as has been mentioned here earlier, this can be problematic when windows overlap.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-289193">
				<div id="div-comment-289193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">binaryc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289193">
			July 6, 2005 at 6:03 pm</a>		</div>

		<p>I thought the point of handles was that the caller didn&#8217;t have to know or care where the data is located, thus leaving the callee free to move it around at will.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-289103">
				<div id="div-comment-289103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289103">
			July 6, 2005 at 11:48 am</a>		</div>

		<p>I have a project that I&#8217;ve tried to convert to DeferWindowPos several times, but I always end up reverting to regular SetWindowPos because the behavior isn&#8217;t identical or even correct.</p>
<p>In particular, if you swap the positions of two windows, you&#8217;ll get the correct results with SetWindowPos, but not with DeferWindowPos.  Create two windows A and B, then swap them.  It&#8217;s as though the system tries to blit the screen bits from A to B and then from B (which now looks like A) to A.  You end up with what looks like two copies of A.</p>
<p>The other big difference is that when a window is resized with DeferWindowPos, it doesn&#8217;t consistently receive WM_SIZE.  Suppose you have a window class that rearranges its children using DeferWindowPos in response to a WM_SIZE (similar to an Avalon Canvas).  Everything works fine until you nest a Canvas windows as a child of another Canvas window.  When the parent Canvas rearranges its child Canvas, the child doesn&#8217;t in turn rearrange *its* children because it never receives WM_SIZE.</p>
<p>Perhaps these are just bugs in the Windows 98 implementation.  I haven&#8217;t bothered trying it on newer versions of Windows because I have to remain backward compatible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-289113">
				<div id="div-comment-289113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289113">
			July 6, 2005 at 12:02 pm</a>		</div>

		<p>The best way to call DeferWindowPos with reasonable error fallback is:</p>
<p>void FwdDeferWindowPos(void *&amp;dwp, HWND hwnd, HWND after, int x, int y, int w, int h, unsigned flags)<br />
<br />{<br />
<br />  if (dwp)<br />
<br />    dwp = DeferWindowPos((HDWP)dwp, hwnd, after, x, y, w, h, flags);<br />
<br />}</p>
<p>void FwdSetWindowPos(void *&amp;, HWND hwnd, HWND after, int x, int y, int w, int h, unsigned flags)<br />
<br />{<br />
<br />  SetWindowPos(hwnd, after, x, y, w, h, flags);<br />
<br />}</p>
<p>void (*FwdWindowPosFn)(void*&amp;, HWND, HWND, int, int, int, int, unsigned);</p>
<p>FwdWindowPosFn pos = FwdDeferWindowPos;<br />
<br />void *dwp = BeginDeferWindowPos(N);<br />
<br />for (;;) {<br />
<br />  pos(&#8230;);<br />
<br />  pos(&#8230;);<br />
<br />  &#8230;<br />
<br />  if (pos == FwdDeferWindowPos) {<br />
<br />    if (!dwp) {<br />
<br />      pos = FwdSetWindowPos;<br />
<br />      continue;<br />
<br />    }<br />
<br />    EndDeferWindowPos((HDWP)dwp);<br />
<br />  }<br />
<br />  break;<br />
<br />}<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-289213">
				<div id="div-comment-289213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.abstractspoon.com' rel='external nofollow' class='url'>dan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289213">
			July 6, 2005 at 9:01 pm</a>		</div>

		<p>very pertinent post. a while ago i wrote a class wrapper around the DeferWindowPos API which hugely simplified the usage since i could call the Begin and End functions in the c&#8217;tor and d&#8217;tor respectively, and encapsulate the error checking and fallback on SetWindowPos. except that i wasn&#8217;t correctly handling the returned value from each call to DeferWindowPos. now i am. thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-larryosterman odd alt thread-odd thread-alt depth-1" id="comment-289223">
				<div id="div-comment-289223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Larry+Osterman+%5BMSFT%5D' rel='external nofollow' class='url'>Larry Osterman [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289223">
			July 6, 2005 at 11:08 pm</a>		</div>

		<blockquote><p>
  if (hdwp) hdwp = DeferWindowPos(hwnd, &#8230;); // 1</p>
<p>Isn&#8217;t the first parameter to DeferWindowPos a hdwp, not a hwnd?<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-289253">
				<div id="div-comment-289253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Glen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289253">
			July 7, 2005 at 9:45 am</a>		</div>

		<p>Is there any advantage to DeferWindowPos over a series of MoveWindow calls with the last argument (bRepaint) FALSE, followed by an InvalidateRect or something? It seems like a more complicated way of accomplishing the same thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-289503">
				<div id="div-comment-289503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom Seddon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289503">
			July 7, 2005 at 1:13 pm</a>		</div>

		<p>Yes, SWP_NOCOPYBITS fixes the problem where you get corrupted window contents after moving them. You can also get this in some cases if the window is moved rapidly (such as if moving windows handling WM_SIZE messages, and the user is dragging the window edge) and its new position sometimes overlaps the old. I&#8217;m not sure whether this is a general bug, or something specific to the graphics driver.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-289703">
				<div id="div-comment-289703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289703">
			July 7, 2005 at 7:25 pm</a>		</div>

		<p>is there any point checking to see if a window will actually be moved or sized before calling MoveWindow/SetWindowPos/DeferWindowPos, or does Windows do such checks itself (and filter out unnecessary calls)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-289993">
				<div id="div-comment-289993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-289993">
			July 9, 2005 at 8:45 am</a>		</div>

		<p>Well, once I tried in a complex window resizing routine (120 controls) replacing DeferWindowPos() with SetWindowPos() and it was the same.  There was absolutely no difference in the repainting speed at all.  I left the SetWindowPos() calls in there.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-380693">
				<div id="div-comment-380693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.csdn.net/cattom/archive/2006/05/15/728767.aspx' rel='external nofollow' class='url'>cattom</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050706-26/?p=35023#comment-380693">
			May 14, 2006 at 12:05 pm</a>		</div>

		<p>推荐一篇文章</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

