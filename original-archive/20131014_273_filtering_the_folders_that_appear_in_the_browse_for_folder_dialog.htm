<html>
<head>
<title>Filtering the folders that appear in the Browse for Folder dialog</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Filtering the folders that appear in the Browse for Folder dialog</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 14, 2013 / year-entry #274</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20131014-00/?p=2943</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">IFolderFilter.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program applies an arbitrary filter to the
<i>Browse for Folder</i> dialog:
We will filter out drives smaller than
512<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/06/11/9725386.aspx">GB</a>.
Hey, remember, I said that Little Programs
<a HREF="http://www.guardian.co.uk/film/2009/jan/12/woody-allen-vicky-cristina-barcelona">
do not need motivation</a>.
</p>
<p>
Today's smart pointer class library is... (rolls dice)... WRL!
</p>
</p>
<pre>
#define STRICT
#define STRICT_TYPED_ITEMIDS
#include &lt;windows.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;propkey.h&gt;
#include &lt;propvarutil.h&gt;
#include &lt;wrl/implements.h&gt;
using namespace Microsoft::WRL;

struct ComVariant : public VARIANT
{
    ComVariant() { VariantInit(this); }
    ~ComVariant() { VariantClear(this); }
};
</pre>
<p>
WRL does not come with a "smart <code>VARIANT</code>" class
analogous to ATL's <code>CComVariant</code>,
so we provide our own very simple one.
</p>
<pre>
class CFunnyFilter :
  public RuntimeClass&lt;
                RuntimeClassFlags&lt;RuntimeClassType::ClassicCom&gt;,
                IFolderFilter&gt;
{
public:
  // *** IFolderFilter ***
  IFACEMETHODIMP ShouldShow(
        IShellFolder* psf,
        PCIDLIST_ABSOLUTE pidlFolder,
        PCUITEMID_CHILD pidlItem)
  {
    if (!<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/09/20/10450719.aspx">IsMyComputerFolder</a>(psf)) return S_OK;

    ComPtr&lt;IShellFolder2&gt; spsf2;
    if (FAILED(ComPtr&lt;IUnknown&gt;(psf).As(&amp;spsf2))) {
      return S_OK;
    }

    ComVariant svt;
    if (FAILED(spsf2-&gt;GetDetailsEx(pidlItem,
                                   &amp;PKEY_Capacity, &amp;svt))) {
      return S_OK;
    }

    if (VariantToUInt64WithDefault(svt, 0) &gt;=
                             512ULL*1024ULL*1024ULL*1024ULL) {
      return S_OK;
    }

    return S_FALSE;
  }

  IFACEMETHODIMP GetEnumFlags(
        IShellFolder* psf,
        PCIDLIST_ABSOLUTE pidlFolder,
        HWND *phwnd,
        DWORD *pgrfFlags) { return S_OK; }
};
</pre>
<p>
Our custom <code>Should&shy;Show</code> method first checks if
we are showing children of <i>My Computer</i>.
If not, then we allow the item to pass through the filter.
</p>
<p>
Next, we convert the folder to <code>IShell&shy;Folder2</code>.
If we can't, then we allow the item to pass through the filter.
(Arbitrary choice.)
</p>
<p>
Next, we ask for the capacity of the item.
If we can't (no media in drive, or it's not a drive in the first place),
then we allow the item to pass through the filter.
(Arbitrary choice.)
</p>
<p>
Next, we look at the capacity,
and if it's at least 512GB, then we allow the item to pass
through the filter.
</p>
<p>
Otherwise, we have a drive smaller than 512GB, so we filter it out.
</p>
<p>
That's it!
Let's install this filter in the callback function:
</p>
<pre>
int CALLBACK BrowseCallbackProc(HWND hwnd,
    UINT uMsg, LPARAM lParam, LPARAM lpData)
{
  switch (uMsg) {
  case BFFM_IUNKNOWN:
    if (lParam) {
      IUnknown *punk = reinterpret_cast&lt;IUnknown*&gt;(lParam);
      ComPtr&lt;IFolderFilterSite&gt; spFilterSite;
      if (SUCCEEDED(ComPtr&lt;IUnknown&gt;(punk).As(&amp;spFilterSite))) {
        spFilterSite-&gt;SetFilter(Make&lt;CFunnyFilter&gt;().Get());
      }
    }
    break;
  }
  return 0;
}
</pre>
<p>
When we get the <code>BFFM_<wbr>IUNKNOWN</code> message,
we convert the <code>IUnknown</code> (cast to <code>LPARAM</code>)
to a <code>IFolder&shy;Filter&shy;Site</code> and tell it
to apply our custom filter.
</p>
<p>
Okay, let's plug it in and see if smoke comes out.
</p>
<pre>
int WINAPI WinMain(HINSTANCE hinst, HINSTANCE hinstPrev,
                   LPSTR lpCmdLine, int nShowCmd)
{
  <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/05/20/135841.aspx">CCoInitialize</a> init;
  BROWSEINFO bi = { };
  TCHAR szDisplayName[MAX_PATH];
  bi.pszDisplayName = szDisplayName;
  bi.lpfn = BrowseCallbackProc;
  bi.ulFlags = BIF_NEWDIALOGSTYLE;
  PIDLIST_ABSOLUTE pidl = SHBrowseForFolder(&amp;bi);
  CoTaskMemFree(pidl);
  return 0;
}
</pre>
<p>
The tricky part here is that we have to pass the
<code>BIF_<wbr>NEW&shy;DIALOG&shy;STYLE</code> flag
because it is the new <i>Browse for Folder</i> dialog
that
sends the
<code>BFFM_<wbr>IUNKNOWN</code> message.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1082803">
				<div id="div-comment-1082803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131014-00/?p=2943#comment-1082803">
			October 14, 2013 at 7:51 am</a>		</div>

		<p>What I don&#39;t get is why this code needs any smart pointers at all.</p>
<div class="post">[<em>You never &quot;need&quot; smart pointers. But they make some things a lot easier. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1082853">
				<div id="div-comment-1082853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131014-00/?p=2943#comment-1082853">
			October 14, 2013 at 10:22 am</a>		</div>

		<p>For no apparent reason, I always misread your selection of a smart pointer library as “(rolls eyes)”. Coupled with your next story, it evokes a weird image of actually rolling eyes as if they were dice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1082863">
				<div id="div-comment-1082863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131014-00/?p=2943#comment-1082863">
			October 14, 2013 at 10:36 am</a>		</div>

		<p>[You never &quot;need&quot; smart pointers. But they make some things a lot easier. -Raymond]</p>
<p>Let&#39;s try this again. I don&#39;t get the need for smart pointers because I don&#39;t get the need for any part of this code to call IUnknown::AddRef.</p>
<div class="post">[<em>It doesn&#39;t. But it does call <code>IUnknown::Query&shy;Interface</code> twice and the <code>CFunnyFilter</code> constructor once, so there are three places where we need a <code>Release</code>. And the library comes with default implementation of <code>IUnknown</code>, which makes <code>CFunnyFilter</code> a lot easier to write. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1082903">
				<div id="div-comment-1082903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131014-00/?p=2943#comment-1082903">
			October 14, 2013 at 1:52 pm</a>		</div>

		<p>@Yuri Khan, your comment ties in nicely with Raymond&#39;s dream post this morning. &nbsp;Perhaps Raymond&#39;s companion was literally rolling her eye.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1082933">
				<div id="div-comment-1082933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131014-00/?p=2943#comment-1082933">
			October 14, 2013 at 4:28 pm</a>		</div>

		<p>@Joshua:</p>
<p>Also remember, that when you get an object, it has one outstanding reference for you already.</p>
<p>The IUnknown * in lparam in that code would have had the AddRef member called already, so you would always need at least one Release.</p>
<p>I know COM is confusing at times, but most of the time you don&#39;t directly call AddRef, since other things, like QueryInterface call it for you.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

