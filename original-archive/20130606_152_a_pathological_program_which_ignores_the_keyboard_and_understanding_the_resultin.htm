<html>
<head>
<title>A pathological program which ignores the keyboard, and understanding the resulting behavior based on what we know about the synchronous input</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A pathological program which ignores the keyboard, and understanding the resulting behavior based on what we know about the synchronous input</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 6, 2013 / year-entry #153</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today, we'll illustrate the consequences of the way the window manager synchronizes input when two or more threads decide to share an input queue. Since I need to keep separate state for the two windows, I'm going to start with the new scratch program and make the following changes: #include <strsafe.h> class RootWindow : public...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Today, we'll illustrate the consequences of
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/06/05/10423678.aspx">
the way the window manager synchronizes input</a>
when two or more threads
decide to share an input queue.
</p>
<p>
Since I need to keep separate state for the two windows,
I'm going to start with the
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2005/04/22/410773.aspx">
new scratch program</a>
and
make the following changes:
</p>
<pre>
<font COLOR=blue>#include &lt;strsafe.h&gt;</font>

class RootWindow : public Window
{
public:
 virtual LPCTSTR ClassName() { return TEXT("Scratch"); }
 static RootWindow *Create();

 <font COLOR=blue>void AppendText(LPCTSTR psz)
 {
  ListBox_SetCurSel(m_hwndChild,
                    ListBox_AddString(m_hwndChild, psz));
 }

 void LogMessage(const MSG *pmsg)
 {
   TCHAR szMsg[80];
   StringCchPrintf(szMsg, 80, TEXT("%d\t%04x\t%p\t%p"),
                   pmsg-&gt;time,
                   pmsg-&gt;message,
                   pmsg-&gt;wParam,
                   pmsg-&gt;lParam);
   AppendText(szMsg);
}</font>

protected:
 LRESULT HandleMessage(UINT uMsg, WPARAM wParam, LPARAM lParam);
 LRESULT OnCreate();
private:
 HWND m_hwndChild;
};

<font COLOR=blue>LRESULT RootWindow::OnCreate()
{
 m_hwndChild = CreateWindow(
      TEXT("listbox"), NULL,
      LBS_HASSTRINGS | LBS_USETABSTOPS |
      WS_CHILD | WS_VISIBLE | WS_TABSTOP | WS_VSCROLL,
      0, 0, 0,0, GetHWND(), (HMENU)1, g_hinst, 0);

 return 0;
}</font>
</pre>
<p>
All we did above was add a list box to the window and provide
public methods
<code>Append&shy;Text</code> to add a string to the list box
and
<code>Log&shy;Message</code> that adds a string based on the
contents of a <code>MSG</code> structure.
We're going to use this list box to log what the program is doing.
</p>
<pre>
<font COLOR=blue>bool ShouldLogMessage(UINT uMsg)
{
 if (uMsg &gt;= WM_KEYFIRST &amp;&amp; uMsg &lt;= WM_KEYLAST) return true;
 if (uMsg &gt;= WM_MOUSEFIRST &amp;&amp; uMsg &lt;= WM_MOUSELAST) return true;
 return false;
}</font>
</pre>
<p>
This helper function above tells us which messages we want to log.
For now, let's log keyboard and mouse messages.
</p>
<p>
Now, in order to demonstrate input thread attachment,
we need two threads.
Here comes the second thread:
</p>
<pre>
<font COLOR=blue>DWORD CALLBACK AttachedThreadProc(void *lpParameter)
{
 RootWindow *prw = RootWindow::Create();
 SetWindowText(prw-&gt;GetHWND(), TEXT("Bad window"));
 AttachThreadInput(PtrToInt(lpParameter),
                   GetCurrentThreadId(), TRUE);
 ShowWindow(prw-&gt;GetHWND(), SW_SHOW);

 BOOL fIgnoreKeyboard = FALSE;

 while (true) {
  MSG msg;
  BOOL fMessage;
  if (fIgnoreKeyboard) {
   fMessage =
    PeekMessage(&amp;msg, NULL, 0, WM_KEYFIRST - 1, PM_REMOVE) ||
    PeekMessage(&amp;msg, NULL, WM_KEYLAST + 1, 0xFFFFFFFF, PM_REMOVE);
  } else {
   fMessage = PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE);
  }

  if (!fMessage) { WaitMessage(); continue; }

  if (msg.message == WM_QUIT) break;

  if (ShouldLogMessage(msg.message)) {
   prw-&gt;LogMessage(&amp;msg);
  }

  if (msg.message == WM_KEYDOWN &amp;&amp; msg.wParam == VK_SHIFT) {
   prw-&gt;AppendText(TEXT("Stop processing keyboard messages"));
   fIgnoreKeyboard = TRUE;
  }

  TranslateMessage(&amp;msg);
  DispatchMessage(&amp;msg);
 }
 AttachThreadInput(PtrToInt(lpParameter),
                   GetCurrentThreadId(), FALSE);
 return 0;
}</font>
</pre>
<p>
This second thread is intentionally ill-behaved,
so that we can see what happens when there's a bad apple in the barrel.
The thread processes messages normally,
until you hit the shift key.
Once that happens, it goes into another mode where it starts
ignoring the keyboard by stubbornly refusing to pump any keyboard
messages.
</p>
<p>
Normally, this sort of recalcitrant behavior would affect only
the thread itself,
but since this thread is attached to the main thread,
the scope of the damage expands.
</p>
<pre>
int PASCAL
WinMain(HINSTANCE hinst, HINSTANCE, LPSTR, int nShowCmd)
{
 g_hinst = hinst;

 if (SUCCEEDED(CoInitialize(NULL))) {
  InitCommonControls();

  RootWindow *prw = RootWindow::Create();
  if (prw) {
   ShowWindow(prw-&gt;GetHWND(), nShowCmd);

  <font COLOR=blue>DWORD dwId;
  CreateThread(0, 0, AttachedThreadProc,
               IntToPtr(GetCurrentThreadId()), 0, &amp;dwId);</font>

   MSG msg;
   while (GetMessage(&amp;msg, NULL, 0, 0)) {

   <font COLOR=blue>if (ShouldLogMessage(msg.message)) {
    prw-&gt;LogMessage(&amp;msg);
   }</font>

    TranslateMessage(&amp;msg);
    DispatchMessage(&amp;msg);
   }
  }
  CoUninitialize();
 }
 return 0;
}
</pre>
<p>
We modify our main program to create the secondary thread
(which attaches itself to the main thread),
and then to log messages in its message pump.
</p>
<p>
Okay, now run this program and use the mouse to resize and
reposition the two windows side by side with no overlap.
(This will make it easier to observe what's going on.)
Wave the mouse over both windows, and click on each of the
windows and do some typing,
but don't hit the shift key yet.
So far, everything works as you expect:
Focus switches back and forth, mouse and keyboard messages are
delivered.
</p>
<p>
Now put focus on the bad window and tap the shift key.
This puts the bad window into
<code>fIgnore&shy;Keyboard = TRUE</code> mode,
where it stops pumping keyboard messages
(but pumps everything else).
</p>
<p>
What we just did is leave the <code>WM_<wbr>KEY&shy;UP</code> message
for the shift key in the input queue,
and steadfastly refused to process it.
The message just sits there forever.
Let's see what this does to the input retrieval algorithm.
</p>
<p>
Wave the mouse over the bad window.
Notice that mouse events are still delivered to the bad window.
(Keyboard events are not delivered because the bad thread
is not pumping keyboard messages.)
This makes sense, because the filtered <code>Peek&shy;Message</code>
for
<code>WM_<wbr>KEY&shy;LAST + 1</code> through
<code>0xFFFFFFFF</code> includes the mouse message range
but excludes the keyboard message range,
so the loop that looks for a candidate message completely
ignores the stuck keyboard message.
All it sees are mouse messages,
and they are not stuck.
The code is taking advantage of the "peek into the future"
feature we mentioned yesterday.
</p>
<p>
Next thing you notice is that if you wave the mouse over the
main window, it does <i>not</i> receive mouse input.
That's because the main window performs an unfiltered peek.
The stuck keyboard message satisfies the filter,
and since that message belongs to another thread
and is ahead of all the mouse messages,
the input manager will not return the mouse messages
until the stuck keyboard message is cleared out.
</p>
<p>
This also provides an example of the paradox I alluded to yesterday:
The main thread is not receiving any input because it is performing
an unfiltered message retrieval,
and there is a stuck keyboard message in the input queue.
On the other hand, if the main thread had explicitly peeked
only for mouse messages,
then the stuck keyboard message would not have been taken into
consideration, and it would have gotten the mouse messages.
The paradox is that under these strange conditions,
a filtered message retrieval actually returns messages
that an unfiltered retrieval would not!
</p>
<p>
Now here's another trick:
Click on the main window.
(Yes, it's not processing mouse input, but do it anyway.)
Now both windows stop responding to input.
What happened?
</p>
<p>
Back before you clicked on anything,
the only stuck input message was that keyboard message.
Sure, there were mouse motions that took place,
but we saw that
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/12/19/10249000.aspx">
<code>WM_<wbr>MOUSE&shy;MOVE</code> messages are generated on demand</a>
rather than being posted into the queue when the mouse moves.
Therefore, all that mouse-waving didn't actually leave a stuck
mouse message in the queue.
On the other hand, when you click,
that generates a mouse click event in the queue,
and those are generated when the click happens,
not on demand.
Therefore, when you click on the main window,
a click event goes into the input queue.
</p>
<p>
Now think about what's in the input queue:
There is a stuck keyboard message (for the bad window,
which is stuck because the bad window refuses to pump keyboard messages),
and there is a stuck mouse message (for the main window,
which is stuck because the main window is waiting for the stuck
keyboard message to clear out).
New keyboard input will not be processed because of the stuck
keyboard message,
and
new mouse input will not be processed because of the stuck
mouse message.
</p>
<p>
Result: Nobody gets any input.
</p>
<p>
<b>Bonus investigation</b>:
While you're in this horrible state,
open Task Manager.
Observe that the scratch program has pegged a CPU.
Why is it draining CPU when there is nothing to do?
</p>
<p>
There's a little extra step in the overall algorithm that
describes how input is processed:
</p>
<ul>
<li>If the input queue is waiting for another thread to finish
    processing an input message,
    and the current thread is processing an inbound sent message,
    then mark the input queue as no longer waiting.</p>
<li>If the input queue is waiting for another thread to finish
    processing an input message, then stop and return no message.</p>
<li>If the input queue is waiting for the current thread to
    finish processing an input message,
    then mark the input queue as no longer waiting.</p>
<li>Look at the first message in the input queue which
    satisfies the message range filter and
    either belongs to some other thread
    or belongs to the current thread and matches the
    window handle filter.</p>
<ul>
<li>If the message belongs to some other thread, then
        <font COLOR=blue>(New!) nudge the other thread to get it to
        process the message</font>,
        then stop. Return no message to the caller.</p>
<li>Otherwise,
        mark the input queue as waiting for the current
        thread to finish processing an input message,
        and return the message we found.
    </ul>
<li>If no such message exists,
    then there is no input. Return no message.
</ul>
<p>
<b>Reminder</b>: This is
<a HREF="http://grammar.about.com/od/qaaboutrhetoric/f/QAmixmetaphor.htm">
a peek under the hood at how the sausage is made</a>,
and the algorithm described above is not contractual.
</p>
<p>
If the algorithm cannot return an input message because there
is a stuck input message that belongs to another thread,
then the algorithm nudges that other thread
by setting the appropriate queue state flag
(for example,
<code>QS_<wbr>KEY</code> if it is a stuck keyboard message).
If the other thread is waiting for that type of message,
then the change in queue state will satisfy the wait,
and the hope is that other thread will call
a message retrieval function to retrieve the stuck message
and unclog the input queue.
</p>
<p>
That explains why the scratch program is pegging a processor.
The bad thread wants to peek out a mouse message,
but it can't because of the stuck mouse click event that
belongs to the main thread,
so it nudges the main thread to say,
"Hey, I need you to process that mouse event."
The main thread wakes up and tries to pump messages,
but it can't retrieve any input because of the stuck
keyboard message.
The main thread therefore nudges the bad thread to say,
"Hey, I need you to process that keyboard event."
</p>
<p>
The two threads are therefore busy taking turns
yelling at each other,
saying, "Hey, you, you need to get out of my way,"
and together they burn a CPU.
</p>
<p>
Now, this is admittedly a pathological program,
but it did do a pretty good job of highlighting some of the
consequences of synchronous input caused by attaching
multiple threads to the same input queue.
This is why it's important that threads which share an input queue
all be aware of the connection so that they don't accidentally
cause trouble for each other.
</p>
<p>
<b>Exercise</b>:
How would you modify the above program to demonstrate the
"waiting for a thread to finish processing a message" part
of the input message retrieval algorithm?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1060113">
				<div id="div-comment-1060113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060113">
			June 6, 2013 at 7:18 am</a>		</div>

		<p>Huge THANK YOU for this series of articles! &nbsp;It helps a lot to understand how things work, with the caveat that it is not contractual. &nbsp;Purely insight. &nbsp;And purely appreciated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060123">
				<div id="div-comment-1060123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060123">
			June 6, 2013 at 7:59 am</a>		</div>

		<p>@Raymond, I&#39;m with Steve Wolf, incredible series, incredible content.</p>
<p>Exercise: put Sleep(5000);, or a greater value for a more dramatic effect, inside «if (msg.message == WM_KEYDOWN &amp;&amp; msg.wParam == VK_SHIFT)». Whenever you press the Shift key on the second thread&#39;s window, the main thread won&#39;t get input messages for 5 seconds.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060143">
				<div id="div-comment-1060143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim Lyon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060143">
			June 6, 2013 at 8:37 am</a>		</div>

		<p>Thanks for a hugely enlightening series.</p>
<p>But I disagree with your conclusion, &quot;This is why it&#39;s important that threads which share an input queue all be aware of the connection so that they don&#39;t accidentally cause trouble for each other.&quot; I think that the real moral is that a thread should never go for an arbitrarily long time without processing all of its messages. Thread attachment merely demonstrates one way that a non-responsive thread causes damage, but there are lots of other ways too.</p>
<div class="post">[<em>In the absence of attachment, a thread that goes non-responsive typically hurts only himself. But if there is attachment, then the scope of the damage goes further. And notice that the bad thread is pumping messages. It&#39;s just not pumping </em><em>all</em> messages. It might get into this state because, say, it wants to postpone keyboard input while doing a computation, but leave the mouse active so the user can click the Cancel button. This seemingly-reasonable design ends up creating a disaster in the presence of attachment. -Raymond]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060153">
				<div id="div-comment-1060153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060153">
			June 6, 2013 at 8:47 am</a>		</div>

		<p>Raymond, many thanks. &nbsp;This series has already answered several questions that I have had for a while.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk even thread-even depth-1" id="comment-1060163">
				<div id="div-comment-1060163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060163">
			June 6, 2013 at 10:29 am</a>		</div>

		<p>I&#39;m amazed by the amount of work that obviously went into writing these posts!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060173">
				<div id="div-comment-1060173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060173">
			June 6, 2013 at 11:18 am</a>		</div>

		<p>This brings up an interesting question.</p>
<p>We drive Word automation, and have a big toolbar that replaces the effects of the file menu. Currently the toolbar is set top topmost. We ourselves use a well-behaved message loop. It is reasonably safe to assume Word also has a well behaved message loop so we can change to making the toolbar a child of the Word window? Or maybe it doesn&#39;t matter. If Word hangs we&#39;re going to hang with it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060183">
				<div id="div-comment-1060183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060183">
			June 6, 2013 at 1:41 pm</a>		</div>

		<p>[In the absence of attachment, a thread that goes non-responsive typically hurts only himself. But if there is attachment, then the scope of the damage goes further. And notice that the bad thread is pumping messages. It&#39;s just not pumping all messages. It might get into this state because, say, it wants to postpone keyboard input while doing a computation, but leave the mouse active so the user can click the Cancel button. This seemingly-reasonable design ends up creating a disaster in the presence of attachment. -Raymond]</p>
<p>Actually I would argue, that accumulating keystrokes during a long computation then processing them once done is a poor design choice &#8212; especially since you couldn&#39;t handle the Escape key to cancel the operation.</p>
<p>I would expect the program to respond to the escape key and discard other input.</p>
<p>To be honest, I have never really found a use for the message filters to GetMessage, which I suppose means that if I ever used input attachment that I would be safe.</p>
<div class="post">[<em>There&#39;s more to input attachment than the input queue. Tune in tomorrow, and you may change your conclusion. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hardon odd alt thread-odd thread-alt depth-1" id="comment-1060193">
				<div id="div-comment-1060193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/gdalsnes' rel='external nofollow' class='url'>gdalsnes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060193">
			June 6, 2013 at 2:05 pm</a>		</div>

		<p>I have never seen the use of AttachThreadInput (still don&#39;t). Was AttachThreadInput created to make it easier to port certain 16bit apps? If you had a time machine, could you &quot;fix&quot; this by not implementing AttachThreadInput, forcing 16bit apps to be ported &quot;propery&quot;?</p>
<div class="post">[<em>There was no need to do this for porting 16-bit apps since 16-bit apps were single-threaded anyway. Off the top of my head, I cannot think of a case where it is necessary to manage attachment explicitly (but I&#39;m sure there is some weird fringe case that requires it). In the vast majority of cases, the default attachment rules work fine. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060223">
				<div id="div-comment-1060223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060223">
			June 6, 2013 at 9:01 pm</a>		</div>

		<p>Exercise: Not sure if this is what you want to demonstrate, but one could add something like the following to the list of or&#39;d peeks in Bad window&#39;s pathological mode: PeekMessage(&amp;msg, NULL, WM_LBUTTONDBLCLK, WM_LBUTTONDBLCLK, PM_REMOVE). Then reset fIgnoreKeyboard back to FALSE if WM_LBUTTONDBLCLK is received, thereby causing the main Scratch window to start behaving normally again. Could also add an audio wmv that plays &quot;Hello, Bad Window here, I about to stop my silly filtering now&quot; just before resetting the variable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060253">
				<div id="div-comment-1060253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@arghhhhhhhhhhh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060253">
			June 7, 2013 at 6:32 am</a>		</div>

		<p>The only use for AttachThreadInput() I have ever seen is to meet one of the conditions for <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633539(v=vs.85).aspx">msdn.microsoft.com/&#8230;/ms633539(v=vs.85).aspx</a> to make it available to a process that would otherwise not be authorized. It is a hack and a half, don&#39;t do this except for educational purposes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1060273">
				<div id="div-comment-1060273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153#comment-1060273">
			June 7, 2013 at 10:02 am</a>		</div>

		<p>The first thing one needs to understand about attaching the input queues: DO NOT DO IT.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

