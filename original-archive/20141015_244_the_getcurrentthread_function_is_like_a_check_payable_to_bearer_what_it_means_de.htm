<html>
<head>
<title>The GetCurrentThread function is like a check payable to Bearer: What it means depends on who's holding it</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The GetCurrentThread function is like a check payable to Bearer: What it means depends on who&#8217;s holding it</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 15, 2014 / year-entry #245</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>40</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The Get­Current­Thread function returns a pseudo-handle to the current thread. The documentation goes into significant detail on what this means, but I fear that it may have fallen into the trap of providing so much documentation that people decide to skip it. Okay, so first of all, what is a pseudo-handle? a pseudo-handle is a...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The <code>Get&shy;Current&shy;Thread</code> function
returns a pseudo-handle to the current thread.
The documentation
<a HREF="http://msdn.microsoft.com/en-us/library/windows/desktop/ms683182(v=vs.85).aspx">
goes into significant detail</a>
on what this means,
but I fear that it may have fallen into the trap of providing
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/04/10/10409822.aspx">
so much documentation that people decide to skip it</a>.
</p>
<p>
Okay, so first of all, what is a pseudo-handle?
a pseudo-handle is a sentinel value for <code>HANDLE</code>
that is not really a handle, but it can act like one.
</p>
<p>
The pseudo-handle returned by <code>Get&shy;Current&shy;Thread</code>
means,
"The thread that this code is running on."
Note that <i>this is a context-sensitive proposition</i>.
All the text in MSDN is explaining the consequences of that
sentence.
</p>
<p>
In a sense, the
<code>Get&shy;Current&shy;Thread</code> function is like a GPS:
It tells you where you <i>are</i>,
not where you <i>were</i>.
</p>
<p>
Imagine somebody who had never seen a GPS before.
When they park their car in a parking garage,
they look at the parking level number printed on the wall
and write it down.
Then when somebody asks,
"Where did you park your car?"
they can look in their notebook and say,
"Oh, it's on level 3."
Some parking garages even have little pads of paper with
the parking level pre-printed on it.
When you park your car, you tear a piece of paper off the pad
and tuck it into your purse or wallet.
Then when you want to return to your car,
you see the slip of paper,
and it tells you where you parked.
</p>
<p>
Now suppose you hand that person a GPS device,
and tell them,
"This will tell you your current location."
</p>
<p>
"Great! My current location is level 3 of the parking garage."
</p>
<p>
They go out shopping or whatever they were planning on
doing, and now it's time to go home.
They can't remember where they parked, so they
look at the device, and it says,
"Your current location is 512 Main Street."
</p>
<p>
"Hey, you told me this told me where I parked my car."
</p>
<p>
"No, I said that it told your current location."
</p>
<p>
"That's right.
And at the time you gave it to me,
my current location was level 3 of the parking garage.
So I expect it to say 'Level 3 of the parking garage'."
</p>
<p>
"No, I mean it tells you your current location
at the time you look at it."
</p>
<p>
"Well, that's stupid. I can do that too."
(Scribble.)
"There, it's a piece of paper that says
'You are right here'."
</p>
<p>
The value returned by the
<code>Get&shy;Current&shy;Thread</code> function is like the GPS,
or the slip of paper that says
"You are right here."
When you hand that value to the kernel,
it substitutes the current thread
at the time you use it.
It's like a check payable to Bearer:
The money goes to whoever happens to take it to the bank.
</p>
<p>
This means, for example, that if you
call
<code>Get&shy;Current&shy;Thread</code> from one thread and pass the
result to another thread,
then when that other thread uses the
value, the kernel will interpret
to mean the thread that is using it,
not the thread that called <code>Get&shy;Current&shy;Thread</code>.
</p>
<p>
It also means that the value cannot
be meaningfully cached to remember
the thread that created the value,
because the point of <code>Get&shy;Current&shy;Thread</code> is to adapt
to whoever happens to be using it.
</p>
<p>
The theory behind <code>Get&shy;Current&shy;Thread</code> and its friend
<code>Get&shy;Current&shy;Process</code>
is that it gives you a convenient way to refer
to the current thread from the current thread
or the current process from the current process.
For example, you might pass the return value of
<code>Get&shy;Current&shy;Process</code>
to
<code>Duplicate&shy;Handle</code> in order to
duplicate a handle into or out of the current process.
Or you might pass the return value of <code>Get&shy;Current&shy;Thread</code>
to
<code>Set&shy;Thread&shy;Priority</code> to change the priority of
the current thread.
The "current thread" pseudo-handle let you simplify this:
</p>
<pre>
BOOL SetCurrentThreadPriority(int nPriority)
{
 BOOL fSuccess = FALSE;
 HANDLE hCurrentThread = OpenThread(THREAD_SET_INFORMATION,
                            FALSE, GetCurrentThreadId());
 if (hCurrentThread)
 {
  fSuccess = SetThreadPriority(hCurrentThread, nPriority);
  CloseHandle(hCurrentThread);
}
</pre>
<p>
to
</p>
<pre>
BOOL SetCurrentThreadPriority(int nPriority)
{
 return SetThreadPriority(GetCurrentThread(), nPriority);
}
</pre>
<p>
If you want to convert a pseudo-handle to a real handle,
you can use the
<code>Duplicate&shy;Handle</code> function.
</p>
<pre>
BOOL ConvertToRealHandle(HANDLE h,
                         BOOL bInheritHandle,
                         HANDLE *phConverted)
{
 return DuplicateHandle(GetCurrentProcess(), h,
                        GetCurrentProcess(), phConverted,
                        0, bInheritHandle, DUPLICATE_SAME_ACCESS);
}

BOOL GetCurrentThreadHandle(BOOL bInheritHandle, HANDLE *phThread)
{
 return ConvertToRealHandle(GetCurrentThread(), bInheritHandle, phThread);
}

BOOL GetCurrentProcessHandle(BOOL bInheritHandle, HANDLE *phProcess)
{
 return ConvertToRealHandle(GetCurrentProcess(), bInheritHandle, phProcess);
}
</pre>
<p>
Armed with your knowledge of pseudo-handles,
criticize the following code:
</p>
<pre>
class CSingleThreadedObject
{
public:
 CSingleThreadedObject() : _hThreadCreated(GetCurrentThread()) { }

 bool OnCorrectThread() { return GetCurrentThread() == _hThreadCreated; }

private:
 HANDLE _hThreadCreated;
};

class CFoo : protected CSingleThreadedObject
{
public:
 CFoo() { ... }

 // Every method of CFoo checks whether it is being called on the
 // same thread that it was created from.

 bool Snap()
 {
  if (!OnCorrectThread()) return false; // multithreading not supported
  ...
 }

};
</pre>
<p>
<b>Follow-up exercise</b>:
Criticize the following code that attempts to address the issues
you raised in the previous exercise.
</p>
<pre>
// ignore error handling in this class for the purpose of the exercise
class CSingleThreadedObject
{
public:
 CSingleThreadedObject() {
  ConvertToRealHandle(GetCurrentThread(), FALSE, &amp;_hThreadCreated)
}

 bool OnCorrectThread() {
  HANDLE hThreadCurrent;
  ConvertToRealHandle(GetCurrentThread(), FALSE, &amp;hThreadCurrent);
  bool onCorrectThread = hThreadCurrent == _hThreadCreated;
  CloseHandle(hThreadCurrent);
  return onCorrectThread;
 }

private:
 HANDLE _hThreadCreated;
};
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (40)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1155693">
				<div id="div-comment-1155693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155693">
			October 15, 2014 at 7:06 am</a>		</div>

		<p>GetCurrentThreadId</p>
<p>I suppose the primary benefit of GetCurrentThread and Process is they do not fail so you do not have to write error handling code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155703">
				<div id="div-comment-1155703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155703">
			October 15, 2014 at 7:06 am</a>		</div>

		<p>I like the follow up exercise &#8211; why is it that whenever I ask the system to make a copy of a handle, it&#39;s never the same as the original copy I took some time ago?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155713">
				<div id="div-comment-1155713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdbsd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155713">
			October 15, 2014 at 7:17 am</a>		</div>

		<p>Should have probably been a constant, then everything would be obvious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155723">
				<div id="div-comment-1155723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">poizan42</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155723">
			October 15, 2014 at 7:40 am</a>		</div>

		<p>Maybe the real question one should ask is why there are functions which returns constant values. If the pseudohandles was simply HANDLE_CURRENT_PROCESS and HANDLE_CURRENT_THREAD it would probably cause less confusion (like the HKEY_* pseudo handles).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155733">
				<div id="div-comment-1155733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Z</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155733">
			October 15, 2014 at 7:41 am</a>		</div>

		<p>I don&#39;t know that much about Windows programming, but I was successfully able to guess for the 2nd exercise that == isn&#39;t a valid way to check that two thread handles refer to the same thread (the first exercise, of course, is exactly the non-working code mentioned earlier). But then, what is the correct way?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155743">
				<div id="div-comment-1155743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimplyGed</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155743">
			October 15, 2014 at 7:46 am</a>		</div>

		<p>In the first example (CFoo) OnCorrectThread() will always return TRUE because it is comparing pseudo handles.</p>
<p>In the second exercise it will always return FALSE because DuplicateHandle will produce a different handle each time and they will never match</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155753">
				<div id="div-comment-1155753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bozox</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155753">
			October 15, 2014 at 7:52 am</a>		</div>

		<p>@Paul Z: use GetCurrentThreadId() instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155763">
				<div id="div-comment-1155763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smithers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155763">
			October 15, 2014 at 8:00 am</a>		</div>

		<p>asdbsd: That&#39;s exactly what I thought. Instead of</p>
<p>HANDLE GetCurrentThread(void);</p>
<p>why not simply</p>
<p>#define CURRENT_THREAD ((HANDLE) -2)</p>
<p>For the exercises:</p>
<p>1. CSingleThreadedObject does not need to access the thread itself, just identify it. Hence it should use GetCurrentThreadId() instead of GetCurrentThread().</p>
<p>2. Well, that completely failed to address the issue I raised, but never mind. The class needs a destructor which calls CloseHandle(_hCreatedThread);</p>
<p>(Did I do a good job of missing the point there?)</p>
<p>Actually, I see an issue with my first answer; after a thread terminates, another thread could start with the same ID.</p>
<p>Assuming that Michael_99&#39;s comment on GetThreadId (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms683233%28v=vs.85%29.aspx">msdn.microsoft.com/&#8230;/ms683233%28v=vs.85%29.aspx</a>) is correct (a thread id remains unique as long as there is a handle to it, even after it has terminated), the solution should be</p>
<p>bool OnCorrectThread() { return GetThreadId(_hThreadCreated) == GetCurrentThreadId(); }</p>
<p>otherwise, I you would have to &amp;&amp; that test with WaitForSingleObject(_hThreadCreated, 0) == WAIT_TIMEOUT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155773">
				<div id="div-comment-1155773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155773">
			October 15, 2014 at 8:01 am</a>		</div>

		<p>@Paul Z, @bozox</p>
<p>Or, if you actually do have two thread handles you want to compare, use GetThreadId() on each of them and compare the results. That&#39;s the wrong tool for this exercise, because you never really needed handles at all, but it is an answer to the question you asked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt thread-odd thread-alt depth-1" id="comment-1155783">
				<div id="div-comment-1155783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155783">
			October 15, 2014 at 8:01 am</a>		</div>

		<p>I am afraid the GPS metaphor is not very successful. I&#39;d rather choose a person who looks out of the train window, sees the city of Leningrad, goes to sleep, and looks out of the same window again. To his astonishment, he sees Moscow.</p>
<p>PS The idea comes from a Russian children poem by Samuil Marshak. The intrigue there was that the train was not connected to the engine, and it remained in Leningrad every time the passenger woke up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155793">
				<div id="div-comment-1155793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155793">
			October 15, 2014 at 8:01 am</a>		</div>

		<p>Should have been a define instead, people are going to hardcode the value either way. Might as well let the compiler inline the value too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155803">
				<div id="div-comment-1155803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio &amp;#39;Grijan&amp;#39;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155803">
			October 15, 2014 at 8:06 am</a>		</div>

		<p>@Paul Z: the correct way would be to store the thread ID returned by GetCurrentThreadID() and later compare to it. You can have several handles referring to the same object, but a thread&#39;s ID doesn&#39;t change. Obviously, if the thread terminates, its ID can be assigned to a new one, but that&#39;s another problem (and AFAIK, Windows tries not to reuse thread and process IDs, even if it is not in the contract).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155823">
				<div id="div-comment-1155823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Silly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155823">
			October 15, 2014 at 8:17 am</a>		</div>

		<p>Did you know that &#39;time&#39; spelled backwards is &#39;emit&#39;?</p>
<p>Ancient Egyptian: I did not know that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155833">
				<div id="div-comment-1155833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155833">
			October 15, 2014 at 8:22 am</a>		</div>

		<p>@Smithers,Henke37:</p>
<p>Afaik the value of the pseudo handle is implementation defined. So it is possible to change between Windows versions. This is why you prefer GetCurrentThread/GetCurrentProcess to hard coding the value. I know it may seem like it is prehistoric, but can you guarantee that the Windows 9x family returned the same values as the Windows NT based systems that we use these days do? Can you guarantee that Windows 7 returns the same values as Windows 8, or Windows 10? While it is unlikely that they will change values for the sake of changing them, there is no mention of the value or that it wont change in the documentation. Therefore you should not assume that the handle value will always be the same. All the documentation says is that it will return a pseudo-handle.</p>
<p>Remember, taking advantage of undocumented behaviour is a future bug report waiting to happen. Surprisingly, if there is no mention of something in the documentation, it is undocumented.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155843">
				<div id="div-comment-1155843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155843">
			October 15, 2014 at 8:32 am</a>		</div>

		<p>Antonio: if the thread terminates while you&#39;ve got a handle to it, surely the kernel object is still kept around, so the TID can&#39;t be reused?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155853">
				<div id="div-comment-1155853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155853">
			October 15, 2014 at 8:42 am</a>		</div>

		<p>I have a sneaky suspicion I wrote the code in today&#39;s puzzle&#8230; &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1155863">
				<div id="div-comment-1155863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155863">
			October 15, 2014 at 8:43 am</a>		</div>

		<p>@Crescens2k: The point of their post is not &quot;why not make it a constant now&quot; but &quot;why was it never a (documented) constant in the first place&quot;, which would have avoided all the problems you mention by making it contractual.</p>
<p>The answer is probably &quot;it&#39;s on the time machine to-do list&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155873">
				<div id="div-comment-1155873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio &amp;#39;Grijan&amp;#39;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155873">
			October 15, 2014 at 9:03 am</a>		</div>

		<p>@Mark: what you say makes a lot of sense. It depends on how the kernel tracks process/thread IDs (whether using the process/thread objects or a dedicated structure), and maybe it is implementation detail and not part of the contract. I would read documentation carefully before relying on it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155883">
				<div id="div-comment-1155883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155883">
			October 15, 2014 at 9:40 am</a>		</div>

		<p>@Medinoc:</p>
<p>That answer wasn&#39;t a &quot;why not make it constant now&quot; answer anyway. While it may be worded in present tense, I did mention a possible heart of the issue all of the way since the early 90s. Cross version compatibility and future compatibility. It is easy to look backwards, but it is always much harder to look forwards.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155893">
				<div id="div-comment-1155893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">theultramage</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155893">
			October 15, 2014 at 9:41 am</a>		</div>

		<p>Can the pseudo-handle be meaningfully compared against real handles? In Microsoft Detours they have</p>
<p>&nbsp; &nbsp;// Silently (and safely) drop any attempt to suspend our own thread.</p>
<p>&nbsp; &nbsp;if (hThread == GetCurrentThread())</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;return NO_ERROR;</p>
<div class="post">[<em>Yup, that&#39;s a bug. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155903">
				<div id="div-comment-1155903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155903">
			October 15, 2014 at 9:47 am</a>		</div>

		<p>@theultramage</p>
<p>That wouldn&#39;t be safe (although I would consider attempting to suspend the current thread worthy of a log event and exception rather than silent ignoring).</p>
<p>However:</p>
<p>if (GetThreadId(hThread) == GetCurrentThreadId()) is nearly as easy, and would be safe. &nbsp;Possibly add a check that GetCurrentThreadId didn&#39;t return zero in the case of an invalid thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155913">
				<div id="div-comment-1155913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155913">
			October 15, 2014 at 9:49 am</a>		</div>

		<p>Hrm, I misread your comment ultramage. &nbsp;If they do it in Detours, then it probably works, but I am not sure I would trust that unless they expect that hThread would have come from an earlier call to GetCurrentThread().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155923">
				<div id="div-comment-1155923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cherry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155923">
			October 15, 2014 at 10:35 am</a>		</div>

		<p>I think they do it wrong in Detours. Yyou are right, this isn&#39;t safe (and therefore it doesn&#39;t work even though Microsoft themselves are doing it &#8211; it&#39;s nothing new that Microsoft&#39;s employees make mistakes too).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1155933">
				<div id="div-comment-1155933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155933">
			October 15, 2014 at 11:45 am</a>		</div>

		<p>@Crescens2k: Win95 only uses the same value for the thread handle:</p>
<p>kernel32!GetCurrentThread:</p>
<p>bff93ed8 b8feffffff &nbsp; &nbsp; &nbsp;mov &nbsp; &nbsp; eax,0FFFFFFFEh</p>
<p>bff93edd c3 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ret</p>
<p>kernel32!GetCurrentProcess:</p>
<p>bff94633 b8ffffff7f &nbsp; &nbsp; &nbsp;mov &nbsp; &nbsp; eax,7FFFFFFFh</p>
<p>bff94638 c3 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ret</p>
<p>Why -1 is not used I don&#39;t know, maybe it seemed too magical so it was reserved for future use?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155943">
				<div id="div-comment-1155943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">s</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155943">
			October 15, 2014 at 12:11 pm</a>		</div>

		<p>@sxsdnw &#8211; -1 is already taken by INVALID_HANDLE_VALUE, which IIRC has that value for Win16 compat reasons.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1155963">
				<div id="div-comment-1155963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AKFrost</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155963">
			October 15, 2014 at 3:14 pm</a>		</div>

		<p>reminds me of a Chinese idiom: å»èæ±å.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155973">
				<div id="div-comment-1155973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Silly Gisms</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155973">
			October 15, 2014 at 4:27 pm</a>		</div>

		<p>My favorite parts of your blog is when you liken some programming detail to something real-worldish&#8230; GetCurrentThread is like a GPS device, very nice!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1155993">
				<div id="div-comment-1155993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155993">
			October 15, 2014 at 5:10 pm</a>		</div>

		<p>@Mauritis:</p>
<p>The thread ID will stay valid while there is a handle opened to the thread. This keeps the thread object afloat, with the ID assigned to the object. The thread, in the meantime, may be long over.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156003">
				<div id="div-comment-1156003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio &amp;#39;Grijan&amp;#39;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156003">
			October 15, 2014 at 6:15 pm</a>		</div>

		<p>@Maurits: if you have a group of threads created about the same time (all of them existed at a certain point in time), then your point is right: no two threads from the group will share the same ID. But if it is not the case, there is a corner case: thread A creates the object, thread A terminates, thread B is created and gets the same ID as thread A, thread B accesses the object. Then, even if thread B is not the original creator, it gets access to the object. If what alegr1 says in the previous comment is contractual (I haven&#39;t checked the documentation, sincerely), then the solution would be to keep a handle to the original thread inside the object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1155953">
				<div id="div-comment-1155953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155953">
			October 15, 2014 at 3:00 pm</a>		</div>

		<p>&gt; if the thread terminates, its ID can be assigned to a new one</p>
<p>The ID check tells you whether two threads are, in fact, the same.</p>
<p>As long as both of the following are true, the ID check is safe:</p>
<p>* There was at least one instant in time in which both threads were running.</p>
<p>* At least one of the threads is running at the time of the ID check.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156013">
				<div id="div-comment-1156013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156013">
			October 15, 2014 at 10:29 pm</a>		</div>

		<p>@Antonio: is that not why Maurits said:</p>
<p>&#8211; There was at least one instant in time in which both threads were running.</p>
<p>In your example thread A is terminated before thread B is created, so your example does not take that statement into account.</p>
<p>Ps. does everyone else need to click &#39;sign in&#39; twice before actually being signed in?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-1156023">
				<div id="div-comment-1156023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156023">
			October 15, 2014 at 10:40 pm</a>		</div>

		<p>@SimonRev: To be honest, GetThreadId is not available on WinXP (I wonder why GetProcessId is available on WinXP since SP1, but not GetThreadId).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1155983">
				<div id="div-comment-1155983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1155983">
			October 15, 2014 at 5:07 pm</a>		</div>

		<p>theultramage: surely that&#39;s just ensuring that hThread *is* a real handle? If it&#39;s GetCurrentThread(), we should ignore it; if the user passes in a duplicated handle to the current thread, they deserve what they get.</p>
<p>Maurits: your comment implies that thread IDs can be reassigned while the threads still exist. Does that mean my comment about holding a handle is incorrect, or is there just some simple intuition behind your assertion?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1156033">
				<div id="div-comment-1156033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156033">
			October 16, 2014 at 2:00 am</a>		</div>

		<p>Thanks for this posting. I&#39;ve checked the codebase of a project I&#39;m working on, and it has the same bug as in your first example!</p>
<p>Now I hope fixing this bug won&#39;t uncover all kinds of cross-thread-calls that weren&#39;t detected before.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156043">
				<div id="div-comment-1156043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John M. DÅugosz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156043">
			October 16, 2014 at 2:30 am</a>		</div>

		<p>I suppose that if it is determined that any major popular software assumes the constant used as the pseudo-handle, then MS won&#39;t change it. &nbsp;That&#39;s the story I&#39;ve seen on this blog before, e.g. the story behind MSVCRT.dll.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1156063">
				<div id="div-comment-1156063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156063">
			October 16, 2014 at 3:33 am</a>		</div>

		<p>Maybe it would have been clearer if the pseudo-handles had been exported constants?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156123">
				<div id="div-comment-1156123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156123">
			October 16, 2014 at 12:59 pm</a>		</div>

		<p>@Neil: While exporting a constant or a variable is possible, it usually boils down to being a bad idea due to high penalties incurred from the way the loader has to process the fixups.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1156223">
				<div id="div-comment-1156223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Will</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156223">
			October 17, 2014 at 12:02 am</a>		</div>

		<p>I once actually bookmarked &quot;Current Location&quot; in the maps app on my phone when I was trying to remember where I parked. &nbsp;I didn&#39;t know the area well, and I had just gotten a whizzy new smartphone. &nbsp;It seemed like a foolproof plan. &nbsp;I went to the restaurant, had a beer, had a nice walk on the beach. &nbsp;Then, in the dark, I pulled out my phone, looked up the car bookmark and asked it for directions. &nbsp;It said I was already there. &nbsp;I became enlightened. &nbsp;I also spent half the night wandering through a strange neighborhood I&#39;d paid no attention to because my phone knew where I had parked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1156353">
				<div id="div-comment-1156353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156353">
			October 17, 2014 at 8:00 am</a>		</div>

		<p>&quot;I became enlightened.&quot;</p>
<p>Sorry for laughing at your misfortune but this made me grin hard.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1156443">
				<div id="div-comment-1156443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141015-00/?p=43843#comment-1156443">
			October 17, 2014 at 8:27 pm</a>		</div>

		<p>While I am not 100% sure I remember looking at the assembly produced by the mingw-w64 compiler and it inlined the function call to GetCurrentThread meaning any software compiled with it is effectively using a constant. That was several years ago with an early version of the mingw-w64 compiler so they may have fixed it since then.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

