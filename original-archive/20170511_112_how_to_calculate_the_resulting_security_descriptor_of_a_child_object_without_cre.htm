<html>
<head>
<title>How to calculate the resulting security descriptor of a child object without creating it</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How to calculate the resulting security descriptor of a child object without creating it</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 11, 2017 / year-entry #113</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170511-00/?p=96145</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Pretend that it's a private object.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The
<code>Create&shy;Private&shy;Object&shy;Security</code>
function is part of a family of functions
intended for programs that implement security descriptors
for their own custom objects.
Normally, you would let the kernel object manager deal
with security descriptors,
but if your object isn't a kernel object,
then you have to do your own security management.
These functions let you give your objects a security
model that matches those of kernel objects.
</p>
<p>
The
<code>Create&shy;Private&shy;Object&shy;Security</code>
function is one of the functions for assigning security
descriptors to sub-objects.
It understands the rules for "container inherit" and
"inherit only"
as well as the magic SIDs like
"creator owner".
This is what your custom
<code>Create&shy;Sub&shy;Object</code>
function uses to generate the security descriptor for
a new sub-object.
</p>
<p>
But we can use it here to calculate the security descriptor
that would be applied to a subdirectory.
We pretend that we are the file system,
managing our custom "directory" object.
</p>
<pre>
  GENERIC_MAPPING fileGenericMapping = {
    FILE_GENERIC_READ,
    FILE_GENERIC_WRITE,
    FILE_GENERIC_EXECUTE,
    FILE_GENERIC_ALL,
  };
  PSECURITY_DESCRIPTOR childSd;
  CreatePrivateObjectSecurity(
    parentSd,   // ParentDescriptor
    nullptr,    // CreatorDescriptor
    &amp;childSd,   // NewDescriptor
    TRUE        // IsDirectoryObject
    nullptr,    // Token
    &amp;fileGenericMapping); // GenericMapping
  ...
  DestroyPrivateObjectSecurity(childSd);
</pre>
<p>
The <code>Create&shy;Private&shy;Object&shy;Security</code>
gives you the security descriptor which results from the
information you pass in:
</p>
<ul>
<li>
    The security descriptor of the parent object.
    In our case, it's the security descriptor of the
    parent directory.
</li>
<li>
    An optional custom security descriptor for the child object.
    In our case, we pass <code>NULL</code>
    to indicate that we want to inherit from the parent.
</li>
<li>
    Whether the sub-object is itself a container.
    The function uses this to decide whether
    "container inherit" ACEs apply to the new object.
</li>
<li>
    An optional token representing the user doing the creating.
    This is used to set the owner and group on the resulting
    security descriptor, as well as knowing what "creator owner"
    ACEs should be converted to.
    We pass <code>NULL</code> to say that the function should
    use the current default token.
</li>
<li>
    A <code>GENERIC_MAPPING</code> structure that specifies
    how generic access bits should be converted.
    Fortunately, the generic mapping for file system objects
    <a HREF="https://msdn.microsoft.com/library/windows/desktop/aa364399(v=vs.85).aspx">
    is documented</a>,
    and it even has convenient names that we can use.
</li>
</ul>
<p>
The theory is that this could be used to avoid the race condition
when
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545">
creating a folder that inherits its parent's ACL,
and then overriding part of it</a>.
That race condition exists in the period of time after the
subdirectory is created with default attributes
and before the program can apply the new seurity attributes.
During that time, somebody might gain access to the directory
in a form that would have been disallowed by your override.
</p>
<p>
Using this technique, you can precalculate what the default
attributes would be, then apply your custom override,
and then pass those security attributes when you call
<code>Create&shy;Directory</code>.
This removes the race window where the subdirectory
briefly has the wrong security attributes.
</p>
<p>
Unfortunately, you have other problems.
</p>
<p>
For one thing,
you opened a different race condition:
If the security attributes of the parent directory change,
then you will apply those stale attributes to the subdirectory.
</p>
<p>
But the worse thing is that I glossed over the hard part:
getting the security descriptor of the parent directory.
The
<code>Create&shy;Private&shy;Object&shy;Security</code>
function is intended to be used by the code that is
managing security of its custom objects,
so it has full access to all the security descriptors.
But in this case, we are an outside operator,
and getting access to that security descriptor may not
be possible.
We may not have <code>READ_CONTROL</code> access
to the DACL.
We may not have
<code>ACCESS_SYSTEM_SECURITY</code> rights
to read the SACL.
</p>
<p>
So this idea sounded good on paper,
but runs into problems in practice.
Still, I mentioned it because it gives me
an excuse to write about the
<code>Create&shy;Private&shy;Object&shy;Security</code>
function.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1295805">
				<div id="div-comment-1295805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170511-00/?p=96145#comment-1295805">
			May 11, 2017 at 8:16 am</a>		</div>

		<p>Could the solution to the race be to create the object (in this case, sub-directory) with overly restrictive rights and then remove those rights?</p>
<p>IOW, instead of creating it with not enough restrictions and adding restrictions (causing a race window), create it with tight security, and then remove the ones that are in excess of what you want?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1295825">
				<div id="div-comment-1295825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170511-00/?p=96145#comment-1295825">
			May 11, 2017 at 8:41 am</a>		</div>

		<p>Doesn&#8217;t work because you can&#8217;t create that DACL and still be able to read the DACL on your newly created directory.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1295885">
				<div id="div-comment-1295885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170511-00/?p=96145#comment-1295885">
			May 12, 2017 at 8:16 am</a>		</div>

		<p>As the owner, don&#8217;t you always have access to the DACL?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

