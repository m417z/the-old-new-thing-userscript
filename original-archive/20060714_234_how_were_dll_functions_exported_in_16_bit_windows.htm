<html>
<head>
<title>How were DLL functions exported in 16-bit Windows?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How were DLL functions exported in 16-bit Windows?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 14, 2006 / year-entry #235</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The whole point of dynamic link libraries (DLLs) is that the linkage is dynamic. Whereas statically-linked libraries are built into the final product, a module that uses a dynamically-linked library merely says, "I would like function X from Y.DLL, please." This technique has advantages and disadvantages. One advantage is more efficient use of storage, since...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The whole point of dynamic link libraries (DLLs) is that the linkage is dynamic. Whereas statically-linked libraries are built into the final product, a module that uses a dynamically-linked library merely says, "I would like function X from Y.DLL, please." This technique has advantages and disadvantages. One advantage is more efficient use of storage, since there is only one copy of Y.DLL in memory rather than a separate copy bound into each module. Another advantage is that an update to Y.DLL can be made without having to re-compile all the programs that used it. On the other hand, the ability to swap in functionality automatically is also one of the main disadvantages of dynamic link libraries, because one program can change a DLL that has cascade effects on other clients of that DLL.</p>
<p> Anyway, let's start with how 16-bit Windows managed imports and exports. After that, we'll see how things changed during the switch to 32-bit Windows, and then we'll take a look at the compiler-specific <code>dllimport</code> declaration specifier. (<a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/12/57833.aspx">I already discussed <code>dllexport</code> earlier</a>.) </p>
<p> A 16-bit DLL has not one but three export tables. (Things are actually more complicated than I describe them here, but I'm going to skip over the nitpicky details just to keep everyone's heads from exploding.) The most important table is a sparse array of functions, indexed by a 1-based integer (the "ordinal"). It is this function table that is the master list of all exported functions. If you request a function by ordinal, the ordinal is looked up in this table. The table is physically rather complicated due to the sparseness, but logically, it looks like this: </p>
<table rules="cols">
<tr>
<th>Ordinal&nbsp;</th>
<th>Address</th>
<th>other goo</th>
</tr>
<tr>
<td>1</td>
<td>02:0014</td>
<td>...</td>
</tr>
<tr>
<td>2</td>
<td>04:0000</td>
<td>...</td>
</tr>
<tr>
<td>5</td>
<td>02:02C8</td>
<td>...</td>
</tr>
</table>
<p> The first column in the table is the ordinal of the function, and the second function describes where the function can be found. (Notice that there is no function 3 or 4 in this DLL.) </p>
<p> Things get interesting when you want to export a function by name. The exported names table is a list of function names with their associated ordinal equivalents. For example, a section of the exported names table for the 16-bit window manager (USER) went like this: </p>
<table>
<tr>
<td colspan="2">...</td>
</tr>
<tr>
<td><code>ClipCursor</code></td>
<td>16</td>
</tr>
<tr>
<td><code>GetCursorPos</code></td>
<td>17</td>
</tr>
<tr>
<td><code>SetCapture</code></td>
<td>18</td>
</tr>
<tr>
<td colspan="2">...</td>
</tr>
</table>
<p> If somebody asks for the address of the function <code>ClipCursor</code>, the exported names table is consulted, the value 16 is retrieved, and the function at position 16 in the ordinal export table is returned. Although you can't see it here, there was no requirement that the names in the exported names table be in any particular order, or that every ordinal have a corresponding name. </p>
<p> Wait, did I say the exported names table? I'm sorry, that was an oversimplification. There are actually two exported names tables, the resident names table and the non-resident names table. As their names suggest, the names in the resident names table remain in memory as long as the DLL is loaded, whereas the names in the non-resident names table are loaded into memory only when somebody calls <code>GetProcAddress</code> (or one of its moral equivalents). This distinction is a reflection of the extremely tight memory constraints that Windows had to run within back in those days. For example, the window manager (USER) has over six hundred export functions; if all the exported names were kept resident, that would be over ten kilobytes of data. You'd be wasting four percent of the memory of your 256KB machine remembering things you don't need most of the time. </p>
<p> The large size of the table for exported function names meant that only functions that are passed to <code>GetProcAddress</code> with high frequency deserve to be placed in the resident names table. For most DLLs, no function falls into this category, and the resident names table is empty. (Head-exploding details deleted for sanity's sake.) </p>
<p> Since obtaining a function by name is so expensive (requiring the non-resident names table to be loaded from disk so it can be searched), all functions exported by operating system DLLs are exported both by name and by ordinal, with the ordinal taking precedence in the import library table. Obtaining a procedure address by ordinal avoids the name tables entirely. </p>
<p> Notice that every named function has a corresponding ordinal. If you do not assign an ordinal to your named function in your module definition file, the linker will make one up for you. (However, the value that it makes up need not be the same from build to build.) This situation did not occur in practice, for as we noted above, everybody explicitly assigned an ordinal to their exports and put that ordinal in the import library in order to avoid the huge cost of a name-based function lookup. </p>
<p> That's a quick look at how functions were exported in 16-bit Windows. Next time, we'll look at how they are imported. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-400943">
				<div id="div-comment-400943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-400943">
			July 14, 2006 at 11:25 am</a>		</div>

		<p>Oh man, 16-bit. This awakes some memories. Like that time I was woken by the phone in an ungodly hour by the FoxPro Norwegian team, responding to my (quite serious) complain that their import .lib exported the WEP!</p>
<p>For the ones lucky enough to never having explored these deep and dark corners of Windows 16-bit, WEP was the &#8220;Windows Exit Procedure&#8221; (IIRC &#8211; Raymond will correct me if I&#8217;m wrong). It was a very special <em>named</em> function exported by DLLs to be called when all references to the module had been released, i.e. no programs used the DLL anymore. This was required as all applications and the system itself shared a single address space resource, and the DLL had to have a way to clean up what resources it allocated before it was unloaded.</p>
<p>The thing was, while you usually did write a WEP for moderately and more complex DLLs, you never <em>EVER</em> exported it like these morons did. You put it in the exported names table in the DLL, but you NEVER put it in the import library for that DLL. Doing so would make it effectively impossible for anyone else writing a DLL to use your DLL.</p>
<p>Well, guess what. That was a scenario the FoxPro developers never considered (one could rightfully, and in the most polite way, say &#8220;they didn&#8217;t really and fully know what they were doing&#8221;), and so I was left with a DLL I couldn&#8217;t link, and a phone call at an hour I didn&#8217;t appreciate.</p>
<p>What really made me see the quality of this was when I presented, again, the error for this person over the phone, and the response was &#8220;OK, we export the WEP from the import lib? So what?&#8221;.</p>
<div CLASS=post>[<i>Ah, the WEP&#8230; The modern analog to this mistake would be putting your DllMain into your import library. Now everybody who tries to link to your DLL gets a &#8220;duplicate definition conflict&#8221; between their DllMain and yours. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-400973">
				<div id="div-comment-400973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-400973">
			July 14, 2006 at 11:38 am</a>		</div>

		<p>Just out of curiosity, what sort of function /would/ GetProcAddress() be called for with high frequency?</p>
<p>And do you have any idea what made it impractical/impossible for callers to remember the returned pointer(s) themselves? If there aren&#8217;t that many of those functions, and it&#8217;s only 4 bytes per pointer (GetProcAddress returns a FAR pointer?), then that wouldn&#8217;t have eaten too much mem at the time, would it?</p>
<div CLASS=post>[<i>I can&#8217;t think of a function designed to be GetProcAddress&#8217;d with high frequency; I left that as a hedge in case one existed. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-401003">
				<div id="div-comment-401003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-401003">
			July 14, 2006 at 12:47 pm</a>		</div>

		<p>For 16-bit, I also can&#8217;t think of one. For 32-bit though (even that it works differently), I&#8217;d say GetDisk(Free?)SpaceEx is at the top of the list. Oh the shortsightedness of what is/was known as Win32c (the &quot;Chicago&quot;, aka Win95, version of the Win32 API).</p>
<p>Adam:<br />
<br />There is no reason a single process wouldn&#8217;t hold on to the pointer, once it got it. But remember, 16-bit. All the applications in the system shared a single address space. The DLL was loaded once, at an address that then became unavailable for all other use in all other processes. So the issue wasn&#8217;t at all a single process not being able to keep track of what it got &#8211; it was the whole system using that single and very small adddress space and needing to share it between all applications (we&#8217;re talking pre-386 here).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-401013">
				<div id="div-comment-401013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-401013">
			July 14, 2006 at 1:28 pm</a>		</div>

		<p>A base-1 integer? What&#8217;s that? 0 for 0, 00 for 1, 000 for 2, etc?</p>
<p>Wait, you said &quot;1-based integer&quot;? Never mind. :)</p>
<p>BTW Mike, was that back when FoxPro was an MS app, or was that before MS bought them?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-401053">
				<div id="div-comment-401053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-401053">
			July 14, 2006 at 2:03 pm</a>		</div>

		<p>As far as a function that gets GetProcAddress()ed frequently in 16-bit, I&#8217;d say that DefWindowProc might be a good candidate. &nbsp;Programs won&#8217;t call GetProcAddress() on it directly, but they will import it, so the system needs to resolve the link every time any program starts.</p>
<p>However, it may be that the programs linked to DefWindowProc by ordinal number, in which case it&#8217;s not one of the frequent functions. &nbsp;Hmm&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-401083">
				<div id="div-comment-401083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric Brown</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-401083">
			July 14, 2006 at 4:45 pm</a>		</div>

		<p>Mike:<br />
<br />I don&#8217;t believe that any version of Windows was written in Pascal. &nbsp;The reason that Pascal calling conventions were used was, IIRC, the Pascal calling convention (callee cleans up after the call) was a few bytes smaller (per call site), and a few clock ticks faster than C calling conventions (caller cleans up after the call).</p>
<p>When you&#8217;re trying to shoehorn a system into 640K, every few bytes help.</p>
<p>Of course, C calling conventions allow for varargs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-401063">
				<div id="div-comment-401063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-401063">
			July 14, 2006 at 2:30 pm</a>		</div>

		<p>On the subject of 1-based, so I don&#8217;t die wondering: Raymond, was Windows at one time written in/for PASCAL (specifically the API or API-handling code)? I&#8217;m thinking of the many clues in the form of calling convention for system functions, the one-based indices and other implementation details that seems to have leaked through. If not, do you know (or can you find out) why many of these design decisions were made at the time? I&#8217;d hate to die not knowing this piece of history.</p>
<p>Gabe:<br />
<br />IIRC it was around 1991, so I&#8217;m quite confident MS was the owner of FoxPro then. Another clue could be; top score on getting back to me on the issue quickly, but a rock bottom for giving me a &quot;Huh, what you say goes *whoosh* over our head&quot;. I see it as just another proof of what Raymond recently wrote in another entry &#8211; many are the groups that ship Windows software that break (the) rules of Windows programming, and not all within MS writing software are Windows API gurus.</p>
<p>Still, not exporting the WEP into the import library might perhaps not have been considered a &quot;guru&quot; issue. ;-)</p>
<p>(I btw think MS never fixed this. IIRC I had to fix it manually by introducing, for no other reason than to fix this FoxPro bug, yet another intermediate DLL that had no data whatsoever and only forwarded my calls from my real DLL to the FoxPro DLL).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-401133">
				<div id="div-comment-401133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-401133">
			July 15, 2006 at 6:08 am</a>		</div>

		<p>The WEP problem is easily fixed. You simply load the import library<br />
into a binary editor, find the WEP text and replace it with (say) XXX.</p>
<p>One should never treat third party tools with more respect than<br />
your own code. (There was a time when our company had MSVC6 checked<br />
into SourceSafe to make it easy to deploy all the necessary patches.)</p>
<div CLASS=post>[<i>And then a new version of the import library is released, you update your copy, and then your program doesn&#8217;t work. After two weeks of fighting, you realize, &#8220;Oh right, I have to patch the import library first.&#8221; That&#8217;s two weeks of your life you can&#8217;t get back. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-401143">
				<div id="div-comment-401143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://t-mix.blogspot.com' rel='external nofollow' class='url'>Tony</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-401143">
			July 15, 2006 at 8:49 am</a>		</div>

		<p>Hello Raymond,</p>
<p>sorry to be off-topic to this post, but could you look into this<br />
and correct this on your tooltip post? I had the same problem (missing<br />
black border most of the time, but with XP) and the suggestion by<br />
Martin Filteau made it go away.</p>
<p>Original posting tooltip: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2006/06/26/647365.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2006/06/26/647365.aspx</a><br />
<br />Martin Filteau&#8217;s suggestion: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2006/06/27/648493.aspx#649674" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2006/06/27/648493.aspx#649674</a></p>
<p>Thanks,<br />
<br />Tony</p>
<div CLASS=post>[<i>I&#8217;m not sure that removing WS_EX_TRANSPARENT is the correct answer (since it messes up hit-testing) but I haven&#8217;t had the interest in finding out. People can find Martin&#8217;s comment and decide whether or not they want to follow it. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-401183">
				<div id="div-comment-401183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-401183">
			July 15, 2006 at 5:12 pm</a>		</div>

		<p>Sorry Mike, but MS didn&#8217;t buy FoxPro until the middle 1992, and the Windows version that was released a few months later was already mostly complete by the time MS moved in. It would almost certainly have been a Fox Software engineer you were talking to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-401203">
				<div id="div-comment-401203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-401203">
			July 15, 2006 at 8:27 pm</a>		</div>

		<p>Gabe, right, my bad. I&#8217;m fairly sure I was using MSVC1.x for that project, and it seems it was released early 1993 (?), why I&#8217;d guesstimate sometime after Q1-Q2 1993.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-401293">
				<div id="div-comment-401293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-401293">
			July 16, 2006 at 7:00 pm</a>		</div>

		<blockquote><p>
  For most DLLs, no function falls into this category, and the resident names table is empty. </p>
<p>WEP was in fact one of those names that had to be in the resident names table (and the code segment had to be preload nondiscardable for the same reason). </p>
<p>&gt;I can&#8217;t think of a function designed to be GetProcAddress&#8217;d with high frequency <br />Although I never used PenWindows, I&#8217;d say RegisterPenApp would have been a candidate for the resident names table &#8211; even taskman.exe calls GetProcAddress(GetSystemMetrics(SM_PENWINDOWS), &#8220;RegisterPenApp&#8221;) and it&#8217;s only 3K.</p>
<div CLASS=post>[<i>Once per process isn&#8217;t high frequency enough to be worth being made a resident name. It would have to be something that is GetProcAddress&#8217;d at least several times per minute to be worth keeping resident. -Raymond</i>]</div>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-401343">
				<div id="div-comment-401343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/07/17/668284.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-401343">
			July 17, 2006 at 10:00 am</a>		</div>

		<p>A threaded linked list.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-401503">
				<div id="div-comment-401503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">glonq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-401503">
			July 17, 2006 at 7:55 pm</a>		</div>

		<p>256KB machine? &nbsp;Did some version of Windows (version 1?) actually work with that?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-401623">
				<div id="div-comment-401623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/07/18/669668.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-401623">
			July 18, 2006 at 10:00 am</a>		</div>

		<p>A table of function pointers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-401993">
				<div id="div-comment-401993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-401993">
			July 19, 2006 at 6:56 am</a>		</div>

		<p>[And then a new version of the import library is released, you update your copy, and then your program doesn&#8217;t work. After two weeks of fighting, you realize, &#8220;Oh right, I have to patch the import library first.&#8221; That&#8217;s two weeks of your life you can&#8217;t get back. -Raymond]</p>
<p>Unlikely in this case, since the error is 100% certain to recur the very first time you link after updating the 3rd party product, and the error message will say something like &#8220;You&#8217;ve got two WEPs &#8211; one in your code and one in this library over here.&#8221;. I think two minutes is a more reasonable estimate of the loss of life in this case.</p>
<div CLASS=post>[<i>This assumes that the person who knows how to fix the problem (1)&nbsp;still works on the team, and (2)&nbsp;remembers what this error message means. Imagine: You&#8217;re a new hire, you&#8217;re asked to take advantage of some new functionality, so you update the import library and&mdash;uh oh&mdash;you get this &#8220;WEP multiply defined&#8221; error. You ask your colleagues and none of them knows what this means. Prepare to lose two weeks of your life. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-402363">
				<div id="div-comment-402363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/07/20/672695.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-402363">
			July 20, 2006 at 10:00 am</a>		</div>

		<p>Preserving the spirit while accommodating separate address spaces and new processors.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-403633">
				<div id="div-comment-403633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mlacey/archive/2006/07/26/679181.aspx' rel='external nofollow' class='url'>Attenuating Thoughts</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-403633">
			July 26, 2006 at 12:50 pm</a>		</div>

		<p>In case you&#8217;ve missed it and are interested, Raymond Chen has started a series on how DLL imports/exports&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-403873">
				<div id="div-comment-403873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/07/27/680250.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-403873">
			July 27, 2006 at 10:00 am</a>		</div>

		<p>For reference.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-666943">
				<div id="div-comment-666943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://msmvps.com/blogs/vandooren/archive/2008/09/12/how-dll-exports-really-work.aspx' rel='external nofollow' class='url'>Cluebat-man to the rescue</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060714-16/?p=30513#comment-666943">
			September 12, 2008 at 6:50 am</a>		</div>

		<p>I found this list of article on Raymond&amp;#39;s blog . Raymond&amp;#39;s blog is one of the more interesting</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

