<html>
<head>
<title>Why don't we create a special class of programs which can break the normal rules?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why don&#8217;t we create a special class of programs which can break the normal rules?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 24, 2009 / year-entry #411</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In response to a discussion of why the window handle limit is 10,000, commenter Juan wondered why we don't create a special class of programs which can exceed the 10,000 handle limit and otherwise bypass the normal operation of the system. This is another case of the tragedy of special treatment: Eventually, nothing is special...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>In response to a discussion of why the window handle limit is 10,000, commenter Juan wondered <a href="http://blogs.msdn.com/oldnewthing/archive/2007/07/18/3926581.aspx#3938322"> why we don't create a special class of programs which can exceed the 10,000 handle limit</a> and otherwise bypass the normal operation of the system.</p>
<p> This is another case of the tragedy of special treatment: <a href="http://blogs.msdn.com/oldnewthing/archive/2008/10/06/8969399.aspx"> Eventually, nothing is special any more</a>. </p>
<p> If there were a way for an application to say, "Hey, I don't want to be constrained by the normal rules that apply to your everyday boring applications," then every application <i>would simply say it</i>, and the net effect would be that the constraint no longer applies to anybody. </p>
<p> Task Manager conforms to the normal rules for GUI programs because <a href="http://blogs.msdn.com/oldnewthing/archive/2008/09/22/8960761.aspx#8962451"> if it marked itself as special</a>, soon everybody would mark themselves as special in order to get the same special treatment. (Besides, the special treatment doesn't help Task Manager at all, since Task Manager doesn't create 10,000 handles. The specific issue in the comment is not something Task Manager even knows that it needs to opt out of. All it did was call <code>CreateWindow</code>; Task Manager shouldn't need to know about the internal implementation of <code>CreateWindow</code>.) </p>
<p><b>Bonus chatter</b></p>
<p>: There is already <a href="http://msdn.microsoft.com/en-us/library/bb625963.aspx"> one mechanism for applications to say that a particular class of restrictions should not apply to them</a>. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-matteo even thread-even depth-1" id="comment-797763">
				<div id="div-comment-797763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-797763">
			December 24, 2009 at 8:11 am</a>		</div>

		<p>Still, it would be nice to have the task manager executed in a protected environment, or, maybe, the GINA CTRL-ALT-CANC window could provide some magic &#8220;panic button&#8221; to pause all the user processes (or maybe only the CPU/memory hogging ones) before starting the task manager.</p>
<div class=post>[<i>But what if it paused a process while it owned a mutex that Task Manager needs? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-797803">
				<div id="div-comment-797803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bozox</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-797803">
			December 24, 2009 at 9:06 am</a>		</div>

		<p>In Windows Mobile, there are privileged apps and unprivileged ones. The list of available API differs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-797813">
				<div id="div-comment-797813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-797813">
			December 24, 2009 at 9:53 am</a>		</div>

		<p>1. It makes sense to implement code-based permissions. Kind of like what .NET does, but for native code. UAC does a bit of that, but in ugly way.</p>
<p>2. A concept of global window handles and USER/GDI resources should be revised. There is no reason every process need to be able to access all windows of other processes. Window/GDI handles and the associated data should be allocated inprocess, without affecting other processes resosurces. Only some special windows (top level) should allow cross-process access for query and WM_CLOSE and other limited set of messages. All other messages should be quietly dropped.</p>
<div class=post>[<i>Code-based permissions in native code <a href="http://blogs.msdn.com/oldnewthing/archive/2006/08/17/704232.aspx" rel="nofollow">cannot be applied at a level finer than the process</a>, which limits what you can do. And many programs <a href="http://blogs.msdn.com/oldnewthing/archive/2005/02/11/371042.aspx" rel="nofollow">don&#8217;t use window handles for child controls</a>. Mind you, there are also lots of people who <u>expect</u> to be able to screw with the windows of other processes. Just look at all the people trying to hack Explorer&#8217;s listview. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-797843">
				<div id="div-comment-797843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://billy-oneal.com/' rel='external nofollow' class='url'>Billy O'Neal</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-797843">
			December 24, 2009 at 11:51 am</a>		</div>

		<p>@Teo:</p>
<p>Some applications might have such a flag, but UAC will not automatically elevate an application unless that application&#8217;s executable passes a hash check.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-797863">
				<div id="div-comment-797863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-797863">
			December 24, 2009 at 12:00 pm</a>		</div>

		<p>@Teo:</p>
<p>Not just explorer.exe but other important processes like calc.exe and notepad.exe.</p>
<p>(Though calling them &quot;auto-elevating&quot; is wrong. They&#8217;re flagged as special in that they can auto-elevate specific COM objects but they don&#8217;t auto-elevate themselves. There&#8217;s another set of processes which do do that, though.)</p>
<p>@Billy O&#8217;Neal:</p>
<p>But it&#8217;s also trivial to inject code into those processes, so the exe signature check isn&#8217;t worth much.</p>
<p>Similar to what Raymond says in the root, you make one thing &quot;special&quot; and anything can make itself special as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-797833">
				<div id="div-comment-797833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Teo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-797833">
			December 24, 2009 at 11:40 am</a>		</div>

		<p>Interestingly enough, noone bothered to mention the self-elevating executables in WIndows 2088 R2. They just toggle a flag in their manifests which says &quot;wee, I am special, I am *the* king!&quot; But imho Explorer.exe is not *a* process, it is the upper layer of the OS, so it is expected to be able to and to have to do things other processes should not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo even thread-even depth-1" id="comment-797853">
				<div id="div-comment-797853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-797853">
			December 24, 2009 at 11:56 am</a>		</div>

		<p>[But imho Explorer.exe is not *a* process, it is the upper layer of the OS, so it is expected to be able to and to have to do things other processes should not.]</p>
<p>Explorer.exe runs also a lot of shell extensions, that in this way would gain extra powers.</p>
<p>[But what if it paused a process while it owned a mutex that Task Manager needs? -Raymond]</p>
<p>Are you talking about an OS internal mutex?</p>
<p>Well, maybe a &quot;KILL all the user&#8217;s CPU hogging processes&quot; may do the trick, even if I realize that it would still be a suboptimal solution.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-797903">
				<div id="div-comment-797903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-797903">
			December 24, 2009 at 7:58 pm</a>		</div>

		<p>If it was absolutely necessary to make Task Manager &quot;special&quot; without extending the ability to any other processes, couldn&#8217;t task manager be rewritten inside of win32k.sys? &nbsp;I mean, it might have to drop all of its dependencies and be a major pain in the ass since it wouldn&#8217;t be able to use CreateWindow or any of the normal APIs, but it would basically gain the ability to &quot;do special stuff&quot; that no process would be able to do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-797913">
				<div id="div-comment-797913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-797913">
			December 24, 2009 at 9:18 pm</a>		</div>

		<p>@Leo Davidson,</p>
<p>You cannot inject code to an elevated process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-797923">
				<div id="div-comment-797923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-797923">
			December 24, 2009 at 9:26 pm</a>		</div>

		<p>@Alex</p>
<p>Beat me to it. &nbsp;In order to inject code into an elevated process, first you have to elevate yourself. &nbsp;Once you&#8217;re elevated, then you can inject code into the other process which will run elev&#8230; oh wait&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-797933">
				<div id="div-comment-797933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-797933">
			December 25, 2009 at 12:08 am</a>		</div>

		<p>@Alexander Grigoriev &amp; @Dan:</p>
<p>Explorer.exe isn&#8217;t elevated so you can inject into that.</p>
<p>You can then use Explorer&#8217;s ability to write to protected folders to drop a DLL somewhere which an auto-elevated process will load.</p>
<p>You then run the auto-elevated process. The code in your DLL is now elevated, even though the thing triggering all of this never required elevation.</p>
<p>This isn&#8217;t just in theory; I&#8217;ve proved it.</p>
<p>(Only on Win7 when running as admin under the default UAC settings, though. It&#8217;s not the end of the world and you can stop it being possible if you modify your configuration.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-797953">
				<div id="div-comment-797953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-797953">
			December 25, 2009 at 3:11 am</a>		</div>

		<p>One slight nitpick: it is possible to mark processes special in a way that not every process can do. To take the task manager example, you could let the kernel start the Ctrl-Alt-Del process in a special way (i.e. with a function unavailable to user mode code), for example storing a flag in some internal kernel data structure related to the process that enables some functions that other programs can&#8217;t call. That way, you could give task manager (or ProcessExplorer or some other task manager replacement) extra powers.</p>
<p>Of course that doesn&#8217;t solve the mutex problem mentioned. At first glance it would appear to be bad design if a program could lock up all processes with higher priority by simply arranging to take a certain mutex, so let&#8217;s hope that this isn&#8217;t the case. But if it is, you could let the code that takes the mutex kill whoever&#8217;s got it if it doesn&#8217;t give it up within, say, three seconds. That functionality would only be available to special programs of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-797963">
				<div id="div-comment-797963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-797963">
			December 25, 2009 at 3:40 am</a>		</div>

		<p>I&#8217;ve thought about the mutex problem for a bit. The only situation where task manager would have to wait for a mutex to become available is where it needs access to a data structure (or similar shared resource) that is currently in an inconsistent state.</p>
<p>Two observations: 1) All other situations can be rewritten without the mutex. 2) Killing the offender makes the situation worse.</p>
<p>Since task manager can be written in such a way that it doesn&#8217;t share any of its own data structures, it follows that the data structure must be a system data structure (perhaps a structure of the kernel or some other system component; all other data structures that could be forced upon it could be warded off using the task manager&#8217;s special status). Therefore the mutex should be managed by the system and you can therefore design things in such a way that no process can monopolize it if a process with higher priority needs it.</p>
<div class=post>[<i>The mutexes are indeed designed so no process holds it for very long, but if you suspend the thread while it owns the mutex, it never gets a chace to release it. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-797973">
				<div id="div-comment-797973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">avek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-797973">
			December 25, 2009 at 4:26 am</a>		</div>

		<p>&gt;couldn&#8217;t task manager be rewritten inside of win32k.sys?</p>
<p>Oh no!!! How will it be replaced then? It would be unbearable to go back to Task Manager from Process Explorer&#8230;</p>
<p>Won&#8217;t save from mutex problem anyway.</p>
<p>&gt; But imho Explorer.exe is not *a* process, it is the upper layer of the OS</p>
<p>&quot;Upper layer of the OS&quot; is something blurry in any OS influenced by microkernel ideas. Explorer is application-like in many ways. It can be replaced, and sometimes is. It&#8217;s also a thing that apps can easily mess with.</p>
<p>&gt; It makes sense to implement code-based permissions.</p>
<p>In .NET style? Not very, as Raymond already pointed several times. Stacks within single process can be easily forged by unmanaged code.</p>
<p>Still, it can be done at the level of executable images: CreateProcess, LoadLibrary, etc. become checkable barriers, and the .dll loads/process starts only if the file is both:</p>
<p>&#8211; allowed to use for the caller of CreateProcess/LoadLibrary and</p>
<p>&#8211; unchanged from the last time when the &quot;allowed&quot; setting was recorded.</p>
<p>If any of the checks fails, user is asked to &quot;allow&quot; the executable/dll to be used again.</p>
<p>There are personal firewalls and security software that do exactly this check. It works because the kernel and kernel-mode drivers can ensure the check, user-mode cannot fake it anymore.</p>
<p>But this scheme alone isn&#8217;t very useful; those firewalls need to hook additional security-sensitive functions (both in kernel and user mode) to actually protect you. That&#8217;s because in WinAPI, the functions that need to be secured are not separated into their own .dlls.</p>
<p>I think that&#8217;s why Windows itself doesn&#8217;t implement this scheme. Maybe MinWin will change that, but unlikely.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-798083">
				<div id="div-comment-798083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-798083">
			December 25, 2009 at 6:24 pm</a>		</div>

		<p>@Leo Davidson,</p>
<p>&quot;(Only on Win7 when running as admin under the default UAC settings, though. It&#8217;s not the end of the world and you can stop it being possible if you modify your configuration.)&quot;</p>
<p>As Raymond likes to say, you&#8217;re already on another side of an airtight hatch&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-798013">
				<div id="div-comment-798013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Teo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-798013">
			December 25, 2009 at 11:04 am</a>		</div>

		<p>The gory details about self-elevation are irrevelant. My point is that since 2009 vintage Windows *has* special executables that creates special processes. Which proves Raymond wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-798133">
				<div id="div-comment-798133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-798133">
			December 26, 2009 at 2:15 am</a>		</div>

		<p>@Alexandor Grigoriev: Since anyone can get through the airtight hatch if they want, what&#8217;s the point of the hatch being there?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-798163">
				<div id="div-comment-798163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-798163">
			December 26, 2009 at 7:27 am</a>		</div>

		<p>@Alexander Grigoriev:</p>
<p>I&#8217;m not arguing about airtight hatches here; I&#8217;m saying that, like the example in the root post, you can&#8217;t give a processes special powers without effectively giving those powers to all processes (which are peers of the special process).</p>
<p>(In my example, some processes are marked &quot;special&quot; while someone has gone out of their way to prevent other processes from being marked as special, yet those other processes can still become special by manipulating an existing special process.)</p>
<p>So there&#8217;s little point in giving specific processes special powers via flags/checks which *aren&#8217;t* an airtight hatch. If you&#8217;re going to allow one process to bypass certain limits then you might as well allow all processes to do the same and save yourself a lot of needless complexity.</p>
<p>(Another benefit is it makes things smoother for tools which augment or replace the &#8216;special&#8217; processes, e.g. Task Manager / Process Explorer or Explorer / other file managers.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-798333">
				<div id="div-comment-798333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-798333">
			December 28, 2009 at 10:36 am</a>		</div>

		<p>[The mutexes are &#8230; to release it. -Raymond]</p>
<p>Phew! That&#8217;s a relief.</p>
<p>So the only real way in which a mutex can screw up task manager is if you manage to suspend it just as it owns some user mode mutex (a mutex set by user mode code &#8211; as far as I know it&#8217;s normally impossible to suspend a thread while it&#8217;s in kernel mode) that task manager needs too.</p>
<p>To solve that, you would need to make sure that task manager cannot be made to wait on a mutex possibly owned by suspendable code, which may be difficult if for example uxTheme is doing some internal locking. Still, if something like that can happen, something should be done about it, since I suspect the entire system would deadlock, not just task manager.</p>
<p>But until such a situation is found the discussion is academic; I&#8217;ve suspended and resumed processes a lot and never had unrelated processes lock up on me.</p>
<p>&gt;&gt;couldn&#8217;t task manager be rewritten inside of win32k.sys?</p>
<p>&gt;Oh no!!! How will it be replaced then? It would be unbearable to go back to Task Manager from Process Explorer&#8230;</p>
<p>Indeed. Besides, I think my scheme would be more elegant.</p>
<p>&gt;I&#8217;m saying that, like the example in the root post, you can&#8217;t give a processes special powers without effectively giving those powers to all processes (which are peers of the special process).</p>
<p>That is false. The IA32 architecture supports that since the nineties or so. The rest is merely a question of design and implementation. I&#8217;ve given a possible scheme in a previous post. I don&#8217;t know if it&#8217;s the absolute best way, but I think it&#8217;s workable.</p>
<div class=post>[<i>While it could be done, making lower-level components aware of higher-level components would also be a violation of general engineering principles. Windows has been working to eradicate these violations not introduce new ones! -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-798423">
				<div id="div-comment-798423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091224-00/?p=15543#comment-798423">
			December 29, 2009 at 6:43 am</a>		</div>

		<p>[While it could &#8230; introduce new ones! -Raymond]</p>
<p>That was not what I was suggesting; I apologize if I was unclear. I was merely suggesting that it is a) possible to give a process special powers (Windows already does this; for example there are processes running on my computer at the moment that don&#8217;t have regular file access) and b) that you could grant some of those powers if you start a process using Ctrl-Alt-Del. I don&#8217;t see why that would be a violation of ‘general engineering principles’ since there is nothing particular about the process started that the kernel needs to know, neither does the process need to know anything special to be able to use its special powers. It&#8217;s just good old permissions.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

