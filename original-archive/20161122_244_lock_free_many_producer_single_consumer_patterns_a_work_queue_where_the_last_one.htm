<html>
<head>
<title>Lock free many-producer/single-consumer patterns: A work queue where the last one wins</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Lock free many-producer/single-consumer patterns: A work queue where the last one wins</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 22, 2016 / year-entry #245</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">There can be more than one, but only the last one counts.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Continuing our miniseries on lock-free
many-producer/single-consumer patterns,
we're going to look at the case where you
have a work queue where there can be
multiple work items,
but each work item replaces the previous one.
</p>
<p>
You see this pattern when the work is something
like <i>Update</i>.
If you update with one set of data,
and then update with a second set of data,
then the second set of data overwrites the first set;
you may as well not have bothered with the first one.
</p>
<p>
This is similar to our previous case,
except that this time the tasks are not identical,
so we can't just use a flag.
But that's okay.
We can use the data itself as the flag!
</p>
<pre>
Data* PendingData;

void RequestUpdate(Data* data)
{
 Data* previousData =
    InterlockedExchangePointer(&amp;PendingData, data);
 if (previousData == nullptr) {
  // You provide the WakeConsumer() function.
  WakeConsumer();
 } else {
  delete previousData;
 }
}

// You call this function when the consumer receives the
// signal raised by WakeConsumer().
void ConsumeUpdate()
{
 Data* currentData;
 while ((currentData = InterlockedExchangePointer(&amp;PendingData,
                                          nullptr)) != nullptr) {
  Update(currentData);
  delete currentData;
 }
}
</pre>
<p>
This is similar to the previous case,
except that we're using a pointer instead of a flag.
Again, we wake the consumer only on the transition
from null to non-null.
There is an extra wrinkle in that we need to delete
the previous data if our update replaced a pending
update that hasn't yet begun processing.
</p>
<p>
The idea here is that the <code>PendingData</code>
variable contains the data that is being transferred
from the producer to the consumer.
The consumer goes into a loop checking if there
is any pending data, and if so, udpating with it.
If the producer can replace the data before the
consumer sees it, then the producer has basically
saved the consumer the work of updating with data
that is already stale.
</p>
<p>
Remember, there is only one consumer,
so if <code>Wake&shy;Consumer</code> is called
while <code>Consume&shy;Update</code> is still
running, the wake will not start a new consumer
immediately.
It will wait for the existing
<code>Consume&shy;Update</code> to complete
before starting a new
<code>Consume&shy;Update</code>.
</p>
<p>
That was a little trickier.
Maybe we'll take a break and do something slightly
less tricky next time.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-bboorman even thread-even depth-1 parent" id="comment-1274625">
				<div id="div-comment-1274625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765#comment-1274625">
			November 22, 2016 at 7:28 am</a>		</div>

		<p>Not criticizing the content of the article, but just to point out that this technique of course assumes that the new data completely overwrites the previous data. For example: What if the consumer is updating a record in a database? Perhaps the first data is updating the value in column 2 and the 2nd data wants to update the value in column 4?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1274665">
				<div id="div-comment-1274665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cullen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765#comment-1274665">
			November 22, 2016 at 9:06 am</a>		</div>

		<p>@Brian_EE: It’s not assuming that each piece of data replaces the previous one. the article specifically states that, in the opening paragraph.</p>
<p>“where there can be multiple work items, but each work item replaces the previous one”</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-bboorman even depth-3" id="comment-1274715">
				<div id="div-comment-1274715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765#comment-1274715">
			November 23, 2016 at 6:32 am</a>		</div>

		<p>You are correct. I missed that he explicitly stated that. I&#8217;m blaming the fog caused by the cold/flu medicines&#8230;. (Yay, winter.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1274626">
				<div id="div-comment-1274626" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765#comment-1274626">
			November 22, 2016 at 7:47 am</a>		</div>

		<p>Typo: &#8220;udpating&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1274635">
				<div id="div-comment-1274635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765#comment-1274635">
			November 22, 2016 at 8:00 am</a>		</div>

		<p>It should be pointed out that this algorithm is not lock-free unless you have a lock-free implementation of `Data::operator delete()`</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1274645">
				<div id="div-comment-1274645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765#comment-1274645">
			November 22, 2016 at 9:06 am</a>		</div>

		<p>Taking a lock in a destructor is incredibly poor form.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1274675">
				<div id="div-comment-1274675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765#comment-1274675">
			November 22, 2016 at 9:37 am</a>		</div>

		<p>Kevin, it&#8217;s not the destructor (which would be `Data::~Data()`, but `operator delete()`, the deallocation function which is the second behavior of using the C++ `delete` operator.  Deallocation functions working on shared heaps (and Raymond&#8217;s code doesn&#8217;t respect thread affinity of allocations, so his allocator must be free-threaded) very often take a lock.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4 parent" id="comment-1274685">
				<div id="div-comment-1274685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765#comment-1274685">
			November 22, 2016 at 11:39 am</a>		</div>

		<p>Would you be happier if RequestUpdate merely returned a bool saying whether or not the caller should delete the pointer? The point is that the communication channel does not introduce a lock between the producers and the consumer. If there&#8217;s another lock somewhere else, well, that&#8217;s a different problem. (After all, Update() itself may take a lock.)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1274695">
				<div id="div-comment-1274695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161122-00/?p=94765#comment-1274695">
			November 22, 2016 at 3:47 pm</a>		</div>

		<p>Well I guess it depends on what you are using lock-free for. Reducing the size of your lock graph is a valid reason as you suggested.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

