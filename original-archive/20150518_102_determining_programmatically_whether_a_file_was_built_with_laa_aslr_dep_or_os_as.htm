<html>
<head>
<title>Determining programmatically whether a file was built with LAA, ASLR, DEP, or OS-assisted /GS</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Determining programmatically whether a file was built with LAA, ASLR, DEP, or OS-assisted /GS</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 18, 2015 / year-entry #103</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's Little Program parses a module to determine whether or not it was built with the following flags: /LARGE­ADDRESS­AWARE /DYNAMIC­BASE, also known as Address Space Layout Randomization (ASLR) /HIGH­ENTROPY­VA, or 64-bit ASLR, which I like to call ASLRR (the extra R is for extra random) /NX­COMPAT, also known as Data Execution Prevention (DEP) /GS, which...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program parses a module to determine whether or not it
was built with the following flags:
</p>
<ul>
<li><a HREF="http://msdn.microsoft.com/en-us/library/wz223b1z.aspx"><code
    >/LARGE&shy;ADDRESS&shy;AWARE</code></a></p>
<li><a HREF="http://msdn.microsoft.com/en-us/library/bb384887.aspx"><code
    >/DYNAMIC&shy;BASE</code></a>,
    also known as Address Space Layout Randomization (ASLR)</p>
<li><a HREF="http://msdn.microsoft.com/en-us/library/dn195771.aspx"><code
    >/HIGH&shy;ENTROPY&shy;VA</code></a>, or 64-bit ASLR,
    which I like to call ASLRR (the extra R is for extra random)</p>
<li><a HREF="http://msdn.microsoft.com/en-us/library/ms235442.aspx"><code
    >/NX&shy;COMPAT</code></a>,
    also known as Data Execution Prevention (DEP)</p>
<li><a HREF="http://msdn.microsoft.com/en-us/library/8dbf701c.aspx"><code
    >/GS</code></a>, which turns on certain runtime buffer overrun checks.
</ul>
<p>
Remember, Little Programs do little error checking.
In particular, this Little Program does no range checking,
so a malformed binary can result in wild pointers.
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;imagehlp.h&gt;
#include &lt;stdio.h&gt; // horrors! mixing stdio and C++!
#include &lt;stddef.h&gt;

class MappedImage
{
public:
 bool MapImage(const char* fileName);
 void ProcessResults();
 ~MappedImage();

private:
 WORD GetCharacteristics();

 template&lt;typename T&gt;
 WORD GetDllCharacteristics();

 template&lt;typename T&gt;
 bool HasSecurityCookie();

private:
 HANDLE file_ = INVALID_HANDLE_VALUE;
 HANDLE mapping_ = nullptr;
 void *imageBase_ = nullptr;
 IMAGE_NT_HEADERS* headers_ = nullptr;
 int bitness_ = 0;
};

bool MappedImage::MapImage(const char* fileName)
{
 file_ = CreateFile(fileName, GENERIC_READ,
    FILE_SHARE_READ,
    NULL,
    OPEN_EXISTING,
    0,
    NULL);
 if (file_ == INVALID_HANDLE_VALUE) return false;

 mapping_ = CreateFileMapping(file_, NULL, PAGE_READONLY,
                              0, 0, NULL);
 if (!mapping_) return false;

 imageBase_ = MapViewOfFile(mapping_, FILE_MAP_READ, 0, 0, 0);
 if (!imageBase_) return false;

 headers_ = ImageNtHeader(imageBase_);
 if (!headers_) return false;
 if (headers_-&gt;Signature != IMAGE_NT_SIGNATURE) return false;

 switch (headers_-&gt;OptionalHeader.Magic) {
 case IMAGE_NT_OPTIONAL_HDR32_MAGIC: bitness_ = 32; break;
 case IMAGE_NT_OPTIONAL_HDR64_MAGIC: bitness_ = 64; break;
 default: return false;
 }

 return true;
}

MappedImage::~MappedImage()
{
 if (imageBase_) UnmapViewOfFile(imageBase_);
 if (mapping_) CloseHandle(mapping_);
 if (file_ != INVALID_HANDLE_VALUE) CloseHandle(file_);
}

WORD MappedImage::GetCharacteristics()
{
 return headers_-&gt;FileHeader.Characteristics;
}

template&lt;typename T&gt;
WORD MappedImage::GetDllCharacteristics()
{
  return reinterpret_cast&lt;T*&gt;(headers_)-&gt;
    OptionalHeader.DllCharacteristics;
}

template&lt;typename T&gt;
bool MappedImage::HasSecurityCookie()
{
 ULONG size;
 T *data = static_cast&lt;T*&gt;(ImageDirectoryEntryToDataEx(
    imageBase_, TRUE, IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG,
    &amp;size, NULL));
 if (!data) return false;
 ULONG minSize = offsetof(T, SecurityCookie) +
                 sizeof(data-&gt;SecurityCookie);
 if (size &lt; minSize) return false;
 if (data-&gt;Size &lt; minSize) return false;
 return data-&gt;SecurityCookie != 0;
}

void MappedImage::ProcessResults()
{
 printf("%d-bit binary\n", bitness_);
 auto Characteristics = GetCharacteristics();
 printf("Large address aware: %s\n",
    (Characteristics &amp; IMAGE_FILE_LARGE_ADDRESS_AWARE)
    ? "Yes" : "No");

 auto DllCharacteristics = bitness_ == 32
    ? GetDllCharacteristics&lt;IMAGE_NT_HEADERS32&gt;()
    : GetDllCharacteristics&lt;IMAGE_NT_HEADERS64&gt;();

 printf("ASLR: %s\n",
    (DllCharacteristics &amp; IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE)
    ? "Yes" : "No");
 printf("ASLR^2: %s\n",
    (DllCharacteristics &amp; IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA)
    ? "Yes" : "No");
 printf("DEP: %s\n",
    (DllCharacteristics &amp; IMAGE_DLLCHARACTERISTICS_NX_COMPAT)
    ? "Yes" : "No");
 printf("TS Aware: %s\n",
    (DllCharacteristics &amp; IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE)
    ? "Yes" : "No");

 bool hasSecurityCookie =
    bitness_ == 32 ? HasSecurityCookie&lt;IMAGE_LOAD_CONFIG_DIRECTORY32&gt;()
                   : HasSecurityCookie&lt;IMAGE_LOAD_CONFIG_DIRECTORY64&gt;();
 printf("/GS: %s\n", hasSecurityCookie
    ? "Yes" : "No");
}

int __cdecl main(int argc, char**argv)
{
 MappedImage mappedImage;
 if (mappedImage.MapImage(argv[1])) {
  mappedImage.ProcessResults();
 }
 return 0;
}
</pre>
<p>
Let's see what happened.
</p>
<p>
First we use the <code>Map&shy;Image</code> method
to load the binary and map it into memory.
While we're at it, we sniff at the headers to determine
whether it is a 32-bit or 64-bit binary.
</p>
<p>
The <code>Get&shy;Characteristics</code> method merely
extracts the <code>Characteristics</code> from the
<code>File&shy;Header</code>.
This is easy because the <code>File&shy;Header</code> is the
same for 32-bit and 64-bit binaries.
</p>
<p>
The <code>Get&shy;Dll&shy;Characteristics</code> method
has two versions depending on the image bitness.
In both cases, it extracts the
<code>Dll&shy;Characteristics</code> field,
but the location of the field depends on the structure.
</p>
<p>
The
<code>Has&shy;Security&shy;Cookie</code> method also has
two versions depending on the image bitness.
The minimum size necessary to get OS-assisted stack overflow
protection is the size that encompasses the
<code>Security&shy;Cookie</code> member,
and in order to get that extra protection,
the member needs to be nonzero.
</p>
<p>
What is OS-assisted stack overflow protection?
</p>
<p>
First, I'm going to assume that you've read
<a HREF="http://go.microsoft.com/fwlink/?linkid=7260">
Compiler Security Checks In Depth</a>.
</p>
<p>
Okay, welcome back.
</p>
<p>
In theory, <code>/GS</code> could be implemented entirely
in application code, with no need for operating system assistance.
And in fact, that's what happens when the executable is run on
older versions of Windows (like Windows&nbsp;98 or Windows&nbsp;2000).
But the module can tell the operating system,
"Hey, here is where I put my security cookie,"
and if the operating system understands this field,
then it will go in and make the security cookie
even more randomer than random by mixing in some
cryptographically secure random bits.
</p>
<p>
Okay, so that's the program.
Note that
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/05/02/10522232.aspx">
some of these flags are meaningless in DLLs</a>,
so be careful to interpret the output correctly.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1243886">
				<div id="div-comment-1243886" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243886">
			May 18, 2015 at 8:17 am</a>		</div>

		<p>The ASLR detection is unreliable, that is, the image might not be relocated at run-time even when the flag is set.</p>
<p>My suggestion is to see if the image has relocations, if not then it probably will not get ASLR. The last time I brought this up somebody correctly pointed out that a image with position-independent code does not need relocations. I have never seen a PIE Win32 .exe in the wild (nor have I really been looking) but I guess it is possible in theory.</p>
<p>If you trust the image and it is a .dll you could VirtualAlloc some code at its preferred load address and see if LoadLibrary works (.dlls without relocations is very rare though). For a .exe I don&#39;t really know, you could perhaps start it as a suspended process? Not sure if the random ASLR base is allowed to be the same as the preferred base which I guess could happen if the number is really random (excluding the alignment requirements that ASLR already fulfils).</p>
<div class="post">[<em>I think you misread the title. The sample code detects whether the image was <span style="text-decoration:underline;">built</span> with ASLR enabled, not whether ASLR will actually be applied when loaded. (The latter is dependent upon things that cannot be determined by static analysis.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1243876">
				<div id="div-comment-1243876" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243876">
			May 18, 2015 at 8:31 am</a>		</div>

		<p>Are you absolutely sure that the OS really &quot;mixes in&quot; some cryptographically secure random bits, and that these bits stem from a cryptographically secure source?</p>
<p>JFTR: I&#39;d use LoadLibraryExW(L&quot;&#8230;&quot;, NULL, LOAD_LIBRARY_AS_DATAFILE) to map the file</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243866">
				<div id="div-comment-1243866" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243866">
			May 18, 2015 at 9:14 am</a>		</div>

		<p>skSdnW: &quot;The ASLR detection is unreliable, that is, the image might not be relocated at run-time even when the flag is set.&quot;</p>
<p>Not a requirement. Specifically:</p>
<p>&quot;Today&#39;s Little Program parses a module to determine whether or not it was built with the following flags:</p>
<p>/DYNAMICÂ­BASE, also known as Address Space Layout Randomization (ASLR)&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1243856">
				<div id="div-comment-1243856" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243856">
			May 18, 2015 at 9:34 am</a>		</div>

		<p>@McBucket: I&#39;m not trying to call out this sample specifically, I&#39;m just saying that detecting if ASLR will actually be applied is hard to detect. Even Process Explorer gets it wrong and it should be able to tell because it knows the actual address used and the preferred address&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243846">
				<div id="div-comment-1243846" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243846">
			May 18, 2015 at 10:34 am</a>		</div>

		<p>@skSdnW: &quot;Even Process Explorer gets it wrong and it should be able to tell because it knows the actual address used and the preferred address&#8230;&quot;</p>
<p>The most common reason for a DLL not to be loaded at its preferred address is that it&#39;s already occupied (in full or in part). I discrepancy between the actual address and the preferred address doesn&#39;t not imply ASLR is to blame.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1243836">
				<div id="div-comment-1243836" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243836">
			May 18, 2015 at 11:57 am</a>		</div>

		<p>@Steve: If the dll has to move and it is marked as ASLR aware then ASLR will take part in the relocation, my point was that Process Explorer will erroneously mark something with ASLR even though it has not been relocated and instead loaded at its preferred address. This is easy to do, just use editbin on a .exe that does not have relocations&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243826">
				<div id="div-comment-1243826" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243826">
			May 18, 2015 at 11:59 am</a>		</div>

		<p>I was always a fan of the constant 0 security cookie. Kind of hard to overwrite that with strcpy() or wstrcpy() w/o being caught.</p>
<p>I suspect in general it&#39;s a very bad idea to write a program that toggles these bits. Most of them scream &quot;break me&quot; if turned on unawares. I did use some tool for turning on /LARGEADDRESSAWARE because the .NET 2.0 compiler is dumb, but that was my own binary.</p>
<p>The only one I could imagine safe to set on somebody else&#39;s binary is /TSAWARE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1243816">
				<div id="div-comment-1243816" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243816">
			May 18, 2015 at 12:05 pm</a>		</div>

		<p>@Raymond: To be really pedantic, your code checks to see if the image currently has the ASLR bit set, not if it was built to be ASLR aware. To fulfill certain MS logo requirements your .exe must have the ASLR bit set. You can pass this test if the .exe was linked with /FIXED if you editbin the .exe afterwards but it of course does not give you the added security. A case of following the letter of the law and not the spirit&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243806">
				<div id="div-comment-1243806" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243806">
			May 18, 2015 at 12:34 pm</a>		</div>

		<p>@skSdnW: Take an EXE linked with /FIXED and change the flag. Kaboom.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1221591">
				<div id="div-comment-1221591" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1221591">
			May 18, 2015 at 12:37 pm</a>		</div>

		<p>I personally just use &quot;dumpbin /headers&quot; to check these =)</p>
<p>By the way, the newest one is &quot;control-flow guard&quot; from Visual Studio 2015 and Windows 10. &nbsp;It is a DllCharacteristics flag, IMAGE_DLLCHARACTERISTICS_GUARD_CF. &nbsp;This flag is declared in the 8.1 SDK, but wasn&#39;t fully used in 8.1. &nbsp;Control-flow guards are crazy. &nbsp;All indirect jumps and calls validate that the target pointer is a valid target address before jumping there, to try to verify that it&#39;s not about to start a ROP chain.</p>
<p>Although it doesn&#39;t matter in a sample program such as this, I would be a *lot* more careful if you&#39;re going to write a program to check these flags in a potentially-hostile EXE or DLL. &nbsp;There are many ways in which a PE file could attempt to cause exploits in programs that parse them.</p>
<div class="post">[<em>Agreed that if the binary is potentially hostile, you must be far more careful than this. The idea here is that you want to write a build verification step to ensure that all the binaries in your product are compiled with specific flags. Here&#39;s how you can do it. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243796">
				<div id="div-comment-1243796" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243796">
			May 18, 2015 at 12:41 pm</a>		</div>

		<p>skSdnW: &quot;To be really pedantic, your code checks to see if the image currently has the ASLR bit set, not if it was built to be ASLR aware.&quot;</p>
<p>Being pedantic for the wrong reason (e.g. showing off) is wrong. Read the requirements again:</p>
<p>&quot;Today&#39;s Little Program parses a module to determine whether or not it was built with the following flags:</p>
<p>/DYNAMICÂ­BASE, also known as Address Space Layout Randomization (ASLR)&quot;</p>
<p>Then read the code again, and tell us where the code doesn&#39;t match the requirements.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1243786">
				<div id="div-comment-1243786" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243786">
			May 18, 2015 at 1:04 pm</a>		</div>

		<p>@Myria: At least they didn&#39;t block intentional ROP chains. (Disclaimer: don&#39;t use outside of x86-32 unless you like undefined behavior)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243776">
				<div id="div-comment-1243776" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243776">
			May 18, 2015 at 1:58 pm</a>		</div>

		<p>I&#39;m curious what sort of program would not support ASLR. And if you support ASLR, why would ASLRR support need to be declared?</p>
<p>Is it simply a question of performance, or do people write code that fails if it&#39;s not loaded at the right address?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1243766">
				<div id="div-comment-1243766" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243766">
			May 18, 2015 at 2:28 pm</a>		</div>

		<p>@McBucket: Please read part you quoted one more time.</p>
<p>Let me focus a bit on another flag first. There is a difference between linking with /TSAWARE and adding the flag later with editbin. When you link with /TSAWARE the MS linker will try extra hard to layout the PE sections in a way so that the read-only sections can be shared between instances, this can sometimes make your .exe slightly larger than linking without /TSAWARE (Depends on compiler/linker flags used and linker version). No matter how the flag was set, at runtime you will escape the %windir% compatibility shim in Terminal Server scenarios.</p>
<p>Now let me try ASLR one last time. With a recent MS linker if you link with both /FIXED and /DYNAMICBASE you get &quot;LINK : fatal error LNK1295: &#39;/FIXED&#39; not compatible with &#39;/DYNAMICBASE&#39; specification; link without &#39;/FIXED&#39;&quot;. Older and/or 3rd-party linkers default to /FIXED for .exe files and might not support /DYNAMICBASE at all. This would be fine except that certain MS logo requirements say that IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE must be set and the way to fulfill this requirement is to edit the PE header after linking if your toolchain does not support said flag. Now we are in a situation where the linker did not produce a ASLR aware image but it still has the flag set claiming that we are aware. When running this .exe Windows will be unable to relocate it because it has no relocations section so it will effectively run without ASLR for this image yet most tools will claim that it supports ASLR. The best a static analysis tool can do is to issue a warning if there are no relocations. Process Explorer on the other hand could check because it knows the address where it actually loaded&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243756">
				<div id="div-comment-1243756" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243756">
			May 18, 2015 at 2:50 pm</a>		</div>

		<p>I&#39;ve built that /DYNAMICBASE no-relocs DLL before. The DLL will load anywhere. Your toolchain probably doesn&#39;t generate code that can tolerate this condition. I&#39;d be amazed that Windows doesn&#39;t relocate that on encountering it for an EXE. If you do this with an EXE that doesn&#39;t understand and has even 1 address-of-function operation, it will crash.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1243746">
				<div id="div-comment-1243746" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243746">
			May 18, 2015 at 7:58 pm</a>		</div>

		<p>Gabe: Yes, people do write code that fails if ASLR is turned on.</p>
<p>Source: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2003/12/23/45481.aspx">blogs.msdn.com/&#8230;/45481.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243736">
				<div id="div-comment-1243736" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243736">
			May 18, 2015 at 8:31 pm</a>		</div>

		<p>@Gabe: It&#39;s usually a case of stripping relocs. I wrote a nastier case a long time ago. The program allocated all of its address space in one giant arena. If the system libraries were to move any lower there wouldn&#39;t be enough free space to actually allocate that much RAM. Thankfully this wasn&#39;t a Windows program so I could order that this case not happen. This was before 64 bit CPUs were consumer level so making this as a 64 bit program was not feasible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1243726">
				<div id="div-comment-1243726" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243726">
			May 18, 2015 at 11:52 pm</a>		</div>

		<p>@Raymond: Whats_ with_ the_ odd_ naming_ convention_ in_ the_ code_? &nbsp;Just_ wondering_&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243716">
				<div id="div-comment-1243716" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243716">
			May 19, 2015 at 12:41 am</a>		</div>

		<p>@Dave</p>
<p>That&#39;s one of the popular C++ naming conventions [google://c++ naming conventions private variables].</p>
<p>&#39;Tis strange you didn&#39;t encounter it before.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1243706">
				<div id="div-comment-1243706" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243706">
			May 19, 2015 at 1:45 am</a>		</div>

		<p>This ASLR stuff reminded me, is it still the case that relocated DLLs can&#39;t be shared in memory? I vaguely remember reading something to that effect here&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243616">
				<div id="div-comment-1243616" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243616">
			May 19, 2015 at 2:05 pm</a>		</div>

		<p>@Medinoc: ASLR is tied to the paging system in Vista and later. &nbsp;What happens, at least in my experience up through Windows 7, is that each ASLR&#39;d DLL is assigned a randomized load address by the kernel that applies for all processes. &nbsp;If that address is available in a process, it&#39;s loaded there and has relocations applied by the kernel. &nbsp;This relocated DLL is shared as that relocated image among all processes that load it at that location. &nbsp;If the address is unavailable in a given process, ntdll.dll will re-relocate it to an arbitrary address, and this image will not be shared.</p>
<p>Yes, Windows has two relocation engines: one in the kernel, and one in ntdll.dll. &nbsp;You can tell which is in use for /DYNAMICBASE images by checking IMAGE_OPTIONAL_HEADER::ImageBase. &nbsp;If the image has not had relocation patches applied, yet ImageBase in memory != ImageBase on disk, then the kernel did the relocation. &nbsp;The kernel patches ImageBase to make it look like the image was not relocated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1243606">
				<div id="div-comment-1243606" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243606">
			May 19, 2015 at 9:14 pm</a>		</div>

		<p>Joshua: If an image is able to be relocated, how would you write code that depends on whether the base was deterministic, random, or random with high entropy?</p>
<p>What am I missing here?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243576">
				<div id="div-comment-1243576" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243576">
			May 20, 2015 at 7:15 am</a>		</div>

		<p>@Gabe: Because the image wasn&#39;t able to be relocated and somebody set the flag that says it is. Setting the flag does not actually enable it to be relocated.</p>
<p>Of course you could manage to do something even stupider like depending on the fact it was always deterministic for EXEs and hard-coding something that really depends on the load address (like HINSTANCE).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1243556">
				<div id="div-comment-1243556" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243556">
			May 20, 2015 at 11:55 am</a>		</div>

		<p>Joshua: I think you&#39;re answering the wrong question. What I&#39;m asking is, given that a DLL can be relocated, why would it matter how randomly the rebasing address is determined?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243546">
				<div id="div-comment-1243546" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150518-00/?p=45581#comment-1243546">
			May 21, 2015 at 9:32 am</a>		</div>

		<p>Maybe it managed to depend on being loaded lower than the system DLLs.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

