<html>
<head>
<title>Creating tree view check boxes manually: Responding to clicks</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Creating tree view check boxes manually: Responding to clicks</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 30, 2017 / year-entry #263</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171130-00/?p=97495</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Cycling through the state images.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20171129-00/?p=97485">
Last time</a>,
we added state images to the tree view,
but we didn't provide any way for the user to click on them.
Let's add the code so that the user can click on the check box
to change the value.
For simplicity,
we will just cycle through the state images.
In real life, you would probably have more complex
logic for deciding what to do when the user clicks
on the check box,
such as ignoring clicks on disabled check boxes.
</p>
<p>
Take our program from last time and make these additions:
</p>
<pre>
void CycleStateImage(HWND hwndTV, HTREEITEM hti)
{
  UINT oldState = TreeView_GetItemState(hwndTV, hti,
                                        TVIS_STATEIMAGEMASK);
  int stateIndex = (int)(oldState &amp; TVIS_STATEIMAGEMASK) &gt;&gt; 12;

  stateIndex = stateIndex + 1;
  if (stateIndex &gt;= ImageList_GetImageCount(
                TreeView_GetImageList(hwndTV, TVSIL_STATE)))
  {
    // We ran out of states. Wrap around to the first state.
    stateIndex = 1;
  }

  TreeView_SetItemState(hwndTV, hti,
      INDEXTOSTATEIMAGEMASK(stateIndex), TVIS_STATEIMAGEMASK);
}
</pre>
<p>
To cycle to the next state image, we request the
state image mask from the current state,
isolate the state image mask, and increment it,
wrapping around to 1 if we were on the last state.
(Note that we wrap around to 1 rather than to 0,
because we saw last time that state image zero is
not used; if you ask for state image zero,
that means that you want no state image at all.)
</p>
<pre>
LRESULT OnNotifyTVClicked(HWND hwndTV)
{
  TVHITTESTINFO tvhti;
  DWORD dwPos = GetMessagePos();
  tvhti.pt.x = GET_X_LPARAM(dwPos);
  tvhti.pt.y = GET_Y_LPARAM(dwPos);
  MapWindowPoints(HWND_DESKTOP, hwndTV, &amp;tvhti.pt, 1);
  HTREEITEM hti = TreeView_HitTest(hwndTV, &amp;tvhti);
  if (tvhti.flags &amp; TVHT_ONITEMSTATEICON)
  {
    CycleStateImage(hwndTV, hti);
    return TRUE; // handled
  }
  return FALSE; // not handled
}
</pre>
<p>
Frustratingly, the tree view control notifies us
when it receives a click, but it doesn't tell us where
the click was.
We have to fetch it ourselves by calling
<code>Get&shy;Message&shy;Pos()</code>,
and then converting screen coordinates to client
coordinates.
Once we have those coordinates, we ask the tree view
what is at those coordinates,
and if it says "Oh, no big deal, just
the state image&sup1; for an item,"
then we get all excited and cycle the state image.
</p>
<pre>
LRESULT OnNotifyTVKeyDown(HWND hwndTV, NMTVKEYDOWN* ptvkd)
{
  switch (ptvkd-&gt;wVKey)
  {
  case VK_SPACE:
    HTREEITEM hti = TreeView_GetNextItem(hwndTV, nullptr,
                                         TVGN_CARET);
    if (hti)
    {
      CycleStateImage(hwndTV, hti);
      return TRUE; // handled
    }
  }
  return FALSE; // not handled
}
</pre>
<p>
For keyboard accessibility, we use the space bar as an equivalent
to clicking on the state image.
</p>
<pre>
LRESULT OnNotify(HWND hwnd, int idFrom, NMHDR* pnm)
{
  if (pnm-&gt;hwndFrom == g_hwndChild)
  {
    switch (pnm-&gt;code)
    {
    case NM_CLICK:
      return OnNotifyTVClicked(pnm-&gt;hwndFrom);

    case TVN_KEYDOWN:
      return OnNotifyTVKeyDown(pnm-&gt;hwndFrom,
         CONTAINING_RECORD(pnm, NMTVKEYDOWN, hdr));
    }
  }
  return 0; // unhandled
}

// Add to WndProc
  HANDLE_MSG(hwnd, WM_NOTIFY, OnNotify);
</pre>
<p>
Here is our <code>WM_</code><code>NOTIFY</code> handler.
If the notification is coming from the tree view control,
then dispatch click notifications to
<code>On&shy;Notify&shy;TV&shy;Clicked</code>
and dispatch key-down notifications to
<code>On&shy;Notify&shy;TV&shy;Key&shy;Down</code>.
The <code>TVN_</code><code>KEY&shy;DOWN</code> notification comes
with a custom notification structure,
so we convert our generic <code>NMHDR</code>
pointer to a
<code>NMTV&shy;KEY&shy;DOWN</code> pointer.
</p>
<p>
And there we have it.
We manually implemented tree view check boxes.
This code is effectively equivalent&sup2; to
what you get when you turn on
<code>TVS_</code><code>CHECK&shy;BOXES</code>
and it's this code that was moved into the tree view control.
</p>
<p>
Next time, we'll bring tree view check boxes
into the 21st century.
</p>
<p>
&sup1;
Note the inconsistent terminology.
Normally, the state image is called a "state image",
but here, it's called a "state icon".
</p>
<p>
&sup2;
Plus a few more quirks we'll learn about later.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1317325">
				<div id="div-comment-1317325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171130-00/?p=97495#comment-1317325">
			December 1, 2017 at 2:52 am</a>		</div>

		<p>Normally I&#8217;d use the the % operator for anything that deliberately wraps around (e.g. November + 3 = February) although the usage would be a little awkward in this case.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1317406">
				<div id="div-comment-1317406" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IInspectable</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171130-00/?p=97495#comment-1317406">
			December 3, 2017 at 2:27 am</a>		</div>

		<p>That pattern is fine, if you are using the full range of values (i.e. <i>[0 .. N)</i>). In this case, however, index 0 is unused. Applying the modulo-operator will make the expression more complex, and harder to comprehend and debug.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1317426">
				<div id="div-comment-1317426" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171130-00/?p=97495#comment-1317426">
			December 3, 2017 at 10:53 am</a>		</div>

		<p>The operation isn&#8217;t that hard (it&#8217;s just [0..N-1] =&gt; [1..N], so it would look like &#8220;(index % (N-1)) + 1)&#8221;), but it&#8217;s sufficiently obtuse that I&#8217;d have to comment it really thoroughly. I have to assume that compilers nowadays are smart enough to find these kinds of operations and optimize them, so there&#8217;s less need for the fancy math.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

