<html>
<head>
<title>Does the CopyFile function verify that the data reached its final destination successfully?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Does the CopyFile function verify that the data reached its final destination successfully?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 19, 2012 / year-entry #219</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>30</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer had a question about data integrity via file copying. I am using the File.Copy to copy files from one server to another. If the call succeeds, am I guaranteed that the data was copied successfully? Does the File.Copy method internally perform a file checksum or something like that to ensure that the data...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer had a question about data integrity via file copying.
</p>
<blockquote CLASS=q><p>
I am using the
<a HREF="http://msdn.microsoft.com/en-us/library/c6cfw35a.aspx">
<code>File.Copy</code></a> to copy files from one server to another.
If the call succeeds, am I guaranteed that the data was copied
successfully?
Does the <code>File.Copy</code> method internally perform a file checksum
or something like that to ensure that the data was written correctly?
</p>
</blockquote>
<p>
The
<code>File.Copy</code> method uses the Win32
<code>Copy&shy;File</code> function internally,
so let's look at <code>Copy&shy;File</code>.
</p>
<p>
<code>Copy&shy;File</code> just issues <code>Read&shy;File</code> calls
from the source file and <code>Write&shy;File</code> calls to the
destination file.
(Note: Simplification for purposes of discussion.)
It's not clear what you are hoping to checksum.
If you want <code>Copy&shy;File</code> to checksum the bytes when
the return from <code>Read&shy;File</code>, and checksum the bytes
as they are passed to
<code>Write&shy;File</code>, and then compare them at the end of
the operation, then that tells you nothing, since they are
the same bytes in the same memory.
</p>
<pre>
while (...) {
 ReadFile(sourceFile, buffer, bufferSize);
 readChecksum.checksum(buffer, bufferSize);

 writeChecksum.checksum(buffer, bufferSize);
 WriteFile(destinationFile, buffer, buffer,Size);
}
</pre>
<p>
The <code>read&shy;Checksum</code> and
<code>write&shy;Checksum</code> are identical because they
operate on the same bytes.
(In fact, the compiler might even optimize the code by
merging the calculations together.)
The only way something could go awry is if you have flaky
memory chips that change memory values spontaneously.
</p>
<p>
Maybe the question was whether <code>Copy&shy;File</code> goes
back and reads the file it just wrote out to calculate
the checksum.
But that's not possible in general, because you might not
have read access on the destination file.
I guess you could have it do a checksum if the destination were
readable, and skip it if not, but then that results in a bunch
of weird behavior:
</p>
<ul>
<li>It generates
    spurious security audits when it tries to read from the destination
    and gets <code>ERROR_<wbr>ACCESS_<wbr>DENIED</code>.</p>
<li>It means that <code>Copy&shy;File</code> sometimes does a checksum
    and sometimes doesn't, which removes the value of any checksum
    work since you're never sure if it actually happened.</p>
<li>It doubles the network traffic for a file copy operation,
    leading to weird workarounds from network administrators like
    "Deny read access on files in order to speed up file copies."
</ul>
<p>
Even if you get past those issues, you have an even bigger problem:
How do you know that reading the file back will really tell you
whether the file was physically copied successfully?
If you just read the data back, it may end up being read out of the
disk cache, in which case you're not actually verifying physical media.
You're just comparing cached data to cached data.
</p>
<p>
But if you open the file with caching disabled, this has the side
effect of purging the cache for that file, which means that the
system has thrown away a bunch of data that could have been useful.
(For example, if another process starts reading the file at the same
time.)
And, of course, you're forcing access to the physical media, which is slowing
down I/O for everybody else.
</p>
<p>
But wait, there's also the problem of caching controllers.
Even when you tell the hard drive, "Now read this data from the physical
media,"
it may decide to
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/09/09/10059575.aspx">
return the data from an onboard cache instead</a>.
You would have to issue a "No really, flush the data and read it back"
command to the controller to ensure that it's really reading from
physical media.
</p>
<p>
And even if you verify that, there's no guarantee that the moment you
declare "The file was copied successfully!" the drive platter won't
spontaneously develop a bad sector and corrupt the data you just
declared victory over.
</p>
<p>
This is one of those "How far do you really want to go?" type of questions.
You can re-read and re-validate as much as you want at copy time,
and you
<i>still</i> won't know that the file data is valid when you finally
get around to using it.
</p>
<p>
Sometimes,
you're better off just trusting the system
to have done what it says it did.
</p>
<p>
If you really want to do some sort of copy verification,
you'd be better off saving the checksum somewhere and having
the ultimate consumer of the data validate the checksum
and raise an integrity error if it discovers corruption.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (30)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1011793">
				<div id="div-comment-1011793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1011793">
			September 19, 2012 at 7:09 am</a>		</div>

		<p>And, of course, the file system is an external resource for your application. There&#39;s no guarantee that something else won&#39;t go in and re-write the contents of that file as soon as it can.</p>
<p>Similar to the issue with people wanting to check for a files existence before accessing it, or any other resource with some level of autonomy (e.g. Internet access). Yes, you can go and check whether the file exists before you attempt to open it, but that doesn&#39;t mean you don&#39;t still have to write the code to cope with the file not being present when you attempt to open it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1011803">
				<div id="div-comment-1011803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1011803">
			September 19, 2012 at 7:12 am</a>		</div>

		<p>You&#39;re overthinking it Raymond. The customer just wanted to know if he can trust the result code of the File.Copy (oh wait, it&#39;s void! :) ) Well he wants to know if he can assume that if there&#39;s no exception the file was actually copied to another server. And the answer to that is yes.</p>
<p>And you can tell him that the network transfer protocols typically don&#39;t corrupt the files. However, bad hardware can corrupt the files anywhere, not only over the network. And yes, for such cases, he needs his own checksums.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011813">
				<div id="div-comment-1011813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1011813">
			September 19, 2012 at 8:02 am</a>		</div>

		<p>If you&#39;re copying the file to a remote file system, the network could drop out immediately after you finished copying it, so even if the copy completed successfully, you couldn&#39;t verify it anyhow (I guess that&#39;s similar to the write-only case).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1011823">
				<div id="div-comment-1011823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1011823">
			September 19, 2012 at 8:13 am</a>		</div>

		<p>I think perhaps part of the question was &quot;how does CopyFile verify that the data got to the destination NETWORK drive successfully&quot;.</p>
<p>CopyFile over the network will use either SMB or WEBDAV to write the file &#8211; both of these will internally use TCP, which has not one &#8211; but two checksums (the TCP checksum and the IP checksum).</p>
<p>So the answer is that yes, CopyFile uses an internal checksum when copying to a network drive. This internal checksum lives in the TCP/IP stack in Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011833">
				<div id="div-comment-1011833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1011833">
			September 19, 2012 at 8:33 am</a>		</div>

		<p>What does the command prompt Copy command do when &quot;/v&quot; is specified?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1011843">
				<div id="div-comment-1011843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1011843">
			September 19, 2012 at 8:46 am</a>		</div>

		<p>My thought on reading the question is if FlushFileBuffers is called at the end. &nbsp;After that returns you can reasonably believe that the file will be there even if the power fails etc. &nbsp;On Unix systems you often want to call fsync on the parent directory too since it is possible for the directory to be delayed write.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011853">
				<div id="div-comment-1011853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dominik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1011853">
			September 19, 2012 at 8:53 am</a>		</div>

		<p>So now the question is, how does WriteFile work?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1011863">
				<div id="div-comment-1011863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1011863">
			September 19, 2012 at 9:10 am</a>		</div>

		<p>Raymond&#39;s points are all true, but that doesn&#39;t mean you don&#39;t ever want to try to verify a copy.</p>
<p>After all, in a command prompt, the copy command has a /V (verify) option (which presumably reads back the copied file and compares it to the original).</p>
<p>And a common thing to do in my VMS days was to back up files to tape and then delete them from the disk. &nbsp;Obviously you didn&#39;t want to delete the files until you were sure the files made it to tape. &nbsp;Thus the common command: BACKUP/VERIFY/DELETE &lt;source_files&gt; &lt;target&gt;. &nbsp;Yeah, the tape might become unreadable later, but that&#39;s a separate issue (with separate mitigations) from making sure that the files actually got onto the tape.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011873">
				<div id="div-comment-1011873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1011873">
			September 19, 2012 at 9:42 am</a>		</div>

		<p>I think /V is a remnant of DOS days (1986-ish) where 5&quot; floppies were prone to corruption from &#39;stray&#39; magnetism, etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1011903">
				<div id="div-comment-1011903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bill S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1011903">
			September 19, 2012 at 11:21 am</a>		</div>

		<p>@Brian K: <a rel="nofollow" target="_new" href="http://support.microsoft.com/kb/126457" rel="nofollow">support.microsoft.com/&#8230;/126457</a></p>
<p>I suspect the /v option exists to maintain backward compatibility but that it doesn&#39;t do anything (useful) any more.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011913">
				<div id="div-comment-1011913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1011913">
			September 19, 2012 at 1:54 pm</a>		</div>

		<p>To pre-empt @Mason Wheeler&#39;s next question, the reason you would deny read access to an uploads directory is to prevent people from using it as a hosting service for files not approved by the server&#39;s administrator.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1011923">
				<div id="div-comment-1011923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1011923">
			September 19, 2012 at 2:59 pm</a>		</div>

		<p>I assume that if one of the ReadFile or WriteFile calls fails, then CopyFile will report that failure uplevel (or perhaps retry)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011933">
				<div id="div-comment-1011933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1011933">
			September 19, 2012 at 3:13 pm</a>		</div>

		<p>Last time I watched procmon&#39;s disk activity when running copy with and without the /v option there was no difference. &nbsp;This was on XP, YMMV.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1011943">
				<div id="div-comment-1011943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1011943">
			September 19, 2012 at 3:41 pm</a>		</div>

		<p>You have to set &quot;VERIFY ON&quot; before copying.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1011953">
				<div id="div-comment-1011953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1011953">
			September 19, 2012 at 4:13 pm</a>		</div>

		<p>This would also be a case of optimising incorrect behaviour. The OS shouldn&#39;t need to second guess the network filesystem&#39;s ability to detect failures.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1011883">
				<div id="div-comment-1011883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1011883">
			September 19, 2012 at 9:43 am</a>		</div>

		<p>This really sounds like you&#39;re overthinking it.</p>
<p>First, what possible reason would there be for giving someone write access but not read access to a certain location? &nbsp;That&#39;s screwed up on so many different levels&#8230;</p>
<p>Second, you&#39;re right that having the sender compute a checksum of the destination file is a bad idea for all the reasons mentioned. &nbsp;But why did you even think of doing that in the first place?!? &nbsp;If I was implementing a system like that, I&#39;d have the *destination* system compute the checksum on the file it received and send it back to the sender for verification.</p>
<div class="post">[<i>An &quot;uploads&quot; directory is a common scenario where people have write but not read access. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1011983">
				<div id="div-comment-1011983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1011983">
			September 19, 2012 at 7:17 pm</a>		</div>

		<p>@Matt: I second your answer. TCP/IP guarantee delivery of packet. If the payload is lost on the street, it&#39;ll tell you that. When the payload reaches the destination, trust the file server to handle it properly. If you can&#39;t trust the file server (either hardware ot software) to do it&#39;s job, perheps it&#39;s better to change another one because it&#39;s one of file servers&#39; primary tasks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1011993">
				<div id="div-comment-1011993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1011993">
			September 19, 2012 at 10:28 pm</a>		</div>

		<p>As an example of Raymond&#39;s last statement, I believe ZIP and other archive types include a checksum specifically so that the end consumer can check whether the ZIP is correct.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1012003">
				<div id="div-comment-1012003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1012003">
			September 19, 2012 at 11:19 pm</a>		</div>

		<p>Matt: The IP checksum is just for the header, so it is useless in detecting a corrupt payload. The TCP checksum is just 16 bits, so it&#39;s quite possible for one bit error to cancel out another one without being detected.</p>
<p>Fortunately Ethernet has its own overlapping 32-bit CRC, which should make copying over a LAN pretty safe (WANs are another story all together). However, back around 2000, Stone and Partridge (&quot;When The CRC and TCP Checksum Disagree&quot;) looked at actual packet errors and estimated that the actual odds of undetected errors in Ethernet TCP packets are somewhere between 2^-24 and 2^-33.</p>
<p>While it seems unlikely, imagine you&#39;re simply copying the contents of your 2TB disk across the network &#8212; that&#39;s 2^44 bits, or about 2^30 packets!</p>
<p>In other words, even under the least likely circumstances, your network backup of an office full of 1TB hard drives is going to have several corrupted files if your backup software doesn&#39;t have its own integrity checks in place (like SMB message signing, which is off by default).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1012023">
				<div id="div-comment-1012023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1012023">
			September 20, 2012 at 2:46 am</a>		</div>

		<p>I once tried copying several large files over a WLAN network (desktop and laptop in the same room!) simply by using explorer and shared folders. My reasoning was that as the wireless reception was near perfect and TCP/IP has the mentioned checksums, this should work without problems.</p>
<p>But after several tries, the files always came out corrupted. I&#39;m still not sure why the TCP/IP checksumming didn&#39;t prevent this to happen almost predictably.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1012033">
				<div id="div-comment-1012033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1012033">
			September 20, 2012 at 3:06 am</a>		</div>

		<p>@Gabe:</p>
<p>The checksums in Network protocols are designed to detect common network bitpattern errors, they are not designed to detect all accidental damage caused on the network, and don&#39;t even try to prevent malicious damage caused on the network.</p>
<p>If you don&#39;t like TCP&#39;s checksum, you can always upgrade it using the TCP-Alternative-Checksum-Request TCP Option. Alternatively, you should probably be using SMB or IPSec for your traffic, both of which upgrade their checksums to cryptographic hashes and make your file unreadable and tamper-proofed from evil people sitting on your network.</p>
<p>But CopyFile won&#39;t do that for you. CopyFile just hands the bytes off to the filesystem driver, who will hand them off to the network driver. What the network driver chooses to do with those bytes is up to it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1012053">
				<div id="div-comment-1012053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1012053">
			September 20, 2012 at 6:02 am</a>		</div>

		<p>Ian: They say: &quot;After eliminating those errors that the checksum always catches, the data suggests that, on average, between one packet in 10 billion and one packet in a few millions will have an error that goes undetected.&quot;</p>
<p>They do NOT talk about there having to be an error in the first place. Even so, there are over 15 hops between me and this blog site (just to take an arbitrary example), at least one of which is a wireless link over unregulated frequencies (WiFi).</p>
<p>If errors were uniformly distributed, maybe you can assume they will be rare. However, that&#39;s not the case: some links are just more error-prone than others, whether it&#39;s a bad hardware, buggy software, or EMI. The more hops there are between two hosts, the more likely that one of them will be over one of those bad links, which drastically increases the odds of undetected errors.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1012063">
				<div id="div-comment-1012063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1012063">
			September 20, 2012 at 6:48 am</a>		</div>

		<p>@Gabe</p>
<p>Of course, if you look at the frequency of corrupt data you actually get then it makes you wonder if how much of an impact those numbers have in real life.</p>
<p>I can&#39;t remember getting a corrupt file that could be blamed on the network from the internet in the last year (the corrupt files that I have received could be accounted to something else, like a congested server truncating files or the owner the broadband hardware doing maintenance and that caused all of the users to have problems for a few minutes).</p>
<p>My LAN has had an even better track record, I have never had a corrupt file transfered over this network at all, and it has been active for years. So if this &quot;one packet in 10 billion&quot; ends up with you never getting an error on a LAN or only around one filea year from the internet being corrupt, then I don&#39;t see why you are making such a fuss.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1012013">
				<div id="div-comment-1012013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1012013">
			September 20, 2012 at 12:14 am</a>		</div>

		<p>@Gabe It looks like the 2^-24 to 2^-33 probability is of an error being undetected *given* that there was an error in the first place. Since the probability of an error itself is very small I don&#39;t think you&#39;ll end up with nearly as many corrupted files as you think.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1012093">
				<div id="div-comment-1012093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1012093">
			September 20, 2012 at 8:24 am</a>		</div>

		<p>I once had a network card whose default network drivers bundled on the Windows 95 CD would randomly fail to verify checksums when the card was under load, and pass along corrupt data as if it was correct. &nbsp;That was fun to figure out. &nbsp;Fix was to install newer drivers from the vendor since the ones on the Win95 CD turned out to be junk. &nbsp;I even think there was an MSKB article about this but I can&#39;t remember.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1012103">
				<div id="div-comment-1012103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">satan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1012103">
			September 20, 2012 at 12:43 pm</a>		</div>

		<p>SATA error are written to event viewer instead of propagated back in function calls.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1012113">
				<div id="div-comment-1012113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/timothy_4000_roseharp.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>timothy@roseharp.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1012113">
			September 20, 2012 at 2:40 pm</a>		</div>

		<p>At a previous company, I was responsible for putting the demo version of our product on our web site.</p>
<p>One day, we started getting complaints that the demo would not install.</p>
<p>My copy of the installer worked, but the copy I downloaded from our site was corrupted, so I re-uploaded.</p>
<p>After that, I downloaded again &#8211; the file was still corrupted, but differently.</p>
<p>I tried downloading the file several times in succession, and each copy was slightly different.</p>
<p>I called into hosting provider for support, and the kid who answered said he&#39;d rebuilt the kernel on the server to make downloads more efficient&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1012143">
				<div id="div-comment-1012143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1012143">
			September 21, 2012 at 2:22 am</a>		</div>

		<p>&quot;If the call succeeds, am I guaranteed that the data was copied successfully?&quot;&lt;/quote&gt;</p>
<p>Answer : NO!! No one will ever guarantee that..ever. Why? Liability. Q.E.D.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1012573">
				<div id="div-comment-1012573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pentium100</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1012573">
			September 24, 2012 at 12:03 pm</a>		</div>

		<p>There was a bug in Server 2003 that corrupted files written to shared folders (corrupts on receive). After that, I started using a program that verifies copied files.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1012723">
				<div id="div-comment-1012723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120919-00/?p=6563#comment-1012723">
			September 25, 2012 at 5:37 am</a>		</div>

		<p>TeraCopy does create some checksum for each file it copies/moves.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

