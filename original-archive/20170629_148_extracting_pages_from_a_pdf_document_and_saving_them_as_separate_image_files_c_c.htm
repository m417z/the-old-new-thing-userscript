<html>
<head>
<title>Extracting pages from a PDF document and saving them as separate image files, C++/CX edition with explicit tasks</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Extracting pages from a PDF document and saving them as separate image files, C++/CX edition with explicit tasks</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 29, 2017 / year-entry #149</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170629-00/?p=96485</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Sliding over to C++/CX.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<!-- backref: Extracting pages from a PDF document and saving them as separate image files, C# edition -->
At the start of this series</a>,
we converted the
C# version of the
<a HREF="https://github.com/Microsoft/Windows-universal-samples/tree/v1.0.11/Samples/PdfDocument">
PDF Document</a> sample program so that it
saved the pages to disk as image files.
Today we'll port those changes to C++/CX with tasks.
</p>
<pre>
void Scenario1_Render::ViewPage()
{
    rootPage-&gt;NotifyUser("", NotifyType::StatusMessage);

    unsigned long pageNumber =
        wcstoul(PageNumberBox-&gt;Text-&gt;Data(), nullptr, 10);

    if ((pageNumber &lt; 1) || (pageNumber &gt; pdfDocument-&gt;PageCount))
    {
        rootPage-&gt;NotifyUser("Invalid page number.",
                                NotifyType::ErrorMessage);
        return;
    }

    Output-&gt;Source = nullptr;
    ProgressControl-&gt;Visibility =
        Windows::UI::Xaml::Visibility::Visible;

    // Convert from 1-based page number to 0-based page index.
    unsigned long pageIndex = pageNumber - 1;

    <font COLOR=blue>auto picker = ref new FileSavePicker();
    picker-&gt;FileTypeChoices-&gt;Insert("PNG image",
        ref new Platform::Collections::Vector&lt;String^&gt;({ ".png" }));
    create_task(picker-&gt;PickSaveFileAsync())
        .then([this, pageIndex](StorageFile^ outfile)
    {
        if (outfile)
        {
            auto page = pdfDocument-&gt;GetPage(pageIndex);

            return create_task(outfile-&gt;OpenTransactedWriteAsync())
                .then([this, page](StorageStreamTransaction^ transaction)
            {
                auto options = ref new PdfPageRenderOptions();
                options-&gt;DestinationHeight = (unsigned)(page-&gt;Size.Height * 2);
                options-&gt;DestinationWidth = (unsigned)(page-&gt;Size.Width * 2);
                return create_task(page-&gt;RenderToStreamAsync(transaction-&gt;Stream, options))
                    .then([this, page, transaction]()
                {
                    delete transaction;
                    delete page;
                });
            });
        }
        else
        {
            return task_from_result();
        }
    })</font>.then([this]()
    {
        ProgressControl-&gt;Visibility =
            Windows::UI::Xaml::Visibility::Collapsed;
    });
}
</pre>
<p>
This code is structured the same as
<!-- backref: Extracting pages from a PDF document and saving them as separate image files, JavaScript edition with Promises -->
the JavaScript Promise-based version</a>.
But unlike JavaScript, we cannot capture local variables by
reference because the stack will unwind before the continuation
runs.
We have to capture them by value.
</p>
<p>
As with JavaScript, C++/CX lacks a <code>using</code> keyword,
so we must explicitly close the closable objects when we are done
with them.
In C++/CX, this projected as the <code>delete</code> keyword.
</p>
<p>
Since C++/CX is a strongly-typed language,
our tasks are a bit more annoying because we have to
make sure all code paths return the same type,
because a function can have only one return type.
This means adding a <code>return task_</code><code>from_</code><code>result()</cODE>
to the <code>else</code> branch so that all code paths
return a <code>task&lt;void&gt;</code>.
</p>
<p>
You might be able to guess
what the next step in our adventure is going to be.
We'll take it up next time.
</p>
<p>
<b>Bonus chatter</b>:
Here's the C++/WinRT version.
This is a bit of a spurious exercise
because the XAML compiler doesn't support C++/WinRT yet,
which means that you'll see a mix of C++/CX code
(when interacting with XAML) and C++/WinRT code.
</p>
<pre>
void Scenario1_Render::ViewPage()
{
    rootPage-&gt;NotifyUser("", NotifyType::StatusMessage);

    unsigned long pageNumber =
        wcstoul(PageNumberBox-&gt;Text-&gt;Data(), nullptr, 10);

    if ((pageNumber &lt; 1) || (pageNumber &gt; <font COLOR=blue>pdfDocument.PageCount()</font>))
    {
        rootPage-&gt;NotifyUser("Invalid page number.",
                                NotifyType::ErrorMessage);
        return;
    }

    Output-&gt;Source = nullptr;
    ProgressControl-&gt;Visibility =
        Windows::UI::Xaml::Visibility::Visible;

    // Convert from 1-based page number to 0-based page index.
    unsigned long pageIndex = pageNumber - 1;

    <font COLOR=blue>FileSavePicker picker;
    picker.FileTypeChoices().Insert("PNG image", { ".png" });</font>
    create_task(picker.PickSaveFileAsync())
        .then([this, pageIndex](<font COLOR=blue>adapter</font> outfile)
    {
        if (outfile)
        {
            <font COLOR=blue>auto page = pdfDocument.GetPage(pageIndex);</font>

            return create_task(outfile.OpenTransactedWriteAsync())
                .then([this, page](<font COLOR=blue>adapter</font> transaction)
            {
                <font COLOR=blue>PdfPageRenderOptions options;</font>
                <font COLOR=blue>options.DestinationHeight</font>((unsigned)(page-&gt;Size.Height * 2));
                <font COLOR=blue>options.DestinationWidth</font>((unsigned)(page-&gt;Size.Width * 2));
                create_task(<font COLOR=blue>page.RenderToStreamAsync</font>(<font COLOR=blue>transaction.Stream()</font>, options))
                    .then([this, page, transaction]()
                {
                    <font COLOR=blue>transaction.Close();
                    page.Close();</font>
                });
            });
        }
        else
        {
            return task_from_result();
        }
    }).then([this]()
    {
        ProgressControl-&gt;Visibility =
            Windows::UI::Xaml::Visibility::Collapsed;
    });
}
</pre>
<p>
The changes are as follows:
</p>
<ul>
<li>Method calls use dot notation rather than arrow notation.
</li>
<li>Fetching properties is done by calling a method (via dot)
    with the name of the property, and no parameters.
</li>
<li>Setting properties is done by calling a method (via dot)
    and passing the desired new value as the parameter.
</li>
<li>Closing an object is done by calling the <code>Close()</code>
    method, as opposed to C++/CX which overloaded the <code>delete</code>
    operator.
</li>
<li>Constructing an object is done by merely declaring it.</li>
<li>Wrapping a pointer is done by constructing an object around it.
    (Though it is common to use assignment-style construction.)</li>
<li>C++/WinRT lets you pass an initializer list when an aggregate
    is expected.
</li>
<li>The parameter to task continuations is an <code>adapter</code>.
</li>
</ul>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-deskrule even thread-even depth-1 parent" id="comment-1300936">
				<div id="div-comment-1300936" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/deskrule' rel='external nofollow' class='url'>deskrule</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170629-00/?p=96485#comment-1300936">
			June 29, 2017 at 7:08 am</a>		</div>

		<p>what, no real man&#8217;s C++/WRL version? :)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-s-m-joshi-02 odd alt depth-2" id="comment-1300946">
				<div id="div-comment-1300946" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/camhusmj38' rel='external nofollow' class='url'>camhusmj38</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170629-00/?p=96485#comment-1300946">
			June 29, 2017 at 9:04 am</a>		</div>

		<p>There presumably wasn&#8217;t enough space on the server to fit the whole thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1300975">
				<div id="div-comment-1300975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170629-00/?p=96485#comment-1300975">
			June 29, 2017 at 8:59 pm</a>		</div>

		<p>VB.Net!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1300976">
				<div id="div-comment-1300976" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170629-00/?p=96485#comment-1300976">
			June 30, 2017 at 12:17 am</a>		</div>

		<p>Real men use J# !</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-s-m-joshi-02 even depth-3 parent" id="comment-1301005">
				<div id="div-comment-1301005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/camhusmj38' rel='external nofollow' class='url'>camhusmj38</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170629-00/?p=96485#comment-1301005">
			June 30, 2017 at 4:22 am</a>		</div>

		<p>Real men write their own PDF decoders.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1301016">
				<div id="div-comment-1301016" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170629-00/?p=96485#comment-1301016">
			June 30, 2017 at 6:59 am</a>		</div>

		<p>Real men use assembly !</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude even thread-odd thread-alt depth-1" id="comment-1300945">
				<div id="div-comment-1300945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170629-00/?p=96485#comment-1300945">
			June 29, 2017 at 7:19 am</a>		</div>

		<p>At least with VS2017 you should be able to use <code>co_await</code> with the C++/WinRT version insofar as you&#8217;ve enabled the compiler option. Kenny was quite proud of how much his version beat <code>std::future</code> when used with coroutines.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

