<html>
<head>
<title>Stop cherry-picking, start merging, Part 5: Exploiting the three-way merge</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Stop cherry-picking, start merging, Part 5: Exploiting the three-way merge</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 16, 2018 / year-entry #62</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Making sure you have the correct merge base.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last time,
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180315-00/?p=98245">
we answered some questions based on what we know about the
recursive merge algorithm</a>.
Today, we'll answer questions based on what we know about the
three-way merge algorithm.
</p>
<p>
After choosing a merge base (possibly by manufacturing one via
the recursive merge algorithm),
the three-way merge algorithm takes the three versions
identified by the merge base, the source head commit, and the
destination head commit.
It then identifies the changes in the two head commits relative
to the merge base and tries to reconcile them.
</p>
<p>
The important detail here is what <i>doesn't</i> participate
in the merge: Everything else.
</p>
<p>
In particular, any commits leading up to the head commits
have no effect.
And you can take advantage of this when answering the next
few questions.
</p>
<p>
<b>What if I already made the fix in my feature branch by
committing directly to it, rather than creating a patch branch?</b>
Can I create a patch branch retroactively?
</p>
<p>
Yes, you can create a patch branch retroactively.
Suppose you are in this situation:
</p>
<svg width="0" height="0">
 <defs>
  <marker id="arrowhead" markerWidth="5" markerHeight="5" refX="-2" refY="0"
    viewBox="-6 -6 12 12" orient="auto">
    <polygon points="-2,0 -5,5 5,0 -5,-5" fill="black" stroke="black"
      stroke-dasharray="1 0" />
  </marker>
  <path id="larr" d="M20,10 L3,10" stroke="black"
   marker-end="url(#arrowhead)" />
  <path id="larr3" d="M98,10 L3,10" stroke="black"
   marker-end="url(#arrowhead)" />
  <path id="nwarr" d="M20,20 L3,3" stroke="black"
   marker-end="url(#arrowhead)" />
  <path id="swarr" d="M20,2 L3,17" stroke="black"
   marker-end="url(#arrowhead)" />
  <path id="swarr3" d="M98,2 L6,57" stroke="black"
   marker-end="url(#arrowhead)" />
 </defs>
</svg>
<table CELLSPACING=1 STYLE="text-align: center" TITLE="Described in text.">
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M1</td>
<td>&nbsp;</td>
<td>master</td>
</tr>
<tr>
<td>apple</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2199;&#xfe0e;</foreignObject><use href="#swarr"/></svg>
</td>
</tr>
<tr>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">A</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1a</td>
<td>&nbsp;</td>
<td>feature</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>berry</td>
</tr>
</table>
<p>
Starting from a common commit A,
you fork off a feature branch and commit a change F1.
Meanwhile, the master branch commits a change M1.
You then discover a terrible problem in the feature branch
and apply an emergency fix F1a to the feature branch.
Further investigation reveals that this terrible problem
also exists in the master branch.
How do you get the fix into the master branch
without running the risk of a cherry-pick disaster?
</p>
<p>
Go ahead and create your patch branch like before,
and merge it into both the master and feature branches.
</p>
<table CELLSPACING=1 STYLE="text-align: center" TITLE="Described in text.">
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>berry</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M1</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M2</td>
<td>&nbsp;</td>
<td>master</td>
</tr>
<tr>
<td>apple</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2199;&#xfe0e;</foreignObject><use href="#swarr"/></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>berry</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2199;&#xfe0e;</foreignObject><use href="#swarr"/></svg>
</td>
</tr>
<tr>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">A</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">P</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>patch</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1a</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F2</td>
<td>&nbsp;</td>
<td>feature</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>berry</td>
</tr>
</table>
<p>
We created a new branch called patch based on the common ancestor
commit A, and cherry-picked our fix F1a to the patch branch as commit P.
We then merged commit P into the master branch, and also into the
feature branch,
producing commits M2 and F2, respectively.
The merge into the master branch as M2 propagates the fix to the
master branch,
and the merge into the feature branch as F2 has no code effect
because the fix is already in the feature branch.
However, the merge into the feature branch is a crucial step,
because it establishes commit P as the new common ancestor.
</p>
<p>
Observe that as far as the three commits involved in the merge
are concerned, everything look the same as if you had made the
fix in the patch branch originally.
The fix is in the patch branch and in the heads of the master
and feature branches.
The feature branch can continue making changes, possibly to the
same file, and that will be correctly detected as a change
in the feature branch.
</p>
<p>
From a merge-theoretical point of view,
you can use your thumb and cover up commit F1a,
because that commit doesn't participate in the three-way merge:
</p>
<table CELLSPACING=1 STYLE="text-align: center" TITLE="Same diagram as above, but with commit F2 removed.">
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>berry</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M1</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M2</td>
<td>&nbsp;</td>
<td>master</td>
</tr>
<tr>
<td>apple</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2199;&#xfe0e;</foreignObject><use href="#swarr"/></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>berry</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2199;&#xfe0e;</foreignObject><use href="#swarr"/></svg>
</td>
</tr>
<tr>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">A</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">P</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>patch</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F2</td>
<td>&nbsp;</td>
<td>feature</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>berry</td>
</tr>
</table>
<p>
And then you see that this diagram is the same as the diagram
we had when the change originated in the patch branch.
</p>
<p>
<b>How can I verify that a merge carried no code change?</b>
</p>
<p>
If you have committed the merge locally,
then you can run local git commands to get your answer.
If you just want a yes/no answer as to whether the most
recent commit carried no code change,
you can see whether the trees are the
same.
</p>
<pre>
git diff-tree HEAD
</pre>
<p>
If there is no output, then the trees are the same,
which means that there was no code change.
</p>
<p>
If you don't trust <code>git diff-tree</code>, you can compare
the trees manually:
</p>
<pre>
git rev-parse HEAD^{tree} HEAD~^{tree}
</pre>
<p>
(If you are using <code>cmd.exe</code>,
then you'll have to double the <code>^</code> characters
because
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20060517-00/?p=31173">
<code>^</code> is the command prompt's escape character</a>.)
</p>
<p>
If you want to see the differences, you can use
<code>git diff HEAD~ HEAD</code>
to view them.
</p>
<p>
If you use an online service to manage pull requests,
then you'll have to consult your online service's documentation
to see if there's a way to preview the merge commit and
diff it against the parent.
(We'll pick up this topic in a future installment.)
</p>
<p>
<b>What if I already made the fix in my feature branch by committing
directly to it, and then I cherry-picked the change into the master
branch?</b>
Can I create a patch branch retroactively?
</p>
<p>
Yes, you can still create a patch branch retroactively.
This is just an extension of the case where you want to retroactively
pull the commit back from the feature branch,
except this time you're retroactively pulling the commit back
from <i>both</i> branches:
</p>
<table CELLSPACING=1 STYLE="text-align: center" TITLE="Described in text.">
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>berry</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M1</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M1a</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M2</td>
<td>&nbsp;</td>
<td>master</td>
</tr>
<tr>
<td>apple</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2199;&#xfe0e;</foreignObject><use href="#swarr"/></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>berry</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2199;&#xfe0e;</foreignObject><use href="#swarr"/></svg>
</td>
</tr>
<tr>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">A</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">P</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>patch</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1a</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F2</td>
<td>&nbsp;</td>
<td>feature</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>berry</td>
</tr>
</table>
<p>
The analysis is the same:
The only commits that participate in the three-way merge are
the common merge base P
and the heads of the master and feature branches.
</p>
<p>
<b>What if I already made the fix in my feature branch by committing
directly to it, and then I cherry-picked the change into the master
branch, and I already made further changes in both branches,
including a conflicting change in my feature branch?</b>
Can I create a patch branch retroactively?
</p>
<p>
Yes, you can still create the patch branch retroactively,
but you have to be a bit careful because you want the merge
into the feature branch to contain no code changes;
the merge is for bookkeeping purposes only.
</p>
<table CELLSPACING=1 STYLE="text-align: center" TITLE="Described in text.">
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>berry</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M1</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M1a</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M2</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M3</td>
<td>&nbsp;</td>
<td>master</td>
</tr>
<tr>
<td>apple</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2199;&#xfe0e;</foreignObject><use href="#swarr"/></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>berry</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2199;&#xfe0e;</foreignObject><use href="#swarr"/></svg>
</td>
</tr>
<tr>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">A</td>
<td COLSPAN=5>
<svg width="168" height="20"><foreignObject>&larr; &larr; &larr; &larr; &larr;</foreignObject><path d="M168,10 L3,10" stroke="black" marker-end="url(#arrowhead)"></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">P</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>patch</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1a</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F2</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F3</td>
<td>&nbsp;</td>
<td>feature</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>cherry</td>
<td>&nbsp;</td>
<td>cherry</td>
</tr>
</table>
<p>
From the initial common commit A,
the feature branch makes an unrelated commit F1,
then makes the fix F1a, and then makes a second commit F2 that
alters the fix from berry to cherry.
Meanwhile, the main branch makes an unrelated commit M1,
then cherry-picks the fix M1a,
and then makes another unrelated commit M2.
</p>
<p>
How do you connect the fix in the feature branch
with its cherry-picked doppelg&auml;nger?
</p>
<p>
As before, create a patch branch from the common commit A
and cherry-pick F1a into it.
This is the fix that you want to be considered as existing
in both the master and feature branches.
Merge this branch into the master and feature branches, as usual.
The merge into the master branch will go cleanly because the
master branch hasn't made any changes that conflict with the fix.
However, the merge into the feature branch will encounter a merge
conflict because the feature branch continued and made a subsequent
conflicting change F2.
</p>
<p>
When you get that merge conflict, specify that you want to keep
the changes in the feature branch and ignore the changes in the patch
branch.
In other words, you want this to be a no-code-change merge.
You can use the <code>-s ours</code> option to <code>git merge</code>
to indicate that you want no code changes from the merge;
you are doing this only for bookkeeping purposes.
</p>
<p>
<b>I use an online service to manage pull requests.
How can I force the online service to use the <code>-s ours</code>
merge algorithm?</b>
</p>
<p>
This is really a question for your online service.
But let's suppose that your online service doesn't let you
customize the merge algorithm.
How can you force it anyway?
</p>
<p>
You can do it by pre-merging the result in your pull request.
Note that this means that you will need two patch branches,
one for each of the merge destinations.
</p>
<table CELLSPACING=1 STYLE="text-align: center" TITLE="Described in text.">
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>berry</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M1</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M1a</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M2</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M3</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>master</td>
</tr>
<tr>
<td>apple</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2199;&#xfe0e;</foreignObject><use href="#swarr"/></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>berry</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2199;&#xfe0e;</foreignObject><use href="#swarr"/></svg>
</td>
</tr>
<tr>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">A</td>
<td COLSPAN=5>
<svg width="168" height="20"><foreignObject>&larr; &larr; &larr; &larr;</foreignObject><path d="M168,10 L3,10" stroke="black" marker-end="url(#arrowhead)" /></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">P</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>patch-master</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>
<svg width="20" height="20" style="overflow: visible"><foreignObject>&#x2196;&#xfe0e;</foreignObject><path d="M20,72 L0,2" stroke="black" marker-end="url(#arrowhead)" /></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
<td>apple</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">~P</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>patch-feature</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1a</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F2</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F3</td>
<td>&nbsp;</td>
<td>feature</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>cherry</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>cherry</td>
</tr>
</table>
<p>
As is customary, we start with a common ancestor commit A.
The feature branch makes an unrelated commit F1,
and then applies an important bug fix as commit F1a.
The master branch makes an unrelated change M1, and
then cherry-picks the fix as commit M1a.
Both branches make additional changes:
In the master branch, an unrelated commit M2,
and in the feature branch, a conflicting commit F2.
</p>
<p>
Now you want to retroactively connect the commit F1a
with its cherry-pick commit M1a so that when the master
and feature branches merge, you don't get a conflict
(or worse, a silent revert).
</p>
<p>
We start as before and create a patch branch from the
common ancestor commit A,
and create a commit P that describes the commit that got
cherry-picked.
This branch merges cleanly into the master branch with
the cherry-picked version M1a.
However, this branch doesn't merge cleanly into the feature
branch made a conflicting commit F2,
and your online service service rejects the pull request
due to the conflict.
</p>
<p>
To fix this, you need to make sure that the branch submitted
to your online service has all the conflicts pre-resolved.
Create a new patch-feature branch from the patch branch you
used for the master branch,
and in that patch-feature branch,
revert commit P, producing commit ~P,
so that the patch-feature branch shows no
net code change relative to the common ancestor commit A.&sup1;
</p>
<p>
Now that the patch-feature branch has no net change,
it should merge cleanly into the feature branch.
There was no code change in the payload,
but the reason for the merge wasn't to pick up a code change;
it was to connect the master and feature branches via the
shared commit P, which becomes the new common ancestor
for the future merge of the master and feature branches.
</p>
<p>
<b>Conclusion</b>
</p>
<p>
Okay, we saw the sorts of problems that cherry-picks can create,
from
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215">
merge conflicts</a>
(sometimes in unrelated branches)
to
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225">
silent reverts</a>.
In practice, people cherry-pick only because they don't have a better
choice available.
They would rather perform a partial merge
but git doesn't support partial merges,
so people feel that they have to cherry-pick.
But I showed that
partial merges are possible after all!
You just have to think about the graph the right way:
Instead of merging directly between branches,
you
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180314-00/?p=98235">
create a helper branch that contains the partial content
and merge the helper branch into the desired destinations</a>.
</p>
<p>
As we saw when we
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180315-00/?p=98245">
explored the recursive merge algorithm</a>,
if you expect that your change will need to be cherry-picked
to many other branches,
you can stage a helper branch that is based on a commit far
back enough in time that everybody who would be interested
in cherry-picking the change will also have the commit your
branch is based on.
(In practice, this means going back to the commit that introduced
the change that you are trying to patch.)
If everybody merges from that helper branch rather than cherry-picking,
then when all the branches merge together,
the helper branch will contribute to the merge base,
and that avoids the conflicts and other bad things.
</p>
<p>
My team applied the techniques in this series,
and following the guidance herein reduced the
number of conflicts in a single merge from over 1500 files to only 20.
This changed an unmanageable merge to one that could be handled
by contacting the person responsible for each conflict and asking
them to resolve it.
</p>
<p>
(Note: This series isn't even half-over, even though I wrote a Conclusion.
So don't worry:
There's plenty of agony still to come.)
</p>
<p>
<b>Footnote</b>
</p>
<p>
&sup1;
Another way to do this is to create a new branch named patch-feature
from commit F2, and then perform a
<code>git merge -s ours patch-master</code> to create a no-code-change
merge from the patch-master branch.
This results in a line from P2 to F2, which is harmless:
</p>
<table CELLSPACING=1 STYLE="text-align: center" TITLE="Described in text.">
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>berry</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M1</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M1a</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M2</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M3</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>master</td>
</tr>
<tr>
<td>apple</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2199;&#xfe0e;</foreignObject><use href="#swarr"/></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>berry</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2199;&#xfe0e;</foreignObject><use href="#swarr"/></svg>
</td>
</tr>
<tr>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">A</td>
<td COLSPAN=5>
<svg width="168" height="20"><foreignObject>&larr; &larr; &larr; &larr;</foreignObject><path d="M168,10 L3,10" stroke="black" marker-end="url(#arrowhead)" /></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">P</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>patch-master</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>
<svg width="20" height="20" style="overflow: visible"><foreignObject>&#x2196;&#xfe0e;</foreignObject><path d="M20,72 L0,2" stroke="black" marker-end="url(#arrowhead)" /></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
<td>cherry</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">P2</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>patch-feature</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2199;&#xfe0e;</foreignObject><use href="#swarr"/></svg>
</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1a</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F2</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F3</td>
<td>&nbsp;</td>
<td>feature</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>cherry</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>cherry</td>
</tr>
</table>
<p>
If you want to get rid of the superfluous line, you could
use the <code>--squash</code> option,
but I would leave it because it makes it clearer what happened.
(Otherwise, it will look like the patch branch made a huge commit.)
</p>
<p>
Personally, I would use
<code>git commit-tree</code> to construct commit P2.
I'll talk about the magical powers of <code>git commit-tree</code>
at some unspecified future point.
</p>
<p>
However you created the patch-feature branch,
you can then create a pull request
from the patch-feature branch to the feature branch.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title"> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/oldnewthing/20180316-00/?p=98255#respond" style="display:none;">Cancel reply</a></small></h3>			<form action="https://blogs.msdn.microsoft.com/oldnewthing/wp-comments-post.php" method="post" id="commentform" class="comment-form">
				<p class="comment-form-comment"><textarea id="comment" name="comment" cols="45" rows="4" aria-required="true"></textarea></p><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" aria-required='true' required='required' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" maxlength="100" aria-describedby="email-notes" aria-required='true' required='required' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" maxlength="200" /></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit btn btn-default" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='98255' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="83ac974e4d" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="238"/></p>			</form>
			</div><!-- #respond -->
	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1329775">
				<div id="div-comment-1329775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1329775">
			March 16, 2018 at 8:15 am</a>		</div>

		<p>To think through what contortions people are willing to go just to avoid rewriting history.</p>
<p>My solution to the situation “while working on a feature F, I found a critical bug that is also in master” would be to stop working on F, branch off current master, fix the bug, submit the fix. Rebase F onto the fix, continue working. When ready to submit F, rebase it onto the newest master that hopefully includes the fix by that point.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255&#038;replytocom=1329775#respond' onclick='return addComment.moveForm( "div-comment-1329775", "1329775", "respond", "98255" )' aria-label='Reply to Yuri Khan'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1329785">
				<div id="div-comment-1329785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aged .Net Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1329785">
			March 16, 2018 at 8:56 am</a>		</div>

		<p>That word &#8220;hopefully&#8221; doesn&#8217;t sound like robust engineering practice. In a scaled-up environment that means your rebasing proposed feature becomes event driven; awaiting the fix appearing in the tip of master.  Assuming you can recognize it with all the other changes going on around it.</p>
<p>I also wonder how scalable your approach is once there are not one feature branch but 25.  Several of which have the same dependencies and may be growing new patches of their own.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255&#038;replytocom=1329785#respond' onclick='return addComment.moveForm( "div-comment-1329785", "1329785", "respond", "98255" )' aria-label='Reply to Aged .Net Guy'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1329805">
				<div id="div-comment-1329805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1329805">
			March 16, 2018 at 9:57 am</a>		</div>

		<p>You didn&#8217;t think it all the way through. He rebased onto the pull request branch and continued developing. This only depends on Yuri&#8217;s bugfix being merged into master before his feature change.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255&#038;replytocom=1329805#respond' onclick='return addComment.moveForm( "div-comment-1329805", "1329805", "respond", "98255" )' aria-label='Reply to Joshua'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4 parent" id="comment-1329815">
				<div id="div-comment-1329815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1329815">
			March 16, 2018 at 10:30 am</a>		</div>

		<p>Rebasing the feature branch has its own problems. (1) It breaks bisect, since commits will lay down a working tree that was never tested; (2) it makes a big mess if the feature branch had taken merges. (3) It breaks all the PRs in your online service. (4) It throws your team into disarray because they all have to rebase their changes on top of your rebase. (5) It breaks data retention requirements because you no longer have an accurate copy of what was in the product at any particular point in time. For example, if you release a build out of that feature branch, and then you rebase the feature branch, you lose the source code that went into that build. Lawyers don&#8217;t like it when you are unable to prove things like this.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255&#038;replytocom=1329815#respond' onclick='return addComment.moveForm( "div-comment-1329815", "1329815", "respond", "98255" )' aria-label='Reply to Raymond Chen - MSFT'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1329895">
				<div id="div-comment-1329895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1329895">
			March 16, 2018 at 12:06 pm</a>		</div>

		<p>(1) Depends on your testing strategy. If you rebase all feature branches in the release, then test the whole release, all is good.<br />
(2) Yes. So you don’t merge into feature branches. You rebase onto whatever other code you depend on to develop, and again when that gets accepted.<br />
(3) There specifically exist plugins for web-based Git frontends to rebase PRs when the big green button gets pushed. (They also check that the resulting code builds and passes tests before actually merging the rebased branch.)<br />
(4) Small price to pay for a history that is reasonably easy to read. It’s nice to have an SVG rendering of a small part of the graph with symbolic commit names such as F2; in reality, what you have is “git log &#8211;graph &#8211;oneline &#8211;color &#8211;decorate &#8211;all” output which is not nearly as neat.<br />
(5) Rule of feature branch releases #1: Do not release from feature branches. Rule #2: if you do release from a feature branch, put a tag on it and push it.</p>
<p>I do recognize that there are various trade-offs between a merge workflow and a rebase workflow.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-5" id="comment-1329925">
				<div id="div-comment-1329925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1329925">
			March 17, 2018 at 11:04 am</a>		</div>

		<p>Suppose you rebase the feature branch, and you later discover a problem that it introduced when it merged into master. You can&#8217;t bisect the feature branch because its history doesn&#8217;t match reality. Disallowing merges into feature branches means that a feature that takes three months to develop will be developed against a three-month-old copy of master, which seems wrong. You might think throwing a team of 100 people into disarray is a small price to pay. I think those 100 people may disagree with you. And suppose you find a problem in your feature branch that wasn&#8217;t there yesterday. &#8220;What changes were made since yesterday? I can&#8217;t tell because we rebased this morning. Git log says the entire branch changed.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1329995">
				<div id="div-comment-1329995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1329995">
			March 18, 2018 at 5:46 pm</a>		</div>

		<p>“What changes were made since yesterday? I can’t tell because we rebased this morning. Git log says the entire branch changed.”</p>
<p>When there&#8217;s a merge conflict that I can&#8217;t trivially resolve I back out of the rebase. Therefore (rebase wasn&#8217;t backed out case), it&#8217;s a problem with master&#8217;s pull and we track it down. Every case I&#8217;ve seen of this could be reproduced in master, thus permitting fixing it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-5" id="comment-1330035">
				<div id="div-comment-1330035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1330035">
			March 19, 2018 at 9:40 am</a>		</div>

		<p>Then I guess you&#8217;re lucky. On any given day, you either pull from master or make local commits. You never have days where you, say, pull from master <b>and</b> make 200 local commits. And you always discover problems within 24 hours.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1330085">
				<div id="div-comment-1330085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1330085">
			March 19, 2018 at 6:18 pm</a>		</div>

		<p>I think it&#8217;s the no nontrivial rebase rule.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1329885">
				<div id="div-comment-1329885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1329885">
			March 16, 2018 at 11:35 am</a>		</div>

		<p>If the fix is not in master by the time the feature branch is ready to be accepted and the feature branch depends on it, then the fix is submitted as part of the feature branch.</p>
<p>If the feature branch can be applied without the fix, okay, so be it. That bug was probably not so critical after all.</p>
<p>How scalable? If it’s good enough for the Linux kernel, it’s probably good enough for me.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255&#038;replytocom=1329885#respond' onclick='return addComment.moveForm( "div-comment-1329885", "1329885", "respond", "98255" )' aria-label='Reply to Yuri Khan'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1329915">
				<div id="div-comment-1329915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1329915">
			March 17, 2018 at 5:54 am</a>		</div>

		<p>&gt; If it’s good enough for the Linux kernel, it’s probably good enough for me.</p>
<p>The Linux kernel uses a merge workflow, not a rebase workflow. Linus himself said you should not rebase published branches &#8220;[&#8230;] This means: if you&#8217;re still in the &#8220;git rebase&#8221; phase, you don&#8217;t push it out. If it&#8217;s not ready, you send patches around, or use private git trees (just as a &#8220;patch series replacement&#8221;) that you don&#8217;t tell the public at large about.&#8221; (<a href="https://lwn.net/Articles/328436/" rel="nofollow">https://lwn.net/Articles/328436/</a>)</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255&#038;replytocom=1329915#respond' onclick='return addComment.moveForm( "div-comment-1329915", "1329915", "respond", "98255" )' aria-label='Reply to Cesar'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1329795">
				<div id="div-comment-1329795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1329795">
			March 16, 2018 at 9:38 am</a>		</div>

		<p>Entirely unrelated to branching, but I do miss Raymond&#8217;s &#8220;unscientific NCAA bracket predictions&#8221; from years past.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255&#038;replytocom=1329795#respond' onclick='return addComment.moveForm( "div-comment-1329795", "1329795", "respond", "98255" )' aria-label='Reply to nathan_works'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1329825">
				<div id="div-comment-1329825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1329825">
			March 16, 2018 at 10:32 am</a>		</div>

		<p>What do you mean unscientific? They were <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/tag/highly-scientific">HIGHLY SCIENTIFIC</a>.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255&#038;replytocom=1329825#respond' onclick='return addComment.moveForm( "div-comment-1329825", "1329825", "respond", "98255" )' aria-label='Reply to Raymond Chen - MSFT'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1329855">
				<div id="div-comment-1329855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1329855">
			March 16, 2018 at 11:12 am</a>		</div>

		<p>They were wonderfully &#8220;highly scientific&#8221;, and I too miss them.  Wait till next year, I guess.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255&#038;replytocom=1329855#respond' onclick='return addComment.moveForm( "div-comment-1329855", "1329855", "respond", "98255" )' aria-label='Reply to Brian'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1329975">
				<div id="div-comment-1329975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Al Go</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1329975">
			March 18, 2018 at 9:31 am</a>		</div>

		<p>He’ll post predictions after the tourney is over. His scientific “predictions” will be 100% accurate.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255&#038;replytocom=1329975#respond' onclick='return addComment.moveForm( "div-comment-1329975", "1329975", "respond", "98255" )' aria-label='Reply to Al Go'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1329835">
				<div id="div-comment-1329835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1329835">
			March 16, 2018 at 10:34 am</a>		</div>

		<p>I cannot emphasise enough the empirical evidence here (which is presented almost bashfully, or if you prefer, cmdfully).  Reducing merge conflicts in a large project from 1500 to 20 is a stupendous gain. In fact, it&#8217;s almost noticeable enough that a given set of management would see it, and mandate a day for the team(s) to go through these articles (and the following set) in order to remodel source control practices and workflow.  Which almost all teams should do.  I mean, honestly.  Imagine both the productivity gains and the quality gains!</p>
<p>On a parallel note, I&#8217;ve been contemplating a transference of these techniques to Perforce/Source Depot.  They&#8217;re a centralised database, and not a distributed CVS, so the workflow and the history is a little different, but obviously the graph theory remains the same.</p>
<p>I know it&#8217;s a lot to ask, but could you add a summary article (at your leisure, of course) to discuss the best practices for a couple of popular non-DVCS products when handling cherry-picking and selecting the optimum root ancestor for the patch branches?</p>
<p>Even &#8220;Kindly Uncle Raymond&#8221; advice would probably help thousands of IT shops out there.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255&#038;replytocom=1329835#respond' onclick='return addComment.moveForm( "div-comment-1329835", "1329835", "respond", "98255" )' aria-label='Reply to Peter Doubleday'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1329865">
				<div id="div-comment-1329865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1329865">
			March 16, 2018 at 11:14 am</a>		</div>

		<p>I&#8217;d like to add TFS source control to that list/request.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255&#038;replytocom=1329865#respond' onclick='return addComment.moveForm( "div-comment-1329865", "1329865", "respond", "98255" )' aria-label='Reply to Brian'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1329905">
				<div id="div-comment-1329905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">osexpert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1329905">
			March 16, 2018 at 12:41 pm</a>		</div>

		<p>&#8220;reduced the number of conflicts in a single merge from over 1500 files to only 20&#8221;<br />
Not 1500 conflicts, 1500 files. He did not say how many conflicts there was originally.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255&#038;replytocom=1329905#respond' onclick='return addComment.moveForm( "div-comment-1329905", "1329905", "respond", "98255" )' aria-label='Reply to osexpert'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-3" id="comment-1329935">
				<div id="div-comment-1329935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1329935">
			March 17, 2018 at 11:05 am</a>		</div>

		<p>Counting conflicts is imprecise. Suppose there are two conflict blocks. Are they really two separate conflicts or one large conflict? (Because one of the &#8220;unchanged&#8221; lines is a blank line, say.)</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255&#038;replytocom=1329935#respond' onclick='return addComment.moveForm( "div-comment-1329935", "1329935", "respond", "98255" )' aria-label='Reply to Raymond Chen - MSFT'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1330015">
				<div id="div-comment-1330015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255#comment-1330015">
			March 19, 2018 at 5:45 am</a>		</div>

		<p>This is what I believed git&#8217;s &#8220;Cherry pick&#8221; actually did.</p>
<p>Do you have any idea why it doesn&#8217;t?</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180316-00/?p=98255&#038;replytocom=1330015#respond' onclick='return addComment.moveForm( "div-comment-1330015", "1330015", "respond", "98255" )' aria-label='Reply to Richard'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

