<html>
<head>
<title>The MIPS R4000, part 15: Code walkthrough</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The MIPS R4000, part 15: Code walkthrough</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 20, 2018 / year-entry #93</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180420-00/?p=98565</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Let's look at some code.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today we're going to take a relatively small function and watch
what the compiler did with it.
The function is this guy from the C runtime library,
although I've
simplified it a bit to avoid some distractions.
</p>
<pre>
extern FILE _iob[];

int fclose(FILE *stream)
{
    int result = EOF;

    if (stream-&gt;_flag &amp; _IOSTRG) {
        stream-&gt;_flag = 0;
    } else {
        int index = stream - _iob;
        _lock_str(index);
        result = _fclose_lk(stream);
        _unlock_str(index);
    }

    return result;
}
</pre>
<p>
Here's the corresponding disassembly:
</p>
<pre>
; int fclose(FILE *stream)
; {
    addiu   sp,sp,-0x28     ; reserve stack space
    sw      ra,0x1C(sp)     ; save return address
    sw      s0,0x18(sp)     ; save s0
</pre>
<p>
On entry, the parameters to a function are passed in <var>a0</var>
through <var>a3</var>.
This function has only one parameter, so it goes in <var>a0</var>.
</p>
<p>
We reserve some stack space.
The first 16 bytes of that stack space are going to be used
as home space for the functions we call, so our usable
bytes start at offset <code>0x10</code>.
We save the <var>s0</var> register (because we're going to use
it as a local variable) and the return address (because it will
be modified when we call to other functions).
</p>
<pre>
;   if (stream-&gt;_flag ...
    lw      t6,0xc(a0)      ; t6 = stream-&gt;_flag
    move    a1,a0           ; save stream in a1
</pre>
<p>
We are going to test a bit in the <code>stream-&gt;_flag</code>
member, so we need to load that up.
Meanwhile, we save the <code>stream</code> parameter
in the <var>a1</var> register.
</p>
<pre>
;   int result = EOF;
    li      v1,-1           ; result = -1
</pre>
<p>
Interleaved with the evaluation of the condition we insert
the initialization of the <code>result</code> local variable.
</p>
<pre>
;   if (stream-&gt;_flag &amp; _IOSTRG) {
    andi    t7,t6,0x40      ; is the _IOSTRG bit set?
    bnezl   t7,done         ; yup, then bail

;       stream-&gt;_flag = 0;
    sw      zero,12(a0)     ; but set stream-&gt;_flag = 0 before we go
</pre>
<p>
We mask off all but the <code>_IOSTRG</code> bit and see if it's nonzero.
If so, then we branch.
This branch uses the <code>l</code> "likely" suffix,
so the instruction in the branch delay slot executes only if the
branch is taken.
Since the <code>true</code> branch of the <code>if</code> is only
one instruction long, the entire contents fit inside the delay slot.
How convenient.
We can put the <code>true</code> branch in the branch delay slot
and jump right to the function exit code.
If the branch is not taken, then the instruction in the branch
delay slot is suppressed.
(This suppression
behavior is the case only for <code>l</code>-type branches.)
</p>
<pre>
;   } else {
;       int index = stream - _iob;
    lui     t8,0x77cd       ; load address of _iob into t8
    addiu   t8,t8,0x7b0     ; t8 = 0x77cd07b0
    subu    s0,a1,t8        ; calculate raw pointer offset
    sra     s0,s0,5         ; divide by 32 to get the index (saved in s0)
</pre>
<p>
To calculate the pointer difference, we need to subtract the raw
pointers, and in order to do that, we need to load the 32-bit
address of the <code>_iob</code> array.
That takes two instructions.
And then we subtract the raw pointers to get the byte difference.
And then we divide by <code>sizeof(FILE)</code> to get the index.
We're lucky that the size of a <code>FILE</code> is a power of 2,
so a shift instruction can be used instead of a full division.
</p>
<pre>
;       _lock_str(index);
    move    a0,s0           ; Load argument for _lock_str
    jal     _lock_str
    sw      a1,0x28(sp)     ; save stream pointer on the stack for later
</pre>
<p>
Now that we've calculated the index, set it up as the argument
for the <code>_lock_str</code> function and call it.
But just before we go, we save <var>a1</var> (which is the
<code>stream</code> parameter) on the stack so we don't lose it.
The saving of <var>a1</var> goes into the branch delay slot, so
it executes before the branch is taken, even though it
comes after the branch in the instruction stream.
</p>
<p>
(I don't know why the compiler bothered with <var>a1</var>.
It could have saved <var>a0</var> on the stack sooner and put
the <code>move a0, s0</code> in the branch delay slot.)
</p>
<pre>
;       result = _fclose_lk(stream);
    jal     _fclose_lk
    lw      a0,0x28(sp)     ; load argument for _fclose_lk
</pre>
<p>
The next thing to do is to call <code>_fclose_lk</code>,
and in this case, we load its argument in the branch delay slot.
Seeing work happen in the branch delay slot takes getting used to.
It always takes a period of adjustment whenever
I switch to MIPS after
working with some other processor without branch delay slots.
</p>
<pre>
;       _unlock_str(index);
    move    a0,s0           ; Load argument for _unlock_str
    jal     _unlock_str
    sw      v0,0x24(sp)     ; result = return value from _fclose_lk
</pre>
<p>
After the <code>_fclose_lk</code>, we call <code>_unlock_str</code>,
and this time we use the branch delay slot to save the return value from
<code>_fclose_lk</code> onto the stack before we lose it.
(Though the compiler could have done a little better and
saved it in <var>s0</var>,
since <code>index</code> is a dead variable at this point.)
</p>
<pre>
;  }
    lw      v1,0x24(sp)     ; recover result so we can return it
</pre>
<p>
After <code>_unlock_str</code> returns, we put <code>result</code>
into <var>v1</var> because that's where our cleanup code expects it.
</p>
<p>
Note that in the instruction stream, you see a store immediately
followed by a load from the same location.
This makes no sense at first,
until you realize that there's a function
call in between them, because the store is in the branch delay slot.
Even though the store and load immediately follow each other
in the instruction stream,
there's an entire function call that happens in between!
The store happens before the function call,
ad the load happens after.
</p>
<pre>
;  return result;
; }
done:
    move    v0,v1           ; set return value
    lw      s0,0x18(sp)     ; restore s0
    lw      ra,0x1C(sp)     ; recover return address
    jr      ra              ; return
    addiu   sp,sp,0x28      ; clean up stack
</pre>
<p>
We set the return value to the <code>result</code>,
and then we enter the epilogue.
In the epilogue, we restore the <var>s0</var> register
we had been using to hold <code>index</code>,
and then we load up the return address and jump back to it.
We destroy the stack frame in the branch delay slot.
</p>
<p>
Overall, it's pretty straightforward code.
The only truly weird thing is the branch delay slot.
</p>
<p>
But that's a huge truly weird thing.
</p>
<p>
This concludes our tour of the MIPS R4000 processor.
I never had to do any significant work with it,
so I probably won't be able to answer interesting questions.
The focus was on learning enough to be able to read valid
compiler output,
with a few extra notes on the architecture to call out
what makes it different.&sup1;
</p>
<p>
<b>Bonus chatter</b>:
Here's my hand-optimized version of the function.
</p>
<pre>
; int fclose(FILE *stream)
; {
    addiu   sp,sp,-0x10     ; reserve stack space
    sw      ra,0x14(sp)     ; save return address
    sw      s0,0x10(sp)     ; save s0
    move    s0,a0           ; register variable s0 = stream
</pre>
<p>
My first trick is to reuse the home space.
The compiler-generated version didn't use the home space
for anything other than saving the <code>stream</code>
parameter.
Look, people, it's free memory!
We need three words of stack, one for the return address,
one to save the preserved register <var>s0</var>,
and one to save the index.
We get four words of home space, so we can just use that.
The actual stack frame needed by our function is just
the home space for the outbound call.
</p>
<p>
(I wonder whether it's legal to overlap your inbound home
space with your outbound home space.
If our function had needed only two words of stack,
would it have been okay for us to write
<code>addiu sp, sp, -8</code>?)
</p>
<pre>
;   if (stream-&gt;_flag ...
    lw      t6,0xc(a0)      ; t6 = stream-&gt;_flag
;   int result = EOF;
    li      v0,-1           ; result = -1 (avoid load stall)
</pre>
<p>
I'm precalculating the <code>result</code> in anticipation
of the early-out.
This instruction is basically free because it comes in the
load delay slot.
If we had tried to use the value in <var>t6</var> immediately,
the processor would have stalled for a cycle, so we may as well
use that cycle productively, even if only speculatively.
</p>
<pre>
;   if (stream-&gt;_flag &amp; _IOSTRG) {
    andi    t7,t6,0x40      ; is the _IOSTRG bit set?
    bnezl   t7,done         ; yup, then bail
;       stream-&gt;_flag = 0;
    sw      zero,12(a0)     ; but set stream-&gt;_flag = 0 before we go
</pre>
<p>
The test and one-line-body for the
<code>_IOSTRG</code> test hasn't changed,
except that we exit with the return value directly in <var>v0</var>
rather than in <var>v1</var>.
</p>
<pre>
;   } else {
;       int index = stream - _iob;
    lui     t8,0x77cd       ; load address of _iob into t8
    addiu   t8,t8,0x7b0     ; t8 = 0x77cd07b0
    subu    a0,a0,t8        ; calculate raw pointer offset
    sra     a0,a0,5         ; divide by 32 to get the index (in a0)
</pre>
<p>
The calculation of the index is the same, except that I put it
directly into <var>a0</var> so it is ready to be passed to
<code>_lock_str</code>.
</p>
<pre>
;       _lock_str(index);
    jal     _lock_str
    sw      a0,0x18(sp)     ; save index
</pre>
<p>
I spent some time trying to decide which should be the register
variable: <code>stream</code> or <code>index</code>.
Turns out it doesn't matter from a code size point of view:
Both are saved and restored exactly once.
</p>
<pre>
;       result = _fclose_lk(stream);
    jal     _fclose_lk
    move    a0,s0           ; load argument for _fclose_lk
</pre>
<p>
Calling <code>_fclose_lk</code> is simpler because we can
move the argument from a register rather than from memory.
That way, if the first thing that <code>_fclose_lk</code> does
is try to use the stream, it won't suffer a load delay stall.
The first instruction of the called function executes
immediately after the branch delay slot.
If you put a load instruction in the branch delay slot,
then the first instruction of the called function is executing
in a load delay slot,
and it probably isn't expecting that.
</p>
<p>
So that thinking tipped the scales in favor of
keeping <code>stream</code> as the register variable.
(Of course, that thinking is also based on the older
MIPS implementation, which was not dual-issue.
The MIPS R4000 processes one instruction every half-cycle.
This alters the micro-optimization considerations for both
branch delays and load delays.)
</p>
<pre>
;       _unlock_str(index);
    lw      a0,0x18(sp)     ; Load argument for _unlock_str
    jal     _unlock_str
    move    s0,v0           ; result = return value from _fclose_lk
</pre>
<p>
We could have swapped the <code>lw</code> and <code>move</code>,
but I load early and move late in order to avoid loading memory
in a branch delay slot, for reasons explained above.
</p>
<p>
Since the <code>stream</code> variable is dead,
we can reuse the <var>s0</var> register to hold <code>result</code>.
</p>
<pre>
;  }
    move    v0,s0           ; recover result so we can return it
;  return result;
; }
done:
    lw      s0,0x10(sp)     ; restore s0
    lw      ra,0x14(sp)     ; recover return address
    jr      ra              ; return
    addiu   sp,sp,0x10      ; clean up stack
</pre>
<p>
And then we clean up and go home.
Everybody reached <code>done</cODE> with the
return value already in <code>v0</code>,
so all that's left to do is restore our registers and stack.
</p>
<p>
&sup1;
I confess that the excursion into branch delay slots
took me away from the focus on how to read
valid compiler output.
Sorry.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1333815">
				<div id="div-comment-1333815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180420-00/?p=98565#comment-1333815">
			April 20, 2018 at 10:05 am</a>		</div>

		<p>Now that you&#8217;re done with your tour of MIPS (which brings back memories of my university Computer Architecture course), would you consider writing a similar series about x86?  I know that it&#8217;s the ubiquitous PC ISA and you&#8217;ve already written much about it, but having a similar systematic treatment of its register set, memory models, and arithmetic/logic/control-flow instructions, would help illustrate what makes x86 unique.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mngoldeneagle odd alt depth-2" id="comment-1333835">
				<div id="div-comment-1333835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180420-00/?p=98565#comment-1333835">
			April 20, 2018 at 12:15 pm</a>		</div>

		<p>I&#8217;d actually find that really interesting, having never worked with x86/x86-64 assembly myself and always wondered how it differed.  The few times I&#8217;ve had to dive into assemblyland has mostly been JVM microcode and MIPS assembly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1334005">
				<div id="div-comment-1334005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://twitter.com/chaign_c' rel='external nofollow' class='url'>chaign_c</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180420-00/?p=98565#comment-1334005">
			April 24, 2018 at 3:17 am</a>		</div>

		<p>Hey you can use arm_now to quickly deploy a MIPS virtualmachine, within 30 secondes (install + setup + run).<br />
<a href="https://github.com/nongiach/arm_now" rel="nofollow">https://github.com/nongiach/arm_now</a><br />
arm_now support a lot of cpu architectures, you can write similar series for whatever arch you want</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1333825">
				<div id="div-comment-1333825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180420-00/?p=98565#comment-1333825">
			April 20, 2018 at 10:09 am</a>		</div>

		<p>Don&#8217;t be sorry. The branch delay slot make the whole thing worthwhile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1333845">
				<div id="div-comment-1333845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">aap</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180420-00/?p=98565#comment-1333845">
			April 21, 2018 at 10:25 am</a>		</div>

		<p>Thanks for series. I take it PowerPC is next?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1333855">
				<div id="div-comment-1333855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180420-00/?p=98565#comment-1333855">
			April 21, 2018 at 9:15 pm</a>		</div>

		<p>While reading the code, I have found the 40 byte stack frame reserved by the compiler (0x28, or ten words) is excessive. Some slots are left untouched (offsets 0x14 and 0x20), some could be saved (AFAIK, the specification allows you to freely use the slots reserved for non-defined parameters, in this case offsets 0x04 through 0x0c, so you use them instead of booking 0x24 and 0x28), and finally, some are plainly wasted (offset 0x10 saves sp, but if sp somehow got overwritten, how would you recover it?). All in all, such a simple function would be able to do most of its work in the parameter back up space.</p>
<p>Raymond&#8217;s version is much more reasonable: it uses 16 bytes less while still playing by the rules. You would expect modern compilers to do a better job&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1333865">
				<div id="div-comment-1333865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180420-00/?p=98565#comment-1333865">
			April 23, 2018 at 12:06 am</a>		</div>

		<p>What makes you think this is a modern compiler? The other articles in the series have referenced the 1992 and 1995 compilers, so I&#8217;d expect it to be one of those (and by previous accounts, the 1992 compiler didn&#8217;t do quite a few things that it could have.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-even depth-1" id="comment-1333935">
				<div id="div-comment-1333935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180420-00/?p=98565#comment-1333935">
			April 23, 2018 at 8:29 am</a>		</div>

		<p>I wonder, are there any assembly text editors that recognize instructions in a branch delay slot and give them a special color?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1333965">
				<div id="div-comment-1333965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180420-00/?p=98565#comment-1333965">
			April 23, 2018 at 10:48 am</a>		</div>

		<p>I find the IBM System 360/370/etc. assembler instruction set interesting, probably because that&#8217;s what I learned first.  It&#8217;s not a PC architecture, though&#8230;.  sigh&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

