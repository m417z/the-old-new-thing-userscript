<html>
<head>
<title>How can I investigate the possibility of a lot of leaked window classes (RegisterClass)?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I investigate the possibility of a lot of leaked window classes (RegisterClass)?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 6, 2017 / year-entry #224</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171006-00/?p=97147</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Looking for names.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer reported that they are seeing intermittent failures
from the
<code>Register&shy;Class</code>
function
with the error
<code>ERROR_</code><code>NOT_</code><code>ENOUGH_</code><code>MEMORY</code>
on some systems,
typically after their program and other programs related to their
program have been running for some time.
They suspect that there is a leak somewhere caused by
failure to unregister window classes,
but they need help tracking this down.
</p>
<blockquote CLASS="q">
<p>
We thought we could inspect the system to see
how many classes have been registered indirectly
via the following pseudocode:
</p>
<pre>
Foreach running processId
  Foreach atom in (<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20080429-00/?p=22543">0xC000</a> .. 0xFFFF)
    If (GetClassInfo(HInstanceFromProcessId(processId), atom))
      Inspect the returned class name
</pre>
<p>
But when we run this,
we get a constant set of used atoms for all processes,
and we can't see the class name. 
Is there something else that we can use to help track down this leak?
</p>
</blockquote>
<p>
Okay,
there are a few things wrong with the pseudocode above.
</p>
<p>
First of all,
instance handles are meaningful only in the context of a process,
and unless a specific process is specified (which is very rare),
they are interpreted as in the context of the current process.
So the call to
<code>HInstance&shy;From&shy;Process&shy;Id</code>
is not all that useful because it gives you an instance handle
you can't use.
What you end up doing is taking the instance handle from that
other process
and then checking if anybody in the <i>current</i> process
with the same instance handle has registered a class with the
specified atom.
</p>
<p>
Second,
the <code>Get&shy;Class&shy;Info</code> function gets
information about the class which is registered against
the provided
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20050418-59/?p=35873">
instance/name</a> pair.
In order to get through all the classes that belong to a process,
you have to enumerate through not only all the atoms,
but also all the instance handles.
And you have to include all the instances of modules that
have ever been loaded
(even if they were subsequently unloaded).
This is not the sort of thing you can easily brute-force your
way through,
seeing as a module can be loaded at
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20031008-00/?p=42223">
almost any 64KB boundary</a>.
</p>
<p>
Fortunately, all is not lost.
</p>
<p>
It so happens that in current versions of Windows,
registered class names,
registered clipboard format names,
and registered window message names
all come from the same atom table.
I wish to reiterate that this is an implementation detail
which can change at any time,
so don't take any dependencies on this.
I provide this information for diagnostic purposes,
which is what we have here.
</p>
<p>
The customer can do this once they encounter the problem:
</p>
<pre>
Foreach atom in (<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20080429-00/?p=22543">0xC000</a> .. 0xFFFF)
  If (GetClipboardFormatName(atom, buffer, bufferSize))
      Print buffer
</pre>
<p>
This will print out the names of all the classes,
clipboard formats, and registered window messages.
There is room in the atom table for 16,384 atoms,
and in practice there aren't more than a hundred or so,
so if you see more than 15,000 entries,
that's a really good sign that you're leaking classes.
</p>
<p>
Leaking classes is generally hard to do because the class
name is typically something you hard-code into your program,
and it takes a lot of work to type 15,000 different
strings into your progam (much less keep track of them all).
Since you are unlikely to have 15,000 different
window procedures in your program,
you probably don't need 15,000 different classes.
</p>
<p>
There are some frameworks which generate class names
programmatically,
and it might be one of those frameworks that is the source
of the large amount of class names (and the consequent
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20060920-07/?p=29663">
leaking thereof</a>).
</p>
<p>
The customer wrote back:
"Thanks!
That showed us exactly what was leaking:
Tons of
<a HREF="http://referencesource.microsoft.com/#WindowsBase/Shared/MS/Win32/HwndWrapper.cs">
<code>HwndWrapper[OurApp;;guid]</code> classes</a>,
with all different GUIDs.
It turns out that we were creating a dispatcher object
on a background thread.
Creating a dispatcher registers the class,
which leaks when the background thread terminates."
</p>
<p>
The customer continued that they were able to fix the leak
by using a synchronization context so that the object is
created on the UI thread.
One of my colleagues provided an alternative solution of calling
<code>Dispatcher.</code><code>Begin&shy;Invoke&shy;Shutdown</code>
or
<code>Dispatcher.</code><code>Invoke&shy;Shutdown</code>
before terminating the background thread.
That will shut down the dispatcher cleanly
(instead of ripping the thread out from under it),
which will destroy the window and
unregister the window class.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-archangelpip even thread-even depth-1 parent" id="comment-1311566">
				<div id="div-comment-1311566" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171006-00/?p=97147#comment-1311566">
			October 6, 2017 at 11:31 am</a>		</div>

		<p>This is possibly one of those &#8220;time machine&#8221; situations where perhaps it would be nice if there was something like EnumWindowsClasses.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-yuhong-bao odd alt depth-2" id="comment-1311615">
				<div id="div-comment-1311615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171006-00/?p=97147#comment-1311615">
			October 7, 2017 at 12:26 pm</a>		</div>

		<p>Which also reminds me of window hooks. WIN31WH.HLP mentions that &#8220;Windows 3.1 no longer allows applications and DLLs to enumerate all the functions in a hook chain. In particular, Windows 3.1 no longer supports the HC_GETLPLPFN, HC_LPLPFNNEXT, and HC_LPFNNEXT values for the DefHookProc function. &#8220;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1311596">
				<div id="div-comment-1311596" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171006-00/?p=97147#comment-1311596">
			October 7, 2017 at 4:00 am</a>		</div>

		<p>Along similar lines, I&#8217;ve always wondered why, having pointed out that RegisterWindowClass and RegisterClipboardFormat have the same ordinal in Windows 3.x, the book Undocumented Windows never made the leap to using GetClipboardFormatName to find out the name of a registered window message.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1311605">
				<div id="div-comment-1311605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171006-00/?p=97147#comment-1311605">
			October 7, 2017 at 4:03 am</a>		</div>

		<p>Sorry I meant RegisterWindowMessage of course&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1311625">
				<div id="div-comment-1311625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew Rogers (ex-MSFT)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171006-00/?p=97147#comment-1311625">
			October 7, 2017 at 11:57 pm</a>		</div>

		<p>Darran just asked for &#8220;time travel&#8221; debugging above &#8211; your wish is Microsoft&#8217;s command! There has just been a public release of the &#8220;time travel&#8221; debugging technology that&#8217;s been available internally for some years (you can find a few references to &#8220;iDNA&#8221; peppered on the web):</p>
<p><a href="https://blogs.msdn.microsoft.com/windbg/2017/09/25/time-travel-debugging-in-windbg-preview/" rel="nofollow">https://blogs.msdn.microsoft.com/windbg/2017/09/25/time-travel-debugging-in-windbg-preview/</a></p>
<p>It&#8217;s great to see this being shared with the community: there are some caveats though &#8211;</p>
<p>* The trace files generated by it are huge, so using it over a long test may become impractical<br />
* It only records user-mode code</p>
<p>That said, it&#8217;s a lot of fun to work with, and I&#8217;m glad that everyone will be able to get the benefit of working with it now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mndos odd alt thread-odd thread-alt depth-1" id="comment-1311806">
				<div id="div-comment-1311806" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MacIn173' rel='external nofollow' class='url'>MacIn173</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171006-00/?p=97147#comment-1311806">
			October 9, 2017 at 12:44 pm</a>		</div>

		<p>There&#8217;s some AtomMonitor tool available for it. We&#8217;ve used it once when our system failed because it got run out of atoms.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1311936">
				<div id="div-comment-1311936" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171006-00/?p=97147#comment-1311936">
			October 10, 2017 at 10:33 pm</a>		</div>

		<p>I&#8217;m happy that the customer followed up with you. This is a refreshing change from many of your customer stories where they never bother to do that!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1312545">
				<div id="div-comment-1312545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171006-00/?p=97147#comment-1312545">
			October 14, 2017 at 11:47 am</a>		</div>

		<p>For better or worse, I have seen this pattern many times, as well as a related one in a .NET HWNDWRAPPER class.  This is especially problematic in services, where you can easily deplete the desktop heap long before you run out of ATOMs.  This could have been avoided if the code registering the class used a per-instance wndproc instead of a per-instance wndclass.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1312555">
				<div id="div-comment-1312555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171006-00/?p=97147#comment-1312555">
			October 14, 2017 at 11:49 am</a>		</div>

		<p>Quick correction: I meant NotificationWindow, not HWNDWRAPPER, which was called out in this blog.  But both contain the same cause, which in my opinion, is a simple bug but not worth the risk of fixing with so many applications potentially dependent on a less than ideal behavior.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

