<html>
<head>
<title>The curse of the leading zero</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The curse of the leading zero</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 16, 2014 / year-entry #14</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>62</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Consider the following batch file which tries to decide whether we are in the first or second half of the calendar year. (Assume US-English locale settings.) if %DATE:~4,2% LEQ 6 ( echo First half ) else ( echo Second Half ) This works great, except that it reports that August and September are in the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Consider the following batch file which tries to decide
whether we are in the first or second half of the calendar year.
(Assume US-English locale settings.)
</p>
<pre>
if %DATE:~4,2% LEQ 6 (
  echo First half
) else (
  echo Second Half
)
</pre>
<p>
This works great,
except that it reports that August and September are in the
first half of the year.
What the heck?
Have the laws of mathematics broken down?
</p>
<p>
Or this JavaScript function that creates a table of known postal codes
for
<a HREF="http://microsoftcambridge.com/">
Cambridge, Massachusetts</a>.
</p>
<pre>
var CambridgeMA = [ 02138, 02139, 02140, 02141, 02142, 02238 ];
</pre>
<p>
But when you try to use the array,
you discover that
half of the numbers got corrupted!
</p>
<pre>
alert(CambridgeMA.join(" "));
</pre>
<blockquote CLASS=m><p>
2138 2139 <u>1120 1121 1122</u> 2238
</p>
</blockquote>
<p>
Are space aliens corrupting my data?
</p>
<p>
Here's a clue.
If you try to calculate the next month in a batch file
</p>
<pre>
set /a NEXTMONTH=%DATE:~4,2%+1
</pre>
<p>
the script generates the following error in August and September:
</p>
<pre>
Invalid number.  Numeric constants are either decimal (17),
hexadecimal (0x11), or octal (021).
</pre>
<p>
The answer is that pesky leading zero.
(August is month 08 and September is month 09.)
</p>
<p>
Remember octal? I don't.
</p>
<p>
The architectural design of the PDP-8
and other processors of the era made
octal a convenient notation for representing values.
(This octal-centricness can also be seen in the instruction
set of the 8008 processor, which led to the 8080,
which led to the 8086, which led to the x86, which led to the x64,
and you can still see the octal encoding in the so-called ModR/M and
SIB bytes.)
</p>
<p>
The B language permitted octal constants to be expressed
by prefixing them with a zero.
For example, <code>010</code> represented the decimal value 8.
This syntax was carried forward into the C language,
and from there to every C-inspired language or language
designed by people who imprinted on C.
</p>
<p>
Nowadays, octal is very rarely used, and as a result,
the ability to create an octal constant by inserting a leading
zero is now a curse rather than a helpful feature.
</p>
<p>
<b>Now I can tell a joke</b>:
My brokerage firm apparently has difficulty printing decimal values
on their statements, because a value like "30.038" ends up being
printed as "30.&nbsp;38". I suspect that their reporting program
has a function like this:
</p>
<pre>
void PrintThousandths(unsigned n)
{
 printf("%d.%3d", n / 1000, n % 1000);
}
</pre>
<p>
One of my colleagues imagined what the code review must have
looked like:
</p>
<blockquote CLASS=q><p>
<code>&nbsp;printf("%d.<font COLOR=red>%03d</font>",
n / 1000, n % 1000);</code>
<br>
[reviewer] Change <code>%03d</code> to <code>%3d</code>,
because <code>%03d</code> will print the result in octal.
</p>
</blockquote>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (62)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1099783">
				<div id="div-comment-1099783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1099783">
			January 16, 2014 at 7:04 am</a>		</div>

		<p>Yowzer. I found exactly this bug as a 3rd line support contractor working in a delicious multi-tier system. (Java front end, talking CORBA to a C++ server, on a DB2 database). The version of C++ the back end was compiled with used the old specification for atoi&#8230; and you know the rest.</p>
<p>Once I realized what was going on it was easy enough to fix&#8230; &nbsp;Happy days.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1099803">
				<div id="div-comment-1099803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lockwood</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1099803">
			January 16, 2014 at 7:07 am</a>		</div>

		<p>I got quite badly stung by this in JavaScript.</p>
<p>There then followed some evil hacky hacks to try and get round it before finding out that there were proper ways to get round it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1099813">
				<div id="div-comment-1099813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1099813">
			January 16, 2014 at 7:07 am</a>		</div>

		<p>I&#39;m not at all surprised at the js zip code but I am surprised that cmd knows octal. It comes in handy do rarely.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1099833">
				<div id="div-comment-1099833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1099833">
			January 16, 2014 at 7:20 am</a>		</div>

		<p>Fun fact: In C like languages is literal 0 is in fact octal zero:</p>
<p>int i = 0; // Octal Zero</p>
<p>Not that it makes the slightest bit of difference though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1099853">
				<div id="div-comment-1099853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1099853">
			January 16, 2014 at 7:32 am</a>		</div>

		<p>The ACL groups on VMS were 3 Octal digits (512 total possible groups).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1099863">
				<div id="div-comment-1099863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lucidfox</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1099863">
			January 16, 2014 at 7:37 am</a>		</div>

		<p>It also doesn&#39;t help that apparently every C-inspired language with octal constants still parses numbers in base 10 by default, ignoring leading zeroes:</p>
<p>C: 010 != atoi(&quot;010&quot;)</p>
<p>Java: 010 != Integer.parseInt(&quot;010&quot;)</p>
<p>JavaScript: 010 != parseInt(&quot;010&quot;)</p>
<p>This is why I always explicitly specify base 10 in conversion functions, for clarity.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1099883">
				<div id="div-comment-1099883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Baker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1099883">
			January 16, 2014 at 7:56 am</a>		</div>

		<p>02138 is not a common way of representing a number. If it&#39;s a number, it should be represented 2138. Conversely, and the key point, if it&#39;s 02138 then it&#39;s not a number. A ZIP code is the string &quot;02138&quot;. We see leading zeros being disregarded in Excel, but then it is fair for Excel to be biased towards numbers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1099893">
				<div id="div-comment-1099893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken in NH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1099893">
			January 16, 2014 at 7:57 am</a>		</div>

		<p>The joke aside, the solution to the above problems is to stop storing non-mathematical data in numeric types. Zip codes are textual data. Phone numbers are textual data. Dates and times are dates and/or times, not numeric values. (Yes, yes, I know that in most cases the various date/time types in various languages/frameworks return numeric values for discrete parts, such as months, minutes, or year. Ignore them, particularly in languages/frameworks that have robust date/time handling functions.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1099903">
				<div id="div-comment-1099903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rbirkby</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1099903">
			January 16, 2014 at 7:59 am</a>		</div>

		<p>That&#39;s why octals are explicitly prohibited in ECMAScript strict mode &#8211; <a rel="nofollow" target="_new" href="http://dmitrysoshnikov.com/ecmascript/es5-chapter-2-strict-mode/#octal-extension-for-literals">dmitrysoshnikov.com/&#8230;/es5-chapter-2-strict-mode</a></p>
<p>(function f() {</p>
<p>&#39;use strict&#39;;</p>
<p>var CambridgeMA = [ 02138, 02139, 02140, 02141, 02142, 02238 ];</p>
<p>alert(CambridgeMA.join(&quot; &quot;));</p>
<p>})()</p>
<p>SyntaxError: Octal literals are not allowed in strict mode.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1099913">
				<div id="div-comment-1099913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1099913">
			January 16, 2014 at 8:08 am</a>		</div>

		<p>Visual Studio should generate a warning when it sees a (non-zero) octal constant. That way you can beef it up to ERROR with a #pragma warning ( number : error ) buried in stdafx.h (or windows.h!)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1099923">
				<div id="div-comment-1099923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1099923">
			January 16, 2014 at 8:17 am</a>		</div>

		<p>I once worked on the firmware an embedded system that required entry of an IP address using only up, down and enter. &nbsp;That system fixed width entry, so the IP address always required 3 digits for each place, so 192.161.1.1 was entered as 192.168.001.001. &nbsp;We had no idea that the official spec for IP mandated that leading zeros specified octal. &nbsp;That caused no end of confusing for us or our users as IP addresses on this system could not be directly transferred to a PC because of the octal assumption.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jader3rd odd alt thread-odd thread-alt depth-1" id="comment-1099933">
				<div id="div-comment-1099933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/jader3rd' rel='external nofollow' class='url'>jader3rd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1099933">
			January 16, 2014 at 8:57 am</a>		</div>

		<p>For the Cambridge example, how come only half of the values are getting corrupted? All of those values start with 0.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1099953">
				<div id="div-comment-1099953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Radix</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1099953">
			January 16, 2014 at 9:03 am</a>		</div>

		<p>jader3rd &#8211; because the rest have the digit &quot;8&quot; or &quot;9&quot; and thus can&#39;t be octal.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1099973">
				<div id="div-comment-1099973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1099973">
			January 16, 2014 at 9:03 am</a>		</div>

		<p>@jader3rd, because 8 and 9 aren&#39;t octal digits. &nbsp;02141 is a valid octal number; 02138 isn&#39;t. &nbsp;(See the ANSI C edition of K&amp;R: &quot;everybody&#39;s favorite trivial change: &nbsp;8 and 9 are no longer octal digits.&quot;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100003">
				<div id="div-comment-1100003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100003">
			January 16, 2014 at 9:49 am</a>		</div>

		<p>@Dezgeg:</p>
<p>If you don&#39;t mind the fact that GCC will give you names you&#39;ll have to &quot;demangle&quot; (that&#39;s not quite the right term as it&#39;s not name mangling in the usual sense), there&#39;s a simpler way to do that:</p>
<p>#include &lt;iostream&gt;</p>
<p>#include &lt;typeinfo&gt;</p>
<p>int main() {</p>
<p> &nbsp; &nbsp;std::cout &lt;&lt; 4294967295 &lt;&lt; &quot; &quot; &lt;&lt; typeid(4294967295).name() &lt;&lt; &quot;n&quot;;</p>
<p> &nbsp; &nbsp;std::cout &lt;&lt; 0xFFFFFFFF &lt;&lt; &quot; &quot; &lt;&lt; typeid(0xFFFFFFFF).name() &lt;&lt; &quot;n&quot;;</p>
<p> &nbsp; &nbsp;std::cout &lt;&lt; 037777777777 &lt;&lt; &quot; &quot; &lt;&lt; typeid(037777777777).name() &lt;&lt; &quot;n&quot;;</p>
<p>}</p>
<p>On MSVC 2010:</p>
<p>4294967295 unsigned long</p>
<p>4294967295 unsigned int</p>
<p>4294967295 unsigned int</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100013">
				<div id="div-comment-1100013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100013">
			January 16, 2014 at 10:26 am</a>		</div>

		<p>@Dezgeg: Another quirk of C/C++ is that unsuffixed decimal constants between 2^31 and 2^32 have a different type depending on the language flavor. &nbsp;In C89, they&#39;re &#39;unsigned int&#39;, but in C99/C++11 they&#39;re &#39;long&#39; or &#39;long long&#39;, and they&#39;re technically undefined behavior in C++03, assuming 32-bit longs (C++03 §2.13.1/2).</p>
<p>See this question <a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/18706859/why-this-is-undefined-behavior">stackoverflow.com/&#8230;/why-this-is-undefined-behavior</a> for an interesting example of how this breaking change can introduce silent logic errors when compiling code for C89 vs. C99.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100023">
				<div id="div-comment-1100023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100023">
			January 16, 2014 at 11:24 am</a>		</div>

		<p>@voo: but C# does not have octal literals.</p>
<p>System.Console.WriteLine(12==012);</p>
<p>produces True.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100033">
				<div id="div-comment-1100033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MHotchin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100033">
			January 16, 2014 at 11:26 am</a>		</div>

		<p>I got bit with this as well. &nbsp;I ended up doing stuff like the following if there was ever a situation where I had to do math on something that might look like it was Octal:</p>
<p>rem Minutes may have a leading zero, and hense look like an octal constant</p>
<p>rem Extract the Minutes (this works)</p>
<p>for /F &quot;usebackq&quot; %%i in (`echotime /M /N`) do set MINUTES=%%i</p>
<p>rem See if math fails on it. &nbsp;If so, assume octal stupidity is the problem.</p>
<p>set /A MINUTES=%MINUTES%</p>
<p>if ERRORLEVEL 1 set /A MINUTES=%MINUTES:~-1%</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100043">
				<div id="div-comment-1100043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Curran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100043">
			January 16, 2014 at 11:36 am</a>		</div>

		<p>OK, I&#39;m a bit confused here.</p>
<p>We&#39;ve have established in the Postal code example, that numbers with a leading 0 but WITHOUT a 8 or 9 are considered octal, but numbers with a leading 0 and WITH a 8 or 9 are considered decimal.</p>
<p>In that case, why is the date (1st half/2nd half) example failing? &nbsp;We are treating the bad octals as decimals, exactly like we want to.</p>
<div class="post">[<em>The LEQ operator fails to convert both sides to numbers, so it falls back to a <span style="text-decoration:underline;">string</span> comparison. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100053">
				<div id="div-comment-1100053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kzinti</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100053">
			January 16, 2014 at 11:44 am</a>		</div>

		<p>They aren&#39;t treated as decimal numbers, they are treated as invalid octal numbers. If you wanted them to be treated as decimal numbers, you would have to remove the leading 0.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100063">
				<div id="div-comment-1100063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MHotchin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100063">
			January 16, 2014 at 11:45 am</a>		</div>

		<p>@James Curran</p>
<p>I would think the behavior on &#39;bad&#39; octal constants is heavily language dependent. &nbsp;JavaScript vs CMD, in this case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100073">
				<div id="div-comment-1100073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100073">
			January 16, 2014 at 12:18 pm</a>		</div>

		<p>@Paul Baker:</p>
<p>Exactly. Programmers / schema designers need to ask themselves this question before they make a field an integer: Will I do arithmetic operations or comparisons against this value? &nbsp;If not then it&#39;s a string, not a number.</p>
<p>Social security numbers, phone numbers, zip codes, parcel tracking numbers&#8230; none of these should be stored as actual numbers. &nbsp;And as much as I love seeing my phone number printed as 8.0159E9, so many problems could so easily be avoided.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100093">
				<div id="div-comment-1100093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100093">
			January 16, 2014 at 1:34 pm</a>		</div>

		<p>@ch: That&#39;s all well and fine, but now please remember how many command-line utils (including ping, traceroute, etc.) were written in C, and used inet_addr for converting the text string to IP-address. And as for why inet_addr recognizes octal and hex numbers — I have no idea.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100103">
				<div id="div-comment-1100103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100103">
			January 16, 2014 at 2:06 pm</a>		</div>

		<p>Yeah, echoing what others have said&#8230; just because a value consists of numeric digits, doesn&#39;t mean it&#39;s a number. If it doesn&#39;t make sense to (e.g) increment it by one, what you&#39;re dealing with probably should be a string.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100113">
				<div id="div-comment-1100113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100113">
			January 16, 2014 at 3:24 pm</a>		</div>

		<p>&gt; [reviewer] Change %03d to %3d, because %03d will print the result in octal.</p>
<p>I bet there was once a time when &quot;printf format specifications&quot; was one of the most popular MSDN pages. Anyways for some reason the joke had me thinking a reviewer might red out the whole statement with a comment about leading %&#39;s representing binary constants. I had to google to see what language I was remembering or if I was on crack. Turns out it was Pascal (at least the implementation I used very early in school).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1099873">
				<div id="div-comment-1099873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1099873">
			January 16, 2014 at 7:39 am</a>		</div>

		<p>The *only* good use for octal constants in this day and age is for the mode parameter of chmod.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100123">
				<div id="div-comment-1100123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100123">
			January 16, 2014 at 4:06 pm</a>		</div>

		<p>I wish that C/C++ had &quot;0d&quot; and &quot;0b&quot; as prefixes akin to &quot;0x&quot; to mean decimal and binary, respectively. &nbsp;Then you could have tables of decimal values with leading zeros for convenience, and the rule about octal wouldn&#39;t be so bad. &nbsp;I&#39;d also have &quot;0o&quot; work as a prefix for octal for parity, not that it&#39;s really needed.</p>
<p>C++11&#39;s custom literal thing only works for suffixes, but it does let you do things like &quot;11011110101011011011111011101111&quot;_b. &nbsp;Unfortunately, Visual Studio 2013 is still behind the other major compilers and doesn&#39;t support that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt thread-odd thread-alt depth-1" id="comment-1100133">
				<div id="div-comment-1100133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100133">
			January 16, 2014 at 4:23 pm</a>		</div>

		<p>Fortunately, this can be avoided in a strongly-typed language. But I didn&#39;t know about octal myself.</p>
<p>There is an error in: &quot;8008 processor, which led to the 8080, which led to the 8086, which led to the x86 [sic], which led to the x64.&quot; &quot;x86&quot;is an error. (All of these are instances of x86.) Should be &quot;i386&quot;. Perhaps one day, Mr. Chen, you should write an article on how &quot;x86&quot; by mistake begun to mean &quot;pre-x64 only&quot; in Microsoft terminology. (I imagine Microsoft marketting one day started to tag &quot;x86&quot; to products to mean &quot;they run on a diverse range of x86 processors, not just x64&quot; but something went wrong along they, as with WOW64 and such.)</p>
<div class="post">[<em>Is there a strongly-typed language that treats decimal, octal, and hex constants as incompatible types? (And I acknowledge your nitpick.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1099963">
				<div id="div-comment-1099963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dezgeg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1099963">
			January 16, 2014 at 9:03 am</a>		</div>

		<p>@Mike, another fun fact: The type of an integer literal in C++ (maybe C too, haven&#39;t read that spec recently) can actually change depending on the base of the literal. The difference is that an octal or hex literal will never have type &#39;signed long&#39; or &#39;signed long long&#39;.</p>
<p>For example: </p>
<p>#include &lt;iostream&gt;</p>
<p>template&lt;typename T&gt; const char* typeof(T v) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{ return &quot;unknown&quot;; }</p>
<p>template&lt;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const char* typeof&lt;long&gt;(long v) &nbsp; &nbsp; &nbsp; &nbsp; { return &quot;long&quot;; }</p>
<p>template&lt;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const char* typeof&lt;unsigned&gt;(unsigned v) { return &quot;unsigned&quot;; }</p>
<p>int main()</p>
<p>{</p>
<p> &nbsp; &nbsp;std::cout &lt;&lt; 4294967295 &nbsp; &lt;&lt; &quot; &quot; &lt;&lt; typeof(4294967295) &nbsp; &lt;&lt; std::endl;</p>
<p> &nbsp; &nbsp;std::cout &lt;&lt; 0xFFFFFFFF &nbsp; &lt;&lt; &quot; &quot; &lt;&lt; typeof(0xFFFFFFFF) &nbsp; &lt;&lt; std::endl;</p>
<p> &nbsp; &nbsp;std::cout &lt;&lt; 037777777777 &lt;&lt; &quot; &quot; &lt;&lt; typeof(037777777777) &lt;&lt; std::endl;</p>
<p>}</p>
<p>On AMD64 Linux GCC this prints:</p>
<p>4294967295 long</p>
<p>4294967295 unsigned</p>
<p>4294967295 unsigned</p>
<p>Now, this doesn&#39;t affect the literal zero, but yet another subtle cornercase in C++.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100153">
				<div id="div-comment-1100153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tocsa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100153">
			January 16, 2014 at 5:04 pm</a>		</div>

		<p>This reminded me a lightning talk titled &quot;WAT&quot;, very well worth watching. One of the funniest talks I&#39;ve ever seen (one day I want to make it to CodeMash): <a rel="nofollow" target="_new" href="https://www.destroyallsoftware.com/talks/wat">http://www.destroyallsoftware.com/&#8230;/wat</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1099993">
				<div id="div-comment-1099993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1099993">
			January 16, 2014 at 9:08 am</a>		</div>

		<p>@lucidfox: Just imagine if it didn&#39;t &#8211; talk about unexpected behavior. </p>
<p>One of the things where Java (and evil tongues would say as a consequence C#..) followed C too closely sadly. It *does* make sense in C to have octal numbers (well not sure we&#39;d really need it these days), but in a high level language you wouldn&#39;t/shouldn&#39;t set permissions using magic constants anyhow.</p>
<p>One of the things that python removed with the 2-&gt;3 transition, btw: </p>
<p>&gt;&gt;&gt; x = 03</p>
<p> &nbsp;File &quot;&lt;stdin&gt;&quot;, line 1</p>
<p> &nbsp; &nbsp;x = 03</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; ^</p>
<p>SyntaxError: invalid token</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100083">
				<div id="div-comment-1100083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ch</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100083">
			January 16, 2014 at 12:59 pm</a>		</div>

		<p>@SimonRev</p>
<p>Your firmware was right. The official spec for IP has *never* required octal and various documents either implicitly or explicitly forbid it. For example, RFC 790 contains lots of IP addresses written in decimal with leading zeroes. Various other RFCs which contain grammars as part of their protocol definitions permit only four decimal numbers separated by dots (i.e. excluding both octal/hex and the silly notation whereby fewer dots mean that the last number is 16, 24, or 32 bits).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100163">
				<div id="div-comment-1100163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark VY</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100163">
			January 16, 2014 at 9:31 pm</a>		</div>

		<p>@Myria: In Python, 0o10 == 8. &nbsp;Maybe other languages too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100173">
				<div id="div-comment-1100173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Engywuck</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100173">
			January 16, 2014 at 11:11 pm</a>		</div>

		<p>Fleet Command: well, x86 is not quite a superset of x64. A processor in x64-mode can execute 32bit and 64bit programs, but no longer 16bit. So x64 is an evolutionary step beyond what &quot;x86&quot; (or &quot;80&#215;86&quot;) meant for quite a long time before &quot;x64&quot; was a dream :-)</p>
<p>(besides: x64 is incorrect, there never was a processor line &quot;80&#215;64&quot; or so, but intel didn&#39;t like that everyone used &quot;amd64&quot; :-))</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100183">
				<div id="div-comment-1100183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100183">
			January 17, 2014 at 12:48 am</a>		</div>

		<p>Engywuck: I thought &quot;x64&quot; was just an abbreviation of &quot;x86-64&quot;. MS had to come up with a name for it before AMD officially named it AMD64, so you can&#39;t expect the names to match.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100193">
				<div id="div-comment-1100193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100193">
			January 17, 2014 at 1:33 am</a>		</div>

		<p>Gabe: No the story is opposite, Microsoft came up with the vendor-neutral &quot;x64&quot; later. Parts of Windows still call it &quot;amd64&quot;. The problem was AMD&#39;s name was too vendor-specific, there was no way Intel was going to call their products &quot;Intel AMD64 processor&quot;</p>
<p>Nicholas: with your criteria, your examples would be be stored as numbers. Tracking numbers contain checksums. A certain type of USPS mail is specified as having a barcode &quot;8982 5000 0000 and higher&quot;. Social Security numbers also have numeric validation rules. If you&#39;re sorting mail, you&#39;re sorting by ranges of Zip codes. At the very least, if you have a numeric piece of data, you need to issue them in sequence, such as how telephone numbers are issued in contiguous blocks to companies.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100203">
				<div id="div-comment-1100203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100203">
			January 17, 2014 at 3:01 am</a>		</div>

		<p>@lucidfox parseInt(&quot;010&quot;) == 8 in Firefox 20 and earlier, 10 in Firefox 21 and later. See <a rel="nofollow" target="_new" href="https://developer.mozilla.org/en-US/Firefox/Releases/21#JavaScript">developer.mozilla.org/&#8230;/21</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100223">
				<div id="div-comment-1100223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100223">
			January 17, 2014 at 5:23 am</a>		</div>

		<p>I&#39;m a web developer so usually most of your technical posts about Windows development go over my head but I was quite pleased to read your latest article and recognise what the problem was before you explained it for the first time :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command even thread-even depth-1" id="comment-1100233">
				<div id="div-comment-1100233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100233">
			January 17, 2014 at 5:25 am</a>		</div>

		<p>@Engywuck: Etymology is not really my favorite subject. For whatever reason (right or wrong) &quot;x86&quot; now refers to the architecture of the entire range of CPUs from 8086 to Core i7. Both i386 and x64 are part of that. Occasionally, I have confused people disputing statements about x86 variants of Windows Server supporting more than 4 GB of memory because of the same 32-bit-esque technical misconception.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100243">
				<div id="div-comment-1100243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tcl me elmo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100243">
			January 17, 2014 at 5:54 am</a>		</div>

		<p>The other day I saw a notice of the 25th birthday of Tcl, and now I remember that it had gotchas involved with 08 and 09&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100263">
				<div id="div-comment-1100263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100263">
			January 17, 2014 at 7:20 am</a>		</div>

		<p>@Fleet Command: Well as far as I can see &quot;x86&quot; is not authorative anyhow &#8211; Intel at least uses IA-32, respectively Intel 64 for their architectures.</p>
<p>I would agree that &quot;x86&quot; generally refers to the entire architecture, but if accuracy was important, staying far away from those non-official terms seems the best solution.</p>
<p>@Azarien: Mea culpa. Great that the C# team broke this bad design decision!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1100313">
				<div id="div-comment-1100313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100313">
			January 17, 2014 at 7:48 am</a>		</div>

		<p>This is why I always type postal codes as strings. As a side effect it is much easier to extend the system to Canada, where postal codes have letters in them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100323">
				<div id="div-comment-1100323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100323">
			January 17, 2014 at 7:58 am</a>		</div>

		<p>@Fleet Command &quot;&quot;x86&quot;is an error. (All of these are instances of x86.) Should be &quot;i386&quot;. &quot;</p>
<p>Did you forget about the 80186/8 and the &#39;286? :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100353">
				<div id="div-comment-1100353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KenW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100353">
			January 17, 2014 at 9:03 am</a>		</div>

		<p>@FleetCommand: &#39;x86&#39; was coined to represent the 80186/80286/80386/80486 (and briefly the 80586, more correctly Pentium) processor evolution, and as such it was correct IMO.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100393">
				<div id="div-comment-1100393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100393">
			January 17, 2014 at 11:57 am</a>		</div>

		<p>@Jon:</p>
<p>Yes, some &quot;numbers&quot; contain checksums (for example, credit card numbers). &nbsp;If you want to validate a value with a checksum or do some numeric comparison then you&#39;re better off converting the string to a number (using whatever special rules apply for that specific piece of data) and then performing the operation.</p>
<p>Postal codes: international codes (including Canada) often contain letters. &nbsp;Oops.</p>
<p>Tracking numbers: some carrier codes (including UPS) contain letters. &nbsp;Oops.</p>
<p>US Social Security Number: there is some validation &nbsp;you can do, but it is against the individual parts of the SSN. &nbsp;It is a lot simpler to extract the Area Number (first three characters) from string(&quot;1234567890&quot;) than it is from uint(1234567890).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100213">
				<div id="div-comment-1100213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Engywuck</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100213">
			January 17, 2014 at 4:42 am</a>		</div>

		<p>Jon: As long as &quot;0123456789&quot; are in this order in your locale you can sort your zip codes by string as well as numeric. Perhaps even better as string, since you don&#39;t have to &quot;retrofit&quot; leading zeros and can just jeck for stringlength &#8211; and you won&#39;t have to use mathematical operations like &quot;take cubic root of zip code&quot;. Same for the UPS barcode etc.</p>
<p>If you want to do checksums you better convert by the checksumming function to &quot;numeric&quot; and back. See for example the old ISBN &quot;numbers&quot; &#8211; the checksum is built by doing &quot;modulo 11&quot;, and if the result was &quot;10&quot; you&#39;d add an &quot;X&quot;. Yes, the character. </p>
<p>Also assuming that zip codes are always numeric *may* work, if you are *sure* you don&#39;t plan to go international &#8211; and even then there are pitfalls. Both germanies before unification hat PLZ (Postleitzahlen, sort of like ZIP codes) which were four numeric characters and the post used the characters from left to right for sorting purposes (i.e. 7xxx was southwest germany in the BRD). After unification quite a few cities had the same code assigned, so for a time you had to say &quot;O-3214&quot; or &quot;W-3214&quot;. So suddenly you had to have support for a longer PLZ &#8211; one non-numeric. Since 1993 it&#39;s five numeric characters &#8211; including possible leading zeros: 01001 is (part of) Dresden</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command even thread-even depth-1" id="comment-1100433">
				<div id="div-comment-1100433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100433">
			January 17, 2014 at 3:18 pm</a>		</div>

		<p>@Mr. Chen: Your question adds a &quot;that&quot; clause that I did not intend. There are strongly-typed languages with which you&#39;d never have this problem, but not through incompatibility between numeric types. (Indeed, they are saved in memory in a rather standard binary format.) Can I name them or is there a &quot;name no names&quot; rule on this too?</p>
<div class="post">[<em>Go ahead and name a language where decimal constants are incompatible with octal or hex constants. (Technically, C is one such language, because decimal constants are signed but octal and hex constants are unsigned, but since C allows implicit conversion in the overlapping domain, the types are compatible in the affected domain.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100453">
				<div id="div-comment-1100453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100453">
			January 17, 2014 at 4:20 pm</a>		</div>

		<p>@ Nicholas: Having a data format be numbers lends to numeric sorting. You are comparing apples with oranges. USPS zip codes: 0-4 are East of the Mississippi. Now compare that to French postal codes. Does such an ordering exist? Apparently not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-michael-fitzpatrick even thread-even depth-1" id="comment-1100413">
				<div id="div-comment-1100413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Michael+Fitzpatrick' rel='external nofollow' class='url'>Michael Fitzpatrick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100413">
			January 17, 2014 at 1:15 pm</a>		</div>

		<p>When using the %DATE% env var you&#39;ll run into problems if the regional settings are changed. For example, I like to set the date to &quot;yyyy-MM-dd&quot; so this is what I get:</p>
<p> &nbsp;C:&gt;echo %DATE%</p>
<p> &nbsp;2014-01-17</p>
<p>Here&#39;s a better way to get the date in a bat file:</p>
<p>:: Use WMIC to retrieve date and time</p>
<p>FOR /F &quot;skip=1 tokens=1-6&quot; %%A IN (&#39;WMIC Path Win32_LocalTime Get Day^,Hour^,Minute^,Month^,Second^,Year /Format:table&#39;) DO (</p>
<p>	IF NOT &quot;%%~F&quot;==&quot;&quot; (</p>
<p>		SET /A SortDate = 10000 * %%F + 100 * %%D + %%A</p>
<p>		set YEAR=!SortDate:~0,4!</p>
<p>		set MON=!SortDate:~4,2!</p>
<p>		set DAY=!SortDate:~6,2!</p>
<p>		REM Add 1000000 so as to force a prepended 0 if hours less than 10</p>
<p>		SET /A SortTime = 1000000 + 10000 * %%B + 100 * %%C + %%E</p>
<p>		set HOUR=!SortTime:~1,2!</p>
<p>		set MIN=!SortTime:~3,2!</p>
<p>		set SEC=!SortTime:~5,2!</p>
<p>	)</p>
<p>)</p>
<p>Of course this is missing the point about radix notation&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt thread-odd thread-alt depth-1" id="comment-1100463">
				<div id="div-comment-1100463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100463">
			January 17, 2014 at 5:59 pm</a>		</div>

		<p>&quot;Go ahead and name a language where decimal constants are incompatible with octal or hex constants.&quot;</p>
<p>@Mr. Chen: For the second time, I did not say such a thing. What I said is &quot;this can be avoided in a strongly-typed language.&quot; In Delphi, you&#39;d not have this problem because it either interprets one parameter as hexadecimal or decimal. It is one of the following:</p>
<p>* &quot;10&quot; = 10, &quot;010&quot; = 10, &quot;$10&quot; = (Exception)</p>
<p>* &quot;10&quot; = 16, &quot;A&quot; = 10, &quot;$10&quot; = 16, &quot;$A&quot; = 10, &quot;$010&quot; = 16, &quot;$0A&quot; = 10</p>
<div class="post">[<em>I&#39;m countering that if it&#39;s such a good idea, why hasn&#39;t anybody done it? Or are you saying, &quot;This could theoretically be done&quot;? But nobody would write in such a language because really do you want to have to say &quot;<code>int32_decimal_t x = 1; int32_hex_t y = 0x10; x = (int32_decimal_t)y;&quot;? (Would </code><code>int32_decimal_t</code> mean that it is a 32-digit BCD value?) What&#39;s the point of suggesting something that nobody would use? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command even thread-even depth-1" id="comment-1100533">
				<div id="div-comment-1100533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100533">
			January 18, 2014 at 4:38 pm</a>		</div>

		<p>@Mr. Chen: <a rel="nofollow" target="_new" href="https://en.wikipedia.org/wiki/Straw_man">en.wikipedia.org/&#8230;/Straw_man</a></p>
<p>Maybe you should review my past messages and read what I actually said; and while you are doing it, put everything you know about Microsoft-style C++ programming aside. There is a world outside Microsoft&#39;s scope in which things are done differently.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100553">
				<div id="div-comment-1100553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100553">
			January 19, 2014 at 1:34 am</a>		</div>

		<p>@Fleet Command. Sorry, but you do not make any sense. You speak of strongly TYPED languages. For this to matter hex/octal/decimal constants must have different TYPES. You speak of Delphi. In Delphi it doesn&#39;t matter if you write $10 or 16, it&#39;s the same value and it has the same type. You just don&#39;t have the same problem in Delphi because it doesn&#39;t use the octal notation, but it has nothing to do with it being a strongly typed language or not. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command even thread-even depth-1" id="comment-1100563">
				<div id="div-comment-1100563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100563">
			January 19, 2014 at 7:15 am</a>		</div>

		<p>@Marcel: Is that the source of the confusion? Wow!</p>
<p>Let me clarify. Batch file is not a strongly-typed language. Strings and numbers don&#39;t have different explicit types. C++ and Delphi are both strongly-typed languages because you explicitly define types in them and conversion from string to number requires parsing. Hence, you can tell your parser to convert only to decimal and perform type-checking and criteria-checking. (Hell, I even added an example to that effect above.)</p>
<p>But how did you guys interpret &quot;this can be avoided in a strongly-typed language&quot; into &quot;hex/octal/decimal constants must have different TYPES&quot;, I don&#39;t know. Did you guys even read the blog post? Seriously, you guys should read more of what is actually written and less of what is not written.</p>
<div class="post">[<em>C also has this problem: <code>int x[] = { 001, 010, 100 };</code>. So it is apparently not strongly-typed enough. Is there a language that <span style="text-decoration:underline;">is</span> strongly-typed enough to detect this error? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100573">
				<div id="div-comment-1100573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100573">
			January 19, 2014 at 8:20 am</a>		</div>

		<p>[Is there a strongly-typed language that treats decimal, octal, and hex constants as incompatible types?]</p>
<p>I could swear I&#39;ve seen such a language, and it looked like a pain to work with. As much a merely a leading 0 for octal is strangely dangerous these days, strong-typing to clear this is not sane.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100593">
				<div id="div-comment-1100593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100593">
			January 19, 2014 at 11:08 am</a>		</div>

		<p>@Jon: MS are still using the AMD64 as an official name of x86_64, haven&#39;t stopped using it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-andycadley2 odd alt thread-odd thread-alt depth-1" id="comment-1100583">
				<div id="div-comment-1100583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100583">
			January 19, 2014 at 8:29 am</a>		</div>

		<p>@Fleet Command: The problem is that even in strongly typed languages like C++ or C#, 10 != 010 &#8211; adding that leading zero changes the *value* of the constant, but it doesn&#39;t change the *type*. Unless you made Octal and Hex constants have a different *type* then you can&#39;t avoid this in languages which choose to use 0 as the prefix for Octal constants. Now the problem could&#39;ve been avoided if C or any of the C-like languages which have followed had done something sensible and used, e.g. %10 to mean Octal 10 but, alas, none of them have done that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command even thread-even depth-1" id="comment-1100623">
				<div id="div-comment-1100623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100623">
			January 19, 2014 at 4:30 pm</a>		</div>

		<p>@AndyCadley: Well said. But &quot;010&quot; in is a string. You can convert it to 10 if you wanted to. (Just call the correct conversion function.) No such luxury with batch files, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100683">
				<div id="div-comment-1100683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100683">
			January 20, 2014 at 7:23 am</a>		</div>

		<p>@Fleet Command: So what you actually propose is to instead of</p>
<p>i = 011;</p>
<p>i = 11;</p>
<p>i = 0x11;</p>
<p>use</p>
<p>i = fleetcommand::tonumber&lt;int&gt;(&quot;11&quot;, 8); // i == 9</p>
<p>i = fleetcommand::tonumber&lt;int&gt;(&quot;11&quot;, 10); // i == 11</p>
<p>i = fleetcommand::tonumber&lt;int&gt;(&quot;11&quot;, 16); // i == 17</p>
<p>?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100853">
				<div id="div-comment-1100853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100853">
			January 20, 2014 at 11:02 am</a>		</div>

		<p>@Joker_vD: I&#39;m pretty sure he&#39;s actually proposing: </p>
<p>i = fleetcommand::numberfrombinary(&quot;11&quot;)</p>
<p>i = fleetcommand::numberfromoctal(&quot;11&quot;)</p>
<p>i = fleetcommand::numberfromdecimal(&quot;11&quot;)</p>
<p>i = fleetcommand::numberfromhexidecimal(&quot;11&quot;)</p>
<p>and probably no others exist.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt thread-odd thread-alt depth-1" id="comment-1100963">
				<div id="div-comment-1100963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100963">
			January 20, 2014 at 6:45 pm</a>		</div>

		<p>Since there are already such functions in existence, I am not proposing anything. Thanks God, they are not part of a class called &quot;fleetcommand&quot;! I won&#39;t use a language that has a &quot;fleetcommand&quot; class! (:LOL:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100973">
				<div id="div-comment-1100973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100973">
			January 20, 2014 at 7:16 pm</a>		</div>

		<p>StrToInt function:</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb773446%28v=vs.85%29.aspx">msdn.microsoft.com/&#8230;/bb773446%28v=vs.85%29.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100983">
				<div id="div-comment-1100983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140116-00/?p=2063#comment-1100983">
			January 20, 2014 at 7:24 pm</a>		</div>

		<p>@Fleet Command: I actually thought about a namespace. Okay, let me write class &quot;fleetcommand&quot; in Delphi so you can stop using it, will you?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

