<html>
<head>
<title>What did MakeProcInstance do?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What did MakeProcInstance do?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 7, 2008 / year-entry #44</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080207-00/?p=23533</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">MakeProcInstance doesn't do anything. #define MakeProcInstance(lpProc,hInstance) (lpProc) What's the point of a macro that doesn't do anything? It did something back in 16-bit Windows. Recall that in 16-bit Windows, the HINSTANCE was the mechanism for identifying a data segment; i.e., a bunch of memory that represents the set of variables in use by a module....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<code>MakeProcInstance</code> doesn't do anything.
</p>
<pre>
#define MakeProcInstance(lpProc,hInstance) (lpProc)
</pre>
<p>
What's the point of a macro that doesn't do anything?
</p>
<p>
It did something back in 16-bit Windows.
</p>
<p>
Recall that in 16-bit Windows, the <code>HINSTANCE</code>
was the mechanism for identifying a data segment;
i.e., a bunch of memory that represents the set of variables
in use by a module.
If you had two copies of Notepad running, there was one copy of
the code but two sets of variables (one for each copy).
It is the second set of variables that establishes the second
copy of Notepad.
</p>
<p>
When you set up a callback function, such as a window procedure,
the callback function needs to know which set of variables it's
being called for.
For example, if one copy of Notepad calls
<code>EnumFonts</code> and passes a callback function,
the function needs to know which copy of Notepad it is running in
so that it can access the correct set of variables.
That's what the <code>MakeProcInstance</code> function was for.
</p>
<p>
The parameters to <code>MakeProcInstance</code> are a function pointer
and an instance handle.
the <code>MakeProcInstance</code> function generated code on the fly
which set the data segment register equal to the
instance handle and then jumped to the original function pointer.
The return value of <code>MakeProcInstance</code> is a pointer to that
dynamically-generated code fragment
(known as a <i>thunk</i>),
and you used that code fragment as the function pointer whenever
you needed another function to call you back.
That way, when your function was called, its variables were properly
set up.
When you no longer needed the code fragment,
you freed it with the <code>FreeProcInstance</code> function.
</p>
<p>
Those who have worked with ATL have seen this sort of code fragment
generation already in the <code>CStdCallThunk</code> class.
The operation is entirely analogous with <code>MakeProcInstance</code>.
You initialize the <code>CStdCallThunk</code> with a function pointer
and a <code>this</code> parameter, and it generates code on the fly
which converts a static function into a C++ member function
by setting the <code>this</code> pointer before calling the function
you used to initialize the thunk.
</p>
<p>
The creation of these code fragments on 16-bit Windows had to be
done by the kernel because the 8086 processor did not have
a memory management unit.
There was no indirection through a translation table;
all addresses were physical.
As a result, if the memory manager had to move memory around,
it also had to know where all the references to the moved memory
were kept so it can update the pointers.
If a data segment moved, the kernel had to go fix up all the
<code>MakeProcInstance</code> thunks so that they used the new
instance handle instead of the old one.
</p>
<p>
It was
<a HREF="http://mg.to/">
Michael Geary</a>
who discovered that all this
<code>MakeProcInstance</code> work was unnecessary.
If the callback function resided in a DLL,
then the function could hard-code its instance handle
and just load it at the start of the function;
this technique ultimately became known as <i>__loadds</i>.
Since DLLs were single-instance, the DLL already knew
which set of variables it was supposed to use since there
was only one set of DLL variables to begin with!
(Of course, the hard-coded value had to be recorded as a fix-up
since the instance handle is determined at run time.
Plus the kernel needed to know which values to update if the instance
handle changed values.)
On the other hand, if the callback function resided in an executable,
then it could obtain its instance handle from the stack selector;
this technique ultimately became known as <i>__export</i>.
Each program ran on a single stack (no multi-threading here),
and the stack, data segment, and local heap all resided in the same
selector by convention.
And in a strange bit of coming full circle which I discovered as I wrote
up this reminiscence,
Michael Geary's copy of
<a HREF="http://www.geary.com/fixds.html">
the original readme for his FixDS program that brought this technique
to the public</a> contains an introduction which links back to me...</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-599093">
				<div id="div-comment-599093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080207-00/?p=23533#comment-599093">
			February 7, 2008 at 12:17 pm</a>		</div>

		<p>In DOS, there were lots of different segment models (tiny, small, medium, large, huge). Maybe Windows standardized on SS==DS after MakeProcInstance was created, or the design was trying to leave open the possibility of supporting the large/huge memory models? It&#8217;s all a distant nightmare and I try not to think about it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-599123">
				<div id="div-comment-599123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hito</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080207-00/?p=23533#comment-599123">
			February 7, 2008 at 1:05 pm</a>		</div>

		<p>I&#8217;m glad I hadn&#8217;t write code in such old days.</p>
<p>I didn&#8217;t even know what MakeProcInstance is or it exist.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-599203">
				<div id="div-comment-599203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RaduS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080207-00/?p=23533#comment-599203">
			February 7, 2008 at 5:36 pm</a>		</div>

		<p>I seem to remember there were some special cases where callbacks were being called with a SS of a different &quot;process&quot;, so care had to be taken in those cases not to use the too smart methods.</p>
<p>One of those callbacks was a notification fired when a particular block of memory was discarded; it was being called with the SS of the process that allocated some memory and forced the discarding..</p>
<p>Lots of fun..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-599213">
				<div id="div-comment-599213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080207-00/?p=23533#comment-599213">
			February 7, 2008 at 5:47 pm</a>		</div>

		<p>I&#8217;d like to call those the &quot;good ol&#8217; days&quot;, but in many ways Win 3.x programming was a pain in the butt (where 3.1 was light years better than 3.0 due its much stronger API parameter checking in the debug build). It was not particularly forgiving (eg BSODs, UAEs, and the need to regularly reinstall the O/S etc).</p>
<p>You wouldn&#8217;t recognise the compiler/IDE scene if you have only used recent versions of Visual Studio. Microsoft&#8217;s IDE was&#8230; well you wouldn&#8217;t, if you could use the alternative (can I say Borland?).</p>
<p>And they came with manuals! API documentation in paper &#8212; the best way to learn the API, flick through it while waiting for a compile to grind its way through.</p>
<p>The coolest things about those days, sadly no longer supported, was the ability to have a 2nd monitor plugged in, generally run off a Hercules card. I kind of miss the soft amber (or green) phospher glow of a text-only monitor.</p>
<p>So if any of you youngsters hear an old fart talk about how much better it was programming for Win3.x. Ignore them. They&#8217;re lying.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-599243">
				<div id="div-comment-599243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080207-00/?p=23533#comment-599243">
			February 7, 2008 at 6:14 pm</a>		</div>

		<p>Which reminds me&#8230;</p>
<p>Why do DLLs have a &quot;preferred&quot; load address? &nbsp;</p>
<p>Why can&#8217;t each DLL just be loaded into the next contiguous block of virtual memory that&#8217;s big enough for it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-599253">
				<div id="div-comment-599253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080207-00/?p=23533#comment-599253">
			February 7, 2008 at 6:19 pm</a>		</div>

		<p>That&#8217;s a really interesting link of Michael Geary&#8217;s that you pointed to. &nbsp;Fascinating stuff.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-599283">
				<div id="div-comment-599283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080207-00/?p=23533#comment-599283">
			February 7, 2008 at 6:28 pm</a>		</div>

		<p>@Dave: &quot;Maybe Windows standardized on SS==DS after MakeProcInstance was created, or the design was trying to leave open the possibility of supporting the large/huge memory models?&quot;</p>
<p>As I recall, the large &amp; huge models were supported. &nbsp;However, even MakeProcInstance couldn&#8217;t support them fully (how does it know <em>which</em> data segment to load?), so the general rule was that applications with those memory models forewent the standard function prolog code and loaded their own DS values, thus requiring them to only allow one instance to run at a time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-599293">
				<div id="div-comment-599293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080207-00/?p=23533#comment-599293">
			February 7, 2008 at 6:29 pm</a>		</div>

		<blockquote><p>
  this technique ultimately became known as __export.
</p></blockquote>
<p>__export was originally for DLLs who want to export functions, not for this.</p>
<blockquote><p>
  If the callback function resided in a DLL, then the function could hard-code its instance handle and just load it at the start of the function; this technique ultimately became known as __loadds.
</p></blockquote>
<p>I think that was before FixDS.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-599303">
				<div id="div-comment-599303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080207-00/?p=23533#comment-599303">
			February 7, 2008 at 6:33 pm</a>		</div>

		<p>@David Walker: &quot;Why do DLLs have a &quot;preferred&quot; load address? &nbsp;Why can&#8217;t each DLL just be loaded into the next contiguous block of virtual memory that&#8217;s big enough for it?&quot;</p>
<p>It&#8217;s an optimization. &nbsp;Applications are linked against the DLLs with the assumption they&#8217;ll be loaded at their preferred address. &nbsp;That way, if the preferred address is available, no extra work is required at load time. &nbsp; &nbsp; It also means pages with imported addresses stored in them can be reloaded from the executable file, rather than needing to be flushed to the paging file, if they need to be paged out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-599313">
				<div id="div-comment-599313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080207-00/?p=23533#comment-599313">
			February 7, 2008 at 6:44 pm</a>		</div>

		<p>What would world be like if DLLs didn&#8217;t exist?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-599353">
				<div id="div-comment-599353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080207-00/?p=23533#comment-599353">
			February 7, 2008 at 7:53 pm</a>		</div>

		<blockquote><p>
  Applications are linked against the DLLs with the assumption they&#8217;ll be loaded at their preferred address.
</p></blockquote>
<p>BTW, DOS EXEs work in a similar way, only that the preferred address is 0000:0000. DOS EXEs have a fixup table that fixes up segment values to reflect the new base address.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-599363">
				<div id="div-comment-599363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">oj</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080207-00/?p=23533#comment-599363">
			February 7, 2008 at 8:50 pm</a>		</div>

		<p>Like the current definition of MakeProcInstance, this posting is&#8230; pointless!</p>
<p>Thanks for reminding us old-timers how 80% of our careers in this industry have been learning about stuff that became totally obsolete.</p>
<p>I guess with the future as bleak as it is for the WinUser team, you might as well just endulge in nostalgia. Ah, glory days! (&#8230;ignoring the trail of nasty legacies they left for us along the way, that is!).</p>
<p>.manifest</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-599373">
				<div id="div-comment-599373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mg.to/' rel='external nofollow' class='url'>Michael Geary</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080207-00/?p=23533#comment-599373">
			February 7, 2008 at 11:53 pm</a>		</div>

		<p>Raymond, thanks for the kind mention! This was truly a blast from the past.</p>
<p>You know, I had almost managed to forget MakeProcInstance and FixDS. Now it will be with me for another 20 years! :-)</p>
<p>@RaduS: &#8220;I seem to remember there were some special cases where callbacks were being called with a SS of a different &#8216;process&#8217;, so care had to be taken in those cases not to use the too smart methods.&#8221;</p>
<p>Probably true, but those weren&#8217;t an issue with FixDS. It was used only for ordinary application code where you were already relying on the fact that SS == DS, because you were compiling your code with a switch that said &#8220;Assume that SS == DS&#8221;. If you used that switch when SS and DS were not the same, your code was already broken. FixDS wouldn&#8217;t break it any worse. If it was safe to compile with that switch, then by definition it was also safe to use the FixDS technique.</p>
<p>Glad I&#8217;m coding in JavaScript, Ruby, and Python these days&#8230; :-) <a href="http://maps.google.com/decision2008" rel="nofollow">http://maps.google.com/decision2008</a> </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-599383">
				<div id="div-comment-599383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080207-00/?p=23533#comment-599383">
			February 8, 2008 at 10:47 am</a>		</div>

		<p>Loading each DLL at its preferred address, instead of loading them all contiguous to each other, means that virtual memory is fragmented. &nbsp;Not that that&#8217;s a bad thing necessarily. &nbsp;Perhaps it doesn&#8217;t matter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-599393">
				<div id="div-comment-599393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin Eshbach</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080207-00/?p=23533#comment-599393">
			February 8, 2008 at 11:34 am</a>		</div>

		<p>This is one skeleton in the closet that should have never been let out. &nbsp;Programming Win16 (and DOS) apps was a pain in the you know what. &nbsp;I&#8217;m glad those days are gone.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

