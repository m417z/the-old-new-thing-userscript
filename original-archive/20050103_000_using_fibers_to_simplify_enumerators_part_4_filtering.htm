<html>
<head>
<title>Using fibers to simplify enumerators, part 4: Filtering</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Using fibers to simplify enumerators, part 4: Filtering</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 3, 2005 / year-entry #1</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050103-00/?p=36823</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>1</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">One type of higher-order enumeration is filtering, where one enumerator takes the output of another enumerator and removes some elements. In a producer-driven enumerator, you would implement filtering by substituting a new callback function that responds to callbacks on behalf of the client for items that should be filtered, and forwarding callbacks to the client...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
One type of higher-order enumeration is filtering,
where one enumerator takes the output of another
enumerator and removes some elements.
</p>
<p>
In a producer-driven enumerator, you would implement filtering
by substituting a new callback function that responds to callbacks
on behalf of the client for items that should be filtered,
and forwarding callbacks to the client for items that are not filtered.
</p>
<p>
In a consumer-driven enumerator, you would implement composition
by wrapping the enumerator inside another enumerator
which drives the inner enumerator and forwards items that it
wishes the caller to see.
</p>
<p>
A fiber-based enumerator behaves more like a consumer-driven
enumerator, but,with easier state management.
</p>
<p>
Let's write a filter enumerator that removes all directories
and suppresses recursing into them.
</p>
<pre>
class FilteredEnumerator : public FiberEnumerator {
public:
 FilteredEnumerator(LPCTSTR pszDir) : m_e(pszDir) { }

 LPCTSTR GetCurDir()
    { return m_e.GetCurDir(); }
 LPCTSTR GetCurPath()
    { return m_e.GetCurPath(); }
 const WIN32_FIND_DATA* GetCurFindData()
    { return m_e.GetCurFindData(); }

private:
 void FiberProc();

private:
 DirectoryTreeEnumerator m_e;
};

void FilteredEnumerator::FiberProc()
{
 FEFOUND fef;
 while ((fef = m_e.Next()) != FEF_DONE) {
  FERESULT fer;
  if (fef == FEF_DIR) {
   fer = FER_SKIP; // don't recurse into directories
  } else {
   fer = Produce(fef);
  }
  m_e.SetResult(fer);
 }
}
</pre>
<p>
To produce items from this filtered enumerator,
we run the real enumerator (<code>m_e</code>)
and remove all directories, preventing them from
being propagated to the filter's consumer and
just responding "skip it" to the real enumerator.
</p>
<p>
You can test out this filtered enumerator with the
same <code>TestWalk</code> function we've been using
for the past few days.  The only change you'll need
to make is to the <code>main</code> function:
</p>
<pre>
int __cdecl main(int argc, char **argv)
{
 ConvertThreadToFiber(NULL);
 <font COLOR=blue>FilteredEnumerator e(TEXT("."));</font>
 TestWalk(&amp;e);
 ConvertFiberToThread();
 return 0;
}
</pre>
<p>
Observe that the program no longer recurses into
subdirectories.  It just tallies the sizes of the
files in the current directory.
</p>
<p>
Next time, composition.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (1)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-247863">
				<div id="div-comment-247863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.wisniewski-online.com/cs/blogs/wizzys_world/archive/2005/01/20/4.aspx' rel='external nofollow' class='url'>Wizzy's World</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050103-00/?p=36823#comment-247863">
			January 20, 2005 at 6:33 pm</a>		</div>

		<p>A while back there was an article in MSDN magazine about wrapping up the unmaged fibers API to implement&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

