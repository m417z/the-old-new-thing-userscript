<html>
<head>
<title>The case of the buffer overflow vulnerability that was neither a buffer overflow nor a vulnerability</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The case of the buffer overflow vulnerability that was neither a buffer overflow nor a vulnerability</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 7, 2018 / year-entry #278</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20181207-00/?p=100435</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Not quite knowing how assembly language works, I guess.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A security vulnerability report claimed to have found
a buffer overrun.
Their instructions were to perform a specific
sequence of operations in Explorer
while watching the output in the debugger:
</p>
<div STYLE="position: relative; width: 45em; background-color: white; color: #202020">
<pre>
pcshell\shell\explorer\something.cpp(80)\explorer.exe!00007FF813D017E2:
(caller: 00007FF813CB690C) ReturnHr(7) tid(b2c) 80070002 The system
cannot find the file specified
pcshell\shell\explorer\something.cpp(80)\explorer.exe!00007FF813D017E2:
(caller: 00007FF813CB690C) ReturnHr(8) tid(b2c) 80070002 The system
cannot find the file specified
pcshell\shell\explorer\something.cpp(80)\explorer.exe!00007FF813D017E2:
(caller: 00007FF813CB690C) ReturnHr(9) tid(b2c) 80070002 The system
cannot find the file specified
</pre>
<div STYLE="position: absolute; height: 100%; width: 100%; top: 0px; left: 0px;
background-image:
repeating-linear-gradient(-10deg, gray, transparent 4px, transparent 12px, gray 16px),
repeating-linear-gradient(80deg, #c0c0c0, transparent 8px, transparent 24px, #c0c0c0 32px),
repeating-linear-gradient(90deg, white, white .2px, transparent .2px, transparent 2px),
repeating-linear-gradient(white, white .2px, transparent .2px, transparent 2px);
"
></div>
</div>
<p>
Oh, I forgot to mention that the finder didn't copy the text out of the
debugger.
Nor did they attach a screen shot of the debugger.
Nope, they attached a digital photo of their CRT monitor,
complete with
<a HREF="http://en.wikipedia.org/wiki/Moir%C3%A9_pattern">
Moir&eacute; pattern</a>.
</p>
<p>
I'll remove the Moir&eacute; pattern for you from this and all
the other screen shots.
I'll also do the organic OCR&sup1;
and convert it to text.
Because I'm a nice guy that wants his writing to be readable.
(Unlike the finder, apparently.)
</p>
<pre>
pcshell\shell\explorer\something.cpp(80)\explorer.exe!00007FF813D017E2:
(caller: 00007FF813CB690C) ReturnHr(7) tid(b2c) 80070002 The system
cannot find the file specified
pcshell\shell\explorer\something.cpp(80)\explorer.exe!00007FF813D017E2:
(caller: 00007FF813CB690C) ReturnHr(8) tid(b2c) 80070002 The system
cannot find the file specified
pcshell\shell\explorer\something.cpp(80)\explorer.exe!00007FF813D017E2:
(caller: 00007FF813CB690C) ReturnHr(9) tid(b2c) 80070002 The system
cannot find the file specified
</pre>
<p>
Okay, this is some debug spew that's logging a
<i>File not found</i> error.
</p>
<p>
The finder, however, didn't characterize it as debug spew,
but rather described it as "an exception".
Their next step was to set a breakpoint on the reported address
<code>00007FF813D017E2</code> and repeat the scenario,
and then when the breakpoint hits, take a stack trace.
</p>
<pre>
0:002&gt; k
 # Child-SP
00 0000009c`aa2ffae0 00007ff8`13cb690c explorer!&lt;lambda_bab32d760b0e6e31&gt;::operator()+0x704c2
01 0000009c`aa2ffb90 00007ff8`13cb5eed explorer!Windows::Internal::ComTaskPool::CThread::_ThreadProc+0x228
02 0000009c`aa2ffc80 00007ff8`13cb5e39 explorer!Windows::Internal::ComTaskPool::CThread::s_ExecuteThreadPr
03 0000009c`aa2ffcd0 00007ff8`91adc774 explorer!Windows::Internal::ComTaskPool::CThread::s_ThreadProc+0x9
04 0000009c`aa2ffd00 00007ff8`91defd51 kernel32!BaseThreadInitThunk+0x14
05 0000009c`aa2ffd30 00000000`00000000 ntdll!RtlUserThreadStart+0x21
</pre>
<p>
A little disassembling around the first return address reveals
</p>
<pre>
00007ff8`13cb6906 ff1557351100 call    qword ptr [explorer!_guard_dispatch_icall_ptr (00007ff8`3cbfe08)]
00007ff8`13cb690c 488b4b50     mov     rcx, qword ptr [rbx+50h]
</pre>
<p>
The finder explained that "the function is
<code>_guard_</code><code>dispatch_</code><code>icall_</code><code>fptr</code>,
not the <code>lambda_</code><code>bab32d...</code>.
Decompiling the code at
<code>_guard_</code><code>dispatch_</code><code>icall_</code><code>fptr</code>,
you'll see the buffer overflow."
Here's the code in question:
</p>
<pre>
0:002&gt; u 00007ff8`13cbfe08
explorer!_guard_dispatch_icall_fptr:
00007ff8`13cbfe08 206388     and     byte ptr [rbx-78h],ah
00007ff8`13cb6e0b 9a         <span STYLE="border:solid 1px black">???</span> &lArr;
</pre>
<p>
In the screen shot, they highlighted the second line.
And that was the end of their report.
</p>
<p>
It seems that the finder saw a debug message, and then started
fumbling around.
They saw that the disassembler printed <code>???</code>
which they interpreted as a clear sign of a security vulnerability.
</p>
<p>
But that's not what they found.
</p>
<p>
First of all, the messages that appear on the debugger are some
error logging trace messages.
They aren't exceptions.
</p>
<p>
Next, the instruction prior to the return address is an indirect call,
but they somehow thought this was a label, because they said that the
function was misreported by the debugger as
<code>lambda_</code><code>bab32d...</code>
when it was actually
<code>_guard_</code><code>dispatch_</code><code>icall_</code><code>fptr</code>.
Nope, the function really is
<code>lambda_</code><code>bab32d...</code>.
What it's doing is <i>calling through</i>
the function pointer
<code>_guard_</code><code>dispatch_</code><code>icall_</code><code>fptr</code>.
</p>
<p>
Next, the finder misread the disassembly.
In Intel notation, square brackets around an effective address
mean "the memory stored at this address".
The
<code>call qword ptr [_guard_</code><code>dispatch_</code><code>icall_</code><code>fptr]</code>
doesn't mean "call the function
<code>_guard_</code><code>dispatch_</code><code>icall_</code><code>fptr</code>."
It means
"read eight bytes from
<code>_guard_</code><code>dispatch_</code><code>icall_</code><code>fptr</code>,
treat those eight bytes as a 64-bit value,
interpret that value as an address,
and call to that address."
The bytes you see at
<code>_guard_</code><code>dispatch_</code><code>icall_</code><code>fptr</code>
are not code;
they are data.
Disassembling them as code is meaningless.
</p>
<p>
So +1 on the finder for resourcefulness and curiosity.
But &minus;1 for not really understanding what you are doing,
&minus;1 for not checking your work with a colleague before
sending it in,
and &minus;1 for poor presentation.
</p>
<p>
&sup1; In other words, I used my eyeballs.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koro even thread-even depth-1 parent" id="comment-1372835">
				<div id="div-comment-1372835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/koro666' rel='external nofollow' class='url'>koro666</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181207-00/?p=100435#comment-1372835">
			December 7, 2018 at 8:04 am</a>		</div>

		<p>We call this &#8220;knowing just enough to be dangerous&#8221;.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-aadsso-1live-com00037ffea32154b5 odd alt depth-2 parent" id="comment-1372885">
				<div id="div-comment-1372885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aged+.Net+Guy' rel='external nofollow' class='url'>Aged .Net Guy</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181207-00/?p=100435#comment-1372885">
			December 7, 2018 at 3:13 pm</a>		</div>

		<p>This reminds me of <a href="https://xkcd.com/763/" rel="nofollow">https://xkcd.com/763/</a> titled &#8220;Workarounds&#8221;. You expect face-palms like that from your Aunt Sadie. The scary thing is somebody that clueless thinks he/she knows enough to operate a debugger.   Paraphrasing the immortal Quint &#8230; I think we&#8217;re gonna need a bigger sandbox.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-hardon even depth-3" id="comment-1372975">
				<div id="div-comment-1372975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/gdalsnes' rel='external nofollow' class='url'>gdalsnes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181207-00/?p=100435#comment-1372975">
			December 9, 2018 at 2:31 pm</a>		</div>

		<p>The ability to understand that you don&#8217;t understand something is very rare in my experience. Most people will blindly solve any problem without really understanding what they are doing. It amazes me.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-henke odd alt thread-odd thread-alt depth-1" id="comment-1372865">
				<div id="div-comment-1372865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Henke37' rel='external nofollow' class='url'>Henke37</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181207-00/?p=100435#comment-1372865">
			December 7, 2018 at 1:36 pm</a>		</div>

		<p>The OCR needs some work, it missed the f in fptr. Which how poor the input was, it&#8217;s amazing that the organic OCR could read anything.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kvadraticus even thread-even depth-1" id="comment-1372875">
				<div id="div-comment-1372875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Andreas+Rejbrand' rel='external nofollow' class='url'>Andreas Rejbrand</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181207-00/?p=100435#comment-1372875">
			December 7, 2018 at 2:26 pm</a>		</div>

		<p>Very creative markup. Almost thought it was a raster image!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-richardvoigt odd alt thread-odd thread-alt depth-1" id="comment-1373015">
				<div id="div-comment-1373015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Ben+Voigt' rel='external nofollow' class='url'>Ben Voigt</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181207-00/?p=100435#comment-1373015">
			December 10, 2018 at 8:25 am</a>		</div>

		<p>There&#8217;s no processor exception, SEH exception, or C++ exception, but there is a non-success HRESULT, which is considered to be an exception in the OLE Automation world (&#8220;DispInvoke will return DISP_E_EXCEPTION when the property or method returns a failure return value&#8221;).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

