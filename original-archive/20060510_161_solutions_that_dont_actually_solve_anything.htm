<html>
<head>
<title>Solutions that don't actually solve anything</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Solutions that don&#8217;t actually solve anything</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 10, 2006 / year-entry #162</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>48</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If changing a setting requires administrator privileges in the first place, then any behavior that results cannot be considered a security hole because in order to alter the setting, attackers must already have gained administrative privileges on the machine, at which point you've already lost the game. If attackers have administrative privileges, they're not going...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p><a href="http://blogs.msdn.com/oldnewthing/archive/2005/12/19/505449.aspx"> If changing a setting requires administrator privileges in the first place, then any behavior that results cannot be considered a security hole</a> because in order to alter the setting, attackers must already have gained administrative privileges on the machine, at which point you've already lost the game. If attackers have administrative privileges, they're not going to waste his time fiddling with some setting and leveraging it to gain even more privileges on the system. They're <strong>already the administrator</strong>; why go to more work to get what they already have?</p>
<p> One reaction to this is to try to "secure" the feature by asking, "Well, can we make it harder to change that setting?" For example, in response to the Image File Execution Options key, Norman Diamond suggested "only allowing the launching of known debuggers." But this solution doesn't actually solve anything. What would a "known debugger" be? </p>
<ul>
<li> "The operating system contain a hard-coded list of known debuggers. On that list are ntsd.exe, cdb.exe, and maybe windbg.exe." Personally, I would be okay with that, but that's because I do all my debugging in assembly language anyway. Most developers would want to use devenv.exe or bds.exe or even gdb.exe. If somebody comes up with <a href="http://blogs.msdn.com/jmstall/archive/2004/09/30/236281.aspx"> a new debugger</a>, they would have to petition Microsoft to add it to the hard-coded list of "known debuggers" and then wait for the next service pack for it to get broad distribution. And even before the ink was dry on the electrons, I'm sure somebody somewhere will already have filed an anti-competitive-behavior lawsuit. ("Microsoft is unlawfully raising the barrier to entry to competing debugging products!") </li>
<li> "Okay, then the program just needs to be digitally signed in order to be considered a 'known debugger'." Some people would balk at the $500/year cost of a code signing certificate. And should the operating system ask the user whether or not they trust the signing authority before running the debugger? (What if the debugger is being invoked on a service or a remote computer? There is nowhere to display the UI!) Actually, these were all trick questions. It doesn't matter whether the operating system prompts or not, because the attackers would just mark their signing certificate as a "trusted" certificate. And in fact the $500/year wouldn't stop the attackers, since they would just create their own certificate and install it as a "trusted root". Congratulations, the only people who have to pay the $500/year are the honest ones. The bad guys just slip past with their self-signed trusted-root certificate. </li>
<li> "Okay, forget the digital signature thing, just have a registry key that lists all the 'known debuggers'. If you're on the list, then you can be used in Image File Execution Options." Well, in that case, the attackers would just update the registry key directly and set themselves as a "known debugger". That "known debuggers" registry key didn't slow them done one second. </li>
<li> "Okay, then not a registry key, but some other setting that's hard to find." Oh, now you're advocating security through obscurity? </li>
</ul>
<p> Besides, it doesn't matter how much you do to make the Image File Execution Options key resistant to unwanted tampering. If the attacker has administrative privileges on your machine, they won't bother with Image File Execution Options anyway. They'll just install a rootkit and celebrate the addition of another machine to their robot army. </p>
<p> Thus is the futility of trying to stop someone who already has obtained administrative privileges. You're just <a href="http://blogs.msdn.com/ptorr/archive/2004/03/06/85266.aspx"> closing the barn door after the horse has bolted</a>. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (48)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-379113">
				<div id="div-comment-379113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379113">
			May 10, 2006 at 10:12 am</a>		</div>

		<p>I assume the situation is different if the machine&#8217;s real admin changes a setting that inadvertently lets an attacker in, right? &nbsp;I don&#8217;t think this would apply to IFEO, but it may apply to certain other things. &nbsp;Not sure whether that means anything as far as security is concerned, though &#8212; dumb admins can always screw up a system.</p>
<p>Regarding the signing stuff: Do the same principles apply to driver signing? &nbsp;Specifically, if you install your own root cert in the CA store on a machine, will drivers show a warning if they&#8217;re signed with a cert that chains to yours? &nbsp;Or does the code-signing cert have to chain to one of a hardcoded list?</p>
<p>(Or don&#8217;t you know, since you work on the shell and not the kernel? &nbsp;If not, do you know who might?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379133">
				<div id="div-comment-379133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379133">
			May 10, 2006 at 10:28 am</a>		</div>

		<p>&quot;If changing a setting requires administrator privileges in the first place, then any behavior that results cannot be considered a security hole because in order to alter the setting, attackers must already have gained administrative privileges on the machine, at which point you&#8217;ve already lost the game.&quot;</p>
<p>Not necessarily. It may be that a priveliged service that accepts connections from untrused users has a bug that does not allow arbitrary code execution, but does allow an attacker to execute existing code that they shouldn&#8217;t be able to, to change such a setting.</p>
<p>Example:</p>
<p> &nbsp; &nbsp;if (!userIsAdmin) {<br />
<br /> &nbsp; &nbsp; &nbsp; &nbsp;return EACCESS;<br />
<br /> &nbsp; &nbsp;}<br />
<br /> &nbsp; &nbsp;changePriveligedSetting();</p>
<p>If userIsAdmin() is a function, not a variable, then the use of userIsAdmin above will decay to a non-null function pointer, meaning that the user will never be denied permission to call changePriveligedSetting().</p>
<p>As noted, that&#8217;s only an example; there are other ways of achieving the same result. It doesn&#8217;t have to be a service that accepts remote connections, a setuid root program with a similar bug could do the same thing. Also, it doesn&#8217;t have to be a function call/function pointer mix-up &#8211; there are other coding errors that could creep into a priveliged program that could cause the same effect. e.g. reversing a privelige test so that <em>only</em> non-admin users can execute the sensitive code.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-379153">
				<div id="div-comment-379153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">silkio</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379153">
			May 10, 2006 at 10:41 am</a>		</div>

		<p>maybe the code to change the setting fits within the required size for your exploit, but a full attack doesn&#8217;t.</p>
<p>hello security hole.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379163">
				<div id="div-comment-379163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Steward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379163">
			May 10, 2006 at 11:10 am</a>		</div>

		<p>Adam, in your case, changing the setting does not require &quot;administrator privileges in the first place&quot;: the programmer just thinks it does. &nbsp;The problem is actually privilege elevation (it allows an attacker to change something they shouldn&#8217;t), and is solved by correct validation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-379173">
				<div id="div-comment-379173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dimmik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379173">
			May 10, 2006 at 11:37 am</a>		</div>

		<blockquote><p>
  If changing a setting requires<br />
  <br />&gt;administrator privileges [&#8230;]<br />
  <br />(disclaimer: May be It&#8217;s not the right place to discuss my question, excuse me in that case.)</p>
<p>WHY?<br />
  <br />Why changing a setting must require admin priv?<br />
  <br />Why not to give any user possibility to change his own system settings (including new dll, file associations and others), except for some that have to be changed ONLY by admins.</p>
<p>Well, one have to be admin to change users, to set up firewall or router soft, to set ip and other that touches all users of the system. May be to install soft-for-any-user-of-machine.<br />
  <br />But why not to store for every user his own registry, his own plase where the dll&#8217;s are placed and so on?</p>
<p>For example, once upon a time I had to install ACDSee.<br />
  <br />ACDSee &#8211; not complex utility, not deep-in-system-integrated-tool, just picture viewer.<br />
  <br />And I had to become admin on the computer.<br />
  <br />May be it&#8217;s because of my dumb security settings, I&#8217;m with no doubts lamer, but I was logged in as default &#8216;User&#8217;.<br />
  <br />It&#8217;s not clear for me why third-party-soft have to place smth into &quot;c:windows&#8230;&quot; dir, but almost all of them do that.</p>
<p>Why not to give to user ability to make any change to all settings but deep-system-preferences, and store them separately for every user?<br />
  <br />And security hole will be much more tiny.</p>
<p>P.S. Yes, I refer to *nix security model.<br />
  <br />Once, being simple non-privileged-user, I wanted to install another windows manager on linux (Afterstep) just for me. And I did it without root rights.<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379203">
				<div id="div-comment-379203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">:'(</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379203">
			May 10, 2006 at 12:26 pm</a>		</div>

		<p>Look who&#8217;s speaking. The company that purposefully cripples its OS to &quot;mitigate the spread of malware&quot;.</p>
<p>Hello 10 half-open outbound connection limit, hello no-raw-sockets, hello DNS client that ignores .hosts for MS addresses&#8230;</p>
<p>And hello 10-lines-of-C-code that disable these &quot;protections&quot;. On XP, you&#8217;ve already lost. Leave it alone, please :)</p>
<p>And I don&#8217;t like Vista&#8217;s direction: you still are supposed to run installers as admin, having to trust every company out here. It&#8217;ll only solve security holes, but not malware spread by &quot;traditional&quot; means.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-379213">
				<div id="div-comment-379213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379213">
			May 10, 2006 at 12:26 pm</a>		</div>

		<p>Mark:</p>
<p>Sorry I didn&#8217;t make it clear; if the setting I&#8217;m talking about has a system-enforced ACL (or equivalent) that only allows Admin users to change it, then an attacker could leverage a lack of correct validation in an elevated-privelige program to gain more priveliges on the system.</p>
<p>Not all security holes are code injection bugs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379223">
				<div id="div-comment-379223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://msmvps.com/alunj' rel='external nofollow' class='url'>Alun Jones</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379223">
			May 10, 2006 at 12:50 pm</a>		</div>

		<p>dimmik: This is an ACDSee failing, not a Windows failing. &nbsp;It&#8217;s perfectly possible to write an app that a restricted user can install &#8211; after all, installation consists of copying files, and changing / creating registry settings. &nbsp;Those are activities that any user can do.<br />
<br />Installing to your &quot;Program Files&quot; directory, or setting system-wide registry settings, that&#8217;s going to require admin privilege.<br />
<br />Adam: If there&#8217;s a program running with admin-level privilege and allowing ordinary users to execute inappropriate admin-level actions, then that program is the flaw, not the setting it sets.<br />
<br />:&#8217;): Show me those &quot;10-lines-of-code&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-379233">
				<div id="div-comment-379233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://qstuff.blogspot.com/' rel='external nofollow' class='url'>Justin Olbrantz (Quantam)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379233">
			May 10, 2006 at 12:58 pm</a>		</div>

		<p>&lt;i&gt;Hello 10 half-open outbound connection limit, hello no-raw-sockets, hello DNS client that ignores .hosts for MS addresses&#8230;</p>
<p>And hello 10-lines-of-C-code that disable these &quot;protections&quot;. On XP, you&#8217;ve already lost. Leave it alone, please :)&lt;/i&gt;</p>
<p>Really? You can disable all of those as a limited user? Do tell me how!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-379243">
				<div id="div-comment-379243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379243">
			May 10, 2006 at 12:58 pm</a>		</div>

		<p>&quot;It may be that a priveliged service that accepts connections from untrused users has a bug that&#8230;&quot;</p>
<p>Then you have a bug that is a security hole. But that&#8217;s not the topic for today. As I noted, it&#8217;s a setting that only administrators can change. Your counter-example is a setting that non-administrators can change (due to a flaw).</p>
<p>The topic for today is, &quot;I have a setting that only administrators can change. This setting can take values that are insecure.&quot; My point is that this is not a bug in the setting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-379263">
				<div id="div-comment-379263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379263">
			May 10, 2006 at 1:15 pm</a>		</div>

		<p>Alun Jones: &quot;It&#8217;s perfectly possible to write an app that a restricted user can install (&#8230;) Installing to your &quot;Program Files&quot; directory, or setting system-wide registry settings, that&#8217;s going to require admin privilege&quot;</p>
<p>As far as I understand, MSFT still promotes that all installs are to be to &quot;Program Files&quot;. Of course any user can run anything he downloads/copies etc, and the simplest way for a user to avoid to fetch administrator/get permissions is still to simply install the app somewhere in his own &quot;My Documents&quot; :)</p>
<p>E.g. if my grandmother gets some game, and &nbsp;I haven&#8217;t given her an admin password, she&#8217;ll probably be able to install the game to her documents.</p>
<p>There is a danger that then some malware run without provileges can infect the executable installed that way. But the possibility for a user to run something for himself is a good one. MSFT probably thinks that some sandbox environment is confusing for a normal user, but I believe that sandboxing is the future. Why shouldn&#8217;t the user be allowed to install his own apps, and why shouldn&#8217;t they be nicely sandboxed, so that one can&#8217;t infect another, none can infect the system, and each can create and modify files only in it&#8217;s own incarnation of My Documents?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379273">
				<div id="div-comment-379273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">...</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379273">
			May 10, 2006 at 1:15 pm</a>		</div>

		<blockquote><p>
  Really? You can disable all of those as a limited user? Do tell me how!</p>
<p>Raw sockets and modifying the HOSTS file already required admin, so these measures are there to protect against admin-privileged malware, and are therefore useless. (Incidentally, nmap now supports lower-level access that allow even for source MAC address forging, as a result of MS blocking raw sockets) (And the HOSTS file, you just have to search for &quot;microsoft.com&quot; in the DNS DLL and path it for &quot;xxxxxxxxx.xxx&quot;, for example)</p>
<p>99% of the users run as admin. That&#8217;s why the battle is &quot;lost&quot;, and that’s what you have to fix. The 10 connection limit makes sense, but only for limited users. Admins shouldn&#8217;t have this limit for the same obvious reason: they can path the OS to get rid of it, or they can use lower level access (see nmap).
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-379313">
				<div id="div-comment-379313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.darklock.com/blog/' rel='external nofollow' class='url'>Caliban Darklock</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379313">
			May 10, 2006 at 1:30 pm</a>		</div>

		<blockquote><p>
  99% of the users run as admin. That&#8217;s why<br />
  <br />&gt; the battle is &quot;lost&quot;, and that’s what you<br />
  <br />&gt; have to fix.</p>
<p>99% of users run as admin because they view security warnings as a pointless nuisance, they want those warnings to go away, and they honestly don&#8217;t care how it happens or what the consequences are. </p>
<p>Essentially, the battle is lost because the troops are incompetent, largely because they just don&#8217;t understand they&#8217;re troops in the first place. They never really wanted to be troops. Maybe they&#8217;re not really suited for it. But you still can&#8217;t blame the companies that provide their gear.<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379333">
				<div id="div-comment-379333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379333">
			May 10, 2006 at 1:45 pm</a>		</div>

		<p>mikeb, KnownDlls isn&#8217;t for security purposes. It&#8217;s there for efficiency. Since almost every single process will use them, it makes sense to load them into memory in a fixed location and not have to worry about searching for them, loading them, and possibly rebasing them every time you start a process?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-379393">
				<div id="div-comment-379393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379393">
			May 10, 2006 at 4:31 pm</a>		</div>

		<blockquote><p>
  &gt; KnownDlls isn&#8217;t for security purposes. It&#8217;s there for efficiency. &lt;&lt;</p>
<p>You&#8217;re right. &nbsp;I believed that it was created to prevent easy trojaning by dropping a trojan DLL into a directory that might likely be used as a current directory by an admin.</p>
<p>It&#8217;s not such a crazy thought &#8211; see Larry Osterman&#8217;s blog entry that mentions KnownDlls side-effect as a small security improvement:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/larryosterman/archive/2004/07/19/187752.aspx" rel="nofollow">http://blogs.msdn.com/larryosterman/archive/2004/07/19/187752.aspx</a><br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379403">
				<div id="div-comment-379403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anon e. mouse</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379403">
			May 10, 2006 at 4:33 pm</a>		</div>

		<p>Hmmm, only processes running with admin privileges ever had access to DevicePhysical Memory but starting with W2K3, MS took away acccess to DevicePhysical Memory in the name of making the OS &quot;more secure&quot;. </p>
<p>Pot. Kettle. Black.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-379423">
				<div id="div-comment-379423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379423">
			May 10, 2006 at 4:54 pm</a>		</div>

		<p>I agree that if there are vulnerabilities, then these settings can be used as stepping stones. But is that a fault of the setting? Should all useful settings be removed because somebody might st it incorrectly?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-379433">
				<div id="div-comment-379433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379433">
			May 10, 2006 at 5:28 pm</a>		</div>

		<blockquote><p>
  Should all useful settings be removed because somebody might st it incorrectly?</p>
<p>The usefulness of the setting should be weighed against the probability and severity of it being set incorrectly.</p>
<p>If the latter outweighs the former, another way must be found.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-379463">
				<div id="div-comment-379463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379463">
			May 10, 2006 at 5:53 pm</a>		</div>

		<p>Is &quot;Image File Execution Options&quot; useful enough to justify its continued existence? You tell me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379473">
				<div id="div-comment-379473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379473">
			May 10, 2006 at 6:34 pm</a>		</div>

		<blockquote><p>
  &gt; Is &quot;Image File Execution Options&quot; useful enough to justify its continued existence? You tell me. &lt;&lt;</p>
<p>I assume we&#8217;re talking aout the &#8216;Debugger&#8217; setting of that key (I don&#8217;t know a whole lot about the other settings). I use IFEO for 2 things: </p>
<p>1) to attach a debugger to processes that are otherwise difficult (or inconvenient) to debug<br />
  <br />2) let SysInternals&#8217;s Process Explorer replace taskmgr.exe</p>
<p>#1 is the intended use, but I think has little value for everyday users.<br />
  <br />#2 is a convenience that is not essential</p>
<p>So, I&#8217;d want to keep it, but I could see regular users saying &#8211; &quot;hey, come up with some other way to do your debugging that doesn&#8217;t open up a risk&quot;. &nbsp;</p>
<p>I&#8217;d offer some suggestions, but they&#8217;d probably either be worthless or if implemented cause personal inconvenience that I&#8217;d rather do without (like require a kernel debugger be attached for the setting to function &#8211; yuk).</p>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-379483">
				<div id="div-comment-379483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Swaim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379483">
			May 10, 2006 at 6:57 pm</a>		</div>

		<p>&#8216;As far as I understand, MSFT still promotes that all installs are to be to &quot;Program Files&quot;. Of course any user can run anything he downloads/copies etc, and the simplest way for a user to avoid to fetch administrator/get permissions is still to simply install the app somewhere in his own &quot;My Documents&quot; &#8216;</p>
<p>OneClick (or ClickOnce) applications by default do not install into Program Files. That&#8217;s nice because my users can update an app as limited users.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379493">
				<div id="div-comment-379493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pavel Lebedinsky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379493">
			May 10, 2006 at 7:06 pm</a>		</div>

		<blockquote><p>
  MS took away acccess to DevicePhysical Memory<br />
  <br />&gt; in the name of making the OS &quot;more secure&quot;</p>
<p>I think it was actually done to make the OS more stable. Applications were mapping physical memory without regard for caching attributes which can cause TLB corruption. For the same reason, access to DevicePhysical Memory is discouraged even for drivers &#8211; see comments in the MSDN page for ZwMapViewOfSection:</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/Kernel_r/hh/Kernel_r/k111_cdad5afa-13b3-415e-96e8-688e7984a9fd.xml.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/Kernel_r/hh/Kernel_r/k111_cdad5afa-13b3-415e-96e8-688e7984a9fd.xml.asp</a>
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-379513">
				<div id="div-comment-379513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ugh again</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379513">
			May 10, 2006 at 7:32 pm</a>		</div>

		<p>&quot;99% of users run as admin because they view security warnings as a pointless nuisance, they want those warnings to go away&#8230;&quot;</p>
<p>99% of Windows developers don&#8217;t understand the proper security and ask &quot;everybody else requires admin, so why not I?&quot;</p>
<p>How many developers know what a Limited User is? How many of us use it??</p>
<p>I&#8217;ve met devs who refuse to fix crashes because they figure Windows crashes so often anyway, it&#8217;s just easier to blame Windows.</p>
<p>99% of statistics are useless. But as somebody else said, don&#8217;t underestimate a developer&#8217;s will to undermine your computer&#8217;s security.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379283">
				<div id="div-comment-379283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.darklock.com/blog/' rel='external nofollow' class='url'>Caliban Darklock</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379283">
			May 10, 2006 at 1:19 pm</a>		</div>

		<p>Adam: </p>
<p>The question here is not whether the attacker can gain more privileges on the system, it is whether he can do so without the collusion of an administrative user. Which, in this case, he has &#8211; albeit unknowingly &#8211; by virtue of that user&#8217;s failure to test the code properly. </p>
<p>And from my perspective, this security hole actually *is* a code injection bug: the original code to change the setting has no bug. It is additional code injected between the original code and the end user which has the bug. Blaming the original code for the end result is simply unreasonable. Just because the attacker didn&#8217;t inject the code himself doesn&#8217;t change the mechanics of the attack.</p>
<p>But that verification code might also have been presented to the user on a developer group, for example, by the attacker. It certainly looks like an innocent mistake (we&#8217;ve all done that!), so if he&#8217;s caught he need only apologise. </p>
<p>This leads me to some thoughts on open source, but I won&#8217;t go into it here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-379293">
				<div id="div-comment-379293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379293">
			May 10, 2006 at 1:19 pm</a>		</div>

		<p>It&#8217;s interesting that it seems that Microsoft is expending quite a bit of its resources in Vista trying to solve some security issues using some of the techniques Raypond indicates are fatally flawed.</p>
<p>In Vista you&#8217;ll find:</p>
<p>1) requiring GUI verification of some accesses that are restricted to Admins (due to Vista&#8217;s LUA/UAC policies)</p>
<p>2) *All* drivers on 64-bit Vista will need to be signed with a certificate (a PIC) that can be obtained only after purchasing another certificate from Verisign for about $500 (or is it $300?). As an alternative, the driver can be signed in the WHQL program which has similar costs associated with identity certificates in addition to other testing costs. &nbsp;In fairness, it appears that Microsoft might be re-evaluating the PIC program.</p>
<p>In fact, Microsoft already uses some of these techinques in WinXP/Win2003 such as using registry keys to designate KnownDlls, and signing and other enforcement in Windows File Protection to try to ensure that valid binaries are in place.</p>
<p>So, while all of these techinques may be ultimately fatally flawed (until the Trusted Computing Platform arrives), they must have some utility and benefit, or Microsoft is wasting a lot of people&#8217;s time and effort.</p>
<p>I&#8217;m not necessarily saying that having a &#8216;known good debugger&#8217; list is a good idea, but Raymond&#8217;s post seems to imply that any security solution should be perfect to be considered. &nbsp;If that&#8217;s the standard then we might as well toss out our computers right here and now, or at least disconect them from the &#8216;net. &nbsp;</p>
<p>Sometimes just raising the bar is indeed worthwhile.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379343">
				<div id="div-comment-379343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.darklock.com/blog/' rel='external nofollow' class='url'>Caliban Darklock</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379343">
			May 10, 2006 at 1:49 pm</a>		</div>

		<p>mikeb, it&#8217;s not just raising the bar that&#8217;s worthwhile. Sometimes you can leave the bar where it is, and simply remind people how high that bar happens to be. </p>
<p>Assuming that your system has a known and unfixable security flaw, it will increase customer confidence if you move the same flaw to another location and then explain why it is every bit as secure as it is going to get. There are three results. </p>
<p>1. You have responded. Even though your activity has no real effect, you have demonstrated that you are listening. This is the single most important thing to do.</p>
<p>2. You have explained. Those who care about your explanation will look to people they trust to understand it, and get a confirmation there. </p>
<p>3. Your detractors will say &quot;this doesn&#8217;t change anything!&quot; because it really doesn&#8217;t. </p>
<p>However, #3 only works if you *omit* #1 or #2. Action without explanation leaves the public uncertain, and they will latch onto your detractor as the authority. Explanation without action sounds like an excuse, and the public will latch onto your detractor because you really haven&#8217;t changed anything. </p>
<p>But if you have taken action and explained that action, your detractors are just whining. The public has what they want: you have done something about it, and they are satisfied with the rationale for what you&#8217;ve done. So the detractor doesn&#8217;t actually do any damage; he merely advertises that you didn&#8217;t really HAVE to change or explain anything, which makes you look even better. </p>
<p>As Oscar Wilde said, living well is the best revenge.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-379553">
				<div id="div-comment-379553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">silkio</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379553">
			May 10, 2006 at 8:49 pm</a>		</div>

		<p>Raymond Says:<br />
<br />&gt; The topic for today is, &quot;I have a setting that<br />
<br />&gt; only administrators can change. This setting<br />
<br />&gt; can take values that are insecure.&quot; My point is<br />
<br />&gt; that this is not a bug in the setting.</p>
<p>Not a bug, but still something that can be used by &#8216;hackers&#8217; to exploit. And hence if it&#8217;s reasonably possible for someone to do so, it is not wise to create a setting like this.</p>
<p>You must see this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379563">
				<div id="div-comment-379563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Micah Brodsky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379563">
			May 10, 2006 at 9:14 pm</a>		</div>

		<p>Raymond &#8212;<br />
<br />My impression of much of the security work for Vista &#8212; e.g. signed drivers only on x64 &#8212; is that it&#8217;s effectively trying to demote the horribly overused Administrator to the level of a more normal user and then add a privileged level of mandatory access control beneath. My question is, why didn&#8217;t Microsoft do that literally? E.g. hoist the entire system up and put a lightweight privileged monitor beneath? Or, hoist up user space, virtualize the disk, and establish a protected data store for the kernel and its configuration that only the kernel (or another operating system, but not administrative tools) could access? Many of the massive headaches, like not being able to disable driver signing through boot.ini because that could be modified by programs running as administrator, would disappear, since you could introduce a &#8216;Hyperadministrator&#8217; able to manage these options. Also, the concern that someone could find a gap in the current, ad-hoc enforcement would seem to diminish greatly. </p>
<p></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-379413">
				<div id="div-comment-379413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379413">
			May 10, 2006 at 4:44 pm</a>		</div>

		<p>Raymond&gt; &quot;&#8230;in order to alter the setting, attackers must already have gained administrative privileges on the machine&#8230;&quot;</p>
<p>&quot;The topic for today is, &quot;I have a setting that only administrators can change. This setting can take values that are insecure.&quot; My point is that this is not a bug in the setting.&quot;</p>
<p>Respectfully, I must disagree with that particular conclusion[0]. An attacker can and will exploit multiple bugs/vulnerabilites, in series, to 0wn your box.</p>
<p>Forgive the non-Windows example and slight misrepresentaions, but often, when a single vulnerability is discovered on a UNIX system, it hardly ever allows a remote attacker to gain a root shell on your system. For this reason, you will normally see the UNIX die-hard-fanboys give one of the following two mitigations:</p>
<p>a) Hah, it only allows a remote user to get shell access with the account of the running process. apache/ftpd/cvsd runs with limited priveliges, so that&#8217;s not a problem like it would be with a Windows system, where such services run as the local system.</p>
<p>b) Hah, it only allows a local user to elevate their privs to r00t. We carefully monitor the people who are allowed to log on to our server, even as limited users, so that&#8217;s not a problem like it would be with a Windows system, where everyone needs to be a domain administrator to get work done.</p>
<p>Unfortunately, becuase each is announced separately, the fanboys seem to consistently fail to see that combined, one of each of the above vulnerabilites is fatal, and that you need to keep on top of *all* of them to keep your system secure.</p>
<p>If you have a setting which makes something else insecure, attackers will try to leverage it *in conjuntion with other vulnerabilites* to help them 0wn your box.</p>
<p>[0] I agree with everything else. Security by obscurity must concede to the almighty Google, and once someone has Admin, you&#8217;re toast.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379603">
				<div id="div-comment-379603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Driver Dude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379603">
			May 10, 2006 at 11:54 pm</a>		</div>

		<p>Definitely keep Image File Execution Options.</p>
<p>1. The whole point of Administrator/root is to be dangerous. Sometimes it&#8217;s the only way to get things done.</p>
<p>2. Remove this and somebody will discover another way to do the same thing. Never underestimate the &#8216;Net knowledge-spreading ability. Blackhats use the Net very effectively &#8211; in many ways.</p>
<p>3. Removing this closes ONE hole. Fixing the underlying problems &#8211; everybody runs with Admin privs, and the ease of obtaining Admin from a Limited user &#8211; will close MANY holes.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-379613">
				<div id="div-comment-379613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379613">
			May 10, 2006 at 11:58 pm</a>		</div>

		<blockquote><p>
  What would a &quot;known debugger&quot; be?<br />
  <br />&gt; &quot;The operating system contain a hard-coded<br />
  <br />&gt; list of known debuggers</p>
<p>No kidding that such a thing would deserve anti-trust action and it isn&#8217;t what I meant.</p>
<p>&gt; &quot;Okay, then the program just needs to be<br />
  <br />&gt; digitally signed in order to be considered<br />
  <br />&gt; a &#8216;known debugger&#8217;.&quot;</p>
<p>Enough with the attacks on straw girls. &nbsp;OK, you did stop. &nbsp;Thank you.</p>
<p>When I used the word &quot;known&quot; I meant known to the machine&#8217;s user[s], roughly along the following lines:<br />
  <br />If the administrator installed a development tool that includes a debugger, and the development tool is visible in &quot;Start &#8211; All Programs&quot;, then the administrator likely won&#8217;t be surprised about the debugger.<br />
  <br />If the individual user has a way of doing the same kind of installation, then the same reasoning applies.<br />
  <br />A few debuggers are built into Windows. &nbsp;Fine, do include them in the list. &nbsp;But: (1) Don&#8217;t limit the list to those. &nbsp;(2) Don&#8217;t include Solitaire or Notepad in the list unless the administrator or user took some action to put it in the list.</p>
<p>For the most part, I agree that debuggers aren&#8217;t really escalations of privileges. &nbsp;A user shouldn&#8217;t be allowed to debug a process that they don&#8217;t own, unless an administrator has given them privilege to do so.</p>
<p>(Actually I prefer meta-privileges, in which an administrator gives the user privilege to set the privilege, so that if the user hasn&#8217;t set the privilege but accidentally does some mistyping or mismousing then the mistake won&#8217;t accidentally do damage.)</p>
<p>However, even if there&#8217;s no escalation of privileges, there&#8217;s still a security risk. &nbsp;A hacker might break in and become administrator, the hacker WOULD add her key logger to the list of known debuggers, and the hacker WOULD set the debugging key on an application that the real administrator would use. &nbsp;This is because the hacker doesn&#8217;t know the password that the real administrator is going to input for some purpose, and the key logger will catch it.</p>
<p>So restricting the list of debuggers to a list known by the machine&#8217;s user[s] isn&#8217;t a concrete security protection. &nbsp;It&#8217;s a small step to help increase the chances of discovering that you&#8217;ve been hacked, plus a step to avoid damage from unintended accidents.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-379633">
				<div id="div-comment-379633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379633">
			May 11, 2006 at 12:12 am</a>		</div>

		<p>I&#8217;m still not sure where this &quot;list of debuggers&quot; is. If I&#8217;m reading you correctly (and I&#8217;m probably not), you&#8217;re saying that the way to answer the question &quot;Is this a valid debugger?&quot; is to do a treewalk of the administrator&#8217;s Start menu to see if anything there is a shortcut to that same program. (What if you don&#8217;t have permission to access the administrator&#8217;s start menu? Does that mean you can&#8217;t debug anything? Does this mean that the administrator can&#8217;t &quot;clean up&quot; the Start menu by getting rid of rarely-used programs? What if the administrator&#8217;s start menu is redirected to another server that is unavailable?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-379453">
				<div id="div-comment-379453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379453">
			May 10, 2006 at 5:45 pm</a>		</div>

		<p>*All* useful settings? Of course not.</p>
<p>But, if an option has an insecure setting, then I&#8217;d say that that *particular* setting of that *particular* option *should* be at least considered a &quot;security issue&quot;, and looked at for possible removal from the next release.</p>
<p>On reflection, the risk may be worth the functionality, especially if individual admins are given enough background to make an informed decision themselves. And admins are at least somewhat likely to read the big warning dialogs that pop up when they select that setting :)</p>
<p>But to leave an insecure setting in just because it&#8217;s useful? Must &#8230; resist &#8230; cheapshot &#8230; IE &#8230;.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379503">
				<div id="div-comment-379503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379503">
			May 10, 2006 at 7:24 pm</a>		</div>

		<p>*sucks teeth* Tricky one. :)</p>
<p>I presume you mean the &quot;debugger&quot; subkey that you&#8217;ve written about before.[0]</p>
<p>Considering how open to abuse that particular setting is (something you pointed out yourself in the previous article), I&#8217;d say that having a good look at alternative ways of getting the same results would be strongly encouraged.</p>
<p>Ideas:</p>
<p>1) You could enable that setting only under a windows debugging kernel. Yes, you won&#8217;t be running the target programs fully &quot;in the wild&quot;, but it&#8217;d keep a lot of people safe.</p>
<p>2) Where program A calls program B, and you need to debug program B without modifying it, then:</p>
<p>2a) If you can wait to attach a debugger to program B until after it reads data from program A, you could run program A under a debugger, pause it after it starts program B, and then attach another debugger to program B while it&#8217;s waiting for data from A?</p>
<p>2b) If you have to attach a debugger to B before it reads any information from A, can&#8217;t you just start B straight from the debugger?</p>
<p>3) Can you set up a windows debugger to follow the child on CreateProcess()? If so, could that be used to debug B?</p>
<p>Of course, there may be good reasons why none of these (off-top-of-head) ideas, and indeed no other more secure alternatives to IFEO that cover *all* its functionality do exist, and that the functionality *is* vital enough to keep.</p>
<p>*That doesn&#8217;t stop those risks existing though, and it doesn&#8217;t mean that IFEO couldn&#8217;t be used as part of an exploit.*</p>
<p>In answer to your question, I don&#8217;t know. I&#8217;ve done a reasonable amount of (ATL/COM/C++) development on Windows and never needed it. But I&#8217;ve not delved into driver programming, or some of the nastier corners of MFC/the Win32 API either. My guess would be to keep that one. It&#8217;s the kind of thing that seems like it wouldn&#8217;t have been put there in the first place unless there was a real need for it. But that doesn&#8217;t mean that I&#8217;d keep all such settings. It&#8217;s definitely a case-by-case type of decision.</p>
<p>[0] <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2005/12/19/505449.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2005/12/19/505449.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-379653">
				<div id="div-comment-379653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dimmik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379653">
			May 11, 2006 at 3:00 am</a>		</div>

		<p>Alun Jones&gt; This is an ACDSee failing, not a Windows failing.<br />
<br />May be.<br />
<br />But it looks like it&#8217;s common way for any windows-app to install itself.<br />
<br />They (apps) look for %ProgramFiles% which points to, say, &quot;C:Program Files&quot; and tries to put all necessary files there. And, of course, fails because of user being non-admin.<br />
<br />Ok, it, may be, failure of almost every app to be installed. But it seems to be very common design flaw. ;)</p>
<p>But &#8211; why not to point %ProgramFiles% to, say, &quot;C:SomeUserProgramFiles&quot; and %WINDIR% to &quot;C:SomeUserWindows&quot; and so on? And save something like %GlobalProgramFiles% pointing to privileged folder.</p>
<p>It will be transparent for apps and for users, and they will have no need to care about admin priv.</p>
<p>My wife have no idea what folders and files are &#8211; she knows she has fotos and she has viewer and nothing else. Exaggregation, of course, but close to reality.<br />
<br />How (and <em>what for</em>) to explain her that she have to change default &quot;C:Program Files&quot; to smth else?<br />
<br />And what if app wants to write into registry?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379673">
				<div id="div-comment-379673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">meh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379673">
			May 11, 2006 at 6:21 am</a>		</div>

		<p>Sooner or later you&#8217;d have apps that install to %GlobalProgramFiles%. What do you do then?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-379693">
				<div id="div-comment-379693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379693">
			May 11, 2006 at 6:41 am</a>		</div>

		<blockquote><p>
  If I&#8217;m reading you correctly (and I&#8217;m<br />
  <br />&gt; probably not), you&#8217;re saying that the way<br />
  <br />&gt; to answer the question &quot;Is this a valid<br />
  <br />&gt; debugger?&quot; is to do a treewalk</p>
<p>Obviously you&#8217;re not, because on Windows XP the results of a treewalk would include Solitaire, which is an example of what I suggested shouldn&#8217;t be included in the list.</p>
<p>Here are some famous lists. &nbsp;&quot;Add/Remove programs&quot; accesses a list that&#8217;s stored somewhere. &nbsp;The Run and RunOnce keys are lists that are used for a different purpose. &nbsp;The list of known debuggers would be yet another list, with some obvious places where it could be stored. &nbsp;It would start with a default list of debuggers that are installed by default in the Windows system, would be extended when authorized persons add development tools, and would be extended when hackers obtain sufficient privileges to hack it.</p>
<p>A few decades ago on a different OS, a program called &quot;chsh&quot; asked if I really wanted to change my login shell to a program that wasn&#8217;t on an administratively maintained list of known shells. &nbsp;Since I wasn&#8217;t a root I only had read access to the list, but it was enough. &nbsp;The ways for me to accomplish what I was trying to do would be to answer &quot;y&quot; to the prompt and know that I was choosing an unusual shell, or for an administrator to change my account settings with or without notifying me, or for a hacker to change my account settings. &nbsp;Anyway the list was a reasonable list and it was used in a reasonable manner.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379703">
				<div id="div-comment-379703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Steward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379703">
			May 11, 2006 at 8:45 am</a>		</div>

		<p>Norman: I think a list of debuggers that&#8217;s modifiable by Administrator to protect a registry key that&#8217;s modifiable by Administrator adds so little protection it&#8217;s not worth doing. &nbsp;And I think that was Raymond&#8217;s point.</p>
<p>It doesn&#8217;t even stop the limited users: once you have one debugger, you can run any other debugger under it. &nbsp;And, since you can recreate a program&#8217;s functionality in VBA, or copy the program and edit it, should debugging programs be a controlled resource?</p>
<p>I find having a debugger as important as a programming language. &nbsp;The ability to change the behaviour of a program without rewriting it is (to me) an essential part of an OS. &nbsp;I often use it to force programs to install on my limited profile. (Ugh and I hate OLE&#8217;s obsession with HKLM&#8230;)</p>
<p>I know many companies have policies against running your own code, but until Windows has a comprehensive way of stopping users running their own code (appsec is trivial to break), that&#8217;ll only stop the good guys.</p>
<p>If your concern is somebody using IFEO to make a system act strangely, perhaps a better solution is to create a notification for when IFEO is in effect. &nbsp;Then the jokers will be caught, and the serious hackers will be using more than one technique anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-379713">
				<div id="div-comment-379713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Steward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379713">
			May 11, 2006 at 8:56 am</a>		</div>

		<p>Norman: Whoops, sorry, I thought you were advocating it from a security point of view. &nbsp;I agree that administrators, like developers (&quot;no programmer would be stupid enough to&#8230;&quot;), shouldn&#8217;t be trusted with their own systems.</p>
<p>It&#8217;s always risky when changing a dangerous setting becomes an everyday procedure. &nbsp;So to protect the admin against operator error, I&#8217;d instead suggest a property dialog that changes IFEO for you. &nbsp;It could then warn (from a system-protected list of debuggers) if there&#8217;s a problem. &nbsp;And perhaps IFEO should only be writeable by SYSTEM. &nbsp;How&#8217;s that?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379803">
				<div id="div-comment-379803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Micah Brodsky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379803">
			May 11, 2006 at 12:43 pm</a>		</div>

		<p>How is IFEO any more dangerous that the HKLM &#8216;Run&#8217; key, or the document editor associations in &#8216;Classes&#8217;, or any of the dozens of other ways to obfuscate an an application&#8217;s presence once it&#8217;s got administrative privileges?</p>
<p>(AFAIK, the privilege check for actually attaching the debugger to a process is completely independent and sound &#8212; you need rights with respect to the process.)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-379923">
				<div id="div-comment-379923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379923">
			May 11, 2006 at 9:01 pm</a>		</div>

		<p>Mr. Steward, thank you for posting your second followup so quickly, so I could read it before complaining about your first one.</p>
<p>Nonetheless as a minor security measure it still increases the chance of a hack being discovered rather than remaining undiscovered. &nbsp;Just &nbsp;abit.</p>
<p>For limited users it still helps too. &nbsp;Limited users would be allowed to debug their own programs. &nbsp;But if an administrator or hacker set the limited user&#8217;s options to use Solitaire as a debugger but the administrator or hacker forgot to update the list of known debuggers then the user would get a warning. &nbsp;The user would know they&#8217;ve been oddly administrated.</p>
<p>&gt; It&#8217;s always risky when changing a dangerous<br />
<br />&gt; setting becomes an everyday procedure.</p>
<p>Well sure, but for Visual Studio isn&#8217;t one of the programs that I reinstall every day. &nbsp;Nearly every day I wish for bug fixes, but they don&#8217;t come, and reinstallation won&#8217;t help. &nbsp;I wouldn&#8217;t mind if installation of Visual Studio would automatically update the list of known debuggers. &nbsp;I don&#8217;t mind if this update includes a dialog box or not &#8212; but I hope the dialog would be more understandable than a simple &quot;Do you wish to update your JIT settings&quot; (yes or no) without even saying which product is asking and what kind of JIT settings are affected and what the change is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-379953">
				<div id="div-comment-379953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-379953">
			May 12, 2006 at 1:09 am</a>		</div>

		<p>I don&#8217;t understand when the &quot;XYZ is not a registered debugger. Do you want to use it anyway?&quot; dialog box is supposed to be displayed. Is Regedit supposed to display it when you set the value in IFEO? Is the RegSetValueEx function supposed to display the message? (What if RegSetValueEx is being performed from a service or a driver?) Is it supposed to be displayed when the target program is run? (What if the process is being run as a service? Where do you display the dialog box?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-380683">
				<div id="div-comment-380683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-380683">
			May 14, 2006 at 2:58 am</a>		</div>

		<p>I think it&#8217;s important to distinguish between &quot;security&quot; and &quot;safety&quot; in this matter. &nbsp;I completely agree with Raymond here.</p>
<p>With any system that cares about security, there is a line in the sand you can draw between privilege levels. &nbsp;Any program with access above that line can use its privilege to become god, no matter which particular privilege level they actually have.</p>
<p>For example, consider being in the Administrators group, or having any of the SeTakeownershipPrivilege, SeTcbPrivilege, SeRestorePrivilege, SeLoadDriverPrivilege, or SeDebugPrivilege privileges. &nbsp;If you have any of those rights, you can elevate your privileges in some way to become kernel.</p>
<p>Even though we generally separate powers like this, they are all effectively equivalent. &nbsp;It means nothing for security.</p>
<p>So why bother? &nbsp;It&#8217;s because security isn&#8217;t the only concern. &nbsp;Safety is another important one. &nbsp;This separation makes it more difficult to accidentally break something.</p>
<p>NT disables privileges by default even if you have them. &nbsp;Obviously, it does nothing for security, but it does a lot for safety.</p>
<p>Vista x86-64 driver signing is another example of missing the point. &nbsp;It will anger developers and maybe users, but one thing it will not do is stop rootkits. &nbsp;First of all, kernel-mode rootkits are few and far between (other than as copy protection schemes or drivers that hide cheat programs from online games). &nbsp;Almost all soldiers of robot armies are infected with a user-mode &quot;rootkit&quot; of some kind, not a kernel rootkit.</p>
<p>Second, if a bad program is already running as elevated Administrator, driver signing is not going to stop it from getting into the kernel if it *really* wants to.</p>
<p>A program running as elevated Administrator can overwrite ntldr (whatever it&#8217;s called in Vista) and reboot the system. &nbsp;No more driver signing check.</p>
<p>A response would be to block writing to those files. &nbsp;In that case, raw open DeviceHarddisk0Partition1 and write to the sectors containing ntldr.</p>
<p>A response to that would be to block raw disk access. &nbsp;Fine. &nbsp;Create a 512 byte rootkit loader, put it in a file called rootkit.bin, and use bcdedit to add a new legacy OS entry for the file. &nbsp;Set the default option to that and timeout to zero, then reboot.</p>
<p>There&#8217;s even tricks you can do without rebooting, but I won&#8217;t go into them here.</p>
<p>Microsoft should be concentrating on ways of preventing unelevated programs from becoming elevated. &nbsp;Vista does a somewhat good job of this already with UAP, but it&#8217;s not perfect. &nbsp;This feature is definitely a step in the right direction, unlike driver signing.</p>
<p>It&#8217;s complete futility to try to prevent anyone &nbsp;above the line in the sand from taking over the system. &nbsp;The only way to do something like this is to require all programs that access any kind of protected data to be signed. &nbsp;What scares me is that Microsoft appears to be headed in that direction. &nbsp;I don&#8217;t think it will be long before executing as anything but verifiable .NET requires a signature.</p>
<p>Melissa</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-380733">
				<div id="div-comment-380733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-380733">
			May 14, 2006 at 9:09 pm</a>		</div>

		<blockquote><p>
  I don&#8217;t understand when the &quot;XYZ is not a<br />
  <br />&gt; registered debugger. Do you want to use it<br />
  <br />&gt; anyway?&quot; dialog box is supposed to be<br />
  <br />&gt; displayed.</p>
<p>Thank you for your understanding of my writing. &nbsp;Indeed my writing wasn&#8217;t clear enough and your subsequent question made me think. &nbsp;Anyway the answer to this, in terms of what I had been thinking, was that the dialog would be displayed at the time that the program would otherwise have been opened by the debugger that is specified in the key.</p>
<p>&gt; What if the process is being run as a<br />
  <br />&gt; service?</p>
<p>Yeah you got me, since this isn&#8217;t ShellExecuteEx looking up the key (or is it?), and the program is being started in a context that has no user interaction. &nbsp;But I think I can come up with two or three answers.</p>
<p>(1) &nbsp;If the process is being run as a service and the debugger isn&#8217;t on the list of known debuggers that the administrator or hacker has registered (along with predefined debuggers that are installed with Windows), then the chances seem even higher that a hacker has interjected this key in order to get the hacker&#8217;s program to run under the local system account. &nbsp;Maybe we want to log the fact that Windows is prohibiting the service from starting, and say the reason is an unauthorized debugger.</p>
<p>(2) &nbsp;The service could be started without using any debugger. &nbsp;Again a log entry should be made.</p>
<p>(3) &nbsp;Are there debuggers for Windows that run unattended? &nbsp;I don&#8217;t mean just unattendedly counting the number of times a breakpoint is passed before breaking, and running macros, but I mean completing their operations without even prompting the user when an unexpected situation occurs. &nbsp;If the answer is no then we could treat this as an unexpected situation and prompt the user. &nbsp;I&#8217;m not sure which window station we want to prompt on though.</p>
<p>By the way, there&#8217;s a certain situation where a service will not start and Windows will log an event saying that the service failed to respond within 30 seconds &#8212; but the log entry is recorded a long time before 30 seconds passes. &nbsp;This happened to me enough times that I finally memorized what the real meaning of the error was and then I could fix my own errors promptly. &nbsp;Anyway, there is precedent for refusing to run a service when a configuration isn&#8217;t quite what it should be.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-380743">
				<div id="div-comment-380743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-380743">
			May 14, 2006 at 9:11 pm</a>		</div>

		<p>Submitted as a separate response so it will be easy to delete if too much teasing is still considered offensive ^_^</p>
<p>Sunday, May 14, 2006 2:58 AM by Myria<br />
<br />&gt; I completely agree with Raymond here.</p>
<p>You see that, Mr. Chen? &nbsp;You even distinguish between &quot;security&quot; and &quot;safety&quot; like a girl.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-380803">
				<div id="div-comment-380803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-380803">
			May 15, 2006 at 8:11 am</a>		</div>

		<p>dimmik: a lot of Windows applications use COM components, both to construct their UIs and as general-purpose utilities.</p>
<p>COM registration /can/ be written into HKEY_CURRENT_USERSoftwareClasses, but this often isn&#8217;t done since this feature was first introduced in Windows 2000. You can also have registration-free COM but this seems to be a complex feature of Windows Installer, and no-one understands Windows Installer (yes, this is a gross over-simplification, but I think the number of people who actually understand Windows Installer is tiny, and I&#8217;m not one of them).</p>
<p>File associations can also be written to HKEY_CURRENT_USERSoftwareClasses, and they override the local-machine settings.</p>
<p>Basically, few applications actually support per-user installs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-382363">
				<div id="div-comment-382363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pagetable.com/' rel='external nofollow' class='url'>Myria</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-382363">
			May 19, 2006 at 4:10 am</a>		</div>

		<p>Norm, I don&#8217;t think you realize that in Windows NT, every process is basically a debugger of any process it starts. &nbsp;An NT process starts out as more or less an empty space (unless you fork).</p>
<p>The creating process actually allocates memory inside the new process and writes to it, and it even sets the initial values of the CPU registers for the new process&#8217;s thread. &nbsp;The creating process is effectively a debugger of the new process.</p>
<p>Adding &quot;known debuggers&quot; is no better than WinSafer (group policy) and is trivial to break, as someone mentioned.</p>
<p>Melissa</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-382723">
				<div id="div-comment-382723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060510-06/?p=31243#comment-382723">
			May 21, 2006 at 10:53 pm</a>		</div>

		<p>Friday, May 19, 2006 4:10 AM by Myria<br />
<br />&gt; The creating process actually allocates<br />
<br />&gt; memory inside the new process and writes to<br />
<br />&gt; it,</p>
<p>You&#8217;re right, I didn&#8217;t know that. &nbsp;While assuming too much, I assumed that the kernel would initiate a stub in the new process and let the parent process continue with its own operations. &nbsp;I figured that the parent would interfere with the child only when the parent was designed to do so, using the handles returned.</p>
<p>Now I&#8217;m wondering, even if inspection of the IFEO key is done by the parent process, and even if the debugging role is handed off from the parent process to the designated debugger, could the code that reads IFEO still warn the user. &nbsp;The SHELLEXECUTEINFO structure has an hwnd which is designed for user notifications, but the SECURITY_ATTRIBUTES structure doesn&#8217;t.</p>
<p>&gt; Adding &quot;known debuggers&quot; is no better than<br />
<br />&gt; WinSafer (group policy) and is trivial to<br />
<br />&gt; break</p>
<p>Sure it&#8217;s trivial to break deliberately, but John Robbins didn&#8217;t mention the possibility of adding Solitaire to a list of debuggers in WinSafer ^_^</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

