<html>
<head>
<title>The MIPS R4000, part 13: Function prologues and epilogues</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The MIPS R4000, part 13: Function prologues and epilogues</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 18, 2018 / year-entry #91</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180418-00/?p=98545</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Keeping the unwinding bookkeeping straight.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We saw last time how functions are called.
Today we'll look at the receiving end of a function call.
</p>
<p>
As noted earlier,
all functions (except for lightweight leaf functions)
must declare unwind codes in the module metadata so that the
kernel can figure out what to do if an exception occcurs.
</p>
<p>
The stack for a typical function looks like this:
</p>
<table BORDER="0" STYLE="border-collapse: collapse" CELLPADDING="3" CLASS="cp3">
<tr>
<td ALIGN="center">&#x22EE;</td>
</tr>
<tr>
<td ALIGN="center" STYLE="border: solid 1px black">param 6</td>
<td>(if function accepts more than 4 parameters)</td>
</tr>
<tr>
<td ALIGN="center" STYLE="border: solid 1px black">param 5</td>
<td>(if function accepts more than 4 parameters)</td>
</tr>
<tr>
<td ALIGN="center" STYLE="border: solid 1px black">param 4 home space</td>
</tr>
<tr>
<td ALIGN="center" STYLE="border: solid 1px black">param 3 home space</td>
</tr>
<tr>
<td ALIGN="center" STYLE="border: solid 1px black">param 2 home space</td>
</tr>
<tr>
<td ALIGN="center" STYLE="border: solid 1px black">param 1 home space</td>
<td>&larr; stack pointer at function entry</td>
</tr>
<tr>
<td ALIGN="center" STYLE="border: solid 1px black">
<div>local variables</div>
<div>&#x22EE;</div>
</td>
</tr>
<tr>
<td ALIGN="center" STYLE="border: solid 1px black">
<div>outbound parameters</div>
<div>beyond 4 (if any)</div>
<div>&#x22EE;</div>
</td>
</tr>
<tr>
<td ALIGN="center" STYLE="border: solid 1px black">param 4 home space</td>
</tr>
<tr>
<td ALIGN="center" STYLE="border: solid 1px black">param 3 home space</td>
</tr>
<tr>
<td ALIGN="center" STYLE="border: solid 1px black">param 2 home space</td>
</tr>
<tr>
<td ALIGN="center" STYLE="border: solid 1px black">param 1 home space</td>
<td>&larr; stack pointer after prologue complete</td>
</tr>
</table>
<p>
On entry to the function,
the first four parameters are in registers,
but they have reserved home space on the stack.
Even if a function has fewer than four parameters,
there is home space for all four registers.
If there are more than four parameters,
then those beyond the fourth are on the stack.
</p>
<p>
The function prologue needs to move the stack pointer down
to make room for the local stack frame.
The <i>local variables</i> include the return address and
any saved registers.
After the local variables come the
outbound parameters
(either directly on the stack for parameters beyond 4,
or home space for the four register-based parameters).
Again, even if a function accepts fewer than four parameters,
it gets a full four words of home space.&sup1;
</p>
<p>
The 1992 compiler organized the local variables
with the declared function local variables at higher addresses,
followed by saved registers, and the return address closest
to the outbound parameters.
By 1995, the compiler started exploring other ways of
organizing its local variables.
</p>
<p>
A typical function prologue looks like this:
</p>
<pre>
    ADDIU   sp, sp, -n1 ; carve out a stack frame
    SW      ra, n2(sp)  ; save return address
    SW      s1, n3(sp)  ; save nonvolatile register
    SW      s0, n4(sp)  ; save nonvolatile register
</pre>
<p>
The prologue must start by updating the stack pointer,
and then it can store its registers in any order.
You are allowed to interleave instructions from the function
body proper into the prologue, provided they are purely computational
instructions (no branches or memory access),
and provided they do not mutate
<code>sp</code>, <code>ra</code>,
or any nonvolatile registers.&sup2;
In practice, the Microsoft compiler does not take advantage of this.
</p>
<p>
To return from a function,
the function places the return value, if any,
in the <var>v0</var> register and possibly the <var>v1</var> register.
It then executes the formal function epilogue:
</p>
<pre>
    MOVE    v0, return_value
    LW      s0, n4(sp)  ; restore nonvolatile register
    LW      s1, n3(sp)  ; restore nonvolatile register
    LW      ra, n2(sp)  ; restore return address
    JR      ra          ; return to caller
    ADDIU   sp, sp, n1  ; restore stack pointer (in branch delay slot)
</pre>
<p>
Notice that the adjustment of the stack pointer happens as the very
last thing, even after the return instruction!
That's because it sits in the branch delay slot,
so it executes even though the branch is taken.
</p>
<p>
&sup1;
If a function uses <code>alloca</code>,
then the memory is carved out between the existing local variables
and the outbound parameters.
</p>
<p>
&sup2;
This rule exists so that when the exception unwinder needs to
reverse-execute a function prologue, it can just ignore the
instructions it doesn't understand.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1 parent" id="comment-1333515">
				<div id="div-comment-1333515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180418-00/?p=98545#comment-1333515">
			April 18, 2018 at 7:58 am</a>		</div>

		<p>Interesting that the function prologue reserves space for calling further functions (not the first time I see it, MinGW also appears to pre-reserve like this; calling __stdcall Win32 functions needed a SUB SP, xx after each call to preserve it). </p>
<p>On MIPS, does it also happen for leaf functions, or is it optimized out?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1333525">
				<div id="div-comment-1333525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Clarkstone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180418-00/?p=98545#comment-1333525">
			April 18, 2018 at 8:39 am</a>		</div>

		<p>Reserving the stack space at startup and not moving the stack pointer afterwards makes function unwinding easier.</p>
<p>I bet it makes speculative execution more effective too as all local variables and (spilled) temporary values in expressions are constant offsets from a register that isn&#8217;t written to (the stack pointer) therefore the CPU can predict the addresses being accessed as soon as it has executed the function prologue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1333585">
				<div id="div-comment-1333585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180418-00/?p=98545#comment-1333585">
			April 18, 2018 at 9:33 am</a>		</div>

		<p>Leaf functions don&#8217;t need to reserve space for outbound parameters. Lightweight leaf functions aren&#8217;t even allowed to move the stack pointer!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1333565">
				<div id="div-comment-1333565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180418-00/?p=98545#comment-1333565">
			April 18, 2018 at 8:50 am</a>		</div>

		<p>&#8220;Notice that the adjustment of the stack pointer happens as the very last thing, even after the return instruction! That&#8217;s because it sits in the branch delay slot, so it executes even though the branch is taken.&#8221;</p>
<p>Clever. Saves a wasted NOP in the branch-delay slot of every function, back in a time when conserving memory was much more important.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

