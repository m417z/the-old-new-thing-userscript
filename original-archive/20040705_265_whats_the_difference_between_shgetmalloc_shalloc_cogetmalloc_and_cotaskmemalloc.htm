<html>
<head>
<title>What's the difference between SHGetMalloc, SHAlloc, CoGetMalloc, and CoTaskMemAlloc</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What&#8217;s the difference between SHGetMalloc, SHAlloc, CoGetMalloc, and CoTaskMemAlloc</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 5, 2004 / year-entry #266</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040705-00/?p=38573</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">There isn't any difference any more.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Let's get the easy ones out of the way.
</p>
<p>
First,
<a HREF="http://msdn.microsoft.com/library/en-us/com/htm/cmf_a2c_9bj7.asp">
CoTaskMemAlloc</a> is exactly the same as
<a HREF="http://msdn.microsoft.com/library/en-us/com/htm/cmf_a2c_2qlf.asp">
CoGetMalloc</a>(MEMCTX_TASK) +
<a HREF="http://msdn.microsoft.com/library/en-us/com/htm/cmi_m_3twj.asp">
IMalloc::Alloc</a>,
and
<a HREF="http://msdn.microsoft.com/library/en-us/com/htm/cmf_a2c_63l1.asp">
CoTaskMemFree</a> is the same as
CoGetMalloc(MEMCTX_TASK) +
<a HREF="http://msdn.microsoft.com/library/en-us/com/htm/cmi_m_1smd.asp">
IMalloc::Free</a>.
CoTaskMemAlloc and CoTaskMemFree (and the less-used
<a HREF=http://msdn.microsoft.com/library/en-us/com/htm/cmf_a2c_3lpf.asp>
CoTaskMemRealloc</a>)
are just convenience functions that save you the trouble of having to
mess with CoGetMalloc yourself.
Consequently, you can safely allocate memory via
CoGetMalloc(MEMCTX_TASK) + IMalloc::Alloc, and then free it with
CoTaskMemFree, and vice versa.  It's all the same allocator.
</p>
<p>
Similarly,
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/functions/shalloc.asp">SHAlloc</a>
and
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/functions/SHFree.asp">
SHFree</a>
are just wrappers around
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/functions/shgetmalloc.asp">
SHGetMalloc</a>
which allocate/free the memory via the shell task allocator.
Memory you allocated via SHGetMalloc + IMalloc::Alloc can be freed
with SHFree.
</p>
<p>
So far, we have this diagram.
</p>
<table BORDER=0>
<tr>
<td ALIGN=center COLSPAN=3
        STYLE="border-top: solid .75pt black;
               border-left: solid .75pt black;
               border-right: solid .75pt black;">Shell task allocator<br>
    </td>
<td></td>
<td ALIGN=center COLSPAN=3
        STYLE="border-top: solid .75pt black;
               border-left: solid .75pt black;
               border-right: solid .75pt black;">OLE task allocator<br>
    </td>
</tr>
<tr>
<td COLSPAN=7 HEIGHT=3></td>
</tr>
<tr>
<td STYLE="border: solid .75pt black">SHAlloc/<br>SHFree</td>
<td>=</td>
<td STYLE="border: solid .75pt black">SHGetMalloc</td>
<td>&nbsp;<font SIZE=+3>??</font>&nbsp;</td>
<td STYLE="border: solid .75pt black">CoGetMalloc</td>
<td>=</td>
<td STYLE="border: solid .75pt black">CoTaskMemAlloc/<br>CoTaskMemFree</td>
</tr>
</table>
<p>
Now what about those question marks?
</p>
<p>
If you read the comments in shlobj.h, you may get a bit of a hint:
</p>
<pre>
//===========================================================================
//
// Task allocator API
//
//  All the shell extensions MUST use the task allocator (see OLE 2.0
// programming guild for its definition) when they allocate or free
// memory objects (mostly ITEMIDLIST) that are returned across any
// shell interfaces. There are two ways to access the task allocator
// from a shell extension depending on whether or not it is linked with
// OLE32.DLL or not (purely for efficiency).
//
// (1) A shell extension which calls any OLE API (i.e., linked with
//  OLE32.DLL) should call OLE's task allocator (by retrieving
//  the task allocator by calling CoGetMalloc API).
//
// (2) A shell extension which does not call any OLE API (i.e., not linked
//  with OLE32.DLL) should call the shell task allocator API (defined
//  below), so that the shell can quickly loads it when OLE32.DLL is not
//  loaded by any application at that point.
//
// Notes:
//  In next version of Windowso release, SHGetMalloc will be replaced by
// the following macro.
//
// #define SHGetMalloc(ppmem)   CoGetMalloc(MEMCTX_TASK, ppmem)
//
//===========================================================================
</pre>
<p>
(Yes, those typos "guild" and "Windowso" have been there since 1995.)
</p>
<p>
This discussion strongly hints at what's going on.
</p>
<p>
When Windows&nbsp;95 was being developed, computers typically had
just 4MB of memory.  (The cool people got 8MB.)
But Explorer was also heavily reliant upon COM for its shell extension
architecture, and loading OLE32.DLL into memory was a significant kick
in the teeth.  Under such tight memory conditions,
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/archive/2003/10/10/55256.aspx">
even the loss of 4K of memory was noticeable</a>.
</p>
<p>
The solution: Play "OLE Chicken".
</p>
<p>
The shell, it turns out, didn't use very much of COM:
The only objects it supported were in-process apartment-threaded
objects with no marshalling.
So the shell team wrote a "mini-COM" that supported only those operations
and use it instead of the real thing.
(It helped that one of the high-ranking members of
the shell team was a COM super-expert.)
The shell had
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/functions/shgetmalloc.asp">
its own miniature task allocator</a>,
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/functions/shcocreateinstance.asp">
its own miniature binder</a>,
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/functions/shdodragdrop.asp">
its own miniature drag-drop loop</a>,
everything it needed <strong>provided</strong>
you didn't run any other programs that used OLE32.
</p>
<p>
Once some other program that used OLE32 started running, you 
had a problem: There were now two separate versions of OLE in the system:
the real thing and the fake version inside the shell.
Unless something was done, you wouldn't be able to interoperate
between real-COM and fake-shell-COM.
For example, you wouldn't be able to drag/drop data between Explorer
(using fake-shell-COM)
and a window that was using real-COM.
</p>
<p>
The solution: With the help of other parts of the system, the shell detected
that "COM is now in the building" once anybody loaded OLE32.DLL,
and it and transferred all the information
it had been managing on its own into the world of real COM.
Once it did this, all the shell pseudo-COM functions switched to
real-COM as well.
For example, once OLE32.DLL got loaded, calls to the shell's
fake-task-allocator just went to the real task allocator.
</p>
<p>
But what is "OLE Chicken"?
This is another variation of the various
"chicken"-type games, perhaps the most famous of which is
<a HREF="https://web.archive.org/web/20040729081330/http://msdn.microsoft.com/library/en-us/dnstone/html/stone041999.asp">
Schedule Chicken</a>.
In "OLE Chicken", each program would avoid loading OLE32.DLL
as long as possible, so that it wouldn't be the one blamed for
the long pause
as OLE32.DLL got itself off the ground and ready for action.
(Remember, we're talking 1995-era machines where allocating 32K would
bring the wrath of the performance team upon your head.)
</p>
<p>
Okay, so let's look at that comment block again.
</p>
<p>
The opening paragraph mentions the possibility that a shell extension
does not itself link with OLE32.DLL.
Option&nbsp;(1) discusses a shell extension that does use OLE32,
in which case it should use the official OLE functions like
CoGetMalloc.
But Option&nbsp;(2) discusses a shell extension that does not use OLE32.
Those shell extensions are directed to use the shell's fake-COM functions
like SHGetMalloc, instead of the real-COM functions, so that no new
dependency on OLE32 is created.
Therefore, if OLE32 is not yet loaded, loading these
shell extensions will also not cause OLE32 to be loaded,
thereby saving the cost of loading and initializing OLE32.DLL.
</p>
<p>
So the completion of our diagram for 1995-era programs would be
something like this:
</p>
<div STYLE="padding-left: 3em">
<p>
Before OLE32.DLL is loaded:
</p>
<table BORDER=0>
<tr>
<td ALIGN=center COLSPAN=3
        STYLE="border-top: solid .75pt black;
               border-left: solid .75pt black;
               border-right: solid .75pt black;">Shell task allocator<br>
    </td>
<td></td>
<td ALIGN=center COLSPAN=3
        STYLE="border-top: solid .75pt black;
               border-left: solid .75pt black;
               border-right: solid .75pt black;">OLE task allocator<br>
    </td>
</tr>
<tr>
<td COLSPAN=7 HEIGHT=3></td>
</tr>
<tr>
<td STYLE="border: solid .75pt black">SHAlloc/<br>SHFree</td>
<td>=</td>
<td STYLE="border: solid .75pt black">SHGetMalloc</td>
<td>&nbsp;<font SIZE=+3>&ne;</font>&nbsp;</td>
<td STYLE="border: solid .75pt black">CoGetMalloc</td>
<td>=</td>
<td STYLE="border: solid .75pt black">CoTaskMemAlloc/<br>CoTaskMemFree</td>
</tr>
</table>
<p>
After OLE32.DLL is loaded:
</p>
<table BORDER=0>
<tr>
<td ALIGN=center COLSPAN=3
        STYLE="border-top: solid .75pt black;
               border-left: solid .75pt black;
               border-right: solid .75pt black;">Shell task allocator<br>
    </td>
<td></td>
<td ALIGN=center COLSPAN=3
        STYLE="border-top: solid .75pt black;
               border-left: solid .75pt black;
               border-right: solid .75pt black;">OLE task allocator<br>
    </td>
</tr>
<tr>
<td COLSPAN=7 HEIGHT=3></td>
</tr>
<tr>
<td STYLE="border: solid .75pt black">SHAlloc/<br>SHFree</td>
<td>=</td>
<td STYLE="border: solid .75pt black">SHGetMalloc</td>
<td>&nbsp;<font SIZE=+3>=</font>&nbsp;</td>
<td STYLE="border: solid .75pt black">CoGetMalloc</td>
<td>=</td>
<td STYLE="border: solid .75pt black">CoTaskMemAlloc/<br>CoTaskMemFree</td>
</tr>
</table>
</div>
<p>
The final "Note" hints at the direction the shell intended to go.
Eventually, loading OLE32.DLL would not be as painful as it was
in Windows&nbsp;95, and the shell can abandon its fake-COM and just
use the real thing.  At this point, asking for the shell task allocator
would become the same as asking for the COM task allocator.
</p>
<p>
That time actually arrived a long time ago.
The days of 4MB machines are now the stuff of legend.
The shell has ditched its fake-COM and now just uses real-COM everywhere.
</p>
<p>
Therefore,
<strong>the diagram today is the one with the equals-sign</strong>.
All four functions are interchangeable in Windows XP and beyond.
</p>
<p>
What if you want to run on older systems?  Well, it is always
acceptable to use CoTaskMemAlloc/CoTaskMemFree.  Why?  You can
puzzle this out logically.
Since those functions are exported from OLE32.DLL, the fact that
you are using them means that OLE32.DLL is loaded, at which point
the "After" diagram above with the equals sign kicks in, and everything
is all one big happy family.
</p>
<p>
The case where you need to be careful is if your DLL does
<strong>not</strong>
link to OLE32.DLL.
In that case, you don't know whether you are in the
"Before" or "After" case, and you have to play it safe and
use the shell task allocator for the things that are documented
as using the shell task allocator.
</p>
<p>
I hope this discussion also provides the historical background
of the function
<a HREF=http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/functions/shloadole.asp>
SHLoadOLE</a>, which today doesn't do anything
because OLE is already always loaded.
But in the old days, this signalled to the shell,
"Okay, now is the time to
<a HREF="http://catb.org/~esr/jargon/html/B/brain-dump.html">
brain-dump</a> your fake-COM into the real-COM."</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-190523">
				<div id="div-comment-190523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.winwonk.com' rel='external nofollow' class='url'>Kim Gr&#228;sman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040705-00/?p=38573#comment-190523">
			July 5, 2004 at 7:46 am</a>		</div>

		<p>Very interesting!</p>
<p>Who called SHLoadOLE? OLE32.dll itself?</p>
<p>And wasn&#8217;t there a problem in a situation like this:</p>
<p>LPVOID* pv = NULL;<br />
<br />hr = SHGetSomeShellData(&amp;pv);<br />
<br />if(SUCCEEDED(hr))<br />
<br />{<br />
<br />  LoadLibrary(&quot;OLE32.dll&quot;);<br />
<br />  SHFree(pv); // which allocator?<br />
<br />}</p>
<p>&#8212; Kim</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-190533">
				<div id="div-comment-190533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040705-00/?p=38573#comment-190533">
			July 5, 2004 at 7:47 am</a>		</div>

		<p>Wow, thanks for a great entry on something that I&#8217;ve always wondered about.  Of course, now we&#8217;ve seen a few &quot;Windowso&quot; releases and I suppose for compatiblity we never will see SHGetMalloc replaced by a macro, will we&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-190563">
				<div id="div-comment-190563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">some1</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040705-00/?p=38573#comment-190563">
			July 5, 2004 at 8:44 am</a>		</div>

		<p>About &quot;Windowso&quot; thing. I was enlighted by one russin hacker that, that the last &quot;o&quot; is in fact (R) sign, just in some old charset.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-190593">
				<div id="div-comment-190593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040705-00/?p=38573#comment-190593">
			July 5, 2004 at 10:03 am</a>		</div>

		<p>Kim: The shell tried to keep its allocator in sync with the OLE allocator, so &quot;most of the time&quot; you were fine, but there were some cases (such as having an active IMallocSpy) that ddn&#8217;t work. So the answer is, &quot;Yes, there is a problem if you do that. So don&#8217;t do that.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-190653">
				<div id="div-comment-190653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040705-00/?p=38573#comment-190653">
			July 5, 2004 at 11:20 am</a>		</div>

		<p>&quot;In &#8216;OLE Chicken&#8217;, each program would avoid loading OLE32.DLL as long as possible, so that it would be the one blamed for the long pause as OLE32.DLL got itself off the ground and ready for action.&quot;</p>
<p>Shouldn&#8217;t that be &quot;&#8230; so that it wouldn&#8217;t be the one blamed&#8230;&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-190673">
				<div id="div-comment-190673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://feldgendler.livejournal.com/' rel='external nofollow' class='url'>Alexey Feldgendler</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040705-00/?p=38573#comment-190673">
			July 5, 2004 at 12:02 pm</a>		</div>

		<p>If you search Google for &quot;windowso&quot;, you&#8217;ll find pretty much about Windowso 95, Windowso NT and such. ;-)</p>
<p>Thanks for the &quot;schedule checken&quot; link, I enjoyed it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-190733">
				<div id="div-comment-190733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.xxeo.com/' rel='external nofollow' class='url'>Dru Nelson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040705-00/?p=38573#comment-190733">
			July 5, 2004 at 5:46 pm</a>		</div>

		<p>So good! Great post Raymond</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-190843">
				<div id="div-comment-190843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.trilithium.com/' rel='external nofollow' class='url'>Johan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040705-00/?p=38573#comment-190843">
			July 6, 2004 at 12:53 am</a>		</div>

		<p>Until you wrote that it was a typo, I had no trouble what so ever believing there was an &quot;OLE 2.0 programming guild&quot; out there somewhere, that you presumably had to contact for things such as task allocator definitions. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-190853">
				<div id="div-comment-190853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040705-00/?p=38573#comment-190853">
			July 6, 2004 at 2:20 am</a>		</div>

		<p>How can one justify such an ugly hack just to save 4k ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-190803">
				<div id="div-comment-190803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">alkama</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040705-00/?p=38573#comment-190803">
			July 5, 2004 at 11:33 pm</a>		</div>

		<p>Explained like that the API jungle starts to make some sense;) The dev world need more ppl like you, but in the help writing teams!<br />
<br />*clap clap clap*</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-190873">
				<div id="div-comment-190873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040705-00/?p=38573#comment-190873">
			July 6, 2004 at 6:48 am</a>		</div>

		<p>Why didn&#8217;t the OLE team create a lite DLL with the functions that the shell team needed, stubbing out those function in OLE32.DLL to call the lite DLL? That would solve all issues in a much simpler way, or am I mistaken?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-190913">
				<div id="div-comment-190913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.winwonk.com' rel='external nofollow' class='url'>Kim Gr&#228;sman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040705-00/?p=38573#comment-190913">
			July 6, 2004 at 7:19 am</a>		</div>

		<p>Raymond: Thanks, that makes sense. So, who called SHLoadOLE?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-191123">
				<div id="div-comment-191123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ilm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040705-00/?p=38573#comment-191123">
			July 6, 2004 at 10:47 am</a>		</div>

		<p>How does ILFree fit into the picture? Is it really the same as SHFree?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-191313">
				<div id="div-comment-191313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wilfried Wieser</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040705-00/?p=38573#comment-191313">
			July 6, 2004 at 3:39 pm</a>		</div>

		<p>Ah &#8211; shlobj.h &#8211; this has been my favorite Win32 SDK header for a very long time (exactly because of all those verbose comments). I even remember vaguely a version from 1993 (I think I got it at the PDC&#8217;93 but I&#8217;m not shure), so maybe the typos are even older.</p>
<p>I also seem to remember that the 1993 Version of IShellFolder was not exactly the same as the final version, I think it was derived from IOleContainer back then, that is, ParseDisplayName actually returned a moniker (instead of an ITEMIDLIST). </p>
<p>Maybe the switch from live objects (monikers) to just state (ITEMIDLISTs) was motivated by memory restrictions as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-192003">
				<div id="div-comment-192003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">chrisg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040705-00/?p=38573#comment-192003">
			July 8, 2004 at 12:49 am</a>		</div>

		<p>in the debug build ILFree() asserts that the thing is a valid pidl before calling CoTaskMemFree().</p>
<p>so ILFree() == SHFree() == CoTaskMemFree().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-429503">
				<div id="div-comment-429503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/10/11/816924.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040705-00/?p=38573#comment-429503">
			October 11, 2006 at 10:00 am</a>		</div>

		<p>A little folksy jargon.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

