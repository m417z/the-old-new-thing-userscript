<html>
<head>
<title>Multithreaded UI code may be just as hard as multithreaded non-UI code, but the consequences are different</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Multithreaded UI code may be just as hard as multithreaded non-UI code, but the consequences are different</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 16, 2011 / year-entry #119</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>22</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Commenter Tim Smith claims that the problems with multithreaded UI code are not significantly more than plain multithreaded code. While that may be true on a theoretical level, the situations are quite different in practice. Regardless of whether your multithreaded code does UI or not, you have to deal with race conditions, synchronization, cache coherency,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Commenter Tim Smith claims that <a href="http://blogs.msdn.com/oldnewthing/archive/2008/04/24/8420242.aspx#8424138"> the problems with multithreaded UI code are not significantly more than plain multithreaded code</a>. While that may be true on a theoretical level, the situations are quite different in practice.</p>
<p> Regardless of whether your multithreaded code does UI or not, you have to deal with race conditions, synchronization, cache coherency, priority inversion, all that mulitthreaded stuff. </p>
<p> The difference is that multithreaded problems with non-UI code are often rare, relying on race conditions and other timing issues. As a result, you can often get away with a multithreaded bug, because it may shows up in practice only rarely, if ever. (On the other hand, when it does show up, it's often impossible to diagnose.) </p>
<p> If you mess up multithreaded UI code, the most common effect is a hang. The nice thing about this is that it's easier to diagnose because everything has stopped and you can try to figure out who is waiting for what. On the other hand, the problems also occur with much more frequency. </p>
<p> So it's true that the problems are the same, but the way they manifest themselves are very different. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-913213">
				<div id="div-comment-913213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Biff Turkle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913213">
			May 16, 2011 at 7:14 am</a>		</div>

		<p>Having a bug show up early and often is a GOOD THING. &nbsp;I don&#39;t like bugs that only show up 6 months down the road. &nbsp;In Production.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-913223">
				<div id="div-comment-913223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sukru</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913223">
			May 16, 2011 at 8:22 am</a>		</div>

		<p>@Biff Turkle, I wholly agree. It&#39;s better to get early warning, and that&#39;s why we have strict compilers, and unit tests, and even coverage tests for those unit tests.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joshuaganes even thread-even depth-1" id="comment-913233">
				<div id="div-comment-913233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913233">
			May 16, 2011 at 8:44 am</a>		</div>

		<p>All the more reason to avoid multi-threaded code like the plague. Indeed, sometimes it is unavoidable. This makes me sad. With the speed of today&#39;s computers, multi-processed solutions can sometimes be a decent compromise.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-913253">
				<div id="div-comment-913253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter da Silva</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913253">
			May 16, 2011 at 9:30 am</a>		</div>

		<p>Also, for most programmers UI code has been about the only time they will have to deal with multithreaded code. Even if the framework is ostensibly single-threaded, you often find callbacks or other interrupt-like mechanisms being used to try and improve performance over a classical single-event-loop model, because keeping an event-loop working fast is hard.</p>
<p>I really think the solution is to teach people how to write fast single-loop code, use single-loop frameworks, and only going to multithreaded code when that fails.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-913273">
				<div id="div-comment-913273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">poday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913273">
			May 16, 2011 at 9:34 am</a>		</div>

		<p>Josh, I have to disagree. &nbsp;For good or ill computers are moving to more and more cores. &nbsp;It makes me sad when I see one core pegged while the other 7 cores are idle. &nbsp;Multi-threading is the future and our only option is to start trying to wrangle it. &nbsp;Our tools and languages will/should go a long way in simplifying the problem (say to warn about deadlock) but they won&#39;t be able to handle architectural problems. &nbsp;Beginning to understand the issues now will mean a less confusing world later.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-913283">
				<div id="div-comment-913283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913283">
			May 16, 2011 at 9:48 am</a>		</div>

		<p>@poday</p>
<p>In principle I agree, however it&#39;s important to note that the way threading had been handled historically generally involved mutual exclusion. &nbsp;Such cross-communications don&#39;t work in GPU-type environments, which has forced new threading models. &nbsp;So yes, threading will become more pervasive, but also new algorithmic approaches will become more pervasive as well, including lock and wait free approaches and also software transaction memory approaches. &nbsp;These become important not only for GPU computation, but also for large scale computation as well, since they help to guarantee system-wide progress.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joshuaganes even thread-even depth-1" id="comment-913293">
				<div id="div-comment-913293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913293">
			May 16, 2011 at 9:52 am</a>		</div>

		<p>@poday &#8211; Everything is contextual. If you have a program with long-running, CPU-bound processing, then multi-threading or multi-processing is definitely the way to go to increase efficiency. If you have a program with lots of user interaction and occasional processing, then you want to streamline the user interface as much as possible. It&#39;s a lot easier to prevent race conditions when there is no race to begin with.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-913303">
				<div id="div-comment-913303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913303">
			May 16, 2011 at 11:56 am</a>		</div>

		<p>Of course there are different degrees of multi-threaded-ness in UI code. Perhaps the easiest kind is just where a process (like Explorer) has different independent windows that each is owned by its own thread. Since each is independent, there is not going to be many problems with the threads interacting and causing problems.</p>
<p>The most common kind is probably where you have one thread managing the UI and another thread doing work and updating the UI (e.g. incrementing a progress bar). Although it requires care, this type of multithreading is not too difficult if you have experience with writing multithreaded code.</p>
<p>I&#39;d say the worst is when you have a single window that just gets random stuff done to it by random (e.g. threadpool) threads. Perhaps one thread selects a brush into a DC and another thread draws with it. This should be avoided at all costs because the hassles just aren&#39;t worth it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-913313">
				<div id="div-comment-913313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Baldwin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913313">
			May 16, 2011 at 11:59 am</a>		</div>

		<p>And how exactly are you planning to keep the UI responsive without using multi-threading?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joshuaganes odd alt thread-odd thread-alt depth-1" id="comment-913323">
				<div id="div-comment-913323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913323">
			May 16, 2011 at 1:21 pm</a>		</div>

		<p>To clarify my previous posts: I advocate minimizing multi-threaded logic without crippling your application. As I said previously, &quot;sometimes it is unavoidable.&quot; In these cases, you should attempt to keep the interaction between threads to a minimum to isolate the code segments with potential for multi-threading bugs. I don&#39;t know about the rest of you, but my brain is feeble when trying to decipher multi-threaded logic. Choose the simplest approach to get the job done. In certain contexts, multi-threading will be the simplest approach to meet the requirements of flexibility and speed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-913353">
				<div id="div-comment-913353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913353">
			May 16, 2011 at 6:11 pm</a>		</div>

		<p>@Baldwin: In VB6 days when we don&#39;t have multithread, we add a lot of DoEvents at code fragments to ensure the message queue have time to do the tasks.</p>
<p>Yes, it&#39;s slower that way, but no problem in keeping the UI response as long as there aren&#39;t some kind of blocking operation (like file I/Os) take a long time to finish.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-913333">
				<div id="div-comment-913333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913333">
			May 16, 2011 at 1:51 pm</a>		</div>

		<p>poday: Most of the time, programs with long amounts of high CPU usage aren&#39;t doing legitimate computation; they&#39;re doing something easy but in a really stupidly implemented way. I&#39;m *glad* the kinds of programmers who write that stuff haven&#39;t learned about threads yet, or &quot;serial bubble sort ties up 1 core for 10 minutes, you can still do stuff with the other 7&quot; would become &quot;parallel bubble sort, with lots of synchronization overhead, ties up all 8 cores for 20 minutes&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-913343">
				<div id="div-comment-913343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913343">
			May 16, 2011 at 4:54 pm</a>		</div>

		<p>@Joshua Games, et al: My first response when someone says &quot;Woo! We&#39;ll make it multi-threaded&quot;, is always &quot;Do you *need* to do that? Really?&quot; Which is a specific version of Keep It Simple, Stupid.</p>
<p>As Raymond says multi-threading programming is hard, why introduce stress into your life if there&#39;s an alternative.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-913363">
				<div id="div-comment-913363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913363">
			May 17, 2011 at 3:23 am</a>		</div>

		<p>@Jeff: This is what the &quot;Set Affinity&quot; process option is for ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-913373">
				<div id="div-comment-913373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913373">
			May 17, 2011 at 5:05 am</a>		</div>

		<p>@Jeff: Be honest. The programmers using bubble sort for large data sets arent going to write a parallel version. They might spawn 10 different sorts simultaneously, but they will never ever be able to parallelize bubble.</p>
<p>To be quite honest, I&#39;m not entirely sure how bubble could be parallelized anyways. Seems to me that it would require a set of merges and at that point you&#39;ve essentially got a merge sort, a top-notch easily parallelized sort that is very hard to beat in practice</p>
<p>@Cheong: C# and VB.NET are both replacing the need for DoEvents even for single-threaded constructions. There is currently a preview of things to come called &#39;Async&#39; .. a search for &#39;async ctp&#39; (community technology preview) will bring you right to it with a download link. This is a language extension for both and not part of the framework, so it requires compiler support and probably wont be found in other .NET languages. It also applies to multi-threaded programming and I must say that it makes that quite a bit more bearable (eliminates callback spaghetti)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-913383">
				<div id="div-comment-913383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Just Another Code Monkey</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913383">
			May 17, 2011 at 6:46 am</a>		</div>

		<p>Problems with multithreaded code (UI or not) are kinda fun to debug. But dealing with COM in a multithreaded environment is some pain. I wonder why there aren&#39;t (any) articles related to COM here. ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-913483">
				<div id="div-comment-913483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913483">
			May 17, 2011 at 11:56 am</a>		</div>

		<p>I don&#39;t know but I was glad to remove our last in-house COM component. Our only remaining use of COM is interop to MS-Office as there is no other API for this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-913533">
				<div id="div-comment-913533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913533">
			May 17, 2011 at 4:43 pm</a>		</div>

		<p>@Cheong: &quot;blocking operations (like file I/Os)&quot;&#8230; I/O (except paging) aren&#39;t blocking operations. &nbsp;The very first thing you do when trying to stay single-threaded is learn the overlapped I/O model.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-913543">
				<div id="div-comment-913543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913543">
			May 17, 2011 at 5:40 pm</a>		</div>

		<p>@Just Another Code Monkey: I think Raymond has covered some aspect here&#8230; as long as you&#39;re writing COM with UI, use STA model, don&#39;t use MTA.</p>
<p>For others replying me, notice what I said applies to VB6 days, when most programmers does not write program with concept of multithreading in mind. DoEvents() is the commonly used way to keep UI responsive those days.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-913553">
				<div id="div-comment-913553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913553">
			May 18, 2011 at 12:03 am</a>		</div>

		<p>@Ben Voigt: True, async I/O allows you to single thread blocking operations. However, depending on your processing model, it may be easier to maintain and simpler to understand id you multithread and let the I/O thread block and process &quot;naturally&quot;. Otherwise you can fall prey to various caveats.</p>
<p>And nevermind those in the end that go through the motions only to end up with multithreading anyhow because they started having to handle all the I/O in another thread.</p>
<p>Sometimes it&#39;s simpler to do the file I/O-process loop in another thread rather than start I/O, do other eventing, get notification, handle I/O and file data, process.</p>
<p>And in some OSes, the async I/O is effectively an interrupt with the program state in an unknown area. Synchronizing is a pain, and elaborate schemes cooked up to pass data around and maintain system state, etc.</p>
<p>Spaghetti code can result.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-913943">
				<div id="div-comment-913943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-913943">
			May 19, 2011 at 1:34 am</a>		</div>

		<p>I thought we already covered this. You can&#39;t call CreateFile in async mode (because it doesn&#39;t take a file handle), hence you always have to call it in a separate thread to maintain a responsive UI. In fact, only a few file operations are available in async mode (read/write, lock/unlock, etc.), while all others are synchronous. Most anything you want to do concerning metadata is synchronous.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-914333">
				<div id="div-comment-914333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110516-00/?p=10663#comment-914333">
			May 20, 2011 at 9:12 am</a>		</div>

		<p>&quot;To be quite honest, I&#39;m not entirely sure how bubble could be parallelized anyways.&quot;</p>
<p>start eight copies of the algorithm, with lots of locking to make sure they don&#39;t step on each other.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

