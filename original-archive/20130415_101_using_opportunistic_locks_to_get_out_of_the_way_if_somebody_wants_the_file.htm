<html>
<head>
<title>Using opportunistic locks to get out of the way if somebody wants the file</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Using opportunistic locks to get out of the way if somebody wants the file</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 15, 2013 / year-entry #102</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>24</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Opportunistic locks allow you to be notified when somebody else tries to access a file you have open. This is usually done if you want to use a file provided nobody else wants it. For example, you might be a search indexer that wants to extract information from a file, but if somebody opens the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Opportunistic locks allow you to be notified when somebody else
tries to access a file you have open.
This is usually done if you want to use a file
provided nobody else wants it.
</p>
<p>
For example, you might be a search indexer that wants to extract
information from a file, but if somebody opens the file for writing,
you don't want them to get <i>Sharing Violation</i>.
Instead, you want to stop indexing the file and let the other person
get their write access.
</p>
<p>
Or you might be a file viewer application
like
<a HREF="http://msdn.microsoft.com/en-US/library/f7dy01k1(v=VS.80).aspx">
ildasm</a>,
and you want to let the user update the file (in ildasm's case,
rebuild the assembly) even though you're viewing it.
(Otherwise, they will get an error from the compiler saying
"Cannot open file for output.")
</p>
<p>
Or you might be Explorer, and you want to abandon generating
the preview for a file
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2012/09/07/10347136.aspx">
if somebody tries to delete it</a>.
</p>
<p>
(Rats I fell into the trap of trying to motivate a Little Program.)
</p>
<p>
Okay, enough motivation. Here's the program:
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;winioctl.h&gt;
#include &lt;stdio.h&gt;

OVERLAPPED g_o;

REQUEST_OPLOCK_INPUT_BUFFER g_inputBuffer = {
  REQUEST_OPLOCK_CURRENT_VERSION,
  sizeof(g_inputBuffer),
  OPLOCK_LEVEL_CACHE_READ | OPLOCK_LEVEL_CACHE_HANDLE,
  REQUEST_OPLOCK_INPUT_FLAG_REQUEST,
};

REQUEST_OPLOCK_OUTPUT_BUFFER g_outputBuffer = {
  REQUEST_OPLOCK_CURRENT_VERSION,
  sizeof(g_outputBuffer),
};

int __cdecl wmain(int argc, wchar_t **argv)
{
  g_o.hEvent = CreateEvent(nullptr, FALSE, FALSE, nullptr);

  HANDLE hFile = CreateFileW(argv[1], GENERIC_READ,
    FILE_SHARE_READ, nullptr, OPEN_EXISTING,
    FILE_FLAG_OVERLAPPED, nullptr);
  if (hFile == INVALID_HANDLE_VALUE) {
    return 0;
  }

  DeviceIoControl(hFile, FSCTL_REQUEST_OPLOCK,
      &amp;g_inputBuffer, sizeof(g_inputBuffer),
      &amp;g_outputBuffer, sizeof(g_outputBuffer),
      nullptr, &amp;g_o);
  if (GetLastError() != ERROR_IO_PENDING) {
    // oplock failed
    return 0;
  }

  DWORD dwBytes;
  if (!GetOverlappedResult(hFile, &amp;g_o, &amp;dwBytes, TRUE)) {
    // oplock failed
    return 0;
  }

  printf("Cleaning up because somebody wants the file...\n");
  Sleep(1000); // pretend this takes some time

  printf("Closing file handle\n");
  CloseHandle(hFile);

  CloseHandle(g_o.hEvent);

  return 0;
}
</pre>
<p>
Run this program with the name of an existing file
on the command line,
say
<code>scratch x.txt</code>.
The program will wait.
</p>
<p>
In another command window, run the command
<code>type x.txt</code>.
The program keeps waiting.
</p>
<p>
Next, run the command
<code>echo hello &gt; x.txt</code>.
Now things get interesting.
</p>
<p>
When the command prompt opens <code>x.txt</code> for writing,
the <code>Device&shy;Io&shy;Control</code> call completes.
At this point we print the <tt>Cleaning up...</tt> message.
</p>
<p>
To simulate the program taking a little while to clean up,
we sleep for one second.
Observe that the command prompt
<i>has not yet returned</i>.
Instead of immediately failing the request to open for writing
with a sharing violation,
the kernel puts the open request on hold to give our program
time to clean up and close our handle.
</p>
<p>
Finally, our simulated clean-up is complete, and we close
the handle.
At this point, the kernel allows the command processor to proceed
and open the file for writing so it can write <tt>hello</tt>
into it.
</p>
<p>
That's the basics of opportunistic locks,
but your program will almost certainly not be structured this way.
You will probably not wait synchronously on the overlapped I/O
but rather have the completion queued up to a completion function,
an I/O completion port,
or have a thread pool task listen on the event handle.
When you do that, remember that you need to keep
the <code>OVERLAPPED</code> structure as well as the
<code>REQUEST_<wbr>OPLOCK_<wbr>INPUT_<wbr>BUFFER</code>
and
<code>REQUEST_<wbr>OPLOCK_<wbr>OUTUT_<wbr>BUFFER</code>
structures valid until the I/O completes.
</p>
<p>
(You may find the
<code>Cancel&shy;Io</code> function handy to try to accelerate
the clean-up of the file handle and any other actions that
are dependent upon it.)
</p>
<p>
You can read more about
<a HREF="http://msdn.microsoft.com/library/aa365433.aspx">
opportunistic locks on MSDN</a>.
Note that there are limitations on explicitly-managed
opportunistic locks;
for example, they don't work across the network.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1050133">
				<div id="div-comment-1050133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050133">
			April 15, 2013 at 7:15 am</a>		</div>

		<p>Doesn&#39;t this have some sort of race condition between CreateFileW and DeviceIOControl? What if someone tries to delete the file while you are opening it?</p>
<p>When I was looking into Oplocks I found the FILE_OPEN_REQUIRING_OPLOCK flag for NtCreateFile but was put off because it&#39;s defined in winternl.h &#8230; so I wasn&#39;t sure if I should use it or not. It&#39;s documented at <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/bb432380%28v=vs.85%29.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/bb432380%28v=vs.85%29.aspx</a> at least, but does that mean I can/should use it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1050143">
				<div id="div-comment-1050143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">OldFart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050143">
			April 15, 2013 at 7:18 am</a>		</div>

		<p>You forgot&#8230;</p>
<p>Or you might be an anti-virus vendor and you don&#39;t want to cause Visual Studio builds to randomly fail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1050153">
				<div id="div-comment-1050153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050153">
			April 15, 2013 at 8:01 am</a>		</div>

		<p>IIRC, oplocks are also used on the SMB/CIFS protocol, so clients can cache parts of the file and be told by the server if anything changes.</p>
<p>@OldFart: not only Visual Studio builds. Other tools are also affected by programs with that broken behavior. For instance, git has code which retries a few times (with an increasing delay between each retry) when it encounters a sharing violation, and as a last resort warns the user and asks if it should retry again (compat/mingw.c on the original git if anyone wants to look; I do not know if the libgit2 Microsoft is going to use also has retry loops). I believe I saw another program also adding retry loops on sharing violations, but cannot recall which one it was at the moment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1050163">
				<div id="div-comment-1050163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050163">
			April 15, 2013 at 8:10 am</a>		</div>

		<p>@OldFart: What are you smoking today? Antivirus vendors don&#39;t care.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1050173">
				<div id="div-comment-1050173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050173">
			April 15, 2013 at 8:15 am</a>		</div>

		<p>Sorry for double posting, but I just thought of this.</p>
<p>The rule should be: if the file is not yours (either an internal file or something the user explicitly told you to open), you should never open it in such a way that would cause other programs to get a sharing violation error.</p>
<p>Is there a wiki somewhere with a list of rules like these (which Raymond once called &quot;taxes&quot;; see <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2005/08/22/454487.aspx" rel="nofollow">blogs.msdn.com/&#8230;/454487.aspx</a>)? It would be really useful, especially to people who are new to Win32 development or only develop for Win32 rarely.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1050183">
				<div id="div-comment-1050183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050183">
			April 15, 2013 at 9:20 am</a>		</div>

		<p>I once had a program that added retry loops on sharing violations. It was horribly written and completely non-portable in that it hooked the SysMessageBox function and looked for the words &quot;sharing violation&quot; and then just returned the &quot;retry&quot; result 399 out of 400 times. (This was 16-bit Windows; I may have the name of the function wrong, and it no longer exists anyway.)</p>
<p>That program was an upgrade of sorts to a hardware solution in the form of a paper clip bent into a hook that one could slide under the &#39;5&#39; key to hold the &#39;R&#39; key down while building from an ill-conceived shared source directory in the days before widespread version control software.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1050193">
				<div id="div-comment-1050193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050193">
			April 15, 2013 at 9:31 am</a>		</div>

		<p>Cesar: If a program opens a file for exclusive access, there&#39;s no way to open that file such that the program won&#39;t get an error. The only solution is oplocks. Of course, one could argue that in most cases programs don&#39;t need to open files for exclusive access, but that cat is already out of the bag.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1050213">
				<div id="div-comment-1050213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eugene</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050213">
			April 15, 2013 at 9:43 am</a>		</div>

		<p>Seems like the API would be simpler and free of the race condition mentioned by Zarat if CreateFile took a flag (in dwShareMode, I guess) which made kernel automatically put your handle into a &quot;lock broken&quot; mode when someone modifies the file. All (or most) operations on the handle would then fail with &quot;lock broken&quot; error code. This saves the writer waiting for the reader to stop, and frees the reader from having to with for async DeviceIoControl.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jader3rd even thread-even depth-1" id="comment-1050223">
				<div id="div-comment-1050223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/jader3rd' rel='external nofollow' class='url'>jader3rd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050223">
			April 15, 2013 at 9:51 am</a>		</div>

		<p>I wish that Windows implemented a way to wait for a file lock to be released. That way my code can request to open a file, but instead of an error code being returned that another process has the file opened, the call will block until I can get the file handle. It&#39;s annoying to have to write retry loops around so many calls to open a file handle.</p>
<p>In between all of the Anti Virus&#39;s, Content Indexers, and anything else that might have a File System Watcher on a directory I&#39;m adding/modifying files in, it&#39;d be really handy to have a blocking FileOpen call.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1050233">
				<div id="div-comment-1050233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050233">
			April 15, 2013 at 10:29 am</a>		</div>

		<p>@Joshua:</p>
<p>Looks like you haven&#39;t heard of lost files in VB6, caused by an antivirus interference.</p>
<div class="post">[<em>Joshua was being sarcastic. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1050253">
				<div id="div-comment-1050253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050253">
			April 15, 2013 at 10:50 am</a>		</div>

		<p>Also of note: If you don&#39;t disable oplocking, you will destroy any flat-file databases used by applications across the network, especially anything remotely related to dBase. (That means every accounting package available on the market, among other software.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1050263">
				<div id="div-comment-1050263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">me</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050263">
			April 15, 2013 at 11:10 am</a>		</div>

		<p>@cesar: SVN also has such a retry loop.</p>
<p>Interestingly, the retry loop is only present for native Win32 builds. For cygwin builds, it is not (at least, at the time when I looked at it and even filled a bug report, some years ago).</p>
<p>Unfortunately, the SVN developers did not want to add this loop for Cygwin.</p>
<p>OTOH, Cygwin did not want to add such a loop generally into the system.</p>
<p>Thus, the experience with cygwin was much worse than with native SVN. I had a Antivirus where you could not check out any repository that had more than some hundred files in it: You almost always got a sharing violation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1050273">
				<div id="div-comment-1050273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050273">
			April 15, 2013 at 11:53 am</a>		</div>

		<p>I wish that anti-virus vendors knew how to use oplocks, and that Visual Studio didn&#39;t try to patch .exe files with mt.exe after they&#39;ve been created. &nbsp;That&#39;s what&#39;s failing &#8211; the linker just built an .exe, so the anti-virus program sees that a new .exe file has been written, and wants to scan it. &nbsp;It opens the file in order to scan it. &nbsp;Meanwhile, Visual Studio uses mt.exe in order to write the manifest to the .exe&#39;s resources. &nbsp;mt.exe tries to open the file for writing, but the anti-virus program is still reading the file &#8211; sharing violation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1050303">
				<div id="div-comment-1050303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050303">
			April 15, 2013 at 3:18 pm</a>		</div>

		<p>This was the first thing I found when I searched the web on this topic:</p>
<p>‘Windows networks support a feature called ‘opportunistic locking’ which provides some performance benefits when sharing small document files. &nbsp;With █████████’s database this feature provides very little benefit. &nbsp;What is worse, it can lead to data corruption, especially on busy networks. If you search the internet for the phrase ‘opportunistic locking’ you will find that we are not alone in this opinion.</p>
<p>To avoid data corruption you must disable the opportunistic locking feature by making changes to the registry of the file server and the workstations that access the █████████ database. If you have followed the standard █████████ installation procedures the installer will have made these changes for you.’</p>
<p>If I read this correctly, the software contains a bug where it uses an optlock where it shouldn&#39;t (or vice versa) and to make up for that the installer just generally disables optlocks without telling the user. Great.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1050313">
				<div id="div-comment-1050313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050313">
			April 15, 2013 at 3:31 pm</a>		</div>

		<p>I&#39;m more curious whether this was blocked out like so █████████ by Raymond or by AC than which program had this behavior (I didn&#39;t even bother the Google search).</p>
<p>I&#39;m of the opinion that is shared by the SQL Server team: putting databases on network fileshares is a bad idea, because we don&#39;t trust locks across the network.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1050343">
				<div id="div-comment-1050343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050343">
			April 16, 2013 at 4:16 am</a>		</div>

		<p>@Joshua: You can find all manner of application vendors willing to blame opportunistic locking (apparently without explanation). Also, it&#39;s not just anti-virus vendors who don&#39;t care; I know of an anti-virus product whose updater was blocked by a backup application. (The backup application has since switched to using volume shadow copy so the problem no longer arises.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1050353">
				<div id="div-comment-1050353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050353">
			April 16, 2013 at 6:15 am</a>		</div>

		<p>I can&#39;t quite tell what problem oplocks seem to cause with databases. It seems that the problem is really with client-side caching, which is enabled by oplocks. If you disable oplocks, you effectively disable the cache. Since you have to disable oplocks to prevent the undesired behavior, people blame oplocks?</p>
<p>Wouldn&#39;t using FILE_WRITE_THROUGH on your database file work just as well, though, while still allowing caching?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1050363">
				<div id="div-comment-1050363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050363">
			April 16, 2013 at 6:22 am</a>		</div>

		<p>Joshua, I blocked it out, because the last time I mentioned another company name, it got deleted and I got a stern note from Raymond.</p>
<p>Apparently Microsoft is afraid that people will sue them because of what an anonymous coward on the internet said.</p>
<div class="post">[<em>I have been informed that I am responsible for the content of comments posted on this site. So it&#39;s not Microsoft that&#39;s afraid. It&#39;s me. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1050373">
				<div id="div-comment-1050373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050373">
			April 16, 2013 at 6:30 am</a>		</div>

		<p>@Anonymous Coward</p>
<p>The text you posted appears in many places, including Microsoft&#39;s KB article on it&#39;s own Jet Database Engine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1050383">
				<div id="div-comment-1050383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050383">
			April 16, 2013 at 6:42 am</a>		</div>

		<p>Brian, I didn&#39;t know that. Oh sweet irony. Still, the problem appears to be fixed for Jet.</p>
<p>But I imagine that this may not be true for all databases. What I think goes wrong is that the database reads from the locking file and sees an old version of the file that indicates that a record is unlocked and then operates on it, while in reality another client thinks it holds a lock on the record. This would obviously result in data corruption.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1050553">
				<div id="div-comment-1050553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1050553">
			April 16, 2013 at 8:23 am</a>		</div>

		<p>@Gabe</p>
<p>The problem with the oplocks is that SMB and the oplocks don&#39;t guarantee consistency &#8211; of any sort. You can be in the middle of writing to the DB index, have your oplock broken by the server, have another application begin writing to the index, then complete your write at a later time, oblivious. So then you have part of the index at one point in time, and part of the index at a different point in time. Then you use the index to do a lookup, write out your data, only the index is wrong so you&#39;ve just overwritten a critical data structure and hosed the db.</p>
<p>In the case of a DBF, db locks are held at the end of the physical address space for a 32-bit file, and SMB ignores them for oplocking &#8211; so you can have two applications committing different data to the same row simultaneously, causing one of them to write the incorrect lengths. The next time you attempt to write to the DB, you have the same problem as earlier &#8211; since the data lengths are wrong, you overwrite a critical structure and destroy the row you were writing to, the previous row, write incorrect data to the index, and a future write will destroy the table itself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1051163">
				<div id="div-comment-1051163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1051163">
			April 17, 2013 at 1:50 pm</a>		</div>

		<p>Anon: Oplocks are designed to support caching. I don&#39;t see how that relates with your example of writing to an index, which would require file locks or byte range locks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1051373">
				<div id="div-comment-1051373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1051373">
			April 18, 2013 at 7:49 am</a>		</div>

		<p>Well Raymond, in that case you can rest assured. You&#39;re protected by the CDA or 2000/31/EC (depending on whether people idiotic enough to sue would decide to sue in Washington or in the UK) although there is an obligation to remove illegal material upon notification (in the US this isn&#39;t well tested in court; it may not be necessary but&#8230;).</p>
<p>Of course, I&#39;m just some person on the internet. But if your lawyer tells you something different, he&#39;d better have a damn good explanation.</p>
<div class="post">[<em>While that prevents another company from suing me, it does not prevent Microsoft from taking action as my employer for violating company policy. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1051393">
				<div id="div-comment-1051393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130415-00/?p=4663#comment-1051393">
			April 18, 2013 at 8:25 am</a>		</div>

		<p>So it was Microsoft after all. Thought so.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

