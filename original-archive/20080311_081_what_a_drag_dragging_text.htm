<html>
<head>
<title>What a drag: Dragging text</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What a drag: Dragging text</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 11, 2008 / year-entry #82</td></tr>
<tr><td><b>Tags:</b></td><td>code;what-a-drag</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">This week's mini-series was almost titled "It's the least you could do" because I'm going to try to do the absolute least amount of work to accomplish something interesting with drag and drop. The real purpose today is to lay some groundwork, but just to have something to show for our effort, I'll show you...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
This week's mini-series was almost titled
"It's the least you could do" because
I'm going to try to do the absolute least amount of work
to accomplish something interesting with drag and drop.
The real purpose today is to lay some groundwork,
but just to have something to show for our effort,
I'll show you how to drag text around.
</p>
<p>
We're going to need
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/12/06/275659.aspx">
the <code>CDropSource</code> class</a>
from an earlier series on drag-and-drop.
Also take the change from <code>CoInitialize</code> to
<code>OleInitialize</code> (and similarly
<code>CoUninitialize</code>),
as well as the line
</p>
<pre>
    HANDLE_MSG(hwnd, WM_LBUTTONDOWN, OnLButtonDown);
</pre>
<p>
Our mission for today is to create the tiniest data object possible.
</p>
<pre>
#include &lt;strsafe.h&gt; // for StringCchCopy
#include &lt;shlobj.h&gt; // (will be needed in future articles)

/* note: apartment-threaded object */
class CTinyDataObject : public IDataObject
{
public:
  // IUnknown
  STDMETHODIMP QueryInterface(REFIID riid, void **ppvObj);
  STDMETHODIMP_(ULONG) AddRef();
  STDMETHODIMP_(ULONG) Release();

  // IDataObject
  STDMETHODIMP GetData(FORMATETC *pfe, STGMEDIUM *pmed);
  STDMETHODIMP GetDataHere(FORMATETC *pfe, STGMEDIUM *pmed);
  STDMETHODIMP QueryGetData(FORMATETC *pfe);
  STDMETHODIMP GetCanonicalFormatEtc(FORMATETC *pfeIn,
                                     FORMATETC *pfeOut);
  STDMETHODIMP SetData(FORMATETC *pfe, STGMEDIUM *pmed,
                       BOOL fRelease);
  STDMETHODIMP EnumFormatEtc(DWORD dwDirection,
                             LPENUMFORMATETC *ppefe);
  STDMETHODIMP DAdvise(FORMATETC *pfe, DWORD grfAdv,
                    IAdviseSink *pAdvSink, DWORD *pdwConnection);
  STDMETHODIMP DUnadvise(DWORD dwConnection);
  STDMETHODIMP EnumDAdvise(LPENUMSTATDATA *ppefe);

  CTinyDataObject();

private:
  enum {
    DATA_TEXT,
    DATA_NUM,
    DATA_INVALID = -1,
  };

  int GetDataIndex(const FORMATETC *pfe);

private:
  ULONG m_cRef;
  FORMATETC m_rgfe[DATA_NUM];
};
</pre>
<p>
We'll learn more about those private members later.
Let's start with the boring stuff: The <code>IUnknown</code>
interface.
</p>
<pre>
HRESULT CTinyDataObject::QueryInterface(REFIID riid, void **ppv)
{
  IUnknown *punk = NULL;
  if (riid == IID_IUnknown) {
    punk = static_cast&lt;IUnknown*&gt;(this);
  } else if (riid == IID_IDataObject) {
    punk = static_cast&lt;IDataObject*&gt;(this);
  }

  *ppv = punk;
  if (punk) {
    punk-&gt;AddRef();
    return S_OK;
  } else {
    return E_NOINTERFACE;
  }
}

ULONG CTinyDataObject::AddRef()
{
  return ++m_cRef;
}

ULONG CTinyDataObject::Release()
{
  ULONG cRef = --m_cRef;
  if (cRef == 0) delete this;
  return cRef;
}
</pre>
<p>
Yawners.
The constructor is interesting, though,
because we use our constructor to build the array of
supported <code>FORMATETC</code>s which other members
will consult.
</p>
<pre>
void SetFORMATETC(FORMATETC *pfe, UINT cf,
                  TYMED tymed = TYMED_HGLOBAL, LONG lindex = -1,
                  DWORD dwAspect = DVASPECT_CONTENT,
                  DVTARGETDEVICE *ptd = NULL)
{
  pfe-&gt;cfFormat = (CLIPFORMAT)cf;
  pfe-&gt;tymed    = tymed;
  pfe-&gt;lindex   = lindex;
  pfe-&gt;dwAspect = dwAspect;
  pfe-&gt;ptd      = ptd;
}

CTinyDataObject::CTinyDataObject() : m_cRef(1)
{
  SetFORMATETC(&amp;m_rgfe[DATA_TEXT], CF_TEXT);
}
</pre>
<p>
Our data object contains only thing: plain text.
We set the clipboard format to <code>CF_TEXT</code>,
indicating that that's the data we have.
The type medium is <code>TYMED_HGLOBAL</code> because
we are going to provide the text in the form of an <code>HGLOBAL</code>.
The other fields are boilerplate that you will rarely have to change:
The aspect is <code>DVASPECT_CONTENT</code>
because we are going to provide the actual data content.
The <code>DVTARGETDEVICE</code> is <code>NULL</code>
because our content is device-independent.
And the <code>lindex</code> is <code>-1</code> because we're
going to provide all the data.
I've created a helper function which uses the boilerplate values
as default parameters.
</p>
<p>
The first member function that will use this helper array
is one that we will use quite a bit to do the preliminary
validation of incoming <code>FORMATETC</code> structures.
</p>
<pre>
int CTinyDataObject::GetDataIndex(const FORMATETC *pfe)
{
  for (int i = 0; i &lt; ARRAYSIZE(m_rgfe); i++) {
    if (pfe-&gt;cfFormat == m_rgfe[i].cfFormat &amp;&amp;
       (pfe-&gt;tymed    &amp;  m_rgfe[i].tymed)   &amp;&amp;
        pfe-&gt;dwAspect == m_rgfe[i].dwAspect &amp;&amp;
        pfe-&gt;lindex   == m_rgfe[i].lindex) {
      return i;
    }
  }
  return DATA_INVALID;
}
</pre>
<p>
The <code>GetDataIndex</code> method takes a candidate
<code>FORMATETC</code> and looks to see whether it matches
any of the ones in our table of supported formats, <code>m_rgfe</code>,
returning its index or <code>DATA_INVALID</code> indicating that
there was no match.
Note that we consider it a match if any of the requested type media
match the supported type media.
For example, the caller might pass
<code>TYMED_HGLOBAL | TYMED_STREAM</code>,
indicating that the caller can handle receiving either an
<code>HGLOBAL</code> or an <code>IStream</code>.
If our format matches either one, then we'll call that a success.
</p>
<p>
Before we continue, here's a handy helper function when working
with clipboard data:
It takes a block of memory and turns it into a <code>HGLOBAL</code>.</p>
<p>
<pre>
HRESULT CreateHGlobalFromBlob(const void *pvData, SIZE_T cbData,
                              UINT uFlags, HGLOBAL *phglob)
{
  HGLOBAL hglob = GlobalAlloc(uFlags, cbData);
  if (hglob) {
    void *pvAlloc = GlobalLock(hglob);
    if (pvAlloc) {
      CopyMemory(pvAlloc, pvData, cbData);
      GlobalUnlock(hglob);
    } else {
      GlobalFree(hglob);
      hglob = NULL;
    }
  }
  *phglob = hglob;
  return hglob ? S_OK : E_OUTOFMEMORY;
}
</pre>
<p>
The money in a data object lies in the <code>IDataObject::GetData</code>
method,
because this is where the data object client gets to see what all
the excitement is about.
</p>
<pre>
CHAR c_szURL[] = "http://www.microsoft.com/";

HRESULT CTinyDataObject::GetData(FORMATETC *pfe, STGMEDIUM *pmed)
{
  ZeroMemory(pmed, sizeof(*pmed));

  switch (GetDataIndex(pfe)) {
  case DATA_TEXT:
    pmed-&gt;tymed = TYMED_HGLOBAL;
    return CreateHGlobalFromBlob(c_szURL, sizeof(c_szURL),
                              GMEM_MOVEABLE, &amp;pmed-&gt;hGlobal);
  }

  return DV_E_FORMATETC;
}
</pre>
<p>
Wow, that was deceptively simple.
We ask <code>GetDataIndex</code> to look up the
<code>FORMATETC</code>;
if it's <code>DATA_TEXT</code>, we return the desired text
in the form of an <code>HGLOBAL</code>.
Otherwise, it's not supported, so we return an appropriate error code.
Note that <code>CF_TEXT</code> is specifically ANSI text.
For Unicode text, use <code>CF_UNICODE</code>.
</p>
<p>
Very closely related to <code>IDataObject::GetData</code> is
<code>IDataObject::QueryGetData</code>, which is just like
<code>GetData</code> except that it doesn't actually get the data.
It just says whether the data object contains data in the specified format.
</p>
<pre>
HRESULT CTinyDataObject::QueryGetData(FORMATETC *pfe)
{
  return GetDataIndex(pfe) == DATA_INVALID ? S_FALSE : S_OK;
}
</pre>
<p>
The only other interesting method is
<code>IDataObject::EnumFormatEtc</code>,
which can be asked to return
an enumerator that lists all the formats contained
in the data object.
</p>
<pre>
HRESULT CTinyDataObject::EnumFormatEtc(DWORD dwDirection,
                                       LPENUMFORMATETC *ppefe)
{
  if (dwDirection == DATADIR_GET) {
    return SHCreateStdEnumFmtEtc(ARRAYSIZE(m_rgfe), m_rgfe, ppefe);
  }
  *ppefe = NULL;
  return E_NOTIMPL;
}
</pre>
<p>
If the caller is asking for the formats that it can "get",
then we return an enumerator created from
the shell stock format enumerator.
Otherwise, we say that we don't have one.
</p>
<p>
The rest of the methods are just stubs.
</p>
<pre>
HRESULT CTinyDataObject::GetDataHere(FORMATETC *pfe,
                                     STGMEDIUM *pmed)
{
    return E_NOTIMPL;
}

HRESULT CTinyDataObject::GetCanonicalFormatEtc(FORMATETC *pfeIn,
                                               FORMATETC *pfeOut)
{
  *pfeOut = *pfeIn;
  pfeOut-&gt;ptd = NULL;
  return DATA_S_SAMEFORMATETC;
}

HRESULT CTinyDataObject::SetData(FORMATETC *pfe, STGMEDIUM *pmed,
                                                   BOOL fRelease)
{
    return E_NOTIMPL;
}

HRESULT CTinyDataObject::DAdvise(FORMATETC *pfe, DWORD grfAdv,
                     IAdviseSink *pAdvSink, DWORD *pdwConnection)
{
    return OLE_E_ADVISENOTSUPPORTED;
}

HRESULT CTinyDataObject::DUnadvise(DWORD dwConnection)
{
    return OLE_E_ADVISENOTSUPPORTED;
}

HRESULT CTinyDataObject::EnumDAdvise(LPENUMSTATDATA *ppefe)
{
    return OLE_E_ADVISENOTSUPPORTED;
}
</pre>
<p>
And we're done. Let's take it for a spin.
</p>
<pre>
void OnLButtonDown(HWND hwnd, BOOL fDoubleClick,
                   int x, int y, UINT keyFlags)
{
  IDataObject *pdto = new CTinyDataObject();
  if (pdto) {
    IDropSource *pds = new CDropSource();
    if (pds) {
      DWORD dwEffect;
      DoDragDrop(pdto, pds, DROPEFFECT_COPY, &amp;dwEffect);
      pds-&gt;Release();
    }
    pdto-&gt;Release();
  }
}
</pre>
<p>
Fire up Wordpad and then click in the client area of our
scratch program and drag and drop the invisible text
over to the Wordpad window.
Ta-da, the text is inserted.
</p>
<p>
This even works with Firefox to drag a URL into a Firefox window.
But it doesn't work for Internet Explorer.
We'll see why next time.
</p>
<p>
<b>Exercise</b>:
Why didn't we also have to set <code>CF_UNICODE</code> text?
</p>
<p>
<b>Pre-emptive Igor Levicki comment</b>:
"<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/03/07/8080064.aspx#8109899"
>Windows Vista should be dragged and dropped to the trash can</a>."</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-609033">
				<div id="div-comment-609033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-609033">
			March 11, 2008 at 10:05 am</a>		</div>

		<p>To the best of my knowledge, conversions between CF_UNICODE and CF_TEXT (both directions) are handled automatically by the OS.</p>
<p>The OS can &quot;lie&quot; and insert new FORMATETC structures that are supplied to the consumer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-609063">
				<div id="div-comment-609063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Green</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-609063">
			March 11, 2008 at 12:26 pm</a>		</div>

		<p>Hahaha, your Igor comment today is awesome!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-609073">
				<div id="div-comment-609073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-609073">
			March 11, 2008 at 12:41 pm</a>		</div>

		<p>Nitpick:</p>
<p>If CTinyDataObject::QueryInterface fails then the value of the ppv param should be left unchanged.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-609083">
				<div id="div-comment-609083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-609083">
			March 11, 2008 at 12:46 pm</a>		</div>

		<p>@Andrew: I&#8217;m sure Raymond&#8217;s told us in previous posts that many callers of QueryInterface don&#8217;t check the return value and base their worked/not-worked decision on the returned pointer. Safer to set it to NULL and crash callers who are trying to call through a bad pointer straight away.</p>
<p>Which one of us has been responsible for maintaining the shell and working round bugs in shell extensions?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-609093">
				<div id="div-comment-609093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Risto</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-609093">
			March 11, 2008 at 12:56 pm</a>		</div>

		<p>I find that the pre-emptive stuff totally deflates the waiting for any off-topic comments and I can concentrate better on the post!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-609143">
				<div id="div-comment-609143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-609143">
			March 11, 2008 at 1:56 pm</a>		</div>

		<p>&quot;Safer to set it to NULL and crash callers who are trying to call through a bad pointer straight away.&quot;</p>
<p>Are you sure you really want that?</p>
<p>&quot;I just installed this program and now whenever I turn on the computer there is some kind of error and then everything else on my screen dissapears&quot;</p>
<p>&quot;I find that the pre-emptive stuff totally deflates the waiting for any off-topic comments and I can concentrate better on the post!&quot;</p>
<p>You realize that by stating that you&#8217;ve made an offtopic comment, right? :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-609213">
				<div id="div-comment-609213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tihiy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-609213">
			March 11, 2008 at 4:08 pm</a>		</div>

		<p>Well, drag and drop is broken in Windows Vista for those &quot;security features&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-609293">
				<div id="div-comment-609293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-609293">
			March 11, 2008 at 7:32 pm</a>		</div>

		<p>&quot;Well, drag and drop is broken in Windows Vista for those &quot;security features&quot;.&quot;</p>
<p>Well, this actually did happen in one case, you can&#8217;t drag and drop to a command prompt window or any other window owned by an elevated process in Vista because of UIPI.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-609103">
				<div id="div-comment-609103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-609103">
			March 11, 2008 at 1:04 pm</a>		</div>

		<p>@Mike: Some of them don&#8217;t check the return value *or* the pointer, which is fun when you&#8217;re writing your own ActiveX container!</p>
<p>A certain document-viewing ActiveX control does a QueryService (QS is like QI but may return a different object) for IBindHost, then calls through *ppv regardless of NULL pointers and HRESULTs. Yay for assuming the current version of Internet Explorer is the only ActiveX container in the world and that even IE itself won&#8217;t drop any interfaces one day&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ryanbemrose odd alt thread-odd thread-alt depth-1" id="comment-609133">
				<div id="div-comment-609133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Ryan+Bemrose' rel='external nofollow' class='url'>Ryan Bemrose</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-609133">
			March 11, 2008 at 1:32 pm</a>		</div>

		<p>@Andrew: </p>
<p><a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-us/library/ms682521" rel="nofollow">http://msdn2.microsoft.com/en-us/library/ms682521</a>(vs.85).aspx</p>
<p>ppvObject</p>
<p> &nbsp; &nbsp;[out] Address of pointer variable that receives the interface pointer requested in riid. Upon successful return, *ppvObject contains the requested interface pointer to the object. If the object does not support the interface specified in iid, *ppvObject is set to NULL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-609173">
				<div id="div-comment-609173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-609173">
			March 11, 2008 at 2:59 pm</a>		</div>

		<p>Triangle: What else are you supposed to do? &nbsp;You&#8217;ll either hand them NULL, or some other random pointer that they&#8217;re going to call through (i.e. whatever was being pointed to by the pointer that they gave you). &nbsp;Better that you hand back NULL (and crash them right away) than let them call off into never-never land through some random pointer that you gave back to them (and let the program either continue &quot;forever&quot; (well, until a stack overflow), or crash a long way from the problem).</p>
<p>If you don&#8217;t support the interface they&#8217;re asking for, it&#8217;s not like you can hand them your IUnknown or something crazy like that. &nbsp;You have to either give them NULL, or not change the value.</p>
<p>(And if the documentation says to give them NULL, then you better give them NULL as well; otherwise people that *do* follow the documentation can get screwed up by your QI implementation.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-609343">
				<div id="div-comment-609343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-609343">
			March 12, 2008 at 2:12 am</a>		</div>

		<p>A more subtle nitpick attempt is whether QueryInterface should check ppv for NULL and return E_POINTER.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-609413">
				<div id="div-comment-609413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-609413">
			March 12, 2008 at 9:37 am</a>		</div>

		<p>Maurits, any developer dumb enough to pass a NULL into QI is also not going to check its return value. The most likely time for this to happen is during development, and the debugger&#8217;s stack trace should make it clear to the developer what they did wrong. The crash accelerates the debugging process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-609433">
				<div id="div-comment-609433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adarsha.mv.googlepages.com' rel='external nofollow' class='url'>mvadu</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-609433">
			March 12, 2008 at 10:44 am</a>		</div>

		<p>@Dave</p>
<p>The crash accelerates the debugging process.</p>
<p>Nicely said.. I like that as a tester. If I could see a crash/Runtime error in the beginning it self my life is easier as I can stop my testing then and there and return the code to dev team.. haha</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-609443">
				<div id="div-comment-609443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adarsha.mv.googlepages.com' rel='external nofollow' class='url'>mvadu</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-609443">
			March 12, 2008 at 10:44 am</a>		</div>

		<p>@Dave</p>
<p>The crash accelerates the debugging process.</p>
<p>Nicely said.. I like that as a tester. If I could see a crash/Runtime error in the beginning it self my life is easier as I can stop my testing then and there and return the code to dev team.. haha</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-609763">
				<div id="div-comment-609763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hege</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-609763">
			March 13, 2008 at 8:09 am</a>		</div>

		<p>Raymond, grow up, you&#8217;re childish.</p>
<p>(I don&#8217;t care about removing my comment, it&#8217;s just a message for you)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-609773">
				<div id="div-comment-609773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://greenreaper.co.uk/' rel='external nofollow' class='url'>GreenReaper</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-609773">
			March 13, 2008 at 9:59 am</a>		</div>

		<p>Tihiy, Yuhong Bao: If you&#8217;re the program, it can be done, at least for WM_DROPFILES. Just bear in mind that you may need to allow through message types that don&#8217;t officially exist.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-609943">
				<div id="div-comment-609943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kokomo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-609943">
			March 13, 2008 at 2:07 pm</a>		</div>

		<p>&quot;Windows Vista should be dragged and dropped to the trash can.&quot;</p>
<p>Greatest preemptive comment of all time. I think it&#8217;s better than &quot;*Here&#8217;s your stupid asterisk.&quot;</p>
<p>Thank you Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-610283">
				<div id="div-comment-610283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">.dan.g.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080311-00/?p=23153#comment-610283">
			March 16, 2008 at 7:36 pm</a>		</div>

		<p>Shouldn&#8217;t QueryGetData() be strictly implemented as:</p>
<p>return GetDataIndex(pfe) == DATA_TEXT ? S_OK : S_FALSE;</p>
<p>because DATA_NUM is not handled in GetData()?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

