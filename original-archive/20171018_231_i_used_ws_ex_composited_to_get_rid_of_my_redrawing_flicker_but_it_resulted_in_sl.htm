<html>
<head>
<title>I used WS_EX_COMPOSITED to get rid of my redrawing flicker, but it resulted in sluggish response</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>I used WS_EX_COMPOSITED to get rid of my redrawing flicker, but it resulted in sluggish response</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 18, 2017 / year-entry #232</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The system needs to know when to present the back-buffer.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer enabled
<a HREF="https://msdn.microsoft.com/library/windows/desktop/ff700543(v=vs.85).aspx">
the <code>WS_</code><code>EX_</code><code>COMPOSITED</code>
extended window style</a>
in order to solve a flickering problem with their application.
That worked great,
but they found that it had an unwanted side effect:
when the user grabs
the scroll bar and starts scrolling up and down the document,
the UI does not update smoothly.
The customer hoped for some tips on how they could get
the no-flicker benefit of
<code>WS_</code><code>EX_</code><code>COMPOSITED</code>
without incurring the sluggish-UI penalty.
</p>
<p>
One of my colleagues explained:
The <code>WS_</code><code>EX_</code><code>COMPOSITED</code>
extended style enables double-buffering on the window.
This means that the control renders into an off-screen
buffer,
and only when rendering is complete is the result
copied to the screen.
This avoids flicker because only a completely-drawn
control is put on the screen;
you never see the control in a partially-drawn state.
</p>
<p>
The thing is,
in order for this to work,
the system needs to know when rendering is complete.
Otherwise it doesn't know when it's time to copy
the back-buffer to the screen.
</p>
<p>
The rule is that the system assumes that you're done
rendering when you release the DC.
(Or when you call <code>End&shy;Paint</code>, which is
the moral equivalent of releasing the DC.)
</p>
<p>
But there are some programs which acquire a DC and
never release it.
They just draw into it whenever they feel like drawing.
In that case, the system has a fail-safe timeout
and copies the back-buffer to the screen after 100ms,
and again every 100ms thereafter.
</p>
<p>
If you're getting slugging UI updates with
the <code>WS_</code><code>EX_</code><code>COMPOSITED</code>
extended window style,
check that you're properly releasing your device
contexts as soon as you're ready for them to be
presented.
Don't acquire a DC and just hang onto it for convenience.
If you do that, then the system doesn't know when you're
finished drawing,
and it will copy from the back-buffer to the screen
at 10 frames per second,
which will feel sluggish.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1313066">
				<div id="div-comment-1313066" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245#comment-1313066">
			October 18, 2017 at 8:31 am</a>		</div>

		<p>I&#8217;m only getting about 10FPS anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1313075">
				<div id="div-comment-1313075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AberAber</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245#comment-1313075">
			October 18, 2017 at 9:16 am</a>		</div>

		<p>This seems to be very useful information and may be a common mistake.  Is it officially documented anywhere?  I don&#8217;t see it in the link you provide, though it says to see remarks (which I&#8217;m not sure what that is referencing on this page).</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1313095">
				<div id="div-comment-1313095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245#comment-1313095">
			October 18, 2017 at 11:42 am</a>		</div>

		<p>Yet again, please replace msdn with raymond&#8217;s blog.</p>
<p>msdn is more like &#8220;yeah&#8230; this is what a 5 year old could guess reading the .h file for the api&#8230; We leave it as an exercise for the reader to find out if and how it works in practice&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1313105">
				<div id="div-comment-1313105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matteo Italia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245#comment-1313105">
			October 18, 2017 at 11:47 am</a>		</div>

		<p>It&#8217;s worth noting that you should paint pretty much only in WM_PAINT using BeginPaint/EndPaint anyway, anything else is suspect by default.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1313125">
				<div id="div-comment-1313125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikebru</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245#comment-1313125">
			October 18, 2017 at 11:49 am</a>		</div>

		<p>I suspect the extended window styles used to be in the CreateWindowEx() documentation.  Then the styles got moved but without the remarks.  The timeout doesn&#8217;t seem to be mentioned there either.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1313085">
				<div id="div-comment-1313085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245#comment-1313085">
			October 18, 2017 at 9:32 am</a>		</div>

		<p>This sounds like an incomplete article. Raymond, please, finish the article properly with &#8220;&#8230;and we never heard from the customer to know if this was what they wanted or nor&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mquinlan even thread-odd thread-alt depth-1 parent" id="comment-1313136">
				<div id="div-comment-1313136" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MichaelQuinlan' rel='external nofollow' class='url'>MichaelQuinlan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245#comment-1313136">
			October 18, 2017 at 4:25 pm</a>		</div>

		<p>Is the existence of the fail-safe timeout and its duration part of the contract or is it an implementation detail?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong odd alt depth-2 parent" id="comment-1313145">
				<div id="div-comment-1313145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245#comment-1313145">
			October 18, 2017 at 7:25 pm</a>		</div>

		<p>Possibly should count as implementation detail because I cannot find this be mentioned elsewhere.</p>
<p>If it&#8217;s not part of any official documentation, it&#8217;s &#8220;implementation detail&#8221;.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1313157">
				<div id="div-comment-1313157" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245#comment-1313157">
			October 18, 2017 at 11:15 pm</a>		</div>

		<p>Soubds like an implementation detail to me &#8211; and one that might be better not to exist. I wonder what the story is behind it?</p>
<p>To be honest, if I never let go or end painting I&#8217;d expect nothing to appear at all when double-buffered.<br />
Other double-buffering schemes I know of have an explicit &#8220;swap buffers&#8221; call.<br />
How else can the system know I&#8217;m done with the surface and it&#8217;s safe to present?</p>
<p>And how do you even manage to forget to do that?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1313165">
				<div id="div-comment-1313165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">middings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245#comment-1313165">
			October 19, 2017 at 12:36 am</a>		</div>

		<p>All good questions. My guess is that this behavior covers for a bug in somebody&#8217;s application.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fjeldse even depth-4 parent" id="comment-1313246">
				<div id="div-comment-1313246" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Erik+F' rel='external nofollow' class='url'>Erik F</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245#comment-1313246">
			October 19, 2017 at 7:23 pm</a>		</div>

		<p>Probably someone heard about WS_EX_COMPOSITED and thought &#8220;This will fix all my application&#8217;s display issues with no extra coding!&#8221; They probably never heard about the important engineering principle TANSTAAFL, unfortunately.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1313266">
				<div id="div-comment-1313266" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245#comment-1313266">
			October 20, 2017 at 1:09 am</a>		</div>

		<p>Or more simply, they never bothered to a) read the documentation and/or b) test the results.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1313147">
				<div id="div-comment-1313147" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245#comment-1313147">
			October 18, 2017 at 10:14 pm</a>		</div>

		<p>Is this also the reason that when I drag an Excel sheet around, it seems to lag behind my mouse? I&#8217;ve been wondering why not all programs behave in this sluggish way.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-jan-ringos odd alt depth-2" id="comment-1313185">
				<div id="div-comment-1313185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Jan+Ringo%C5%A1' rel='external nofollow' class='url'>Jan Ringoš</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245#comment-1313185">
			October 19, 2017 at 2:41 am</a>		</div>

		<p>When you let the system (user32) do the dragging, i.e. returning HTCAPTION on WM_NCHITTEST, then the system masks this lag by hiding the real (HW) mouse cursor and painting one at the point where the window was grabbed. The other way, i.e. computing mouse cursor position difference and calling MoveWindow (or similar), does not do that, and the windows position lags behind.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1313275">
				<div id="div-comment-1313275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245#comment-1313275">
			October 20, 2017 at 3:22 am</a>		</div>

		<p>Presumably this heuristic doesn&#8217;t work very well for windows with the CS_OWNDC class style, since there&#8217;s no onus to release those DCs&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1313375">
				<div id="div-comment-1313375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245#comment-1313375">
			October 22, 2017 at 5:50 am</a>		</div>

		<p>I have a few resizable dialog boxes, and despite using (Begin-/End-)DeferWindowPos to change the size and positions of the child controls simultaneously, there was still considerable flickering on resizing (at least, on systems running Windows XP, and on older machines running Windows 7). Single-column List Views in report-view mode to have their column auto-resized with LVM_SETCOLUMNWIDTH(0,LVSCW_AUTOSIZE_USEHEADER) were the worst (despite using LVS_EX_DOUBLEBUFFER on Vista and above), but other controls also showed flickering.</p>
<p>Adding WS_EX_COMPOSITED to the dialog boxes (can even be done by adding EXSTYLE WS_EX_COMPOSITED to the dialog template resource scripts) significantly reduces or even eliminates the flickering!</p>
<p>Thanks (once again) for a wonderful tip!</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-jan-ringos even depth-2 parent" id="comment-1313407">
				<div id="div-comment-1313407" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Jan+Ringo%C5%A1' rel='external nofollow' class='url'>Jan Ringoš</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245#comment-1313407">
			October 22, 2017 at 5:10 pm</a>		</div>

		<p>I&#8217;ve found that thorough use of WS_CLIPxxx styles also helps. In the years long past, when off-screen double-buffering bitmap was considered excessive waste of memory, I&#8217;ve often subclassed LISTBOXes and other controls to suppress WM_ERASEBKGND (the cause of most flickering) and then painted areas that the default WM_PAINT handler didn&#8217;t touch with background color myself.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1313785">
				<div id="div-comment-1313785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171018-00/?p=97245#comment-1313785">
			October 25, 2017 at 3:25 am</a>		</div>

		<p>Thanks. With all my reading here, in Raymond&#8217;s book, on MSDN and elsewhere, this seems obvious to me, but I will double-check.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

