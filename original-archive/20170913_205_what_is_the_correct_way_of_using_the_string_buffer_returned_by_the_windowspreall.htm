<html>
<head>
<title>What is the correct way of using the string buffer returned by the WindowsPreallocateStringBuffer function?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What is the correct way of using the string buffer returned by the WindowsPreallocateStringBuffer function?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 13, 2017 / year-entry #206</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170913-00/?p=97015</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Write the characters you allocated, but only those characters.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The most common way of creating an <code>HSTRING</code>
is to
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20160615-00/?p=93675">
call
<code>Windows&shy;Create&shy;String</code></a>,
but there is also a two-phase creation pattern:
First you call
<code>Windows&shy;Preallocate&shy;String&shy;Buffer</code>
to create a buffer for a future string.
You then fill the buffer with stringy goodness
and then call
<code>Windows&shy;Promote&shy;String&shy;Buffer</code>
to convert it to a real <code>HSTRING</code>.
(Or you can call
<code>Windows&shy;Delete&shy;String&shy;Buffer</code>
to change your mind and pretend it never happened.)
</p>
<p>
The rule for managing the buffer returned by
<code>Windows&shy;Preallocate&shy;String&shy;Buffer</code>
is that you are expected to write <i>exactly</i>
<code>length</code> code units into the buffer.
No more.
No less.
The system already put a terminating null after the end of the
buffer;
your job is to fill the buffer with the string contents.
</p>
<p>
For example, if you want to use two-phase creation to create
the string <code>hello</code>,
you would call
<code>Windows&shy;Preallocate&shy;String&shy;Buffer</code>
and pass <code>length = 5</code>.
Into the resulting buffer,
you write the characters
<code>h</code>,
<code>e</code>,
<code>l</code>,
<code>l</code>,
and
<code>o</code>,
and that's all.
The system already stored the terminating null.
</p>
<p>
This particular formulation of the rules is important in the
case that <code>length = 0</code>.&sup1;
Since the representation of an <code>HSTRING</code>
of length zero is the null pointer,
there is no actual buffer.
What happens is that the system uses a single preallocated
buffer (consisting of just a null terminator)
to represent the buffer for all zero-length strings.
If you call
<code>Windows&shy;Preallocate&shy;String&shy;Buffer</code>,
you get a pointer to that preallocated buffer.&sup2;
Since you passed a length of zero,
you are expected to write zero characters to the buffer;
in other words,
you are expected to do nothing at all with the buffer.
</p>
<p>
And of course since <code>HSTRING</code>s are immutable,
your permission to modify the buffer ends once you
promote the buffer to a string.
Once it's been promoted to a string, the entire buffer
becomes read-only.
</p>
<p>
&sup1;
Another way of interpreting this corner case is to say
"Don't bother calling
<code>Windows&shy;Preallocate&shy;String&shy;Buffer</code>
with a string of length zero.
Otherwise, go ahead and call it, and you can write that null
terminator if you like."
</p>
<p>
&sup2;
Arguably, to accommodate the possibiltiy of somebody writing
that null terminator,
it should return a preallocated <i>writable</i> buffer
just large enough to hold that null terminator.
It could be the high 16 bits of the <code>length</code>
field itself!</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1 parent" id="comment-1309376">
				<div id="div-comment-1309376" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170913-00/?p=97015#comment-1309376">
			September 13, 2017 at 7:12 am</a>		</div>

		<p>No more. No less?  WindowsPreallocateStringBuffer&#8217;s example code on MSDN asks for 10 characters and writes noting. The page itself also says &#8220;You must write exactly length characters into the buffer.&#8221; so the interns writing the example code don&#8217;t even read the documentation for the function they are writing the example for?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1309386">
				<div id="div-comment-1309386" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170913-00/?p=97015#comment-1309386">
			September 13, 2017 at 7:23 am</a>		</div>

		<p>I am the intern in question. What you&#8217;re seeing is the absence of a time machine. The &#8220;exactly length characters&#8221; text was added several years after the sample was written. When the text was updated, the sample wasn&#8217;t.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks even depth-3" id="comment-1309395">
				<div id="div-comment-1309395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170913-00/?p=97015#comment-1309395">
			September 13, 2017 at 7:47 am</a>		</div>

		<p>It creates a string with undefined contents. The additional documentation made the example worse by not following the requirements but the example never made any sense.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1309415">
				<div id="div-comment-1309415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170913-00/?p=97015#comment-1309415">
			September 13, 2017 at 9:16 am</a>		</div>

		<p>By contrast, WindowsPromoteStringBuffer has a &#8220;fill in the buffer&#8221; comment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3 parent" id="comment-1309425">
				<div id="div-comment-1309425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170913-00/?p=97015#comment-1309425">
			September 13, 2017 at 9:21 am</a>		</div>

		<p>Why did the rules get changed after the API was created? Maybe because of mixed-language projects, when mixing null-terminated runtimes with length-content runtimes caused the garbage after the first null come afloat and cause bugs?</p>
<p>Anyway, it could be easily solved: just fill with nulls the unused part of the string. You get a &#8220;normalized&#8221; string which is equally valid as null-terminated and length-content (albeit a bit strange in the later case).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-4" id="comment-1309436">
				<div id="div-comment-1309436" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170913-00/?p=97015#comment-1309436">
			September 13, 2017 at 9:35 am</a>		</div>

		<p>Filling with null messes up things that verify and reject based on WindowsStringHasEmbeddedNull.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1309445">
				<div id="div-comment-1309445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170913-00/?p=97015#comment-1309445">
			September 13, 2017 at 10:15 am</a>		</div>

		<p>The rules didn&#8217;t change. The documentation stated the pre-existing rules incorrectly.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1309525">
				<div id="div-comment-1309525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170913-00/?p=97015#comment-1309525">
			September 14, 2017 at 1:01 am</a>		</div>

		<p>Please replace the msdn docs with a link to your post above, it&#8217;s 1000x better.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1309396">
				<div id="div-comment-1309396" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Topping</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170913-00/?p=97015#comment-1309396">
			September 13, 2017 at 9:12 am</a>		</div>

		<p>So what&#8217;s the typical use case for WindowsPreallocateStringBuffer?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1309435">
				<div id="div-comment-1309435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170913-00/?p=97015#comment-1309435">
			September 13, 2017 at 9:30 am</a>		</div>

		<p>Performance. Let&#8217;s say you have an algorithm that generates a 100-point string. You could allocate a temporary buffer, generate the string into the buffer, call WindowsCreateString() to create the actual string, and finally free the temporary buffer. WindowsPreallocateStringBuffer(), on the other hand, avoids allocating/freeing the temporary buffer and copying its contents to the final buffer. If you create a lot of strings, or they are large, it can make a big difference.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1309465">
				<div id="div-comment-1309465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170913-00/?p=97015#comment-1309465">
			September 13, 2017 at 11:22 am</a>		</div>

		<p>I am confused by these two statements (but that might be because I haven&#8217;t looked into HSTRINGs at all, really) which don&#8217;t seem to agree with each other:</p>
<p>  &#8211; &#8220;Since the representation of an HSTRING of length zero is the null pointer&#8221;<br />
  &#8211; &#8220;the system uses a single preallocated buffer (consisting of just a null terminator) to represent all zero-length strings&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1309475">
				<div id="div-comment-1309475" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170913-00/?p=97015#comment-1309475">
			September 13, 2017 at 11:41 am</a>		</div>

		<p>&#8220;the system uses a single preallocated buffer (consisting of just a null terminator) to represent <b>the buffer for</b> all zero-length strings‚Äù. Will fix.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1309485">
				<div id="div-comment-1309485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ted M</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170913-00/?p=97015#comment-1309485">
			September 13, 2017 at 2:02 pm</a>		</div>

		<p>Raymond, I sent a ping to the good people at the @docsmsft twitter account, they can take care of any MSDN inconsistencies your other readers may find. Just wanted to pass that on to you and anybody interested.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

