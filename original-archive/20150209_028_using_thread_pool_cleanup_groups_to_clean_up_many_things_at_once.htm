<html>
<head>
<title>Using thread pool cleanup groups to clean up many things at once</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Using thread pool cleanup groups to clean up many things at once</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 9, 2015 / year-entry #29</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150209-00/?p=44723</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's Little Program demonstrates thread pool cleanup groups. When you associate a thread pool item with a cleanup group, you can perform bulk operations on the group. That can save you a lot of bookkeeping. Remember that Little Programs do little to no error checking. #include <windows.h> #include <stdio.h> // horrors! Mixing stdio and C++!...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program demonstrates thread pool cleanup groups.
When you associate a thread pool item with a cleanup group,
you can perform bulk operations on the group.
That can save you a lot of bookkeeping.
</p>
<p>
Remember that Little Programs do little to no error checking.
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;stdio.h&gt; // horrors! Mixing stdio and C++!

VOID
CALLBACK
Callback(
    PTP_CALLBACK_INSTANCE Instance,
    PVOID                 /* Parameter */,
    PTP_TIMER             /* Timer */
    )
{
    // Say what time the callback ran.
    printf("%p at %d\n", Instance, GetTickCount());
}

int
__cdecl
main(int, char**)
{
    // Create an environment that we use for our timers.
    TP_CALLBACK_ENVIRON environ;
    InitializeThreadpoolEnvironment(&amp;environ);

    // Create a thread pool cleanup group and associate it
    // with the environment.
    auto cleanupGroup = CreateThreadpoolCleanupGroup();
    SetThreadpoolCallbackCleanupGroup(&amp;environ,
                                      cleanupGroup,
                                      nullptr);

    // Say what time we started
    printf("Start: %d\n", GetTickCount());

    // Ask for a one-second delay
    LARGE_INTEGER dueTime;
    dueTime.QuadPart = -10000LL * 1000; // one second
    FILETIME ftDue = { dueTime.LowPart, dueTime.HighPart };

    // Create ten timers to run after one second.
    for (int i = 0; i &lt; 10; i++) {
        auto timer = CreateThreadpoolTimer(Callback,
                                           nullptr,
                                           &amp;environ);
        SetThreadpoolTimer(timer, &amp;ftDue, 0, 500);
    }

    // Wait a while - the timers will run.
    Sleep(1500);

    // Clean up the group.
    CloseThreadpoolCleanupGroupMembers(cleanupGroup,
                                       FALSE,
                                       nullptr);

    // Close the group.
    CloseThreadpoolCleanupGroup(cleanupGroup);
}
</pre>
<p>
There is some trickiness in building the
<code>FILETIME</code> structure to specify that we want
to run after a one-second delay.
First, the value is negative to indicate a relative timeout.
Second,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/08/25/220195.aspx">
we cannot treat the <code>FILETIME</code> as an <code>__int64</code></a>,
so we use a <code>LARGE_<wbr>INTEGER</code> as an intermediary.
</p>
<p>
When we create the ten timers, we associate them with the
environment, which is in turn associated with the cleanup group.
This puts all the timers into the cleanup group,
which is a good thing,
because we didn't save the timer handles!
</p>
<p>
When it's time to clean up the timers, we use
<code>Close&shy;Thread&shy;pool&shy;Cleanup&shy;Group&shy;Members</code>,
which does the work of closing each individual timer in the
cleanup group.
This saves us the trouble of having to remember all the timers ourselves
and manually closing each one.
</p>
<p>
For our next trick, comment out the <code>Sleep(1500);</code>
and run the program again.
This time, the timers don't run at all.
That's because we closed them before they reached their due time.
We let the cleanup group do the bookkeeping for us.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1175023">
				<div id="div-comment-1175023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150209-00/?p=44723#comment-1175023">
			February 9, 2015 at 11:08 am</a>		</div>

		<p>A secondary reason you can&#39;t reinterpret_cast FILETIME to __int64 *: endianness. &nbsp;Unlike LARGE_INTEGER, FILETIME does not swap its two fields&#39; positions on e.g. Xbox 360.</p>
<p>I much prefer stdio to the C++ ways of doing standard input and output, so I&#39;m with you on that. &nbsp;That said, a second &quot;horrors&quot; comment ought to be on using main instead of wmain in a Windows program =^_^=</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1175033">
				<div id="div-comment-1175033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150209-00/?p=44723#comment-1175033">
			February 9, 2015 at 11:39 am</a>		</div>

		<p>The horror is not mixing stdio and C++. The horror is mixing stdio and C++ the old way. You should use cstdio instead of stdio.h.</p>
<p>;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1175043">
				<div id="div-comment-1175043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150209-00/?p=44723#comment-1175043">
			February 9, 2015 at 12:48 pm</a>		</div>

		<p>The horror is mixing a compiler specific attribute like __cdecl in otherwise &quot;portable&quot; code when you could use STDMETHODVCALLTYPE (or perhaps even add a &#8230; parameter?) :)</p>
<div class="post">[<em>I assume you&#39;re talking about main? STDMETHODVCALLTYPE is wrong here, because main must be __cdecl and should not follow the variadic COM method call convention. You are relying on implementation details. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1175053">
				<div id="div-comment-1175053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150209-00/?p=44723#comment-1175053">
			February 9, 2015 at 1:57 pm</a>		</div>

		<p>Expected: int main(</p>
<p>Got: int __cdecl main(</p>
<p>The code is portable between compilers except for __cdecl is compiler specific and not necessary anyway.</p>
<div class="post">[<em>__cdecl is required if you compile with /Gz, for example, which is common because __stdcall is a more compact calling convention than __cdecl. I don&#39;t understand the portability concern here. You&#39;re using windows.h. That&#39;s not portable. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1175063">
				<div id="div-comment-1175063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150209-00/?p=44723#comment-1175063">
			February 9, 2015 at 2:23 pm</a>		</div>

		<p>[__cdecl is required if you compile &#8230;]</p>
<p>Any reason for not using CDECEL then?</p>
<p>[You&#39;re using windows.h. That&#39;s not portable. -Raymond]</p>
<p>That&#39;s what you think. Change __cdecl to CDECL and it builds w/ gcc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1175073">
				<div id="div-comment-1175073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150209-00/?p=44723#comment-1175073">
			February 9, 2015 at 3:05 pm</a>		</div>

		<p>[You&#39;re using windows.h. That&#39;s not portable. -Raymond]</p>
<p>There&#39;s a difference between target platform portability and compiler vendor portability.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1175103">
				<div id="div-comment-1175103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">text rendering</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150209-00/?p=44723#comment-1175103">
			February 9, 2015 at 6:20 pm</a>		</div>

		<p>I want to comment on your ClearType article, but unfortunately it&#39;s already locked.</p>
<p>Rendering ClearType text is not only dependent on semitransparent backgrounds, it&#39;s also dependent on other semitransparent windows that are rendered in front of the text, uncommon but can happen. Thus to correctly render ClearType text you have to know in advance if other semitransparent bitmaps will be overlayed over the text your rendering. ClearType text overlayed over ClearType text is an example of this, which Windows doesn&#39;t render correctly, the ClearType engine isn&#39;t competent enough to do this correctly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1175083">
				<div id="div-comment-1175083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150209-00/?p=44723#comment-1175083">
			February 9, 2015 at 3:46 pm</a>		</div>

		<p>@Raymond: Though it&#39;s true that I often write extern &quot;C&quot; int __cdecl wmain myself, it is the case that __cdecl is unnecessary in Visual C++ even with the /Gz compiler option. &nbsp;Visual C++ special-cases the main and wmain functions.</p>
<p>// compile with /Ox /Oy /Gz /Fa</p>
<p>int testfunc(int, wchar_t **) { return 66; }</p>
<p>int wmain(int, wchar_t **) { return 66; }</p>
<p>_wmain	PROC</p>
<p>	mov	eax, 66</p>
<p>	ret	0</p>
<p>_wmain	ENDP</p>
<p>?testfunc@@YGHHPAPA_W@Z PROC</p>
<p>	mov	eax, 66</p>
<p>	ret	8</p>
<p>?testfunc@@YGHHPAPA_W@Z ENDP</p>
<p>wmain is not just automatically __cdecl, it&#39;s automatically extern &quot;C&quot;, which is rather logical.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1175663">
				<div id="div-comment-1175663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">HARBMOBARKI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150209-00/?p=44723#comment-1175663">
			February 12, 2015 at 12:18 pm</a>		</div>

		<p>TechNet</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt thread-odd thread-alt depth-1" id="comment-1175953">
				<div id="div-comment-1175953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150209-00/?p=44723#comment-1175953">
			February 14, 2015 at 2:26 am</a>		</div>

		<p>Too bad `auto` is not part of C circa 2015. This little shorthand is the only (but very good) reason to use C++ compiler here, </p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

