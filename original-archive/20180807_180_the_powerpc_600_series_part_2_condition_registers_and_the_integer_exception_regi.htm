<html>
<head>
<title>The PowerPC 600 series, part 2: Condition registers and the integer exception register</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The PowerPC 600 series, part 2: Condition registers and the integer exception register</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 7, 2018 / year-entry #180</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180807-00/?p=99435</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Keeping track of things that happened.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The integer exception register <var>xer</var> contains a bunch of stuff,
but the ones that are relevant to us are
</p>
<table BORDER=1 BORDERCOLOR=black CELLSPACING=0 CELLPADDING=3
    CLASS="cp3"
    STYLE="border: solid 1px black; border-collapse: collapse">
<tr>
<th>Bit</th>
<th>Name</th>
</tr>
<tr>
<td>0</td>
<td>Summary overflow</td>
</tr>
<tr>
<td>1</td>
<td>Overflow</td>
</tr>
<tr>
<td>2</td>
<td>Carry</td>
</tr>
</table>
<p>
Some instructions update
the overflow and summary overflow bits in the <var>xer</var>
register.
When those instructions are executed,
the overflow bit is updated to represent whether the operation
resulted in a signed overflow.
The summary overflow bit accumulates all the overflow bits
since it was last explicitly reset.
This lets you perform a series of arithmetic operations
and then test a single bit at the end to see if an overflow
occurred anywhere along the way.
</p>
<p>
Some instructions consume and/or target
the carry bit in <var>xer</var>.
We'll discuss how carry works when we get to integer arithmetic.
</p>
<p>
Each of the <var>cr#</var> condition registers consists
of four bits,
numbered from most signficant to least significant.
</p>
<table BORDER=1 BORDERCOLOR=black CELLSPACING=0 CELLPADDING=3
    CLASS="cp3"
    STYLE="border: solid 1px black; border-collapse: collapse">
<tr>
<th>Bit</th>
<th>Name</th>
<th>Mnemonic</th>
</tr>
<tr>
<td>0</td>
<td>Less than</td>
<td><var>lt</var></td>
</tr>
<tr>
<td>1</td>
<td>Greater than</td>
<td><var>gt</var></td>
</tr>
<tr>
<td>2</td>
<td>Equal to</td>
<td><var>eq</var></td>
</tr>
<tr>
<td>3</td>
<td>Summary overflow</td>
<td><var>so</var></td>
</tr>
</table>
<p>
For convenience, the assembler predefines the constants
<var>lt</var>, <var>gt</var>, <var>eq</var>, and <var>so</var>
to represent their respective bit numbers.
</p>
<p>
The <code>cmp</code> family of instructions compare two values
and write the result to a condition register.
</p>
<pre>
    cmpw    crd, ra, rb     ; crd = compare ( int32_t)ra with ( int32_t)rb
    cmpwi   crd, ra, imm16  ; crd = compare ( int32_t)ra with ( int16_t)imm16
    cmplw   crd, ra, rb     ; crd = compare (uint32_t)ra with (uint32_t)rb
    cmplwi  crd, ra, imm16  ; crd = compare (uint32_t)ra with (uint16_t)imm16
</pre>
<p>
You can compare two registers, or you can compare a register with
an immediate, and you can choose whether the comparison is signed or
unsigned.
(Recall that the <code>l</code> stands for <i>logical</i>.)
For example:
</p>
<pre>
    cmpw    cr3, r0, r1     ; cr3 = compare r0 with r1 as signed values
</pre>
<p>The <var>lt</var>, <var>gt</var>, and <var>eq</var> bits are set according to
the result of the comparison,
and the <var>so</var> bit receives a copy of the current
summary overflow bit in <var>xer</var>.
</p>
<p>
If you do not specify a destination comparison register,
it defaults to <var>cr0</var>:
</p>
<pre>
    cmpw    ra, rb          ; cr0 = compare ( int32_t)ra with ( int32_t)rb
    cmpwi   ra, imm16       ; cr0 = compare ( int32_t)ra with ( int16_t)imm16
    cmplw   ra, rb          ; cr0 = compare (uint32_t)ra with (uint32_t)rb
    cmplwi  ra, imm16       ; cr0 = compare (uint32_t)ra with (uint16_t)imm16
</pre>
<p>
As we'll see later,
some arithmetic instructions implicitly update <var>cr0</var> by comparing
the computed result against zero.
(Similarly, some floating point operations implicitly update
<var>cr1</var>.)
When performed as part of an arithmetic instruction,
the comparison is always performed as a signed comparison,
even if the instruction's underlying operation was unsigned.
</p>
<p>
If you combine an update of <var>cr0</var> with an arithmetic
operation,
the <var>so</var> bit is a copy of the summary overflow
bit in the <var>xer</var> register at the end of the instruction.
That means that if an arithmetic operation requests both
<var>cr0</var> and <var>xer</var> to be updated, the
<var>xer</var> register is updated first, and then the
summary overflow bit from <var>xer</var> is copied to
the <var>so</var> bit in <var>cr0</var>.
That means that the <var>so</var> bit in <var>cr0</var>
captures whether a signed overflow occurred in any
overflow-detecting operation
up to and including the current one.
</p>
<p>
The Microsoft compiler tends to prefer to target
<var>cr6</var> and <var>cr7</var> in its comparison instructions.
It doesn't make much difference to the processor,
but I suspect the compiler tries to avoid <var>cr0</var> 
so that it doesn't conflict with the use of <var>cr0</var>
by the arithmetic instructions.
</p>
<pre>
    mcrxr  crd              ; crd = first four bits of xer
</pre>
<p>
The "move to condition register from <var>xer</var>" instruction
copies the summary overflow, overflow, and carry bits from the
<var>xer</var> register to the specified condition register,
and then it clears the bits from <var>xer</var>.
</p>
<p>
No, I don't know why they left the "e" out of the opcode.
</p>
<p>
This is how you reset the summary overflow.&sup1;
</p>
<pre>
    mtxer  ra               ; xer = ra
    mfxer  rd               ; rd = xer
</pre>
<p>
These instructions&sup2; move to/from the <var>xer</var> register.
They are another way to clear the <var>xer</var> register,
or to set it to a particular initial state.
</p>
<p>
There are a good number of bitwise operations that
combine two condition register bits and store the result
into a third condition register bit.
These let you build boolean expressions out of condition registers.
</p>
<pre>
    crand   bd, ba, bb  ; cr[bd] =   cr[ba] &amp;  cr[bb]
    cror    bd, ba, bb  ; cr[bd] =   cr[ba] |  cr[bb]
    crxor   bd, ba, bb  ; cr[bd] =   cr[ba] ^  cr[bb]
    crnand  bd, ba, bb  ; cr[bd] = !(cr[ba] &amp;  cr[bb])
    crnor   bd, ba, bb  ; cr[bd] = !(cr[ba] |  cr[bb])
    creqv   bd, ba, bb  ; cr[bd] = !(cr[ba] ^  cr[bb])
    crandc  bd, ba, bb  ; cr[bd] =   cr[ba] &amp; !cr[bb] "and complement"
    crorc   bd, ba, bb  ; cr[bd] =   cr[ba] | !cr[bb] "or complement"
</pre>
<p>
Remember that the PowerPC numbers bits from most significant to
least significant, so bit zero is the high-order bit.
</p>
<p>
To save you from having to memorize all the bit numbers,
the assembler lets you write <var>cr0</var> to mean 0,
<var>cr1</var> to mean 1, and so through <var>cr7</var>
which means 7.
Combined with the constants for the four bits in the condition
register,
this lets you write
</p>
<pre>
    crand   4*cr3+eq, 4*cr2+lt, 4*cr6+gt ; cr3[eq] = cr2[lt] &amp; cr6[gt]
</pre>
<p>
instead of the instruction only a processor's mother could love:
</p>
<pre>
    crand   14, 8, 25                    ; cr3[eq] = cr2[lt] &amp; cr6[gt]
</pre>
<p>
There are also special instruction for transferring between
<var>cr</var> and a general-purpose register.
</p>
<pre>
    mfcr    rt           ; rt = cr
    mtcrf   mask, ra     ; cr = ra (selected by mask)
</pre>
<p>
The mask is an 8-bit immediate.
If a bit is set, then the corresponding <var>cr#</var> is
copied from the corresponding bits of <var>ra</var>.
For example, 128 means "Copy the top four bits of <var>ra</var>
into <var>cr0</var>, and leave all the other condition registers alone."
Recall that the PowerPC counts bits from most significant to least
significant, so <var>cr0</var> is stored in the highest-order four bits.
</p>
<p>
The assembler provides
synthetic instructions for various special cases
of the above operations:
</p>
<pre>
    creqv   bd, bd, bd  ; crset   bd          ; cr[bd]  = 1
    crxor   bd, bd, bd  ; crclr   bd          ; cr[bd]  = 0
    cror    bd, ba, ba  ; crmove  bd, ba      ; cr[bd]  = cr[ba]
    crnor   bd, ba, ba  ; crnot   bd, ba      ; cr[bd]  = !cr[ba]
    mtcr    ra          ; mtcrf   255, ra     ; cr = ra
</pre>
<p>
Here's an example of how these boolean operations could be used:
</p>
<pre>
    cmpw    cr2, r4, r5 ; compare r4 with r5, put result in cr2
    cmpw    cr3, r6, r7 ; compare r6 with r7, put result in cr3
    crandc  4*cr0+eq, 4*cr2+gt, 4*cr4+eq ; cr0[eq] = cr2[gt] &amp; !cr4[eq]
    beq     destination ; jump if r4 &gt; r5 &amp;&amp; r6 != r7
</pre>
<p>
We perform two comparison operations and put the results into
<var>cr2</var> and <var>cr3</var>.
We then perform a boolean "and not" operation
that calculates
</p>
<pre>
    cr0[eq] = (r4 &gt; r5) &amp; !(r6 == r7)
            = (r4 &gt; r5) &amp; (r6 != r7)
</pre>
<p>
The result is placed into the <var>eq</var> position of <var>cr0</var>,
which makes it a perfect place to be the branch condition
of the <code>beq</code> instruction.
</p>
<p>
The traditional way of doing this on processors that don't
have these fancy condition register operations
is to
perform a test and a conditional branch,
then another test and another conditional branch.
Combining the results of the test and performing a single branch
means that the entire sequence consumes only one slot in the branch
predictor.
This leaves more slots free to predict other branches,
and the single slot this sequence does consume can predict
the final result,
which might be easier to predict than the individual pieces.
(For example,
the test might be validating that a parameter is one of two valid
values.
The parameter is almost always valid, even though one might not be
able to predict which of the two valid values it is at any particular time.)
</p>
<p>
Fabian Giesen notes that
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170822-00/?p=96865#comment-1306986">
in practice,
you don't get to perform this optimization as often as you'd like</a>
because of short-circuiting rules in many programming languages.
Under those rules,
this optimization
works only if the second term can be evaluated without any risk
of taking any exceptions (or if the language permits you to take an
exception anyway, say, because any exception would be the result of
undefined behavior).
</p>
<p>
I have yet to see
the Microsoft C compiler for PowerPC
perform this optimization.
It just does things the conventional way.
But that may just be because I haven't encountered a situation where
the optimization is even possible.
(Also, because I'm studying code from Windows NT 3.51,
and compiler technology was not as advanced back then.)
</p>
<p>
Okay,
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445">
next time</a>
we'll start doing some arithmetic.
</p>
<p>
&sup1;
You might have noticed that there are only three interesting
bits in <var>xer</var> but room for four bits in a condition register.
The last bit is undefined.
Usually, you don't care much about the bits that got transferred;
the main purpose of the instruction is its side effect
of clearing the summary overflow.
</p>
<p>
&sup2;
These instructions are actually special cases of the
<code>mtspr</code> and <code>mfspr</code> instructions which
move to/from a special register.
The <var>xer</var> register is formally register <var>spr1</var>,
so the <code>mtxer</code> and <code>mfxer</code> instructions
are technically synthetic instructions.
</p>
<pre>
    mtspr  1, ra            ; spr1 = ra
    mfspr  1, rd            ; rd = spr1
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1355875">
				<div id="div-comment-1355875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://peeterjoot.com' rel='external nofollow' class='url'>Peeter Joot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180807-00/?p=99435#comment-1355875">
			August 8, 2018 at 6:23 am</a>		</div>

		<p>Re: &#8220;instead of the instruction only a processor&#8217;s mother could love&#8221;.  The IBM xlC compiler must have been inspired by this, as &#8220;inline assembly&#8221; for powerpc looked like:</p>
<p>int add_logical(int, int);<br />
#pragma mc_func add_logical {&#8220;7c632014&#8221; &#8220;7c630194&#8221;}</p>
<p>That&#8217;s truly something that only the processor&#8217;s mother could love.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1356315">
				<div id="div-comment-1356315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Julien Oster</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180807-00/?p=99435#comment-1356315">
			August 10, 2018 at 6:38 pm</a>		</div>

		<p>That looks like raw machine code rather than assembly, and a quick web search that at least &#8220;XL C for AIX 12.1.0&#8221; (I&#8217;m not familiar) allows actual inline assembly through the &#8220;asm&#8221; keyword instead?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1356015">
				<div id="div-comment-1356015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve Friedl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180807-00/?p=99435#comment-1356015">
			August 8, 2018 at 6:53 pm</a>		</div>

		<p>&gt; No, I don&#8217;t know why they left the &#8220;e&#8221; out of the opcode. </p>
<p>Dennis Ritchie designed the architecture, perhaps? :-)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1356085">
				<div id="div-comment-1356085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180807-00/?p=99435#comment-1356085">
			August 9, 2018 at 7:06 am</a>		</div>

		<p>If you&#8217;re referring to the creat(2) syscall, that was Ken Thompson:</p>
<p><a href="https://en.wikiquote.org/wiki/Ken_Thompson" rel="nofollow">https://en.wikiquote.org/wiki/Ken_Thompson</a></p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1356325">
				<div id="div-comment-1356325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Julien Oster</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180807-00/?p=99435#comment-1356325">
			August 10, 2018 at 6:43 pm</a>		</div>

		<p>I love errno.h in that regard. You have EACCES, ESRCH, ENXIO, E2BIG&#8230; and then, ironically, ENAMETOOLONG. To be fair, the last one seems to have been added much later, long after the apparently ill-conceived 6 character limit was followed.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

