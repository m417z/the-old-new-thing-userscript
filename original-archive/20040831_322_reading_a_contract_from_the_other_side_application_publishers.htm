<html>
<head>
<title>Reading a contract from the other side: Application publishers</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Reading a contract from the other side: Application publishers</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 31, 2004 / year-entry #323</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040831-00/?p=38003</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In an earlier article, I gave an example of reading a contract from the other side. Here's another example of how you can read a specification and play the role of the operating system. I chose this particular example because somebody wanted to do this and didn't realize that everything they needed was already documented;...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="/oldnewthing/archive/2003/12/26/45979.aspx">
In an earlier article, I gave an example of reading a contract from
the other side</a>.
Here's another example of how you can read a specification and
play the role of the operating system.
</p>
<p>
I chose this particular example because somebody wanted to do this
and didn't realize that everything they needed was already documented;
they just needed to look at the documentation in a different light.
</p>
<p>
The goal today is to mimic the list of programs that appears on the
"Add New Programs" page of the Add or Remove Programs control panel.
Note that in order for this list to appear at all, you need to be
on a domain, and for the list to be nonempty, your domain controller
needs to publish applications for domain members to install.
Consequently, I suspect many of my readers won't get to see any
interesting results from this exercise, but then again, the point
of exercise is not the result but merely the doing of it.
</p>
<p>
The documentation for
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/iapppublisher/iapppublisher.asp">
the IAppPublisher interface</a>
describes how a publisher can register itself to appear in the
list of programs that can be installed.  All you have to do is
read the documentation from the other side:
Instead of reading documentation about a method and asking,
"How would I implement this method?", read it and ask,
"How would I call this method?"
</p>
<p>
The documentation says that an app publisher registers its CLSID under
the specified registry key.  Therefore, if you want to find all the
app publishers, you need to enumerate that key.
</p>
<pre>
#define REGSTR_PATH_PUBLISHERS  \
    L"Software\\Microsoft"      \
    L"\\Windows\\CurrentVersion\\App Management\\Publishers"

    HKEY hkPub;
    if (RegOpenKeyExW(HKEY_LOCAL_MACHINE, REGSTR_PATH_PUBLISHERS,
                      0, KEY_READ, &amp;hkPub) == ERROR_SUCCESS) {
      WCHAR szKey[MAX_PATH];
      for (DWORD dwIndex = 0;
           RegEnumKeyW(hkPub, dwIndex, szKey, MAX_PATH) == ERROR_SUCCESS;
           dwIndex++) {
          ...
      }
      RegCloseKey(hkPub);
    }
</pre>
<p>
The documentation
says that the subkeys have the CLSID in REG_SZ format, so that's what we
read out.</p>
<pre>
        WCHAR szCLSID[MAX_PATH];
        LONG l = sizeof(szCLSID) - sizeof(WCHAR);
        if (RegQueryValueW(hkPub, szKey, szCLSID, &amp;l) == ERROR_SUCCESS)
          szCLSID[l/sizeof(WCHAR)] = 0;
          CLSID clsid;
          if (SUCCEEDED(<a HREF="http://msdn.microsoft.com/library/en-us/com/htm/cmf_a2c_3b3b.asp">CLSIDFromString</a>(szCLSID, &amp;clsid))) {
            ...
          }
        }
</pre>
<p>
Notice the extra care we take to avoid the problem of registry
strings that aren't null-terminated, as discussed in an earlier entry.
</p>
<p>
The documentation quite explicitly states how this CLSID is used.
</p>
<blockquote CLASS=q><p>
<b>Add/Remove Programs</b> creates an instance of your object
by calling
<a HREF="http://msdn.microsoft.com/library/en-us/com/htm/cmf_a2c_1nad.asp">
CoCreateInstance</a> for your object
and requests the approprite [sic]
<b>IAppPublisher</b> interface when the <b>Add New Programs</b>
view is populated.
</p>
</blockquote>
<p>
Not much choice, now, is there.  So we do what it says.
</p>
<pre>
            IAppPublisher *ppub;
            if (SUCCEEDED(CoCreateInstance(clsid, NULL,
                            CLSCTX_ALL, IID_IAppPublisher,
                          (void**)&amp;ppub))) {
              ...
              ppub-&gt;Release();
            }
</pre>
<p>
Okay, now that we have an app publisher, we can invoke the
various methods on it to get information from that publisher.
If we were more ambitious, we could ask for the categories
but today we're just going to be happy with enumerating the
programs so we can print their names.
</p>
<pre>
              <a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/ienumpublishedapps/ienumpublishedapps.asp">IEnumPublishedApps</a> *penum;
              if (SUCCEEDED(ppub-&gt;<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/iapppublisher/EnumApps.asp">EnumApps</a>(NULL, &amp;penum))) {
                <a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/ipublishedapp/ipublishedapp.asp">IPublishedApp</a> *papp;
                while (penum-&gt;<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/ienumpublishedapps/next.asp">Next</a>(&amp;papp) == S_OK) {
                  ...
                  papp-&gt;Release();
                }
                penum-&gt;Release();
              }
</pre>
<p>
The enumerator gives us an application interface,
and we can use that interface
to get information about the application and print it out.
</p>
<pre>
                  <a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/structures/appinfodata.asp">APPINFODATA</a> info = { sizeof(info) };
                  info.dwMask = AIM_DISPLAYNAME;
                  if (SUCCEEDED(papp-><a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/ishellapp/GetAppInfo.asp">GetAppInfo</a>(&amp;info)) &amp;&amp;
                      (info.dwMask &amp; AIM_DISPLAYNAME)) {
                    wprintf(L"%ls\n", info.pszDisplayName);
                    CoTaskMemFree(info.pszDisplayName);
                  }
</pre>
<p>
We ask only for the display name, since that's all we're interested
in today.  In a more complicated program, we may ask for other
data and would probably not release the IPublishedApp interface
immediately, but rather hang onto it so we could invoke some other
more interesting method like
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/ipublishedapp/install.asp">
IPublishedApp::Install</a>.
</p>
<p>
(Note that we have to use the correct memory allocator to free
the memory.)
</p>
<p>
Okay, let's assemble all this into a simple console program.
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;ole2.h&gt;
#include &lt;shappmgr.h&gt;
#include &lt;stdio.h&gt;

#define REGSTR_PATH_PUBLISHERS  \
    L"Software\\Microsoft"      \
    L"\\Windows\\CurrentVersion\\App Management\\Publishers"

int __cdecl main(int argc, char **argv)
{
  if (SUCCEEDED(CoInitialize(NULL)) {
    HKEY hkPub;
    if (RegOpenKeyExW(HKEY_LOCAL_MACHINE, REGSTR_PATH_PUBLISHERS,
                      0, KEY_READ, &amp;hkPub) == ERROR_SUCCESS) {
      WCHAR szKey[MAX_PATH];
      for (DWORD dwIndex = 0;
           RegEnumKeyW(hkPub, dwIndex, szKey, MAX_PATH) == ERROR_SUCCESS;
           dwIndex++) {
        WCHAR szCLSID[MAX_PATH];
        LONG l = sizeof(szCLSID) - sizeof(WCHAR);
        if (RegQueryValueW(hkPub, szKey, szCLSID, &amp;l) == ERROR_SUCCESS)
          szCLSID[l/sizeof(WCHAR)] = 0;
          CLSID clsid;
          if (SUCCEEDED(CLSIDFromString(szCLSID, &amp;clsid))) {
            IAppPublisher *ppub;
            if (SUCCEEDED(CoCreateInstance(clsid, NULL,
                            CLSCTX_ALL, IID_IAppPublisher,
                          (void**)&amp;ppub))) {
              IEnumPublishedApps *penum;
              if (SUCCEEDED(ppub-&gt;EnumApps(NULL, &amp;penum))) {
                IPublishedApp *papp;
                while (penum-&gt;Next(&amp;papp) == S_OK) {
                  APPINFODATA info = { sizeof(info) };
                  info.dwMask = AIM_DISPLAYNAME;
                  if (SUCCEEDED(papp->GetAppInfo(&amp;info)) &amp;&amp;
                      (info.dwMask &amp; AIM_DISPLAYNAME)) {
                    wprintf(L"%ls\n", info.pszDisplayName);
                    CoTaskMemFree(info.pszDisplayName);
                  }
                  papp-&gt;Release();
                }
                penum-&gt;Release();
              }
              ppub-&gt;Release();
            }
          }
        }
      }
      RegCloseKey(hkPub);
    }
    CoUninitialize();
  }
  return 0;
}
</pre>
<p>
When you run this program, a list of all programs published by
your domain controller should go scrolling past.
(As I noted at the beginning of this entry, you won't see much
if your computer is not on a domain or if your domain controller
doesn't publish any programs.)
</p>
<p>
Yes, this program is not very pretty, because prettiness was not
my goal.  In real life, a lot of the mess would be moved out into
helper functions, and you can clean it up even more by using
a smart pointer library, but the goal here was not to write a pretty
program; it was to show how something could be done by reading
the specification from the other side.
</p>
<p>
(Why don't I use a smart pointer library? Because I try to write
in "raw" C++ in order to avoid arguments about
<a HREF="http://www.boost.org/libs/smart_ptr/index.html">
whose</a>
<a HREF="http://msdn.microsoft.com/library/en-us/vclang98/html/MEMORY_auto_ptr.asp">
smart</a>
<a HREF="http://msdn.microsoft.com/library/en-us/vclib/html/vclrfCAutoPtr.asp">
pointer</a>
<a HREF="http://msdn.microsoft.com/library/en-us/vclang/html/_pluslang__com_ptr_t.asp">
library</a>
is best,
or
<a HREF="/ericlippert/archive/2003/09/16/53016.aspx">
why smart pointers are evil</a>...
It's easy to convert "raw" C++ to use a smart pointer library,
but it's harder to convert from one smart pointer library to
another.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-206803">
				<div id="div-comment-206803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040831-00/?p=38003#comment-206803">
			August 31, 2004 at 8:57 am</a>		</div>

		<p>What a great article!  I am going to sit down and run some tests and really sink my teeth into this subject for some work I have to do later next week.  What a great resource your site has become.  Thanks!  Finally,  for one am glad you do not use smart pointers in you examples.  Not that I do not use raw pointers in my work, it just makes it easier to follow.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-206813">
				<div id="div-comment-206813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Filip</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040831-00/?p=38003#comment-206813">
			August 31, 2004 at 10:38 am</a>		</div>

		<p>You may call me pedantic &#8230; but I tried to compile your program:</p>
<p>  if (SUCCEEDED(CoInitialize(NULL))) { &lt;&#8211; Missing parenthesis</p>
<p>and </p>
<p>        if (RegQueryValueW(hkPub, szKey, szCLSID, &amp;l) == ERROR_SUCCESS)<br />
<br />        { &lt;== Missing bracket</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-206863">
				<div id="div-comment-206863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040831-00/?p=38003#comment-206863">
			August 31, 2004 at 6:18 pm</a>		</div>

		<p>Seriously, a lower-case l is a terrible name for an identifier, whether or not you intend for your code to be read by humans.</p>
<p>Now just to be snarky, having observed cases of &quot;if ([&#8230;] == ERROR_SUCCESS)&quot; and &quot;if (SUCCEEDED([&#8230;]))&quot; in the same code sample, I can&#8217;t help wondering.  Shouldn&#8217;t the latter macro have been ERROR_SUCCEEDED?  Or ERRORED_SUCCESSFULLY?<br />
<br />Too bad this one doesn&#8217;t have a screenshot:<br />
<br /><a target="_new" href="http://www.sonic.net/~ezzell/Error%20Messages/Nothing_Goes_Wrong_Like_Success.htm#Nothing_Like_Success" rel="nofollow">http://www.sonic.net/~ezzell/Error%20Messages/Nothing_Goes_Wrong_Like_Success.htm#Nothing_Like_Success</a><br />
<br />but this one does:<br />
<br /><a target="_new" href="http://home.comcast.net/~anon4321/niceone.gif" rel="nofollow">http://home.comcast.net/~anon4321/niceone.gif</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-206873">
				<div id="div-comment-206873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040831-00/?p=38003#comment-206873">
			August 31, 2004 at 6:46 pm</a>		</div>

		<p>It&#8217;s called ERROR_SUCCESS because it&#8217;s an error code (and therefore must be named ERROR_something) but no error occurred. What would you call it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-206893">
				<div id="div-comment-206893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">darwou</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040831-00/?p=38003#comment-206893">
			August 31, 2004 at 10:44 pm</a>		</div>

		<blockquote><p>
  Now just to be snarky, having observed<br />
  <br />&gt; cases of &quot;if ([&#8230;] == ERROR_SUCCESS)&quot;<br />
  <br />&gt; and &quot;if (SUCCEEDED([&#8230;]))&quot; in the same<br />
  <br />&gt; code sample, I can&#8217;t help wondering.<br />
  <br />&gt; Shouldn&#8217;t the latter macro have been<br />
  <br />&gt; ERROR_SUCCEEDED? Or ERRORED_SUCCESSFULLY?</p>
<p>SUCCEEDED() is unrelated to ERROR_SUCCESS.</p>
<p>HRESULTS are not Win32 errors.</p>
<p>ERROR_SUCCESS is the Win32 error code indicating success. It is defined as 0.</p>
<p>Win32 API errors are positive integers. For example, ERROR_NOT_ENOUGH_MEMORY is defined as 8.</p>
<p>On the other hand, an HRESULT is an error returned from a COM interface or API. </p>
<p>S_OK is the error code that indicates success. It is also defined as 0. </p>
<p>However, HRESULT codes representing errors are all negative. For example, E_OUTOFMEMORY is defined as 0x8007000E.</p>
<p>SUCCEEDED() and FAILED() are both macros designed to work only with HRESULT. They check to see if the error code is negative to determine whether to return TRUE or FALSE.</p>
<p>Hence, you must NEVER use either macro with the error code returned from a Win32 API like RegEnumKeyW or RegQueryValueW().<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-207173">
				<div id="div-comment-207173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040831-00/?p=38003#comment-207173">
			September 1, 2004 at 7:15 pm</a>		</div>

		<p>8/31/2004 6:46 PM Raymond Chen</p>
<p>&gt; It&#8217;s called ERROR_SUCCESS because it&#8217;s an<br />
<br />&gt; error code [&#8230;] What would you call it?</p>
<p>I would have defined return codes or status codes instead of error codes.  I would have allowed the possibility of a successful return code or successful status code.  I would probably call the thing SUCCESS or STATUS_SUCCESS.  Despite my cynicism, I think there were known cases of operations performing as intended even before the codes here were designed as error codes. </p>
<p>For comparison:  When programs under VMS returned a value whose meaning meant a warning level but success, the fault was in those programs not the OS.  The OS did define a value whose meaning meant a success level together with success.  The OS came with impeccable documentation of this fact.  Some programs even obeyed it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-207413">
				<div id="div-comment-207413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040831-00/?p=38003#comment-207413">
			September 2, 2004 at 9:34 am</a>		</div>

		<p>And that&#8217;s what the NT team did &#8211; with STATUS and HRESULT codes.  But the registry stuff predates NT. The only thing the NT team could do with the registry stuff was come up with names for things that already existed.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

