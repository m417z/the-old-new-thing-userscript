<html>
<head>
<title>The MIPS R4000, part 6: Memory access (unaligned)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The MIPS R4000, part 6: Memory access (unaligned)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 9, 2018 / year-entry #83</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180409-00/?p=98465</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Split 'em up.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Unaligned memory access on the MIPS R4000 is performed with
pairs of instructions.
</p>
<pre>
    LWL     rd, n+3(rs)     ; load word left
    LWR     rd, n(rs)       ; load word right
</pre>
<p>
This is easier to explain with a diagram rather than with
a formula.
</p>
<table STYLE="border-collapse: collapse; text-align: center"
       CLASS="cp3" CELLPADDING=3>
<tr>
<td STYLE="width: 1pc"></td>
<td STYLE="width: 4pc" COLSPAN=4 ALIGN=left>n+3(rs)</td>
<td STYLE="width: 4pc" COLSPAN=4 ALIGN=left>n(rs)</td>
<td STYLE="width: 1px"></td>
<td STYLE="width: 1pc"></td>
<td STYLE="width: 1pc"></td>
<td STYLE="width: 1pc"></td>
</tr>
<tr>
<td STYLE="width: 1pc"></td>
<td STYLE="width: 1pc">&darr;</td>
<td STYLE="width: 1pc"></td>
<td STYLE="width: 1pc"></td>
<td STYLE="width: 1px"></td>
<td STYLE="width: 1pc">&darr;</td>
<td STYLE="width: 1pc"></td>
<td STYLE="width: 1pc"></td>
<td STYLE="width: 1pc"></td>
</tr>
<tr>
<td STYLE="border: solid black 1px; width: 1pc">AA</td>
<td STYLE="border: solid black 1px; width: 1pc">BB</td>
<td STYLE="border: solid black 1px; width: 1pc">CC</td>
<td STYLE="border: solid black 1px; width: 1pc">DD</td>
<td STYLE="width: 1px"></td>
<td STYLE="border: solid black 1px; width: 1pc">EE</td>
<td STYLE="border: solid black 1px; width: 1pc">FF</td>
<td STYLE="border: solid black 1px; width: 1pc">GG</td>
<td STYLE="border: solid black 1px; width: 1pc">HH</td>
</tr>
<tr>
<td STYLE="width: 9pc" COLSPAN=9>&nbsp;</td>
</tr>
<tr>
<td STYLE="width: 1pc"></td>
<td STYLE="border: solid black 1px; width: 1pc">11</td>
<td STYLE="border: solid black 1px; width: 1pc">22</td>
<td STYLE="border: solid black 1px; width: 1pc">33</td>
<td STYLE="width: 1px"></td>
<td STYLE="border: solid black 1px; width: 1pc">44</td>
<td STYLE="width: 1pc"></td>
<td STYLE="width: 2pc" COLSPAN=2 ALIGN=left>rd</td>
</tr>
<tr>
<td STYLE="width: 1pc"></td>
<td STYLE="width: 8pc" COLSPAN=8 ALIGN=left><code>LWL rd, n+3(rs)</code></td>
</tr>
<tr>
<td STYLE="width: 1pc"></td>
<td STYLE="border: solid black 1px; width: 1pc">BB</td>
<td STYLE="border: solid black 1px; width: 1pc">CC</td>
<td STYLE="border: solid black 1px; width: 1pc">DD</td>
<td STYLE="width: 1px"></td>
<td STYLE="border: solid black 1px; width: 1pc">44</td>
<td STYLE="width: 1pc"></td>
<td STYLE="width: 2pc" COLSPAN=2 ALIGN=left>rd</td>
</tr>
<tr>
<td STYLE="width: 1pc"></td>
<td STYLE="width: 8pc" COLSPAN=8 ALIGN=left><code>LWR rd, n(rs)</code></td>
</tr>
<tr>
<td STYLE="width: 1pc"></td>
<td STYLE="border: solid black 1px; width: 1pc">BB</td>
<td STYLE="border: solid black 1px; width: 1pc">CC</td>
<td STYLE="border: solid black 1px; width: 1pc">DD</td>
<td STYLE="width: 1px"></td>
<td STYLE="border: solid black 1px; width: 1pc">EE</td>
<td STYLE="width: 1pc"></td>
<td STYLE="width: 2pc" COLSPAN=2 ALIGN=left>rd</td>
</tr>
</table>
<p>
You give the "load word left" instruction the effective address
of the most significant byte of the unaligned word you want to load,
and it picks out the correct bytes from the enclosing word
and merges them into
the upper bytes of the destination register.
</p>
<p>
The "load word right" works analogously:
You give it the effective address of the least
significant byte of the unaligned word you want to load,
and it picks out the correct bytes from the enclosing word
and merges them into
the lower bytes of the destination register.
</p>
<p>
Since the results are combined via merging,
you can issue the <code>LWL</code> and <code>LWR</code>
instructions in either order, and together they will
load the complete four-byte value.&sup1;
(If the address happened to be aligned,
then both instructions will load the complete word.)
</p>
<p>
There are corresponding left/right instructions for storing
an unaligned word:
</p>
<pre>
    SWL     rd, n+3(rs)     ; store word left
    SWR     rd, n(rs)       ; store word right
</pre>
<p>
These are the counterparts to the load versions.
They store the upper and lower part of the word to the
corresponding parts of memory.
</p>
<p>For unaligned halfword access, you might be tempted
to do this:
</p>
<pre>
    ; Try to load unaligned word unsigned from rs to rd
    ; Does this work?
    LWL     rd, n+3(rs)     ; load word left
    LWR     rd, n(rs)       ; load word right
    ANDI    rd, rd, 0xFFFF  ; keep the lower 16 bits
</pre>
<p>
Unfortunately, this doesn't work because the
<code>n+3(rs)</code> might cross into an
invalid page.
Consider the case where the halfword is the very last halfword
on its page:
If you tried to load it as a word, you would need to load
the first halfword on the next page (to fill the top 16 bits),
and that could crash if the next page were invalid.
</p>
<p>
Instead, you need to perform unaligned halfword access
by loading two bytes and combining them:
</p>
<pre>
    ; Load unaligned word signed from rs to rd
    LB      at, n+1(rs)     ; load high byte
    LBU     rd, n(rs)       ; load low byte
    SLL     at, at, 8       ; shift high byte into position
    OR      rd, rd, at      ; combine the bytes
</pre>
<p>
If you want to load an unaligned word unsigned,
you would change the first instruction from
<code>LB</code> to <code>LBU</code>.
</p>
<p>
For the same reason as loading,
storing an unaligned word is done by storing the bytes separately.
</p>
<pre>
    ; Store unaligned word to rd from rs
    SRL     at, rs, 8       ; shift high byte into position
    SB      at, n+1(rd)     ; store high byte
    SB      rs, n(rd)       ; store low byte
</pre>
<p>
The assembler provides pseudo-instructions for these unaligned
memory operations:
</p>
<pre>
    ULW     rs, disp16(rd)  ; unaligned load word
    USW     rs, disp16(rd)  ; unaligned store word
    ULH     rs, disp16(rd)  ; unaligned load halfword signed
    ULHU    rs, disp16(rd)  ; unaligned load halfword unsigned
    USH     rs, disp16(rd)  ; unaligned store halfword

    ; and again for absolute addressing
    ULW     rs, global_var  ; unaligned load word
    USW     rs, global_var  ; unaligned store word
    ULH     rs, global_var  ; unaligned load halfword signed
    ULHU    rs, global_var  ; unaligned load halfword unsigned
    USH     rs, global_var  ; unaligned store halfword
</pre>
<p>
Mind you, these pseudo-instructions don't help you when debugging.
The debugger shows the underlying real instructions.
</p>
<p>
If you've been paying attention, you may have noticed that the
<code>ULW rd, disp16(rs)</code> pseudo-instruction fails
if <var>rs</var> and <var>rd</var> happen to be the same register,
because the <code>LWL</code> will damage the base register
before it can be used to load the right half.
In that case, the assembler uses this alternate version:
</p>
<pre>
    LWL     at, n+3(rs)     ; load word left into temporary
    LWR     at, n(rs)       ; load word right into temporary
    OR      rs, at, at      ; move to final destination
</pre>
<p>
Okay, next time we'll look at atomic memory operations.
</p>
<p>
&sup1;
In versions of the MIPS architecture with load delay slots,
there was a special exception for <code>LWL</code> and <code>LWR</code>:
You were allowed to issue them directly after the other,
and they would merge correctly,
provided they target different bytes of the same destination register
or update the entire destination.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1332465">
				<div id="div-comment-1332465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AberAber</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180409-00/?p=98465#comment-1332465">
			April 9, 2018 at 9:19 am</a>		</div>

		<p>Am I wrong in assuming this should be used very infrequently, and in most cases should&#8217;ve been aligned?  Just curious why these unaligned reads/writes were happening.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-2" id="comment-1332485">
				<div id="div-comment-1332485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180409-00/?p=98465#comment-1332485">
			April 9, 2018 at 2:13 pm</a>		</div>

		<p>PIDLs for example are variable sized and the &#8220;header&#8221; for each component is 16 bits and is probably not aligned. You might have UTF-16 strings that are not aligned as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1332515">
				<div id="div-comment-1332515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180409-00/?p=98465#comment-1332515">
			April 9, 2018 at 4:58 pm</a>		</div>

		<p>You get unaligned memory accesses for, among other things:<br />
&#8211; I/O (many file formats and network protocols have fields that are not naturally aligned)<br />
&#8211; byte-wise memory copies and moves (which you generally perform using wider loads/stores for speed)<br />
&#8211; string/text manipulation, especially C strings (again, often using wider-than-byte types for speed, but the addresses are not generally aligned)</p>
<p>By volume, it&#8217;s not that much code, but it&#8217;s common for servers to spend a double-digit percentage of their non-idle CPU time copying memory around in some form or other.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

