<html>
<head>
<title>What is the hSection parameter to CreateDIBSection for?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What is the hSection parameter to CreateDIBSection for?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 8, 2010 / year-entry #11</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The CreateDibSection function creates a special type of bitmap known as a DIB section. We've worked with these guys before: The feature of DIB sections that is by far the most interesting is that the raw pixels in the bitmap are mapped into your process space as if they were normal memory, which you can...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The <code>CreateDibSection</code> function creates a special type of bitmap known as a DIB section. <a href="http://blogs.msdn.com/oldnewthing/archive/2006/11/16/1086835.aspx"> We've worked</a> <a href="http://blogs.msdn.com/oldnewthing/archive/2009/07/17/9836293.aspx"> with these guys</a> before: The feature of DIB sections that is by far the most interesting is that the raw pixels in the bitmap are mapped into your process space as if they were normal memory, which you can read from and write to directly.</p>
<blockquote class="m"><p> But what is the deal with that funky <code>hSection</code> parameter? Although the <code>ppvBits</code> parameter receives "a pointer to the location of the DIB bit values," the documentation also says that if you pass <code>NULL</code>, then "an application cannot later obtain a handle to this memory." That second part makes no sense. Why would I want to obtain a handle to the memory if I passed <code>NULL</code>, since I told it I didn't have any memory to begin with? Why is it so important to call out that I can't retrieve <code>NULL</code>? The documentation appears to go out of its way to point out something that makes no sense! </p>
</blockquote>
<p> Let's look at that second part in a little more context. Here is the entire description for the <code>hSection</code> parameter: </p>
<blockquote class="q"><p> If <i>hSection</i> is NULL, the system allocates memory for the DIB. In this case, the <b>CreateDIBSection</b> function ignores the <i>dwOffset</i> parameter. An application cannot later obtain a handle to this memory. The <b>dshSection</b> member of the <b>DIBSECTION</b> structure filled in by calling the <b>GetObject</b> function will be NULL.  </p>
</blockquote>
<p> The "this" in "this memory" is "the memory the system allocated," not "the memory the application passed in." Because, as you noticed, the application didn't pass in any memory! It's trying to tell you that when you tell the system to allocate memory for the DIB section, you don't get to peek back in and get the handle to the memory which the system allocated. </p>
<p> Let's look at the bigger picture here. The memory for a DIB section needs to be mapped into the application's address space, and from the description, the application has the option of passing explicit storage in the form of a file mapping handle (and offset into that file mapping handle), or it can pass <code>NULL</code> and let GDI worry about where to store it. If you were writing the GDI code to manage the memory for DIB sections, how would you do it? </p>
<p> <i>How would you do it?</i> is is another one of those problem-solving questions similar to <i>What would the world be like if that were true?</i> or <i>Imagine if two programs did this?</i> For one thing, <i>How would you do it?</i> lets you rule out designs that involve clairvoyance or psychic powers. (It's surprising how often people quietly assume that systems are built upon clairvoyance.) For another thing, it forces you to put on a different hat and view the problem from another point of view, one which may help you understand the system better. </p>
<p> If you had to implement a system where memory could be managed either in the form of a file mapping handle or a mechanism of your choice, you probably would choose as your alternate mechanism... a file mapping handle. That way, there is only one code path for memory management instead of two. </p>
<p> Suppose you had to install a door security system that both you and Bob could use. Bob insists that he use a traditional metal key to unlock the door, but says you can use any system you want. Would you design a combination system that could be unlocked either with a metal key or an electronic smart card? Or would you just use a traditional keyed lock with two sets of keys, giving one of Bob and keeping the other for yourself? </p>
<p> When you create a DIB section and pass <code>NULL</code> for the <code>hSection</code>, GDI simply creates an internal <code>hSection</code> and uses that. The documentation is trying to say that the internal <code>hSection</code> is inaccessible to the application. </p>
<p> Note: I don't know if this is actually what happens internally, but it's the simplest explanation that matches the known facts. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-801753">
				<div id="div-comment-801753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">avek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343#comment-801753">
			January 8, 2010 at 12:15 pm</a>		</div>

		<p>[Imagine if somebody closed the handle! -Raymond]</p>
<p>The system could duplicate the handle before giving it to application. That&#8217;s what capabilities are for (and the kernel handles are essentially capabilities).</p>
<p>Of course, in that case some apps would not close the duplicated handle, leaking the DIB memory. And DIB section never was a small thing, especially in the days of NT 3.x.</p>
<p>So CreateDIBSection approach seems to be the most reliable: if you want explicit memory control, ask for it explicitly, or you get the safe version.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-801773">
				<div id="div-comment-801773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343#comment-801773">
			January 8, 2010 at 1:14 pm</a>		</div>

		<p>But why use a DIB if you dont want the pointer? </p>
<p>Whats the difference between a DIB created with a null pointer, and a regular old DDB?</p>
<p>In both cases you get to pick the pixel format and dimensions, and in both cases you are not given direct access to the pixel data.</p>
<div class=post>[<i>Um, CreateDIBSection gives you the pointer to the pixel data. If you pass NULL you&#8217;re saying &#8220;Please, GDI, allocate the memory for me and give me a pointer to it.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-801833">
				<div id="div-comment-801833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pagetable.com/' rel='external nofollow' class='url'>Myria</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343#comment-801833">
			January 8, 2010 at 6:20 pm</a>		</div>

		<p>A &quot;section&quot; in Windows NT is a file mapping handle. &nbsp;MapViewOfFile is a thin wrapper around the native NT function NtMapViewOfSection, as an example.</p>
<p>Sometimes this nomenclature difference leaks through to the Win32 side, such as this hSection parameter. &nbsp;Another place is the names of some of the protection flags to CreateFileMapping: &quot;SEC_IMAGE&quot; means to create an image section.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-801743">
				<div id="div-comment-801743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343#comment-801743">
			January 8, 2010 at 11:12 am</a>		</div>

		<p>I don&#8217;t see any reason why the system cannot return that internal handle in dshSection. However, I believe that it does not return it simply because GDI internaly *may* use different memory allocation.</p>
<div class=post>[<i>Imagine if somebody closed the handle! -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-801853">
				<div id="div-comment-801853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">679</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343#comment-801853">
			January 9, 2010 at 2:58 am</a>		</div>

		<p>@Joseph Koss:</p>
<p>I may be wrong, but I think you can only select a DDB into a memory device context if it has the same pixel format or is monochrome. CreateDIBSection allocates a DIB in the desired pixel format and, in addition, gives you a handle that you can select into any memory device context or pass to functions that expect a bitmap handle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-801863">
				<div id="div-comment-801863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343#comment-801863">
			January 9, 2010 at 5:56 am</a>		</div>

		<p>For the reason it&#8217;s spelled out in the documentation, see <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/dd183567.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/dd183567.aspx</a>.</p>
<p>CreateDIBSection&#8217;s return value is an HBITMAP, which is in theory all you need to manage the DIB. &nbsp;As it says on the previous line, you can use GetObject to get back a DIBSECTION, which is a BITMAP (with bmBits set to *ppvBits), and some extra information, including the hSection. &nbsp;However, given an HBITMAP to a DIB, you can&#8217;t assume that hSection is set.</p>
<p>Imagine you&#8217;re using a library that wraps CreateDIBSection, and only returns an HBITMAP. &nbsp;If it&#8217;s your responsibility to call DeleteObject, you need to check whether hSection is NULL and skip the subsequent call to CloseHandle.</p>
<p>(In other words, it&#8217;s not wise for a library to leave cleanup of a DIB to the client.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-801873">
				<div id="div-comment-801873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343#comment-801873">
			January 9, 2010 at 12:32 pm</a>		</div>

		<p>[Imagine if somebody closed the handle! -Raymond]</p>
<p>Well, I can give an hSection to the system and close it afterwards. The net effect would be the same, wouldn&#8217;t it?</p>
<p>Like waleri I think that maybe somebody didn&#8217;t want to guarantee via the API that they would always use a traditional keylock and not a smart card.</p>
<div class=post>[<i>The kernel can dup the handle passed in. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-801893">
				<div id="div-comment-801893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343#comment-801893">
			January 10, 2010 at 6:26 am</a>		</div>

		<p>[The kernel can dup the handle passed in. -Raymond]</p>
<p>The kernel can dup the handle passed out too, as noted by avek.</p>
<p>Granted, it&#8217;s all guesswork on your and our part.</p>
<p>Still, I like the &#8220;liability avoidance&#8221; scenario better :)</p>
<div class=post>[<i>Duping the handle on the way out means that applications can use offsets beyond the one used by the DIB section to modify <u>other</u> bitmaps! (GDI might sub-allocate one giant section for multiple bitmaps.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-801903">
				<div id="div-comment-801903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100108-00/?p=15343#comment-801903">
			January 10, 2010 at 5:42 pm</a>		</div>

		<p>[It&#8217;s surprising how often people quietly assume that systems are built upon clairvoyance.]</p>
<p>I&#8217;d say that instead of this assumption, people always try to assume the APIs are built in the most convenient way, that whatever they want to perform can be done in single line of code (no matter how unreasonable it seems).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

