<html>
<head>
<title>How can I launch an unelevated process from my elevated process and vice versa?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I launch an unelevated process from my elevated process and vice versa?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 18, 2013 / year-entry #304</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>27</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Going from an unelevated process to an elevated process is easy. You can run a process with elevation by passing the runas verb to Shell­Execute or Shell­Execute­Ex. Going the other way is trickier. For one thing, it's really hard to munge your token to remove the elevation nature properly. And for another thing, even if...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Going from an unelevated process to an elevated process is easy.
You can run a process with elevation by
<a HREF="http://blogs.msdn.com/b/vistacompatteam/archive/2006/09/25/771232.aspx">
passing the <code>runas</code> verb</a>
to <code>Shell&shy;Execute</code> or
<code>Shell&shy;Execute&shy;Ex</code>.
</p>
<p>
Going the other way is trickier.
For one thing, it's really hard to munge your token to remove the
elevation nature properly.
And for another thing, even if you could do it, it's not the right
thing to do, because the unelevated user may be different from the
elevated user.
</p>
<p>
Let me expand on that last bit.
</p>
<p>
Take a user who is not an administrator.
When that user tries to run a program with elevation,
the system will display a prompt that says,
"Hey, like, since you're not an administrator,
I need you to type the userid and password of somebody
who <i>is</i> an administrator."
When that happens, the elevated program is running not as the
original user but as the administrative user.
Even if the elevated program tried to remove elevation from its token,
all it managed to do is create an unelevated token
<i>for the administrative user</i>, not the original user.
</p>
<p>
Suppose we have Alice Administrator and Bob Banal.
Bob logs on,
and then tries to run LitWare Dashboard,
which requires elevation.
The prompt comes up, and Bob calls over Alice to grant
administrative privileges.
Alice types her password, and boom, now LitWare Dashboard is running
elevated <i>as Alice</i>.
</p>
<p>
Now suppose LitWare Dashboard wants to launch the user's Web browser
to show some online content.
Since there is no reason for the Web browser to run elevated,
it tries to unelevate the browser in order to reduce the security
attack surface.
If it simply neutered its token and used that to launch the browser,
it would be running a copy of the browser unelevated <i>as Alice</i>.
But LitWare Dashboard presumably
really wanted to run the browser as Bob,
since it is Bob who is the unelevated user in this session.
</p>
<p>
The solution here is to go back to Explorer and ask Explorer to
launch the program for you.
Since Explorer is running as the original unelevated user,
the program (in this case, the Web browser) will run as Bob.
This is also important in the case that the handler for the file
you want to open runs as an in-process extension rather than as
a separate process,
for in that case,
the attempt to unelevate would be pointless since no new process
was created in the first place.
(And if the handler for the file tries to communicate with
an existing unelevated copy of itself, things may fail because of UIPI.)
</p>
<p>
Okay, I know that Little Programs are not supposed to have motivation,
but I couldn't help myself.
Enough jabber.
Let's write code.
(Remember that Little Programs do little or no error checking,
because that's the way they roll.)
</p>
<pre>
#define STRICT
#include &lt;windows.h&gt;
#include &lt;shldisp.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;exdisp.h&gt;
#include &lt;atlbase.h&gt;
#include &lt;stdlib.h&gt;

// <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/03/18/10403054.aspx">FindDesktopFolderView</a> incorporated by reference

void GetDesktopAutomationObject(REFIID riid, void **ppv)
{
 CComPtr&lt;IShellView&gt; spsv;
 FindDesktopFolderView(IID_PPV_ARGS(&amp;spsv));
 CComPtr&lt;IDispatch&gt; spdispView;
 spsv-&gt;GetItemObject(SVGIO_BACKGROUND, IID_PPV_ARGS(&amp;spdispView));
 spdispView->QueryInterface(riid, ppv);
}
</pre>
<p>
The
<code>
Get&shy;Desktop&shy;Automation&shy;Object</code>
function
locates the desktop folder view
then asks for the dispatch object for the view.
We then return that dispatch object in the form requested by the caller.
This dispatch object is a <code>Shell&shy;Folder&shy;View</code>,
and the C++ interface for that is
<code>IShell&shy;Folder&shy;View&shy;Dual</code>,
so most callers are going to ask for that interface,
but
if you are a masochist, you can skip the dual interface and
talk directly to <code>IDispatch</code>.
</p>
</p>
<pre>
void ShellExecuteFromExplorer(
    PCWSTR pszFile,
    PCWSTR pszParameters = nullptr,
    PCWSTR pszDirectory  = nullptr,
    PCWSTR pszOperation  = nullptr,
    int nShowCmd         = SW_SHOWNORMAL)
{
 CComPtr&lt;IShellFolderViewDual&gt; spFolderView;
 GetDesktopAutomationObject(IID_PPV_ARGS(&amp;spFolderView));
 CComPtr&lt;IDispatch&gt; spdispShell;
 spFolderView-&gt;get_Application(&amp;spdispShell);

 CComQIPtr&lt;IShellDispatch2&gt;(spdispShell)
    -&gt;ShellExecute(CComBSTR(pszFile),
                   CComVariant(pszParameters ? pszParameters : L""),
                   CComVariant(pszDirectory ? pszDirectory : L""),
                   CComVariant(pszOperation ? pszOperation : L""),
                   CComVariant(nShowCmd));
}
</pre>
<p>
The
<code>Shell&shy;Execute&shy;From&shy;Explorer</code>
function
starts by getting the desktop folder automation object.
We use the desktop not because it's particularly meaningful
but because we know that it's always going to be there.
</p>
<p>
As with the desktop folder view,
the <code>Shell&shy;Folder&shy;View</code> object is not interesting
to us for itself.
It's interesting to us because the object
resides in the process that is hosting the desktop view
(which is the main Explorer process).
From the <code>Shell&shy;Folder&shy;View</code>, we ask for the
<code>Application</code> property
so that we can get to the main
<code>Shell.<wbr>Application</code> object,
which has the <code>IShell&shy;Dispatch</code> interface
(and its extensions
<code>IShell&shy;Dispatch2</code> through
<code>IShell&shy;Dispatch6</code>)
as its C++ interfaces.
And it is the
<code>IShell&shy;Dispatch2::<wbr>Shell&shy;Execute</code> method
that is what we really want.
</p>
<p>
"You never loved me.
You only wanted me in order
to get access to my family," sobbed the shell folder view.
</p>
<p>
And we call
<code>IShell&shy;Dispatch2::<wbr>Shell&shy;Execute</code> with
the appropriate parameters.
Note that the parameters to
<code>IShell&shy;Dispatch2::<wbr>Shell&shy;Execute</code> are
<i>in a different order</i> from the parameters to
<code>Shell&shy;Execute</code>!
</p>
<p>
Okay, let's put this inside a little program.
</p>
<pre>
int __cdecl wmain(int argc, wchar_t **argv)
{
 if (argc &lt; 2) return 0;

 <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/05/20/135841.aspx">CCoInitialize</a> init;
 ShellExecuteFromExplorer(
    argv[1],
    argc >= 3 ? argv[2] : L"",
    argc >= 4 ? argv[3] : L"",
    argc >= 5 ? argv[4] : L"",
    argc >= 6 ? _wtoi(argv[5]) : SW_SHOWNORMAL);

 return 0;
}
</pre>
<p>
The program takes a mandatory command line argument which is
the thing to execute, be it a program or a document or a URL.
Optional parameters are the parameters to the thing being executed,
the current directory to use,
the operation to perform, and how the window should be opened.
</p>
<p>
Open an elevated command prompt, and then run this program
in various ways.
</p>
<table STYLE="border-collapse: collapse" BORDER=1 BORDERCOLOR=black
       CELLPADDING=3>
<tr>
<td><code>scratch http://www.msn.com/</code></td>
<td>Open an unelevated Web page in the user's default Web browser.</td>
</tr>
<tr>
<td><code>scratch cmd.exe "" C:\Users "" 3</code></td>
<td>Open an unelevated command prompt at
        <code>C:\Users</code>, maximized.</td>
</tr>
<tr>
<td><code>scratch C:\Path\<wbr>To\<wbr>Image.bmp "" "" edit</code></td>
<td>Edit a bitmap in an unelevated image editor.</td>
</tr>
</table>
<p>
This program is basically the same as the
<a HREF="http://msdn.microsoft.com/library/dd940355">Execute in Explorer</a>
sample.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1089153">
				<div id="div-comment-1089153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian G.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089153">
			November 18, 2013 at 7:07 am</a>		</div>

		<p>I run as non-admin user with an admin account (both under my control) to do all the installing and muckity-muck. I wish installers used this more often. I get very annoyed when I install a program and the last thing it does is launch the newly-installed program as my admin user.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1089163">
				<div id="div-comment-1089163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089163">
			November 18, 2013 at 7:14 am</a>		</div>

		<p>So what do you do if explorer isn&#39;t running?</p>
<p>@Brian G: Most developers good enough to figure this out hate UAC as the load fell hardest on them and they can see the uselessness of it. It is so tempting to use one of the auto-elevate holes to avoid bugging the user when elevate is required.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1089173">
				<div id="div-comment-1089173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089173">
			November 18, 2013 at 7:14 am</a>		</div>

		<p>Elevating is not that easy either, when UAC is off the runas verb is &quot;broken&quot; (IMHO it should show the NT5 runas dialog but instead it just starts the process unelevated) so the child application must verify that it is actually elevated.</p>
<p>This going back down example fails if Explorer is not running so you should be prepared for that and create a restricted token as best you can if you really need to start a new process. An alternative is to have a middleman which starts itself elevated and then uses some type of IPC to trigger the required unelevated task.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1089223">
				<div id="div-comment-1089223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089223">
			November 18, 2013 at 11:10 am</a>		</div>

		<p>Raymond, where can I get the ValleySpeak language pack, so every dialog box will start with &quot;Hey, like, &#8230;&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-brunopitrus even thread-even depth-1" id="comment-1089233">
				<div id="div-comment-1089233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kinokijuf' rel='external nofollow' class='url'>kinokijuf</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089233">
			November 18, 2013 at 11:57 am</a>		</div>

		<p>@skSdnW The Flash installer does not open the browser.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1089243">
				<div id="div-comment-1089243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@kinokijuf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089243">
			November 18, 2013 at 12:36 pm</a>		</div>

		<p>Maybe it doesn&#39;t now, but I recall it did try to open a test page at one point, said something like thanks for installing flash, flash content should now work as on this page&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1089253">
				<div id="div-comment-1089253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BZ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089253">
			November 18, 2013 at 12:53 pm</a>		</div>

		<p>&quot;We use the desktop not because it&#39;s particularly meaningful but because we know that it&#39;s always going to be there.&quot;</p>
<p>This is a curious statement to make when Windows is transitioning full tilt into the Metro (yes, I know, but what do you want me to call it?) environment. Oh, I realize that the application in question is a desktop application, but even so, there could be a time when desktop apps run in some special backwards-compatible sandbox without a desktop. Or is there some guarantee somewhere that Win32 will always have a Desktop? After all, it didn&#39;t before Windows 95 / NT4, right?</p>
<div class="post">[<em>Since this is a desktop application, there will be a desktop (though it might be merely a backward compatibility desktop). And yes, there was no desktop prior to Windows 95, but so what? No pre-Windows 95 application would try to access the desktop view since there was no such thing as a desktop view. Are you looking for the nitpicker statement &quot;There will always be a desktop view on any version of Windows that has APIs for accessing the desktop view&quot;? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1089263">
				<div id="div-comment-1089263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089263">
			November 18, 2013 at 1:38 pm</a>		</div>

		<p>Re: &quot;So what do you do if explorer isn&#39;t running?&quot;</p>
<p>Or if explorer is running elevated, for that matter? Even if you&#39;re not supposed to do so, it&#39;s not hard to do it by accident.</p>
<p>I take it from the nature of the solution in this post that there&#39;s no way for the elevated app to actually directly acquire the unelevated token it was started from?</p>
<div class="post">[<em>If explorer is running elevated, then the said &quot;Run everything elevated!&quot; in which case you presumably should honor the user&#39;s (poor) choice and open the Web browser elevated. (Imagine if the unelevated token were retained. That would mean that if you elevate from user B to user A, and then user B logs off, user B&#39;s token remains alive inside the elevated process, and then <a href="http://blogs.msdn.com/b/oldnewthing/archive/2005/06/30/434209.aspx">Bad Things Happen</a>.) -Raymond]</em></div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1089273">
				<div id="div-comment-1089273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089273">
			November 18, 2013 at 2:19 pm</a>		</div>

		<p>[Since this is a desktop application, there will be a desktop]</p>
<p>I think I already knocked down that statement.</p>
<p>I really do detest the number of software components I encounter that assume that Explorer is running. I tend to have to write them off as having critical defects sooner or later. There&#39;s just too many cases where explorer is not running.</p>
<p>I find myself in a position where I may soon need to make a stripped-down alternate shell because Microsoft will not address accessibility bugs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1089183">
				<div id="div-comment-1089183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089183">
			November 18, 2013 at 7:18 am</a>		</div>

		<p>Someone should tell the authors of the ja** and fla** installers/updaters about this code example, they somehow think its a good idea to start a elevated browser session.</p>
<p>To top if off, if you install both the activex and netscape plugins one of them is going to open the wrong browser&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1089283">
				<div id="div-comment-1089283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089283">
			November 18, 2013 at 3:22 pm</a>		</div>

		<p>&gt; I find myself in a position where I may soon need to make a stripped-down alternate shell because Microsoft will not address accessibility bugs.</p>
<p>Can you hire xpclient as a UI consultant? That would be super awesome.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1089293">
				<div id="div-comment-1089293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089293">
			November 18, 2013 at 3:46 pm</a>		</div>

		<p>I remember you mentioning that this post was coming, and it&#39;s finally here! &nbsp;Thank you!!!</p>
<p>My solution had a similar effect, but was more complicated and really wasn&#39;t the best approach. &nbsp;Yours is definitely better!</p>
<p>My solution was to use GetShellWindow then GetWindowThreadProcessId to find the master Explorer&#39;s process ID, OpenProcess then OpenProcessToken to get Explorer&#39;s unelevated token, DuplicateTokenEx to create a new primary token, then finally CreateProcessAsUserW to run your new process. &nbsp;This is not perfect, due to things like the environment not being inherited properly, but CreateEnvironmentBlock may help with that somewhat. &nbsp;Supporting the cross-user scenario is also possible, but much more difficult: you have to use the fact that you&#39;re running with Administrator access to acquire SeDebugPrivilege and SeTcbPrivilege so that you can call OpenProcess and CreateProcessAsUserW on other users&#39; objects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1089303">
				<div id="div-comment-1089303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089303">
			November 18, 2013 at 4:11 pm</a>		</div>

		<p>This may be obvious, but why doesn&#39;t UAC create an new token for the current user and add the privileges from the administrator. I mean just because the administrator gives you permission to do something, doesn&#39;t mean suddenly you are them!</p>
<p>I suppose this falls over in network scenarios.</p>
<div class="post">[<em>The definition of &quot;has administrative privileges&quot; is &quot;belongs to the Administrators group.&quot; That&#39;s how all the ACLs in the system are set up. (ACLs don&#39;t check privileges; they check SIDs.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1089203">
				<div id="div-comment-1089203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089203">
			November 18, 2013 at 8:31 am</a>		</div>

		<p>If it were not for the issue with the elevated process running under a different *user*, could you create an appropriately restricted token using CreateRestrictedToken()? No &quot;munging&quot; required.</p>
<div class="post">[<em>Create&shy;Restricted&shy;Token is part of the munging. Note that the munged token is a <span style="text-decoration:underline;">new token</span>, different from the token being used by Explorer. This means that you may have issues trying to share information with Explorer and other applications running under Explorer&#39;s token, like network drive mappings. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1089313">
				<div id="div-comment-1089313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089313">
			November 18, 2013 at 4:39 pm</a>		</div>

		<p>I think Myria&#39;s solution is a better choice. BTW, you do not have to call DuplicateTokenEx. Use the existing token.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1089323">
				<div id="div-comment-1089323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089323">
			November 18, 2013 at 5:08 pm</a>		</div>

		<p>@Joshua: I like Raymond&#39;s solution more, because it far more easily supports the cross-user case; no SeTcbPrivilege nonsense is required. &nbsp;Also, it spawns the new process the same way Explorer would, which is very much the entire point of the exercise.</p>
<p>I suppose that OpenProcessToken already does return a primary token. &nbsp;If you open it with the right permissions, I suppose you don&#39;t need to DuplicateTokenEx, yeah.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00034001a5381f07 even thread-even depth-1" id="comment-1089343">
				<div id="div-comment-1089343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Georg_Rottensteiner' rel='external nofollow' class='url'>Georg_Rottensteiner</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089343">
			November 18, 2013 at 10:59 pm</a>		</div>

		<p>Interesting approach :)</p>
<p>I had the same problem with my custom made installer. First it starts without elevation. Once the user has made his choices the actual installer (without GUI) is extracted and run elevated (through manifest). Once the installer is done it gives control back to the main app (still running as the original user) which can now properly run the installed executable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1089353">
				<div id="div-comment-1089353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Trapp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089353">
			November 19, 2013 at 12:02 am</a>		</div>

		<p>Still, the question remains what happens when there is no explorer.exe at all. For example, somebody might be using a different shell, such as LiteStep, or the shell was changed to this very program as &quot;kiosk mode&quot; for users (I know that this is not secure at all, though)&#8230;</p>
<p>I wonder why there is no simple API for that. Relying on Explorer here sounds quite like a hack to me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1089373">
				<div id="div-comment-1089373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089373">
			November 19, 2013 at 12:47 am</a>		</div>

		<p>Explorer is an integral part of Windows, so relying on it isn&#39;t unreasonable (it runs your StartMenu and draws your icons for example).</p>
<p>But if you&#39;re looking for a pathological case of &quot;But what if we&#39;re running some crazy Windows where we don&#39;t have Explorer for some reason&quot;, the answer is simple. You get someone ELSE to run Explorer by asking them so you inherit their token.</p>
<p>And what if nobody else is running (for instance you&#39;re running in winlogon.exe and noone else has started up yet?) Well you&#39;ll have to create a user token via LSASS, and then use that token to create the process via CreateProcessAsUser.</p>
<p>But if you&#39;re NOT running in a crazy world of just NT running with Windows somehow crippled on top of it, then Raymond&#39;s way of asking Explorer to just launch the process on your behalf will save you a whole world of pain.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jan-ringos odd alt thread-odd thread-alt depth-1" id="comment-1089383">
				<div id="div-comment-1089383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Jan+Ringo%C5%A1' rel='external nofollow' class='url'>Jan RingoÅ¡</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089383">
			November 19, 2013 at 2:04 am</a>		</div>

		<p>Well, there are legitimate SKUs where explorer.exe is actually missing, e.g. Server Core or standalone Hyper-V Server, not mentioning custom configurations of Windows Embedded. But most of those have one thing in common: also no UAC.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1089393">
				<div id="div-comment-1089393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089393">
			November 19, 2013 at 5:03 am</a>		</div>

		<p>If you want a kiosk-like system where no Explorer hotkeys are available to the end user, you can officially use the registry key HKCUSoftwareMicrosoftWindowsCurrentVersionPoliciesSystemShell to run your program as the user&#39;s shell (look here: <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms815238.aspx">msdn.microsoft.com/&#8230;/ms815238.aspx</a>, under &quot;Custom user interface&quot;).</p>
<p>For example, think of some terminal for truck drivers, used inside an industrial area (&quot;intranet application&quot;). There are systems where not absolutely everything is under control of the software vendor because this would be way to expensive, but where you still don&#39;t like the end user being able to use Task Manager or Explorer or Help or Alt+Tab.</p>
<p>The easiest way to disable all this is to replace the shell.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt thread-odd thread-alt depth-1" id="comment-1089653">
				<div id="div-comment-1089653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089653">
			November 19, 2013 at 8:38 am</a>		</div>

		<p>&quot;Impersonation is fragile&quot;.</p>
<p>That&#39;s what came to my mind immediately after seeing the topic. It was a blast from the past, a 2002 article by Michael Howard and Keith Brown that said in-process COM servers with different thread modeling run in different threads that do not inherit the impersonated token. (I&#39;m not saying it is related; I&#39;m saying that&#39;s what I remember.) Now, starting with Windows Vista, it is impossible to launch Explorer with administrative privileges. It uses DCOM Server Process Launcher Service to bypass the token. Now, I&#39;ve been asking myself: Does &quot;launch folder window in a separate process&quot; policy do anything anymore?</p>
<p>Now good installers do not start straightaway in admin mode; the bootstrapper gather user input and then request the servicing stack to do the installing (which requests elevation). The servicing stack uses the bootstrapper instead of Explorer to launch whatever is needed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1089893">
				<div id="div-comment-1089893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BZ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1089893">
			November 19, 2013 at 12:16 pm</a>		</div>

		<p>Re: Are you looking for the nitpicker statement &quot;There will always be a desktop view on any version of Windows that has APIs for accessing the desktop view&quot;</p>
<p>Yes, that is exactly what I&#39;m looking for because I was not certain that this statement is true. Thanks for clearing that up.</p>
<div class="post">[<em>I&#39;m kind of confused by your confusion. It appears that you expected the statement to imply that Windows 1.0 has a desktop view? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1090073">
				<div id="div-comment-1090073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1090073">
			November 19, 2013 at 2:27 pm</a>		</div>

		<p>&quot;That would mean that if you elevate from user B to user A, and then user B logs off, user B&#39;s token remains alive inside the elevated process, and then Bad Things Happen&quot;</p>
<p>User B logs off, their session and window station go away, and the elevated program goes away with it? If you&#39;re starting a noninteractive process, the thing you linked is bad even if you don&#39;t elevate to a different user.</p>
<p>Okay, what if the token doesn&#39;t stay alive in the process, but each session contains an unelevated default token that anything running in it is allowed to drop to?</p>
<div class="post">[<em>You can try to snag that token from WTS (no idea if it&#39;ll work), but it won&#39;t be the same as launching it in the usual manner since other non-token context is missing (e.g., environment variables inherited from Explorer). -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1090303">
				<div id="div-comment-1090303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1090303">
			November 20, 2013 at 9:26 am</a>		</div>

		<p>As it happened, the guy who said installer bootstraper that runs unprivileged won. Every other solution resulted in at some subset of cases unhandled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis odd alt thread-odd thread-alt depth-1" id="comment-1090673">
				<div id="div-comment-1090673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1090673">
			November 21, 2013 at 10:47 am</a>		</div>

		<p>Myria&#39;s solution sounds like the one I published back in 2009 and that (AFAIK) predated the MSDN sample:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/aaron_margosis/archive/2009/06/06/faq-how-do-i-start-a-program-as-the-desktop-user-from-an-elevated-app.aspx">blogs.msdn.com/&#8230;/faq-how-do-i-start-a-program-as-the-desktop-user-from-an-elevated-app.aspx</a></p>
<p>BTW, there&#39;s no need for SeTcbPrivilege &#8211; no user account should ever be granted that. &nbsp;SeDebugPrivilege is OK to assume because you&#39;re running as admin, after all. &nbsp;If you&#39;re not admin, then the sample isn&#39;t needed. &nbsp;My blog post also covers the caveats that the MSDN sample skipped mentioning.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1090843">
				<div id="div-comment-1090843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131118-00/?p=2643#comment-1090843">
			November 22, 2013 at 10:13 am</a>		</div>

		<p>I think Joshua is right. If we&#39;ve learned anything from this article, it is that elevation is very much a one-way street.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

