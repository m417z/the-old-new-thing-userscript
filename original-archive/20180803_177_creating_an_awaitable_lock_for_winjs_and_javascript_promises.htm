<html>
<head>
<title>Creating an awaitable lock for WinJS and JavaScript Promises</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Creating an awaitable lock for WinJS and JavaScript Promises</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 3, 2018 / year-entry #177</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180803-00/?p=99405</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>2</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Rolling onward.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180802-00/?p=99395">
Last time</a>,
we created an awaitable lock for C++ PPL tasks.
Let's do the same thing for WinJS Promises
(because I needed one of those too).
</p>
<pre>
var AwaitableLock = WinJS.Class.define(function AwaitableLock() {
  this._locked = false;
  this._p = null;
  this._c = null;
}, {
  waitAsync: function waitAsync() {
    if (!this._locked) {
      // Lock is available. Acquire it.
      this._locked = true;
      return WinJS.Promise.wrap();
    }

    // Lock is not available.
    var self = this;
    if (!this._p) {
      // Create a promise that completes when the lock is released.
      this._p = new WinJS.Promise(function (c) { self._c = c; });
    }

    // Return a promise that waits for the lock to be released
    // and then retries the wait.
    return this._p.then(function () { return self.waitAsync(); });
  },

  release: function release() {
    this._locked = false;
    var c = this._c;
    this._p = null;
    this._c = null;

    // Complete any promise that was waiting for release.
    c &amp;&amp; c();
  }
});
</pre>
<p>
Since JavaScript is single-threaded, we don't have
to worry about concurrency,
so we don't need a mutex to guard our state variables.
If the lock is available, then acquire it
and return a completed promise.
</p>
<p>
Otherwise, we have to create a promise.
The <code>WinJS.Promise</code> constructor takes
a function which in turn receives a few parameters,
although we use only <code>c</code> here.
The <code>c</code> parameter is itself a function
that our code can call to complete the promise.
All we do is save that callback in the <code>_c</code> property
so that we can complete the promise later.
To avoid having to remember multiple completion callbacks,
we create this promise once and cache
it in the <code>_p</code> property.
</p>
<p>
We then chain a continuation on that newly-created promise
that restarts the <code>waitAsync</code>, and return the
resulting promise.
</p>
<p>
When the lock is released, we clear the saved
completion and promise (thereby resetting the lock object
to its unlocked state),
and if there is a completion function, we call it.
This completes the promise we created in <code>waitAsync</code>,
which means that each of them will race
to <code>waitAsync</code> and retry the acquisition.
</p>
<p>
There is a subtlety here: We reset the lock object completely
before calling the completion.
The completion is going to attempt to re-acquire
the lock object, and we don't want the reentrant call to see
a lock object in an inconsistent state.
To avoid that, we capture the completion
callback into a local <code>c</code>,
and then after the lock object has been reset,
we call the callback if necessary.
</p>
<p>
We can use ES6 function arrow notation to simplify
this code, but if we're going to do that,
we may as well go all the way and use ES6 native promises.
</p>
<pre>
var AwaitableLock = WinJS.Class.define(function AwaitableLock() {
  this._locked = false;
  this._p = null;
  this._c = null;
}, {
  <font COLOR="blue">waitAsync()</font> {
    if (!this._locked) {
      // Lock is available. Acquire it.
      this._locked = true;
      return <font COLOR="blue">Promise.resolve()</font>;
    }

    // Lock is not available.
    if (!this._p) {
      // Create a promise that completes when the lock is released.
      this._p = new <font COLOR="blue">Promise</font>(<font COLOR="blue">c =&gt; this._c = c</font>);
    }

    return this._p.then(<font COLOR="blue">() =&gt; this.waitAsync()</font>);
  },

  <font COLOR="blue">release()</font> {
    this._locked = false;
    var c = this._c;
    this._p = null;
    this._c = null;

    // Complete any promise that was waiting for release.
    c &amp;&amp; c();
  }
});
</pre>
<p>
The ES6 Promise method for creating an already-completed promise
is called <code>resolve</code>, as opposed to <code>wrap</code>,
which is what <code>WinJS.Promise</code> calls it.
The Promise constructor is the same, so we didn't have to make any
changes there aside from arrowizing the functions.
Arrowizing is convenient because it preserves <code>this</code>
inside the lambda, which saves us the trouble of having to
create a separate <code>self</code> variable.
</p>
<p>
And since we're abandoning WinJS, we may as well go all the way
and define the class using ES6's native class declaration syntax.
</p>
<pre>
<font COLOR="blue">class AwaitableLock {</font>
  <font color="blue">constructor()</font> {
    this._locked = false;
    this._p = null;
    this._c = null;
  }

  <font COLOR="blue">waitAsync()</font> {
    if (!this._locked) {
      // Lock is available. Acquire it.
      this._locked = true;
      return Promise.resolve();
    }

    // Lock is not available.
    if (!this._p) {
      // Create a promise that completes when the lock is released.
      this._p = new Promise(c =&gt; this._c = c);
    }

    return this._p.then(() =&gt; this.waitAsync());
  }

  <font COLOR="blue">release()</font> {
    this._locked = false;
    var c = this._c;
    this._p = null;
    this._c = null;

    // Complete any promise that was waiting for release.
    c &amp;&amp; c();
  }
}
</pre>
<p>
<b>Exercise</b>:
Why couldn't we arrowize the constructor?
</p>
<p>
<b>Exercise 2</b>:
Why did we set the member variables dynamically in the
constructor instead of defining them statically on the prototype?
</p>
<p>
<b>Exercise 3</b>:
Why couldn't I have precalculated the <code>.then</code>
of the promise?
</p>
<pre>
<i>// Code in italics is wrong - but why?
AwaitableLock.prototype.waitAsync = function waitAsync() {
  if (!this._locked) {
    // Lock is available. Acquire it.
    this._locked = true;
    return Promise.resolve();
  }

  // Lock is not available.
  if (!this._p) {
    // Create a promise that completes when the lock is released
    // and then retries the wait.
    this._p = new Promise(c =&gt; this._c = c)<font COLOR="blue">.then(() =&gt; this.waitAsync())</font>;
  }

  return <font COLOR="blue">this._p</font>;
}</i>
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (2)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1355865">
				<div id="div-comment-1355865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180803-00/?p=99405#comment-1355865">
			August 8, 2018 at 3:29 am</a>		</div>

		<p>1. It&#8217;s a constructor, so it needs to have its own new <code>this</code>.<br />
2. JS engines are optimised for accessing objects whose list of own property values doesn&#8217;t change after construction.<br />
3. Each waiter needs to retry after the lock is released.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1356195">
				<div id="div-comment-1356195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180803-00/?p=99405#comment-1356195">
			August 9, 2018 at 10:11 pm</a>		</div>

		<p>&#8220;Arrowizing is convenient because it preserves this inside the lambda, which saves us the trouble of having to create a separate self variable.&#8221;</p>
<p>How about binding &#8216;this&#8217; to your function with .bind(this). Does that not do the same, or does it do something different underwater?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

