<html>
<head>
<title>What are the dire consequences of not selecting objects out of my DC?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What are the dire consequences of not selecting objects out of my DC?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 6, 2013 / year-entry #64</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130306-00/?p=5043</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The convention when working with device contexts is to restore them to the way you found them. If a drawing function selects a bitmap into a device context, then it should select the original bitmap into the device context before returning. Same for fonts, pens, all that stuff. But what if you decide to violate...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The convention when working with device contexts is to restore them to the way you found them. If a drawing function selects a bitmap into a device context, then it should select the original bitmap into the device context before returning. Same for fonts, pens, all that stuff.</p>
<p> But what if you decide to violate that convention? For example, maybe you create a memory DC, select a bitmap into it, and just leave the bitmap selected there, selecting it out only when you get around to destroying the DC. Is that really so bad? </p>
<p> It sort of depends. </p>
<p> The danger of leaving objects selected into a DC for an extended period of time is that the owner of the object won't be able to destroy the object, because you can't destroy objects while they are selected into a DC. For example, if you select a font into a DC, and somebody tries to destroy the font, the <code>Delete&shy;Object</code> call will fail, and you end up leaking a font. </p>
<p> Bitmaps can be selected into only one DC at a time. If you select the bitmap into your DC and just forget about it, then the owner of that bitmap won't be able to select it into any other DC. </p>
<p> Now, if the objects you are selecting into the DC are all under your control, then you can leave them selected into your private DC, because you will know how to get them out if you need to. </p>
<p> Remember that this "leave it lying around, I'll clean it up later" technique requires you to control both the vertical and the horizontal. We've been discussing what happens if you select an object that somebody else controls into your private DC and leave it there. Conversely, if you have a bitmap that you control and leave it selected into a DC that you don't control, then you've got the same sort of problem in reverse: You won't be able to select the bitmap back out of that DC when you need to, because you lost control of the DC. </p>
<p> <b>Bonus chatter</b>: "I've noticed that sometimes, <code>Delete&shy;Object</code> claims to succeed even though it actually failed because the object is still selected in a DC." The GDI folks found that a lot of people mess up and try to destroy objects while they are still selected into DCs. Failing the call caused two categories of problems: Some applications simply leaked resources (since they thought they were destroying the object, but weren't). Other applications checked the return value and freaked out if they saw that <code>Delete&shy;Object</code> didn't actually delete the object. </p>
<p> To keep both of these types of applications happy, GDI will sometimes (not always) lie and say, "Sure, I deleted your object." It didn't actually delete it, because it's still selected into a DC, but it also ties a string around its finger, and when the object is finally deselected, GDI will say, "Oh, wait, I was supposed to delete this object," and perform the deletion. So the lie that GDI made wasn't so much a lie as it was an "optimistic prediction of the future." </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1043733">
				<div id="div-comment-1043733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tergiver</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130306-00/?p=5043#comment-1043733">
			March 6, 2013 at 8:19 am</a>		</div>

		<p>So I wasn&#39;t hallucinating, there really is a deferred deletion mechanism for objects selected into a device context! I&#39;ve been wondering about this for years as I&#39;ve seen production code that deletes objects that are still selected and yet don&#39;t leak GDI objects. In fact you can find an example of this in the MSDN library:</p>
<p><a rel="nofollow" target="_new" href="http://support.microsoft.com/default.aspx?scid=kb;EN-US;q248496" rel="nofollow">support.microsoft.com/default.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1043743">
				<div id="div-comment-1043743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130306-00/?p=5043#comment-1043743">
			March 6, 2013 at 8:31 am</a>		</div>

		<p>Bonus chatter: Objects are now garbage collected in the case of left behind in the DC. This is topologically equivalent to deleting a file when a handle is open on Unix systems. Unfortunately the caveat &quot;sometimes&quot; makes this unsafe to depend on.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043753">
				<div id="div-comment-1043753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ooh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130306-00/?p=5043#comment-1043753">
			March 6, 2013 at 8:58 am</a>		</div>

		<p>Wow, &quot;optimistic prediction of the future&quot;, I like that one!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-1043773">
				<div id="div-comment-1043773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130306-00/?p=5043#comment-1043773">
			March 6, 2013 at 9:05 am</a>		</div>

		<p>Actually, checking the Application Compatibility Toolkit&#39;s Compatibility Administrator reveals there is a compatibility fix (shim) called &#39;EmulateDeleteObject&#39;, whose description is:</p>
<p>&quot;This compatibility fix causes the Windows XP version of DeleteObject to return success, which is the Windows 9x behavior. Applies to: Windows 95, Windows 98&quot;</p>
<p>To me that would indicate that &#39;sometimes&#39; means &#39;if this shim is enabled&#39;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043793">
				<div id="div-comment-1043793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130306-00/?p=5043#comment-1043793">
			March 6, 2013 at 10:03 am</a>		</div>

		<p>Raymond wrote: &quot;For example, if you select a region into a DC, and somebody tries to destroy the region, the Delete&shy;Object call will fail, and you end up leaking a region.&quot;</p>
<p>I always thought regions were special cases. &nbsp;From MSDN: &nbsp;&quot;Only a copy of the selected region is used. The region itself can be selected for any number of other device contexts or it can be deleted.&quot; (SelectClipRgn). &nbsp;The documentation for SelectObject isn&#39;t quite as explicit, but it does seem to suggest that regions are special since the return value is not the handle of the previously selected region.</p>
<div class="post">[<em>You&#39;re right. Regions are special and do not go through SelectObject. I revised the article to use fonts instead of regions. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1043803">
				<div id="div-comment-1043803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130306-00/?p=5043#comment-1043803">
			March 6, 2013 at 2:09 pm</a>		</div>

		<p>Honestly, my perspective on software design is that this &quot;lying&quot; done by DeleteObject is how it should work in the first place &#8211; i.e., reference counting.</p>
<p>Of course, it still means that such programs aren&#39;t following the rules as documented.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043813">
				<div id="div-comment-1043813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130306-00/?p=5043#comment-1043813">
			March 6, 2013 at 2:19 pm</a>		</div>

		<p>@Mike: All it means is that according to the description of the shim, on Win 9x, DeleteObject() always returned success whether it succeeded or not, and on Windows XP it does not. (No judgement on whether the description is accurate.) No reason to go off and assume things. Why couldn&#39;t DeleteObject() lie without this shim?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-1043763">
				<div id="div-comment-1043763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130306-00/?p=5043#comment-1043763">
			March 6, 2013 at 9:01 am</a>		</div>

		<p>For Windows CE users: on Windows CE, GDI does *not* garbage-collect objects. If an object is referenced when you try to delete it, DeleteObject returns FALSE. When the DC is deleted, the object is leaked.</p>
<p>I&#39;m sure I recall reading that Windows NT-family reference-counts the objects. It&#39;s possible that this was changed some time after Windows XP to some form of garbage collection.</p>
<p>@Joshua: My reading of that statement is that &#39;sometimes&#39; refers to it lying about having deleted the object, not about subsequently cleaning up. But I could be wrong.</p>
<div class="post">[<em>I&#39;m not sure what your model for garbage collection is. How can GDI know when a bitmap handle has become garbage? (Maybe the handle got written to a file for later readback.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043823">
				<div id="div-comment-1043823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Larry Hosken</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130306-00/?p=5043#comment-1043823">
			March 6, 2013 at 7:37 pm</a>		</div>

		<p>I would have figured out it didn&#39;t stand for &quot;data center&quot; eventually.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1044433">
				<div id="div-comment-1044433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130306-00/?p=5043#comment-1044433">
			March 8, 2013 at 10:32 pm</a>		</div>

		<p>Euh&#8230; So the DC will &quot;not always&quot; delete a still-selected object, but when? We don&#39;t really want to know, nor think about that, not if we can help it, I guess. A nice &quot;structured&quot; approach to DC selection is to wrap SelectObject into RAII (the only reasonable, if you ask me).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

