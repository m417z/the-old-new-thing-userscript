<html>
<head>
<title>How do I cancel autoplay from a wizard page?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I cancel autoplay from a wizard page?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 6, 2016 / year-entry #211</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161006-00/?p=94465</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">You need to listen on the top-level window.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer wanted to suppress autoplay from their wizard.
They looked at
<a HREF="http://msdn.microsoft.com/en-us/library/bb776825.aspx">
the documentation</a>
and followed the dialog procedure example
in their own wizard page dialog procedure:
</p>
<pre>
// ... in the dialog procedure ...
  default:
    if (g_uQueryCancelAutoPlay == 0) {
      g_uQueryCancelAutoPlay =
        RegisterWindowMessage(TEXT("QueryCancelAutoPlay"));
      if (ChangeWindowMessageFilterEx(hwndDlg,
                                      g_uQueryCancelAutoPlay,
                                      MSGFLT_ALLOW, 
                                      NULL) == FALSE) {
        MessageBox(NULL, L"ChangeWindowMessageFilterEx failed",
                   L"error", MB_OK);
      }
    } 
    if (uMsg && uMsg == g_uQueryCancelAutoPlay) { 
      SetWindowLongPtr(hwndDlg, DWLP_MSGRESULT, TRUE);          
      return TRUE;
    }
</pre>
<p>
However, the code didn't seem to work. The
<code>Query&shy;Cancel&shy;Auto&shy;Play</code> message
was never received.
What's wrong with the code?
It was copied almost directly from MSDN!
</p>
<p>
Well, one of the things that's wrong is that the code doesn't
change the window message filter until after it receives
the message, which creates a bit of a chicken-and-egg problem:
You don't change the filter until after you get the message,
but you won't get the message until you change the filter!
That's easy to fix: Initialize the
<code>g_uQuery&shy;Cancel&shy;Auto&shy;Play</code> variable
and change the message filter immediately after creating the
dialog box.
That allows the
<code>Query&shy;Cancel&shy;Auto&shy;Play</code> message to
come through when the system generates it.
</p>
<p>
But even with that fix, the message won't get through.
</p>
<p>
What's wrong with the code is that wizard dialog pages are
not top-level windows.
The
<code>Query&shy;Cancel&shy;Auto&shy;Play</code> message
is sent to the foreground window,
but wizard pages are child dialogs inside the outer wizard frame
and therefore can never be the foreground window.
Activation and foreground
are a properties of top-level windows.
</p>
<p>
Since the
<code>Query&shy;Cancel&shy;Auto&shy;Play</code> message
is sent to the foreground window,
you need to listen for the message on the foreground window.
The standard way of doing this is subclassing,
and the cleanest way to do this is with a function like
<code>Set&shy;Window&shy;Subclass</code>:
</p>
<pre>
LRESULT CALLBACK CancelAutoPlaySubclassProc(
    HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam,
    UINT_PTR uIdSubclass, DWORD_PTR dwRefData)
{
  if (uMsg == g_uQueryCancelAutoPlay) {
    return TRUE;
  }
  return DefSubclassProc(hwnd, uMsg, wParam, lParam);
}

// when you want to start blocking autoplay
SetWindowSubclass(hwndDlg, CancelAutoPlaySubclassProc, 0, 0);

// when you want to stop blocking autoplay
RemoveWindowSubclass(hwndDlg, CancelAutoPlaySubclassProc, 0);
</pre>
<p>
I discussed the <code>Set&shy;Window&shy;Subclass</code>
family of functions
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20031111-00/?p=41883">
some time ago</a>.
</p>
<p>
There is a fine point here:
You want to set the subclass only when you want to start blocking
autoplay, and remove it when you want to allow it again.
And you should block autoplay only when your page is the active
page in the wizard.
In other words, the earliest you should block autoplay is
in your
<code>PSN_<wbr>SET&shy;ACTIVE</code> notification handler,
and the latest you should remove the block is in your
<code>PSN_<wbr>KILL&shy;ACTIVE</code> notification handler.
</p>
<p>
If you mess up and block autoplay when your page is not the
active page,
then you will be blocking autoplay even when there is nothing
in the wizard that needs to block autoplay.
Consider:
</p>
<ul>
<li>Page 1: "Welcome to the XYZ Wizard."
<li>Page 2: "Insert the CD."
<li>Page 3: "Please wait while we copy stuff from the CD."
<li>Page 4: "All done. This completes the XYZ Wizard."
</ul>
<p>
Autoplay should be disabled only on page 2,
because that's the only place the user expects autoplay
to be blocked.
When the user is on the welcome page,
they haven't started anything yet,
and inserting a CD should start playing music (if that's how
the user configured the system).
Similarly, when the user is on the "All done" page,
the wizard is basically finished,
and inserting a CD at that point should also start playing music.
</p>
<p>
Armed with this knowledge, you can answer this question from
a customer:
</p>
<blockquote CLASS=q><p>
We have a scenario where we need a child page of an AeroWizard
to know that a
<code>WM_<wbr>POWER&shy;BROADCAST</code> message has arrived.
What is the best way to get this message from the main window
procedure to the child pages of the wizard?
Also, how would I ensure that this message
only gets forwarded to the page that is currently active?
</p>
</blockquote>
<p>
<b>Bonus chatter</b>:
I didn't realize it at the time the question is asked,
but writing up this article just now,
I noticed that the customer who asked the above question
about the
<code>WM_<wbr>POWER&shy;BROADCAST</code> message
is the exact same customer who asked the original
question about the
<code>Query&shy;Cancel&shy;Auto&shy;Play</code> message!
The questions were eight months apart.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1 parent" id="comment-1267495">
				<div id="div-comment-1267495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161006-00/?p=94465#comment-1267495">
			October 6, 2016 at 7:47 am</a>		</div>

		<p>I guess it could also be possible to set the subclass for the whole duration of the wizard, but determine whether to suppress Autoplay dynamically during the message&#8217;s processing. I wonder which would be the &#8220;safest&#8221;.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-2 parent" id="comment-1267505">
				<div id="div-comment-1267505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161006-00/?p=94465#comment-1267505">
			October 6, 2016 at 9:06 am</a>		</div>

		<p>If there are 3rd-party components involved then it would be safer to keep the subclass for the lifetime of the window. If some other code just used SetWindowLongPtr to subclass then the list of subclassers maintained by *WindowSubclass can get out of sync and somebody might get unwillingly desubclassed&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1267626">
				<div id="div-comment-1267626" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161006-00/?p=94465#comment-1267626">
			October 7, 2016 at 1:42 am</a>		</div>

		<p>&gt; If some other code just used SetWindowLongPtr to subclass then the list of subclassers maintained by *WindowSubclass can get out of sync &lt;</p>
<p>In contrary, thats the whole point of using SetWindowSubclass, so it can properly manage the &quot;chain of subclasses&quot; when multiple subclasses exist and descublass in unexpected orders. (It does the whole complicated mess of desubclassing when you are not the first window proc so you don&#039;t have to turn your window proc into a no-op until the time comes where you can properly remove the subclass, at latest during window destruction. Since most people probably don&#039;t get that scenario right anyways SetWindowSubclass takes over that management for you by wrapping your window proc.)</p>
<p>At least thats how I understand it.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fredericmagnyf odd alt depth-4 parent" id="comment-1267635">
				<div id="div-comment-1267635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161006-00/?p=94465#comment-1267635">
			October 7, 2016 at 1:53 am</a>		</div>

		<p>I think skSdnW&#8217;s point is that SetWindowSubclass() relies on all subclassers using it. If some third-party code use SetWindowLongPtr() instead, you may lose the safety guarantee.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1267636">
				<div id="div-comment-1267636" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161006-00/?p=94465#comment-1267636">
			October 7, 2016 at 3:45 am</a>		</div>

		<p>&gt; I think skSdnW’s point is that SetWindowSubclass() relies on all subclassers using it. If some third-party code use SetWindowLongPtr() instead, you may lose the safety guarantee. &lt;</p>
<p>Thats what I was saying. Where do you (or skSdnW) take that information from? It&#039;s not document that SetWindowSubclasses requires all subclassers using it. As I was saying the whole point of that function (as far as I know) is to implement safe subclassing, so making the assumption that everyone has to use it kinda would defeat the purpose because then nobody could use it except when it is trivial, and in the trivial case you don&#039;t need it in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt depth-4 parent" id="comment-1267655">
				<div id="div-comment-1267655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161006-00/?p=94465#comment-1267655">
			October 7, 2016 at 7:57 am</a>		</div>

		<p>I&#8217;ll admit that I have not inspected these functions in years but they started off as ordinal-only undocumented functions. They are implemented in comctl32 and not user32, that is your clue that the window manager is not in on the game. They exist as a convenience to you so you don&#8217;t have to figure out how to store your data that is connected to the HWND. Is it nice that they try to unwind correctly, yeah sure but it was not bulletproof the last time I looked&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-5" id="comment-1267665">
				<div id="div-comment-1267665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161006-00/?p=94465#comment-1267665">
			October 7, 2016 at 8:59 am</a>		</div>

		<p>This is discussed in the linked entry. &#8220;RemoveWindowSubclass does all the work to do the right thing if you are not the window procedure at the top of the chain.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt depth-5" id="comment-1267805">
				<div id="div-comment-1267805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161006-00/?p=94465#comment-1267805">
			October 8, 2016 at 9:10 am</a>		</div>

		<p>@Raymond: Yes RemoveWindowSubclass is able to tell when the internal SetWindowSubclass WNDPROC is not the current GWLP_WNDPROC but SetWindowSubclass is not able to deal with the reverse situation:</p>
<p>g_oldWndProc = SetWindowLongPtr(hWnd, GWLP_WNDPROC, (LONG_PTR) SubOld);<br />
SetWindowSubclass(hWnd, SubCC6, something, whatever);<br />
&#8230;<br />
SetWindowLongPtr(hWnd, GWLP_WNDPROC, g_oldWndProc);</p>
<p>&#8230;when GWLP_WNDPROC gets restored to g_oldWndProc then SubCC6 will no longer receive messages even though it was never explicitly removed. My original comment is correct, you should not mix and match SetWindowLongPtr and SetWindowSubclass.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1267555">
				<div id="div-comment-1267555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Caron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161006-00/?p=94465#comment-1267555">
			October 6, 2016 at 5:02 pm</a>		</div>

		<p>&#8220;Insert the CD.&#8221;</p>
<p>Old New Thing indeed!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1267565">
				<div id="div-comment-1267565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161006-00/?p=94465#comment-1267565">
			October 6, 2016 at 5:16 pm</a>		</div>

		<p>I feel as if this is a repeat.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1267675">
				<div id="div-comment-1267675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161006-00/?p=94465#comment-1267675">
			October 7, 2016 at 11:47 am</a>		</div>

		<p>Was the MSDN documentation wrong, or just easy to misinterpret or misuse?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1267926">
				<div id="div-comment-1267926" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161006-00/?p=94465#comment-1267926">
			October 10, 2016 at 2:29 am</a>		</div>

		<p>The example doesn&#8217;t play games with message filters, so that part is on the customer.<br />
For the other part, the documentation does state (at least now, but it&#8217;s talking about Windows 95 so I expect it hasn&#8217;t been updated too recently): &#8220;Your application&#8217;s window must be in the foreground to receive this message.&#8221; The customer probably did not realise that their wizard page was not the foreground window. This part is likely on the customer too &#8212; you certainly can&#8217;t expect the AutoPlay documentation to mention it; I would assume that this is properly pointed out in the documentation on wizards, but I haven&#8217;t checked.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1267795">
				<div id="div-comment-1267795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JDG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161006-00/?p=94465#comment-1267795">
			October 8, 2016 at 1:30 am</a>		</div>

		<p>My gut instinct would be to create a new, invisible top-level window to receive those types of messages. It feels wrong &#8212; a violation of segregation of concerns &#8212; to start fiddling with the configuration of whatever window might be hosting my wizard/property page. Using my own window avoids any issue of incompatible interaction between my code and other code that might also make the (in my opinion) poor decision to reconfigure its host&#8217;s implementation details (with the exception of a potential very rude component that enumerates all windows and fiddles with them indiscriminately).</p>
<p>Are there any serious downsides to creating a dedicated window for the purpose, rather than redirecting the WndProc of someone else&#8217;s window?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

