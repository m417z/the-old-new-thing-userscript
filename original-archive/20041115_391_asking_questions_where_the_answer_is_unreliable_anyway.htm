<html>
<head>
<title>Asking questions where the answer is unreliable anyway</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Asking questions where the answer is unreliable anyway</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 15, 2004 / year-entry #392</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>39</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Here are some questions and then explanations why you can't do anything meaningful with the answer anyway even if you could get an answer in the first place. "How can I find out how many outstanding references there are to a shared memory object?" Even if there were a way to find out, the answer...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Here are some questions and then explanations why you can't do anything meaningful with the answer anyway even if you could get an answer in the first place.</p>
<dl>
<dt>"How can I find out how many outstanding references there are to a shared memory object?" </dt>
<dd> Even if there were a way to find out, the answer you get would be instantly wrong anyway because the microsecond after you ask the question, somebody can open a new handle.   This is an example of "Meaningless due to unavoidable race condition." </p>
</dd>
<dt>"How can I find out whether a critical section is free without entering it?" </dt>
<dd> Again, once you get an answer, the answer could instantly become wrong if another thread decides to enter the critical section immediately after you checked that it was free.  </dd>
<dt>"How can I tell whether there is a keyboard hook installed in the system?" </dt>
<dd> This suffers from the same problem yet again: The instant you get the answer ("all clear"), somebody can install a hook.  </p>
<p> This is actually even worse because people who ask this question are typically interested in secure keyboard access. But if somebody has a keyboard hook installed, that means that they have already injected code into your process (namely, the hook itself). At which point they could easily patch the imaginary <code>IsKeyboardHooked()</code> function to always return <code>FALSE</code>. </p>
<p> Now when your program asks if the keyboard is hooked, the answer is a happy "no" and you proceed, blithely confident that there are no hooks.  Just because somebody said so. </p>
</dd>
</dl>
<p><strong> You cannot reliably reason about the security of a system from within the system itself. </strong></p>
<p> It's like trying to prove to yourself that you aren't insane. </p>
<p> The system may itself have already been compromised and all your reasoning therefore can be virtualized away. Besides, your program could be running inside a virtual PC environment, in which case the absence of a keyboard hook inside the virtual PC proves nothing. The keyboard logging could be happening in the virtual PC host software. </p>
<p> From a UI standpoint, the desktop is the security boundary. Once you let somebody run on your desktop, you implicitly trust them.  Because now they can send your program random messages, inject hooks, hack at your window handles, edit your menus, and generally party all over you. </p>
<p> That's why it is such a horrible mistake to let a service interact with the desktop. By joining the interactive desktop, you have granted trust to a security context you should not be trusting. Sure, it lets you manipulate objects on that desktop, but it also lets the objects on that desktop manipulate you. (There's <a href="http://c2.com/cgi/wiki?InSovietRussia">a Yakov Smirnoff joke in there somewhere</a>, but instead I will quote Nietzsche: <i>Wenn du lange in einen Abgrund blickst, blickt der Abgrund auch in dich hinein</i>.) </p>
<p> If you're a service, you don't want to start letting untrusted programs manipulate you.  That opens you up to a <a href="http://www.microsoft.com/technet/security/news/htshat.mspx"> Shatter attack</a>. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (39)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-225783">
				<div id="div-comment-225783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.kernelmustard.com' rel='external nofollow' class='url'>Steve Dispensa</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-225783">
			November 15, 2004 at 8:17 am</a>		</div>

		<blockquote><p>
  You cannot reliably reason about the security of a system from within the system itself.  It&#8217;s like trying to prove to yourself that you aren&#8217;t insane.</p>
<p>Since you quoted Nietzche, I&#8217;ll quote Ren&#233; Descartes: &quot;Je pense, donc je suis&quot; / &quot;cogito ergo sum&quot; / &quot;I think, therefore I am&quot; &#8211; sometimes you can draw meaningful conclusions from within the system to which you are referring.</p>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-225803">
				<div id="div-comment-225803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shattered</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-225803">
			November 15, 2004 at 8:30 am</a>		</div>

		<p>I thought the release you linked to was retracted by the MS02-071 security bulletin.</p>
<p>[quote]<br />
<br />I saw a posting Microsoft authored shortly after this issue was reported, in which you said the problem was that processes with differing levels of privilege were running on the interactive desktop. It sounds like you&#8217;ve changed your opinion.</p>
<p>We have. When we initially examined the situation, we concluded that the problem here lay solely in the fact that highly-privileged and lower-privileged processes were both present in the interactive desktop. We pointed out that, by design, all processes on the interactive desktop are peers, and stated that we believed the real solution was to not mix processes of varying privileges.<br />
<br />However, upon deeper investigation, we determined that the real answer is somewhat more complicated. It&#8217;s possible for a highly privilege process to coexist safely with less privileged processes on the interactive desktop, provided that it&#8217;s been properly designed to vet all requests before acting on them. However, the flaw in WM_TIMER would undermine these safeguards even if they were present. As a result, although we still recommend that developers use extreme care before writing a process that has high privileges and runs in the interactive desktop, we believe that in this case the real culprit is the flaw in WM_TIMER.<br />
<br />[/quote]</p>
<p>That doesn&#8217;t mean that processes with different priviliges should exist on the same desktop, but I thought the shatter vulnerability could be (or is) fixed with proper message marshalling. True or false?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-225813">
				<div id="div-comment-225813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dilip</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-225813">
			November 15, 2004 at 8:30 am</a>		</div>

		<blockquote><p>
  You cannot reliably reason about the<br />
  <br />&gt; security of a system from within the system<br />
  <br />&gt; itself. It&#8217;s like trying to prove to<br />
  <br />&gt; yourself that you aren&#8217;t insane.</p>
<p>I think most people already know this but Kurt Goedel conclusively proved this ages ago breaking the entire foundation of Russel/Northhead&#8217;s Principia Mathematica.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-225823">
				<div id="div-comment-225823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-225823">
			November 15, 2004 at 8:31 am</a>		</div>

		<blockquote><p>
  Even if there were a way to find out, the answer you get would be instantly wrong anyway because the microsecond after you ask the question, somebody can open a new handle.</p>
<p>So what? Perhaps I want to see if I have a bug in my code &#8211; 100 refs might be a bit higher than I expect.</p>
<p>&gt; This suffers from the same problem yet again: The instant you get the answer (&quot;all clear&quot;), somebody can install a hook.</p>
<p>Suppose I were performing a scan for trojans. A keyboard hook for an unknown program would be a positive indicator.</p>
<p>&gt; You cannot reliably reason about the security of a system from within the system itself. It&#8217;s like trying to prove to yourself that you aren&#8217;t insane.</p>
<p>Seconding Steve: you can&#8217;t be certain, but you can get 90%. You can certainly catch some stuff.</p>
<p>&gt; From a UI standpoint, the desktop is the security boundary. Once you let somebody run on your desktop, you implicitly trust them. Because now they can send your program random messages, inject hooks, hack at your window handles, edit your menus, and generally party all over you.</p>
<p>Wouldn&#8217;t it be nice if we had a fine grained level of control over what a serice was allowed? Security is, after all, the number one priority at Microsoft.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-225843">
				<div id="div-comment-225843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-225843">
			November 15, 2004 at 8:54 am</a>		</div>

		<p>&quot;Perhaps I want to see if I have a bug in my code&quot; &#8211; There are things documented as &quot;for diagnostic purposes only&quot; but people use them in production code. &quot;Control_RunDLL&quot; for example. The return value of IUnknown::Release for another.</p>
<p>&quot;Suppose I were performing a scan for trojans&quot;.  Any decent trojan would have patched the system so that IsKeyboardHooked doesn&#8217;t count the trojan itself as a hook! All you get is a false sense of security.</p>
<p>&quot;You can&#8217;t be certain, but you can get 90%.&quot; And it&#8217;s the other 10% that kills you.</p>
<p>&quot;&#8230; what a sevice was allowed&quot;: Services cannot interact with the desktop by default; you have to select that option explicitly (SERVICE_INTERACTIVE_PROCESS). Unclear what fine-grained control gets you, since the service author would just turn it on anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-225863">
				<div id="div-comment-225863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-225863">
			November 15, 2004 at 9:07 am</a>		</div>

		<p>Ok, so how come there is an API to find out free disk space, since in the millisecond it is answered, another process could consume most of what is left?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-225873">
				<div id="div-comment-225873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Keith Moore [exmsft]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-225873">
			November 15, 2004 at 9:09 am</a>		</div>

		<p>Continuing this line of reasoning, I suggest MS remove the &quot;DIR&quot; command from cmd.exe. After all, just because a file exists at the time the command was executed does not mean it exists now&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-225893">
				<div id="div-comment-225893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-225893">
			November 15, 2004 at 9:27 am</a>		</div>

		<blockquote><p>
  You cannot reliably reason about the security of a system from within the system itself.</p>
<p>So what is the point in &quot;<a target="_new" href="http://www.microsoft.com/whdc/driver/kernel/64bitpatching.mspx&quot;" rel="nofollow"></a><a href="http://www.microsoft.com/whdc/driver/kernel/64bitpatching.mspx&#038;quot" rel="nofollow">http://www.microsoft.com/whdc/driver/kernel/64bitpatching.mspx&#038;quot</a>;  except for killing 3rd party tools?
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-225903">
				<div id="div-comment-225903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mpz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-225903">
			November 15, 2004 at 9:32 am</a>		</div>

		<p>The possibly already-obsolete information provided by the free disk space reporting function or the DIR command does not (usually) lead to unwarranted assumptions about system security. Unless you&#8217;re braindead.</p>
<p>Concentrate on what matters, people.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-225913">
				<div id="div-comment-225913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Owen Cunningham</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-225913">
			November 15, 2004 at 9:40 am</a>		</div>

		<p>Another one: I once asked MS Premier Support for a way to get the suspend count of a thread without actually having to call SuspendThread/ResumeThread (both of which return the thread&#8217;s NEW suspend count). They said &quot;oh it&#8217;s unreliable.&quot; I wrote a kernel-mode driver that can be queried via DeviceIoControl and indexes into position 429 of the ETHREAD block (which it locates using the undocumented NTOSKRNL export PsLookupThreadByThreadId). It has yet to behave unreliably (although I understand this is brittle if NTOSKRNL ever stops exporting PsLookupThreadByThreadId, or if MS ever moves the suspend count out of ETHREAD offset 429).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-225923">
				<div id="div-comment-225923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.valhallalegends.com/skywing' rel='external nofollow' class='url'>Skywing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-225923">
			November 15, 2004 at 9:51 am</a>		</div>

		<p>Yes, and what happens if somebody suspends or resumes the thread after you query the ETHREAD but before you return from the IOCTL IRP?  The suspend count you return is &quot;dead on arrival&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-225933">
				<div id="div-comment-225933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Harlow</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-225933">
			November 15, 2004 at 9:52 am</a>		</div>

		<p>Steve, if &quot;cogito ergo sum&quot; was correct then Descartes would have slain the entire Empiricism movement before it was even born.</p>
<p>&quot;Cogito&quot;, of course, assumes the existance of the thought and the thinker.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-225953">
				<div id="div-comment-225953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-225953">
			November 15, 2004 at 11:06 am</a>		</div>

		<p>Then I&#8217;m just glad that even though the answer will immediately be wrong MS still put some routines in to read the current time ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-225963">
				<div id="div-comment-225963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-225963">
			November 15, 2004 at 11:59 am</a>		</div>

		<blockquote><p>
  Any decent trojan would have patched the system so that IsKeyboardHooked doesn&#8217;t count the trojan itself as a hook! All you get is a false sense of security. </p>
<p>Apparently virus writers hew to a higher standard than commercial software. IsKeyboardHooked is something that should be patched, but you always want to check it anyway, just like you check that your PC is plugged in before calling tech support. </p>
<p>Did you really think I was going to write a security scanner and do nothing more than check for a declared keyboard hook?
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-225973">
				<div id="div-comment-225973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-225973">
			November 15, 2004 at 12:41 pm</a>		</div>

		<p>So far as I can tell the only people who want to look for hooks are people looking for spyware. What&#8217;s the point of adding a function whose goal is to help find spyware if it can be hacked by spyware anyway? It&#8217;d be effective for about two weeks before all the spyware authors issue upgrades that hack this new function. And then the tech press will write articles saying &quot;Microsoft spyware-detection functions easily circumvented. More proof that they&#8217;re a bunch of morons.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-225993">
				<div id="div-comment-225993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://perlmonks.org/?node=theorbtwo' rel='external nofollow' class='url'>James Mastros (theorbtwo)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-225993">
			November 15, 2004 at 1:08 pm</a>		</div>

		<p>Also, keyboard hooks are often present on things that are not worms, except perhaps by the widest possible defintion.  AIM, and similar programs, hook the keyboard in order to check if the keyboard is idle&#8230; and even if you could verify, beyond a shadow of a doubt, that you don&#8217;t have a keyboard hook in userspace, that doesn&#8217;t matter.  There could be one in kernelspace.  There could be one between the keyboard and the socket.  There could be a well-placed camera.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-226023">
				<div id="div-comment-226023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mikedimmick.blogspot.com' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226023">
			November 15, 2004 at 2:35 pm</a>		</div>

		<p>Another example is &#8216;how do I find out if I can write to a file?&#8217;. Don&#8217;t &#8216;find out&#8217;, just open the file with GENERIC_WRITE access. If you can write, the open will succeed. If you can&#8217;t, it won&#8217;t and you can check GetLastError() to find out why.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-226053">
				<div id="div-comment-226053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">adeht</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226053">
			November 15, 2004 at 3:44 pm</a>		</div>

		<p>Yet another example is using temporary files. You&#8217;re not supposed to just generate a filename then create it, because it might get created before you try. You&#8217;re supposed to do both as one operation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-226063">
				<div id="div-comment-226063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">adeht</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226063">
			November 15, 2004 at 3:46 pm</a>		</div>

		<p>(the operation should be performed by the OS, of course)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-226073">
				<div id="div-comment-226073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thomas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226073">
			November 15, 2004 at 4:23 pm</a>		</div>

		<blockquote><p>
  You cannot reliably reason about the security of a system from within the system itself. It&#8217;s like trying to prove to yourself that you aren&#8217;t insane. </p>
<p>If only our governments would understand this&#8230;</p>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-226093">
				<div id="div-comment-226093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226093">
			November 15, 2004 at 5:47 pm</a>		</div>

		<p>Reading the first 75% of the base note, I thought I was seeing Microsoft&#8217;s excuses for not letting programmers debug some characteristics of their programs.  Then the focus changed to security.  Well sure, answers to most of those questions would be useless from a security point of view, but answers that can help simplify a lot of debugging problems would still be highly useful.</p>
<p>Here&#8217;s another example:<br />
<br />&quot;What process has this folder locked?&quot;<br />
<br />&quot;We&#8217;re not going to tell you because in one more millisecond the process might unlock the folder, and/or other processes might lock it.&quot;<br />
<br />&quot;Well I sure do wish that in one more millisecond the process will unlock the folder.  I sure don&#8217;t plan to run any more processes that will lock the folder, and I&#8217;ve been trying for the last 3 weeks to delete the folder.  I already deleted all the files in it.&quot;<br />
<br />&quot;Well, we&#8217;re not going to tell you which process locked it, we&#8217;re only telling you it&#8217;s locked.&quot;<br />
<br />&quot;But in one more millisecond it might not be locked.&quot;<br />
<br />&quot;Oops right.  We&#8217;re only telling you it was locked at each of the 30 times you&#8217;ve tried deleting it during the past 3 weeks.&quot;</p>
<p>11/15/2004 2:35 PM Mike Dimmick</p>
<p>&gt; Another example is &#8216;how do I find out if I<br />
<br />&gt; can write to a file?&#8217;. Don&#8217;t &#8216;find out&#8217;,<br />
<br />&gt; just open the file with GENERIC_WRITE access.</p>
<p>Bad example.  Sometimes people look at the last-updated date of a file in order to guess whether they updated it recently.  Of course this information isn&#8217;t completely reliable, it only helps as a rough guess, just like in debugging.  Your example destroys information for no useful reason.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-226103">
				<div id="div-comment-226103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226103">
			November 15, 2004 at 5:58 pm</a>		</div>

		<p>For the locked file thing I think the real reason is that the filesystem doesn&#8217;t know either. All it sees is a nonzero lock count. (It&#8217;s like asking a COM object, &quot;Who still has a reference to this object?&quot; The COM object doesn&#8217;t know. All it knows is that its refcount is nonzero.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-225943">
				<div id="div-comment-225943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-225943">
			November 15, 2004 at 10:08 am</a>		</div>

		<p>I&#8217;ll always side with being able to answer the question even if it is unreliable because having *some* metric is better than having none at all. Just because crappy programmers ignore documentation and API writers can&#8217;t add concurrency to most functions doesn&#8217;t mean these sort of diagnostic functions shouldn&#8217;t be written.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-226113">
				<div id="div-comment-226113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://andyandy.sprayblogg.no' rel='external nofollow' class='url'>Andreas H&#228;ber</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226113">
			November 15, 2004 at 7:39 pm</a>		</div>

		<p>Cooney: You can control what a service (and everybody else on your system) can do in the Local Security Policy MMC.</p>
<p>But, be very careful since you can end up in a lot of stupid situations from changing variables there&#8230; The same disclaimer you read about changing registry variables applies here as well ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-226133">
				<div id="div-comment-226133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226133">
			November 15, 2004 at 9:20 pm</a>		</div>

		<p>Actually the filesystem has three counts (for share read, share write and share delete), but essentially that&#8217;s the case.</p>
<p>For locked ranges in the file, more information is tracked, but even that&#8217;s questionable.</p>
<p>Oh, and as for the file opening example, MS-Mail tried looking at the last-updated date to see if a file had changed.  And this failed miserably when you tried running MS-MAIL&#8217;s over the network, because the last-updated date is no longer as reliable as it is locally.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-226143">
				<div id="div-comment-226143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226143">
			November 15, 2004 at 9:26 pm</a>		</div>

		<p>There is a very useful app that finds out which programs have a lock on your files: <a target="_new" href="http://www.dr-hoiby.com/WhoLockMe/" rel="nofollow">http://www.dr-hoiby.com/WhoLockMe/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-226003">
				<div id="div-comment-226003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Weiss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226003">
			November 15, 2004 at 1:28 pm</a>		</div>

		<p>&gt; Even if there were a way to find out, the<br />
<br />&gt; answer you get would be instantly wrong<br />
<br />&gt; anyway because the microsecond after you ask &gt; the question, somebody can open a new handle.</p>
<p>OK! I&#8217;ll just add one to the count **just in case** this happened! ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-226153">
				<div id="div-comment-226153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/junfeng' rel='external nofollow' class='url'>Junfeng Zhang</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226153">
			November 16, 2004 at 12:37 am</a>		</div>

		<p>Classic example is psapi.dll. </p>
<p>Since psapi is reading other processes&#8217;s memory, it is almost certain that the data it returns are not reliable. But it is still an invaluable tool.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-226193">
				<div id="div-comment-226193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Factory</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226193">
			November 16, 2004 at 4:16 am</a>		</div>

		<p>&quot;Even if there were a way to find out, the answer you get would be instantly wrong anyway because the microsecond after you ask the question, somebody can open a new handle.&quot;</p>
<p>  Or in another words: &quot;Any publically attribute of a concurrent system is subject to change after one has read the status of that attribute, thus we will never tell anyone what the status is.&quot;</p>
<p>  Kinda reminds me of the 100% secure system which has no functionality. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-226223">
				<div id="div-comment-226223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.robertmoir.co.uk' rel='external nofollow' class='url'>Robert Moir</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226223">
			November 16, 2004 at 5:58 am</a>		</div>

		<p>&quot;Any publically attribute of a concurrent system is subject to change after one has read the status of that attribute, thus we will never tell anyone what the status is.&quot; </p>
<p>&#8211; Sounds silly that way until you realise that when Microsoft start supporting a way of returning these &#8216;secret&#8217; values, people will start criticising them and blaming everyone else but themselves when they write code that relies on that value being stable when it isn&#8217;t.</p>
<p>It doesn&#8217;t matter how good you are at picking a path through a minefield, you&#8217;ll still never be quite as safe as the person that avoids the minefield in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-226233">
				<div id="div-comment-226233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dotnet.org.za/ernst' rel='external nofollow' class='url'>Ernst Kuschke</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226233">
			November 16, 2004 at 6:30 am</a>		</div>

		<p>This is an example of &quot;Meaningless due to unavoidable race condition.&quot; </p>
<p>Sounds like Heisenberg had it nailed down pretty well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-226343">
				<div id="div-comment-226343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymous coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226343">
			November 16, 2004 at 8:30 am</a>		</div>

		<p>Why I love this blog:</p>
<p> &#8211; neitzche<br />
<br /> &#8211; descartes<br />
<br /> &#8211; g&#246;del<br />
<br /> &#8211; russel<br />
<br /> &#8211; whitehead<br />
<br /> &#8211; heisenberg</p>
<p>&#8230;all in a post about computer security.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-226733">
				<div id="div-comment-226733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226733">
			November 16, 2004 at 5:10 pm</a>		</div>

		<p>11/15/2004 9:20 PM Larry Osterman</p>
<p>&gt; Oh, and as for the file opening example,<br />
<br />&gt; MS-Mail tried looking at the last-updated<br />
<br />&gt; date to see if a file had changed. And this<br />
<br />&gt; failed miserably when you tried running<br />
<br />&gt; MS-MAIL&#8217;s over the network, because the<br />
<br />&gt; last-updated date is no longer as reliable<br />
<br />&gt; as it is locally.</p>
<p>Oh no, then I wrote a highly defective program earlier this year.  A customer specified that when they wrote files in a particular directory, my program was supposed to notice and act on them.  Each machine being watched had one directory being watched, and my program was on a separate machine.  One designated filename was kind of a controlling file, and other files were various data to be interpreted.  I used FindNextFileNotification and related tools.  When the controlling file appeared to have been updated, I read its contents and obeyed its orders in interpreting other files.  When the controlling file did not appear to have been updated, I ignored whatever other changes had occured so far in the directory, and waited for the next change notification.  If the last-updated date is unreliable, there is no hope for this application to work as designed.</p>
<p>How long has it been known that the information returned by GetFileAttributesEx for files over a LAN is unreliable?  Why doesn&#8217;t the MSDN page for GetFileAttributesEx say so?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-226753">
				<div id="div-comment-226753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226753">
			November 16, 2004 at 5:31 pm</a>		</div>

		<p>&quot;Why doesn&#8217;t the MSDN page for GetFileAttributesEx say so?&quot;</p>
<p>Because GetFileAttributesEx just reports what the filesystem gives it. If the filesystem redirector reports stale data, then you get stale data from GetFileAttributesEx.</p>
<p>The crumminess of the data is a property of the redirector, not of GetFileAttributesEx. GetFileAttributesEx is just the messenger.  Don&#8217;t blame the messenger.</p>
<p>(And of course you can&#8217;t expect the messenger to have a comprehensive list of all crummy redirector behaviors.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-226793">
				<div id="div-comment-226793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226793">
			November 16, 2004 at 9:37 pm</a>		</div>

		<p>11/16/2004 5:31 PM Raymond Chen</p>
<p>&gt; If the filesystem redirector reports stale<br />
<br />&gt; data, then you get stale data from<br />
<br />&gt; GetFileAttributesEx. </p>
<p>Are these redirectors on the server side or the client side?  Is there a list of known reliable and known unreliable and unknown filesystem redirectors, for example server side Windows 2000 being reliable, or client side Windows 98 being unreliable and client side Windows XP SP1a not being tested, or something along these lines?</p>
<p>Of course the net result for each configuration would be the weakest link in the chain (unless some kinds of interaction can yield even worse results).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-226813">
				<div id="div-comment-226813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Foolhardy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-226813">
			November 16, 2004 at 11:12 pm</a>		</div>

		<p>About shatter attacks and windows on the same desktop being able to send messages to each other: Job objects (lookup SetInformationJobObject) have a certain limit called JOB_OBJECT_UILIMIT_HANDLES. It prevents processes in the job from getting handles to windows owned by processes not in the job. If you can&#8217;t get a handle to the window, you can&#8217;t send messages to it. Put your untrusted processes on the interactive desktop in a new job with this limit, and shatter attacks from it are prevented.</p>
<p>It&#8217;s quite a nice solution: windows that need to can send messages to each other, but they can be sandboxed as needed. Unfortunately, Microsoft provides almost no tools for creating jobs. The only one I know of is in Datacenter Server, although the functionaility is a part of 2000 and later (workstation and server).</p>
<p>If anyone&#8217;s interested, I created a command-line program just for this purpose. It creates a new job (or re-opens a named job) with the limits you specify and adds the processes you list to the job. The source is included if you want compile it yourself or see how it works.<br />
<br /><a target="_new" href="ftp://68.62.27.206/pub/jobprccur.zip" rel="nofollow">ftp://68.62.27.206/pub/jobprccur.zip</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-227253">
				<div id="div-comment-227253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ed</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-227253">
			November 17, 2004 at 12:21 pm</a>		</div>

		<p>With regard to the first example (how many references to a shared memory object), then there is a case where the answer can be meaningful, assuming that the handles work the way I think they do.</p>
<p>If the answer is one, and you are the one holding the reference, and there&#8217;s no way for any other process to get a handle on the resource without your cooperation (e.g. by duping the handle or some similar mechanism), then you know that your process is the only one still holding a reference and proceed accordingly.</p>
<p>If the answer is greater than one, then it may drop to one a microsecond after you checked, but that doesn&#8217;t prevent the case above from being useful.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227263">
				<div id="div-comment-227263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-227263">
			November 17, 2004 at 12:26 pm</a>		</div>

		<p>The original question was in the context of a named shared memory object, in which case somebody could call OpenFileMapping and bump the refcount to 2.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-233213">
				<div id="div-comment-233213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom Canham</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041115-00/?p=37313#comment-233213">
			December 7, 2004 at 1:24 pm</a>		</div>

		<p>It seems like people can&#8217;t/don&#8217;t want to believe the old adage that the only 100% secure system is one that is disconnected from the network, with the power button in the &quot;off&quot; position.  Security is always a matter of degree, not absolutes.</p>
<p>Reliability/correctness is the same sort of situation; *no* application is 100% bug free.  &quot;Bug free&quot; is actually a meaningless term, since depending upon the domain of definitions for &quot;bug&quot; you use, you can *always* find some bugs in a program.</p>
<p>Matters of degree, levels of confidence.  I think we coders don&#8217;t like &quot;messy&quot; answers, but the fact is that life is messy.  Deal with it.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

