<html>
<head>
<title>Regular expressions and the dreaded *? operator</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Regular expressions and the dreaded *? operator</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 25, 2004 / year-entry #116</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040325-00/?p=40073</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The regular expression *? operator means "Match as few characters as necessary to make this pattern succeed." But look at what happens when you mix it up a bit: ".*?" This pattern matches a quoted string containing no embedded quotes. This works because the first quotation mark starts the string, the .*? gobbles up everything...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The regular expression *? operator means "Match as few characters  as necessary to make this pattern succeed."  But look at what  happens when you mix it up a bit:</p>
<p>  <code>".*?"</code>  </p>
<p>  This pattern matches a quoted string containing no embedded quotes.  This works because the first quotation mark starts the string,  the .*? gobbles up everything in between, and then the second   quotation mark eats the close-quote.  </p>
<p>  (Note how this differs from <code>".*"</code>, which uses a greedy  match.  This time, the .* operator is perfectly happy to gobble  up quotation marks, as long as it leaves one to match the second  quotation mark in the pattern.)  </p>
<p>  Okay, great, now let's make a small change to the above pattern:  </p>
<p>  <code>".*?"&gt;</code>  </p>
<p>  All I did was stick a &gt; at the end of the pattern.  This would  therefore match a quoted string (containing no quotation marks)  followed by a &gt; character, right?  </p>
<p>  Wrong.  </p>
<p>  There's nothing in .*? that says "no quotation marks allowed".  It just says "Don't match more than you need to."  But there are  strings where it needs to match a quotation mark.  Consider:  </p>
<table>
<col style="font-family: monospace; border: solid .5pt black" align="center">
<tr>
<td><code>"</code></td>
<td><code>hello"world</code></td>
<td><code>"</code></td>
<td><code>&gt;</code></td>
</tr>
<tr>
<td style="border: solid .5pt black" align="center"><code>"</code></td>
<td style="border: solid .5pt black" align="center"><code>.*?</code></td>
<td style="border: solid .5pt black" align="center"><code>"</code></td>
<td style="border: solid .5pt black" align="center"><code>&gt;</code></td>
</tr>
</table>
<p>  Notice that here, the .*? pattern matched the inner quotation mark  because that was the only way to make the pattern match successfully.  ("I wouldn't have done it, but you forced me!")  </p>
<p>  <a href="http://blogs.msdn.com/ericgu/archive/2004/02/26/80465.aspx">Even smart people  make this mistake</a>.  </p>
<p>  If you really don't want quotation marks to match the .*? then you  need to say so.  </p>
<p><code>"[^"]*"&gt;</code></p>
<p>  This means "Match a quotation mark, then zero or more characters that  aren't quotation marks, then another quotation mark, and then a greater-than."  </p>
<p>  [Raymond is currently on vacation; this message was pre-recorded.]  </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-157633">
				<div id="div-comment-157633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040325-00/?p=40073#comment-157633">
			March 25, 2004 at 8:53 pm</a>		</div>

		<p>That&#8217;s why I always use something like (?:&quot;.*?&quot;)&gt;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-157583">
				<div id="div-comment-157583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.regexadvice.com/dneimke/archive/2004/03/26/848.aspx' rel='external nofollow' class='url'>ShowUsYour</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040325-00/?p=40073#comment-157583">
			March 25, 2004 at 8:56 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-157643">
				<div id="div-comment-157643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040325-00/?p=40073#comment-157643">
			March 25, 2004 at 10:00 pm</a>		</div>

		<p>Which of course didn&#8217;t apply to the thing you were talking about.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-157673">
				<div id="div-comment-157673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040325-00/?p=40073#comment-157673">
			March 25, 2004 at 10:24 pm</a>		</div>

		<p>If *? really matched as few characters as necessary to make the pattern succeed, then the matched portion of<br />
<br />&quot;hello&quot;world&quot;&gt;<br />
<br />would be<br />
<br />&quot;world&quot;&gt;<br />
<br />for either pattern<br />
<br />&quot;.*?&quot;&gt;<br />
<br />or<br />
<br />&quot;[^&quot;]*&quot;&gt;</p>
<p>The inclusion of<br />
<br />&quot;hello<br />
<br />was due to left-handed greediness.</p>
<p>So ONLY smart people would be affected by this designer&#8217;s mistake.  Dumb people wouldn&#8217;t be affected because we&#8217;ve used things like &quot;[^&quot;]*&quot;&gt; all our lives (or at least since the time Bell Labs started playing with a Honeywell computer) and we never learned about *?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-157833">
				<div id="div-comment-157833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040325-00/?p=40073#comment-157833">
			March 26, 2004 at 7:59 am</a>		</div>

		<p>Matt: That&#8217;s what I was thinking, but everything after the &quot;&lt;/div&gt;&quot; has to match as well, so the &quot;(.*?)&quot; could capture characters beyond the first &quot;&lt;/div&gt;&quot;. Some regex systems allow you to &quot;commit&quot; and disallow backtracking after matching up to some point in the regex, which you would want to do after the &quot;&lt;/div&gt;&quot;. In general you don&#8217;t have this option.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-157853">
				<div id="div-comment-157853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt C. Wilson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040325-00/?p=40073#comment-157853">
			March 26, 2004 at 8:17 am</a>		</div>

		<p>True.  I guess I was thinking about just matching &lt;div&gt; contents tag by tag.  But a nested div would blow that up.  It would be really nice if there were some kind of recursive operation, that would allow you to say something like &quot;give me everything inside &lt;div&gt;&lt;/div&gt;, with up to 2 nested &lt;div&gt;&lt;/div&gt; sequences&quot;  Is there such a beast, of which I am again unaware?</p>
<p>Then of course you have to pray that the html source is well-formed :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-157913">
				<div id="div-comment-157913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040325-00/?p=40073#comment-157913">
			March 26, 2004 at 10:23 am</a>		</div>

		<p>That sounds like a job for a relaxed HTML parser (such as IE and Moz use when they don&#8217;t see a DTD) and DOM. I don&#8217;t know that it&#8217;s possible to use just the parser and DOM from these without showing a page though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-157763">
				<div id="div-comment-157763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040325-00/?p=40073#comment-157763">
			March 26, 2004 at 5:19 am</a>		</div>

		<p>I use things like &quot;[^&quot;]*&quot;&gt; all the time. I know about *?, but never found it useful. IIRC, it&#8217;s called &quot;lazy quantifier&quot; in the Perl world.</p>
<p>Can somebody provide an interesting example when you would want to use *?, maybe because an equivalent regex with greedy quantifiers is more complex?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-157783">
				<div id="div-comment-157783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt C. Wilson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040325-00/?p=40073#comment-157783">
			March 26, 2004 at 7:02 am</a>		</div>

		<p>Count me in the ranks of the dumb then.  I never knew *? existed.  I always use [^&quot;]* syntax.</p>
<p>I can see this being really helpful parsing html, as in</p>
<p>&lt;div&gt;(*?)&lt;/div&gt; as a search target.  </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-157823">
				<div id="div-comment-157823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040325-00/?p=40073#comment-157823">
			March 26, 2004 at 7:55 am</a>		</div>

		<p>I&#8217;ve been scraping data off web pages and using &quot;.*?&quot; to skip over uninteresting bits that may contain many tags. I&#8217;ve since stopped doing that and changed the regexes as I get around to it, because it&#8217;s quite dangerous.</p>
<p>First, if you&#8217;re doing a global search to find multiple matches in a page, and the regex isn&#8217;t quite right, then &quot;A.*?B&quot; (where A and B are themselves regexes) can match the A part of one instance, fail to match the B part of that instance and so end up matching the B part of the next instance, so it captures a mixture of two records! (This is just a worse version of what Raymond pointed out.)</p>
<p>Second, a search using a regex with multiple lazy parts can take a very long time to fail, at least in Python, due to backtracking. (This can happen with multiple greedy parts but seems not to do so in general; I don&#8217;t understand the theory well enough to see why this might be.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

