<html>
<head>
<title>Why is breadth-first searching better for file system tree walking?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why is breadth-first searching better for file system tree walking?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 3, 2005 / year-entry #30</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>17</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Earlier, Eric Lippert discussed one scenario where breadth-first searching is better than depth-first searching. Today, I'll tell you about another. If you go back to the old MS-DOS file enumeration functions, you'll find that there is a "Find first file" function and a "Find next file" function, but no "Find close" function. That's because the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Earlier, <a href="http://blogs.msdn.com/EricLippert/">Eric Lippert</a> discussed <a href="http://blogs.msdn.com/EricLippert/archive/2004/09/27/234826.aspx"> one scenario where breadth-first searching is better than depth-first searching</a>.  Today, I'll tell you about another.</p>
<p> If you go back to the old MS-DOS file enumeration functions, you'll find that there is a "Find first file" function and a "Find next file" function, but no "Find close" function. That's because the MS-DOS file enumeration functions maintained all their state in the find structure.  The FAT file system was simple enough that the necessary search state fit in the reserved bytes and no external locking was necessary to accomplish the enumeration. (If you did something strange like delete a directory while there was an active enumeration on it, then the enumeration would start returning garbage.  It was considered the program's responsibility not to do that. Life is a lot easier when you are a single-tasking system.) </p>
<p> However, moving these functions to a network protocol or a non-FAT file system created problems. When enumerating files over a network, the server needs to allocate additional memory to track the enumeration, memory which it needs to free when the enumeration is complete. Similarly, non-FAT file systems may have additional state to track that (1)&nbsp;doesn't fit in the reserved space in the find structure, (2)&nbsp;<strong>shouldn't</strong> be stored in the reserved space (because it would compromise security), or (3)&nbsp;<strong>can't</strong> be stored in the reserved space (because the kernel needs to update it asynchronously when the state of the directory changes). </p>
<p> Since MS-DOS has no "Find close" function, how do these alternate file systems know when it is safe to free the memory associated with the file search? [Context clarified - 10am] Clairevoyance is not yet a viable option, so the file system is forced to guess. </p>
<p> Typically, a file enumeration is considered "abandoned" if it is not used for "a long time" or if too many pending file enumerations are in progress. </p>
<p> Let's see how depth-first search compares to breadth-first search on these points. </p>
<p> In a typical depth-first search, you recurse into a subdirectory as soon as you see it. Thus, if you are, say, six levels deep in recursion, you will have six active enumerations, one for each level. The most recent one is most active, and the one at the root is least active. This means that the enumeration at the root is likely to be considered "abandoned" by the server because it hasn't been used for the longest time, and because there is a lot of other enumeration activity going on in the meantime. </p>
<p> On the other hand, with a breadth-first search, when a directory is found, it is not processed immediately but is rather put on a list for later consideration. Consequently, there is only one active enumeration, and it runs to completion before the next enumeration begins. This means that the enumeration is unlikely to be considered "abandoned" by the server. </p>
<p> This problem is not purely theoretical. If you performed a depth-first search on a large directory tree on a network server from a MS-DOS program, you often found that the enumeration ended prematurely because the older enumerations became abandoned by the server. You also saw this from a Win32 program if you were enumerating against an older network server that was designed for MS-DOS clients (and which therefore doesn't implement FindClose). </p>
<p> You can still use depth-first enumeration while avoiding the abandonment problem.  Instead of recursing into a directory immediately after enumerating it, save it on a list.  When you are finished enumerating the files in a directory, go back and process the list.  You're still enumerating depth-first, but you are delaying the recursive call until after the directory enumeration has completed. </p>
<p> Explorer uses this "delayed recursion" trick to avoid the problem of prematurely-terminated enumerations when walking through directories on these old servers. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-252663">
				<div id="div-comment-252663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/base/findclose.asp?frame=true' rel='external nofollow' class='url'>DrPizza</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533#comment-252663">
			February 3, 2005 at 7:42 am</a>		</div>

		<p>&quot;Since there is no &quot;Find close&quot; function&quot;</p>
<p>Huh?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-252683">
				<div id="div-comment-252683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533#comment-252683">
			February 3, 2005 at 8:06 am</a>		</div>

		<p>That was in the context of MS-DOS. There is no &quot;Find close&quot; function in MS-DOS.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-252693">
				<div id="div-comment-252693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533#comment-252693">
			February 3, 2005 at 8:07 am</a>		</div>

		<p>DrPizza: <a target="_new" href="http://msdn.microsoft.com/library/en-us/fileio/base/findclose.asp" rel="nofollow">http://msdn.microsoft.com/library/en-us/fileio/base/findclose.asp</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-252703">
				<div id="div-comment-252703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizza</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533#comment-252703">
			February 3, 2005 at 8:12 am</a>		</div>

		<p>Ben: check out the URL I used for my comment.</p>
<p>Raymond: Oh, I see.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-252713">
				<div id="div-comment-252713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">fragmentation</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533#comment-252713">
			February 3, 2005 at 8:19 am</a>		</div>

		<p>Another reason to enumerate all entries in a directory before recurse into subdirectories was perfomance. If you didn&#8217;t load smartdrv in DOS, the difference was very noticeable because directory entries is usually located near each other (same cluster usually) but far from subdir entries.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-252773">
				<div id="div-comment-252773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533#comment-252773">
			February 3, 2005 at 9:52 am</a>		</div>

		<blockquote><p>
  You also saw this from a Win32 program if you were enumerating against an older network server that was designed for MS-DOS clients (and which therefore doesn&#8217;t implement FindClose). </p>
<p>Do Windows 95 and NT 4.0 count as &quot;older network servers&quot;, or is it safe to assume that all 32-bit versions of Windows handle FindClose correctly over a network?
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-252783">
				<div id="div-comment-252783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533#comment-252783">
			February 3, 2005 at 9:56 am</a>		</div>

		<p>You are in better shape if both the server and client are running 32-bit operating systems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-252813">
				<div id="div-comment-252813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533#comment-252813">
			February 3, 2005 at 10:51 am</a>		</div>

		<blockquote><p>
  You can still use depth-first enumeration while avoiding the abandonment problem. Instead of recursing into a directory immediately after enumerating it, save it on a list. When you are finished enumerating the files in a directory, go back and process the list.</p>
<p>Um, isn&#8217;t that breadth-first enumeration, then?
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-252823">
				<div id="div-comment-252823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533#comment-252823">
			February 3, 2005 at 11:00 am</a>		</div>

		<p>No. You still recurse on all children before returning.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-252863">
				<div id="div-comment-252863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon Potter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533#comment-252863">
			February 3, 2005 at 2:58 pm</a>		</div>

		<p>So you are just changing the order the children are recursed on (as if the subfolders all appeared at the end of the list instead of interspersed with files).</p>
<p></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-252883">
				<div id="div-comment-252883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.livejournal.com/~deadracoon' rel='external nofollow' class='url'>Ivan Rouzanov</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533#comment-252883">
			February 3, 2005 at 3:21 pm</a>		</div>

		<p>Yet another reason for DOS programs to do depth-first search was memory considerations. We did not have a lot of memory back than so it was cool to not maintain any &quot;state&quot; or list and just do all the work in one scan processing just one file name at a time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-252873">
				<div id="div-comment-252873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533#comment-252873">
			February 3, 2005 at 3:01 pm</a>		</div>

		<p>Yup. And if your per-file action is slow, you may want to throw *everything* onto the list, close the find handle, then go back and process the list. In that case, you process the list in exactly the same order they came out of the enumerator originally &#8211; no change in order.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-253063">
				<div id="div-comment-253063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://bogol.blogspot.com' rel='external nofollow' class='url'>HA HA HA</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533#comment-253063">
			February 4, 2005 at 10:39 am</a>		</div>

		<p>&#8216;clairEvoyance&#8217;? jeez chen ur letin me dwon here!</p>
<p><a target="_new" href="http://onelook.com/?w=clairevoyance&amp;ls=a" rel="nofollow">http://onelook.com/?w=clairevoyance&#038;ls=a</a></p>
<p>id aslo liek to sugest in the secand-to-last paragraph chagning &#8216;abandonment problem&#8217; to &#8216;abandonment issues&#8217;. but i gues tahts a lower proirity.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-253073">
				<div id="div-comment-253073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman/archive/2005/02/04/367259.aspx' rel='external nofollow' class='url'>Larry Osterman's WebLog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533#comment-253073">
			February 4, 2005 at 2:07 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-254083">
				<div id="div-comment-254083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.neocranium.com/jasonw' rel='external nofollow' class='url'>Jason Whittington</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533#comment-254083">
			February 9, 2005 at 8:42 am</a>		</div>

		<p>So given that we all agree that breadth-first is better, why do so many programs like findstr /s or dir /s do depth-first? Seems like any time I use dir /s to find a file it gets mired down in Temporary Internet Files or some similar dumb deep directory.  I find myself cursing at it wishing it was going breadth-first instead of depth-first.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-254103">
				<div id="div-comment-254103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533#comment-254103">
			February 9, 2005 at 9:32 am</a>		</div>

		<p>Because human beings prefer seeing things depth-first.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-254273">
				<div id="div-comment-254273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533#comment-254273">
			February 9, 2005 at 8:01 pm</a>		</div>

		<p>I think someone might have missed this lesson when writing the &quot;Find Files&quot; feature for Windows XP. Obviously I&#8217;m trolling, but frankly it worked much better 10 years ago in terms of both speed and accuracy. I&#8217;d love an explanation.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

