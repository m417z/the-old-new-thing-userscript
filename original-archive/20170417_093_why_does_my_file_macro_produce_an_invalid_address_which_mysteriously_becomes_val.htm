<html>
<head>
<title>Why does my __FILE__ macro produce an invalid address, which mysteriously becomes valid a few moments later?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does my __FILE__ macro produce an invalid address, which mysteriously becomes valid a few moments later?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 17, 2017 / year-entry #94</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170417-00/?p=95975</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It's not there until somebody demands it.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer couldn't understand what the debugger
was showing them.
They had a function that used the
<code>__FILE__</code> macro,
but the address of the resulting string was
reported by the debugger as invalid:
</p>
<pre>
// source code:
char *fileName = __FILE__;

// In the debugger
0: kd&gt; ?? fileName
char * 0x00796d60
 "--- memory read error at address 0x00796d60 ---"
0: kd&gt; db 0x00796d60
00796d60  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
00796d70  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
00796d80  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
00796d90  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
00796da0  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
00796db0  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
00796dc0  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
00796dd0  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
</pre>
<p>
The <code>__FILE__</code> macro expanded to an
invalid address.
How can this be?
</p>
<p>
But wait, it gets even stranger:
After executing a few lines of code,
the pointer suddenly becomes good!
</p>
<pre>
0: kd&gt; ?? fileName
char * 0x00796d60
"C:\contoso\file.cpp"
</pre>
<p>
What's going on here?
</p>
<p>
The thing to note is the prompt.
The customer is using kd, the kernel debugger,
rather than a user-mode debugger.&sup1;
The kernel debugger shows what is in memory
right now.
If something is paged out, the kernel debugger
won't try to page it in,
because that would require the kernel to run,
and that would kind of interfere with kernel debugging.
(Besides, the kernel debugger doesn't know whether
it's safe to page in memory right now.
The current IRQL may be one that disallows page faults.)
</p>
<p>
Executing a few lines of code did something that
caused the memory be paged in.
The most likely thing that happened is that the
file name was printed to a log file,
and that means reading the file name,
which means paging it in.
</p>
<p>
But that's not the only thing that could've caused
the memory to be paged in.
Another possibility is that the program accessed
a variable that happens to reside on the same
page.
The unit of paging is the (um) page,
so any variables that share the same page will
be paged in and out together.
</p>
<p>
But the root cause for the confusion is that the
customer is using the kernel debugger to debug
user-mode code.
It is possible to debug user mode with the kernel debugger,
but it's quite cumbersome
because you are debugging at a very, very low level,
and lots of things you take for granted are no longer
available.
If you're going to be debugging user-mode code,
you probably want to use a user-mode debugger.
</p>
<p>
&sup1;
The customer disputed this assertion that they
were using the kernel debugger.
"We are using WinDbg, not kd."
Explain.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-archangelpip even thread-even depth-1" id="comment-1292745">
				<div id="div-comment-1292745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170417-00/?p=95975#comment-1292745">
			April 17, 2017 at 7:12 am</a>		</div>

		<p>I would imagine that the customer could have gotten confused, kd.exe is installed as part of Debugging Tools for Windows in the Windows SDK.<br />
Windbg.exe also supports the -k and -kl options, so that could have an effect on windbg, although to be honest I have never really needed to use the kernel debugger.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mzzt odd alt thread-odd thread-alt depth-1" id="comment-1292755">
				<div id="div-comment-1292755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/The+MAZZTer' rel='external nofollow' class='url'>The MAZZTer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170417-00/?p=95975#comment-1292755">
			April 17, 2017 at 7:19 am</a>		</div>

		<p>A quick Google reveals WinDbg can, in fact, do kernel debugging.</p>
<p>it&#8217;s like saying you proudly don&#8217;t own a gasoline car, and thus, don&#8217;t pollute the atmosphere. But you drive a gas motorcycle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1292785">
				<div id="div-comment-1292785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Haim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170417-00/?p=95975#comment-1292785">
			April 17, 2017 at 10:34 am</a>		</div>

		<p>the title is a bit clickbaitish, it doesn&#8217;t relates to __FILE__ macro directly and it but to any string literal viewed under kernel debugger.</p>
<p>non the less, it provides useful anecdote for kernel mode debugging.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-2" id="comment-1292806">
				<div id="div-comment-1292806" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170417-00/?p=95975#comment-1292806">
			April 17, 2017 at 7:34 pm</a>		</div>

		<p>First of all, click bait implies that you would be more tempted to click it due to this title . But since __FILE__ macro implies C style string literals, I don&#8217;t see why it would be any more tempting. In fact, if you weren&#8217;t well versed with the pre-processor, then the title would be more confusing.<br />
Secondly, since the pre-processor replaces __FILE__ with a C style string literal then it is directly related. In fact the customer really noticed this because they were looking at code which took the string literal that came from the __FILE__ macro as a parameter. So either way, it is still directly related.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1292805">
				<div id="div-comment-1292805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Piotr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170417-00/?p=95975#comment-1292805">
			April 17, 2017 at 2:50 pm</a>		</div>

		<p>yeah, explain :)<br />
I didn&#8217;t know you can unknowingly run LIVE KERNEL DEBUGGING. Opening up a dump file is one thing, but live kernel debugging? Wouldn&#8217;t that interfere with more than just your application? And how do you even run that undistinguishably from user mode debugging? You don&#8217;t choose a process to debug in kernel mode, right? You debug &#8220;the computer&#8221;.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1292835">
				<div id="div-comment-1292835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tilmann Krueger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170417-00/?p=95975#comment-1292835">
			April 17, 2017 at 11:48 pm</a>		</div>

		<p>Yeah, that puzzles me, too! And when you debug a NT installation, don&#8217;t you have to boot with a special flag? And connect another Machine via USB or something? And connect the debugger on that second machine to the debug target, (because it will wait for the debugger to connect)?</p>
<p>How can one do all these things and not be aware of them?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1292845">
				<div id="div-comment-1292845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170417-00/?p=95975#comment-1292845">
			April 18, 2017 at 6:58 am</a>		</div>

		<p>If you run a program without knowing what it does, or run a program with command line options without knowing what those options do, or run a program that runs another program in a way you weren&#8217;t expecting, you can unknowingly do&#8230; anything the computer lets you do. Including call the kernel debugging APIs.</p>
<p>Yes, running a kernel debugger will interfere with more than just your application. That&#8217;s kind of an inevitable consequence of the fact that it&#8217;s a kernel debugger.</p>
<p>If you&#8217;re not debugging a &#8220;process&#8221; (or &#8220;task&#8221; or &#8220;thread&#8221;) in kernel-mode debugging, what are you debugging? The kernel may not have a PID (or it may?), but it has a thread (or threads) of execution, each with a stack, a stack pointer, an open file table, a set of memory mapped pages (with TLB entries), a set of synchronisation objects, and pretty much everything else a user-mode process has. If you want to step through &#8220;the computer&#8221;, you&#8217;re stepping through something that looks exactly like a process. And, as you would want to switch between threads in a user-mode debugger, you&#8217;ll want to switch between user-mode and kernel-mode &#8220;processes&#8221; in a kernel-mode debugger. (With others paused, and maybe others running in the background on other CPUs?)</p>
<p>If you didn&#8217;t want that, you shouldn&#8217;t have run a kernel-mode debugger. On the other hand, if you don&#8217;t really know what programs you&#8217;re running, you probably shouldn&#8217;t be running them as Admin, or as any other user with kernel-debugging privileges.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

