<html>
<head>
<title>Wait, you never said that I had to initialize the object before I used it!</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Wait, you never said that I had to initialize the object before I used it!</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 23, 2012 / year-entry #197</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>29</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer reported that they were having trouble creating slim reader/writer locks at runtime. They simplified the issue to a short program: #include <windows.h> #include <iostream> using namespace std; // this is just a quick test app int a = 10; // This version works int working_version() { SRWLOCK lock; AcquireSRWLockExclusive(&lock); cout<<"Acquired exclusively"<<endl; a++; ReleaseSRWLockExclusive(&lock);...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer reported that they were having trouble creating
<a HREF="http://msdn.microsoft.com/en-us/library/windows/desktop/aa904937(v=vs.85).aspx">
slim reader/writer locks</a>
at runtime.
They simplified the issue to a short program:
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;iostream&gt;

using namespace std; // this is just a quick test app

int a = 10;

// This version works
int working_version()
{
 SRWLOCK lock;
 AcquireSRWLockExclusive(&amp;lock);
 cout&lt;&lt;"Acquired exclusively"&lt;&lt;endl;
 a++;
 ReleaseSRWLockExclusive(&amp;lock);
}

// This one doesn't
int broken_version_1()
{
 SRWLOCK *lock = new SRWLOCK;
 AcquireSRWLockExclusive(lock);
 cout&lt;&lt;"Acquired exclusively"&lt;&lt;endl;
 a++;
 ReleaseSRWLockExclusive(lock);
 // ignore the memory leak - this is just a quick test app
}

// This one doesn't either
int broken_version_2()
{
 SRWLOCK *lock = new SRWLOCK[2];
 AcquireSRWLockExclusive(&amp;lock[0]);
 cout&lt;&lt;"Acquired exclusively"&lt;&lt;endl;
 a++;
 ReleaseSRWLockExclusive(&amp;lock[0]);
 // ignore the memory leak - this is just a quick test app
}

int main(int argc, char **argv)
{
 switch (argv[1][0]) {
 case '0': working_version(); break;
 case '1': broken_version_1(); break;
 case '2': broken_version_2(); break;
 }

 cout&lt;&lt;"a="&lt;&lt;a&lt;&lt;endl;

 return 0;
}
</pre>
<p>
"What is the correct way of creating an <code>SRWLOCK</code>
via the <code>new</code> operator?"
</p>
<p>
It wasn't long before somebody noted that nowhere in the code
is the function
<code>Initialize&shy;SRW&shy;Lock</code> called.
</p>
<p>
"Oh, yeah, thanks for catching that.
It looks like one needs to initialize SRW locks which are
created via the <code>new</code> operator.
Otherwise it's not required."
</p>
<p>
No, the function is <i>always</i> required.
It's just that you got lucky in the local variable case
and the initial stack garbage looks enough like an initialized SRW lock
that you don't notice the problem.
</p>
<p>
MSDN doesn't say
"You must initialize an SRW lock before using it"
because the statement was believed to be so obvious
that it never occurred to anybody that somebody would
think the opposite was true.
I mean, what's the point of having an
<code>Initialize&shy;SRW&shy;Lock</code> function if initialization
is not required?
Think of it as one of the
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2006/03/20/555511.aspx">
ground rules for programming</a>:
If an object has an initialization method,
you must initialize the object before using it.
</p>
<p>
But just to be sure, I've submitted a documentation change request
to add the requirement.
</p>
<p>
<b>Bonus chatter</b>:
A common coding pattern is to wrap the low-level C-style object
inside a C++style RAII-style object.
</p>
<p>
<b>Bonus chatter 2</b>:
If you're creating a highly-concurrent system, then you should
probably put each lock on its own cache line.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1006803">
				<div id="div-comment-1006803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1006803">
			August 23, 2012 at 7:14 am</a>		</div>

		<p>if(!lucky)</p>
<p>{</p>
<p>AcquireSRWLockExclusive(&#8230;);</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1006813">
				<div id="div-comment-1006813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RP</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1006813">
			August 23, 2012 at 7:15 am</a>		</div>

		<p>&#39;If an object has an initialization method, you must initialize the object before using it.&#39;</p>
<p>can be generalised to</p>
<p>&#39;If you want to use something, you must initialize it first.&#39;</p>
<p>That way, you cover not just objects but all types.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1006823">
				<div id="div-comment-1006823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1006823">
			August 23, 2012 at 7:19 am</a>		</div>

		<p>It would have taken less code to properly free the memory than the comment about omitting that.</p>
<div class="post">[<i>Good job, <a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/08/15/10339660.aspx#10340846" rel="nofollow">you found it</a>. (Less code but more typing.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1006833">
				<div id="div-comment-1006833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Masklinn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1006833">
			August 23, 2012 at 7:46 am</a>		</div>

		<p>&gt; If you want to use something, you must initialize it first.</p>
<p>On the other hand, this is C++ code and the `new`-ed the type to instantiate it, so it was not entirely abnormal to expect the object to be initialized at the end of the constructor: that&#39;s the normal behavior of C++ object (and Microsoft::WRL::Wrapper::SRWLock provides exactly that).</p>
<p>On the other hand, the usage of C-style functions to acquire and release the lock (rather than method) hinted at SRWLOCK not being a C++ class.</p>
<div class="post">[<i>(1) Constructors are run both for newed variables and local variables, so that doesn&#39;t explain the author&#39;s confusion. (2) If newed variables didn&#39;t need to be initialized, and local variables didn&#39;t need to be initialized, then what&#39;s the point of InitializeSRWLock? In the author&#39;s mental model, you would never need to call it! -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1006843">
				<div id="div-comment-1006843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1006843">
			August 23, 2012 at 7:53 am</a>		</div>

		<p>The real issue here is having to call initializers at all. We should invent a language where things are, say, &#39;constructed&#39; for you when you new them up&#8230;</p>
<p>Bonus Chatter: I know I&#39;m just being silly and slightly tongue in cheek and understand why C APIs are (sometimes!) necessary. I all seriousness tho, he may&#39;ve come from a background of one of those languages and not even considered it, especially new programmers who learn Java and C# as their first main stream language unlike us old fogeys. So in this case docs explicitely saying this are no bad thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1006853">
				<div id="div-comment-1006853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/markcjordan_4000_gmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>markcjordan@gmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1006853">
			August 23, 2012 at 8:39 am</a>		</div>

		<blockquote><p>
  I all seriousness tho, he may&#39;ve come from a background of one of those languages and not even considered it, especially new programmers who learn Java and C# as their first main stream language unlike us old fogeys.
</p></blockquote>
<p>Agreed. I actually ran into exactly this problem for exactly this reason once :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-john-ludlow even thread-even depth-1" id="comment-1006873">
				<div id="div-comment-1006873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/John+Ludlow' rel='external nofollow' class='url'>John Ludlow</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1006873">
			August 23, 2012 at 8:48 am</a>		</div>

		<p>Pit of success, anyone?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1006883">
				<div id="div-comment-1006883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1006883">
			August 23, 2012 at 9:28 am</a>		</div>

		<p>How do I &quot;put each lock on its own cache line&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1006913">
				<div id="div-comment-1006913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1006913">
			August 23, 2012 at 10:38 am</a>		</div>

		<p>&quot;If you&#39;re creating a highly-concurrent system, then you should probably put each lock on its own cache line.&quot;</p>
<p>If you&#39;re creating concurrency primitives for people to use in highly-concurrent systems, you should pad the object with enough filler bytes that it&#39;s large enough that each lock will necessarily end up on its own cache line. :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1006923">
				<div id="div-comment-1006923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">No</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1006923">
			August 23, 2012 at 10:51 am</a>		</div>

		<p>SRWLOCK_INIT is defined as zero, and SRWLOCK_INIT is part of the eternally-supported Windows ABI. You don&#39;t have to call Initialize­SRW­Lock &#8212; you can just zero-initialize your SRWLOCK instead. Globals and statics are automatically zero-initialized, so you only really have to worry about initializing SRWLOCKs in dynamic storage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1006933">
				<div id="div-comment-1006933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1006933">
			August 23, 2012 at 11:17 am</a>		</div>

		<p>&quot;I tested the code without initialization and it worked. Why the documentation doesn&#39;t say that initialization is not required?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1006943">
				<div id="div-comment-1006943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1006943">
			August 23, 2012 at 11:35 am</a>		</div>

		<p>Mason Wheeler: Cache line sizes aren&#39;t known until run time, but padding is specified at compile time. The only way to make sure there&#39;s no false sharing is to use the largest possible padding. Why should a 4-byte field take 64 bytes? And then what happens when a CPU comes out with 128-byte cache lines?</p>
<p>What if you have millions of objects that each need their own RW lock? Instead of a 4-byte field that might fit in with other padding (thus taking up 0 additional bytes), you have over 64MB of additional memory use with 60MB of it wasted! A little bit of cache line reloading will be orders of magnitude faster than the extra page faults incurred by all that padding.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1006953">
				<div id="div-comment-1006953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1006953">
			August 23, 2012 at 11:56 am</a>		</div>

		<p>@Gabe: If you have millions of objects (or even hundreds, IMO) that each need their own RW lock, all instantiated at the same time, you&#39;ve got bigger problems to worry about! :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1006963">
				<div id="div-comment-1006963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1006963">
			August 23, 2012 at 12:03 pm</a>		</div>

		<p>&lt;smug&gt;</p>
<p>If you don&#39;t know how to go about putting each lock in its own cache line, you shouldn&#39;t be doing designs that depend on putting each lock in its own cache line.</p>
<p>&lt;/smug&gt;</p>
<p>Really: solutions need to be understood before being used.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1006973">
				<div id="div-comment-1006973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eugene</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1006973">
			August 23, 2012 at 12:17 pm</a>		</div>

		<p>On the subject of documentation. The documentation for SetCurrentProcessExplicitAppUserModelID function that you mentioned recently neglects to say that it uses stdcall calling convention. Strictly speaking it gives an invalid prototype for the function. I know it&#39;s not hard to guess, but it cost me some time yesterday.</p>
<div class="post">[<i>If you look at other functions, you&#39;ll see that MSDN has a general policy of suppressing the calling convention details to remove clutter. Just include the proper header file and the header file will declare the calling convention. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1006993">
				<div id="div-comment-1006993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1006993">
			August 23, 2012 at 1:49 pm</a>		</div>

		<p>@Gabe:</p>
<p>Cache line size for x86 and x64 is fixed at max 64 bytes, and the OSes have that assumption hardcoded. It&#39;s not likely to change ever for IA processors.</p>
<p>@Eugene:</p>
<p>Are you writing in ASM?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1007003">
				<div id="div-comment-1007003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Douglas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1007003">
			August 23, 2012 at 2:26 pm</a>		</div>

		<p>@Raymond</p>
<p>Header files don&#39;t work when you&#39;re p/Invoking =)</p>
<div class="post">[<i>If you want to write a p/invoke you need to study the header file since that&#39;s what actually happens. The MSDN prototype doesn&#39;t include A/W redirection either. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1007023">
				<div id="div-comment-1007023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1007023">
			August 23, 2012 at 2:50 pm</a>		</div>

		<p>Mason Wheeler: What problems do I have to worry about in a system with large numbers of objects with locks? Indeed, one would presume that MS wouldn&#39;t have bothered to come up with such a &quot;slim&quot; RW lock if systems with hundreds of them (let alone millions) had such problems.</p>
<p>Have you ever used the JVM or CLR (.Net runtime)? Each object in those systems has a lock, and you can have systems with billions of objects if you have enough RAM. Of course having a lock per object may be a questionable design decision, but it isn&#39;t a critical weakness. The locks in question are actually monitors rather than RW locks, but I think the point stands.</p>
<p>If you would like an example with RW locks, how about an in-memory database? Each row could have its own RW lock and you would certainly expect there to be millions or billions of rows. Even if you had only one lock per table, with typical databases having hundreds of tables you would still have hundreds of locks!</p>
<div class="post">[<i>If you have millions of locks, then you are also unlikely to have high contention, so false sharing isn&#39;t that big a deal. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-andycadley2 even thread-even depth-1" id="comment-1007033">
				<div id="div-comment-1007033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1007033">
			August 23, 2012 at 3:35 pm</a>		</div>

		<p>@No: You&#39;re kinda assuming Initialize­SRW­Lock doesn&#39;t do anything else, either now or in some hypothetical future version of Windows.</p>
<p>@alegr: And if your app ends up still running on some future version of Windows on some future x86 variant where that assumption no longer applies?</p>
<p>Honestly, you&#39;d think after reading this blog for any length of time the practice of blindly assuming that what is true today will remain so forevermore would&#39;ve been thoroughly stomped out. 640K really isn&#39;t enough for everyone!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1007043">
				<div id="div-comment-1007043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eugene</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1007043">
			August 23, 2012 at 3:38 pm</a>		</div>

		<p>@Raymond</p>
<p>I need my application to work on WinXP, so I cannot link directly to Win7-only functions. I have to GetProcAddress it, so prototype doesn&#39;t help much.</p>
<p>And MSDN used to include calling convention in prototypes. Take any old function: LoadLibrary, CreateFile, EnterCriticalSection etc. Or SRW functions mentioned in this post &#8212; all have WINAPI, which is a calling convention macro. In fact, the only functions without calling convention that I can find in a couple of minutes are from Shell32.dll. So this looks more like Shell Team policy rather than general MSDN policy.</p>
<div class="post">[<i>if you&#39;re going to re-prototype a function, get it from the header file. That&#39;s where the compiler gets it. (Or use <code>decltype</code>.) The MSDN documentation is presented for exposition, not for handing directly to a compiler. (SAL annotations are often stripped down or removed entirely, and separate prototypes are not given for A/W variants.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1007053">
				<div id="div-comment-1007053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carl D</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1007053">
			August 23, 2012 at 3:50 pm</a>		</div>

		<p>@Gabe</p>
<p>While the CLR and JVM logically have a lock per object, neither of them is actually implemented that way. &nbsp;Both use a pool of locks that are associated with objects on an as-needed basis. &nbsp;Since the vast majority of objects are never waited on, this saves resources on an enormous scale.</p>
<p>A quality design for an in-memory database would likely involve a similar level of indirection and not actually allocate a lock per row.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1007093">
				<div id="div-comment-1007093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1007093">
			August 23, 2012 at 7:29 pm</a>		</div>

		<p>@Eugene</p>
<p>Even still, it is well known that the MSDN is for documenting, and if you have found some functions that do it then it is best not to assume that everyone will put in the calling convention. Oh, and it isn&#39;t related to the shell team either, look at the WDK documentation, none of them include the calling convention either. So even though it is their policy, not all of the teams stick to it.</p>
<p>I agree with Raymond, if you want to re-prototype a function, get the prototype from the header, that is the only way you are guaranteed accuracy. This is how I normally do it when I need to access a small amount of backwards incompatable functions. If I need to use a larger amount, I tend to write DLLs that wrap the behaviour I want and dynamically load it after a version check.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1007103">
				<div id="div-comment-1007103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1007103">
			August 24, 2012 at 1:51 am</a>		</div>

		<p>On the subject of Pinvoking, the default calling convention is WINAPI (which is __stdcall on x86), and it transparently handles the W/A case (under the hood it tries GetProcAddress(module, name) &#8211; if that fails, then it tries GetProcAddress(module, name+W) and sets the conversion of strings to unicode, and if that fails it tries GetProcAddress(module, name+A) and sets the conversion mode to ascii).</p>
<p>BONUS: This logic is the same as the logic used by rundll32.exe :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1007113">
				<div id="div-comment-1007113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1007113">
			August 24, 2012 at 1:59 am</a>		</div>

		<p>@Eugene When in doubt, Microsoft uses the WINAPI calling convention. There are some exceptions (like printf) but by-and-large, expect all Microsoft functions to be WINAPI.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1007123">
				<div id="div-comment-1007123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jas71_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>jas71@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1007123">
			August 24, 2012 at 4:55 am</a>		</div>

		<p>&quot;If newed variables didn&#39;t need to be initialized, and local variables didn&#39;t need to be initialized, then what&#39;s the point of InitializeSRWLock? In the author&#39;s mental model, you would never need to call it!&quot;</p>
<p>If they&#39;re using a higher level wrapper, it seems reasonable to assume the wrapper calls InitializeSRWLock for you &#8211; after all, you aren&#39;t explicitly calling any memory management functions either, but they are still documented and involved behind the scenes.</p>
<p>In this particular case, the &#39;memory leak&#39; could pass for an optimization if it had a good PR team: it gets disposed of implicitly when the process exists anyway, and that automatic disposal could well be more efficient. Not an issue here, but I&#39;ve seen a few programs spent long enough to be quite irritating cleaning up all their internal state before exiting. (In particular, swapping pages back in just to dispose of their contents, when the OS could just have marked those pages free on exit without the excess I/O.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1007193">
				<div id="div-comment-1007193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1007193">
			August 24, 2012 at 9:22 am</a>		</div>

		<p>«MSDN doesn&#39;t say &quot;You must initialize an SRW lock before using it&quot; because the statement was believed to be so obvious that it never occurred to anybody that somebody would think the opposite was true. I mean, what&#39;s the point of having an Initialize­SRW­Lock function if initialization is not required? Think of it as one of the ground rules for programming: If an object has an initialization method, you must initialize the object before using it.»</p>
<p>@Raymond, not everyone knows the Windows API as you do. I dare to say most people don&#39;t, actually. It may seem very logic to you that the mere presence of an Init* function in the reference is enough to imply that it must be used. I could say the same about the API&#39;s I or my colleagues develop to people outside the department or even the company.</p>
<p>I say it should be explicitly there. What&#39;s not there is not to take for granted. Of course, there are limits to this, such as passing strings that are not zero-terminated to C API&#39;s that deal with char * (and the likes of it). But imagine that there was no string convention for C; then at least the latter would have to be specified somewhere, either in each function reference or in an introductory chapter stating that &quot;every char * parameter and return value is a zero terminated string&quot;.</p>
<p>I regard the MSDN library as a very good quality documentation library, actually one of the best you can read and navigate online. It often states how to initialize many structures, mainly the first field of structures that are expected to evolve between versions of Windows. These don&#39;t have an initialization function, so they kind of have to say how to initialize. Others don&#39;t need initialization, such as an array of structs that is filled by some API function. Yet others have initialization functions, such as VariantInit:</p>
<p>«Before use, all VARIANTARGs must be initialized by VariantInit.»</p>
<p>Why should the synchronization section be any different from others in this regard? Why not say how and when to initialize the objects it handles? The user doesn&#39;t know what&#39;s required unless it&#39;s stated. Try to put yourself on the other side.</p>
<p>Disclaimer: I belong to that group of people that doesn&#39;t know the Windows API that intimately, so there may be other sections that also lack documentation about required initializations. I myself may have taken some initializations for granted just because I&#39;ve seen an Init* function in the reference section.</p>
<p>Disclaimer: My intention is not to point a finger to the MSDN library or the synchronization section, I&#39;m just keeping the subject of conversation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1007293">
				<div id="div-comment-1007293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">arm ram</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1007293">
			August 26, 2012 at 2:24 pm</a>		</div>

		<p>@alegr1: Good luck cooding on WindowsRT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1007303">
				<div id="div-comment-1007303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1007303">
			August 26, 2012 at 2:33 pm</a>		</div>

		<p>@Carl D. Last I checked, the slab locks that I prefer to use require only zero initialization and no cleanup, and when not being waited on way two pointers in size (actually an atomic_t followed by a pointer but padding will push it to two pointers in the rare architecture where that&#39;s different).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1007323">
				<div id="div-comment-1007323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120823-00/?p=6783#comment-1007323">
			August 27, 2012 at 7:18 am</a>		</div>

		<p>Why did they make every object in .NET / Java an object, anyway? &nbsp;It seems like that needlessly complicates the runtime, when a class in the base library called &quot;Monitor&quot; could have done the job just as well. &nbsp;As an added bonus, it forces the user to specify that functionality in a scope. &nbsp;As it is, who knows what objects are being used as locks and what are not?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

