<html>
<head>
<title>A helper template function to wait for WaitOnAddress in a loop</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A helper template function to wait for WaitOnAddress in a loop</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 18, 2018 / year-entry #14</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180118-00/?p=97825</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Because this is what you always have to do.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The <code>Wait&shy;On&shy;Address</code> function
suffers from the problem of
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20160826-00/?p=94185">
spurious wake-ups</a>.
This means that most uses of the
<code>Wait&shy;On&shy;Address</code> function
are of the form "while the value is bad, wait for it to change."
</p>
<p>
There is a subtlety here, because you have to 
capture the value, then make your decision based on the captured value,
and if you decide that you want to wait some more,
you need to pass the captured value to <code>Wait&shy;On&shy;Address</code>.
The extra capturing is necessary to avoid a race condition if
you determine that the value is bad,
but before you can call
<code>Wait&shy;On&shy;Address</code>, the value becomes good.
</p>
<p>
Here's a simple helper function to encapsulate the loop:
</p>
<pre>
template&lt;typename T, typename TLambda&gt;
void WaitForValueByAddress(T&amp; value, TLambda&amp;&amp; is_okay)
{
  auto capturedValue = value;
  while (!is_okay(capturedValue)) {
    WaitOnAddress(&amp;value, &amp;capturedValue, sizeof(value), INFINITE);
    capturedValue = value;
  }
}
</pre>
<p>
The assumption here is that <code>T</code> is a simple value type
like <code>int32_t</code>.
If you pass a funky class, then we're going to be copying it,
which is probably a bad idea given that the variable is going to be
asynchronously modified (possibly while we are copying it).
</p>
<p>
The predicate evaluates the value:
Return <code>true</code> if it acceptable,
or
return <code>false</code> to reject it and wait some more.
</p>
<p>
Here's a sample usage:
</p>
<pre>
int32_t someValue;

void WaitForValueToBecomeZero()
{
  WaitForValueByAddress(someValue, [](auto&amp;&amp; v) { return v == 0; });
}
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1321406">
				<div id="div-comment-1321406" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180118-00/?p=97825#comment-1321406">
			January 18, 2018 at 7:33 am</a>		</div>

		<p>If you want to be uber safe about how this is called you can use a <code>std::enable_if_t&lt;std::is_invocable_r_v&lt;bool, TLambda(T&amp;&amp;), T&amp;&amp;&gt;, int&gt; = 0</code> as a third template parameter to disable this method if the caller passes a non-invokable type. and then call <code>is_okay</code> using <code>std::invoke</code>. This check will insure that whatever is passed in returns a <code>bool</code> and that the input type matches the type of <code>T</code>.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1321556">
				<div id="div-comment-1321556" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180118-00/?p=97825#comment-1321556">
			January 18, 2018 at 1:53 pm</a>		</div>

		<p>In practice, you&#8217;d have a bit of a problem doing that.  Not sure if that is C++11 or C++14, but regrettably most C++ shops haven&#8217;t even progressed that far. (In my limited experience.)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1321566">
				<div id="div-comment-1321566" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180118-00/?p=97825#comment-1321566">
			January 18, 2018 at 1:56 pm</a>		</div>

		<p>Then again, the example uses <b>auto&amp;&amp;</b>, so perhaps I&#8217;m just quibbling about the <b>std</b> library call.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude odd alt depth-3" id="comment-1321575">
				<div id="div-comment-1321575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180118-00/?p=97825#comment-1321575">
			January 18, 2018 at 2:20 pm</a>		</div>

		<p>It&#8217;s C++17 but you can do something equivalently in C++11 it&#8217;s just longer and more annoying, you&#8217;d have to do <code>result_of</code> checks and <code>is_function</code> but they will overly restrict what you can call. But honestly this code uses a universal reference anyway so it&#8217;s at least C++11 and lambdas with auto is C++14 IIRC.</p>
<p>That said those stuck on ancient compilers have my condolences.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-odd thread-alt depth-1" id="comment-1321515">
				<div id="div-comment-1321515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180118-00/?p=97825#comment-1321515">
			January 18, 2018 at 11:23 am</a>		</div>

		<p>Spurious wakeups are hard. Until <a>very recently</a>, WebRTC had timeout wait using relative timestamp like this (on some Android devices):</p>
<p><code><br />
     while (!event_status_ &amp;&amp; error == 0) {<br />
       error = pthread_cond_timedwait_relative_np(<br />
          &amp;event_cond_, &amp;event_mutex_, &amp;ts);<br />
     }<br />
</code></p>
<p>After spurious wakeup, it went to wait for the same amount of milliseconds again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1321765">
				<div id="div-comment-1321765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180118-00/?p=97825#comment-1321765">
			January 22, 2018 at 4:41 am</a>		</div>

		<p>Isn&#8217;t it possible that breaks due to compiler optimizations?</p>
<p>Suppose that is_okay() is moderately complicated.  The compiler decides that is_okay() is either simple enough to inline &#8211; this is especially likely to happen if is_okay() is only used in this one place, which is fairly likely.  Clearly is_okay() doesn&#8217;t change &#8220;value&#8221;, so let&#8217;s assume the compiler can prove that.  Then, since we&#8217;ve assumed is_okay() is moderately complicated, consider what happens if the compiler runs out of registers during is_okay(), and it has to spill something.  There&#8217;s an obvious solution there &#8211; it spills &#8220;capturedValue&#8221;.  Since it knows &#8220;capturedValue&#8221; was read from memory, and it is allowed to assume that memory doesn&#8217;t change, it can just re-read &#8220;value&#8221; after is_okay() and before calling WaitOnAddress(), and the optimizer thinks this is good because it saves a write to the stack.  Now, if the value becomes okay after &#8220;value&#8221; is read the first time and checked with is_okay() but before it&#8217;s read the second time for the WaitOnAddress() call, you end up passing an okay value to WaitOnAddress() and blocking forever.</p>
<p>The fix is to make sure the type of &#8220;value&#8221; is marked&#8221;volatile&#8221;, e,.g. &#8220;volatile int32_t&#8221;, so the compiler knows it&#8217;s not allowed to read twice when you&#8217;ve only written one read.  Or alternatively, use a special atomic read function to read &#8220;value&#8221;, that has appropriate compiler-specific magic to ensure it doesn&#8217;t get optimized into multiple reads.</p>
<p>(I think the above is unlikely, because is_okay is likely to be simple enough that it won&#8217;t run out of registers.  But I&#8217;d rather be certain, because it&#8217;s not going to be fun to debug that very intermittent hang in several year&#8217;s time, shortly after upgrading to an improved compiler).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

