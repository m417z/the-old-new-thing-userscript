<html>
<head>
<title>Switching on a tuple: Sneaky trick</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Switching on a tuple: Sneaky trick</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 26, 2015 / year-entry #63</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>31</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">This is a sneaky trick, but it's sometimes a handy sneaky trick. Suppose you have two values, and you want to switch on the tuple. In other words, you want a switch statement for something like this: if (val1 == 1 && val2 == 0) { Thing_1_0(); } else if ((val1 == 1 && val2...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
This is a sneaky trick, but it's sometimes a handy sneaky trick.
</p>
<p>
Suppose you have two values, and you want to switch on the tuple.
In other words, you want a switch statement for something like this:
</p>
<pre>
if (val1 == 1 &amp;&amp; val2 == 0) {
 Thing_1_0();
} else if ((val1 == 1 &amp;&amp; val2 == 1 ||
           (val1 == 1 &amp;&amp; val2 == 2)) {
 Thing_1_12();
} else if (val1 == 2 &amp;&amp; val2 == 0) {
 Thing_2_0();
} ... etc ...
</pre>
<p>
You could try writing</p>
<pre>
<i>switch (val1, val2) {
case 1, 0:
    Thing_1_0();
    break;
case 1, 1:
case 1, 2:
    Thing_1_12();
    break;
case 2, 0:
    Thing_2_0();
    break;
...
}</i>
</pre>
<p>
but that doesn't do what you think it does.
(Because that comma is a comma operator.)
</p>
<p>
The sneaky trick is to pack the two values into a single
value that you can then switch on.
</p>
<pre>
switch (MAKELONG(val1, val2)) {
case MAKELONG(1, 0):
    Thing_1_0();
    break;
case MAKELONG(1, 1):
case MAKELONG(1, 2):
    Thing_1_12();
    break;
case MAKELONG(2, 0):
    Thing_2_0();
    break;
...
}</i>
</pre>
<p>
Note that there are dangers here beyond craziness.
You have to make sure that your packing
function is injective (i.e., that it does not assign
the same packed value to two different inputs).
If you use <code>MAKE&shy;LONG</code> as your packing function,
then the two values to be packed must fit into 16-bit integers.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (31)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1181543">
				<div id="div-comment-1181543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181543">
			March 26, 2015 at 7:09 am</a>		</div>

		<p>I have found this useful for WM_COMMAND messages in the past.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181573">
				<div id="div-comment-1181573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M. Dudley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181573">
			March 26, 2015 at 7:39 am</a>		</div>

		<p>Missing closing parentheses on line 3 of your first code example, right before the || operator.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181583">
				<div id="div-comment-1181583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181583">
			March 26, 2015 at 7:44 am</a>		</div>

		<p>Sometimes the values are characters; you can concatenate them with a carefully-chosen delimiter (which looks messy but sometimes works).</p>
<p>If the two values are 32-bit integers, you can of course make them into a 64-bit integer&#8230; And so on.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181613">
				<div id="div-comment-1181613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Diego F.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181613">
			March 26, 2015 at 8:09 am</a>		</div>

		<p>F# :) Other languages should implement it as well.</p>
<p>match val1, val2 with</p>
<p>| 1, 0 -&gt; thing_1_0 ()</p>
<p>| 1, 1 -&gt; thing_1_1 ()</p>
<p>| 1, 2 -&gt; thing_1_2 ()</p>
<p>| 2, 0 -&gt; thing_2_0 ()</p>
<p>| _ -&gt; whatever ()</p>
<div class="post">[<em>Feel free to submit your proposal to the C language committee. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jason-warren even thread-even depth-1" id="comment-1181623">
				<div id="div-comment-1181623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Jason+Warren' rel='external nofollow' class='url'>Jason Warren</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181623">
			March 26, 2015 at 8:33 am</a>		</div>

		<p>This pattern both impresses and disgusts my sensibilities. Well done!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1181643">
				<div id="div-comment-1181643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181643">
			March 26, 2015 at 9:27 am</a>		</div>

		<p>@M_Dudley: Since the example isn&#39;t meant to be working code in the first place, your nitpicking is for naught.</p>
<p>Back on topic&#8230;. this concept has been well known in the hardware description language (HDL) community for ages. You pack indidivual bits into a bit vector and compare against that to decide what to do (useful in hardware state machines).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181663">
				<div id="div-comment-1181663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181663">
			March 26, 2015 at 10:57 am</a>		</div>

		<p>@Aaron: Or, y&#39;know, just use a sane language like Python:</p>
<p>&nbsp; &nbsp;lookup = {(1,0): Thing_1,</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(1,1): Thing_2, # etc.</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p>
<p>&nbsp; &nbsp;try:</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;func = lookup[val1, val2]</p>
<p>&nbsp; &nbsp;except KeyError:</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;# Handle it</p>
<p>&nbsp; &nbsp;else:</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;func()</p>
<div class="post">[<em>&quot;Oh, the way to solve this problem is to throw away your current code base and rewrite it in this other language.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hankhein odd alt thread-odd thread-alt depth-1" id="comment-1181673">
				<div id="div-comment-1181673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Henri+Hein' rel='external nofollow' class='url'>Henri Hein</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181673">
			March 26, 2015 at 11:41 am</a>		</div>

		<p>@DWalker:</p>
<p>Tootling my own horn a bit, but I feel compelled to point to an article I wrote on the subject:</p>
<p><a rel="nofollow" target="_new" href="http://www.codeguru.com/java/article.php/c15701/Using-a-Pair-Class-as-Efficient-Key-Objects.htm">http://www.codeguru.com/&#8230;/Using-a-Pair-Class-as-Efficient-Key-Objects.htm</a></p>
<p>I had to optimize a code base which used concatenated strings as keys. &nbsp;I was surprised at the speed improvement when I converted that to a tuple-like construct.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181693">
				<div id="div-comment-1181693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">not important</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181693">
			March 26, 2015 at 12:01 pm</a>		</div>

		<p>I used a similar trick when parsing MPEG files (I should mention I did this for a personal project). MPEG files consist of atoms and each atom is marked with four characters (for ex. the data atom is marked with &quot;mdat&quot;). Guess what datatype fits in 32 bits and can be used to test for equality:)???</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181703">
				<div id="div-comment-1181703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181703">
			March 26, 2015 at 12:07 pm</a>		</div>

		<p>@Raymond: I was trying to make fun of Aaron for using such a complicated solution (hint: Python is at least a whole (binary) order of magnitude slower than equivalent C). &nbsp;Unfortunately, it didn&#39;t come through very well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181723">
				<div id="div-comment-1181723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181723">
			March 26, 2015 at 12:33 pm</a>		</div>

		<p>[This creates a data structure at run time and uses a linear search. The switch statement is built at compile time and can use a binary search or table dispatch. -Raymond]</p>
<p>In this case, you likely won&#39;t get a table dispatch unless several of your values have the similar low words and the same high word in MAKELONG(low, high), since a table dispatch only makes sense when you use a dense range of consecutive integers. &nbsp;Of course, the results depend highly on the compiler&#39;s implementation details.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-john-ludlow odd alt thread-odd thread-alt depth-1" id="comment-1181733">
				<div id="div-comment-1181733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/John+Ludlow' rel='external nofollow' class='url'>John Ludlow</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181733">
			March 26, 2015 at 12:42 pm</a>		</div>

		<p>Since we&#39;re suggesting other languages that can do this sort of thing in overly complicated ways:</p>
<p>// C#</p>
<p> &nbsp; &nbsp; &nbsp;var dict = new Dictionary&lt;object, Action&gt; {</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;{ new { a=1, b=2 }, () =&gt; Console.WriteLine(&quot;FOO&quot;)},</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;{ new { a=2, b=2 }, () =&gt; Console.WriteLine(&quot;BAR&quot;)}</p>
<p> &nbsp; &nbsp; &nbsp;};</p>
<p> &nbsp; &nbsp; &nbsp;dict[new { a=1, b=2 }]();</p>
<p>Ok, I know this works because I have actually used it</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181753">
				<div id="div-comment-1181753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harald van Dijk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181753">
			March 26, 2015 at 1:09 pm</a>		</div>

		<p>&gt; but that doesn&#39;t do what you think it does. (Because that comma is a comma operator.)</p>
<p>&lt;&lt; case 1, 2: &gt;&gt; is a syntax error. A comma is not allowed by the syntax in that context, as an operator or otherwise, in either C or in C++. Most compilers reject it as such, complaining that they expected : where they got ,. At least two do accept it as a valid extension to the syntax, indeed treating it like a comma operator like you suggest. In the latest of their currently released versions, both of those compilers still implement the rule that a constant expression cannot contain comma operators, so still issue an error message, and don&#39;t cause your code to behave unexpectedly at run-time. Are you using a build that is not an official release, perhaps? Or did I miss a relevant compiler in my testing?</p>
<p>It&#39;s an entirely different story for &lt;&lt; case (1, 2): &gt;&gt;, so your point is valid even today and it still pays to turn up your compiler&#39;s warning level.</p>
<p>I like your suggested approach and have used it in the past, switching on four characters packed into a 32-bit integer. Strictly speaking, that isn&#39;t 100% portable, but it&#39;ll only break in the extremely unlikely case of a non-ASCII non-EBCDIC implementation with more than 8 bits per byte, so it&#39;s good enough for practical purposes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181773">
				<div id="div-comment-1181773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181773">
			March 26, 2015 at 2:06 pm</a>		</div>

		<p>Though in the case of this specific code, since all of the cases just call functions, I&#39;d also consider using a 2-dimensional array of function pointers. But, while that would be smaller and faster, it would be far more likely to break junior programmers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181783">
				<div id="div-comment-1181783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mappu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181783">
			March 26, 2015 at 4:25 pm</a>		</div>

		<p>What other methods are there of packing two ints into one?</p>
<p>For arbitrary-size ints, i thought of</p>
<p>&#8211; interleave binary bits</p>
<p>&#8211; Define a parametric space-filling curve over x/y and use its t parameter as the result. E.g. a diagonal path starting from (0,0) and repeating upward</p>
<p>&#8211; abusing empty space in higher bases: function(int a, int b) { return base11_to_10( a + &quot;A&quot; + b ); }</p>
<p>Some unoptimised implementations at code.ivysaur.me/tupac.html .</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181793">
				<div id="div-comment-1181793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181793">
			March 26, 2015 at 4:25 pm</a>		</div>

		<p>I do hope that C++ example was meant to be a joke; there&#39;s obviously not enough boilerplate in it. &nbsp;The REAL way is to write the numbers into a string, convert it to XML, and then parse the XML.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181653">
				<div id="div-comment-1181653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181653">
			March 26, 2015 at 9:54 am</a>		</div>

		<p>Here is the much simpler way to do it:</p>
<p>struct Key</p>
<p>{</p>
<p>&nbsp; &nbsp;int a; int b;</p>
<p>&nbsp; &nbsp;int operator==(const Key&amp; that) { return (that.a == this-&gt;a) &amp;&amp; (that.b == this-&gt;b); }</p>
<p>};</p>
<p>typedef void(*ThingFunc)();</p>
<p>// Isn&#39;t this far, far easier to read that a big switch-case block??</p>
<p>LookupTable&lt;Key, ThingFunc&gt; option[] =</p>
<p>{ {1,0}, Thing_1_0 &nbsp; &nbsp;},</p>
<p>&nbsp;{1,1}, Thing_1_1or2 },</p>
<p>&nbsp;{1,2}, Thing_1_2or2 },</p>
<p>&nbsp;{2,2}, Thing_2_2 &nbsp; &nbsp;}</p>
<p>};</p>
<p>ThingFunc* pFunc = option-&gt;Lookup(Key{val1,val2}, _countof(option));</p>
<p>if (pFunc == NULL)</p>
<p>{</p>
<p>&nbsp; &nbsp;// Error, that entry not found in the lookup table!</p>
<p>}</p>
<p>else</p>
<p>{</p>
<p>&nbsp; &nbsp;(*pFunc)(); // Actually call the function found in the lookup table.</p>
<p>}</p>
<p>And, implementation of the LookupTable:</p>
<p>template&lt;class KT, class VT&gt;</p>
<p>struct LookupTable</p>
<p>{</p>
<p>KT key;</p>
<p>VT value;</p>
<p>// returns NULL if key was not found.</p>
<p>// returns pointer to matching value when key is found.</p>
<p>VT* Lookup(KT key, size_t size)</p>
<p>{</p>
<p>VT* pF = NULL;</p>
<p>for (size_t i = 0; i &lt; size; ++i)</p>
<p>{</p>
<p>if (key == this[i].key)</p>
<p>{</p>
<p>pF = &amp;(this[i].value);</p>
<p>break;</p>
<p>}</p>
<p>}</p>
<p>return pF;</p>
<p>}</p>
<p>};</p>
<div class="post">[<em>This creates a data structure at run time and uses a linear search. The switch statement is built at compile time and can use a binary search or table dispatch. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1181803">
				<div id="div-comment-1181803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181803">
			March 26, 2015 at 6:21 pm</a>		</div>

		<p>@Diego F.: In C# we have Tuple type, although it&#39;s not supported in switch statement.</p>
<p>I do hope one day they&#39;ll permit it in switch statement, if all parameters in Tuple are &quot;switch permitted&quot; types.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181763">
				<div id="div-comment-1181763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181763">
			March 26, 2015 at 1:59 pm</a>		</div>

		<p>Whenever I&#39;ve needed to do this, I&#39;ve gone with</p>
<p>switch (val1) {</p>
<p>&nbsp;case 1:</p>
<p>&nbsp; &nbsp; switch( val2) {</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;case 0: &nbsp; /* 1,0 */</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Thing_1_0();</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;case 1: /* 1,1 */</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;case 2: /* 1,2 */</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Thing_1_12();</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</p>
<p>&nbsp; &nbsp; &nbsp; }</p>
<p>&nbsp; &nbsp; &nbsp;break;</p>
<p>&nbsp; case 2: &nbsp; /* 2,x */</p>
<p>&nbsp; &nbsp; &nbsp; switch( val2) {</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case 0: &nbsp;/* 2,0 */</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thing_2_0();</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// etc.</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;}</p>
<p>&nbsp; &nbsp; &nbsp; break;</p>
<p>}</p>
<p>That seems far more likely to use table lookups, and hopefully less likely to break junior programmers. It&#39;s a little wordy, perhaps, but not horrible.</p>
<div class="post">[<em>It gets ugly if you have a <code>Thing_12_0</code>, though. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181823">
				<div id="div-comment-1181823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jason T. Miller</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181823">
			March 27, 2015 at 1:56 am</a>		</div>

		<p>@not important: In case you didn&#39;t know, these sorts of identifiers, which also appear in many other contexts going back at least as far as the original (1984) Mac system software, are defined to be four characters long with exactly this &quot;trick&quot; in mind.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181833">
				<div id="div-comment-1181833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">boogaloo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181833">
			March 27, 2015 at 3:03 am</a>		</div>

		<p>I don&#39;t agree it&#39;s sneaky, it seems perfectly obvious to me.</p>
<p>However in this circumstance I&#39;d expect the compiler to use a sequential search, a binary search or jump table is likely to be slower. Sometimes the compiler will pick the slower method and optimisation has to be achieved by forcing it not to.</p>
<p>I have seen</p>
<p>switch (value &gt;&gt; 24)</p>
<p>{</p>
<p>case 0:</p>
<p>case 1:</p>
<p>case 2:</p>
<p>etc</p>
<p>}</p>
<p>sped up by replacing it with</p>
<p>switch (value &amp; 0xff000000)</p>
<p>{</p>
<p>case 0&lt;&lt;24:</p>
<p>case 1&lt;&lt;24:</p>
<p>case 2&lt;&lt;24:</p>
<p>etc</p>
<p>}</p>
<p>It very much depends on the compiler you are using, so if you are working on cross platform source code then you have to be even sneakier. I&#39;d expect this blog to be MSVC focused, but gcc/icc/clang all behave differently. It can also depend on the CPU you are using. One time I managed to write code that performed amazingly well on gcc + Intel P4, when everyone elses code was better using icc + P4 or gcc + AMD.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181843">
				<div id="div-comment-1181843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Silly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181843">
			March 27, 2015 at 4:15 am</a>		</div>

		<p>For arbitrary data I&#39;d just compute a hash and hope for the best.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181863">
				<div id="div-comment-1181863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andre</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181863">
			March 27, 2015 at 6:09 am</a>		</div>

		<p>[This creates a data structure at run time and uses a linear search. The switch statement is built at compile time and can use a binary search or table dispatch. -Raymond]</p>
<p>I think the statement &quot;// Isn&#39;t this far, far easier to read that a big switch-case block??&quot; has big, red warning lights on that scream SARCASM. He&#39;s just demonstrating how C++ solutions easily degenerate into huge, unreadable meta-programming blocks for the most trivial of things. Only the F# variant beats your C in conciseness.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181873">
				<div id="div-comment-1181873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JamesJohnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181873">
			March 27, 2015 at 6:22 am</a>		</div>

		<p>I&#39;m not sure if table dispatch would just happen here. &nbsp;Seems like you&#39;d need to nest the switch statements like parkrrr did in order to have consecutive integers, like Adam Rosenfield says. &nbsp;In other words, a table dispatch to another table dispatch, where each table corresponds to one of the tuple values. &nbsp;Otherwise you probably end up with a binary search, unless compilers are much smarter than I give them credit for.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181883">
				<div id="div-comment-1181883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181883">
			March 27, 2015 at 7:18 am</a>		</div>

		<p>I wonder why none of the reference compilers used binary search when it was obvious table dispatch was not reasonable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181913">
				<div id="div-comment-1181913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Y</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1181913">
			March 27, 2015 at 8:59 am</a>		</div>

		<p>This is a seriously neat trick! &nbsp;If it weren&#39;t for the fact that I don&#39;t like C switch statements, I&#39;d probably use it!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mikebmcl even thread-even depth-1" id="comment-1182023">
				<div id="div-comment-1182023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MikeBMcL' rel='external nofollow' class='url'>MikeBMcL</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1182023">
			March 27, 2015 at 1:12 pm</a>		</div>

		<p>&gt; [Feel free to submit your proposal to the C language committee. -Raymond]</p>
<p>Some very smart and influential folks in the C++ community are working on pattern matching with an eye towards (probably) proposing it for standardization in the future. At the ISO/IEC C++ Committee meeting in Urbana last year, two of the three co-authors of the proof-of-concept Mach7 library, Bjarne Stroustrup and Gabriel Dos Reis (I don&#39;t remember whether Yuriy Solodkyy, the third co-author was also there) gave an evening session presentation about it which was fascinating.</p>
<p>You can have a look at Mach 7 here, <a rel="nofollow" target="_new" href="https://github.com/solodon4/Mach7">github.com/&#8230;/Mach7</a> , and view Yuriyy&#39;s talk on it at C++ Now 2014 here, <a rel="nofollow" target="_new" href="https://www.youtube.com/watch?v=OkDS6hmU-w8">http://www.youtube.com/watch</a> . Do note that there is no formal proposal yet and that if/when there is one, its syntax would not be the exactly the same as Mach7&#39;s syntax (Mach7 is a library that works with C++ as it is now whereas a formal proposal could include modifications to the core language syntax itself in addition to library APIs and the such).</p>
<p>&gt; [This creates a data structure at run time and uses a linear search. The switch statement is built at compile time and can use a binary search or table dispatch. -Raymond]</p>
<p>I am not familiar enough with Mach7 to competently address all aspects of its efficiency, but a design goal was to have it be as efficient as existing functionality (including &#39;switch&#39;) and that the authors considered performance and discuss it in great detail in the various presentations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1182053">
				<div id="div-comment-1182053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">boogaloo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1182053">
			March 28, 2015 at 7:35 am</a>		</div>

		<p>&quot;Otherwise you probably end up with a binary search, unless compilers are much smarter than I give them credit for.&quot;</p>
<p>@JamesJohnston The problem for compiler writers is that even when they have written code to detect where jump tables can be used, they aren&#39;t necessarily the fastest solution. It&#39;s not 1985, your cpu doesn&#39;t fetch an instruction then execute it. Writing code that makes the most of the cpu&#39;s branch prediction is hard.</p>
<p>Users of functional programming languages have an even bigger expectation that the compiler is able to pull off miracles. Functional can be faster if the procedural source code is terrible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1182063">
				<div id="div-comment-1182063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">boogaloo    </cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1182063">
			March 28, 2015 at 7:46 am</a>		</div>

		<p>@Joshua A binary search isn&#39;t always better, </p>
<p><a rel="nofollow" target="_new" href="https://web.archive.org/web/20140723175122/http://741mhz.com/switch/">web.archive.org/&#8230;/switch</a></p>
<p>&quot;I wonder why none of the reference compilers used binary search when it was obvious table dispatch was not reasonable.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1182103">
				<div id="div-comment-1182103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1182103">
			March 29, 2015 at 3:25 pm</a>		</div>

		<p>&gt; Writing code that makes the most of the cpu&#39;s branch prediction is hard.</p>
<p>Not only that, but doing it effectively across a large class of CPUs with different timing characteristics is even harder. &nbsp;A binary search might be faster on one CPU type, a linear search might be faster on another CPU type, and a table dispatch might be faster on a third CPU type. &nbsp;A perfect optimizing compiler will either have to generate code that&#39;s optimal only for certain CPUs, or generate multiple code paths and choose one at runtime at startup (i.e. like a fat/universal binary).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1182193">
				<div id="div-comment-1182193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Curran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150326-00/?p=44383#comment-1182193">
			March 30, 2015 at 11:10 am</a>		</div>

		<p>I have in the past, used this often for two letter codes, and, I believe, one for a 4-letter code:</p>
<p>// In production, this would have more parenthesis </p>
<p>#define MAKECODE(p) (p[0]*0x01000000 + p[1]*0x010000 + p[2]*0x0100 + p[3])</p>
<p> &nbsp; &nbsp; switch(MAKECODE(input_buffer))</p>
<p>The cool thing is that you can give it a string, and it yields a compile-time constant:</p>
<p> &nbsp; &nbsp; case MAKECODE(&quot;OPEN&quot;):</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</p>
<p> &nbsp; &nbsp; case MAKECODE(&quot;EXIT&quot;):</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

