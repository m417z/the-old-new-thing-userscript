<html>
<head>
<title>It's fine to rename a function in your DEF file, but when you do, you have to link to that function by its new name</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>It&#8217;s fine to rename a function in your DEF file, but when you do, you have to link to that function by its new name</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 18, 2010 / year-entry #21</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Jeffrey Riaboy asks why, if he renames a function in his DEF file, attempts to link to the function by its old name fail. Well, um, yeah, because you renamed it. Let's take the situation apart a bit; maybe it'll make more sense. I'm going to ignore a lot of details (dllimport/dllexport, calling conventions) since...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://www.castledragmire.com">
Jeffrey Riaboy</a>
asks why,
<a HREF="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#759387">
if he renames a function in his DEF file,
attempts to link to the function by its old name fail</a>.
</p>
<p>
Well, um, yeah, because you renamed it.
</p>
<p>
Let's take the situation apart a bit;
maybe it'll make more sense.
I'm going to ignore a lot of details
(<code>dllimport/dllexport</code>,
calling conventions)
since they are not relevant to the discussion
and would end up just being distracting.
I'm also going to assume we are running on an x86-class machine,
just for concreteness.
The same discussion works for other platforms; you just have to
adjust the conventions accordingly.
</p>
<p>
First, here is some source code for a DLL,
let's call it <code>FRED.DLL</code>:
</p>
<pre>
int Dabba()
{
  return 0;
}

int Doo()
{
  return 1;
}
</pre>
<p>
And here is the DEF file for <code>FRED.DLL</code>:
</p>
<pre>
EXPORTS
 Yabba=Dabba
 Dabba=Doo
</pre>
<p>
When you compile this DLL, the result will be something like this:
</p>
<pre>
FRED.DLL:
 Yabba -&gt; return 0;
 Dabba -&gt; return 1;
</pre>
<p>
The function exported as <code>Yabba</code> returns <code>0</code>
because the DEF file said,
"I want to export a function with the exported name <code>Yabba</code>;
when somebody calls the function, I want control to go to the
function I called <code>Dabba</code> internally."
</p>
<p>
Similarly, the function exported as <code>Dabba</code> returns <code>1</code>
because the DEF file said,
"I want to export a function with the exported name <code>Dabba</code>;
when somebody calls the function, I want control to go to the
function I called <code>Doo</code> internally."
</p>
<p>
Remember that symbolic information disappears during linking.
The names of the functions and variables in the original source
code are not stored anywhere in the DLL.
The names exist only so that the linker can resolve symbolic
references between object files.
Once that's done, the names are discarded: Their work is done.
(See
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2009/10/12/9905953.aspx">
The classical model for linking</a>
for a discussion of how linking works under the classical model.)
</p>
<p>
Exported functions are also a mapping between labels and functions,
but this mapping is not used when linking the DLL;
rather, it is just a table the linker produces under the direction
of your <code>DEF</code> file.
To reduce confusion for the programmer writing the DLL,
the name in the exported function table usually matches the name
in the object files, but that is merely a convention.
An entry in the export table that doesn't perform renaming is
just a shorthand for "I would like the exported name for this function
to be the same as its internal name."
It's a convenient typing-saver.
</p>
<p>
By analogy,
Microsoft employees have one email address for use inside the company,
and
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/10/23/9011948.aspx">
a different email address for use outside the company</a>.
Some employees choose to have their external email address be the same
as their internal one,
but that is hardly a requirement.
</p>
<p>
Meanwhile, the import library for our DLL looks something like this:
</p>
<pre>
FRED.LIB:
 __imp__Yabba -&gt; FRED.Yabba
 __imp__Dabba -&gt; FRED.Dabba

 <a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/07/27/679634.aspx">_Yabba@0</a> -&gt; <a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/07/20/672695.aspx">jmp [__imp__Yabba]</a>
 _Dabba@0 -&gt; jmp [__imp__Dabba]
</pre>
<p>
As we saw before,
each exported function
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/07/21/673830.aspx">
results in two symbols in the import library</a>,
one with <code>__imp_</code> prepended to the exported name,
which represents the import table entry,
and one containing a stub function for the benefit of a na&iuml;ve
compiler.
</p>
<p>
Now let's look at a program that wants to call some functions from
<code>FRED.DLL</code>:
</p>
<pre>
int Flintstone()
{
 Yabba();
 Dabba();
 Doo();
}
</pre>
<p>
Let's say that these functions were not declared as
<code>dllimport</code>, just for the sake of concreteness.
(The discussion works the same if they were declared as
<code>dllimport</code>, making the appropriate changes to the
symbol names.)
When the linker goes to resolve the call to <code>Yabba@0</code>,
it will find the entry in <code>FRED.DLL</code> that says,
"I've got a function called <code>Yabba@0</code>; the code for it
is the single instruction <code>jmp [__imp__Yabba]</code>."
When the program calls this function, the <code>jmp</code>
instruction will jump through the import table entry for
<code>FRED.Yabba</code>,
which will wind up at the function in <code>FRED.DLL</code>
exported under the name <code>Yabba</code>.
If we look inside <code>FRED.DLL</code>, we see that this
is a function that returns <code>0</code>
(because it is the function which was called <code>Dabba</code>
in the original source code, although that information was lost
a long time ago).
</p>
<p>
Similarly, when the linker resolves the call to <code>Dabba@0</code>,
it finds the entry in <code>FRED.DLL</code> which pulls in the
one-line stub function which jumps through the import table
entry for <code>Dabba@0</code>.
This leads to a function that returns <code>1</code>,
a function which was called <code>Doo</code>
in the original source code.
</p>
<p>
However, that last call to <code>Doo</code>
raises a linker error because it cannot find a function called
<code>Doo</code> in the <code>FRED.LIB</code> import library.
That's just the internal name for a function in the source code
for <code>FRED.DLL</code>,
a name which was lost during linking.
If you want to call the function which had been called <code>Doo</code>
in the original source code,
you have to import it by its new name,
<code>Dabba</code>.
</p>
<p>
In Jeffrey's case, he took a function which was internally
referred to by a decorated name
(<code>?Dispose@MyClass@@QAEAAV1@XZ</code>)
and renaming it to an undecorated name
(<code>MC_Dispose</code>).
But when other modules tried to use the library, they got the error
saying that
"?Dispose@MyClass@@QAEAAV1@XZ" is not found.
Which is correct:
<code>?Dispose@MyClass@@QAEAAV1@XZ</code>
was not found because it no longer exists under that name.
You renamed it to <code>MC_Dispose</code>.
Those modules need to link to the function
<code>MC_Dispose</code> if they want to call the
function
"formerly known as ?Dispose@MyClass@@QAEAAV1@XZ".
</p>
<p>
Actually, Jeffrey's situation is more complicated than I described
it because
<code>?Dispose@MyClass@@QAEAAV1@XZ</code>
undecorates to
<code>public: class MyClass & __thiscall MyClass::Dispose(void)</code>;
this is a method not a static function.
I don't believe there's a way to override the name decoration
algorithm for instance methods;
the compiler is always going to generate a reference to
<code>?Dispose@MyClass@@QAEAAV1@XZ</code>.
So renaming the export doesn't buy you anything because you don't
control the name on the import side.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-803153">
				<div id="div-comment-803153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bahbar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243#comment-803153">
			January 18, 2010 at 8:34 am</a>		</div>

		<p>Hum&#8230; I&#8217;m somewhat confused at why Jeffrey tried to rename it at all, but even more confused by his claim that renaming it to &quot;Dispose&quot; would solve the link error. So&#8230; the compiler generates a reference to ?Dispose@MyClass@@QAEAAV1@XZ, the linker sees a reference to Dispose in the .lib, and successfully matches them ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-803173">
				<div id="div-comment-803173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243#comment-803173">
			January 18, 2010 at 8:47 am</a>		</div>

		<p>On a tangent, whats the usual method for exporting C++ class methods so that they can be dynamically loaded with , or called from VB? &nbsp;Here we just wrap them with simple C functions, so</p>
<p>int Foo::bar()</p>
<p>gets wrapped with</p>
<p>int bar(Foo*foo) {</p>
<p>&nbsp; return foo-&gt;bar();</p>
<p>}</p>
<p>(Calling conventions elided, because I can never remember which I need ;) )</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-803193">
				<div id="div-comment-803193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matthew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243#comment-803193">
			January 18, 2010 at 9:13 am</a>		</div>

		<p>@ bahbar &#8211;</p>
<p>The reason to rename from a decorated name to an undecorated one during export is generally because the library (DLL) is expected to be used in explicit linking, where the decorated name can be unmanagable.</p>
<p>Similarly, one might be building a DLL to be used as a plugin, whereby the available (exported) name would have to match the expectations of the plugin loader exactly. Generally, those interface functions will be undecorated (as again, dealing with decorated names here would be a considerable hassle, especially given that one could build plugins with any compiler, which means that decoration can vary).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-803203">
				<div id="div-comment-803203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeffrey Riaboy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243#comment-803203">
			January 18, 2010 at 9:15 am</a>		</div>

		<p>Thanks for the response! I was not actually expecting a reply from this after so long. I forget you keep a year+ backlog :-).</p>
<p>I looked back at the question I wrote and am a bit shocked at myself for not checking it over before submitting it. The way I wrote it didn&#8217;t fully explain my end intent, and it is a bit confusing.</p>
<p>If I recall back to the situation, I had 2 classes in the DLL that both had an exported “Dispose” function. I did not want to keep the decorated names in the DLL file, so I used the export file to rename them to arbitrary names. I was hoping there was a way that other programs could still use the same header file to access the functions in the library. I know if the names were changed and the user only had the DLL, the linker would not know how to find the newly named functions. However, I was under the impression that if you gave the linker access to the .def or .lib file (or something else generated when the library was originally compiled with debugging/linking information) it would be able to find out what the function was renamed to, so it would know how to link.</p>
<p>By undecorating the name only, and not renaming it, the function was still found during linking, as I guess the MSVC linker first checked for the decorated name, and when it was not found, for the undecorated name.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-803223">
				<div id="div-comment-803223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bahbar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243#comment-803223">
			January 18, 2010 at 9:34 am</a>		</div>

		<p>@Matthew: I was not very clear. I know in general what renaming is useful for. But for member functions, I failed to see the point.</p>
<p>Put it another way, did you ever find yourself wanting to rename a this-call ? How did you expect it to be called ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-803263">
				<div id="div-comment-803263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeffrey Riaboy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243#comment-803263">
			January 18, 2010 at 10:16 am</a>		</div>

		<p>I realized I didn&#8217;t really ask a question in my last post&#8230;</p>
<p>Am I incorrect in assuming that the MSVC linker uses .lib files to gather extra information about linking to DLLs (or does it, but not renamed export functions)?</p>
<p>If not, is there some type of file that can be included with a DLL (like a .lib or .def), or process that can be done in the header, that will automatically let the linker know what a function was renamed to?</p>
<div class=post>[<i>Once the DLL is created, the original name of the function is lost. All that remains is the exported name. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-803273">
				<div id="div-comment-803273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">R Samuel Klatchko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243#comment-803273">
			January 18, 2010 at 10:29 am</a>		</div>

		<p>Reading this article made me wonder if you could export the same function twice with different names. &nbsp;Continuing from Raymond&#8217;s example, could you do:</p>
<p>EXPORTS</p>
<p>Yabba=Dabba</p>
<p>Dabba=Doo</p>
<p>Doo=Doo</p>
<p>The idea is this could simplify things when you both wanted to call a function with a mangled named both via implicit and explicit linking.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-803333">
				<div id="div-comment-803333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243#comment-803333">
			January 18, 2010 at 11:35 am</a>		</div>

		<p>@R Samuel Klatchko,</p>
<p>I wonder if redirect will work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-803373">
				<div id="div-comment-803373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243#comment-803373">
			January 18, 2010 at 12:31 pm</a>		</div>

		<p>@R Samuel Klatchko</p>
<p>Who says you can&#8217;t export the same function more than once?</p>
<p>A simple program which you could just write in under 5 minutes would give you the answer to that.</p>
<p>For reference though, the following would work.</p>
<p>LIBRARY dlltest</p>
<p>EXPORTS</p>
<p>baa</p>
<p>oink=baa</p>
<p>In your program which would reference it this, if you call oink or baa then it would call the same function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-803403">
				<div id="div-comment-803403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243#comment-803403">
			January 18, 2010 at 2:11 pm</a>		</div>

		<p>I just want to take a minute to say that this is a useful and very nicely written article about a topic &#8211; linking &#8211; that is generally under-documented (not just for Windows, but in general). &nbsp;Thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-803413">
				<div id="div-comment-803413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kemp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243#comment-803413">
			January 18, 2010 at 2:29 pm</a>		</div>

		<p>Is it just me that sees this as being far too obvious? If you change the name&#8230; then you&#8217;ve changed the name. Of course linking against the old name would fail, because it doesn&#8217;t exist anymore. That&#8217;s like renaming a file and then wondering why typing the old filename doesn&#8217;t take you to it&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-803423">
				<div id="div-comment-803423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243#comment-803423">
			January 18, 2010 at 2:50 pm</a>		</div>

		<p>&quot;Let&#8217;s take the situation apart a bit; maybe it&#8217;ll make more sense.&quot;</p>
<p>Oh it made perfect sense just from the title, and still made sense from the opening paragraphs.</p>
<p>Made sense right through the end, too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-803433">
				<div id="div-comment-803433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243#comment-803433">
			January 18, 2010 at 3:38 pm</a>		</div>

		<blockquote><p>
  &gt; Is it just me that sees this as being far too obvious? &lt;&lt;
</p></blockquote>
<p>Like many things, it&#8217;s obvious once it&#8217;s been pointed out or explained. It might even be the most obvious way that things might work. &nbsp;</p>
<p>But note that it&#8217;s certainly not a given that a command in a .def file to provide the function export another name would necessarily result in the original name being dropped &#8211; there&#8217;s nothing that says a function (or address) can&#8217;t have 2 or more names. &nbsp;I&#8217;m pretty sure the IAT in the binary wouldn&#8217;t have a problem with that.</p>
<p>Even Raymond&#8217;s email analogy supports this &#8211; I know at least that I have more than one external email address.</p>
<p>It&#8217;s been a long, long time since I messed around with .def files, but I wouldn&#8217;t be surprised if there&#8217;s even a supported way to do it today.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-803443">
				<div id="div-comment-803443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243#comment-803443">
			January 18, 2010 at 3:44 pm</a>		</div>

		<blockquote><p>
  &gt; I wouldn&#8217;t be surprised if there&#8217;s even a supported way to do it today &lt;&lt;
</p></blockquote>
<p>And now I notice that Crescens2k has already indicated that it&#8217;s quite simple to do so.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-803453">
				<div id="div-comment-803453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243#comment-803453">
			January 18, 2010 at 3:57 pm</a>		</div>

		<p>Instead of renaming decorated names in the .DEF file, it is more constructive and less work to declare exportable functions as extern &quot;C&quot;. &nbsp;</p>
<p>In case of method calls &#8211; just don&#8217;t export them. &nbsp;This is never a good idea since you will have to re-compile all the clients whenever you change the class private parts. &nbsp;And compile all of them with the same compiler.</p>
<p>Instead &#8211; always export a &quot;C&quot; API.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-803503">
				<div id="div-comment-803503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kemp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243#comment-803503">
			January 18, 2010 at 6:07 pm</a>		</div>

		<blockquote><p>
  But note that it&#8217;s certainly not a given that a command in a .def file to provide the function export another name would necessarily result in the original name being dropped
</p></blockquote>
<p>Given that these are the only names available for the exports it still makes perfect sense to me.</p>
<p>I should point out that I&#8217;ve never played with this in C before, only in a slightly different way when making DLLs in Delphi, but I don&#8217;t see a problem with it. Maybe it&#8217;s just one of those happy coincedences where what I expect lines up exactly with what happens :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-803543">
				<div id="div-comment-803543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243#comment-803543">
			January 19, 2010 at 2:34 am</a>		</div>

		<p>Jeffery&#8217;s alternative is to make the function virtual in which case it doesn&#8217;t need to be exported, although for intra-module code this does result in an extra indirection.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-803623">
				<div id="div-comment-803623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matthew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100118-00/?p=15243#comment-803623">
			January 19, 2010 at 9:36 am</a>		</div>

		<p>@ bahbar:</p>
<p>Understood, and yes, it doesn&#8217;t make much sense to be renaming non-static member functions.</p>
<p>@ James:</p>
<p>Then you need to have a separate global API for any and all static member functions. This can mean additional maintenance tasks &#8211; for example, if the signature of an API function needs to change, you have to change it in two places instead of just one. (In the module providing the API, of course; still the same amount of work for any consumer.) Just something to consider when weighing the consequences of different methods.</p>
<p>My personal approach does create a separate global API, but doesn&#8217;t bother to deal with extern &quot;C&quot;. It uses a library of API-generating macros to define and export the wrapper functions. It more or less results in my own name decoration scheme, as the macros build unique names on the functions to be exported. Then usage macros (from the same master set) perform the same name-mangling to provide access by wrapping GetProcAddress(). The end result is a relatively clean means of access &#8211; the provider uses DECLARE_API() macros and the consumer uses CALL_API() macros with similar signatures (not quite identical; the declare needs types while the call needs actual variables, and the call also needs the module being used).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

