<html>
<head>
<title>Does version 6 of the common controls support ANSI or not?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Does version 6 of the common controls support ANSI or not?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 6, 2008 / year-entry #366</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">I mentioned in passing a few years ago that version 6 of the common controls supports only Unicode. And then other people stepped in to say, "Well, XYZ uses ANSI and that works for me." So does it support ANSI or doesn't it? It does and doesn't. All of the controls in the common controls...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>I mentioned in passing a few years ago that <a href="http://blogs.msdn.com/oldnewthing/archive/2006/12/14/1285437.aspx"> version 6 of the common controls supports only Unicode</a>. And then other people stepped in to say, "Well, XYZ uses ANSI and that works for me." So does it support ANSI or doesn't it?</p>
<p> It does and doesn't. </p>
<p> All of the controls in the common controls library are internally Unicode. But not all controls in the library are created equal. </p>
<p> The first group is the traditional common controls. List view, tree view, those guys. These controls were never part of the window manager and have been internally Unicode on all Windows&nbsp;NT platforms. The ANSI messages such as <code>LVM_SETITEMA</code> are implemented by thunking to and from Unicode. </p>
<p> The second group is the controls that were traditionally part of the window manager itself. If you aren't using version 6 of the common controls, you will continue to use the versions built into the window manager, and those versions, for the most part, are also internally Unicode. </p>
<p> The one weirdo is the edit control. The edit control uses black magic voodoo to tell whether you created it with <code>CreateWindowExA</code> or <code>CreateWindowExW</code>, and its internal edit buffer is ANSI or Unicode accordingly. (Regular window classes don't have access to this magic voodoo. It's one of the <a href="http://blogs.msdn.com/oldnewthing/archive/2007/08/20/4470527.aspx"> historical weirdnesses of the edit control</a> that date back to the old days.) </p>
<p> The internal character set goes largely unnoticed since the window manager automatically converts between Unicode and ANSI as necessary. For example, if you call <code>SetWindowTextA</code> to a Unicode edit control, the window manager will convert the string from ANSI to Unicode and send the Unicode string to the edit control. The one place the internal character set becomes visible to the outside world is with the <code>EM_GETHANDLE</code> and <code>EM_SETHANDLE</code> messages, because these messages access the internal buffer of the edit control. You therefore have to know whether your edit control is a Unicode or ANSI edit control so you know the correct format of that internal buffer. </p>
<p> When these window manager controls were ported into the common controls library, the voodoo was lost, since that magic is available only to internal window manager classes, and the common controls aren't internal window manager classes. Since the common controls library uses <code>RegisterClassW</code> to register the window class, the edit control that comes with the common controls is a Unicode edit control. In other words, if you use <code>CreateWindowA</code> to create an edit control from the common controls library, and you send it a <code>EM_GETHANDLE</code> message, the buffer you get back will be a <i>Unicode</i> buffer, not an ANSI one. </p>
<p> This wacky behavior with <code>EM_GETHANDLE</code>, as well as other even more subtle weirdnesses that come from the edit control in the common controls library being always internally Unicode means that code that calls <code>CreateWindowA</code> and expects the result to be an edit control which is internally ANSI will be in for a bit of a surprise when they are using version 6 of the common controls library. </p>
<p> These and other subtle ANSI/Unicode discrepancies are why the common controls library, starting with version 6, requires a Unicode application. If you're an ANSI application and you create controls from the common controls library, you may encounter strange behavior. It'll mostly work, but things may be weird at the fringe. </p>
<p> Now, why not just get rid of all the ANSI support entirely? Why leave it in, even though it doesn't quite work perfectly? For the same reason the Windows&nbsp;XP common controls are <a href="http://blogs.msdn.com/oldnewthing/archive/2008/01/29/7294949.aspx"> not a separate library with separate window class names</a>. As noted, there are programs that like to go hunting around into windows that don't belong to them. Some of those programs might stumble upon one of Explorer's list views and use various nefarious techniques to do things like <a href="http://www.codeproject.com/threads/int64_memsteal.asp?df=100&amp;forumid=29535&amp;exp=0&amp;select=1646056"> stealing strings from another program's list view control</a>. If support for the ANSI messages such as <code>LVM_GETITEMA</code> were removed entirely, then those sneaky programs would stop working. </p>
<p> You might say, "Well, tough for them." You'll say that until you discover that one of those sneaky programs happens to be one that you use every day, possibly even one that you wrote yourself. Oops. Now you're going to tell all your friends, "Don't upgrade to the next version of Windows. Its compatibility sucks." </p>
<p> Okay, so the common controls still have to be backward compatible with the ANSI messages that existed in version&nbsp;5. But at least the new messages such as <code>LVM_SETINFOTIP</code> can be Unicode-only. </p>
<p> And it means that all you folks who are using version&nbsp;6 of the common controls but haven't converted to Unicode are relying on a compatibility loophole. The ANSI support is there for the old programs that thought they were talking to a version&nbsp;5 common control; it isn't there for you. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-680803">
				<div id="div-comment-680803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anthony Wieser</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-680803">
			November 6, 2008 at 11:38 am</a>		</div>

		<p>Is this a tacit warning that things may not work so well in Windows 7?</p>
<p>If so, I guess I&#8217;d better start porting hundreds of thousands of lines of code to Unicode, being careful not to break the old mcbs file format.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-680823">
				<div id="div-comment-680823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-680823">
			November 6, 2008 at 11:48 am</a>		</div>

		<p>I have to admit that I never noticed that the second group of controls stopped being traditionally part of the window manager. I now can&#8217;t stop wondering why.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-680833">
				<div id="div-comment-680833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-680833">
			November 6, 2008 at 11:54 am</a>		</div>

		<p>I guess it&#8217;s time to provide SxS USER32.DLL and other common DLLs. Solves compatibility problems. Unless the EXE is marked as Win6+ compatible, make it run as if it were Windows XP. </p>
<p>And REMOVE ANSI SUPPORT from USER32. It&#8217;s about time. If those losers apps need to pull stuff out of third party windows, too bad.</p>
<div class=post>[<i>Alexandre Grigoriev, meet <a href="http://blogs.msdn.com/oldnewthing/archive/2008/11/06/9045610.aspx#9049751" rel="nofollow">Anthony Wieser</a>. You two can duke it out. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-680873">
				<div id="div-comment-680873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anthony Wieser</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-680873">
			November 6, 2008 at 12:10 pm</a>		</div>

		<p>Does this also imply that we should stop using all those _T(&quot;&quot;) macros, and _tcscpy etc, as effectively ANSI is dead?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-680913">
				<div id="div-comment-680913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-680913">
			November 6, 2008 at 12:41 pm</a>		</div>

		<p>Antony Wieser,</p>
<p>You only need those TCHAR things if you write dual-purpose code &#8211; compileable with either ANSI or UNICODE. As long as you&#8217;re not playing with dead OSes, just use L&quot;strings&quot; and &quot;W&quot; chars and functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-680923">
				<div id="div-comment-680923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-680923">
			November 6, 2008 at 12:43 pm</a>		</div>

		<p>Raymond,</p>
<p>My suggestion to remove ANSI from USER32 was for V7 SxS USER32, which would only be used for apps marked with V7 compatibility. Besides from that, you&#8217;ll finally be able to remove all those horrible compat hacks from it.</p>
<div class=post>[<i>So a module linked with v6 USER32 v6 which performs operations on a window created with v7 USER32 will lose the compat hacks? Good luck writing programs that support plug-ins &#8211; each plug-in might be written with a different version of USER32 yet they all need to talk to each other. The interop boundary when doing SxS is nasty. A lot of the SxS work in comctl32 was at the boundary and we didn&#8217;t get it all right the first time). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-680953">
				<div id="div-comment-680953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-680953">
			November 6, 2008 at 12:52 pm</a>		</div>

		<p>&quot;The ANSI support is there for the old programs that thought they were talking to a version 5 common control; it isn&#8217;t there for you.&quot;</p>
<p>In the end, if it breaks enough important programs you&#8217;re just going to keep piling on the compatibility fixes anyway.</p>
<p>If I worked at Adobe I would make sure Photoshop relied on every undocumented behavior or compatibility fix I could find just to annoy you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-680983">
				<div id="div-comment-680983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SMW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-680983">
			November 6, 2008 at 1:48 pm</a>		</div>

		<p>Raymond, your link to Anthony Wieser under Alexandre Grigoriev&#8217;s first comment just comes right back here to this entry. &nbsp;I&#8217;m guessing that&#8217;s a mistake.</p>
<div class=post>[<i>It links to Anthony Wieser&#8217;s comment on this page. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-tihiy even thread-even depth-1" id="comment-681033">
				<div id="div-comment-681033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tihiy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-681033">
			November 6, 2008 at 3:45 pm</a>		</div>

		<p>Hmm, excuse me stupid, but why comctlv6 &#8220;EDIT&#8221; class couldn&#8217;t be a superclass of standard user32 edit control? Is hundreds KBytes of code duplicated only for non-client paint and balloons? User32 exports EditWndProc (perhaps for another purpose), why comctlv6 couldn&#8217;t play nice and use it (and may be other tricks)? Or it is this way really?</p>
<p>This &#8220;side-by-side&#8221; WinSxS idea still frightens me (especially in Vista).</p>
<div class=post>[<i><a href="http://blogs.msdn.com/oldnewthing/archive/2008/01/29/7294949.aspx" rel="nofollow">We tried that first</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681153">
				<div id="div-comment-681153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-681153">
			November 6, 2008 at 9:16 pm</a>		</div>

		<p>&#8220;And it means that all you folks who are using version 6 of the common controls but haven&#8217;t converted to Unicode are relying on a compatibility loophole. The ANSI support is there for the old programs that thought they were talking to a version 5 common control; it isn&#8217;t there for you. &#8220;</p>
<p>Unfortunately, I am sure there are lots and lots of apps that rely on this compatibility loophole, including, as mentioned in another blog article, <font color=red>Product X</font>, in particular because of poor documentation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681163">
				<div id="div-comment-681163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Beeblebrox</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-681163">
			November 6, 2008 at 11:21 pm</a>		</div>

		<p>Gosh darn it, it is called ASCII. ANSI is the American National Standards Institute, ASCII is the American Standard Code for Information Interchange. Somebody at Microsoft needs to figure this out and fix all the places where it is wrongly called ANSI in the documentation (I suppose asking for it to be fixed in publicly available source from Microsoft is too much to ask). I don&#8217;t want to be mean but I&#8217;ve seen the term ANSI misused a lot in computer circles, and I think a lot of that confusion is due to Microsoft mis-using the term for many years.</p>
<div class="post">[<i>It&#8217;s not ASCII either. ASCII defines only the first 128 characters. The reason for the name ANSI <a href="http://blogs.msdn.com/oldnewthing/archive/2004/05/31/144893.aspx" rel="nofollow">is historical</a>. You are welcome to propose another name, but ASCII is an even worse alternate name than ANSI. At least ANSI was correct at one point. ASCII never was. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681003">
				<div id="div-comment-681003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-681003">
			November 6, 2008 at 3:21 pm</a>		</div>

		<p>&quot;The interop boundary when doing SxS is nasty.&quot;</p>
<p>I totally agree with this statement. I had to make a library recently and mess with Fusion to make sure the controls created by it were always v6 no matter the caller. You have to sprinkle xxxActCtx calls *everywhere*. Whenever the execution enters or leaves your code (and you better not forget one). USER32 does it for WndProcs for you, but for other callbacks you have to do it yourself.</p>
<p>As for &quot;removing the ANSI APIs from USER32&quot;, I&#8217;d dare not say to go to such lengths. However, here&#8217;s an idea I got recently and even submitted in the Win7 &quot;Send Feedback&quot;: Why not put all ANSI-API-related code in their own page? Like .textA or something. So they would ONLY be swapped in when an ANSI call is made. Right now, I bet the ANSI code is interleaved with the rest, so swapping in a page for an Unicode function may swap in some ANSI functions around it too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681173">
				<div id="div-comment-681173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shinobu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-681173">
			November 7, 2008 at 12:13 am</a>		</div>

		<p>We need the non-Unicode support also to make older programs draw the new controls using a manifest file, do we not? If all ‘ANSI’ support were dropped, we wouldn&#8217;t be able to use those. Even if it were only dropped from (the interface to) the new controls, we wouldn&#8217;t be able to use them unless we were content with Windows-95-like controls.</p>
<p>Oh, and in response to a post above, it isn&#8217;t called ASCII either. For almost all functions I&#8217;ve encountered it is what just happens to be the local system encoding, which is usually Windows-1252 but can even be something like SJIS. Yes, that is mixed single/double byte encoding. Have fun.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681073">
				<div id="div-comment-681073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aardvark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-681073">
			November 6, 2008 at 4:46 pm</a>		</div>

		<p>I wonder if this explains why I am *sometimes* sent TTN_NEEDTEXTA and *sometimes* TTN_NEEDTEXTW in my non-unicode application using the new common controls?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681183">
				<div id="div-comment-681183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-681183">
			November 7, 2008 at 1:14 am</a>		</div>

		<p>Mixing ANSI and unicode is fun!</p>
<p>I do stuff in Windows CE, which is strictly Unicode for everything. However, some ANSI functions remain because we need it. When you&#8217;re dealing with stuff externally that used 8-bit characters, you need it. Now that&#8217;s easy since the external facing code has to deal with it.</p>
<p>But if you have third party code that assumes a char is 8-bits wide&#8230; things get fun since your glue code is now littered with Unicode and ANSI. Hilarity ensues if you mix your buffer pointers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681253">
				<div id="div-comment-681253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Beeblebrox</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-681253">
			November 7, 2008 at 9:14 am</a>		</div>

		<p>Sorry, Raymond. I didn&#8217;t fully comprehend the historical reasons for calling it ANSI. I suppose the correct name is Windows-1252, not ASCII.</p>
<div class="post">[<i>That&#8217;d be wrong on any system where the Language for non-Unicode Programs is not US-English. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681273">
				<div id="div-comment-681273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anthony Wieser</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-681273">
			November 7, 2008 at 9:53 am</a>		</div>

		<p>The reason I&#8217;ve resisted so far is that everything appeared to work (well apart from CEditView in MFC, which doesn&#8217;t quite hack around it correctly) but does at least explain this:</p>
<p><a rel="nofollow" target="_new" href="http://groups.google.co.uk/group/microsoft.public.vc.mfc/browse_thread/thread/9ffefbf89263d8dd?hl=en&amp;ie=UTF-8" rel="nofollow">http://groups.google.co.uk/group/microsoft.public.vc.mfc/browse_thread/thread/9ffefbf89263d8dd?hl=en&#038;ie=UTF-8</a></p>
<p>So faced with a working program (that happens to interface to a lot of hardware via a serial port that uses 7 bit characters to communicate), I&#8217;ve resisted the temptation to have so much fun.</p>
<p>What is the future of lstrcmpA and friends? &nbsp;Deprecation?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681753">
				<div id="div-comment-681753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-681753">
			November 8, 2008 at 1:17 am</a>		</div>

		<p>Dear Raymond, btw &#8211;</p>
<p>why version 6 of the common controls dosn&#8217;t support RealGetWindowClass ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-682003">
				<div id="div-comment-682003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">W</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-682003">
			November 10, 2008 at 9:06 am</a>		</div>

		<p>Why does windows use 16Bit chars for unicode at all? I see no real advantages when comparing to utf-8.</p>
<p>* UTF-8 gains one byte per char for ascii, and loses one for chinese characters etc.</p>
<p>* Both UTF-8 and UTF-16 have no fixed character size</p>
<p>* UTF-16 requires a whole new apiset whereas UTF-8 only requires a new codepage as windows &quot;ANSI&quot; functions already support multi byte chars.</p>
<p>Was UTF-8 simply unknown to them/too new at the time? Or did they think 16Bit is enough for a character(perhaps because unicode had &lt;65k chars at that time) because no(resulting in fixed charsize)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-682013">
				<div id="div-comment-682013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">W</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-682013">
			November 10, 2008 at 9:07 am</a>		</div>

		<p>Why does windows use 16Bit chars for unicode at all? I see no real advantages when comparing to utf-8.</p>
<p>* UTF-8 gains one byte per char for ascii, and loses one for chinese characters etc.</p>
<p>* Both UTF-8 and UTF-16 have no fixed character size</p>
<p>* UTF-16 requires a whole new apiset whereas UTF-8 only requires a new codepage as windows &#8220;ANSI&#8221; functions already support multi byte chars.</p>
<p>Was UTF-8 simply unknown to them/too new at the time? Or did they think 16Bit is enough for a character(perhaps because unicode had &lt;65k chars at that time) because no(resulting in fixed charsize)?</p>
<div class=post>[<i>Check your history. Windows NT release date versus UTF-8 release date. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-682623">
				<div id="div-comment-682623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anthony Wieser</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081106-00/?p=20303#comment-682623">
			November 11, 2008 at 2:26 am</a>		</div>

		<p>Three days into converting the 100,000 line project, and the code&#8217;s mostly running again.</p>
<p>Along the way though, it&#8217;s amazing what you stumble across.</p>
<p>First the good bits. &nbsp;</p>
<ol>
<li>Serialized CStrings make it seamless to change between the formats.</li>
<li>
<p>CStringA and CStringW classes make it simple to switch between the two character sets.</p>
</li>
</ol>
<p>Now the bits that made me write different code:</p>
<ol>
<li>Clipboard formats. &nbsp;
<p>&nbsp;a. The registered &quot;Rich Text Format&quot; seems to be ANSI only.</p>
<p>&nbsp;b. &nbsp;CF_FILENAME changes width between the two versions if you use CFSTR_FILENAME.</li>
</ol>
<li>
<p>wfstream and fstream handle wide characters very differently, but ANSI the same.</p>
</li>
<li>
<p>Handling the WM_GETTEXT message is ANSI/UNICODE dependent, but the parameter signature in MFC doesn&#8217;t indicate that.</p>
</li>
<li>
<p>AnsiNext doesn&#8217;t really exist anymore-this code was really old-though CharNext and CharPrev do instead. &nbsp;Michael Kaplan points out here <a rel="nofollow" target="_new" href="http://blogs.msdn.com/michkap/archive/2005/01/14/352802.aspx" rel="nofollow">http://blogs.msdn.com/michkap/archive/2005/01/14/352802.aspx</a></p>
</li>
<p>that surrogate pairs still dont&#8217;t work with that API. &nbsp;Maybe they do now?</p>
<ol>
<li>Fonts. &nbsp;Well, Arial doesn&#8217;t do a very good job on some unicode characters. &nbsp;So, what should the default font be?</li>
</ol>
<li>
<p>MutliByteToWideChar doesn&#8217;t do a very good job on weird stuff like: ⓇⓈⓉ, and Michaels example åüộåüộåüộåüộ gets expanded out.</p>
</li>
<p>My head hurts.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

