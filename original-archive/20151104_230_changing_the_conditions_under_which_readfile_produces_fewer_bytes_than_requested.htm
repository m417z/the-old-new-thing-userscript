<html>
<head>
<title>Changing the conditions under which ReadFile produces fewer bytes than requested</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Changing the conditions under which ReadFile produces fewer bytes than requested</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 4, 2015 / year-entry #231</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>24</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In response to an article on hierarchical storage management, Karellen suggests that the problem could be ameliorated by having the hierarchical storage manager keep the first 4KB of the file online, thereby allowing programs that sniff the start of the file for metadata to continue operating without triggering a recall. "The way that file read...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In response to
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/04/15/9549682.aspx">
an article on
hierarchical storage management</a>,
Karellen suggests that the problem could be ameliorated by
having the hierarchical storage manager
keep the first 4KB of the file
online,
thereby allowing programs that sniff the start of the file for
metadata to continue operating without triggering a recall.
"The way that file read operations tend to work (fread, read, and ReadFile),
if an application opens a file and requests a large read,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2009/04/15/9549682.aspx#9551324">
just returning the first 4KB is a valid response</a>."
</p>
<p>
Premature short reads may technically be a valid response,
but it won't be the correct response.
</p>
<p>
When your program reads from a file, do you retry
partial reads? Be honest.
</p>
<p>
Suppose you want to read a 32-bit value from a file.
You probably write this.
</p>
<pre>
 uint32_t value;

 DWORD bytesRead;
 if (ReadFile(file, &amp;value, sizeof(value),
               &amp;bytesRead, nullptr) &amp;&amp;
               bytesRead == sizeof(value)) {
   // Got the value - use it...
 }
</pre>
<p>
You probably don't write this:
</p>
<pre>
 uint32_t value;
 BYTE *nextRead = reinterpret_cast&lt;BYTE*&gt;&amp;value;
 DWORD bytesRemaining = sizeof(value);
 while (bytesRemaining) {
   DWORD bytesRead;
   if (!ReadFile(file, &amp;value, bytesRemaining,
                 &amp;bytesRead, nullptr)) return false;
   if (bytesRead == 0) break; // avoid infinite loop
   bytesRemaining -= bytesRead;
   nextRead += bytesRead;
 }

 if (bytesRemaining == 0) {
  // Got the value - use it...
 }
</pre>
<p>
Most programs assume that a short read from a disk file
indicates that the end of the file has been reached,
or some other error has occurred.
Consider, for example, this file parser:
</p>
<pre>
struct CONTOSOFILEHEADER
{
  uint32_t magic;
  uint32_t version;
};

bool IsContosoFile(HANDLE file)
{
 CONTOSOFILEHEADER header;
 DWORD bytesRead;
 if (!ReadFile(file, &amp;header, sizeof(header),
               &amp;bytesRead, nullptr)) {
   // Couldn't read the file - assume not a Contoso file.
   return false;
 }

 if (bytesRead != sizeof(header)) {
   // File doesn't hold a header - not a Contoso file.
   return false;
 }

 if (header.magic != CONTOSO_MAGIC) {
  // Does not start with magic number - not a Contoso file.
  return false;
 }

 if (header.version != CONTOSO_VERSION_1 &amp;&amp;
     header.version != CONTOSO_VERSION_2) {
  // Unsupported version - not a Contoso file.
  return false;
 }

 // Passed basic tests.
 return true;
}
</pre>
<p>
The problem is even worse if you use <code>fread</code>,
because <code>fread</code> does not provide information
on how to resume a partial read.
It reports only the total number of items read in full;
you get no information about how much progress was made
in the items that were read only in part.
</p>
<pre>
 // Read 10 32-bit integers.
 uint32_t flags[10];
 auto itemsRead = fread(flags, sizeof(uint32_t), 10, fp);
 if (itemsRead &lt; 10) {
   if (!feof(fp) &amp;&amp; !ferror(fp)) {
     // At this point, we have a short read.
     // We are now screwed.
   }
 }
</pre>
<p>
Since nobody is actually prepared for a short read to occur
on disk files
anywhere other than the end of the file,
you shouldn't introduce a new failure mode that
nobody can handle.
</p>
<p>
Because they won't handle it.
</p>
<p>
And recall that the original question was in the context of
displaying a file in a folder.
Even if you know that Hierarchical Storage Management is not
involved,
you still have to deal with the cost of opening the file at all.
If the folder is on a remote server
where each I/O operation has 500ms of latency,
then enumerating the contents of a directory with 1000 files will
take over eight minutes.
I suspect the user will have lost patience by then.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1211921">
				<div id="div-comment-1211921" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211921">
			November 4, 2015 at 7:09 am</a>		</div>

		<p>[When your program reads from a file, do you retry partial reads?]</p>
<p>Yeah.</p>
<p>[4 bytes &#8230; Do you write &#8230;]</p>
<p>I wrote it once and now I write ReadBlock(h, buf, 0, buflen) which contains the retry-partial loop.</p>
<p>[because fread does not provide information on how to resume a partial read.]</p>
<p>fread() should do the retry-partial for you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1211901">
				<div id="div-comment-1211901" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211901">
			November 4, 2015 at 7:54 am</a>		</div>

		<p>GNU&#39;s libc does retry partial reads inside fread(). &nbsp;The code is horrible to read and hard to follow, but check out the loop in _IO_default_xsgetn() <a rel="nofollow" target="_new" href="https://github.com/lattera/glibc/blob/master/libio/genops.c#L500">github.com/&#8230;/genops.c</a> .</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1211891">
				<div id="div-comment-1211891" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">donx</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211891">
			November 4, 2015 at 7:55 am</a>		</div>

		<p>Why isn&#39;t the semantic of &quot;short read means EOF&quot; made a contract for ReadFile()? The function could internally implement the loop and all users would get what they (incorrectly) expected anyway. I&#39;m amazed that somebody actually thought at some time that allowing for the possibility of short reads was a good idea (for such a widely used function).</p>
<div class="post">[<em>If the handle is not a file, then short reads mean something else. (A short read on a pipe or a console does not mean &quot;end of file&quot;; it just means &quot;no more data available right now (but try again later)&quot;.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1211881">
				<div id="div-comment-1211881" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211881">
			November 4, 2015 at 8:00 am</a>		</div>

		<p>Err, actually, the real function in glibc which services fread for file streams is _IO_file_xsgetn(), not _IO_default_xwgetn(), but that too uses a loop which properly handles short reads: <a rel="nofollow" target="_new" href="https://github.com/lattera/glibc/blob/master/libio/fileops.c#L1382">github.com/&#8230;/fileops.c</a> .</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1211871">
				<div id="div-comment-1211871" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josiah Worcester</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211871">
			November 4, 2015 at 8:37 am</a>		</div>

		<p>Perhaps more worthwhile is the C spec for fread, which clearly states that fread only does partial reads on errors or EOF.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1211861">
				<div id="div-comment-1211861" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam M.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211861">
			November 4, 2015 at 9:04 am</a>		</div>

		<p>I always handle partial reads, with a helper function if I need the full data right now. But you may be right; laziness is widespread. Partial reads are useful in the implementation of diverse stream types (network streams, decoding/translating streams, etc.), reducing blocking and often simplifying the code, but eliminating them would cause few problems, and result in a simpler API that&#39;s harder to misuse. And I think shifting the coding burden to the API implementor and away from the users is pretty much always the right approach.</p>
<p>So I agree with how ReadFile /should/ work, but given how it actually works, I don&#39;t see a problem with returning only 4K on the first read. It may &quot;educate&quot; users about the possibility of partial reads, and prompt them to update the rest of their code to handle them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1211851">
				<div id="div-comment-1211851" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211851">
			November 4, 2015 at 9:25 am</a>		</div>

		<p>I was bitten not long ago by a decompression filter that yielded short reads under some conditions. Had to change the condition from “cbRead &lt; cbRequested” to “cbRead == 0”.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1211841">
				<div id="div-comment-1211841" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211841">
			November 4, 2015 at 9:33 am</a>		</div>

		<p>Offline files is such a red herring when the Explorer just isn&#39;t prepared to handle less marginal cases well. You open a directory on \tsclientc, and instead of doing quick read of the whole directory, showing it with generic view (no extracted icons) and then extracting the icons in background, you have to wait until it shows the files and directories one by one. You didn&#39;t care about those icons, you maybe just wanted to go one directory deeper, but you have to wait anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1211831">
				<div id="div-comment-1211831" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211831">
			November 4, 2015 at 9:56 am</a>		</div>

		<p>@Josiah: TIL that partial reads for fread() *only* occur on error or EOF. Thankyou!</p>
<p>All the documentation (i.e. man pages) I&#39;ve seen before for fread() always stated that fread() could read &quot;up to&quot; nitems items, and that it would return a short count on error or EOF. However, I&#39;d never seen anything before to say that fread() could not return a short count under other circumstances.</p>
<p>Given that read(2) explicitly *can* return a short count on non-error, non-EOF conditions, and that fread(3) will use read(2) under the hood on many platforms, I never before felt safe assuming that fread(3) might make any more guarantees than read(2) did.</p>
<p>I still don&#39;t have access to a (draft) C standard, so it&#39;s conceivable that the C standard is less strict than POSIX, but at least according to The Open Group: &quot;fread() shall return the number of elements successfully read which is less than nitems *only if* a read error or end-of-file is encountered.&quot;[0] (emphasis mine)</p>
<p>Now I can go and delete a load of unnecessarily-defensive code in a bunch of my projects! Negative LOC days for the win!</p>
<p>[0] <a rel="nofollow" target="_new" href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/fread.html">pubs.opengroup.org/&#8230;/fread.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1211821">
				<div id="div-comment-1211821" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kolbyjack</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211821">
			November 4, 2015 at 10:20 am</a>		</div>

		<p>There&#39;s an error in your retry loop, it uses &amp;value for lpBuffer instead of nextRead</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1211811">
				<div id="div-comment-1211811" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Buster</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211811">
			November 4, 2015 at 11:10 am</a>		</div>

		<p>I&#39;m going to stick my neck out and say that it is contractual that a synchronous ReadFile on a non-pipe doesn&#39;t return until the number of bytes requested has been read unless an error occurs. The documentation says so, at the start of the Remarks section.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1211801">
				<div id="div-comment-1211801" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211801">
			November 4, 2015 at 12:10 pm</a>		</div>

		<p>@Buster: Unfortunately it is not true of network shares, so nobody should be depending on it. Don&#39;t ask me how I know this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1211791">
				<div id="div-comment-1211791" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ancient_Hacker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211791">
			November 4, 2015 at 12:40 pm</a>		</div>

		<p>I once consulted with a big company that was getting read errors. &nbsp;I looked over their code and everywhere they assumed when they asked for a packet form a server, that they got one packet, not a partial packet or multiple packets, back into their buffer. &nbsp;I could not convince them that TCP/IP didn&#39;t guarantee the same rhythmm and pacing at the receiving end as at the sending end. &nbsp; I suspect if you&#39;re reading a file through a network share you might get the data in something other than disk-sized chunks under some conditions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1211771">
				<div id="div-comment-1211771" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">clintp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211771">
			November 4, 2015 at 3:37 pm</a>		</div>

		<p>Back in the day I did QA for 1990&#39;s Very Large Data Storage Company and they did offline storage by doing pretty much this. &nbsp;Keeping the first disk block (4k, 8k, whatever) on local storage, and the rest *potentially* offline. &nbsp;This let things like unix&#39;s file(1) still do their job peeking at metadata.</p>
<p>The trick was that everything was accessed via NFS. &nbsp;NFS v2 would do a hard, uninterruptable wait for pending data. &nbsp;fread() went somewhere off into kernel-space and just didn&#39;t come back until the server (the file storage unit) responded. &nbsp;Please don&#39;t kill the process either, because that&#39;s how you got zombies.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1211751">
				<div id="div-comment-1211751" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">trivee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211751">
			November 4, 2015 at 7:30 pm</a>		</div>

		<p>Karellen actually suggested two different things:</p>
<p>&#8211; caching the first 4 kbytes of archived file in the &quot;stub&quot; to enable small file header parsing without triggering a recall, and </p>
<p>&#8211; if the first read request is for more than 4 kbytes, returning the cached 4 kbytes</p>
<p>The second behavior would certainly create problems as discussed here. But this doesn&#39;t in any way invalidate the first idea. If the first few kilobytes of the file are available online, and an application requests less than that amount &#8211; the read request can be satisfied immediately and efficiently without any issues. Only longer reads would still require a recall. The application issuing a small read followed by a large read would experience a delay on the second one, but most applications should handle that, no?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt thread-odd thread-alt depth-1" id="comment-1211741">
				<div id="div-comment-1211741" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211741">
			November 5, 2015 at 12:55 am</a>		</div>

		<p>&gt; you still have to deal with the cost of opening the file at all. If the folder is on a remote server where each I/O operation has 500ms of latency, then enumerating the contents of a directory with 1000 files will take over eight minutes.</p>
<p>I beg to differ. You only need async read loope for them. Then, the 500ms latency will only delay the first response. The callbacks delivering data for the next file will be arriving at the pace limited by bandwidth, not by round trip time. The further improvement could be achieved if the async read could be started as wildcard, essentially &quot;file \externalshare*&quot; or &quot;file \externalshare*.jpg&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1211731">
				<div id="div-comment-1211731" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Freddie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211731">
			November 5, 2015 at 5:13 am</a>		</div>

		<p>Speaking of partial reads it is interesting that on Mac OS X (and at least FreeBSD) the man page notes that:</p>
<p>&quot;Upon successful completion, read(), readv(), and pread() return the number of bytes actually read and placed in the buffer. &nbsp;The system guarantees to read the number of bytes requested if the descriptor references a normal file that has that many bytes left before the end-of-file, but in no other case.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1211711">
				<div id="div-comment-1211711" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josiah Worcester</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211711">
			November 5, 2015 at 9:03 am</a>		</div>

		<p>@Karellen: The POSIX and C specs use the same language here. I can also confirm that every C implementation I&#39;ve dealt with has implemented that, FWIW. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1211681">
				<div id="div-comment-1211681" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211681">
			November 5, 2015 at 11:37 am</a>		</div>

		<p>&gt; When your program reads from a file, do you retry partial reads? Be honest.</p>
<p>Yes, I do. And I even helped add a method to Rust&#39;s standard library to make it easier.</p>
<p>But I think most commenters are missing one crucial detail: the sort of person who religiously reads Raymond&#39;s blog is also the sort of person who religiously retries short reads. A lot of programmers are not the sort of person who religiously reads Raymond&#39;s blog.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1211631">
				<div id="div-comment-1211631" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1211631">
			November 5, 2015 at 2:19 pm</a>		</div>

		<p>@Freddie: Good to know, I wasn&#39;t aware of that, though of course there are lots of types file system paths which are not ordinary files (FIFOs, sockets, files from mounted NFS, AFS, or FUSE file systems, etc.).</p>
<p>@Cesar: Haha, very true.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1212872">
				<div id="div-comment-1212872" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1212872">
			November 6, 2015 at 4:02 am</a>		</div>

		<p>@Adam Rosenfield: &quot;there are lots of types file system paths which are not ordinary files (FIFOs, sockets, files from mounted NFS, AFS, or FUSE file systems, etc.).&quot;</p>
<p>Mounted files *are* normal files in this respect, because the application does access them completely transparently, without any knowledge about the driver(s) used by the operating systems. So, this Mac OS X statement must cover *all* regular files, but excludes stream-like communication devices like pipes, sockets, serial ports, raw USB access etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1212862">
				<div id="div-comment-1212862" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1212862">
			November 6, 2015 at 4:06 am</a>		</div>

		<p>Joshua &quot;Unfortunately it is not true of network shares, so nobody should be depending on it. Don&#39;t ask me how I know this.&quot;</p>
<p>Can you explain a specific scenario where this can be observed?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1212512">
				<div id="div-comment-1212512" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1212512">
			November 9, 2015 at 7:00 am</a>		</div>

		<p>Here is a scenario fitting to this blog: The maximum size of a request to ReadFile is 32 megabytes. Windows 95 runs well on 16mb RAM. A 32mb read (from say an XP box with 256mb RAM) from a share on the W95 box cannot be satisfied at once, yielding a short read. Unless MS has gone back into the workstation SMB service and put the while loop for short reads there, there are other scenarios like these.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1212402">
				<div id="div-comment-1212402" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151104-00/?p=91961#comment-1212402">
			November 9, 2015 at 8:56 am</a>		</div>

		<p>@Joshua: Interesting. Strange bug, especially because I would expect the transfer to be broken down to 64 KB (or smaller) blocks anyway: <a rel="nofollow" target="_new" href="https://technet.microsoft.com/en-us/library/cc938632.aspx">technet.microsoft.com/&#8230;/cc938632.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

