<html>
<head>
<title>How do I programmatically obtain the user's selected accent color in Windows 10?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I programmatically obtain the user&#8217;s selected accent color in Windows 10?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 5, 2017 / year-entry #86</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It's in the UISettings object.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
If you want to obtain the user's accent color,
you can ask
<a HREF="https://msdn.microsoft.com/library/windows/apps/windows.ui.viewmanagement.uisettings.aspx">
the
<code>UISettings</code> object</a>
for the current color value of
<a HREF="https://msdn.microsoft.com/library/windows/apps/windows.ui.viewmanagement.uicolortype.aspx">
<code>UIColorType.<wbr>Accent</code></a>.
</p>
<p>
How you get this information depends on what kind of program you're writing.
</p>
<p>
If you're writing a Store app or a classic desktop program
in C++/CX,
then you do this:
</p>
<pre>
namespace vm = Windows::UI::ViewManagement;

void GetAccentColor()
{
    auto settings = ref new vm::UISettings();
    auto color = settings-&gt;GetColorValue(vm::UIColorType::Accent);
    // color.A, color.R, color.G, and color.B are the color channels.
}
</pre>
<p>
If you're writing a Store app or
<a HREF="https://blogs.msdn.microsoft.com/lucian/2015/10/23/how-to-call-uwp-apis-from-a-desktop-vbc-app/">
a classic desktop program</a>
in C#,
then you do this:
</p>
<pre>
using vm = Windows.UI.ViewManagement;

void GetAccentColor()
{
    var settings = new vm.UISettings();
    var color = settings.GetColorValue(vm.UIColorType.Accent);
    // color.A, color.R, color.G, and color.B are the color channels.
}
</pre>
<p>
If you're writing a Store app in JavaScript,
then you do this:
</p>
<pre>
var vm = Windows.UI.ViewManagement;

function getAccentColor() {
    var settings = new vm.UISettings();
    var color = settings.getColorValue(vm.UIColorType.accent);
    // color.a, color.r, color.g, and color.b are the color channels.
}
</pre>
<p>
If you're writing a Store app or a
classic desktop program in raw C++
(you crazy person you),
then you get to do this:
</p>
<pre>
namespace abi_vm = ABI::Windows::UI::ViewManagement;
namespace wrl = Microsoft::WRL;
namespace wf = Windows::Foundation;

void GetAccentColor()
{
    // Error checking has been elided for expository purposes.
    wrl::ComPtr&lt;abi_vm::IUISettings&gt; settings;
    wf::ActivateInstance(wrl::Wrappers::HStringReference(
     RuntimeClass_Windows_UI_ViewManagement_UISettings).Get(), &amp;settings);
    ABI::Windows::UI::Color color;
    settings-&gt;GetColorValue(abi_vm::UIColorType::Accent, &amp;color);
    // color.A, color.R, color.G, and color.B are the color channels.
}
</pre>
<p>
And if you're writing a Store app or a classic desktop program
in
<a HREF="https://github.com/Microsoft/cppwinrt">
C++/WinRT</a>,
you write this:
</p>
<pre>
namespace winrt_vm = winrt::Windows::UI::ViewManagement;

void GetAccentColor()
{
    winrt_vm::UISettings settings;
    auto color = settings.GetColorValue(winrt_vm::UIColorType::Accent);
    // color.A, color.R, color.G, and color.B are the color channels.
}
</pre>
<p>
Note that I used namespace aliases instead of importing
the entire namespace.
This makes the code a little bit uglier,
but I think it's useful for expository purposes
because it makes it clearer which namespace
each identifier comes from.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-jeremytais even thread-even depth-1 parent" id="comment-1291445">
				<div id="div-comment-1291445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SimonRev' rel='external nofollow' class='url'>SimonRev</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1291445">
			April 5, 2017 at 7:29 am</a>		</div>

		<p>What, you weren&#8217;t masochistic enough to try and do it in C?  Or perhaps VB6 would be a fun case too :)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1291447">
				<div id="div-comment-1291447" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1291447">
			April 5, 2017 at 7:47 am</a>		</div>

		<p>I&#8217;d like to sse it in F#</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1291465">
				<div id="div-comment-1291465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1291465">
			April 5, 2017 at 8:55 am</a>		</div>

		<p>Why so easy?</p>
<p>I want to see it in bash script, running in an emulator written is javascript in a internet brower, in Linux, under a VM running in Windows 10.</p>
<p>With all the exploit code for each escape.</p>
<p>As a one-liner that compiles to opcodes that maps to pure ASCII.</p>
<p>(I suppose it only shows how much we hold Raymond&#8217;s ability to code in high esteem.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle odd alt depth-2" id="comment-1291485">
				<div id="div-comment-1291485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1291485">
			April 5, 2017 at 9:31 am</a>		</div>

		<p>VB6 sounds too easy.  I&#8217;d rather see it done in FORTRAN77 or COBOL.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-tautvydas-zilys even thread-odd thread-alt depth-1 parent" id="comment-1291486">
				<div id="div-comment-1291486" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Tautvydas+Zilys' rel='external nofollow' class='url'>Tautvydas Zilys</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1291486">
			April 5, 2017 at 9:48 am</a>		</div>

		<p>Now add error handling. WRL one doesn&#8217;t seem that bad afterwards in comparison.</p>
<p>In my experience, while it is indeed easy to use C++/CX to write the code initially, it&#8217;s much harder to handle errors correctly, especially if you don&#8217;t use exceptions anywhere else in your codebase.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1291496">
				<div id="div-comment-1291496" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1291496">
			April 5, 2017 at 10:28 am</a>		</div>

		<p>WinRT is designed so that (for the most part) any exception means that you have a bug and crashing is appropriate. You can then study the crash dump to see what went wrong and fix it.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-tautvydas-zilys even depth-3 parent" id="comment-1291506">
				<div id="div-comment-1291506" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Tautvydas+Zilys' rel='external nofollow' class='url'>Tautvydas Zilys</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1291506">
			April 5, 2017 at 1:52 pm</a>		</div>

		<p>That is provided you can reproduce the issue in-house. Sometimes you can&#8217;t. One of the harder issues with C++/CX to investigate that I can remember was us crashing on Clipboard::GetContent, which we called from our agile Clipboard::ContentChanged handler. That means we called GetContent on a threadpool thread. We called it without any exception handlers, and it seemed to work at first. Then we started receiving random complaints that the application was sometimes crashing. The callstack was something on the CoreWindow thread failing due to unhandled error. That&#8217;s all the information we had &#8211; Windows Store does not let you download and inspect crash dumps, so your suggestion would not have worked.</p>
<p>Apparently, Clipboard::GetContent can return E_ACCESSDENIED if you happen to call it at exact moment a user alt-tabs away from the application. Without exception handlers, that gets turned into a C++/CX exception, which bubbles up to the top of event handler, and at that point it gets turned back into an HRESULT. Handler returns that failed HRESULT, and (I&#8217;m not sure exactly how this part works) the caller seems to send a message to the UI thread that something failed, which aborts the application. And at that point, it&#8217;s really hard to understand what happened, especially if you don&#8217;t have access to a crash dump.</p>
<p>Had it been written using raw C++, it would have probably just ignored the failed HRESULT and returned success from the event handler regardless. We have not seen such hard to investigate bugs in newer code which was written without C++/CX &#8211; perhaps we&#8217;re just lucky &#8211; or perhaps C++/CX errors are indeed much harder to investigate.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4" id="comment-1291575">
				<div id="div-comment-1291575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1291575">
			April 6, 2017 at 12:07 am</a>		</div>

		<p>The crash dump should have a stowed exception that points back to the background thread, with a stack trace and HRESULT.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1291515">
				<div id="div-comment-1291515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1291515">
			April 5, 2017 at 2:50 pm</a>		</div>

		<p>I don&#8217;t claim to know anything about WRL but I think you want IUISettings3 and not IUISettings?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1291555">
				<div id="div-comment-1291555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1291555">
			April 5, 2017 at 9:22 pm</a>		</div>

		<p>Since the plot to get people to abandon the desktop has failed miserably, is there any chance the API for &#8220;classic&#8221; apps could be made simpler in the future?</p>
<p>(rhetorical question of course)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1291585">
				<div id="div-comment-1291585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1291585">
			April 6, 2017 at 3:50 am</a>		</div>

		<p>What&#8217;s that supposed to mean ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt depth-2" id="comment-1291595">
				<div id="div-comment-1291595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1291595">
			April 6, 2017 at 6:08 am</a>		</div>

		<p>In the current implementation GetColorValue calls a undocumented function in a normal desktop .DLL to get the color.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1291665">
				<div id="div-comment-1291665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MarcK4096</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1291665">
			April 7, 2017 at 6:45 am</a>		</div>

		<p>There&#8217;s an easy way to do it in C#.  I&#8217;m happy.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt thread-even depth-1 parent" id="comment-1291565">
				<div id="div-comment-1291565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1291565">
			April 5, 2017 at 9:26 pm</a>		</div>

		<p>I was kinda hoping to do that in PowerShell.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1293075">
				<div id="div-comment-1293075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John ( other John )</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1293075">
			April 19, 2017 at 3:39 am</a>		</div>

		<p>Not a extension so users can call cmd.exe?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1291605">
				<div id="div-comment-1291605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Elliott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1291605">
			April 6, 2017 at 9:15 am</a>		</div>

		<p>I can see we&#8217;ve really moved on from the days of GetSysColor(COLOR_ACTIVECAPTION);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1291655">
				<div id="div-comment-1291655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1291655">
			April 7, 2017 at 2:52 am</a>		</div>

		<p>It&#8217;s getting annoying that interesting stuff like this is hard to access from desktop applications because WinRT (or whatever it is called now) is the &#8220;main&#8221; Windows API nowadays.<br />
My bet is that in 5 years from now, WinRT will be old, deprecated, replaced by something &#8220;better&#8221;, while good old desktop will still be around.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1291975">
				<div id="div-comment-1291975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://geelaw.blog/' rel='external nofollow' class='url'>GL</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1291975">
			April 11, 2017 at 8:54 am</a>		</div>

		<p>WinRT is just another layer of COM. If COM was never popular for you in desktop apps, perhaps neither WinRT will be. I am surprised that it sounds, from Raymond&#8217;s blog, that many, if not most, developers are still using raw Win32 API.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1292327">
				<div id="div-comment-1292327" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lawrence</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1292327">
			April 13, 2017 at 3:51 am</a>		</div>

		<p>Indeed, I would say the vast majority of developers for Windows are targeting Win32. Personally I don&#8217;t know anyone who develops for WinRT but I&#8217;m sure there are some out there.</p>
<p>Win32 is still my preferred option too, for many reasons: 1) it doesn&#8217;t lock anyone out &#8211; remember there is a big userbase on Windows 7.  2) it&#8217;s mature, efficient, and proven.  3) &#8220;multiplatform&#8221; libraries often target plain win32 for their Windows implementations, and 4) as the person you&#8217;re replying to indicated &#8211; Microsoft have burned developers too many times by introducing new development paradigms that it then just abandons. Remember XNA? it launched about the same time as Vista, and was being discontinued by Windows 8. Lack of continuity like that is why most devs won&#8217;t blindly follow Microsoft&#8217;s current flavour of the month.</p>
<p>I just wish MS had continued to invest that effort in improving Win32&#8217;s API instead of continually reinventing the wheel and fragmenting the developer base over and over. As has already been mentioned above &#8211; there is a perfectly good GetSysColor() function, but instead of simply updating that API to support &#8216;accent color&#8217;, they have chosen to expose an entirely different interface, with multiple layers of hoops and error checking to be performed. Looking at how much effort is involved to retrieve such a basic parameter, I can see why some devs resort to the &#8220;hmm.. is there just like&#8230; a registry setting I can read to get that?&#8221;.</p>
<p>In this case it would literally be less code to instantiate a visual element that used the user&#8217;s accent color, read the color value directly from the screen, and kill the element, than just to ask Windows what the color is&#8230;..</p>
<p>/rant over.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1293085">
				<div id="div-comment-1293085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John ( other John )</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170405-00/?p=95905#comment-1293085">
			April 19, 2017 at 3:45 am</a>		</div>

		<p>I will probably never fully explain it, but I fell for COM.</p>
<p>I&#8217;m perennially pleased COM lives on, courtesy Don B and Azure&#8230;</p>
<p>Mkay, real reason I fell for COM: The moment I read NT came with Windows Transaction Server I got a look at the real world I wanted to understand. On a budget I could, and don&#8217;t junior status, had to afford myself. At least initially.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

