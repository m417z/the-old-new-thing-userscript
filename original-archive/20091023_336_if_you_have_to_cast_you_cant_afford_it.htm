<html>
<head>
<title>If you have to cast, you can't afford it</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If you have to cast, you can&#8217;t afford it</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 23, 2009 / year-entry #337</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>41</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer reported a crash inside a function we'll call XyzConnect: DWORD XyzConnect( __in DWORD ConnectionType, __in PCWSTR Server, __in PCWSTR Target, __out void **Handle); ... // HACK - Create a dummy structure to pass to the XyzConnect // function to avoid AV within the function. int dummy = 0; if ( NO_ERROR != (...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer reported a crash inside a function we'll call
<code>XyzConnect</code>:
</p>
<pre>
DWORD XyzConnect(
    __in DWORD ConnectionType,
    __in PCWSTR Server,
    __in PCWSTR Target,
    __out void **Handle);
...
// HACK - Create a dummy structure to pass to the XyzConnect
// function to avoid AV within the function.
int dummy = 0;    
if ( NO_ERROR != ( XyzConnect( 0, L"", L"", (PVOID*)&amp;dummy ) )
{
    TRACE( L"XyzConnect failed." );
    return FALSE;
}
...
</pre>
<p>
The title of today's entry gives the answer away.
(The title is also an exaggeration, but it's a pun on
the saying
<a HREF="http://www.phrases.org.uk/bulletin_board/53/messages/626.html">
<i>If you have to ask, you can't afford it</i></a>.)
</p>
<p>
The last parameter to the <code>XyzConnect</code> function is
declared as a <code>void**</code>: A pointer to a generic pointer.
Note that it is not itself a generic pointer, however.
A generic pointer can point to anything, possibly unaligned.
But this is an aligned pointer to a generic pointer.
Therefore, the memory for the generic pointer must be aligned
in a manner appropriate to its type.
</p>
<p>
But this caller didn't pass a pointer to a pointer;
the caller passed a pointer to an <code>int</code>,
and an <code>int</code> has different alignment requirements
from a pointer on 64-bit systems.
(You might conclude that this decision was the stupidest decision
on the face of the planet, but that's a different argument for
a different time. For example, I can think of decisions far stupider.)
</p>
<p>
When the <code>XyzConnect</code> function tries to dereference this
purported <code>void **</code> pointer,
it encounters an alignment fault, because it does not in fact
point to a <code>void *</code> as the type claims,
but rather points to a <code>DWORD</code>.
A <code>DWORD</code> requires only 32-bit alignment,
so you have a 50% chance that the <code>DWORD*</code>
is not suitably aligned to be a <code>void*</code>.
</p>
<p>
Mind you, you also have a 100% chance of a buffer overflow,
because a <code>DWORD</code> is only four bytes,
whereas a <code>void*</code> is eight bytes.
The function is going to write eight bytes
into your four-byte buffer.
</p>
<p>
When this question was posed, one person suggested changing
the <code>DWORD</code> to a <code>__int64</code>,
since the <code>__int64</code> is an 8-byte value, which is
big enough to hold a pointer on both 32-bit and 64-bit Windows.
Then again, it's overkill on 32-bit systems, since you allocated
eight bytes when you only needed four.
Another suggestion was to use <code>DWORD_PTR</code>,
since that type changes in size to match
the size of a <code>void*</code>.
</p>
<p>
Well, yeah, but here's another type that matches the size
of a <code>void*</code>: It's called <code>void*</code>.
</p>
<p>
Just declare <code>void *dummy</code> and get rid of the cast.
And get rid of the comment while you're at it.
If you do it right, you don't need the cast or the hack.
</p>
<pre>
void *handle = 0;    
if ( NO_ERROR != ( XyzConnect( 0, L"", L"", &amp;handle ) )
{
    TRACE( L"XyzConnect failed." );
    return FALSE;
}
</pre>
<p>
A large number of porting problems can be traced to incorrect casts.
The original author probably
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/01/15/58973.aspx">
inserted the cast to "shut up the compiler"</a>
but the compiler was trying to tell you something.
</p>
<p>
Any time you see a function cast or see a cast to/from something
other than <code>void*</code> or <code>BYTE*</code>,
then you should be suspicious,
because there's a chance somebody is simply trying to shut up
the compiler.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (41)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-780123">
				<div id="div-comment-780123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780123">
			October 23, 2009 at 7:07 am</a>		</div>

		<p>&quot;an int has different alignment requirements from a pointer on 64-bit systems. (You might conclude that this decision was the stupidest decision on the face of the planet&quot;</p>
<p>Why might someone conclude that?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-780133">
				<div id="div-comment-780133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780133">
			October 23, 2009 at 7:16 am</a>		</div>

		<p>A cast is supposed to mean &quot;Yes, I know that&#8217;s my foot, but I&#8217;m aiming very carefully between my toes&quot;. &nbsp;Unfortunately, most of the programmers who think they know what they&#8217;re doing, don&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-780143">
				<div id="div-comment-780143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">someone else</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780143">
			October 23, 2009 at 7:50 am</a>		</div>

		<p>From what I heard, “attacking Iraq” is currently the worst decision of the 21st century, closely following “shooting Archduke Franz Ferdinand” as stupidest decision ever.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-780163">
				<div id="div-comment-780163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780163">
			October 23, 2009 at 8:29 am</a>		</div>

		<p>Not that I would recommend this over a void*, but &#8216;intptr_t&#8217; can be a good weapon to have in your arsenal too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-780183">
				<div id="div-comment-780183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sohail</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780183">
			October 23, 2009 at 8:38 am</a>		</div>

		<p>Ah, so this is why Java was invented.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-780193">
				<div id="div-comment-780193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780193">
			October 23, 2009 at 8:39 am</a>		</div>

		<p>The compiler is telling you: &quot;Give Me What I Want and I will Go Away&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-780213">
				<div id="div-comment-780213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780213">
			October 23, 2009 at 8:44 am</a>		</div>

		<p>Some people are willing to go to great lengths to shoot themselves in the foot.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-780223">
				<div id="div-comment-780223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780223">
			October 23, 2009 at 9:20 am</a>		</div>

		<p>This leaks the handle, too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-780253">
				<div id="div-comment-780253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780253">
			October 23, 2009 at 10:33 am</a>		</div>

		<p>Amen to that, especially with function casts which can hide mistakes about calling conventions (that may only cause intermittent crashes on some architectures and thus be very hard to track down but very much a problem).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-780263">
				<div id="div-comment-780263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780263">
			October 23, 2009 at 11:19 am</a>		</div>

		<p>Maurits: the documentation for XyzConnect specifies that no handle is created for a NULL connection type.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-780283">
				<div id="div-comment-780283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780283">
			October 23, 2009 at 12:44 pm</a>		</div>

		<p>Leave it to Old New Thing readers to complain about a leak in callers of made-up APIs concocted to illustrate a point. &nbsp;Be sure to file a bug on the XyzConnect() team. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-780293">
				<div id="div-comment-780293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/matthew_van_eerde/' rel='external nofollow' class='url'>Maurits</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780293">
			October 23, 2009 at 1:05 pm</a>		</div>

		<blockquote><p>
  no handle is created for a NULL connection type
</p></blockquote>
<p>In that case it should allow passing NULL for the output variable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-780303">
				<div id="div-comment-780303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://peeterjoot.wordpress.com/' rel='external nofollow' class='url'>Peeter Joot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780303">
			October 23, 2009 at 1:17 pm</a>		</div>

		<p>When we did our 64-bit port, the first addition to our coding standards was:</p>
<p>64-bit rules:</p>
<p>AVOID CASTING AT ANY COST.</p>
<p>AVOID CASTING AT ANY COST.</p>
<p>AVOID CASTING AT ANY COST.</p>
<p>Oh, did I also mention:</p>
<p>AVOID CASTING AT ANY COST.</p>
<p>AVOID CASTING AT ANY COST.</p>
<p>AVOID CASTING AT ANY COST.</p>
<p>&#8230; I can&#8217;t count the number of times I saw this in the port (compile time and run time varients of this). &nbsp;It was a lesson that should have already been learned, since our product was old enough that it had already been through a 16-bit to 32-bit port;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-780313">
				<div id="div-comment-780313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780313">
			October 23, 2009 at 1:54 pm</a>		</div>

		<p>Peeter: You can&#8217;t realistically avoid all casting. &nbsp;I think a better target would be to avoid casting between non-pointer and pointer types (i.e. int to/from void*); this would probably catch 99% of the issues. &nbsp;We have so much code that assumes a pointer is 4 bytes; it is going to be a pain if/when we try to build a 64-bit port.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-780323">
				<div id="div-comment-780323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780323">
			October 23, 2009 at 2:26 pm</a>		</div>

		<p>re: Peeter Joot</p>
<p>Yes, I agree. I operate under &quot;every cast indicates an error of design&quot;.</p>
<p>I know it&#8217;s not literally true all the time, especially in C++, and especially when you&#8217;re writing low-level code, but nevertheless I find it a useful starting position.</p>
<p>At least in C++ you get to say why you&#8217;re casting (C-style casts are forbidden in C++ code submitted to me review).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-780333">
				<div id="div-comment-780333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave O</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780333">
			October 23, 2009 at 2:41 pm</a>		</div>

		<p>To say &#8216;there&#8217;s no such thing as a good cast&#8217; is all very well, but it&#8217;s a very simplistic view.</p>
<p>If you&#8217;re casting to shut up <em>errors</em>, then it&#8217;s clearly bad form, but the quantity of casting I have to do to shut up <em>warnings</em> does disturb me a bit.</p>
<p>I mean, clearly (to a human) there&#8217;s nothing wrong with:</p>
<p>uint32 a = 0xff837245;</p>
<p>uint16 b = a &amp; 0xffff;</p>
<p>(where uint32 == a 32-bit unsigned integer, etc.)</p>
<p>but sadly the compiler warns on this case. What do I do? I feel uncomfortable inserting a cast, both for the reasons given above and the fear that in the future I might change the behaviour to something that&#8217;s actually wrong, but the cast would shut up the error.</p>
<p>But I either have to cast or disable the warning &#8211; nightmare.</p>
<p>Sure, I&#8217;m mostly a fairly low-level coder :)</p>
<p>Andrew Koenig&#8217;s point about the &#8216;danger&#8217; of warnings really resonated with me when I read it, and it&#8217;s worth a look: <a rel="nofollow" target="_new" href="http://www.ddj.com/blog/cppblog/archives/2007/10/the_hazards_of.html" rel="nofollow">http://www.ddj.com/blog/cppblog/archives/2007/10/the_hazards_of.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-780203">
				<div id="div-comment-780203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780203">
			October 23, 2009 at 8:43 am</a>		</div>

		<p>&#8220;Any time you see a function cast or see a cast to/from something other than void* or BYTE*, then you should be suspicious, because there&#8217;s a chance somebody is simply trying to shut up the compiler.&#8221;</p>
<p>Even with casts to void*, sometimes you have to be careful too.</p>
<p><a href="http://blogs.msdn.com/sdl/archive/2009/07/28/atl-ms09-035-and-the-sdl.aspx" target=_new rel=nofollow rel="nofollow">http://blogs.msdn.com/sdl/archive/2009/07/28/atl-ms09-035-and-the-sdl.aspx</a></p>
<div class=post>[<i>True, but the false positive rate for void* casts is too high to make a blanket rule out of it. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-780343">
				<div id="div-comment-780343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GrumpyYoungMan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780343">
			October 23, 2009 at 5:29 pm</a>		</div>

		<p>@Dave O</p>
<p>If a development organization is so inflexible that there isn&#8217;t a way for a code review panel to determine it would be okay to turn off a warning for a section of code where it&#8217;s needed, then obviously it&#8217;s the organization that&#8217;s defective, not the compiler warning.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-780353">
				<div id="div-comment-780353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780353">
			October 23, 2009 at 6:36 pm</a>		</div>

		<p>Someone Else, I won&#8217;t comment on recent history since that would just invite people to draw unwarranted conclusions about my political views, but I can say that the assassination can&#8217;t possibly be classified as the worst decision ever.</p>
<p>Princip knew what he was doing, he knew the likely consequence of what he was doing, and never regretted a thing. He wanted to rid the world of Franz Ferdinand whatever the cost and he succeeded. He made the right decision.</p>
<p>Of course, most of Europe was pretty unhappy with the result, and in letting the situation come about errors were certainly made.</p>
<p>This is a tech blog so I won&#8217;t spend too much time on where to hunt for those mistakes, but here are some places where you can get started on your trail, should you be so interested: Franz Ferdinand himself, widespread nationalism, Franz Conrad von H&#246;tzendorf, and of course the various politicians who helped shape the military and socio-economic environment that in amplifying small incidents like the assassination made war as good as inevitable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-780363">
				<div id="div-comment-780363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://peeterjoot.wordpress.com/' rel='external nofollow' class='url'>Peeter Joot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780363">
			October 23, 2009 at 9:43 pm</a>		</div>

		<blockquote><p>
  You can&#8217;t realistically avoid all casting.
</p></blockquote>
<p>Okay, I admit it. &nbsp;You caught me being overly dramatic;) &nbsp;I&#8217;m actually a realist, and for all the thousands of problematic casts that were fixed in our port (DB2 UDB &#8230; a large product) there are probably 10&#8217;s of thousands more that weren&#8217;t.</p>
<blockquote><p>
  &nbsp; I think a better target would be to avoid casting between non-pointer and pointer types (i.e. int to/from void*)
</p></blockquote>
<p>When/if you try a 64-bit port you&#8217;ll actually find that the compiler doesn&#8217;t allow this without first using an intptr_t cast or something else similar in between, so many of your casts will be flagged as wrong for you. &nbsp;There are also helpful compiler options on many platforms to help identify 64-bit porting issues.</p>
<p>A bigger problem for us wasn&#8217;t actually the fact that we had many places that used 4-byte values for pointer sized things, but that we had many places where long was used for 4-byte values. &nbsp;Our porting to 64-bit was all initially on Unix where long increases size (unlike Windows where they kept long as 32-bit). &nbsp;The pervasive long usage in our code ironically dated back to our 16-bit to 32-bit historical roots where &quot;for 32-bit portability&quot; direct use of &#8216;int&#8217; was not supposed to be used, and nobody had the forsight at the time to use a typedefs for explicit 32-bit values;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-780373">
				<div id="div-comment-780373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780373">
			October 23, 2009 at 10:47 pm</a>		</div>

		<p>That reminds me of a list I saw linked from here that was describing horrible APIs, and one was where correct usage was difficult. Like all the socket APIs requiring you to cast sockaddr_in/sockaddr_in6 to sockaddr (and neverming sockaddr_storage).</p>
<p>Thankfully IPv6 introduced an API that fixes this (getaddrinfo and friends) and that is compatible with other protocols as well, yes, IPv4. But it gets you a sockaddr.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-780393">
				<div id="div-comment-780393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jheriko-rtw.blogspot.com' rel='external nofollow' class='url'>Semi Essessi</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780393">
			October 24, 2009 at 2:32 am</a>		</div>

		<p>I often find myself casting ints to floats or similar to get different behaviour than the automatic type conversions give. The most obvious example is wanting the ratio of two values which must be integral e.g. pixel width/height of a window, for the aspect ratio.</p>
<p>There are some more other uses of cast I would consider valid too. Lets say you have some &quot;bytes&quot; you want to execute from memory: reinterpret_cast&lt;void(__stdcall *)()&gt;(bytes)(); The only alternative I can think of is some inline assembler.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-780403">
				<div id="div-comment-780403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.viva64.com/' rel='external nofollow' class='url'>Andrey Karpov</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780403">
			October 24, 2009 at 3:29 am</a>		</div>

		<p>PVS-Studio (Viva64) diagnose this problem as: &quot;Error V114: Dangerous explicit type pointer conversion. simple.cpp 15&quot;</p>
<p>Viva64 tool provides detection of errors typical of 64-bit Windows applications. Viva64 is a lint-like static analyzer of C/C++ code. Viva64 integrates into Visual Studio 2005/2008 environment.</p>
<p>Link: <a rel="nofollow" target="_new" href="http://www.viva64.com/pvs-studio/" rel="nofollow">http://www.viva64.com/pvs-studio/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-780413">
				<div id="div-comment-780413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Csaboka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780413">
			October 24, 2009 at 5:26 am</a>		</div>

		<p>Semi: I don&#8217;t think anyone considers numeric casts as dangerous. The worst they can do is chopping off some bits or lose precision, but they will never crash your app.</p>
<p>Actually, speaking in C++ terms, static_cast and dynamic_cast should be harmless casts. Reinterpret_cast and const_cast, on the other hand, should be used very, very carefully. (The example in the original post would have required a reinterpret_cast if done with C++-style casts. The complier would have rejected a static_cast here since void* and int aren&#8217;t related types.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-780433">
				<div id="div-comment-780433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780433">
			October 24, 2009 at 11:30 am</a>		</div>

		<p>@Csaboka</p>
<blockquote><p>
  I don&#8217;t think anyone considers numeric casts as dangerous. The worst they can do is chopping off some bits or lose precision, but they will never crash your app.
</p></blockquote>
<p>I thought so, too. Until I discovered this C program (try on a 32 bit system):</p>
<p>int main(void)</p>
<p>{</p>
<pre><code>volatile unsigned int a = 1 &amp;lt;&amp;lt; 8*sizeof(int)-1;

volatile int b = -1;

return (int) a / b;
</code></pre>
<p>}</p>
<p>The int cast causes the program to crash.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-780443">
				<div id="div-comment-780443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave O</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780443">
			October 24, 2009 at 1:36 pm</a>		</div>

		<p>@GrumpyYoungMan</p>
<blockquote><p>
  If a development organization is so inflexible that there isn&#8217;t a way for a code review panel to determine it would be okay to turn off a warning for a section of code where it&#8217;s needed, then obviously it&#8217;s the organization that&#8217;s defective, not the compiler warning.
</p></blockquote>
<p>Agreed, but in the case in question, the only organisation is me :) . The problem isn&#8217;t that I&#8217;m not <em>allowed</em> to turn the warning off, it&#8217;s that &#8211; at least in the particular case I descibe &#8211; I don&#8217;t <em>want</em> to turn the warning off, because it&#8217;s a &#8216;false positive&#8217;; the non-false-positive case might tell me something useful; and disabling / enabling such warnings on a line-by-line case is unspeakably horrible.</p>
<p>Sure, I want the moon on a stick, too :) .</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-780453">
				<div id="div-comment-780453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave O</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780453">
			October 24, 2009 at 1:52 pm</a>		</div>

		<blockquote><p>
  I don&#8217;t think anyone considers numeric casts as dangerous. The worst they can do is chopping off some bits or lose precision, but they will never crash your app.
</p></blockquote>
<p>As above &#8211; for example, few people seem to be aware that the integer divide -MAX_INT / -1 will cause an unhandled Integer Overflow exception on x86, and that C / C++ code doesn&#8217;t do anything to insulate you from this.</p>
<p>( &nbsp; volatile int x = (int)0x80000000;</p>
<p>&nbsp; &nbsp;volatile int y = -1;</p>
<p>&nbsp; &nbsp;volatile int z = x / y;</p>
<p>if you want to give it a try).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-780463">
				<div id="div-comment-780463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Csaboka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780463">
			October 24, 2009 at 3:07 pm</a>		</div>

		<p>rs, Dave O:</p>
<p>Granted, this is a failure mode I didn&#8217;t know about, but it has nothing to do with casting. I can reproduce the same issue without casting. Observe:</p>
<p>int main() {</p>
<pre><code>volatile int x = -INT_MAX;

x--;

volatile int y = -1;

x /= y;

return 0;
</code></pre>
<p>}</p>
<p>I still maintain that static_cast and dynamic_cast shouldn&#8217;t cause crashes. Incorrect use of the returned values can cause crashes, of course, but that isn&#8217;t a problem with the cast per se.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-780423">
				<div id="div-comment-780423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Not an expert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780423">
			October 24, 2009 at 9:19 am</a>		</div>

		<p>I have cast a pointer offset into a character buffer holding raw file header bytes to extract a value.</p>
<p>unsigned long byteRate = *(unsigned __int32*)(buffer+28);</p>
<p>It seems to work but perhaps someone more knowledgeable than I will explain the flaws with this approach, excepting of course that I should have used a C++ style cast.</p>
<div class=post>[<i>This falls under the &#8220;cast from void* or BYTE*&#8221; umbrella (BYTE* is unsigned char*). Though you&#8217;re in trouble if &#8220;buffer&#8221; is not on a 4-byte boundary. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-780473">
				<div id="div-comment-780473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://me@home.now' rel='external nofollow' class='url'>lh</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780473">
			October 24, 2009 at 4:47 pm</a>		</div>

		<p>I would hear the same things when using things like boundchecker or lint.</p>
<p>I would also then almost immediately hear from the other devs with &#8216;years of experience&#8217; &#8216;Its too noisy and most of those errors are meaningless.&#8217;</p>
<p>I would always say &#8216;prove it, then you can cast the errors away&#8217;. &nbsp;Almost every single time it was a &#8216;oh yeah could be very bad&#8217;. &nbsp;I would say 99.9% of the time those warnings are good to look at.</p>
<p>In my &#8216;years of experience&#8217; ignore those warnings and errors at your own peril.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-780503">
				<div id="div-comment-780503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">someone else</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780503">
			October 25, 2009 at 11:30 am</a>		</div>

		<p>@Anonymous Coward</p>
<p>“Princip knew what he was doing, he knew the likely consequence of what he was doing, and never regretted a thing.”</p>
<p>As did Charles Manson.</p>
<p>I am well aware that the assassination was merely the spark that ignited a politically unstable situation. It&#8217;s also well known enough so I wouldn&#8217;t have to explain.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-780513">
				<div id="div-comment-780513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lucas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780513">
			October 25, 2009 at 12:41 pm</a>		</div>

		<p>I currently have an image processing framework being used by students. In it, I perform a reinterpret_cast on Qt&#8217;s QImage raw pixel data (and I&#8217;ve told the QImage to translate itself to 4-bytes per pixel before doing this) in order to typecast it to a Pixel object, which contains four bytes which have been #pragma pack&#8217;d. Red, green and blue channels are used for arbitrary &#8216;color data&#8217;, and the alpha channel is used to determine what sort of data is stored in the other three channels, whether that is r/g/b, y/i/q, h/s/i, or whatever.</p>
<p>This way, code can operate directly on intensity values in an image (modifying the &#8216;y&#8217; byte, with a couple of optional wrapper methods like SetIntensity() to check to see if the pixel is in yiq mode) without needing to allocate additional memory.</p>
<p>It&#8217;s more of an odd design decision than a &#8216;shut up the compiler&#8217; sort of quick-hack. However, I&#8217;m not entirely convinced it&#8217;s the right way to approach this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-780523">
				<div id="div-comment-780523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">yme</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780523">
			October 25, 2009 at 4:42 pm</a>		</div>

		<p>Dave O said: &quot;disabling / enabling such warnings on a line-by-line case is unspeakably horrible&quot;</p>
<p>Why?</p>
<p>I mean, the alternative is casting, and that&#8217;s also done line by line.</p>
<p>The best option does seem to me to be disabling the warning for a particular section of code after convincing yourself that the code in question is truly ok. &nbsp;The warning served its purpose &#8212; to get you to look carefully at the code &#8212; and now you don&#8217;t need it anymore.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-780533">
				<div id="div-comment-780533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780533">
			October 26, 2009 at 4:05 am</a>		</div>

		<p>The problem is that some functions somehow require you to cast, such as send() and recv(). For some reason, they demand a char* instead of a void* (this might or might not have been the case in the original BSD specification, but it&#8217;s definitely not the case in POSIX).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-780733">
				<div id="div-comment-780733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780733">
			October 27, 2009 at 3:54 am</a>		</div>

		<p>@yme:</p>
<p>pragmas to disable warnings are compiler-dependent which make the code hard to read for people who aren&#8217;t used to this compiler, and look like noise.</p>
<p>Explicit type casts are another way to disable warnings and are ugly too.</p>
<p>Just avoid needing typecasts. This makes the code prettier and more portable. That&#8217;s not too hard, except when dealing with badly-designed third party libraries.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-780723">
				<div id="div-comment-780723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">avek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780723">
			October 27, 2009 at 3:04 am</a>		</div>

		<p>@yme:</p>
<p>&gt; Dave O said: &quot;disabling / enabling such warnings on a line-by-line case is unspeakably horrible&quot;</p>
<p>&gt; Why?</p>
<p>Because disabling and reenabling of warnings require many lines each. To put all those push/pop or on/off pragmas there. And guard them by #ifdef _MSC_VER. Casting is much more compact and doesn&#8217;t have any side-effects-up-to-the-end-of-file by design.</p>
<p>If the code in question is not yours, the best possible option to deal with warnings there is simple: you should ignore them.</p>
<p>One only should fix something in imported code if it has been tested and the tests show that something&#8217;s wrong there. (I speak of tests and problems in the most general sense: if it doesn&#8217;t compile or link, it qualifies as test failure, too). Otherwise, it works; if it works, don&#8217;t touch it. That&#8217;s the foundation of modularity and code reuse in real life.</p>
<p>If the code with warnings is yours, however, the right solution is to rewrite it so it compiles without warnings. Cast can be used in the process, as the last resort. And every use of casts must be marked by a comment explaining the cast, of course.</p>
<p>@Medinoc:</p>
<p>&gt;The problem is that some functions somehow require you to cast, such as send() and recv().</p>
<p>&gt; For some reason, they demand a char* instead of a void*</p>
<p>The only thing that you can actually transmit over the net is a sequence of bytes. And if you try to send or receive something else, like a C structure or, even worse, a C++ object, that doesn&#8217;t have to work in practice, because structure fields size, alignment, byte order, internal compiler-generated fields, etc. are never fully under your control in C. The proper way to send data is to platform-independently serialize it into char[] buffer, then send the buffer.</p>
<p>So, if you use anything but char[] as buffer argument for send/recv, it&#8217;s actually a hack. And non-portable. And your code should at least be marked by something that smells; a cast will stink just strong enough.</p>
<p>But there are other APIs, Windows full of them, that require dangerous casts. For instance, COMCTL32 controls often let you read and write some parameters through the same struct. For reading, pointers to strings in there are of LPTSTR type and must point to writeable memory buffers. And when you set that string instead of reading it, you must fit it into the same LPTSTR, even if the string&#8217;s not writeable (and, according to the documentation, needs not be).</p>
<p>Enter the const_cast. And since most of the programmers (that I know of) don&#8217;t know the const_cast keyword, the dreaded (LPCTSTR)pszText comes in its stead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-780893">
				<div id="div-comment-780893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780893">
			October 27, 2009 at 1:12 pm</a>		</div>

		<p>Nobody has mentioned</p>
<p>union</p>
<p>{</p>
<p>&nbsp; &nbsp; void *pvIsWhatItExpects;</p>
<p>&nbsp; &nbsp; DWORD dwIsWhatIWillGiveIt;</p>
<p>} arg;</p>
<p>arg.dwIsWhatIWillGiveIt=0;</p>
<p>XyzConnect(NULL,L&quot;&quot;,L&quot;&quot;,&amp;arg.pvIsWhatItExpects);</p>
<p>No casts or warnings were harmed in the compilation of this code! Your milage may vary by design.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-780993">
				<div id="div-comment-780993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-780993">
			October 28, 2009 at 1:37 am</a>		</div>

		<p>@porter: unfortunately, in the light of the discussion (64 bit issues) that should be:</p>
<p>union</p>
<p>{</p>
<p>&nbsp; &nbsp;void *pvIsWhatItExpects;</p>
<p>&nbsp; DWORD_PTR dwIsWhatIWillGiveIt;</p>
<p>} arg;</p>
<p>Idea is good, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-781083">
				<div id="div-comment-781083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-781083">
			October 28, 2009 at 8:09 am</a>		</div>

		<blockquote><p>
  &gt; @porter: unfortunately, in the light of the discussion&#8230;
</p></blockquote>
<p>I was deliberately leaving the shotgun on the wall in Act 1.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-781663">
				<div id="div-comment-781663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-781663">
			October 29, 2009 at 9:21 am</a>		</div>

		<blockquote><p>
  &gt; @porter: that&#8217;s illegal code, you&#8217;re only allowed to read the union member you last wrote.
</p></blockquote>
<p>So is NET_ADDRESS_INFO from IPHlpApi.h :)</p>
<p>Agreed, however the point was to demonstrate avoiding a cast or compiler error.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-781533">
				<div id="div-comment-781533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091023-00/?p=16283#comment-781533">
			October 29, 2009 at 3:01 am</a>		</div>

		<p>@porter: that&#8217;s illegal code, you&#8217;re only allowed to read the union member you last wrote.</p>
<p>You&#8217;re always going to need a cast somewhere to get QueryInterface to work, but I can&#8217;t help wondering whether a void* result would have made more sense (although it occurs to me that it may have led to confusion when using CComPtr).</p>
<p>void** version:</p>
<p>STDMETHODIMP Foo::QueryInterface(REFIID iid, void** ppv)</p>
<p>{</p>
<p> &nbsp;if (IID_IBar == iid) {</p>
<p> &nbsp; &nbsp;IBar *bar = new Foo2Bar(this);</p>
<p> &nbsp; &nbsp;if (!bar)</p>
<p> &nbsp; &nbsp; &nbsp;return E_FAIL;</p>
<p> &nbsp; &nbsp;bar-&gt;AddRef();</p>
<p> &nbsp; &nbsp;*ppv = bar;</p>
<p> &nbsp; &nbsp;return S_OK;</p>
<p> &nbsp;}</p>
<p> &nbsp;// etc.</p>
<p>}</p>
<p>STDMETHODIMP nsBaz::GetBar(IBar** pbar)</p>
<p>{</p>
<p> &nbsp;void *pv = NULL;</p>
<p> &nbsp;mFoo-&gt;QueryInterface(IID_IBar, &amp;pv);</p>
<p> &nbsp;*pbar = (IBar*)pv;</p>
<p> &nbsp;return S_OK;</p>
<p>}</p>
<p>void* version:</p>
<p>STDMETHODIMP Foo::QueryInterface(REFIID iid, void* pv)</p>
<p>{</p>
<p> &nbsp;if (IID_IBar == iid) {</p>
<p> &nbsp; &nbsp;IBar *bar = new Foo2Bar(this);</p>
<p> &nbsp; &nbsp;if (!bar)</p>
<p> &nbsp; &nbsp; &nbsp;return E_FAIL;</p>
<p> &nbsp; &nbsp;bar-&gt;AddRef();</p>
<p> &nbsp; &nbsp;*(IBar **)pv = bar;</p>
<p> &nbsp; &nbsp;return S_OK;</p>
<p> &nbsp;}</p>
<p> &nbsp;// etc.</p>
<p>}</p>
<p>STDMETHODIMP nsBaz::GetBar(IBar** pbar)</p>
<p>{</p>
<p> &nbsp;return mFoo-&gt;QueryInterface(IID_IBar, pbar);</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

