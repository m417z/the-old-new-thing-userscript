<html>
<head>
<title>If you're handling an out of memory exception, you probably shouldn't allocate memory</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If you&#8217;re handling an out of memory exception, you probably shouldn&#8217;t allocate memory</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 11, 2009 / year-entry #290</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090911-00/?p=16753</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">With the assistance of Application Verifier, specifically, low resource simulation (also known as fault injection), a tester found a stack overflow condition. As we learned earlier, the important thing to look at when studying a stack overflow is the repeating section. Contoso!Error::ThrowError+0x39 Contoso!Str::Set+0x35 Contoso!Win32::OpenModuleName+0x54 Contoso!StackTrace::StackEntry::FindModuleInfo+0x1b Contoso!StackTrace::CreateTrace+0x2c Contoso!StackTrace::StackTrace+0x4f Contoso!Error::Error+0x1f When this stack trace was shown to...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
With the assistance of
<a HREF="http://msdn.microsoft.com/en-us/library/aa480483.aspx">
Application Verifier</a>,
specifically, <i>low resource simulation</i>
(also known as <i>fault injection</i>),
a tester found a stack overflow condition.
As we learned earlier,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2009/01/07/9286576.aspx">
the important thing to look at when
studying a stack overflow is the repeating section</a>.
</p>
<pre>
Contoso!Error::ThrowError+0x39
Contoso!Str::Set+0x35
Contoso!Win32::OpenModuleName+0x54
Contoso!StackTrace::StackEntry::FindModuleInfo+0x1b
Contoso!StackTrace::CreateTrace+0x2c
Contoso!StackTrace::StackTrace+0x4f
Contoso!Error::Error+0x1f
</pre>
<p>
When this stack trace was shown to the development team,
they instantly recognized the cause of the problem.
And you also have enough information to figure it out, too.
</p>
<p>
Hint:
Of the most likely reasons that a method named
<code>Str::Set</code> would throw an error,
which of them match the scenario?
</p>
<p>
Since we are simulating low resources, the error being thrown
is most likely an out of memory error.
</p>
<p>
Reading the stack dump, the constructor for the <code>Error</code>
object builds a stack trace object, and the stack trace object
tries to allocate memory for a string in order to do its job.
But that memory allocation fails, because we are out of memory,
so an <code>Error</code> object is thrown, which builds a stack trace,
which encounters an out of memory error, and so on.
</p>
<p>
Obviously, the mistake was allocating memory as part of
the process of reporting an out of memory condition.
You need to be careful to avoid generating the very error that
caused your error handler to be called.
</p>
<p>
<b>Related topics</b>:
</p>
<ul>
<li>
    <a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/03/17/397468.aspx">
    Your exception handler can encounter an exception</a></p>
<li>
    <a HREF="http://blogs.msdn.com/oldnewthing/archive/2009/06/01/9673254.aspx">
    Why does the CreateProcess function modify its input command line?</a>
</ul>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-768003">
				<div id="div-comment-768003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090911-00/?p=16753#comment-768003">
			September 11, 2009 at 10:24 am</a>		</div>

		<p>What bothers me is that it&#8217;s not the same memory here: The error says we&#8217;re out of stack space, but the allocation in (probably) from the heap&#8230;</p>
<div class=post>[<i>Trying to report the heap failure results in recursive death leading to stack overflow. And since nobody tries to catch stack overflows, that is what ultimately gets reported as the &#8220;cause&#8221; of the crash. But the root cause is the heap exhaustion. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-768083">
				<div id="div-comment-768083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.flickr.com/photos/ajgelado/' rel='external nofollow' class='url'>Antonio Rodr&#237;&#173;guez</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090911-00/?p=16753#comment-768083">
			September 11, 2009 at 4:23 pm</a>		</div>

		<p>I tend to consider memory an &quot;infinite resource with finite use&quot;, in the same way as threads, windows and other similar resources: there certainly is a limit on how much I can use, but if one of my apps is using a lot of it, there is a design problem somewhere. In modern machines, with enough RAM to fit the entire 2 Gb user address space into physical memory, out of memory errors use to happen only if the code is leaking memory or otherwise wasting memory (except for memory intensive applications, of course!).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-768113">
				<div id="div-comment-768113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://ferozedaud.blogspot.com' rel='external nofollow' class='url'>feroze</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090911-00/?p=16753#comment-768113">
			September 11, 2009 at 7:35 pm</a>		</div>

		<p>This is a very good point. That is why the CLR preallocates the OutOfMemoryException object, and can throw it whenever it reaches an OOM situation, even those in which it couldnt allocate a OOMException object, even if it wanted to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-768123">
				<div id="div-comment-768123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://me.me' rel='external nofollow' class='url'>Me</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090911-00/?p=16753#comment-768123">
			September 11, 2009 at 10:39 pm</a>		</div>

		<p>In the old days of C, on out-of-memory error you usually printf-ed a message &quot;out of memory&quot; and exited the application with an error code.</p>
<p>Nowadays it&#8217;s much more complicated &#8212; you throw an exception which from the user&#8217;s point of view does exactly the same thing &#8212; shows the message &quot;out of memory&quot; and exits the application unless of course it encounters an out-of-memory condition.</p>
<p>Such is the way of progress.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-768153">
				<div id="div-comment-768153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt [C++ MVP]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090911-00/?p=16753#comment-768153">
			September 12, 2009 at 12:11 am</a>		</div>

		<p>On Windows (and most other modern OSes, ignoring kernel-mode drivers), &quot;out of memory&quot; almost always means &quot;out of virtual address space for this process&quot;.</p>
<p>Does AppVerifier cause the related but much rarer these days &quot;exhausted virtual memory&quot;? &nbsp;(&quot;out of RAM&quot; doesn&#8217;t seem to be considered a problem, even though it hurts performance terribly, is frequently a sign of a bug, and users typically want to cancel the operation rather than continuing)</p>
<p>The distinction between exhausting virtual address space and virtual memory (i.e. RAM+swapfile+can&#8217;t grow swapfile) is important for a couple reasons. &nbsp;One, virtual memory is a shared resource, the process that suffers the failure is not necessarily the process that consumed an inordinate amount, and the severity of the failure can vary as threads of other processes are scheduled. &nbsp;Virtual address space, on the other hand, is per-process which means you know who used it up as well as having some ability to set some aside for the error handler without risking another application snagging it as soon as it becomes available.</p>
<p>I&#8217;m referring to VirtualAlloc(reserve,2MB) at process startup and (suspend other threads) VirtualFree when the error is trapped, making memory allocation suddenly work long enough for the handler to do its thing.</p>
<p>To do that for virtual memory exhaustion, you&#8217;d have to actually commit the holdout memory, using a much scarcer resource, and then use it in-place. &nbsp;Trying to hand that block over to your normal allocator creates a race condition with all other processes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-768163">
				<div id="div-comment-768163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090911-00/?p=16753#comment-768163">
			September 12, 2009 at 5:44 am</a>		</div>

		<p>The same thing just happened to me. A logger failed to initialize, and behold, the failure has Log(&quot;bla bla failed&quot;). A stack overflow ensued.</p>
<p>I need to fix this logger. And the failure to begin with.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-768203">
				<div id="div-comment-768203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TDL</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090911-00/?p=16753#comment-768203">
			September 12, 2009 at 11:49 am</a>		</div>

		<p>Ah. &nbsp;This one goes on the same list as not trying to log database connectivity exceptions to the database. Tried that &#8212; it doesn&#8217;t work! :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-768213">
				<div id="div-comment-768213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://me.me' rel='external nofollow' class='url'>Me</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090911-00/?p=16753#comment-768213">
			September 12, 2009 at 12:45 pm</a>		</div>

		<p>@Ben Voigt:</p>
<p>There was a bug in <font color=red>Program&nbsp;X</font> long time ago (in the era of Windows 98) &#8212; it leaked memory so hard and fast (say between 50 and 100 MB/sec) that if you had an unlimited (system managed) swap file it always brought down the whole system in the most horrible way.</p>
<p>I worked around that bug by setting the upper limit for the swap file which made only the program crash, instead of taking the system down with it. Since then I always use fixed swap file size.</p>
<p>As for virtual address space exhaustion that is way too easy to accomplish if you need a lot of memory, especially now with address space randomization when DLLs are loaded. When you allocate and free memory, virtual address space becomes heavily fragmented and the largest allocation size keeps shrinking until you can&#8217;t allocate enough for the next block. Ah, joys of Windows programming&#8230;</p>
<div class=post>[<i>Not just Windows programming. Programming in general. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-768223">
				<div id="div-comment-768223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090911-00/?p=16753#comment-768223">
			September 12, 2009 at 6:55 pm</a>		</div>

		<p>Amen to that Raymond. If I had a Euro for every time my Linux box killed of something essential because of an out of memory condition, like the X server, the window manager or the shell, I would buy myself a pretty nice laptop and still have plenty change.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-768293">
				<div id="div-comment-768293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090911-00/?p=16753#comment-768293">
			September 14, 2009 at 7:52 am</a>		</div>

		<p>&quot;</p>
<p>Amen to that Raymond. If I had a Euro for every time my Linux box killed of something essential because of an out of memory condition, like the X server, the window manager or the shell, I would buy myself a pretty nice laptop and still have plenty change.</p>
<p>&quot;</p>
<p>Just disable overcommitting:</p>
<p>echo 2 &gt; /proc/sys/vm/overcommit_memory</p>
<p>echo 100 &gt; /proc/sys/vm/overcommit_ratio</p>
<p>Processes may still die if they try to allocate memory but don&#8217;t gracefully handle failed allocations (e.g. stupid GNOME programs using g_new).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-768323">
				<div id="div-comment-768323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Greg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090911-00/?p=16753#comment-768323">
			September 14, 2009 at 9:40 am</a>		</div>

		<p>What I don&#8217;t understand is that in C++ this shouldn&#8217;t ever happen. If construction of the object you are trying to throw also throws an exception, std::terminate gets called which kills the process. Thus you would have a maximum of 2 failed memory allocations before crashing, not the recursive death spiral.</p>
<p>It certainly looks like C++, but what language is it?</p>
<div class=post>[<i>If you look carefully you&#8217;ll see that the recursive death is in preparing to throw. I&#8217;ll leave reconstructing the code as an exercise. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-768423">
				<div id="div-comment-768423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://larrywatanabe.blogspot.com' rel='external nofollow' class='url'>Larry Watanabe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090911-00/?p=16753#comment-768423">
			September 14, 2009 at 7:39 pm</a>		</div>

		<p>I remember developing an application back in the early 90&#8217;s that was fairly memory intensive. We would preallocate a buffer so that when an out of memory exception occurred, we could free this buffer, tell the user to save all his stuff and quit. This at least allowed the user to not lose work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-768573">
				<div id="div-comment-768573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jolyon Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090911-00/?p=16753#comment-768573">
			September 15, 2009 at 9:19 pm</a>		</div>

		<p>@feroze: &nbsp;A neat idea that the CLR borrowed from the VCL. &nbsp;;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-768713">
				<div id="div-comment-768713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt [C++ MVP]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090911-00/?p=16753#comment-768713">
			September 16, 2009 at 2:07 pm</a>		</div>

		<p>@The person calling himself &quot;Me&quot;:</p>
<p>I&#8217;m fully aware of the causes of real-world address exhaustion, as well as the advantages of having a runaway program experience an out of memory error without spending hours swapping to/from disk first.</p>
<p>My point was simply that there are two reasons for allocation failure (not counting hardware faults) and wondering which one AppVerifier is simulating.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

