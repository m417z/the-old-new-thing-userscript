<html>
<head>
<title>If my WM_TIMER handler takes longer than the timer period, will my queue fill up with WM_TIMER messages?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If my WM_TIMER handler takes longer than the timer period, will my queue fill up with WM_TIMER messages?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 4, 2014 / year-entry #282</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20141204-00/?p=43473</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer was worried that they may have a problem with their message queue filling with WM_TIMER messages. "If my WM_TIMER handler takes longer than the timer period, will my queue fill up with WM_TIMER messages?" As we should know by now, timer messages are generated on demand: The WM_TIMER message is a low-priority message....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer was worried that they may have a problem with their message queue filling with <code>WM_<wbr>TIMER</wbr></code> messages. "If my <code>WM_<wbr>TIMER</wbr></code> handler takes longer than the timer period, will my queue fill up with <code>WM_<wbr>TIMER</wbr></code> messages?"</p>
<p> As we should know by now, timer messages are generated <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/12/19/10249000.aspx"> on demand</a>: </p>
<blockquote class="q"><p> The <b>WM_<wbr>TIMER</wbr></b> message is a low-priority message. The <b>Get&shy;Message</b> and <b>Peek&shy;Message</b> functions post this message only when  <a href="http://msdn.microsoft.com/library/windows/desktop/ms644902.aspx"> no other higher-priority messages are in the thread's message queue</a>. </p>
</blockquote>
<p> Here's the basic algorithm. (I'm ignoring filtering and I'm assuming that messages are removed.) </p>
<ul>
<li>Look for a posted message. If one exists, then return it. </li>
<li>Was <code>Post&shy;Quit&shy;Message</code> called?     If so, then generate and return a <code>WM_<wbr>QUIT</wbr></code>     message. </li>
<li>Look for an input message. If one exists, then return it. </li>
<li>Did the mouse move since the last call?     If so, then generate and return a <code>WM_<wbr>MOUSE&shy;MOVE</wbr></code>     message. </li>
<li>Does a window need to be repainted?     If so, then generate and return a <code>WM_<wbr>PAINT</wbr></code>     message. </li>
<li>Is there a timer that has elapsed?     If so, then generate and return a <code>WM_<wbr>TIMER</wbr></code>     message. </li>
</ul>
<p> Notice that the generated messages are generated on demand by message retrieval functions. If you never call a message retrieval function, then no messages are generated. And in the case where the messages are removed (<i>i.e.</i>, you use <code>Get&shy;Message</code> or you use <code>Peek&shy;Message</code> with <code>PM_<wbr>REMOVE</wbr></code>), the messages are removed immediately after being generated, so they don't hang around very long at all. </p>
<p> In particular, if your <code>WM_<wbr>TIMER</wbr></code> handler takes longer than the timer period, and it doesn't call a message retrieval function, then there is no opportunity for another <code>WM_<wbr>TIMER</wbr></code> message to be generated. Only when you call a message retrieval function does there become a possibility for a <code>WM_<wbr>TIMER</wbr></code> message to be generated. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1165193">
				<div id="div-comment-1165193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141204-00/?p=43473#comment-1165193">
			December 4, 2014 at 7:54 am</a>		</div>

		<p>What happens to the non-generated messages when the program gets stuck and doesn&#39;t process them?</p>
<p>Windows will ghost the window and display &quot;not responding&quot;, but do the messages keep queueing up, consuming more and more memory, or do they get discarded at some point?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165213">
				<div id="div-comment-1165213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141204-00/?p=43473#comment-1165213">
			December 4, 2014 at 8:44 am</a>		</div>

		<p>@AC: Posted real messages will queue up to the thread&#39;s message queue limit. &nbsp;Once the queue is full, new messages will be rejected (this is almost the same as discard most recent, except that the message source is told about the problem).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165223">
				<div id="div-comment-1165223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Koro</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141204-00/?p=43473#comment-1165223">
			December 4, 2014 at 8:44 am</a>		</div>

		<p>@AC: They queue up, but there is an upper limit on thread message queue size.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1165233">
				<div id="div-comment-1165233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141204-00/?p=43473#comment-1165233">
			December 4, 2014 at 9:00 am</a>		</div>

		<p>This means &quot;elapsed timer&quot; is a flag and not a counter. Good to know.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165243">
				<div id="div-comment-1165243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141204-00/?p=43473#comment-1165243">
			December 4, 2014 at 1:51 pm</a>		</div>

		<p>The last I checked the queue limit was about 10000 &#8212; which really means that is what it was the last time I messed up and put an infinite loop in the UI thread and could see that I had 10000 items that I had posted to the message queue pending before things fell apart.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165253">
				<div id="div-comment-1165253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeffrey Bosboom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141204-00/?p=43473#comment-1165253">
			December 4, 2014 at 4:53 pm</a>		</div>

		<p>In what situations would a timer with shorter period than its handler&#39;s execution time be useful? &nbsp;To me it just sounds like a bug, but maybe Win32 timers are used for things not really related to time (not even soft real-time)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165263">
				<div id="div-comment-1165263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nikolai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141204-00/?p=43473#comment-1165263">
			December 5, 2014 at 12:38 am</a>		</div>

		<p>Hello Raymond,</p>
<p>sorry to post it as a comment, didn&#39;t find an easy method to be &quot;a customer that worried about&quot; :-) but anyway:</p>
<p>Is there a way to initialize WinHttp working pool threads? I&#39;m using async WinHttp with call-back function set by WinHttpSetStatusCallback(). In this call-back I want to use COM, I need to setup _set_se_translator, etc.</p>
<p>Do I need to call CoInitialize()/CoUninitialize() pair every time in the call-back function? Or there is a way to do it once? I didn&#39;t get answer on that question and if it&#39;s interesting for you, may be you can make a post or so with your usual decent explanations&#8230;</p>
<p>Thanks in advance,</p>
<p>Nikolai</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165273">
				<div id="div-comment-1165273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nikolai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141204-00/?p=43473#comment-1165273">
			December 5, 2014 at 12:40 am</a>		</div>

		<p>Jeffrey, I can imagine situation when most of the timer calls handled promptly and only one or two has a delay due to disk or network access or so..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165283">
				<div id="div-comment-1165283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141204-00/?p=43473#comment-1165283">
			December 5, 2014 at 12:54 am</a>		</div>

		<p>I wonder whether the original query was really asking (if perhaps clumsily) what might happen if a timer is being serviced slower than its repeat rate, and the bit about filling up the message queue with WM_TIMER messages was just a red-herring because the questioner assumed this would be the most immediate consequence.</p>
<p>Does the timer itself keep an internal count of how many times the timeout has elapsed but no WM_TIMER message has yet been generated? Is there an upper limit to this and if so what is it? What would happen if this limit were to be exceeded? (Is there a 32-bit integer that wraps round to zero perhaps?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165303">
				<div id="div-comment-1165303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141204-00/?p=43473#comment-1165303">
			December 5, 2014 at 2:40 am</a>		</div>

		<p>@Ian: WM_TIMER just means that (at least) the specified time has elapsed since the timer was set (or previous WM_TIMER was sent for a repeating timer). It doesn&#39;t guarantee anything else. (I don&#39;t think it could, even if it wanted to.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165313">
				<div id="div-comment-1165313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">blackTofu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141204-00/?p=43473#comment-1165313">
			December 5, 2014 at 5:25 am</a>		</div>

		<p>Has it changed &quot;recently&quot;? I still remember Jefrey&#39;s book &quot;Advanced Windows&quot; where he claimed that we check first for &quot;send&quot; messages, then for posted, then for send messages again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165343">
				<div id="div-comment-1165343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141204-00/?p=43473#comment-1165343">
			December 5, 2014 at 9:24 am</a>		</div>

		<p>Jeffrey Bosboom: I&#39;m sure a typical situation is a movie or video game with a set framerate, say 50fps. You need to know when to render the next frame so you set a 20ms timer.</p>
<p>If it turns out that a particular system takes 40ms to render a frame, that&#39;s certainly not a bug &#8212; you just end up dropping frames. You obviously wouldn&#39;t want all those extra timer messages accumulating somewhere.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165363">
				<div id="div-comment-1165363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mirinth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141204-00/?p=43473#comment-1165363">
			December 5, 2014 at 10:09 am</a>		</div>

		<p>@Jeffrey, here&#39;s a specific example of Nikolai&#39;s suggestion:</p>
<p>Imagine you&#39;re building a network of computers to take the hit from DDoS attacks so the main servers can survive an attack. The basic idea for the shield is to check for and handle requests first (since throughput is critical) and heartbeat timers second. The main servers watch for the heartbeat and warn the administrators if it&#39;s too late, assuming that an attack is in progress (or a shield is otherwise dead) since the shield should have sent the beat otherwise.</p>
<p>In the meantime, the shield is doing its best to sort through all the incoming data, filter out the bad stuff and forward the good to the main servers. When the shield is under attack, it always finds something other than the timer messages, so it handles those and ignores the timer to keep throughput high. High throughput is the shield&#39;s job, after all.</p>
<p>But DDoS attacks have a nasty tendency to last longer than you expect, and those timer messages are piling up in the meantime. If you ignore them long enough, could a DDoS actually crash the shield and shut you down anyway? Is this the kind of thing you need to worry about? Should you go to all the effort to design, build and test the extra complexity involved in checking for and throwing out the heartbeats in a flood?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165383">
				<div id="div-comment-1165383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mirinth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141204-00/?p=43473#comment-1165383">
			December 5, 2014 at 2:55 pm</a>		</div>

		<p>Just wanted to say, I like your example, Gabe. I never would have thought you could be late every time and that&#39;s okay.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165623">
				<div id="div-comment-1165623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141204-00/?p=43473#comment-1165623">
			December 9, 2014 at 8:41 am</a>		</div>

		<p>This whole &quot;In what situations would a timer with shorter period than its handler&#39;s execution time be useful? To me it just sounds like a bug&quot; statement is just wrong.</p>
<p>Imagine, you have a program that needs to poll some external resource regularly (for example: an very simple e-mail client polling a database status field every minute). Most of the time, the request (SQL query) will be executed within fractions of a second, but there is no *bug* in your program if the request will take a little longer than 1 minute, due to server-side activities like data reorganization, virus scanning, activities of other VMs at the same host etc etc etc.</p>
<p>The program should just process the results from the requests (fast or slow), and then proceed at the next interval.</p>
<p>In general, the Windows timers gives your GUI thread the opportunity to execute work (at regular intervals) when and only when this GUI thread is idle. If you need otherwise (for example, operation in a background, without any GUI), use Waitable Timers (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms687012%28v=vs.85%29.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms687012%28v=vs.85%29.aspx</a>).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

