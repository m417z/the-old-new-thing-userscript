<html>
<head>
<title>Why can't the debugger call GetFinalPathNameByHandle via .call?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why can&#8217;t the debugger call GetFinalPathNameByHandle via .call?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 7, 2016 / year-entry #74</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160407-00/?p=93273</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Because it doesn't know how.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
There were a number of follow-up questions to my demonstration of
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/10/16/10648184.aspx">
calling the
<code>Get&shy;Final&shy;Path&shy;Name&shy;By&shy;HandleW</code>
function from the debugger</a>.
</p>
<p>
Mason Wheeler
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/10/16/10648184.aspx#10648336">asks</a>,
"What debugger is this?
Why doesn't it have the ability to call functions as a standard feature?"
</p>
<p>
The debugger here is the debugger that comes with the
<a HREF="https://msdn.microsoft.com/en-us/library/windows/hardware/ff551063(v=vs.85).aspx">
Debugging Tools for Windows</a>.
It is the core debugging engine that powers
<code>kd</code>,
<code>cdb</code>,
<code>ntsd</code>,
and <code>windbg</code>.
</p>
<p>
This debugging engine operates under very narrow constraints
because it is designed to be deployed to a customer machine with
minimum overhead or invasiveness.
(Indeed, this debugger used to come preinstalled with Windows,
but that stopped a while back,
presumably to minimize attack surface,
and also to give the debugging tools team control over their
own release cycle.)
</p>
<p>
This means that the debugger cannot assume that there is a copy
of the Windows SDK installed on the machine.
Without the header files, the debugger doesn't know how to
call any particular function.
What's the calling convention?
What is the type of each parameter?
(Four-byte integers, 8-byte integers, 4-byte floating point values,
8-byte floating point values, and 128-bit SIMD values
are all passed differently.)
What is the function's return value?
(If the return value is a structure or class,
then an extra hidden parameter must be passed.
And the debugger needs to know the
return value in order to print the result.)
</p>
<p>
Since the debugger does not have access to a compiler or to
header files,
it has to make do with the symbolic information embedded
in the symbol files.
And
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/10/16/10648184.aspx#10648362">
that's where the "If this were a function you had written"
comes from</a>.
If you had written the function, then the information about the
calling convention and parameters
would be found in the symbol file for the module containing the function
you're trying to call.
But if you didn't write the function,
then you don't necessarily have full symbolic information for
the function.
In particular, the Windows symbol server
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/10/16/10648184.aspx#10648383">
does not provide
full symbolic information for system functions</a>.
It contains only enough information to build stack traces
(which basically means it has just the function name and
some FPO information).
That's not enough information to simulate a call to the function.
</p>
<p>
It's great to have the Visual Studio debugger or some other
fancy debugger available.
But if you are debugging a customer's machine via a remote
connection,
you have to make do with very little.
Customers are understandably unhappy when you tell them,
"Okay, we can try to debug your problem,
but first you need to install Visual Studio onto your
domain controller."
Plus there's the heisenbug effect:
The act of installing Visual Studio entails significant changes
to the system, one of which may alter the system
enough to make the bug no longer occur.
</p>
<p>
(That's also why
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/10/16/10648184.aspx#10648332">
writing a scratch program that does an
<code>Open&shy;Process</code>,
<code>Duplicate&shy;Handle</code>,
<code>Get&shy;Final&shy;Path&shy;By&shy;Handle</code>,
and then
<code>Message&shy;Box</code>
was not considered for this problem</a>.
If you are debugging remotely, you have to be able to do
everything you need from within the debugger.
There is nobody sitting at the console to whom you can
email your test program,
ask to run it,
and then have them read the results back to you.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1232621">
				<div id="div-comment-1232621" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160407-00/?p=93273#comment-1232621">
			April 7, 2016 at 7:45 am</a>		</div>

		<p>So why does Microsoft not include the required information for a call into the public symbols? I can see why this would be a bad idea for undocumented functions, but why not for the official documented ones?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1232653">
				<div id="div-comment-1232653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160407-00/?p=93273#comment-1232653">
			April 7, 2016 at 11:58 am</a>		</div>

		<p>The information is there: It&#8217;s in the SDK. But the debugger doesn&#8217;t come with the SDK.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1232691">
				<div id="div-comment-1232691" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160407-00/?p=93273#comment-1232691">
			April 7, 2016 at 8:12 pm</a>		</div>

		<p>Unless there&#8217;s another way to get it, the debugger *does* come with the SDK &#8212; you have to use the SDK installer to install it. It would be one more checkbox in the Windows SDK Installer. (That used to not be true, but as far as I can tell, it is no longer possible to get the debugger redists outside of downloading the SDK installer, or via some third-party kind enough to place them up for download.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1232731">
				<div id="div-comment-1232731" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">morlamweb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160407-00/?p=93273#comment-1232731">
			April 8, 2016 at 5:41 am</a>		</div>

		<p>@Anon: the debuggers can be deployed separately from the SDK.  The SDK installer allows you to copy the installers for the debuggers to your local disk, and those installers can then be sent to customers to install the debuggers.  Defrag Tools on Channel9 took advantage of this feature to build their &#8220;lightsaber&#8221; &#8211; a USB memory stick with the debugging tools + sysinternals tools &#8211; for Win 7, 8, and 8.1.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1232631">
				<div id="div-comment-1232631" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160407-00/?p=93273#comment-1232631">
			April 7, 2016 at 7:52 am</a>		</div>

		<p>Also, why not add a command to the debugger that takes the call syntax as an argument?<br />
Like:<br />
.call stdcall FunctionName DWORD:123 CHAR:12 ret:INT</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1232663">
				<div id="div-comment-1232663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160407-00/?p=93273#comment-1232663">
			April 7, 2016 at 12:00 pm</a>		</div>

		<p>That would be a neat extension to write. <a href="https://blogs.msdn.microsoft.com/oldnewthing/20050721-16/?p=34863" rel="nofollow">Start typing</a>! (Functions that return structures would be more tricky.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1232783">
				<div id="div-comment-1232783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://paradisefacade.com' rel='external nofollow' class='url'>Rosyna</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160407-00/?p=93273#comment-1232783">
			April 8, 2016 at 2:58 pm</a>		</div>

		<p>I wonder about that as well. For example, GDB and LLDB permit you to do typecasting to inform the debugger of the argument and return types of a function the debugger otherwise has no information about.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1232651">
				<div id="div-comment-1232651" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160407-00/?p=93273#comment-1232651">
			April 7, 2016 at 9:30 am</a>		</div>

		<p>I for one enjoy the &#8220;Portability&#8221; of WinDBG/CDB and its kin.</p>
<p>Missed you at //build2016 Raymond! I really want you to sign a copy of your book :)</p>
<p>As to &#8220;Installing Visual Studio To Debug&#8221; at build the Visual Studio team was showing off their super slick vNext installer at //build2016, I asked the very same question (portable install), if their intel was good its getting closer, the core is ~300mb and gives you the shell, minimal syntax highlighting, and the native and managed debugger (one day we might get our CLR Debugger that shipped with .NET 2.0 back!). They were talking about the limited invasive-ness of the new installer/vNext. Still a far cry away from the ~40mb of WinDBG and its kin.</p>
<p>I also had a chance to talk to the Visual Studio Debugging Tools team, I was surprised to hear that the rep had never head of the ntdebugging blog (I found them through your sidebar, those guys are simply amazing). I was also a little surprised to hear them admit WinDBG was slightly better for some operations. I know Microsoft&#8217;s a big place, but I would expected there to be some cross over. Maybe a blog post for another time that talks about the various teams (as you understand them?) or perhaps its out of scope.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1232701">
				<div id="div-comment-1232701" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160407-00/?p=93273#comment-1232701">
			April 7, 2016 at 8:15 pm</a>		</div>

		<p>I wouldn&#8217;t expect the VS Debug Tools team to read every other MS blog&#8230;, but I *would* expect everyone on the team to pay attention to the other Microsoft debugging tool blogs&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1232671">
				<div id="div-comment-1232671" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160407-00/?p=93273#comment-1232671">
			April 7, 2016 at 2:09 pm</a>		</div>

		<p>Despite the low number of comments, this post has been particularly interesting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1232732">
				<div id="div-comment-1232732" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sense</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160407-00/?p=93273#comment-1232732">
			April 8, 2016 at 6:17 am</a>		</div>

		<p>I&#8217;ve recently seen in the latest WinDbg (the windows 10 sdk version) that it can show &#8220;Source Args&#8221; for API functions in a callstack of a crash dump. This was not the case with previous versions of WinDbg.<br />
It seems that if public symbols contain the necessary information for the debugger to show this, it will be enough to call functions. Maybe at some point in time, the public symbols were changed and contained more information?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

