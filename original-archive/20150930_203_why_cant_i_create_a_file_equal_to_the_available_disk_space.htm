<html>
<head>
<title>Why can't I create a file equal to the available disk space?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why can&#8217;t I create a file equal to the available disk space?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 30, 2015 / year-entry #204</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>35</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer was trying to exercise some boundary cases in their application, one of which entailed "out of disk space" scenarios. The way they did this was very simple: Call Get­Disk­Free­Space­Ex to see how much disk space is available, and then create a file of that size. This worked on some volumes, but on other...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer was trying to exercise some boundary cases in their
application,
one of which entailed
"out of disk space" scenarios.
The way they did this was very simple:
Call
<code>Get&shy;Disk&shy;Free&shy;Space&shy;Ex</code> to see
how much disk space is available,
and then create a file of that size.
This worked on some volumes,
but on other volumes, it failed with "Not enough disk space."
Even after making sure no other programs were accessing the drive
in question,
the error persisted.
Why?</p>
<p>
The amount of disk space required to create a file of a particular
size is not exactly equal to the number of bytes in the file.
After all, the file system also needs to remember the file name,
the security attributes,
various timestamps,
and
information to keep track of where on the disk all the bytes
of the file are stored.
And then there are the less obvious things like
the change journal records
to record that the file was created
and
<a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/08/16/10195932.aspx">
object tracking records for link tracking</a>.
</p>
<p>
Just because your volume has exactly X bytes free
doesn't mean that you will be able to create a file whose
size is exactly X,
because additional disk space will be needed to keep track of
the metadata.
If you want to fill a disk to the brim,
you could start by filling it nearly to the brim,
then growing the file until you get "Not enough disk space."
If you want to get fancy, you could grow the file by large
chunks until you can't add large chunks any more,
and then switch to smaller and smaller chunks.
You may also want to
use the
<code>Set&shy;File&shy;Valid&shy;Data</code> function
to
<!-- backref: On the various ways of creating large files in NTFS -->
avoid wasting time writing zeroes to all the sectors.
</p></p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (35)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1201121">
				<div id="div-comment-1201121" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ronald LP</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1201121">
			September 30, 2015 at 7:15 am</a>		</div>

		<p>Also a file has not a linear layout on disk. Here is an interesting article about NTFS file growth : <a rel="nofollow" target="_new" href="http://blogs.technet.com/b/askcore/archive/2009/10/16/the-four-stages-of-ntfs-file-growth.aspx">blogs.technet.com/&#8230;/the-four-stages-of-ntfs-file-growth.aspx</a> </p>
<p>Ronald</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1201101">
				<div id="div-comment-1201101" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1201101">
			September 30, 2015 at 8:02 am</a>		</div>

		<p>On that same subject, it seems Windows Explorer is actually guesstimating the &quot;size on disk&quot; on its properties window, instead of actually poking at the level of Ronald LP&#39;s article: In Windows 7, the &quot;size on disk&quot; still jumps from &quot;0 bytes&quot; to &quot;4kb&quot; when you add a single byte to a 0-byte file.</p>
<p>I haven&#39;t tested on Windows 10 yet.</p>
<div class="post">[<em>Would you prefer that Explorer show 256 bytes for the size of a 0-byte file? (To account for the metadata. And how do you charge for single-instance-stored ACLs?) Anyway, it doesn&#39;t matter; Explorer doesn&#39;t have insight into NTFS&#39;s internal data organization. It just calls GetCompressedFileSize(). -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1201081">
				<div id="div-comment-1201081" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1201081">
			September 30, 2015 at 8:15 am</a>		</div>

		<p>@Medinoc, Explorer is not guessing, on the system you were looking at, the file system of the drive had 4KB clusters. So that one byte file is using up 4KB on disk. When you format a drive using Explorer, one of the options is the Allocation Unit Size. This represents the least amount of space a 1 byte file will use on the drive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1201071">
				<div id="div-comment-1201071" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1201071">
			September 30, 2015 at 8:17 am</a>		</div>

		<p>@Brian see Ronald&#39;s post. I&#39;m on an NTFS file system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1201061">
				<div id="div-comment-1201061" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric TF Bat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1201061">
			September 30, 2015 at 9:06 am</a>		</div>

		<p>Is there a file system where the following trick wouldn&#39;t work? </p>
<p>freesize = FreeSpaceInBytes(mydisk);</p>
<p>filename = TempFileNameOnDisk(mydisk);</p>
<p>tempsize = 10;</p>
<p>CreateDummyFile(filename, tempsize);</p>
<p>overhead = freesize &#8211; FreeSpaceInBytes(mydisk) &#8211; tempsize; </p>
<p>DeleteFile(filename);</p>
<p>// free space should now be equal to freesize again</p>
<p>CreateDummyFile(filename, freesize &#8211; overhead);</p>
<p>// free space should now be zero</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1201041">
				<div id="div-comment-1201041" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1201041">
			September 30, 2015 at 9:13 am</a>		</div>

		<p>I would NOT have assumed that I could create a file whose size is exactly the number of bytes left over on the disk. &nbsp;Perhaps that&#39;s because I know a little bit about the on-disk structures, attributes, and the journal. &nbsp;Also, because I&#39;m not sure how the usual room for &quot;previous versions of files&quot; and restore points is handled, when the disk gets nearly full. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1201031">
				<div id="div-comment-1201031" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1201031">
			September 30, 2015 at 9:15 am</a>		</div>

		<p>@Eric TF Bat:</p>
<p>Take a look at the article linked by Ronald LP. &nbsp;The file system overhead is not necessarily not a constant size. &nbsp;In the case of NTFS, it grows as the file size grows. &nbsp;I would expect this to be the case with most file systems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1201021">
				<div id="div-comment-1201021" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1201021">
			September 30, 2015 at 9:56 am</a>		</div>

		<p>It&#39;s not true of UNIX systems either. Somebody&#39;s been dealing with FAT too long.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1201011">
				<div id="div-comment-1201011" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1201011">
			September 30, 2015 at 10:24 am</a>		</div>

		<p>You&#39;re not just testing your own reaction to &quot;out of disk space&quot;, you&#39;re testing the reaction of all the other things currently running on the system. Expecting all of them to behave nicely when you take away all their disk space just scares the crap out of me. It&#39;s like a test that updates the system clock.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1201001">
				<div id="div-comment-1201001" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1201001">
			September 30, 2015 at 10:38 am</a>		</div>

		<p>Why can&#39;t I grow to fill all the empty space in the universe? No one else is using it!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1200981">
				<div id="div-comment-1200981" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200981">
			September 30, 2015 at 10:42 am</a>		</div>

		<p>Even if you could ask the system for the exact maximum size of a file you could create right now, in the next 20 milliseconds some other process might have consumed some disk space so your attempt to create the file would still fail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1200971">
				<div id="div-comment-1200971" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris I.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200971">
			September 30, 2015 at 10:43 am</a>		</div>

		<p>@Dave in that case, how do you propose testing that *your own* application handles the out-of-disk-space scenario well?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1200961">
				<div id="div-comment-1200961" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200961">
			September 30, 2015 at 11:08 am</a>		</div>

		<p>@ChrisI: No idea how to do it on Windows, but on Unix, you just tell the program to write to /dev/full, and it&#39;ll get an ENOSPC. &nbsp;See full(4).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1200951">
				<div id="div-comment-1200951" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Asdf28</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200951">
			September 30, 2015 at 11:25 am</a>		</div>

		<p>@kevin On linux, there are 2 more ways of simulating out of space errors. An LD_PRELOAD shim to wrap a few syscalls and make them fail on command. Or a FUSE filesystem to make a particular directory fail on command.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1200941">
				<div id="div-comment-1200941" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200941">
			September 30, 2015 at 11:34 am</a>		</div>

		<p>NTFS compression make file fragmented. If you have uncompresed file in 1 continuous space like DDDDDDDD and you enable NTFS compression, the data will look like: CFCFCFCF (D=data,C=compressed data,F=free space). Is is just a bug or is this behaviour forced by some NTFS feature ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1200931">
				<div id="div-comment-1200931" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200931">
			September 30, 2015 at 11:57 am</a>		</div>

		<p>@Dave &#8211; who says that they are using the &quot;System Volume&quot; for testing this? Maybe the application is being asked to try to open a file on a secondary volume (as part of the test) and it is that volume that they want the test code to fully allocate.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1200921">
				<div id="div-comment-1200921" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AnotherScaryDay</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200921">
			September 30, 2015 at 12:01 pm</a>		</div>

		<p>@Dave: keep in mind that the volume running out of disk space doesn&#39;t have to be the system volume, in which case it shouldn&#39;t be too disruptive. &nbsp;And even when it is the system volume, maybe your application is expected to work in some acceptable form in those conditions (eg. think a disk cleaner type application) in which case such a test setup seems fair game to me, scary as it may be.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1200911">
				<div id="div-comment-1200911" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200911">
			September 30, 2015 at 12:14 pm</a>		</div>

		<p>Yes, something like /dev/full would be useful for Windows&#8230; Of course, if you are developing software, you can create a small disk partition and fill it nearly up, or all the way up (by whatever means necessary) and you&#39;ll know that no one else is writing to it. &nbsp;Then you have your application write to THAT disk. &nbsp;You can even label the disk &quot;Dev_Full&quot;. &nbsp;:-) &nbsp;That might be exactly what the original customer was trying to do, but they were trying to fill the disk by creating a file with a size &quot;slightly too large&quot;. &nbsp;</p>
<p>Yes, I have seen what happens when the system or boot volume (whichever one it is) fills up. &nbsp;It is not pretty.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1200901">
				<div id="div-comment-1200901" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200901">
			September 30, 2015 at 1:34 pm</a>		</div>

		<p>Why can&#39;t windows tell an application how big the largest creatable file is? It ain&#39;t rocket science.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1200891">
				<div id="div-comment-1200891" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Piotr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200891">
			September 30, 2015 at 1:54 pm</a>		</div>

		<p>@640k:</p>
<p>It /is/ rocket science, as the overhead for creating that file might depend on the properties of that file. It&#39;s like asking how much could fit into the boot of a car. I can easily tell you how much volume is empty, but I can&#39;t know beforehand how much place the necessary packaging will take up. It depends on the contents.</p>
<p>The more important aspect however is that the information about the largest creatable file isn&#39;t very useful. I can&#39;t think of a use case outside of debugging. In production, it won&#39;t be very helpful, either â you never want your file systems to fill to the brim, and in any case, the information might be outdated the moment you get it. Only after writing your file to the disk will you know if the information was still accurate, and with that you&#39;re not better off than before.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1200881">
				<div id="div-comment-1200881" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200881">
			September 30, 2015 at 2:36 pm</a>		</div>

		<p>@640k: because in the next moment that information is already obsolete. GetFreeSpace is not a promise, it&#39;s an advisory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1200871">
				<div id="div-comment-1200871" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200871">
			September 30, 2015 at 2:37 pm</a>		</div>

		<p>What shall we use</p>
<p>To fill the empty spaces</p>
<p>Where we used to talk?</p>
<p>How shall I fill</p>
<p>The final places?</p>
<p>How should I complete the wall</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1200851">
				<div id="div-comment-1200851" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200851">
			September 30, 2015 at 3:46 pm</a>		</div>

		<p>I&#39;m doing disk full testing on CF cards as I write (waiting for unit to boot.) I ended up creating a series of directories with empty files in each. This makes it really easy to adjust the free size by the sector.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1200841">
				<div id="div-comment-1200841" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200841">
			September 30, 2015 at 5:07 pm</a>		</div>

		<p>&gt; NTFS compression make file fragmented. If you have uncompresed file in 1 continuous space like DDDDDDDD and you enable NTFS compression, the data will look like: CFCFCFCF (D=data,C=compressed data,F=free space). Is is just a bug or is this behaviour forced by some NTFS feature ?</p>
<p>This is a feature. The sum of the physical extents does not change. It uses compression units to compress one set of clusters to something smaller. Then the freed clusters get marked as &quot;sparse&quot; and do not occupy space on the disk. Thsi is so taht the sum of all the extents is &gt;= uncompressedfile size. Depending on things, the actual data clusters might be contiguous. So the file only &quot;looks&quot; fragmented. brilliant, actually</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1200831">
				<div id="div-comment-1200831" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200831">
			September 30, 2015 at 5:10 pm</a>		</div>

		<p>Volume Shadow Copies also will take up size; data is need to track changes like name and timestamp modifications. On that note, on a 100% full NTFS volume you might not be able to rename files into something longer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1200821">
				<div id="div-comment-1200821" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200821">
			September 30, 2015 at 6:22 pm</a>		</div>

		<p>The opposite could also happen: the filesystem tells you it has X free bytes, you try to create a file with exactly X bytes, and the filesystem still has some free space left after that. For instance, if the filesystem compressed the file you just created so it used less space, or if part of the file you just created was inlined in the MFT or similar, or if something noticed the filesystem was getting full and autonomously removed old saved snapshots or something like that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1200811">
				<div id="div-comment-1200811" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200811">
			September 30, 2015 at 7:17 pm</a>		</div>

		<p>&gt; If you want to get fancy, you could grow the file by large chunks until you can&#39;t add large chunks any more, and then switch to smaller and smaller chunks.</p>
<p>I guess there&#39;s no chance of raising Zeno&#39;s paradox since computer data has a discreet base size.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1200761">
				<div id="div-comment-1200761" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200761">
			October 1, 2015 at 7:44 am</a>		</div>

		<p>[Would you prefer that Explorer show 256 bytes for the size of a 0-byte file? (To account for the metadata. And how do you charge for single-instance-stored ACLs?) Anyway, it doesn&#39;t matter; Explorer doesn&#39;t have insight into NTFS&#39;s internal data organization. It just calls GetCompressedFileSize(). -Raymond]</p>
<p>Either &quot;256 bytes&quot;, or &quot;X bytes + metadata&quot; where X is the actual size outside of the MFT (meaning a 1-byte file with moderate metadata would be &quot;0 bytes + metadata&quot;. </p>
<p>I think either would be better than just doing the &quot;round the data length up to cluster size&quot; on a system where this isn&#39;t accurate.</p>
<p>Of course, I&#39;m aware this is just a &quot;perfect world&quot; scenario, since in the Real Worldâ¢ Explorer isn&#39;t *supposed* to have access to the underlying structure of a file system.</p>
<p>(Note that I&#39;m talking about the &quot;Size on disk&quot; field, not the &quot;Size&quot; one which is fine as it is).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1200701">
				<div id="div-comment-1200701" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200701">
			October 1, 2015 at 8:30 am</a>		</div>

		<p>I think the &quot;Size on disk&quot; field gets added to give users a feeling how much space (if any) is saved by NTFS File Compression for selected files. It can&#39;t and don&#39;t need to account for each and every metadata.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1200651">
				<div id="div-comment-1200651" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200651">
			October 1, 2015 at 10:10 am</a>		</div>

		<p>@medinoc how would you account for data stored with the actual inode (I mean whatever the ntfs equivalent is) in the face of hard links? </p>
<p>Face it, it&#39;s useless to try to be overly accurate and will only cause confusion for the user.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1200501">
				<div id="div-comment-1200501" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Cow Herd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200501">
			October 2, 2015 at 4:21 am</a>		</div>

		<p>Yes, &quot;size on disk&quot; would ideally take into account metadata (and therefore display 256 bytes, or whatever the exact number is, for an empty file). That&#39;s the whole purpose of the &quot;size&quot;/&quot;size on disk&quot; distinction; &quot;size&quot; is the number of bytes of file content, and &quot;size on disk&quot; is the total number of bytes allocated for this file.</p>
<p>@Someone: if it was purely for that purpose, it wouldn&#39;t round up to a multiple of 4K.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1200341">
				<div id="div-comment-1200341" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200341">
			October 2, 2015 at 10:02 am</a>		</div>

		<p>Anonymous Cow Herd: Think of &quot;size on disk&quot; as the amount of space that would be freed up by deleting the file. It doesn&#39;t take into account MFT records, directory entries, security descriptors, or anything else that is part of some other file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1200181">
				<div id="div-comment-1200181" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200181">
			October 2, 2015 at 2:03 pm</a>		</div>

		<p>@Anonymous Cow Herd &quot;if it was purely for that purpose, it wouldn&#39;t round up to a multiple of 4K&quot;</p>
<p>Why not? Compresssed files still occupy a multiple of the cluster size. As a consequence, files smaller than this will still use 1 cluster, regardless of the compression ratio.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1200071">
				<div id="div-comment-1200071" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200071">
			October 3, 2015 at 4:02 pm</a>		</div>

		<p>@Gabe: Ooh, that makes sense.</p>
<p>@Someone: +1</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1200051">
				<div id="div-comment-1200051" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150930-00/?p=91481#comment-1200051">
			October 4, 2015 at 3:51 am</a>		</div>

		<p>This Size on disk field is the only one that shows you that your 50mb archived redo log file gets reduced to something like 20mb inside a directory with NTFS compression. That&#39;s important if your O***** database spits them out like crazy.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

