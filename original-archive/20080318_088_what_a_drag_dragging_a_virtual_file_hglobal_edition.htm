<html>
<head>
<title>What a drag: Dragging a virtual file (HGLOBAL edition)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What a drag: Dragging a virtual file (HGLOBAL edition)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 18, 2008 / year-entry #89</td></tr>
<tr><td><b>Tags:</b></td><td>code;what-a-drag</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080318-00/?p=23083</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Now that we've gotten our feet wet with simple data objects, let's do something a smidge more complicated but extremely useful: Dragging a virtual file. There are many ways of doing this, but I'll start with the simplest one, where the virtual file is represented as a block of memory. Remember, the subtitle of this...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Now that we've gotten our feet wet with
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/03/11/8080077.aspx">
simple</a>
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/03/12/8080101.aspx">
data</a>
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/03/13/8080135.aspx">
objects</a>,
let's do something a smidge more complicated but extremely useful:
Dragging a virtual file.
There are many ways of doing this, but I'll start with the
simplest one,
where the virtual file is represented as a block of memory.
</p>
<p>
Remember, the subtitle of this series is "It's the least you could do."
There are a lot of optional things you can (and even should) do,
but I'm going to start with the absolute minimum.
</p>
<p>
Take the drag/drop program we've been working on for a while
and make the following changes.
First, change the enumeration of data types:
</p>
<pre>
  enum {
    <font COLOR=blue>DATA_FILEGROUPDESCRIPTOR,
    DATA_FILECONTENTS,</font>
    DATA_NUM,
    DATA_INVALID = -1,
  };
</pre>
<p>
The clipboard format central to dragging a virtual file
is the <code>FILEGROUPDESCRIPTOR</code>,
which describes how many files are being dragged
and various information about them.
For each file in the file group descriptor,
you must provide the associated file contents,
represented by the <code>CFSTR_FILECONTENTS</code> clipboard format.
</p>
<pre>
CTinyDataObject::CTinyDataObject() : m_cRef(1)
{
  SetFORMATETC(&amp;m_rgfe[DATA_FILEGROUPDESCRIPTOR],
               RegisterClipboardFormat(CFSTR_FILEDESCRIPTOR));
  SetFORMATETC(&amp;m_rgfe[DATA_FILECONTENTS],
               RegisterClipboardFormat(CFSTR_FILECONTENTS),
               TYMED_HGLOBAL, /* lindex */ 0);
}
</pre>
<p>
Initializing the file group descriptor entry is pretty much what
you've seen before.
Note that the structure is called <code>FILEGROUPDESCRIPTOR</code>,
but the clipboard format is <code>CFSTR_FILEDESCRIPTOR</code>
without the "group".
This was probably originally a typographical error,
but now we're stuck with it.
</p>
<p>
The file contents entry has a twist:
The <code>lindex</code> is zero, not <code>-1</code>.
The file contents clipboard format uses the <code>lindex</code>
as a zero-based index which selects
which virtual file the caller is talking about.
Since we have only one virtual file, its index is zero.
</p>
<p>
As before, all the real work is in the heart of the data object,
the <code>IDataObject::GetData</code> method.
</p>
<pre>
HRESULT CTinyDataObject::GetData(FORMATETC *pfe, STGMEDIUM *pmed)
{
  ZeroMemory(pmed, sizeof(*pmed));

  switch (GetDataIndex(pfe)) {
  case DATA_FILEGROUPDESCRIPTOR:
  {
    FILEGROUPDESCRIPTOR fgd;
    <a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/06/28/433341.aspx">ZeroMemory</a>(&amp;fgd, sizeof(fgd));
    fgd.cItems = 1;
    StringCchCopy(fgd.fgd[0].cFileName,
                  ARRAYSIZE(fgd.fgd[0].cFileName),
                  TEXT("Dummy"));
    pmed-&gt;tymed = TYMED_HGLOBAL;
    return CreateHGlobalFromBlob(&amp;fgd, sizeof(fgd),
                              GMEM_MOVEABLE, &amp;pmed-&gt;hGlobal);
  }

  case DATA_FILECONTENTS:
    pmed-&gt;tymed = TYMED_HGLOBAL;
    return CreateHGlobalFromBlob("Dummy", 5,
                              GMEM_MOVEABLE, &amp;pmed-&gt;hGlobal);
  }

  return DV_E_FORMATETC;
}
</pre>
<p>
When the caller asks for the file group descriptor, we fill out
a <code>FILEGROUPDESCRIPTOR</code> structure,
taking care to
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/07/03/655251.aspx">
zero out the bytes we don't care about</a>
before filling in the goodies,
so as to avoid an information disclosure vulnerability.
As I noted, we're starting by doing the absolute minimum necessary,
which in the case of virtual file transfer consists merely of
specifying how many virtual files there are and their names.
</p>
<p>
When the caller asks for the contents of file zero
(which is the only one we have),
we produce a five-byte chunk of memory with the word "Dummy" in it.
</p>
<p>
Run this program, and drag the invisible object out of the client
area and drop it onto the desktop, say.
Woo-hoo, your virtual file has been copied to the desktop
and has turned into a real file.
(You can even drop it onto an Outlook message composition window,
and it will appear as an attachment!)
</p>
<p>
There are still some issues here, but we've at least done
the absolute minimum necessary to drag a virtual file
represented by a block of memory.
Let's look at some of those optional features,
some of which turn out to have significant consequences
for both you and the end user.
</p>
<p>
First of all, you may have noticed that the Dummy file that is
created might have some garbage bytes at the end.
I say "might" because the presence of said garbage bytes
depends on how the heap manager feels.
If all you provide is an <code>HGLOBAL</code>,
then the only indication of the size of the memory block
is what comes out of the <code>GlobalSize</code> function.
But the size returned by the <code>GlobalSize</code>
function need not be equal to the size passed to
<code>GlobalAlloc</code>;
the only guarantee is that it is at least as big as the size requested.
It might be bigger as the result of internal heap bookkeeping
such as rounding all allocations up to the nearest multiple of 16 bytes.
If such rounding has occurred, then the Dummy file that gets created
will contain those extra garbage bytes.
</p>
<p>
To avoid this problem, set the <code>FD_FILESIZE</code> flag
and specify the exact file size in the <code>nFileSizeLow</code>
and <code>nFileSizeHigh</code> members:
</p>
<p>
Specifying the file size in the <code>FILEGROUPDESCRIPTOR</code>
also benefits the end user,
because it gives information to the file copy progress bar as to
how many bytes it should expect to receive.
Without it, the progress bar doesn't know how many bytes are
in that virtual file.
It eventually finds out when it requests the file contents,
but it learns that from each file as it is copied.
The progress dialog
doesn't have the opportunity to collect this information up front
in order to provide meaningful progress feedback.
</p>
<p>
Another optional detail that you may wish to take advantage of
is specifying file attributes and modification times in the
<code>FILEGROUPDESCRIPTOR</code>.
For example, you might want to make the file hidden when it copied,
or you might want to customize the last-modified time.
</p>
<p>
Let's do a few of these things.
We'll specify the file size in the file group descriptor
to avoid the garbage and improve the progress feedback,
and we'll set the last-modified time to a specific date.
</p>
<pre>
  case DATA_FILEGROUPDESCRIPTOR:
  {
    FILEGROUPDESCRIPTOR fgd;
    ZeroMemory(&amp;fgd, sizeof(fgd));
    fgd.cItems = 1;
    <font COLOR=blue>fgd.fgd[0].dwFlags = FD_FILESIZE | FD_WRITESTIME;
    fgd.fgd[0].nFileSizeLow = 5;
    fgd.fgd[0].ftLastWriteTime.dwLowDateTime = 0x256d4000;
    fgd.fgd[0].ftLastWriteTime.dwHighDateTime = 0x01bf53eb;</font>
    StringCchCopy(fgd.fgd[0].cFileName,
                  ARRAYSIZE(fgd.fgd[0].cFileName),
                  TEXT("Dummy"));
    pmed-&gt;tymed = TYMED_HGLOBAL;
    return CreateHGlobalFromBlob(&amp;fgd, sizeof(fgd),
                              GMEM_MOVEABLE, &amp;pmed-&gt;hGlobal);
  }
</pre>
<p>
Now, when you drop the file, it will not have any garbage bytes
at the end, and the timestamp will be midnight January 1, 2000 UTC.
(You won't notice any improvement in the progress bar since the file
is so small.)
</p>
<p>
Even though we haven't done very much,
it may already be enough for many people
who simply want to allow users to drag an object out of their
program and drop it into an Explorer window to create a corresponding
file, provided that an <code>HGLOBAL</code> is a convenient
format for the file contents.
This is suitable for small files, but as files get bigger,
the fact that you have to generate the entire file at once
can become expensive.
We'll look at one alternative next time.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-610793">
				<div id="div-comment-610793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">irql</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080318-00/?p=23083#comment-610793">
			March 18, 2008 at 10:37 am</a>		</div>

		<p>Nice article, thanks. Can anyone post a screenshot showing this in action? I&#8217;ve tried it myself but I couldn&#8217;t get it to compile with mingw and the Platform SDK doesn&#8217;t come with a compiler.</p>
<p>BTW if anyone wants to know why getting this right is so important, I recommend reading this article: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2007/05/07/2453927.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2007/05/07/2453927.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-610813">
				<div id="div-comment-610813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080318-00/?p=23083#comment-610813">
			March 18, 2008 at 11:00 am</a>		</div>

		<p>irql: The Windows SDK does come with a compiler.</p>
<p>You may want to revisit this blog article, where CF_HDROP was misused for this:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2007/09/18/4966024.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2007/09/18/4966024.aspx</a></p>
<p>Back then, you said that &quot;There will be a remedial course in the use of the FileGroupDescriptor sometime next year.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-610833">
				<div id="div-comment-610833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">irql</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080318-00/?p=23083#comment-610833">
			March 18, 2008 at 11:11 am</a>		</div>

		<p>@Yahong Bao: No matter how many times I try, CL.EXE is not included and none of the examples can be built. Yes, latest version too, yes, older versions as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-610853">
				<div id="div-comment-610853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RIck C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080318-00/?p=23083#comment-610853">
			March 18, 2008 at 11:28 am</a>		</div>

		<p>irql: &nbsp;you need the windows SDK for the windows headers and libraries. &nbsp;Get yourself the Express Edition of Visual C++ for the compiler. &nbsp;There&#8217;s a few hoops you have to jump through to get both the Windows and standard C++ headers available, but they&#8217;re documented.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-madq42 even thread-even depth-1" id="comment-610863">
				<div id="div-comment-610863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MadQ1' rel='external nofollow' class='url'>MadQ1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080318-00/?p=23083#comment-610863">
			March 18, 2008 at 12:57 pm</a>		</div>

		<p>I usually find myself in a quandry when I have to implement IDataObject. If I have to allocate something for an STGMEDIUM, I usually start to worry that the caller may not call ReleaseStgMedium, leaking things left and right. By the time I remember that I&#8217;ve already satisfied my part of the contract, I&#8217;m usually halfway through writing all kinds of complicated safeguard code. *sigh* &#8211; so much for impulse control.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-610883">
				<div id="div-comment-610883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">scorpion007</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080318-00/?p=23083#comment-610883">
			March 18, 2008 at 10:48 pm</a>		</div>

		<p>irql, the platform SDK (and now the Windows SDK) has come with all the compilers for quite some time now. If you cannot figure out how to use them, don&#8217;t claim that they aren&#8217;t freely available.</p>
<p>You can get them even *without* visual studio express.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-611143">
				<div id="div-comment-611143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080318-00/?p=23083#comment-611143">
			March 20, 2008 at 7:51 pm</a>		</div>

		<p>Why not directly use GlobalAlloc and GlobalLock, instead of using CreateHGlobalFromBlob? Saves a memory copy and takes less stack space.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-611153">
				<div id="div-comment-611153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080318-00/?p=23083#comment-611153">
			March 20, 2008 at 8:09 pm</a>		</div>

		<p>Eg, instead of this:</p>
<p>&nbsp;case DATA_FILEGROUPDESCRIPTOR:</p>
<p>&nbsp;{</p>
<p>&nbsp; &nbsp;FILEGROUPDESCRIPTOR fgd;</p>
<p>&nbsp; &nbsp;ZeroMemory(&amp;fgd, sizeof(fgd));</p>
<p>&nbsp; &nbsp;fgd.cItems = 1;</p>
<p>&nbsp; &nbsp;StringCchCopy(fgd.fgd[0].cFileName,</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ARRAYSIZE(fgd.fgd[0].cFileName),</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;TEXT(&quot;Dummy&quot;));</p>
<p>&nbsp; &nbsp;pmed-&gt;tymed = TYMED_HGLOBAL;</p>
<p>&nbsp; &nbsp;return CreateHGlobalFromBlob(&amp;fgd, sizeof(fgd),</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;GMEM_MOVEABLE, &amp;pmed-&gt;hGlobal);</p>
<p>&nbsp;}</p>
<p>how about something like this:</p>
<p>&nbsp;case DATA_FILEGROUPDESCRIPTOR:</p>
<p>&nbsp;{</p>
<p>&nbsp; HGLOBAL hfgd = GlobalAlloc(GMEM_MOVEABLE | GMEM_ZEROINIT, sizeof(FILEGROUPDESCRIPTOR));</p>
<pre><code>pmed-&amp;gt;hGlobal = 0;
</code></pre>
<p>&nbsp; if (!hfgd) return E_OUTOFMEMORY;</p>
<pre><code>LPFILEGROUPDESCRIPTOR pfgd = GlobalLock(hfgd);

if (!pfgd) {

    GlobalFree(hfgd);

    return E_OUTOFMEMORY;

}

pfgd-&amp;gt;cItems = 1;

StringCchCopy(pfgd-&amp;gt;fgd[0].cFileName,

    ARRAYSIZE(pfgd-&amp;gt;fgd[0].cFileName),

    TEXT(&amp;quot;Dummy&amp;quot;));

pmed-&amp;gt;tymed = TYMED_HGLOBAL;

pmed-&amp;gt;hGlobal = hfgd;

GlobalUnlock(hfgd);

return NO_ERROR;
</code></pre>
<p>&nbsp;}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-611163">
				<div id="div-comment-611163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080318-00/?p=23083#comment-611163">
			March 20, 2008 at 8:44 pm</a>		</div>

		<p>On the matter of this, can you allocate the memory as GMEM_FIXED? This removes the need to call GlobalLock or GlobalUnlock.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-614263">
				<div id="div-comment-614263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2008/03/31/8344798.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080318-00/?p=23083#comment-614263">
			March 31, 2008 at 12:12 pm</a>		</div>

		<p>If you want multiple files, then drag multiple objects.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

