<html>
<head>
<title>The vtable does not always go at the start of the object</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The vtable does not always go at the start of the object</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 20, 2006 / year-entry #28</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060120-00/?p=32583</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">There is no requirement that it does, and it often doesn't.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p><html xmlns:v="urn:schemas-microsoft-com:vml"></p>
<style><!--
v\:* { behavior: url(#default#VML); }
v\:shape.v_arrow { position: relative; height: 1em; width: 5em }
--></style>
<p><v:shapetype id="arrow" coordsize="1,1"
 strokecolor="black" strokeweight="1pt">
 <v:stroke endarrow="classic" />
 <v:path v="m0,0 l 100,0 e" />
</v:shapetype></p>
<p>
Although the diagrams I presented in my discussion of
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/02/05/68017.aspx">
The layout of a COM object</a>
place the vtable at the beginning of the underlying C++ object,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/03/23/400938.aspx#401122">
there is no actual requirement that it be located there</a>.
It is perfectly legal for the vtable to be in the middle or even
at the end of the object, as long as the functions in the vtable
know how to convert the address of the vtable pointer to the
address of the underlying object.
Indeed, in the second diagram in that article, you can see that
the "q" pointer indeed points into the middle of the object.
</p>
<p>
Here's an example that puts the vtable at the end of the object:
</p>
<pre>
class Data {
public:
 Data() : m_cRef(1) { }
 virtual ~Data() { }
 LONG m_cRef;
};
class VtableAtEnd : Data, public IUnknown {
public:
 STDMETHODIMP QueryInterface(REFIID riid, void **ppvOut)
 {
  if (riid == IID_IUnknown) {
   AddRef();
   *ppvOut = static_cast&lt;IUnknown*&gt;(this);
   return S_OK;
  }
  *ppvOut = NULL;
   return E_NOINTERFACE;
 }
 STDMETHODIMP_(ULONG) AddRef()
 {
  return InterlockedIncrement(&m_cRef);
 }
 STDMETHODIMP_(ULONG) Release()
 {
  LONG cRef = InterlockedDecrement(&m_cRef);
  if (!cRef) delete this;
  return cRef;
 }
};
</pre>
<p>
The layout of this object may very well be as follows:
(Warning: Diagram requires a VML-enabled browser.)
</p>
<table BORDER=0>
<col SPAN=5 ALIGN=center>
<tr>
<td></td>
<td></td>
<td STYLE="border: solid 1px buttonshadow">&nbsp; &nbsp;Data.vtbl&nbsp; &nbsp;</td>
</tr>
<tr>
<td></td>
<td></td>
<td STYLE="border: solid 1px buttonshadow">&nbsp; &nbsp;m_cRef&nbsp; &nbsp;</td>
</tr>
<tr>
<td>p</td>
<td><v:shape class="v_arrow" type="#arrow" /></td>
<td STYLE="border: solid 1px buttonshadow">&nbsp; &nbsp;IUnknown.vtbl&nbsp; &nbsp;</td>
<td><v:shape class="v_arrow" type="#arrow" /></td>
<td STYLE="border: solid 1px buttonshadow; height: 2em">QueryInterface</td>
</tr>
<tr>
<td ROWSPAN=3 COLSPAN=4></td>
<td STYLE="border: solid 1px buttonshadow; height: 2em">AddRef</td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow; height: 2em">Release</td>
</tr>
</table>
<p>
Observe that in this particular object layout, the vtable
resides at the end of the object rather than at the beginning.
This is perfectly legitimate behavior.
Although it is the most common object layout to put the vtable
at the beginning, COM imposes no requirement that it be done
that way.
If you want to put your vtable at the end and use negative
offsets to access your object's members, then more power to you.
</p>
<p></html></p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-339183">
				<div id="div-comment-339183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Schend</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060120-00/?p=32583#comment-339183">
			January 20, 2006 at 12:52 pm</a>		</div>

		<p>Which browsers are VML enabled?  I don&#8217;t know if I&#8217;m seeing the diagram correctly or not&#8230; and it&#8217;s not as if Safari puts &quot;VML Enabled!&quot; on the splashscreen when it starts up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-339193">
				<div id="div-comment-339193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hello</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060120-00/?p=32583#comment-339193">
			January 20, 2006 at 12:52 pm</a>		</div>

		<p>Why does the address bar icon for this blog say &quot;.net&quot;?  At least in Firefox.  Isn&#8217;t this the pre-dotNet place?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-339203">
				<div id="div-comment-339203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">barrkel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060120-00/?p=32583#comment-339203">
			January 20, 2006 at 12:55 pm</a>		</div>

		<p>In fact, when implementing interfaces, the instance&#8217;s pointer to the virtual dispatch table cannot go at the start of the class. </p>
<p>When you cast an object instance to one of the interfaces it implements, the pointer you get back isn&#8217;t a pointer to the start of the object, because different interfaces will expect different functions in the vtable (two indirections from the instance pointer gets you to the start of the vtable).</p>
<p>Every class that implements an interface needs to create a vtable corresponding to that class-interface pair, and inside that table there are pointers to thunk functions which adjust the &#8216;this&#8217; pointer coming in to point to the &#8216;real&#8217; class (as opposed to interface) vtable, at the start of the object, before jumping to the start of the appropriate implementation of the interface method for that class.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-339243">
				<div id="div-comment-339243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060120-00/?p=32583#comment-339243">
			January 20, 2006 at 1:40 pm</a>		</div>

		<p>How to handle this in your code without your head blowing up:<br />
<br /> &#8211; C++? you&#8217;re lucky. The compiler does everything for you. Example: if you implement two interfaces whose inheritance trees are disjoint, you will find yourself with two distinct IUnknown interfaces. The first will be allocated at the beginning of the object, and its members will access the object fields normally, and the other will actually point to so-called &quot;adjustors&quot;, stub members which decrement &quot;this&quot; by the right amount and call the one true implementation<br />
<br /> &#8211; C? don&#8217;t worry! there&#8217;s a wonderful macro in the PSDK called CONTAINING_RECORD, which, given an inner pointer to an object, the object&#8217;s type and the field the pointer points to, returns the object pointer, hiding all the horrible casting and pointer arithmetic. You can use it to implement &quot;adjustors&quot; by yourself</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-339253">
				<div id="div-comment-339253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.willcoxson.net' rel='external nofollow' class='url'>Joseph Willcoxson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060120-00/?p=32583#comment-339253">
			January 20, 2006 at 1:41 pm</a>		</div>

		<p>In the MFC hierarchy, the root COM capabable object is CCmdTarget which is derived from CObject.  Which means that the vtable is offset from the beginning of the object.  The way MFC does COM is to have a buch of nested inner objects each with an IUnknown implementation.  MFC has a macro (using offsets) that provides a pointer to the containing object.</p>
<p>BTW, you have a very informative blog.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-patriotb odd alt thread-odd thread-alt depth-1" id="comment-339263">
				<div id="div-comment-339263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PatriotB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060120-00/?p=32583#comment-339263">
			January 20, 2006 at 1:43 pm</a>		</div>

		<p>&quot;Why does the address bar icon for this blog say &quot;.net&quot;?&quot;</p>
<p>The icon is for the entire blogs.msdn.com domain.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-339273">
				<div id="div-comment-339273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060120-00/?p=32583#comment-339273">
			January 20, 2006 at 2:05 pm</a>		</div>

		<p>Shouldn&#8217;t the terminology used here be &quot;vtable pointer&quot;?  The vtable itself is not contained in the object (multiple objects of the same class all use the same vtable).  Rather, each object has a pointer (or a set of pointers) to the vtable(s) for the class.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-339283">
				<div id="div-comment-339283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://orcmid.com/BlunderDome/clueless' rel='external nofollow' class='url'>orcmid</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060120-00/?p=32583#comment-339283">
			January 20, 2006 at 3:15 pm</a>		</div>

		<p>Your post reminds me of something I&#8217;ve always wondered about.  I agree with mikeb that we should call it the vtable pointer, too.</p>
<p>ASSUMPTION: Suppose I actually had my vtable (not just the pointer) built into the object&#8217;s instance data.  I obviously can do that, it is just an array of pointers to function entries according to the COM binary standard.</p>
<p>OPPORTUNITY: This leaves open the possibility of making the vtable state-full and having methods that update the vtable based on whatever is going on.  This is an optimization case for moving state into the pointers rather than having methods do lots of case statements and other logic to get to the behavior that corresponds to the current state.</p>
<p>QUESTION: The question is, are compilers allowed to optimize all the way down to the function pointer so that a change in state might not be noticed?  That is, altering a vtable entry a side-effect that the optimization could cause to be missed based on a compiler-implementation assumption that the vtable is invariant?</p>
<p>NEXT QUESTION: If the answer to that question is &quot;yes,&quot; is there a way to specify volatility of the pointers in the vtable?  I&#8217;m not sure where to look to find this. </p>
<p>QUESTION AFTER THOSE: If the answer to the first question is &quot;no&quot; (or there&#8217;s a volatility hint that can be made to the compiler), the next question is how about having the function pointer in the vtable point to custom code that was built into the object-instance data (directly or indirectly).  I figure this would fire off DEP, and that would be a pain, but I had to ask.</p>
<p>OPPORTUNITIES:  There are situations in applicative-/functional-programming where those are all great implementation optimizations.  Hmm, I guess the CLR would not be a great place to try this [;&lt;).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-339313">
				<div id="div-comment-339313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mindon.net/~ayhal' rel='external nofollow' class='url'>A Tykhyy</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060120-00/?p=32583#comment-339313">
			January 20, 2006 at 4:49 pm</a>		</div>

		<p>&#8212;<br />
<br />QUESTION: The question is, are compilers allowed to optimize all the way down to the function pointer so that a change in state might not be noticed?<br />
<br />&#8212;<br />
<br />C++ compilers are allowed to eshew vtbl and call the function directly if the compiler knows exactly which type does the object have. Aggressive optimization might cache even the function pointer. G++ caches the vtbl pointer, msvc does no caching.</p>
<p>&#8212;<br />
<br />NEXT QUESTION: If the answer to that question is &quot;yes,&quot; is there a way to specify volatility of the pointers in the vtable? I&#8217;m not sure where to look to find this.<br />
<br />&#8212;<br />
<br />No, there is no way to specify this. The point of strictly typed languages like C++ is that the types are immutable at runtime. You could emulate this sort of behaviour of course, but this defeats the whole purpose of a strictly typed language. I would venture that you need to modify your design, probably two different levels of abstraction are conflated together.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-339353">
				<div id="div-comment-339353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">schwiet</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060120-00/?p=32583#comment-339353">
			January 20, 2006 at 5:31 pm</a>		</div>

		<p>orcmid, with regards to your comment:</p>
<p>&quot;<br />
<br />This is an optimization case for moving state into the pointers rather than having methods do lots of case statements and other logic to get to the behavior that corresponds to the current state.<br />
<br />&quot;</p>
<p>I think what you are trying to achieve would be better implemented with the State pattern rather than hacking the v-table.  The book &quot;Refactoring to Patterns&quot; has an excellent discussion of contrasting inheritance with the state pattern.  Look for their discussion comparing when to &quot;refactor to base class&quot; versus &quot;refactor to State pattern&quot;.</p>
<p>If you explore implementations of the state pattern, you&#8217;ll find alternatives to the switch/case type of implementations.  Similar to having a modifiable vtable pointer, you can have a pointer to a &quot;state&quot; object.  The state object is a derived from a state base class, with virtual functions overloaded to modify how objects in that state respond to particular events.</p>
<p>Implementing the state patten by hacking the v-table would be an interesting language trick, but it would significantly decrease the maintainability of the code.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-339363">
				<div id="div-comment-339363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060120-00/?p=32583#comment-339363">
			January 20, 2006 at 8:00 pm</a>		</div>

		<p>How many people actually went to the trouble of writing a COM object in C?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-339373">
				<div id="div-comment-339373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jroller.com/page/kame/' rel='external nofollow' class='url'>Damien B</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060120-00/?p=32583#comment-339373">
			January 20, 2006 at 10:12 pm</a>		</div>

		<p>&quot;Which browsers are VML enabled?&quot;</p>
<p>Actually the way it is done, it&#8217;s &quot;behavior&quot; enabled browser + a VML implicit behavior. The first is still not valid CSS, for the second, VML is a proposition which has been abandonned in favor of SVG. So basically, some abandonned web browsers are VML enabled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-339413">
				<div id="div-comment-339413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Steward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060120-00/?p=32583#comment-339413">
			January 21, 2006 at 8:07 am</a>		</div>

		<p>Alex: I&#8217;ve written an IDispatch in Assembly.  Ml was the only free Microsoft compiler for a while :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-339433">
				<div id="div-comment-339433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cypherpunks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060120-00/?p=32583#comment-339433">
			January 22, 2006 at 2:00 am</a>		</div>

		<p>All the VML does is to make an arrow between the p and IUnknown.vtbl   and QueryInterface</p>
<p>It is an old alternative for graphics that MS tried to make a standard but failed. IE is pretty much the only browser that does it. Kind of like NN4 and JSSS (Netscape&#8217;s version of CSS)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-339883">
				<div id="div-comment-339883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://orcmid.com/BlunderDome/clueless/' rel='external nofollow' class='url'>orcmid</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060120-00/?p=32583#comment-339883">
			January 23, 2006 at 6:47 pm</a>		</div>

		<p>schwiet:<br />
<br />   Well, the pattern is the same either way, at an abstract level.  I think the difference here is one between aggregation and containment, and there are two engineering considerations:<br />
<br />  1. We&#8217;re talking about a COM interface, so it has a well-defined storage structure and I don&#8217;t think that setting function pointers and building vtable is quite all that bad &#8212; not obvious but it can be done in a way that is clean and maintainable.<br />
<br />  2. We&#8217;re out to save the cost of copying parameters and stack deepening for the trivial case of relaying into different implementations of the same method, all with the same signature.  [Keeping the this-pointer straight might be a challenge, I&#8217;ll grant you that, but my experience is that is always a challenge.  That may be the greatest barrier to easy implementation of the alternative methods and I haven&#8217;t tested the trade-offs there.]  I&#8217;m also out to save the cost of multiple instances and dynamic constructor-execution to accomplish these simple variations.</p>
<p>Having said all of that, I think the state pattern is something useful to keep in mind, especially when we&#8217;re talking about more complex state-management cases.</p>
<p>Anton Tykhyy:<br />
<br />  [My wife is a potter. I must show her the tea set on your site.  I know she&#8217;ll love it.]<br />
<br />  Type invariance is being preserved.  The signatures of the methods are not altered and (praise be) COM interfaces don&#8217;t do generics.  The type doesn&#8217;t change, the implementation of the method changes.</p>
<p>Since, with COM interfaces, it is not permissible (and usually not possible) to guess the base class (or any class) from the interface, and the methods are all virtual, the compiler can&#8217;t short-circuit the pointer chasing.</p>
<p>I am not sure how to confirm that VC++ won&#8217;t cache the function pointer though.  I guess I&#8217;ll have to just try it and see what happens.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

