<html>
<head>
<title>What's the difference between an asynchronous PIPE_WAIT pipe and a PIPE_NOWAIT pipe?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What&#8217;s the difference between an asynchronous PIPE_WAIT pipe and a PIPE_NOWAIT pipe?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 14, 2011 / year-entry #10</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110114-00/?p=11753</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">When you operate on named pipes, you have a choice of opening them in PIPE_WAIT mode or PIPE_NOWAIT mode. When you read from a PIPE_WAIT pipe, the read blocks until data becomes available in the pipe. When you read from a PIPE_NOWAIT pipe, then the read completes immediately even if there is no data in...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>When you operate on named pipes, you have a choice of opening them in <code>PIPE_<wbr>WAIT</wbr></code> mode or <code>PIPE_<wbr>NOWAIT</wbr></code> mode. When you read from a <code>PIPE_<wbr>WAIT</wbr></code> pipe, the read blocks until data becomes available in the pipe. When you read from a <code>PIPE_<wbr>NOWAIT</wbr></code> pipe, then the read completes immediately even if there is no data in the pipe. But how is this different from a <code>PIPE_<wbr>WAIT</wbr></code> pipe opened in asynchronous mode by passing <code>FILE_<wbr>FLAG_<wbr>OVERLAPPED</wbr></wbr></code>?</p>
<p> The difference is in when the I/O is deemed to have completed. </p>
<p> When you issue an overlapped read against a <code>PIPE_<wbr>WAIT</wbr></code> pipe, the call to <code>Read&shy;File</code> returns immediately, but the completion actions do not occur until  there is data available in the pipe. (<i>Completion actions</i> are things like setting the event, running the completion routine, or queueing a completion to an I/O completion port.) On the other hand, when you issue a read against a <code>PIPE_<wbr>NOWAIT</wbr></code> pipe, the call to <code>Read&shy;File</code> returns immediately <i>with completion</i>&mdash;if the pipe is empty, the read completes with a read of zero bytes and the error <code>ERROR_<wbr>NO_<wbr>DATA</wbr></wbr></code>. </p>
<p> Here's a timeline, for people who prefer tables. </p>
<table border="1" bordercolor="black" style="border-collapse: collapse" cellpadding="3">
<tbody>
<tr>
<th>Event     </th>
<th valign="baseline">Asynchronous <code>PIPE_WAIT</code></th>
<th valign="baseline"><code>PIPE_NOWAIT</code></th>
</tr>
<tr>
<td colspan="3" align="center">pipe initially empty</td>
</tr>
<tr>
<td valign="baseline">ReadFile</td>
<td valign="baseline">Returns immediately with <code>ERROR_<wbr>IO_<wbr>PENDING</wbr></wbr></code></td>
<td valign="baseline">Returns immediately with <code>ERROR_<wbr>NO_<wbr>DATA</wbr></wbr></code><br>         I/O completes with 0 bytes</td>
</tr>
<tr>
<td colspan="3" align="center">time passes</td>
</tr>
<tr>
<td valign="baseline">Data available</td>
<td valign="baseline">I/O completes with <i>n</i>&nbsp;&gt;&nbsp;0 bytes</td>
<td valign="baseline"></td>
</tr>
</tbody>
</table>
<p> If you use the <code>PIPE_<wbr>NOWAIT</wbr></code> flag, then the only way to know whether there is data is to poll for it. There is no way to be notified when data becomes available. </p>
<p> As the documentation notes, <code>PIPE_<wbr>NOWAIT</wbr></code> remains solely for compatibility with LAN Manager&nbsp;2.0. Since the only way to use pipes created as <code>PIPE_<wbr>NOWAIT</wbr></code> is to poll them, this is obviously not a recommended model for a multitasking operating system. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-888303">
				<div id="div-comment-888303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110114-00/?p=11753#comment-888303">
			January 14, 2011 at 9:00 am</a>		</div>

		<p>Very useful comparison. &nbsp;Thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-888313">
				<div id="div-comment-888313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110114-00/?p=11753#comment-888313">
			January 14, 2011 at 9:01 am</a>		</div>

		<p>Or, PIPE_WAIT with overlapped is the RSX model, PIPE_NOWAIT is the Unix model :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-888323">
				<div id="div-comment-888323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110114-00/?p=11753#comment-888323">
			January 14, 2011 at 9:21 am</a>		</div>

		<p>Does pipe IO use IRPs and FILE_OBJECT? There is a big problem with a handle opened for synchronous IO. You can&#39;t close the handle (it will hang) until a pending read operation completes. If there is no data, you&#39;re hosed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-888333">
				<div id="div-comment-888333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110114-00/?p=11753#comment-888333">
			January 14, 2011 at 9:31 am</a>		</div>

		<p>@dave: select() is the Unix model. On Unix, select() works on everything.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-888353">
				<div id="div-comment-888353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110114-00/?p=11753#comment-888353">
			January 14, 2011 at 10:13 am</a>		</div>

		<p>@Alex I believe you can call CancelIo(handle) if you want to abort the read.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-888363">
				<div id="div-comment-888363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110114-00/?p=11753#comment-888363">
			January 14, 2011 at 12:03 pm</a>		</div>

		<p>Joshua: In the Unix model, select() only works on files (or things you can call creat() on). You can&#39;t use select() to tell you when a process has exited or a semaphore is unlocked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-888373">
				<div id="div-comment-888373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tihiy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110114-00/?p=11753#comment-888373">
			January 14, 2011 at 1:02 pm</a>		</div>

		<p>Is there any Windows API layer or technology which can be used instead of NT named pipes without much pain? I.e. some alternate IPC mechanism with same principles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-888383">
				<div id="div-comment-888383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110114-00/?p=11753#comment-888383">
			January 14, 2011 at 1:12 pm</a>		</div>

		<p>Re: Tihiy</p>
<p>Why? &nbsp;If you want reliable two-way byte or message exchange, why look for something other than the thing that is designed for reliable two-way byte or message exchange?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-888393">
				<div id="div-comment-888393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Iain Clarke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110114-00/?p=11753#comment-888393">
			January 14, 2011 at 2:56 pm</a>		</div>

		<p>@Tihiy</p>
<p>I echo &quot;dave&quot;&#39;s response &#8211; if you want something like named pipes, then use named pipes!</p>
<p>The nearest alternative I can think of would be MSMQ.</p>
<p>Iain.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-888403">
				<div id="div-comment-888403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110114-00/?p=11753#comment-888403">
			January 15, 2011 at 12:37 am</a>		</div>

		<p>@ Alex Grigoriev and @Maurits</p>
<p>CancelIo is probably not what you want &#8211; it only works if called from the (presumably blocked) thread that issued the read. I guess it is only intended for use with overlapped IO.</p>
<p>The MSDN documentation is very clear and specific about this:</p>
<p>&quot;CancelIo:</p>
<p>Cancels all pending input and output (I/O) operations that are issued by the calling thread for the specified file. The function does not cancel I/O operations that other threads issue for a file handle.</p>
<p>To cancel I/O operations from another thread, use the CancelIoEx function.&quot;</p>
<p>So you probably want CancelIoEx.</p>
<p>regards</p>
<p>ML</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-888413">
				<div id="div-comment-888413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110114-00/?p=11753#comment-888413">
			January 15, 2011 at 12:52 am</a>		</div>

		<p>Tihiy: there&#39;s always TCP sockets if you want reliable byte transport, works great even through localhost&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-888423">
				<div id="div-comment-888423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drizzt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110114-00/?p=11753#comment-888423">
			January 15, 2011 at 2:09 am</a>		</div>

		<p>@Raymond: but&#8230;is there really someone asking for thing like this?</p>
<p>I mean, it&#39;s so damn obvious, it took me 5 minutes and 2 readings of the post to understand what was it all about (nothing at all, in the end). Is the level of computer programmers so low?</p>
<div class="post">[<i>A lot of my articles are &quot;restating the obvious&quot;-type content inspired by somebody (in this case, a customer) who asked about it. I used to title them &quot;restating the obvious&quot; but I&#39;ve gotten lazy and don&#39;t bother much any more. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-brunopitrus even thread-even depth-1" id="comment-888463">
				<div id="div-comment-888463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kinokijuf' rel='external nofollow' class='url'>kinokijuf</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110114-00/?p=11753#comment-888463">
			January 16, 2011 at 5:56 am</a>		</div>

		<p>&lt;sarcasm&gt;You used to title them „restating the obvious”, but that would be just restating the obvious, right?&lt;/sarcasm&gt;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-888553">
				<div id="div-comment-888553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110114-00/?p=11753#comment-888553">
			January 17, 2011 at 7:39 am</a>		</div>

		<p>@Martin:</p>
<p>No, I&#39;m not talking about CancelIo. I&#39;m talking about CloseHandle.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

