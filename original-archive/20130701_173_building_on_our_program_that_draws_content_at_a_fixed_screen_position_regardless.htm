<html>
<head>
<title>Building on our program that draws content at a fixed screen position regardless of window position</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Building on our program that draws content at a fixed screen position regardless of window position</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 1, 2013 / year-entry #174</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130701-00/?p=3943</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's Little Program uses the technique we saw last week of drawing content at a fixed screen position, regardless of window position, but adds a little physics to it. Start with our scratch program and make these changes: #include <math.h> // physics requires math (go figure) #define Omega 2.0f class Motion { public: Motion() :...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program
uses the technique we saw last week of
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/06/24/10428001.aspx">
drawing content at a fixed screen position, regardless of window position</a>,
but adds a little physics to it.
</p>
<p>
Start with our
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/07/23/54576.aspx">
scratch program</a>
and make these changes:
</p>
<pre>
#include &lt;math.h&gt; // physics requires math (go figure)

#define Omega 2.0f

class Motion
{
public:
 Motion() : x0(0.0f), v0(0.0f) { RecalcCurve(); }

 void ShiftOrigin(double dx)
 {
  Tick();
  v0 = v;
  x0 = x + dx;
  RecalcCurve();
 }

 double Pos() { return x; }
 bool Moving() { return fabs(x) &gt;= 0.5f || fabs(v) &gt;= 1.0f; }

 void Tick() {
  t = (GetTickCount() - tm0) / 1000.0f;
  double ewt = exp(-Omega * t);
  double abt = A + B * t;
  x = abt * ewt;
  v = (-Omega * abt + B) * ewt;
 }

private:
 void RecalcCurve() {
  A = x0;
  B = v0 + Omega * x0;
  tm0 = GetTickCount();
 }
public:
 DWORD tm0;
 double x0, v0, A, B, t, x, v;
};
</pre>
<p>
The <code>Motion</code> class simulates damped motion.
Ask a physicist how it works.
</p>
<pre>
Motion g_mX;  // motion in x-direction
Motion g_mY;  // motion in y-direction

POINT g_ptRest; // desired rest point

POINT CalcRestPoint(HWND hwnd)
{
    RECT rc;
    GetClientRect(hwnd, &amp;rc);
    MapWindowRect(hwnd, HWND_DESKTOP, &amp;rc);
    POINT pt = { rc.left + (rc.right - rc.left) / 2,
                 rc.top + (rc.bottom - rc.top) / 2 };
    return pt;
}
</pre>
<p>
The rest point is the center of the window.
</p>
<pre>
void ScheduleFrame(HWND hwnd)
{
    InvalidateRect(hwnd, 0, TRUE);
    KillTimer(hwnd, 1);
}

VOID CALLBACK InvalidateMe(HWND hwnd, UINT, UINT_PTR, DWORD)
{
    ScheduleFrame(hwnd);
}
</pre>
<p>
To schedule the painting of a new frame,
we invalidate our window and
cancel any outstanding animation timer
(because the timer is no longer needed
now that a paint has been scheduled).
</p>
<pre>
void OnWindowPosChanged(HWND hwnd, LPWINDOWPOS lpwpos)
{
    if (IsWindowVisible(hwnd)) {
        POINT ptRest = CalcRestPoint(hwnd);
        if (ptRest.x != g_ptRest.x ||
            ptRest.y != g_ptRest.y) {
          g_mX.ShiftOrigin(g_ptRest.x - ptRest.x);
          g_mY.ShiftOrigin(g_ptRest.y - ptRest.y);
          ScheduleFrame(hwnd);
        }
        g_ptRest = ptRest;
    }
}

    HANDLE_MSG(hwnd, WM_WINDOWPOSCHANGED, OnWindowPosChanged);
</pre>
<p>
If the window changes its rest point while it is vislble,
then move the origin of the motion variables and schedule
a new frame of animation.
</p>
<p>
Okay, here's the fun part: Drawing the moving circle.
</p>
<pre>
void
PaintContent(HWND hwnd, PAINTSTRUCT *pps)
{
 RECT rc;

 g_mX.Tick();
 g_mY.Tick();

 POINT ptOrigin = { 0, 0 };
 ClientToScreen(hwnd, &amp;ptOrigin);
 POINT ptOrg;
 SetWindowOrgEx(pps-&gt;hdc, ptOrigin.x, ptOrigin.y, &amp;ptOrg);

 int x = g_ptRest.x + static_cast&lt;int&gt;(floor(g_mX.Pos() + 0.5f));
 int y = g_ptRest.y + static_cast&lt;int&gt;(floor(g_mY.Pos() + 0.5f));
 
 Ellipse(pps-&gt;hdc, x - 20, y - 20, x + 20, y + 20);
 SetWindowOrgEx(pps-&gt;hdc, ptOrg.x, ptOrg.y, nullptr);

 if (g_mX.Moving() || g_mY.Moving()) {
  SetTimer(hwnd, 1, 30, InvalidateMe);
 }
}
</pre>
<p>
We tick the motion variables to get their current locations,
then
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/06/24/10428001.aspx">
tinker with our window origin because we're going to be drawing
based on screen coordinates</a>.
We then draw a circle at the current animated position,
and if the circle is still moving, we schedule a timer to draw
the next frame.
</p>
<p>
Finally, we initialize our rest point before we show the window,
so that the circle starts out at rest.
</p>
<pre>
        <font COLOR=blue>g_ptRest = CalcRestPoint(hwnd);</font>
        ShowWindow(hwnd, nShowCmd);
</pre>
<p>
And that's it.
Run the program and move it around.
The circle will seek the center of the window,
wherever it is.
</p>
<p>
(For extra credit, you can also add 
</p>
<pre>
UINT OnNCHitTest(HWND hwnd, int x, int y)
{
    UINT ht = FORWARD_WM_NCHITTEST(hwnd, x, y, DefWindowProc);
    if (ht == HTCLIENT) ht = HTCAPTION;
    return ht;
}
    HANDLE_MSG(hwnd, WM_NCHITTEST, OnNCHitTest);
</pre>
<p>
so that
<a HREF="http://support.microsoft.com/kb/320687">
the window can be dragged by its client area</a>.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1064403">
				<div id="div-comment-1064403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bobo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130701-00/?p=3943#comment-1064403">
			July 1, 2013 at 7:38 am</a>		</div>

		<p>Fixmes:</p>
<p>1. TimerProc ahould be InvalidateMe</p>
<p>2. Circle shakes around while dragging (drag window in s wide circle)</p>
<div class="post">[<em>#1 is fixed, thanks. The circle also flickers a lot. Fixing these glitches I leave as an exercise. My goal was to get the general effect because it sounded fun. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1064433">
				<div id="div-comment-1064433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/wswiktor_4000_poczta.fm/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>wswiktor@poczta.fm</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130701-00/?p=3943#comment-1064433">
			July 1, 2013 at 8:11 am</a>		</div>

		<p>Exercise: rewrite the program so it uses Windows Animation Manager.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1064443">
				<div id="div-comment-1064443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130701-00/?p=3943#comment-1064443">
			July 1, 2013 at 8:35 am</a>		</div>

		<p>@Azarien: ew! That is cheating.</p>
<p>It can be done without going there. If you got the knowledge that is.</p>
<p>Hint: Games do it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1064513">
				<div id="div-comment-1064513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/passport_4000_gentlyusedunderwear.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>passport@gentlyusedunderwear.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130701-00/?p=3943#comment-1064513">
			July 1, 2013 at 1:04 pm</a>		</div>

		<p>I wonder why this was written in C++ when it doesn&#39;t use any C++ features? (using a class a simple struct is not &quot;using C++ features&quot;)</p>
<div class="post">[<em>If &quot;struct with methods&quot; is not a C++ feature, and it&#39;s not a C feature, then what is it? (I was not aware of the rule that says &quot;You are not allowed to use any C++ features unless you use all of them.&quot; I can&#39;t find it in my copy of the C++11 standard.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1064523">
				<div id="div-comment-1064523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/passport_4000_gentlyusedunderwear.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>passport@gentlyusedunderwear.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130701-00/?p=3943#comment-1064523">
			July 1, 2013 at 1:05 pm</a>		</div>

		<p>err, Needs editâ€¦ (using a class as a simple struct is not &quot;using C++ features&quot;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1064543">
				<div id="div-comment-1064543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JDP                     </cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130701-00/?p=3943#comment-1064543">
			July 1, 2013 at 2:09 pm</a>		</div>

		<p>Roysna: Probably because it&#39;s working off the scratch program, which was written in C++? I doubt Raymond would start with a whole new program for every sample he does. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1064623">
				<div id="div-comment-1064623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130701-00/?p=3943#comment-1064623">
			July 2, 2013 at 12:50 am</a>		</div>

		<p>Nice impl. on the motion-curve, but I generally prefer the simpler and easier to understand spring simulation method for that effect:</p>
<p>DWORD lastTick;</p>
<p>double target, position, velocity;</p>
<p>bool InMotion() { return !velocity &amp;&amp; position == target; }</p>
<p>void Tick() {</p>
<p>&nbsp; DWORD tick = GetTickCount();</p>
<p>&nbsp; double seconds = (tick &#8211; lastTick);</p>
<p>&nbsp; lastTick = tick;</p>
<p>&nbsp; velocity += (target &#8211; position);</p>
<p>&nbsp; velocity /= DAMPENING; // ~= 2.0 is good</p>
<p>&nbsp; position += (velocity * seconds);</p>
<p>&nbsp; if (abs(velocity) &lt; 1.0 &amp;&amp; abs(position &#8211; target) &lt; 1.0) { // close enough: stop simulating</p>
<p>&nbsp; &nbsp; &nbsp;velocity = 0;</p>
<p>&nbsp; &nbsp; &nbsp;position = target;</p>
<p>&nbsp; }</p>
<p>}</p>
<div class="post">[<em>The downside of this version is that it requires ticks to arrive at relatively high and steady frequency, since it is doing numerical integration. If, for example, the application takes a page fault and gets stuck on I/O for for 2 seconds, the ball will overshoot the target by a wide margin. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1064633">
				<div id="div-comment-1064633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130701-00/?p=3943#comment-1064633">
			July 2, 2013 at 2:05 am</a>		</div>

		<p>Some bugfixes: seconds should of course be (tick &#8211; lastTick) / 1000.0;, and InMotion() should be inverted: (velocity || position != target)</p>
<p>Try it with DAMPENING less than 2.0 for a nice overshooting springy effect, or less than 1 to break the universe :) (really it should be velocity /= 1 + DAMPENING;, but that&#39;s no fun)</p>
<p>Note also that the positions this gives you are absolute, you can straight up update the targets at any time to any value and the spring response: I assume the motion curve is doing the int x = g_ptRest.x + &#8230;; because it needed to be in relative to not wig out when moved.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1064643">
				<div id="div-comment-1064643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130701-00/?p=3943#comment-1064643">
			July 2, 2013 at 4:23 am</a>		</div>

		<p>If C had been invented in the UK, would we #include &quot;maths.h&quot; instead?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1064903">
				<div id="div-comment-1064903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Boyd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130701-00/?p=3943#comment-1064903">
			July 2, 2013 at 1:03 pm</a>		</div>

		<p>When i got my Nexus 4 (i.e. Android) last year, it drove me nuts trying to figure out why &quot;momentum scrolling&quot; didn&#39;t feel as nice as it did on the iPhone. i would flick a little, and it would scroll a little. i would flick a lot, and it would scroll a lot. i couldn&#39;t find anything obviously &quot;wrong&quot;, yet it didn&#39;t &quot;feel&quot; right. Going back to the iPhone; flicking and scrolling, and timing, and counting, i realized what Apple does that is non-obvious, ignores physics, but &quot;feels&quot; better:</p>
<p>Scrolling under it&#39;s own momentum lasts 3 seconds. Always. Whether you just flicked it a little, or you did a massive throw, the momentum scrolling will always take 3 seconds to come to a stop.</p>
<p>You would think that a massive throw should cause the scrolling to last longer, and a little flick should only last a moment. And as a technically minded, computer programmer, who understands physics, you would be right; momentum and friction should lead to exponential speed decay.</p>
<p>Except usability doesn&#39;t care about physics, it cares about what &quot;feels&quot; right. </p>
<p>i&#39;ve forgotten the math, but it turned out the math became much simpler when you decided the exponential decay parameters based on initial velocity and a known 3 second duration. It amounted to a simple multiplication factor each tick.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1065143">
				<div id="div-comment-1065143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130701-00/?p=3943#comment-1065143">
			July 3, 2013 at 7:16 am</a>		</div>

		<p>Resizing will not make the circle jump around but window movement will. I can&#39;t figure out why. Does anyone know why?</p>
<p>Is it how the window position is updated?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

