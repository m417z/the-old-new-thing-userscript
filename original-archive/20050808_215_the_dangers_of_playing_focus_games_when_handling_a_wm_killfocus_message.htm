<html>
<head>
<title>The dangers of playing focus games when handling a WM_KILLFOCUS message</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The dangers of playing focus games when handling a WM_KILLFOCUS message</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 8, 2005 / year-entry #216</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050808-16/?p=34673</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">I had noted last year that WM_KILLFOCUS is the wrong time to do field validation. Here's another example of how messing with the focus during a WM_KILLFOCUS message can create confusion. Consider an edit control that displays feedback via a balloon tip. For example, password edit controls often warn you if you're typing your password...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
I had noted last year that
<a href="http://blogs.msdn.com/oldnewthing/archive/2004/04/19/115912.aspx">
<code>WM_KILLFOCUS</code> is the wrong time to do field validation</a>.
Here's another example of how messing with the focus during a
<code>WM_KILLFOCUS</code> message can create confusion.
</p>
<p>
Consider an edit control that displays feedback via a balloon tip.
For example, password edit controls often warn you if you're typing
your password while CapsLock is in effect.
One of the things you probably want to do is to remove the balloon
tip if the user moves focus to another control, since there's no
point telling the user about a problem with something they aren't
using.
You might be tempted to subclass the edit control and do
something like this:
</p>
<pre>
LRESULT CALLBACK EditSubclass(
    HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
  switch (uMsg) {
  ...
  case WM_KILLFOCUS:
    if (hwndBalloonTip) {
      DestroyWindow(hwndBalloonTip);
      hwndBalloonTip = NULL;
    }
    break;
  ...
  }
  return CallWindowProc(prevWndProc, hwnd, uMsg, wParam, lParam);
}
</pre>
<p>
When you give this code a shot, it works great...
unless the user clicks <strong>on the balloon tip itself</strong>
the edit control's caret (the blinking insertion point thingie) disappears.
What happened?
</p>
<p>
What happened is that you gummed up the focus change process by
destroying the window that focus was going to!
The focus change process goes like this:
</p>
<ul>
<li>Put focus on new focus window.
<li>Send WM_KILLFOCUS to old focus window (if any).
<li>Send WM_SETFOCUS to new focus window (if any).
</ul>
<p>
But in the second step, we <strong>destroyed the new focus window</strong>.
When the focus window is destroyed, the window manager tries to find a new
focus window, and it settles upon the edit control itself.
This starts a recursive focus change cycle,
telling the edit control that it now has focus again.
</p>
<p>
Let's look at the flow in this nested focus change scenario
when the user clicks on the tooltip window.
</p>
<ul>
<li>Put focus on tooltip.
<li>Send WM_KILLFOCUS to edit control.
<ul>
<li>EditSubclass destroys the tooltip.
<ul>
<li>Window manager puts focus on the edit control.
<li>Nobody to send WM_KILLFOCUS to.
<li>Send WM_SETFOCUS to edit control.
<ul>
<li>EditSubclass passes WM_SETFOCUS to the original window procedure.
            </ul>
</ul>
<li>EditSubclass passes WM_KILLFOCUS to the original window procedure.
    </ul>
<li>Send WM_SETFOCUS to tooltip - fails (tooltip was destroyed).
</ul>
<p>
Do you see the problem yet?
</p>
<p>
Look at the message traffic as it reaches the original edit control window
procedure:
</p>
<ul>
<li>WM_SETFOCUS (from the nested focus change)
<li>WM_KILLFOCUS (from the original focus change)
</ul>
<p>
As far as the edit control is concerned, it gained focus then lost it.
Therefore, no caret, since the edit control displays a caret only when
it has focus, and your recursive focus changing has resulted in the
edit control thinking it doesn't have focus even though it does.
</p>
<p>
There are many ways out of this mess.
</p>
<p>
First, notice that you don't need to subclass the edit control;
you can just react to the <code>EN_KILLFOCUS</code> notification.
Second, you can respond to the <code>EN_KILLFOCUS</code> by
posting yourself a message and destroying the tooltip on receipt
of that posted message.
By doing it via a posted message,
you avoid the recursive focus change since your work is now being
done outside a focus change cycle.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-295323">
				<div id="div-comment-295323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hey</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050808-16/?p=34673#comment-295323">
			August 8, 2005 at 11:39 am</a>		</div>

		<p>But its OK to using WM_KILLFOCUS if you aren&#8217;t creating any windows, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-295373">
				<div id="div-comment-295373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050808-16/?p=34673#comment-295373">
			August 8, 2005 at 4:13 pm</a>		</div>

		<p>Please read the linked article &quot;WM_KILLFOCUS is the wrong time to do validation&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-295423">
				<div id="div-comment-295423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050808-16/?p=34673#comment-295423">
			August 9, 2005 at 3:30 am</a>		</div>

		<p>Basicaly, the problem is that EditSubclass first destroys tooltip, then pass WM_KILLFOCUS to original edit proc. Should it first send WM_KILLFOCUS to the edit window, things will work fine</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-295433">
				<div id="div-comment-295433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050808-16/?p=34673#comment-295433">
			August 9, 2005 at 5:04 am</a>		</div>

		<p>It amazes me that these things still cause problems at this stage of win32 development.</p>
<p>Surely there&#8217;s a big list somewhere, that says: &quot;If you want to achieve result &#8216;A&#8217;, write code &#8216;X&#8217;; if you want to achieve result &#8216;B&#8217;, write code &#8216;Y&#8217;&quot;, and so on?</p>
<p>I don&#8217;t do win32 UI directly using the APIs, so I can&#8217;t answer that question. But if I started to do it, I&#8217;d sure be looking for that list! Why try re-inventing the wheel?</p>
<p>TC</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-295483">
				<div id="div-comment-295483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">carlso</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050808-16/?p=34673#comment-295483">
			August 9, 2005 at 10:53 am</a>		</div>

		<p>There&#8217;s no need to create a user-defined message in order to do a PostMessage so that you can destroy the window outside of the focus processing cycle.  Just use WM_CLOSE.</p>
<p>For example:</p>
<p>  case WM_KILLFOCUS:<br />
<br />    if (hwndBalloonTip) {<br />
<br />      PostMessage(hwndBalloonTip, WM_CLOSE, 0, 0);<br />
<br />      hwndBalloonTip = NULL;<br />
<br />    }<br />
<br />    break;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-295533">
				<div id="div-comment-295533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050808-16/?p=34673#comment-295533">
			August 9, 2005 at 11:42 am</a>		</div>

		<p>If the tooltip balloon window is owned by a different thread, wouldn&#8217;t you have a race between the posted message being handled and your window procedure finishing?  If the posted message wins, you might have the same problem.</p>
<p>That may not even be an issue, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-295583">
				<div id="div-comment-295583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/08/09/449437.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050808-16/?p=34673#comment-295583">
			August 9, 2005 at 12:22 pm</a>		</div>

		<p>It gums up the activation system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-296633">
				<div id="div-comment-296633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Koro</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050808-16/?p=34673#comment-296633">
			August 12, 2005 at 5:07 pm</a>		</div>

		<p>What is the window you destroy in WM_KILLFOCUS handles WM_MOUSEACTIVATE by returning MA_NOACTIVATE?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

