<html>
<head>
<title>Sabotaging yourself: Closing a handle and then using it</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Sabotaging yourself: Closing a handle and then using it</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 26, 2012 / year-entry #226</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer reported a problem with the WaitForSingleObject function: I have a DLL with an Initialize() function and an Uninitialize() function. The code goes like this: HANDLE FooMutex; BOOL Initialize() { ... unrelated initialization stuff ... FooMutex = CreateMutex(NULL, FALSE, "FooMutex"); ... error checking removed ... return TRUE; } BOOL Uninitialize() { // fail if...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer reported a problem with the <code>WaitForSingleObject</code>
function:
</p>
<blockquote CLASS=q>
<p>
I have a DLL with an
<code>Initialize()</code> function and an
<code>Uninitialize()</code> function.
The code goes like this:
</p>
<pre>
HANDLE FooMutex;

BOOL Initialize()
{
 ... unrelated initialization stuff ...
 FooMutex = CreateMutex(NULL, FALSE, "FooMutex");
 ... error checking removed ...
 return TRUE;
}

BOOL Uninitialize()
{
 // fail if never initialized
 if (FooMutex == NULL) return FALSE;

 // fail if already uninitialized
 if (WaitForSingleObject(FooMutex, INFINITE) == WAIT_FAILED)
  return FALSE;

 ... unrelated cleanup stuff ...
 ReleaseMutex(FooMutex);
 CloseHandle(FooMutex);
 return TRUE;
}
</pre>
<p>
Under certain conditions, the <code>Initialize()</code> function
is called twice, and the <code>Uninitialize()</code> function
is correspondingly called twice.
Under these conditions, if I run the code on a single-processor system
with hyperthreading disabled, then everything works fine.
But if I enable hypethreading, then the second call to
<code>Uninitialize()</code> hangs in the <code>WaitForSingleObject</code>
call.
(As you can see, it's waiting for a mutex handle which was closed
by the previous call to <code>Uninitialize()</code>.)
</p>
<p>
Why does this happen only on a hyperthreaded machine?
Shouldn't the <code>WaitForSingleObject</code> return
<code>WAIT_FAILED</code> because the parameter is invalid?
Is this a bug in Windows hyperthreading support?
</p>
</blockquote>
<p>
Remember,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/02/10/10127054.aspx">
don't immediately jump to the conspiracy theory</a>:&sup1;
Hyperthreading may be the trigger for your problem, but it's
probably not a bug in hyperthreading.
</p>
<p>
While it's true that <code>WaitForSingleObject</code> returns
<code>WAIT_FAILED</code> when given an invalid parameter,
handle recycling means that any invalid handle can suddenly
become valid again (but refer to an unrelated object).
</p>
<p>
The problem with hyperthreading will probably recur if you
run the scenario on a multiprocessor machine.
Hyperthreading (and multi-core processing) means that two
threads can be executing simultaneously, which means that
the opportunity for race conditions grows significantly.
</p>
<p>
What's probably happening is that between the two calls to
<code>Uninitialize()</code>,
another thread called <code>CreateThread</code> or
<code>CreateEvent</code> or some other function which creates
a waitable kernel object.
That new kernel object was coincidentally assigned the same
numerical handle value that was previously assigned to your
<code>FooMutex</code>.
(This is perfectly legitimate since you closed the handle,
thereby making it available for re-use.)
Now when you call <code>WaitForSingleObject(FooMutex)</code>,
you are actually waiting on that other object.
And since that other object is not signaled, the wait call waits.
</p>
<p>
Okay, so how do we fix the problem?
The simple fix is to null out <code>FooMutex</code> after closing
the handle.
This assumes however that your DLL design imposes the restriction
on clients that all calls to <code>Initialize()</code> and
<code>Uninitialize()</code> take place on the same thread,
and that the DLL is uninitialized on the <i>first</i> call
to <code>Uninitialize()</code>.
</p>
<p>
Oh, and you may have noticed another bug:
When <code>Initialize()</code> is called the second time,
the DLL reinitializes itself.
In particular, it re-creates the mutex and overwrites the
handle from the previous call to <code>Initialize()</code>.
Now you have a handle leak.
I suspect that's why the call to <code>CreateMutex</code>
explicitly passes <code>"FooMutex"</code> as the mutex name.
The previous version passed <code>NULL</code>, creating an
anonymous mutex, but then the author discovered that the mutex
"stopped working" because some code was using the old handle
(using the mutex created by the first call to <code>Initialize()</code>)
and some code was using the new handle
(using the mutex created by the second call to <code>Initialize()</code>).
Using a named mutex "fixes" the problem by forcing the two calls to
<code>Initialize()</code> to create a handle to the same underlying
object.
</p>
<p>
To fix the handle leak, you can just stick a
<code>if (FooMutex != NULL) return TRUE;</code> at the top.
The DLL has already been initialized; don't need to initialize it again.
</p>
<p>
The design as I inferred it is somewhat unusual, however.
Usually, when a component exposes <code>Initialize()</code> and
<code>Uninitialize()</code> and supports multiple initialization,
the convention is that the DLL initialization remains valid
until the <i>last</i> call to <code>Uninitialize()</code>, not the first one.
If that was the design intention of this DLL, then a different fix is
called for,
one which I leave as an exercise,
since we've drifted pretty far from the original question.
</p>
<p>
&sup1;The authors of
<i>The Pragmatic Programmer</i> call this principle
<a HREF="http://pragprog.com/the-pragmatic-programmer/extracts/tips">
'select' isn't broken</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1013043">
				<div id="div-comment-1013043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013043">
			September 26, 2012 at 7:17 am</a>		</div>

		<p>How many bugs like this would be hidden by not reusing handle values until they overflow? &nbsp;I.e. each handle to a new kernel object would be higher than the previous one. &nbsp;How likely would that be to introduce new compatibility bugs by causing programs relying on handle reuse to no longer function?</p>
<p>To support multiple initialization, keep the initialization count in a variable that gets InterlockedIncrement&#39;ed in Initialize and InterlockedDecrement&#39;ed in Uninitialize. &nbsp;If it was 0 before Initialize, do the actual initialization. &nbsp;If it becomes 0 in Uninitialize, do the actual uninitialization.</p>
<div class="post">[<i>It would catch/mask a lot of bugs. (Mostly mask, since nobody actually checks return values.) The cost is that the handle table now has to be a sparse table, which increases the complexity of handle lookup. And it would break programs that <a href="http://linux.die.net/man/2/dup" rel="nofollow">rely on handle recycling</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1013063">
				<div id="div-comment-1013063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013063">
			September 26, 2012 at 7:29 am</a>		</div>

		<p>@Medinoc:</p>
<p>I don&#39;t understand what was the purpose of closing the handle. Was it to kick ReadConsole?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1013083">
				<div id="div-comment-1013083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013083">
			September 26, 2012 at 8:07 am</a>		</div>

		<p>[And it would break programs that rely on handle recycling. -Raymond]</p>
<p>Ah yes dup2. Very handy, but very painful to implement on Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1013093">
				<div id="div-comment-1013093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013093">
			September 26, 2012 at 8:12 am</a>		</div>

		<p>@alrgr1: It was to add a timeout to ReadConsole(). I couldn&#39;t simply use WaitForSingleObject()+ReadConsole() because I had ENABLE_LINE_INPUT set, and the synchronization routines ignore it: Even when it&#39;s set, the handle becomes signaled as soon as a character is in the buffer instead of waiting for an end of line.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1013103">
				<div id="div-comment-1013103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">INVALID_HANDLE_VALUE</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013103">
			September 26, 2012 at 9:08 am</a>		</div>

		<p>That&#39;s a lot of paint to cover the &#39;live and learn&#39; lesson.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1013123">
				<div id="div-comment-1013123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013123">
			September 26, 2012 at 9:58 am</a>		</div>

		<p>@Medinoc:</p>
<p>Consoles are tricky. Their handles seem special, not the generic kernel handles. I&#39;m not even sure one can open the console handle as overlapped and use async IO. For a regular file handle, CloseHandle would not cause an IO to be canceled, if there is a duplicate handle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1013133">
				<div id="div-comment-1013133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013133">
			September 26, 2012 at 10:05 am</a>		</div>

		<p>[And it would break programs that rely on handle recycling. -Raymond]</p>
<p>Wait, how do you recycle a handle in Windows? Isn&#39;t CRTL under Windows using fake descriptors instead of handles?</p>
<div class="post">[<i>I&#39;m sure there&#39;s somebody out there who is relying on handle recycling, assuming they work the same way as unix. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1013143">
				<div id="div-comment-1013143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013143">
			September 26, 2012 at 10:19 am</a>		</div>

		<p>@alegrl: You stop all runnable threads, close the handle you want to allocate to, then call DuplicateHandle until you get the right value, close all the junk ones you just opened, then restart all threads you stopped.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1013153">
				<div id="div-comment-1013153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013153">
			September 26, 2012 at 11:02 am</a>		</div>

		<p>&gt; I&#39;m sure there&#39;s somebody out there who is relying on handle recycling, assuming they work the same way as unix.</p>
<p>On Unix, it makes a lot of sense, since file descriptors are sequential numbers starting from 0.</p>
<p>But on Win32, where handles are pointer-looking things with arbitrary values, expecting them to be recycled makes as much sense as expecting that malloc() will return the exact same pointer passed to the preceding call to free().</p>
<p>Thinking about handles as if they were pointers to opaque objects in memory is a good mental model (even if it is not the case), and AFAIK it is how they are declared in the headers (as opaque pointers, either &quot;void *&quot; or pointers to a struct).</p>
<div class="post">[<i>You&#39;re assuming that people who make this assumption are as smart as you are. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1013173">
				<div id="div-comment-1013173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013173">
			September 26, 2012 at 1:43 pm</a>		</div>

		<p>[You&#39;re assuming that people who make this assumption are as smart as you are. -Raymond]</p>
<p>I didn&#39;t make the assumption, but tested it and found it to be true. While I have written oneshot code that depended on it, I have not written any code that depends on it that I expect to work in the next Windows version. Changing it in a service pack would have disturbed me but I&#39;m not using it anymore.</p>
<p>But yeah, somebody might have made the assumption it&#39;s never gonna change. Back in the Win98-XP days I&#39;d have made the same stack of assumptions, but then I saw just how much Microsoft was willing to break in Vista.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1013183">
				<div id="div-comment-1013183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013183">
			September 26, 2012 at 2:10 pm</a>		</div>

		<p>Cesar: There are probably tons of programs out there that assume a malloc will return memory at the address that was last freed. Odds are they free some data structure, then allocate a new one and forget to initialized it, unwittingly relying on the fact that the memory still contains an initialized data structure from before.</p>
<p>These apps will break when you change the heap allocator, requiring a compatibility shim if the heap behavior changes enough.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1013193">
				<div id="div-comment-1013193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013193">
			September 26, 2012 at 2:18 pm</a>		</div>

		<p>In spite of the largely sound &quot;select isn&#39;t broken&quot; principle, I did I have a time when I found, in rapid succession, a bug in GCC, the C++ standard library that ships with a rather older version of GCC, and the 1998 C++ standard. The first I was never able to figure out what was going on well enough to describe, but the last two other people had found before me. (There was even a defect report accepted for the standards bug, which was something like there being no conversion from a reverse_iterator to a const_reverse_iterator.) That was an amusing week and a half.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1013053">
				<div id="div-comment-1013053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013053">
			September 26, 2012 at 7:19 am</a>		</div>

		<p>I have to confess I once *purposely* used the trick of closing a handle while another thread was waiting on it, and for that particular implementation at that particular time it worked: I closed a duplicate console input handle while ReadConsole() was waiting on the same duplicate handle (the duplication allowed me to repeat this without destroying the console input buffer).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1013223">
				<div id="div-comment-1013223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013223">
			September 26, 2012 at 5:31 pm</a>		</div>

		<p>@joshua:</p>
<p>That&#39;s too much to bother.</p>
<p>I suspect handle recycle is not even remotely on the list of concerns of kernel guys.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1013243">
				<div id="div-comment-1013243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013243">
			September 27, 2012 at 12:49 am</a>		</div>

		<p>And like Cesar said, a lot of people don&#39;t even know their program relies on handle recycling: This kind of thing is more likely to be a bug than a conscious choice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1013253">
				<div id="div-comment-1013253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013253">
			September 27, 2012 at 3:49 am</a>		</div>

		<p>Assuming you set FooMutex to null, doesn&#39;t that save you from having to wait on it to check whether it&#39;s uninitialised? (Although given the possibility of uninitialising the DLL on two threads at once, it might make more sense just to avoid closing the handle.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1013263">
				<div id="div-comment-1013263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013263">
			September 27, 2012 at 5:24 am</a>		</div>

		<p>Neil: Waiting on it isn&#39;t to check whether it&#39;s uninitialized; it&#39;s to protect the critical section in the cleanup code.</p>
<p>The ReleaseMutex is what&#39;s unnecessary &#8212; in fact, I&#39;d call it a bug. You want the second thread to fail, not get the mutex.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1013613">
				<div id="div-comment-1013613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013613">
			September 28, 2012 at 8:11 pm</a>		</div>

		<p>&quot;&#39;select&#39; isn&#39;t broken&quot; reminds me of another phrase I like: &quot;When you hear hoof beats, think &#39;horses&#39;, not &#39;zebras&#39;&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1013683">
				<div id="div-comment-1013683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120926-00/?p=6493#comment-1013683">
			September 29, 2012 at 8:22 pm</a>		</div>

		<p>As Raymond once pointed out in TechNet, this principle is why it&#39;s very dangerous to &quot;unlock&quot; stuck file handles..</p>
<p><a rel="nofollow" target="_new" href="http://technet.microsoft.com/en-us/magazine/2009.04.windowsconfidential.aspx" rel="nofollow">technet.microsoft.com/&#8230;/2009.04.windowsconfidential.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

