<html>
<head>
<title>How do I access a file without updating its last-access time?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I access a file without updating its last-access time?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 10, 2011 / year-entry #242</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>29</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The first problem with discussing file last-access time is agreeing what you mean by a file's last-access time. The file system folks have one definition of the file last-access time, namely the time the file was most recently opened and either read from or written to. This is the value retrieved by functions like Get­File­Attributes­Ex,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The first problem with discussing file last-access time is
agreeing what you mean by a file's last-access time.
</p>
<p>
The file system folks have one definition of the file last-access time,
namely the time the file was most recently opened and either read from
or written to.
This is the value retrieved by functions like
<code>Get&shy;File&shy;Attributes&shy;Ex</code>,
<code>Get&shy;File&shy;Time</code>,
and <code>Find&shy;First&shy;File</code>.
</p>
<p>
The problem with this definition is that it doesn't match the
intuitive definition of last-access time, which is
"the last time <i>I</i> accessed the file,"
emphasis on the <i>I</i>.
In fact, the intuitive definition of access is more specific:
It's
"the last time I opened, modified, printed, or otherwise performed
some sort of purposeful action on the file."
</p>
<p>
This discrepancy between the file system definition and the intuitive
definition means that a lot of operations trigger a file system access
but shouldn't count as an access from the user interface point of view.
Here are some examples:
</p>
<ul>
<li>Accessing the file to generate a preview or thumbnail image.
<li>Accessing the file to
    <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/02/17/9426787.aspx#9430964">
    show its property sheet</a>.</p>
<li>Accessing the file to retrieve its icon.
<li>Accessing the file to retrieve properties to show in Explorer
    or some other viewer.</p>
<li>Accessing the file in order to back it up.
<li>Accessing the file in order to display its context menu,
    <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/10/03/10218997.aspx">
    something you aren't supposed to be doing in the first place</a>
    but people
    <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/10/05/9903476.aspx#9904013">
    do it anyway</a>.
</ul>
<p>
Whenever some shell extension violates this rule,
the shell team gets a bug report from some customer saying,
"The last-access time shown in Explorer is wrong.
A document which hasn't been accessed in months shows a last-access
time of today.
After closer investigation, we found that the last-access time updates
whenever we
<i>insert seemingly-innocuous operation here</i>."
</p>
<p>
If you're writing a program which needs
to access the file contents but you not want to update
the last-access time, you can use the <code>Set&shy;File&shy;Time</code>
function
<a HREF="http://msdn.microsoft.com/library/ms724933.aspx">
with the special value <code>0xFFFFFFFF</code> in both members
of the <code>FILETIME</code> structure passed
as the last-access time</a>.
This magic value means "do not change the last-access time
even though I'm accessing the file."
</p>
<pre>
BOOL DoNotUpdateLastAccessTime(HANDLE hFile)
{
 static const FILETIME ftLeaveUnchanged = { 0xFFFFFFFF, 0xFFFFFFFF };
 return SetFileTime(hFile, NULL, &amp;ftLeaveUnchanged, NULL);
}
</pre>
<p>
As the documentation notes, you have to call this function
immediately after opening the file.
</p>
<p>
Going back to that linked comment:
The reason why viewing the Summary tab causes the last-access time
to be updated is that the Summary tab retrieves its information
by calling <code>Stg&shy;Open&shy;Storage</code>, and there's no way to tell
that function,
"Hey, when you open the file in order to see if it has any
document properties, do that
<code>Do&shy;Not&shy;Update&shy;Last&shy;Access&shy;Time</code>
thing so you don't update the last access time."
</p>
<p>
<b>Bonus chatter</b>:
Starting in Windows Vista,
<a HREF="http://blogs.technet.com/b/filecab/archive/2006/11/07/disabling-last-access-time-in-windows-vista-to-improve-ntfs-performance.aspx">
maintaining the last-access time is disabled by default</a>.
In practice, this means that the number of bugs related to
altering the last-access time accidentally will multiply unchecked,
because the mechanism for detecting the error is disabled by default.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-939473">
				<div id="div-comment-939473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939473">
			October 10, 2011 at 7:40 am</a>		</div>

		<p>At a higher level, why does &quot;last access time&quot; even exist? &nbsp;What is its usefulness?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-939483">
				<div id="div-comment-939483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Oliver</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939483">
			October 10, 2011 at 7:45 am</a>		</div>

		<p>@John &#8211; Have you never used your browser history?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-939493">
				<div id="div-comment-939493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939493">
			October 10, 2011 at 7:57 am</a>		</div>

		<p>@Oliver: How does last access time compare with browser history? Is there some Windows component that can generate a file use history based on it?</p>
<p>Personally I like the change made in Vista, never cared for last access time, last modified time is good enough.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-939513">
				<div id="div-comment-939513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939513">
			October 10, 2011 at 8:14 am</a>		</div>

		<p>@John: Surely you can imaging a use? One thing that springs to mind is to archive files that aren&#39;t used often.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-939503">
				<div id="div-comment-939503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939503">
			October 10, 2011 at 8:14 am</a>		</div>

		<p>Last access time is really only useful for compress or delete old files.</p>
<p>I&#39;ve seen a program or two that depended on a UNIX nuance where writing to the file didn&#39;t update access time, but such behavior is rather fragile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-939533">
				<div id="div-comment-939533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939533">
			October 10, 2011 at 9:24 am</a>		</div>

		<p>It is common on linux systems using SSD to disable updating last accessed time to reduce number of writes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-939543">
				<div id="div-comment-939543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Skyborne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939543">
			October 10, 2011 at 10:53 am</a>		</div>

		<p>I think the original case for last-access-time was for mbox-formatted mail files. &nbsp;If the mail file was modified after being accessed, then it has unread mail.</p>
<p>Linux also added relatime a while ago, because we like complicated things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-939553">
				<div id="div-comment-939553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939553">
			October 10, 2011 at 11:14 am</a>		</div>

		<p>@Skyborne But for that use case the last-modified timestamp is MUCH more useful &#8211; something which is true in general I think (at least I always remove the accessed column in Windows and that for ages).</p>
<p>The part about &quot;remove old files that weren&#39;t used for a long time&quot; seems like the most realistic use case, as otherwise this would lead to some problems. Was probably a much larger deal in the good ole days. Though I think the reason it was included was because other FS already had it(?) and those probably had it because in the bigger picture it seems like a rather innocuous feature (well I remember Raymond&#39;s article about why it isn&#39;t) that&#39;s rather easy to implement if you already include last modified stamps.</p>
<p>@Porter Yep one should really save those writecycles, I always say &quot;People you all know that 1PT of writes on a 160gb large SSD won&#39;t last you for more than 30-40 years &#8211; think about the future&quot;!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-939563">
				<div id="div-comment-939563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Some Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939563">
			October 10, 2011 at 2:07 pm</a>		</div>

		<p>Don&#39;t forget about the &quot;I know I accessed the file today by the last access time is six months ago&quot; bug reports. After all, the only people who complained about the original problem are the people who check that &#8211; and you can&#39;t please everyone.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-939573">
				<div id="div-comment-939573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939573">
			October 10, 2011 at 2:19 pm</a>		</div>

		<p>voo: That would be true if SSDs had built-in wear leveling that was any good. They don&#39;t, but since everyone assumes they do, in the real world an SSD lasts a few months on average.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-939523">
				<div id="div-comment-939523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939523">
			October 10, 2011 at 9:14 am</a>		</div>

		<p>Suppose you wanted to roll out to cheaper storage files that weren&#39;t being accessed&#8230; it would be useful to know when the files were last accessed.</p>
<p>In retrospect, though, &#39;last-read time&#39; might have been a better(*) choice. &nbsp;All those metadata-y things should be covered by the change-time on the file, which the file system maintains (for Posix, no doubt) but the Windows API neglects to expose.</p>
<p>(*) this still has the problem that reading data streams that are used for properties, a la Explorer, will update the last-read time. &nbsp;And I&#39;m unfond of breaking symmetry by making i the last-unnamed-stream-read-time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-939593">
				<div id="div-comment-939593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939593">
			October 10, 2011 at 4:26 pm</a>		</div>

		<p>@Jeff Yeah it&#39;s not as if modern controllers had a WA &lt;1.5 for sequential writes (and you can triple that all you want for random stuff). You don&#39;t happen to have anything to back those claims up, like say some screenshots of a modern SSD (no indilinx controller or something please) that wore out its write cycles under normal usage? &nbsp;Would be more than interesting &#8211; otherwise I&#39;ll just assume it&#39;s FUD you made up on the spot, because math and tests say otherwise. See this (<a rel="nofollow" target="_new" href="http://www.xtremesystems.org/forums/showthread.php?271063-SSD-Write-Endurance-25nm-Vs-34nm" rel="nofollow">http://www.xtremesystems.org/&#8230;/showthread.php</a>) &#8211; sequential writes with at least 1/3 static data. Hard to say how good modern drives will fare, since so far only one small SSD with crap controller has died and that after 550TB of writes.</p>
<p>Now we know that the old Intel g2 controller has a WA &lt;3 for average desktop use cases (easy to do the math for that and most people get about 2 still), let&#39;s just assume that they didn&#39;t improve that at all and let&#39;s double it again for the presumably not perfect static wear leveling and well &#8211; put another factor of two in there just for good measure. So the 25nm 40gb Intel drive would probably only do a few hundred TBs of writes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-939603">
				<div id="div-comment-939603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939603">
			October 10, 2011 at 4:37 pm</a>		</div>

		<p>I&#39;m wondering how the magic SetFileTime() call is handled for this. &nbsp;Is there some kernel flag set that says &quot;if the next call after CreateFile() is SetFileTime(), disable updates&quot;? &nbsp;Is it a timed thing, CreateFile() queues a timestamp update that can get removed again if a magic SetFileTime() arrives within a certain time? &nbsp;(I&#39;m guessing it&#39;s the latter, since last-update granularity is pretty loose, it&#39;s only guaranteed to be accurate to within an hour). &nbsp;It just seems more like a task for dwFlagsAndAttributes rather than a somewhat iffy race-condition call to SetFileTime().</p>
<div class="post">[<i>Merely creating the handle does not trigger an update of write or access. You have to actually write/read. Therefore, when the first read/write operation actually takes place, the file system says &quot;Oh wait, I won&#39;t update the write/access time.&quot; (Note: I&#39;m guessing.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-939633">
				<div id="div-comment-939633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Lowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939633">
			October 10, 2011 at 6:03 pm</a>		</div>

		<p>The unsigned FILETIME maps at the NT Native API to the signed LARGE_INTEGER. 0xFFFFFFFF is therefore -1.</p>
<p>The documentation for FILE_BASIC_INFORMATION states:</p>
<p>&quot;The file system updates the values of the LastAccessTime, LastWriteTime, and ChangeTime members as appropriate after an I/O operation is performed on a file. However, a driver or application can request that the file system not update one or more of these members for I/O operations that are performed on the caller&#39;s file handle by setting the appropriate members to -1. The caller can set one, all, or any other combination of these three members to -1. Only the members that are set to -1 will be unaffected by I/O operations on the file handle; the other members will be updated as appropriate.&quot;</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/hardware/ff545762(v=vs.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ff545762(v=vs.85).aspx</a></p>
<p>Trivia: This was implemented this way starting with Windows 2000 as a shortcut since many applications previously had to query the times, do their work, and then set the original times back.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-939653">
				<div id="div-comment-939653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Lowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939653">
			October 10, 2011 at 6:25 pm</a>		</div>

		<p>It is also worth pointing out that the handle must have FILE_WRITE_ATTRIBUTES granted to it to prevent the system from making updates to LastAccessTime, LastWriteTime or ChangeTime.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-939583">
				<div id="div-comment-939583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939583">
			October 10, 2011 at 3:01 pm</a>		</div>

		<p>@Jeff: Yes, I find it hard to understand why the lifetime calculation is always expressed as (capacity * rewrites) / (write load). &nbsp;It should be `(freespace * rewrites) / (write load)`. &nbsp;Which in most deployments is 1/20th the time, and is starting to be rather concerning.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-939683">
				<div id="div-comment-939683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939683">
			October 10, 2011 at 11:57 pm</a>		</div>

		<p>It is wrong to assume that an SSD only wear-levels free space. Because once you write every sector, there is no more free space. SSDs are block devices &#8211; you tell it to write sector N wit5h this chunk of data, and to read sector M. Now, fancy OSes add a feature called TRIM that tells the SSD &quot;this sector&#39;s contents are invalidated&quot;.</p>
<p>The reason for this is a flash device can only be erased in big chunks &#8211; say 256kiB. If I need to use the block as it&#39;s time in the cycle for wear levelling, I need to move the good data, and ignore the dirty data (when you rewrite a sector, the ols sector is marked invalid and the new data put in a new spot). TRIM just tells an SSD that the sector is invalidated so when the controller is writing, it&#39;s not having to move data the OS doesn;t care about.</p>
<p>Sure, with TRIM it&#39;s free, but there are OSes that don&#39;t support TRIM. And the OS is free to just rewrite a sector without TRIMming it first.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-939693">
				<div id="div-comment-939693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SmittyBoy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939693">
			October 11, 2011 at 3:32 am</a>		</div>

		<p>&quot;you have to call this function immediately after opening the file.&quot;</p>
<p>Why isn&#39;t that a flag on the OpenFile/CreateFile etc.. &nbsp;Especially considering that it&#39;s the OS that is providing my App with a timeslice. &nbsp;</p>
<div class="post">[<i>Yeah, that&#39;s what <code>Create&shy;File</code> needs. Three more flags! -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-939743">
				<div id="div-comment-939743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Skyborne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939743">
			October 11, 2011 at 7:32 am</a>		</div>

		<p>@voo: if you have N xterms open, each with a shell keeping their own &quot;I notified the user of new mail when last-modified was X&quot;, then you can get up to N &quot;new mail&quot; notifications for 1 new message. &nbsp;With last-access time, you can get 1 notification, read the message, and the other N-1 shells can tell you&#39;ve read it, even though it wasn&#39;t through them.</p>
<p>Likewise, it lets ye olde xbiff work: it can put its &quot;new messages&quot; flag back down once you&#39;ve read them from your MUA. &nbsp;Otherwise, it would never know since it doesn&#39;t read mail itself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-939753">
				<div id="div-comment-939753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Skyborne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-939753">
			October 11, 2011 at 7:35 am</a>		</div>

		<p>In fact, now that I think about it, the shell would *never* know if you read the mail, if it didn&#39;t have atime. &nbsp;It&#39;s done in the MUA (out-of-process again), and you don&#39;t *have* to write the file to read the mail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-940033">
				<div id="div-comment-940033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jakob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-940033">
			October 11, 2011 at 5:40 pm</a>		</div>

		<p>Perhaps someone can settle a bet for me on this. My understanding is that &quot;file&quot; in the phrase &quot;the time the file was most recently opened and either read from or written to&quot; specifically refers to a data stream of a file (on an NTFS volume). A colleague of mine insists that &quot;file&quot; refers to the entire collection of attributes associated with those data streams, specifically including the attributes contained in the MFT. His thought is that reading or writing to any of the attributes (say, writing to the file name by calling MoveFileExW()) will update the access time. I maintain that only calls that read or write to the data streams (e.g. ReadFile() and WriteFile()) will do so. Empirical testing would appear to be on my side. However, he insists that my testing methods are flawed because I am not accounting for the fact that the NTFS driver caches access time updates for up to an hour before writing them to disk.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-940053">
				<div id="div-comment-940053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Lowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-940053">
			October 11, 2011 at 5:47 pm</a>		</div>

		<p>You would need an individual flag for LastAccessTime, LastWriteTime and ChangeTime to specify that they should remain unchanged when I/O operations occur that would otherwise trigger an update.</p>
<p>The property would also be immutable on the handle without another mechanism being implemented to change the behaviour later.</p>
<p>(CreateFile would require two extra flags as ChangeTime is not exposed to Win32.)</p>
<p>Specifying any of those flags would also have to require that FILE_WRITE_ATTRIBUTES be present in the desired access rights and it also be granted.</p>
<p>The implemented behaviour is pretty useful, comprehensive and simple:</p>
<p>When set to -1 (0xFFFFFFFF, 0xFFFFFFFF), I/O operations that would usually trigger an update will not update the respective file time on the file system.</p>
<p>When set to 0, the file time is left unchanged and subsequent I/O operations are able to update as necessary.</p>
<p>When set to another value, the file time is updated to the value provided and subsequent I/O operations are able to update as necessary.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-940093">
				<div id="div-comment-940093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-940093">
			October 12, 2011 at 12:25 am</a>		</div>

		<p>@Jakob: Here&#39;s a puzzle piece. <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2011/08/16/10195932.aspx" rel="nofollow">blogs.msdn.com/&#8230;/10195932.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-940113">
				<div id="div-comment-940113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-940113">
			October 12, 2011 at 2:02 am</a>		</div>

		<p>&quot;Immediately after opening&quot; seems false: <a rel="nofollow" target="_new" href="http://social.msdn.microsoft.com/Forums/en-us/vcgeneral/thread/cf8b447a-0aeb-4912-a800-a815167cd2a4" rel="nofollow">social.msdn.microsoft.com/&#8230;/cf8b447a-0aeb-4912-a800-a815167cd2a4</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-940133">
				<div id="div-comment-940133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick LOwe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-940133">
			October 12, 2011 at 2:13 am</a>		</div>

		<p>@Medinoc &#8211; It is false as it should state that it needs to be called before I/O operations are carried out on the handle that would otherwise trigger an update.</p>
<p>It definitely only needs to be called once though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-940143">
				<div id="div-comment-940143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-940143">
			October 12, 2011 at 2:15 am</a>		</div>

		<p>Well, what I know for sure is that when I tried &quot;before&quot;, it didn&#39;t work, and when I tried &quot;after&quot;, it did.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-940263">
				<div id="div-comment-940263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-940263">
			October 12, 2011 at 8:56 am</a>		</div>

		<p>There should be time stamps for when metadata was last changed/accessed ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-940723">
				<div id="div-comment-940723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-940723">
			October 13, 2011 at 12:16 pm</a>		</div>

		<p>Last access time is exactly the order in which you want your files arranged (sorted) on a disk that has different performance characteristics on different parts of the disk (such as most traditional hard drives where access times are better on the outer cylinders). &nbsp;Some devices don&#39;t have those performance characteristics, but without access to the last access time, you can&#39;t implement this.</p>
<p>For this purpose, access time should include all user access but exclude access due to a full-disk backup or a full-disk virus scan. &nbsp;:-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-940823">
				<div id="div-comment-940823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111010-00/?p=9433#comment-940823">
			October 13, 2011 at 3:44 pm</a>		</div>

		<p>image viewer in windows doesn&#39;t update last modified time when modifying the image data. why?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

