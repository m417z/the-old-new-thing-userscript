<html>
<head>
<title>A history of GlobalLock, part 1: The early years</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A history of GlobalLock, part 1: The early years</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 4, 2004 / year-entry #384</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>33</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Once upon a time, there was Windows 1.0. This was truly The Before Time. 640K. Segments. Near and far pointers. No virtual memory. Co-operative multitasking. Since there was no virtual memory, swapping had to be done with the co-operation of the application. When there was an attempt to allocate memory (either for code or data)...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Once upon a time, there was Windows 1.0.  This was truly The Before Time.  640K.  Segments.  Near and far pointers. No virtual memory. Co-operative multitasking.</p>
<p> Since there was no virtual memory, swapping had to be done with the co-operation of the application.  When there was an attempt to allocate memory (either for code or data) and insufficient contiguous memory was available, the memory manager had to perform a process called "compaction" to make the desired amount of contiguous memory available. </p>
<ul>
<li>Code segments could be discarded completely, since they can be     reloaded from the original EXE.     (No virtual memory - there is no such thing as "paged out".)     Discarding code requires extra work     to make sure that the next time the code got called,     it was re-fetched from memory.  How this was done is not     relevant here, although it was quite a complicated process in     and of itself. </li>
<li>Memory containing code could be moved around, and references to     the old address were patched up to refer to the new address.     This was also a complicated process not relevant here. </li>
<li>Memory containing data could be moved around, but references     to the old addresses were not patched up.  It was the application's     job to protect against its memory moving out from under it if it     had a cached pointer to that memory. </li>
<li>Memory that was locked or fixed (or a third category,     "wired" -- let's not get into that) would never be moved. </li>
</ul>
<p> When you allocated memory via GlobalAlloc(), you first had to decide whether you wanted "moveable" memory (memory which could be shuffled around by the memory manager) or "fixed" memory (memory which was immune from motion).  Conceptually, a "fixed" memory block was like a moveable block that was permanently locked. </p>
<p> Applications were strongly discouraged from allocating fixed memory because it gummed up the memory manager.  (Think of it as the memory equivalent of an immovable disk block faced by a defragmenter.) </p>
<p> The return value of GlobalAlloc() was a handle to a global memory block, or an HGLOBAL.  This value was useless by itself.  You had to call GlobalLock() to convert this HGLOBAL into a pointer that you could use. </p>
<p> GlobalLock() did a few things: </p>
<ul>
<li>It forced the memory present (if it had been discarded).     Other memory blocks may need to be discarded or moved around to     make room for the memory block being locked. </li>
<li>If the memory block was "moveable", then it also     incremented the "lock count" on the memory block,     thus preventing the memory manager from moving the memory block     during compaction.  (Lock counts on "fixed" memory aren't necessary     because they can't be moved anyway.) </li>
</ul>
<p> Applications were encouraged to keep global memory blocks locked only as long as necessary in order to avoid fragmenting the heap. Pointers to unlocked moveable memory were forbidden since even the slightest breath -- like calling a function that happened to have been discarded -- would cause a compaction and invalidate the pointer. </p>
<p> Okay, so how did this all interact with GlobalReAlloc()? </p>
<p> It depends on how the memory was allocated and what its lock state was. </p>
<p> If the memory was allocated as "moveable" and it wasn't locked, then the memory manager was allowed to find a new home for the memory elsewhere in the system and update its bookkeeping so the next time somebody called GlobalLock(), they got a pointer to the new location. </p>
<p> If the memory was allocated as "moveable" but it was locked, or if the memory was allocated as "fixed", then the memory manager could only resize it in place. It couldn't move the memory either because (if moveable and locked) there were still outstanding pointers to it, as evidenced by the nonzero lock count, or (if fixed) fixed memory was allocated on the assumption that it would never move. </p>
<p> If the memory was allocated as "moveable" and was locked,  or if it was allocated as "fixed", then you can pass the GMEM_MOVEABLE flag to <i>override the "may only resize in place" behavior</i>, in which case the memory manager would attempt to move the memory if necessary. Passing the GMEM_MOVEABLE flag meant, "No, really, I know that according to the rules, you can't move the memory, but I want you to move it anyway.  I promise to take the responsibility of updating all pointers to the old location to point to the new location." </p>
<p> (Raymond actually remembers using Windows 1.0. Fortunately, the therapy sessions have helped tremendously.) </p>
<p> <a href="http://blogs.msdn.com/oldnewthing/archive/2004/11/05/252856.aspx"> Next time</a>, the advent of selectors. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (33)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-222853">
				<div id="div-comment-222853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ac</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-222853">
			November 4, 2004 at 7:08 am</a>		</div>

		<p>This was before my time, so I am curious as to how the standard C library functions like malloc worked at this point? </p>
<p>In fact, could you use the standard C library in Windows applications at this time?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222863">
				<div id="div-comment-222863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-222863">
			November 4, 2004 at 7:17 am</a>		</div>

		<p>Don&#8217;t forget that the GMEM_MOVEABLE semantics for GlobalReAlloc still apply in Windows today &#8211; I got burned on this a while ago, I had figured that Windows would ignore the GMEM_Xxx flags, when in fact it doesn&#8217;t.</p>
<p>ac: There was a version of the C library for Windows applications, but I don&#8217;t know what it did about malloc/free.  I suspect that it allocated fixed blocks of memory.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222873">
				<div id="div-comment-222873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-222873">
			November 4, 2004 at 7:18 am</a>		</div>

		<p>A quick google would suggest that malloc wasn&#8217;t present until win32. Depending on the sort of code, std C stuff was likely to work, so long as it operated on fixed blocks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222883">
				<div id="div-comment-222883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.drizzle.com/~lettvin/moblog.html' rel='external nofollow' class='url'>Moishe Lettvin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-222883">
			November 4, 2004 at 7:25 am</a>		</div>

		<p>Did malloc and free work on near pointers?  If so, the memory manager could&#8217;ve changed the selector behind the scenes; your memory would&#8217;ve moved around but you wouldn&#8217;t have known it.</p>
<p>Is it wrong to say I kinda miss this stuff?</p>
<p>What I really want to know is: are there gonna be similar pitfalls with 32bit/64bit?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222893">
				<div id="div-comment-222893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.differentpla.net/' rel='external nofollow' class='url'>Roger Lipscombe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-222893">
			November 4, 2004 at 7:29 am</a>		</div>

		<p>As Moishe says, in the old days, malloc returned a near pointer (i.e. to something in your data segment).</p>
<p>Windows was free to move your data segment around in memory, but you wouldn&#8217;t notice.</p>
<p>There was also an _fmalloc function (or something &#8212; I forget the exact name), which allocated GMEM_FIXED memory, but that was generally a bad idea.</p>
<p>&#8211; Roger (who never programmed on Windows 1.0, but does have Windows 3.0 Real Mode flashbacks).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222913">
				<div id="div-comment-222913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Elliott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-222913">
			November 4, 2004 at 7:50 am</a>		</div>

		<p>Searching for GlobalWire() in the MSDN library archive gives a few clues about what wired memory is &#8211; but why&#8217;s it called &quot;wired&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222923">
				<div id="div-comment-222923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Risto</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-222923">
			November 4, 2004 at 7:53 am</a>		</div>

		<p>I am thinking about very small memory devices. These techniques could be used again today for programming those? Cool, in a way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222933">
				<div id="div-comment-222933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://del.icio.us/rpk' rel='external nofollow' class='url'>Robert Krajewski</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-222933">
			November 4, 2004 at 7:59 am</a>		</div>

		<p>You know, when Win32 was rolling around, I was wonder if were going to get 32-bit memory handles from GlobalAlloc that could be used either for &quot;smart discardability&quot; like GMEM_DISCARDABLE, or truly huge chunks of memory could be held onto as long as you didn&#8217;t try to lock so many that you filled up 32-bit address space.</p>
<p>GMEM_DISCARDABLE was cool. A slightly clumsy way to implement virtual memory by asking the application to take care of &quot;paging&quot; something back in.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222943">
				<div id="div-comment-222943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carlos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-222943">
			November 4, 2004 at 8:08 am</a>		</div>

		<p>Visual C++ 1.52 (the last 16-bit version) had malloc.  The memory manager in Windows 3.1 had paging; it was a lot more sophisticated than Windows 1.0.</p>
<p>When you compiled an app you had to choose a &quot;memory model&quot;, which determined whether the default pointer size was near, far or huge (a far pointer accessing &gt; 64K memory).  This also controlled what the default malloc returned.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222953">
				<div id="div-comment-222953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-222953">
			November 4, 2004 at 8:25 am</a>		</div>

		<p>I remember the design target for Windows 1.0 being 512KB (not 640KB), a CGA or Hercules mono card and two floppy drives.</p>
<p>I only used Windows 1.0 once.  In Paint, I went to save a file and the save fiel dialog was just a text field.  I wondered what happened if I just typed lots of junk.  After holding down various keys for several minutes, I hit Ok.  The hard drive light blinked every few seconds but nothing else happened.  After a few minute I Ctrl-Alt-Del&#8217;ed the machine.  Most directory entries were missing from the drive.  Fortunately it was easy to recover DOS deletions in those days!</p>
<p>I was an avid user of Windows 286 (a variant of Windows 2.0) and the rest is all history.</p>
<p>What is also history is that until Windows 3.1, Microsoft pathologically refused to have a standard file selection box.  Every single programmer wrote their own.  Consequently you never quite knew what abomination of UI design a program would throw up!  (That is still the case on Unix today :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222963">
				<div id="div-comment-222963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas Allen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-222963">
			November 4, 2004 at 8:51 am</a>		</div>

		<p>I think that the early Windows memory manager was cleverer than it needed to be in terms of discarding and moving code.  It was unpredictable and fairly mysterious in the way it seemed to behave.  An explicit overlay system probably would have been simpler to build and easier to understand.  I think that building overlays, or buying a compiler to do it for me, would have been easier than trying to fight Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222973">
				<div id="div-comment-222973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-222973">
			November 4, 2004 at 8:58 am</a>		</div>

		<p>Explicit overlays means that you know which segment to toss out when you need a new one. But in a multitasking environment, how do you know that nobody will ever need the dialog manager and the atom manager at the same time?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222983">
				<div id="div-comment-222983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas Allen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-222983">
			November 4, 2004 at 9:36 am</a>		</div>

		<p>Well, multitasking shouldn&#8217;t matter in this case since we haven&#8217;t gotten to multiprocessor support yet.  Two processes may need different working sets, but they don&#8217;t need them at the same time.</p>
<p>I&#8217;m not sure how overlays would be different from compaction in that particular case.  If we need to load the dialog manager and the atom manager is marked freeable, what stops compaction from tossing the atom manager to make space?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222993">
				<div id="div-comment-222993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-222993">
			November 4, 2004 at 9:56 am</a>		</div>

		<p>Windows 1.0 supported co-operative multitasking, remember.</p>
<p>Suppose there are three modules, the dialog manager, the atom manager, and the menu manager, and you have only enough memory for two. Which two do you pick?  If you are using overlays, you have to decide ahead of time. Under the compaction model, everything gets tossed out, and then the things that are actually used get loaded back in.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223003">
				<div id="div-comment-223003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Cooke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223003">
			November 4, 2004 at 10:00 am</a>		</div>

		<p>One thing that is fun is getting hold of a copy of Windows 1.0 from somewhere and running the tools from it on Windows 2000. (or XP, I guess. I&#8217;ve not upgraded yet.)</p>
<p>Most of the applications create Windows at the minimum size allowed and require you to drag them out to a sensible size. I assume this is because Windows 1.0 windows were always full-screen, or some other such environment change.</p>
<p>Windows 2.0 applications, aside from a whole bunch of UI quirks, work just like modern applications, opening in a sensible-sized window and everything.</p>
<p>I missed Windows 1.0 and Windows 2.0 when they first came out because I was still in Commodore Land. Windows 3.1 was current by the time I got my first PC. It was a 286 so it ran in Standard Mode. that was quite fun while it lasted.</p>
<p>Computers are pretty boring these days.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223013">
				<div id="div-comment-223013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeproject.com/script/articles/list_articles.asp?userid=152' rel='external nofollow' class='url'>Mike Dunn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223013">
			November 4, 2004 at 10:13 am</a>		</div>

		<p>Ben&gt; It&#8217;s funny, from time to time I get the urge to dust off my old C=128D and try some GEOS programmimg. Back then I was a BASIC guy, no clue how to do GUIs, but now I get that nostalgia feeling and I wonder what I could do with a GEOS app.</p>
<p>A few things stop me though. My 128&#8217;s keyboard got damaged in an earthquake, and I have no GEOS dev tools. :~(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223023">
				<div id="div-comment-223023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas Allen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223023">
			November 4, 2004 at 10:31 am</a>		</div>

		<p>Ok, so let&#8217;s take the situation where someone wants to use the dialog, atom, and menu managers.  We are extraordinarily low on memory and nothing can be discarded to make all three fit.  Only two at a time can be brought into memory.</p>
<p>The application calls a method in the dialog manager overlay.  It&#8217;s not in memory so we&#8217;ll need to load it.  The performance team has done an analysis of the static call graph and decided that the dialog and atom managers are frequently used together.  So we bring in the dialog and atom manager overlays.</p>
<p>Now, the application calls a method in the menu manager overlay.  It&#8217;s not in memory so we&#8217;ll need to load it.  Since nothing else is freeable in the system, we&#8217;ll have to discard either the dialog manager or atom manager.</p>
<p>We decide to get rid of the atom manager since it hasn&#8217;t been used recently.  Then, the application calls a method in the atom manager overlay.  It&#8217;s not in memory so we&#8217;ll need to load it&#8230;</p>
<p>In other words, we end up thrashing.    But that&#8217;s a problem that hasn&#8217;t been solved yet today.  We stipulated that there simply wasn&#8217;t any way to make the space for all three to be loaded at once.  If your working set spills out of your high speed storage space, be it registers to cache, cache to main memory, main memory to disk, disk to archive, you&#8217;ll take a performance hit with some access patterns.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223033">
				<div id="div-comment-223033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223033">
			November 4, 2004 at 10:43 am</a>		</div>

		<p>Yes, if all three are used simultaneously then you&#8217;re thrashing. But if say only the dialog manager and menu manager are being used, then you can leave the atom manager discarded and things keep running smoothly.</p>
<p>Whereas if you used overlays you had to have already decided that the dialog manager and (say) menu manager are overlays of each other. Then a program that uses both will thrash, even if there is room for the menu manager if only it had been overlaid with the atom manager instead.</p>
<p>Or maybe you&#8217;re talking about a different type of overlay where the thing that gets kicked out is determined dynamically?  In which case that&#8217;s the same as the Windows 1.0 method (except that Windows 1.0 has an extra compaction step as a poor man&#8217;s MRU).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223043">
				<div id="div-comment-223043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas Allen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223043">
			November 4, 2004 at 11:16 am</a>		</div>

		<p>Yes, the particular strategy picked for the overlay implementation would have a big impact.  I don&#8217;t know if overlay schemes that supported dynamic discarding where well known when Windows was originally developed.  If not, that&#8217;s probably a big mark against using overlays.  I know a short while later they were in common use- Turbo Pascal&#8217;s overlay system could dynamically discard, backed by a heap buffer (and later an EMS buffer) to avoid hitting the disk.  And a few years after that was probably the pinnacle of overlay usage in the DOS version of Nethack.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223053">
				<div id="div-comment-223053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223053">
			November 4, 2004 at 11:20 am</a>		</div>

		<p>As I noted, the Windows 1.0 method is basically the same as dynamic overlays. (Just with a compaction step thrown in so that data could be tossed out of working set too.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223063">
				<div id="div-comment-223063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223063">
			November 4, 2004 at 11:22 am</a>		</div>

		<p>My number 1 gripe with any open source or unix application is the atrocious totally different per app open/save dialog im presented with.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223073">
				<div id="div-comment-223073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">keithmo [exmsft]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223073">
			November 4, 2004 at 1:21 pm</a>		</div>

		<p>If you want a trip down memory lane, check out this page: <a target="_new" href="http://www.kernelthread.com/mac/vpc/win.html" rel="nofollow">http://www.kernelthread.com/mac/vpc/win.html</a>. This guy has screenshots of Windows 1.x and 2.x (and others) running in VPC on a Mac.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223083">
				<div id="div-comment-223083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223083">
			November 4, 2004 at 1:55 pm</a>		</div>

		<p>Chris &#8211; take a look at Gnome and KDE for a markedly improved X experience.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223093">
				<div id="div-comment-223093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223093">
			November 4, 2004 at 4:09 pm</a>		</div>

		<p>Btw, malloc() wasn&#8217;t always near.  It depended on which version of the C runtime library you used:<br />
<br />  Small, medium, large, and huge</p>
<p>I&#8217;m not sure, but I believe that they only had small and medium model versions of the CRT for windows however (which avoids the movable segment problem, since it only would allocate relative to DS)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223103">
				<div id="div-comment-223103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Cooke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223103">
			November 4, 2004 at 4:10 pm</a>		</div>

		<p>Chris,</p>
<p>As Cooney kinda half-said, if you standardize on either a KDE or a Gnome environment you&#8217;ll find things a lot more consistant. Fortunately, these days almost all apps have a version on each side and some lucky apps have a sensible application where the guts are separated from the UI and so both environments can be catered for.</p>
<p>Unfortunately, much like many Windows developers, many linuxy developers are lazy and mess all of their UI code in with their &quot;business logic&quot; so making it work on the other side becomes almost as much work as rewriting the entire application.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223113">
				<div id="div-comment-223113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">doynax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223113">
			November 4, 2004 at 5:12 pm</a>		</div>

		<p>Mike Dunn,</p>
<p>Don&#8217;t worry. The CC65 guys are currently working on GEOS support =)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223293">
				<div id="div-comment-223293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://feldgendler.livejournal.com' rel='external nofollow' class='url'>Alexey Feldgendler</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223293">
			November 5, 2004 at 10:17 am</a>		</div>

		<p>That&#8217;s really interesting! I&#8217;m looking forward for more posts about Windows 1.0 and the ancient history.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223363">
				<div id="div-comment-223363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223363">
			November 5, 2004 at 2:31 pm</a>		</div>

		<p>Tiny model was for DOS COM programs only. They did not have relocation table and all addressing was relative to its load base. You had to be able to squeeze your app into 64K (both code and data). It worked really fast and the programming model was the easiest. Most resident drivers were COM programs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223333">
				<div id="div-comment-223333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael J Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223333">
			November 5, 2004 at 11:34 am</a>		</div>

		<p>&gt;  Btw, malloc() wasn&#8217;t always near. It depended<br />
<br />&gt; on which version of the C runtime library you<br />
<br />&gt; used: Small, medium, large, and huge </p>
<p>Don&#8217;t forget &quot;Tiny&quot; and &quot;Compact&quot;.  Tiny required the whole app (including the data) to fit into 64K.  It was *very* fast.  (Though it might have just been for DOS &#8211; I can&#8217;t remember if it was available for Windows.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223383">
				<div id="div-comment-223383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223383">
			November 6, 2004 at 12:06 am</a>		</div>

		<p>Michael, you&#8217;re right, I forgot about tiny model :)</p>
<p>Alexey, ancient?  We&#8217;re only talking 10 years here.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223423">
				<div id="div-comment-223423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jamesatuncw.com/blog' rel='external nofollow' class='url'>James Summerlin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223423">
			November 6, 2004 at 9:25 pm</a>		</div>

		<p>&quot;Alexey, ancient? We&#8217;re only talking 10 years here.&quot;</p>
<p>The problem however is that you have to count years with respect to Moore&#8217;s law in order to make the transition from human years to computer years.  :)<br />
<br />So, for every 1.5 human years, computer power doubles.  Therefore, in computer years, 15 years have actually passed.  :)</p>
<p>James</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223433">
				<div id="div-comment-223433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.foxyshadis.com' rel='external nofollow' class='url'>foxyshadis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223433">
			November 6, 2004 at 9:56 pm</a>		</div>

		<p>No, you can&#8217;t mix apples and oranges that way. You have to figure that a computing generation occurs every 3-4 years, compared to the ~30 years for human generations. Operating systems evolve more slowly, major generations about every 5-6 years or so. So if you divide 30 years by the smaller tech time, you come out with the multiplier you use for comparing human time to percieved computer time. Almost a century ago in hardware terms and half a century ago in software terms. Man, no wonder I remember it so dimly. ^_~</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223663">
				<div id="div-comment-223663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jamesatuncw.com/blog' rel='external nofollow' class='url'>James Summerlin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041104-00/?p=37393#comment-223663">
			November 8, 2004 at 11:13 am</a>		</div>

		<p>Not bad, foxy, not bad at all.  :)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

