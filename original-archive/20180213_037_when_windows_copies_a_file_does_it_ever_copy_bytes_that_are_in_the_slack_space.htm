<html>
<head>
<title>When Windows copies a file, does it ever copy bytes that are in the slack space?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When Windows copies a file, does it ever copy bytes that are in the slack space?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 13, 2018 / year-entry #37</td></tr>
<tr><td><b>Tags:</b></td><td>tipssupport</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>31</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Keeping tabs on the slackers.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer who works with highly sensitive information
wanted confirmation that when they copy a file with Explorer,
Windows will copy only the data that logically belongs to the file
and no data that happens to reside in the slack space.
</p>
<p>
<i>Slack space</i> refers to physical storage allocated
to a file but not used to hold any file contents.
Slack space typically appears if the
last unit of file data storage
is not filled with file data.
For example, if you have a cluster size of
4<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090611-00/?p=17933">KB</a>,
and the file is 10KB in size,
then
one way of storing the information is to allocate three
clusters:
The first cluster holds the first 4KB of data;
the second cluster holds the next 4KB of data,
and the third cluster holds the last 2KB of data.
The last 2KB of the third cluster is unused.
</p>
<p>
The concern is that the last 2KB of the third cluster,
which formally does not contain any file data,
may nevertheless be copied to the destination file
(also as slack data).
When copying the last piece of the file,
is it possible that Windows reads the entire cluster
(even the slack space),
and then writes the entire cluster (including the slack space)
to the destination?
If there is any confidential information in the
slack space of a non-confidential file,
then could copying the non-confidential file inadvertently
copy the confidential information?
</p>
<p>
Fortunately, the answer is no.
</p>
<p>
The contents of the slack space are not visible outside
the file system driver itself.
File copying is handled at a higher level.
For example, the <code>Copy&shy;File</code> function
has access only to user-mode-visible file contents.
It cannot see the slack space in the source file,
and therefore cannot copy it.
</p>
<p>
Even in the case of
<a HREF="https://technet.microsoft.com/en-us/library/hh831628(v=ws.11).aspx">
offloaded data transfer</a>
(ODX),
the code that performs the transfer communicates
with the file system,
and the file system driver won't let anybody see the data
in the slack space.
Therefore, the transfer will not transfer any data
that resides in the slack space of the source file.
</p>
<p>
On the other hand, if you are copying data by operating
at a level below the file system driver,
then the file system driver can't stop you from seeing the slack space.
For example, if you use direct volume access and read sectors
straight off the hard drive,
you will see everything on the volume, including slack space.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (31)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1324745">
				<div id="div-comment-1324745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324745">
			February 13, 2018 at 7:10 am</a>		</div>

		<p>It would seem to me that the only way to get confidential information in the slack space in the first place would be to do a non-secure erase. While it would be nice if windows had such functionality available by default, it doesn&#8217;t. That said there are numerous utilities out there that DO have such a capability. That said you need to be aware of your medium before using them as they can cause unnecessary wear and tear.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1324795">
				<div id="div-comment-1324795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clockwork-Muse</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324795">
			February 13, 2018 at 8:50 am</a>		</div>

		<p>&#8230;.except most cases of needing a secure erase (such as selling a drive you no longer need) are covered adequately by drive encryption.  For everything else, a &#8220;secure erase&#8221; utility is going to bump up, hard, against the drive maintaining itself &#8211; defragging, move due to bad/expired sectors, etc &#8211; you&#8217;d have to regularly clean up the _entire_ drive for such scenarios.  It&#8217;s just so much easier to 1) encrypt the drive, and 2) have the os properly handle &#8220;extra&#8221; bytes in these situations.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mngoldeneagle even depth-3" id="comment-1324875">
				<div id="div-comment-1324875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324875">
			February 13, 2018 at 12:46 pm</a>		</div>

		<p>And that&#8217;s only considering magnetic hard drives.  On an SSD it&#8217;s worse because of wear-leveling algorithms.  Overwriting a file will almost never overwrite the same bytes on the drive, so you effectively have to secure-erase all of the unallocated space on the drive in order to &#8220;securely erase&#8221; the data.  Which is also a great way to significantly reduce the lifespan of said drive.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1324835">
				<div id="div-comment-1324835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324835">
			February 13, 2018 at 10:47 am</a>		</div>

		<p>Another possible way to get information in slack space might be: 1) write a bunch of data to a file; 2) truncate the file to a shorter length (maybe with `SetEndOfFile()`).</p>
<p>Note: I&#8217;m not saying that Windows systems do leave whatever information is in the cluster there when truncating &#8211; I don&#8217;t know the actual behavior.  But it wouldn&#8217;t surprise me if the data got left in the cluster.</p>
<p>Interestingly, the docs for SetEndOfFile() mention that there are three size-related attributes for a file stream:</p>
<p>file size<br />
allocation size<br />
valid data size</p>
<p>This article talks about when (file size &lt; allocation size), but what about when (file size &lt; valid data size)?  The docs for `SetFileValidSize()` says:</p>
<blockquote><p>
If SetFileValidData is used on a file, the potential performance gain is obtained by not filling the allocated clusters for the file with zeros. Therefore, reading from the file will return whatever the allocated clusters contain, potentially content from other users. This is not necessarily a security issue at this point, because the caller needs to have SE_MANAGE_VOLUME_NAME privilege for SetFileValidData to succeed, and all data on disk can be read by such users. However, this caller can inadvertently expose this data to other users that cannot acquire the SE_MANAGE_VOLUME_PRIVILEGE privilege if the following holds:</p>
<p>    If the file was not opened with a sharing mode that denies other readers, a nonprivileged user can open it and read the exposed data.<br />
    If the system stops responding before the caller finishes writing up the ValidDataLength supplied in the call, then, on a reboot, such a nonprivileged user can open the file and read exposed content.</p>
<p>If the caller of SetFileValidData opened the file with adequately restrictive access control, the previous conditions would not apply. However, for partially written files extended with SetFileValidData (that is, writing was not completed up to the ValidDataLength supplied in the call) there exists yet another potential privacy or security vulnerability. An administrator could copy the file to a target that is not properly controlled with restrictive ACL permissions, thus inadvertently exposing the extended area&#8217;s data to unauthorized reading.
</p></blockquote>
<p>Sounds like a pretty unlikely scenario, but maybe one that the customer who originally asked the question might still want to be aware of.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1324925">
				<div id="div-comment-1324925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324925">
			February 13, 2018 at 4:59 pm</a>		</div>

		<p>I&#8217;ve never understood the need for secure erase in consumer computing. If your application depends on confidential data, then you should not sell the used hard drives or equipment. Rather, you should store them securely. And if you have to dispose them, destroy them before &#8211; and a simple hammer allows to render any hard drive nonoperational (SSDs are a horse of a different color). If you rely on confidential data, you should assume the (small) cost of not selling used hardware.</p>
<p>Of course, data recovery companies are able to repair hard drives with damaged mechanics (hammer or else). But they are also able to recover many types of &#8220;secure erases&#8221;, except the most thoughtful variations. The ones that, by the way, take a loooong time to complete: calculate how much time it takes to write all over a 2 TB hard drive, and multiply that by 99. You&#8217;ll get that the average 2 TB hard drive take about 20 days to be securely erased (at a maintained speed of 120 MB/s, 24 hours a day).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-3" id="comment-1325205">
				<div id="div-comment-1325205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1325205">
			February 15, 2018 at 8:28 am</a>		</div>

		<p>Information recorded on modern drives is unrecoverable after a single erase. There is no recoverable residual left.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1324755">
				<div id="div-comment-1324755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324755">
			February 13, 2018 at 7:38 am</a>		</div>

		<p>My first thought on seeing the title was &#8220;Who cares?&#8221; Upon reading the context, yeah, that&#8217;s a good question, and I&#8217;m glad to know the answer.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fleet-command odd alt depth-2" id="comment-1324955">
				<div id="div-comment-1324955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324955">
			February 13, 2018 at 11:15 pm</a>		</div>

		<p>Well, my first thought was &#8220;obviously not&#8221;! Has this person never copied data from disk with 8 kB cluster size to a disk with 4 kB cluster size?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1324775">
				<div id="div-comment-1324775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">creaothceann</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324775">
			February 13, 2018 at 8:23 am</a>		</div>

		<p>IIRC when people were collecting the ROM contents of video game console cartridges like the SNES, they started to see source code in them. Games were sent to Nintendo on DOS-formatted floppy disks. One theory is that the ROM writing process simply copied whole sectors, including &#8216;erased&#8217; data.</p>
<p>See the category &#8220;<a href="https://tcrf.net/Category:Games_with_uncompiled_source_code" rel="nofollow">Games with uncompiled source code</a>&#8221; on the website &#8220;The Cutting Room Floor&#8221;.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1324905">
				<div id="div-comment-1324905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BOFH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324905">
			February 13, 2018 at 3:43 pm</a>		</div>

		<p>The original Commodore Amiga 1000 was accidentally shipped with source code fragments in the slack space of the Kickstart 1.0 diskette:<br />
<a href="http://www.pagetable.com/?p=34" rel="nofollow">http://www.pagetable.com/?p=34</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jernej-ms-live even depth-2" id="comment-1325105">
				<div id="div-comment-1325105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ender9' rel='external nofollow' class='url'>ender9</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1325105">
			February 15, 2018 at 1:40 am</a>		</div>

		<p>Microsoft&#8217;s own floppies contained things like e-mail fragments in slack space.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1324785">
				<div id="div-comment-1324785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324785">
			February 13, 2018 at 8:24 am</a>		</div>

		<p>Raymond, thanks!  This is good to know!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1324805">
				<div id="div-comment-1324805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324805">
			February 13, 2018 at 9:02 am</a>		</div>

		<p>It turns out you can see into the slack space from usermode by playing games with SetFileValidData. See <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa365544(v=vs.85)" rel="nofollow">https://msdn.microsoft.com/en-us/library/windows/desktop/aa365544(v=vs.85)</a>.aspx</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1324866">
				<div id="div-comment-1324866" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324866">
			February 13, 2018 at 12:41 pm</a>		</div>

		<p>I guess that&#8217;s technically correct, but the usermode process needs an assist from an improperly secured process with the correct permissions to call SetFileValidData. The issue there is in the hypothetical buggy application, not the filesystem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1324885">
				<div id="div-comment-1324885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Beldantazar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324885">
			February 13, 2018 at 12:53 pm</a>		</div>

		<p>Sure, but you have to be an administrator to do that, which means you could just do whatever else you wanted to get at the sensitive data anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1324946">
				<div id="div-comment-1324946" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324946">
			February 13, 2018 at 10:52 pm</a>		</div>

		<p>If you can use that function, you&#8217;re already way on the other side of that airtight hatchway, though. You might as well just read sectors until you find something interesting at that point.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1325055">
				<div id="div-comment-1325055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1325055">
			February 14, 2018 at 5:17 pm</a>		</div>

		<p>I wasn&#8217;t talking about security. Hint: user mode not unprivileged user.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1325506">
				<div id="div-comment-1325506" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1325506">
			February 16, 2018 at 9:48 pm</a>		</div>

		<p>Then the confusing part of your claim is that this is some novel technique, compared to just raw reading all data via whatever sector API you prefer.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-iboyd even thread-odd thread-alt depth-1 parent" id="comment-1324825">
				<div id="div-comment-1324825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/IanBoyd' rel='external nofollow' class='url'>IanBoyd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324825">
			February 13, 2018 at 10:35 am</a>		</div>

		<p>This is probably one of the scenario&#8217;s where you could answer the question by asking, &#8220;What would happen if it did copy slack space?&#8221;</p>
<p>We know that when you create a file, the file contents are zero-initialized by the filing system. If you attempt to:</p>
<p>&#8211; create a file<br />
&#8211; seek 100 MB forward<br />
&#8211; write 4 KB<br />
&#8211; seek to the beginning</p>
<p>You will find that your first 100 MB contain zeros. That&#8217;s because:</p>
<p>&#8211; the *valid* length of your file is only valid up until the last spot that you wrote<br />
&#8211; and any place you didn&#8217;t write data is going to be zero</p>
<p>Attempting to read past the end of a file will result in EOF &#8211; no data.</p>
<p>If you&#8217;re an administrator, you can bypass the file-system&#8217;s zero-initialization by calling `SetFileValidData(handle, 100*1024*1024)`. This lets you read old data on the hard drive; which is why it&#8217;s limited to administrators. (Technically someone with the SE_MANAGE_VOLUME_NAME right). This feature can be used by SQL Server (Instant File Initialization) to grow a file instantly without having to wait for the file system to zero all the new pages.</p>
<p>If file copy *could* read slack space, it would mean:</p>
<p>&#8211; a file has a length beyond it&#8217;s end-of-file (which isn&#8217;t how it works)<br />
&#8211; users can read slack space (which isn&#8217;t how it works)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-bboorman odd alt depth-2 parent" id="comment-1324845">
				<div id="div-comment-1324845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324845">
			February 13, 2018 at 11:26 am</a>		</div>

		<p>&gt;This is probably one of the scenario’s where you could answer the question by asking, “What would happen if it did copy slack space?”</p>
<p>It&#8217;s more like one of those scenario&#8217;s where the PHB wanted &#8220;something official&#8221; from Microsoft, so the minion had to ask the question he knew the answer to.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1324865">
				<div id="div-comment-1324865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324865">
			February 13, 2018 at 12:33 pm</a>		</div>

		<p>I don&#8217;t know. A good programmer probably has some intuition that it&#8217;s probably impossible to copy &#8220;slack space&#8221; in a userland application like Explorer, but there are a lot of underlying assumptions there. For example, that&#8217;s assuming there isn&#8217;t any kernel or filesystem special API for &#8220;fast copying&#8221; of files wherein the slack data isn&#8217;t abstracted away and perhaps would be copied in some situations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1324895">
				<div id="div-comment-1324895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324895">
			February 13, 2018 at 1:40 pm</a>		</div>

		<p>I don&#8217;t think it&#8217;s that obvious that the copy is always done in user-mode.  I mean, you could look at the File System Drivers documentation and note that there&#8217;s no IRP_MJ_COPY control code, but that&#8217;s hardly conclusive.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-iboyd even depth-4" id="comment-1325025">
				<div id="div-comment-1325025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/IanBoyd' rel='external nofollow' class='url'>IanBoyd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1325025">
			February 14, 2018 at 10:19 am</a>		</div>

		<p>&gt; I don’t think it’s that obvious that the copy is always done in user-mode.</p>
<p>It&#8217;s certainly not done *in* user-mode; but it&#8217;s done *by* user-mode.</p>
<p>And the rule for users in user-mode is that they can&#8217;t see slack space. The implementation, wherever it is done, will follow that rule.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-even depth-1 parent" id="comment-1324855">
				<div id="div-comment-1324855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324855">
			February 13, 2018 at 11:31 am</a>		</div>

		<p>Not so simple. When you read the last sector of a file opened with FILE_FLAG_NO_BUFFERING, the whole sector gets read to memory, even though the file may end in the middle of it. Same thing happens when you memory-map the file.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1324915">
				<div id="div-comment-1324915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324915">
			February 13, 2018 at 4:20 pm</a>		</div>

		<p>So, did you read the slack space?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1324965">
				<div id="div-comment-1324965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324965">
			February 14, 2018 at 12:04 am</a>		</div>

		<p>I&#8217;ve just tested sample code, and this is emphatically NOT TRUE. ReadFile will not read more than the actual size of the file into the buffer; if your buffer is initialized to 0xCC, it&#8217;ll still be mostly 0xCC if you read a 10-byte file, even if the actual slack space of the file is zeroes or some cryptographic key. The airtight hatchway is still sealed.</p>
<p>You can test yourself:</p>
<p>#include<br />
using namespace std;</p>
<p>int main(int argc, char* argv[]) {<br />
	char* buf;<br />
	buf = (char*)_aligned_malloc(4096,4096);<br />
	memset(buf, 0xcc, 4096 * sizeof(char));</p>
<p>	HANDLE hIFile;<br />
	LPDWORD actualsize = 0;</p>
<p>	hIFile = CreateFileA((LPCSTR)argv[1], GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL<br />
		| FILE_FLAG_NO_BUFFERING<br />
		, NULL);<br />
	ReadFile(hIFile, buf, 4096, NULL, NULL);</p>
<p>	return 0;<br />
}</p>
<p>Little programs, no error checking, etc, etc. Break on the return and examine the contents of buf.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-odd thread-alt depth-1" id="comment-1324945">
				<div id="div-comment-1324945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324945">
			February 13, 2018 at 6:18 pm</a>		</div>

		<p>If I were asked such question, I&#8217;d probably answer with something like:</p>
<p>It&#8217;s much like when you have to copy data in an array to another location. There could be other potentially sensitive data at the allocated and not used block of memory assigned to the array*, but when you copy an array, you only loop copy the content of assigned part up to the length counter and don&#8217;t copy beyond the boundary, so unless you&#8217;re using block memory copy instruction / API that &#8220;ignores context of the array at all&#8221; the answer is &#8220;no data in the unassigned section will be copied in the copy operation&#8221;.</p>
<p>* assumes the programming language does not require zero out memory before giving to the code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1324976">
				<div id="div-comment-1324976" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1324976">
			February 14, 2018 at 3:07 am</a>		</div>

		<p>What scenarios would get bytes into the slack space? I suppose file truncation would do it, but are there others?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1325035">
				<div id="div-comment-1325035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M Hotchin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1325035">
			February 14, 2018 at 12:10 pm</a>		</div>

		<p>Sector re-use after a file is deleted.  Most file systems do not overwrite a file&#8217;s contents on deletion.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kirbyfcf2 odd alt thread-odd thread-alt depth-1 parent" id="comment-1325126">
				<div id="div-comment-1325126" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Kirby+FC' rel='external nofollow' class='url'>Kirby FC</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1325126">
			February 15, 2018 at 4:14 am</a>		</div>

		<p>&gt;&gt;Antonio Rodríguez<br />
&gt;&gt;Of course, data recovery companies are able to repair hard drives with damaged mechanics (hammer or else). But they are also able to recover many types of “secure erases”, except the most thoughtful variations. </p>
<p>This is a common misconception that hasn&#8217;t actually been true for many years.  At one time, ~20 years ago, it was theorized that you could use Magnetic Force Microscopy or Scanning Tunneling Microscopy to image bits recorded on magnetic media and recover data data that had been over-written (see &#8220;Secure Deletion of Data from Magnetic and Solid-State Memory&#8221;, written by Peter Gutmann in 1996).  However, there is no documented evidence that this has ever actually been done.</p>
<p>But, that&#8217;s now irrelevant.  Because of increased data density on hard drive platters, any hard drive (not SSD) manufactured in the last 10+ years can be rendered &#8220;securely erased&#8221; with a single over-write of random bits.  Of course, if you are really that paranoid about what&#8217;s on your old hard drives, then you are correct, you shouldn&#8217;t be selling or giving them away.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev even depth-2" id="comment-1325225">
				<div id="div-comment-1325225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180213-00/?p=98015#comment-1325225">
			February 15, 2018 at 8:37 am</a>		</div>

		<p>Many enterprise-grade drives have an &#8220;instant secure erase&#8221; feature, where an internal encryption key gets overwritten, instantly making the whole drive contents unrecoverable.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

