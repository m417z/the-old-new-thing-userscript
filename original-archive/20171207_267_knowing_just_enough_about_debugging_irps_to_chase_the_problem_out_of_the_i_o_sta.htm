<html>
<head>
<title>Knowing just enough about debugging IRPs to chase the problem out of the I/O stack</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Knowing just enough about debugging IRPs to chase the problem out of the I/O stack</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 7, 2017 / year-entry #268</td></tr>
<tr><td><b>Tags:</b></td><td>tipssupport</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171207-00/?p=97536</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Fumbling around and stumbling into a diagnosis.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
One of my colleagues was running a tool that wound up stuck on
<code>Flush&shy;File&shy;Buffers</code>.
Since this was a hang in the I/O stack,
a kernel dump is more useful.
</p>
<p>
I used the <code>!irp</code> debugger command to look at the
I/O request that got stuck:
</p>
<pre>
0: kd&gt; !irp 0xffffab0c`fced9340 1

Irp is active with 2 stacks 2 is current (= 0xffffab0cfced9458)
 No Mdl: No System Buffer: Thread ffffab0d15731080:  Irp stack trace.
     cmd  flg cl Device   File     Completion-Context
 [N/A(0), N/A(0)]
            0  0 00000000 00000000 00000000-00000000

                        Args: 00000000 00000000 00000000 00000000
&gt;[IRP_<a HREF="https://en.wikipedia.org/wiki/MJ#People">MJ</a>_FLUSH_BUFFERS(9), N/A(0)]
            0  1 ffffab0cdf855060 ffffab0ce2c6eef0 00000000-00000000    pending
               \FileSystem\Npfs
                        Args: 00000000 00000000 00000000 00000000
</pre>
<p>
I don't know what any of this means,
but somebody else did.
</p>
<p>
The file system is <code>Npfs</code>,
which is the "named pipe" file system.
This means that the code is trying
to flush a named pipe, and the process on the other end
of the pipe is not responding.
</p>
<p>
With the help of
<a HREF="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/-fileobj">
debugger documentation</a>
I dumped the file object:
</p>
<pre>
0: kd&gt; !fileobj ffffab0ce2c6eef0

\contoso44268

Device Object: 0xffffab0cdf855060   \FileSystem\Npfs
Vpb is NULL

Flags:  0x40082
        Synchronous IO
        Named Pipe
        Handle Created

File Object is currently busy and has 1 waiters.

FsContext: 0xffffe30b60eefe70   FsContext2: 0xffffe30b23b593d3
Private Cache Map: 0x00000001
CurrentByteOffset: 0
</pre>
<p>
I don't know what any of this means either,
but the name of the named pipe is apparently
<code>contoso44268</code>.
</p>
<p>
We provided this information to the owner of the tool,
and they recognized it as a named pipe they use to
communicate between the tool and a helper process,
and the helper process in turn
satisfies the pipe request by
contacting a Web service.
</p>
<p>
The owner of the tool requested some diagnostic logs
to figure out why the named pipe got stuck.
But that's not the point of the story today.
The point here is just being able to chase the stuck I/O
out of kernel mode back into an application so the forward
progress can be made.
</p>
<p>
<b>Bonus reading</b>:
More on debugging the I/O system:
</p>
<ul>
<li>
    <a HREF="https://blogs.msdn.microsoft.com/ntdebugging/2009/04/13/search-to-the-rescue/">
    !Search to the Rescue!</a>
</li>
<li>
    <a HREF="https://blogs.msdn.microsoft.com/ntdebugging/2012/10/29/breaking-down-the-cl-in-irp/">
    Breaking down the "CI" in !irp</a>
</li>
<li>
    <a HREF="https://blogs.msdn.microsoft.com/ntdebugging/tag/io/">
    All I/O-tagged topics on the NT debugging blog</a>
</li>
</ul>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1317616">
				<div id="div-comment-1317616" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171207-00/?p=97536#comment-1317616">
			December 7, 2017 at 7:28 am</a>		</div>

		<p>&#8220;&#8230; by contacting a Web service.&#8221;<br />
Addendum: &#8220;And that process hung when the web service failed to respond, because the (forgotten) computer under someone&#8217;s desk got unplugged as part of an office redecorating project.&#8221; <a href="https://blogs.msdn.microsoft.com/oldnewthing/20090114-00/?p=19493/" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20090114-00/?p=19493/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1317625">
				<div id="div-comment-1317625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171207-00/?p=97536#comment-1317625">
			December 7, 2017 at 8:39 am</a>		</div>

		<p>Hmmm..  A link to MJ?  Interesting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-iboyd even thread-even depth-1 parent" id="comment-1317635">
				<div id="div-comment-1317635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/IanBoyd' rel='external nofollow' class='url'>IanBoyd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171207-00/?p=97536#comment-1317635">
			December 7, 2017 at 9:19 am</a>		</div>

		<p>There&#8217;s a lot of chewing-gum code out there for how to launch a process and capture its command-line output. You create a pipe, you supply the writable end of the pipe to the child process using the `StartupInfo.hStdOutput` parameter of **CreateProcess**.  The chewing gum code fails when they try wait for the child process to end by waiting for the child process handle to become signaled (e.g. MsgWaitFor&#8230;).</p>
<p>The problem is that if you wait, the child process will **never** signal:</p>
<p>&#8211; because the child process can never close<br />
&#8211; because it&#8217;s stalled writing to the pipe<br />
&#8211; because the pipe buffer is full<br />
&#8211; because you&#8217;re not reading from your readable end of the pipe<br />
&#8211; because you&#8217;re waiting for the child process to close</p>
<p>**Deadlock**</p>
<p>The proper solution is to keep reading from the pipe in a loop. When the child process terminates, it&#8217;s writeable end of the pipe will close with it. That will cause **ReadFile** to return false, and **GetLastError** will return `ERROR_BROKEN_PIPE` *(&#8220;The pipe has been ended.&#8221;)*. </p>
<p>Be sure to keep reading from the pipe in a loop until **ReadFile** fails:</p>
<p>    //Read will return when the buffer is full, or if the pipe on the other end has been broken<br />
    while (ReadFile(stdOutRead, buffer, bufferSize, &amp;bytesRead, null)<br />
        runningText = runningText + Copy(buffer, 1,  bytesRead);</p>
<p>    //ReadFile will either tell us that the pipe has closed, or give us an error<br />
    DWORD le = GetLastError;<br />
    if (le != ERROR_BROKEN_PIPE) //&#8221;The pipe has been ended.&#8221;<br />
       RaiseLastOSError(le);</p>
<p>And an important point is that once you hand your child process the writable end of the pipe, you must call **CloseHandle** on your reference to the writeable end of the pipe; that way it will signal when the child process terminates.</p>
<p>**tl;dr:** Stop waiting for the child process to end before you read from the pipe.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-zlynx odd alt depth-2" id="comment-1317645">
				<div id="div-comment-1317645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171207-00/?p=97536#comment-1317645">
			December 7, 2017 at 1:11 pm</a>		</div>

		<p>And the worst bit about what you describe is that some data will fit into the pipe buffer without being read. Which means that small test outputs will appear to work but longer outputs will hang.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1317655">
				<div id="div-comment-1317655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171207-00/?p=97536#comment-1317655">
			December 7, 2017 at 5:12 pm</a>		</div>

		<p>I got really annoyed that ReadFile can fail with ERROR_BROKEN_PIPE. My helper libraries change that to a successful read of length 0 now. (Hint: EOF) Of course I have to do something a little different if I want stdout and stderr separate (waaay too much code in any case).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1317695">
				<div id="div-comment-1317695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171207-00/?p=97536#comment-1317695">
			December 8, 2017 at 9:12 pm</a>		</div>

		<p>What does the helper do if it actually gets a successful read of length zero?  For a named pipe, that&#8217;s legal: it just means that the process at the other end of the pipe performed a null write.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1317665">
				<div id="div-comment-1317665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171207-00/?p=97536#comment-1317665">
			December 7, 2017 at 9:28 pm</a>		</div>

		<p>These are by far the most useful articles I read on your blog! I&#8217;ve used them to compile a cheat sheet for debugging hangs and difficult crashes. Sadly, even when I eventually track down the culprits, the owners of the code rarely bother, but it&#8217;s worth knowing anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

