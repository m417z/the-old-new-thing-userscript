<html>
<head>
<title>A helper template function to wait for a Win32 condition variable in a loop</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A helper template function to wait for a Win32 condition variable in a loop</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 19, 2018 / year-entry #16</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180119-00/?p=97845</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Another case of the spurious wake-up.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Win32
<a HREF="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682052(v=vs.85).aspx">
condition variables</a>
suffer from the problem of spurious wake-ups,
and you will usually wait on a condition variable in a loop.
It's easier than
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180118-00/?p=97825">
the case of <code>Wait&shy;On&shy;Address</code></a>
because you hold a lock while checking the condition,
so you don't have to worry about race conditions against other threads.
(The idea is that anybody who wants to cause a change to the condition
needs to acquire the same lock.
Therefore holding the lock prevents the condition from changing.)
</p>
<p>
The C++ standard library contains an overload to
<a HREF="http://en.cppreference.com/w/cpp/thread/condition_variable/wait">
the <code>std::<code></code>condition_<code></code>variable::<code></code>wait</code> method</a>
which takes a predicate.
If the predicate returns <code>false</code>,
then the <code>wait</code> will loop back and wait some more.
</p>
<p>
Let's write that same helper function for Win32 condition variables.
</p>
<pre>
template&lt;typename TLambda&gt;
void SleepConditionVariableCSUntil(
  CONDITION_VARIABLE* conditionVariable,
  CRITICAL_SECTION*   criticalSection,
  TLambda&amp;&amp;           is_okay)
{
  while (!is_okay()) {
    SleepConditionVariableCS(conditionVariable, criticalSection, INFINITE);
  }
}

template&lt;typename TLambda&gt;
void SleepConditionVariableSharedSRWUntil(
  CONDITION_VARIABLE* conditionVariable,
  SRWLOCK*            srwLock,
  TLambda&amp;&amp;           is_okay)
{
  while (!is_okay()) {
    SleepConditionVariableSRW(conditionVariable, srwLock, INFINITE,
                              CONDITION_VARIABLE_LOCKMODE_SHARED);
  }
}

template&lt;typename TLambda&gt;
void SleepConditionVariableExclusiveSRWUntil(
  CONDITION_VARIABLE* conditionVariable,
  SRWLOCK*            srwLock,
  TLambda&amp;&amp;           is_okay)
{
  while (!is_okay()) {
    SleepConditionVariableSRW(conditionVariable, srwLock, INFINITE, 0);
  }
}
</pre>
<p>
I will admit that these helpers aren't as useful as the one
for <code>Wait&shy;On&shy;Address</code> because the loop is very
straightforward.
It may not be much of a benefit over just writing the loop out manually.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1321616">
				<div id="div-comment-1321616" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180119-00/?p=97845#comment-1321616">
			January 19, 2018 at 7:03 am</a>		</div>

		<p>Sadly the C++ implementation of <code>std::condition_variable</code> in the 15.* toolset is <a href="https://stackoverflow.com/questions/47349751/stdconditional-variablewait-for-stdthreadsleep-for-on-windows-are-affec#comment81672181_47349751" rel="nofollow">broken</a> so if you want it to work correctly you&#8217;ll need to use the WIN32 version until that&#8217;s fixed in a breaking release.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1321675">
				<div id="div-comment-1321675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180119-00/?p=97845#comment-1321675">
			January 19, 2018 at 10:15 am</a>		</div>

		<p>Bonus sadness is that the Win32 condition variable does not meet all the requirements of the C++ standard condition variable, so the runtime folks can&#8217;t just use it directly.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-yuhong-bao even depth-3 parent" id="comment-1321676">
				<div id="div-comment-1321676" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180119-00/?p=97845#comment-1321676">
			January 19, 2018 at 12:43 pm</a>		</div>

		<p>I wonder why SignalObjectAndWaitMultiple was never created.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1321705">
				<div id="div-comment-1321705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JAS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180119-00/?p=97845#comment-1321705">
			January 19, 2018 at 5:48 pm</a>		</div>

		<p>I wonder when there is going to be a serious effort to use coroutines to spiritually break out of Kernel Land. You can have faster, more advanced versions of all of these constructs.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude even depth-5" id="comment-1322885">
				<div id="div-comment-1322885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180119-00/?p=97845#comment-1322885">
			January 29, 2018 at 5:25 am</a>		</div>

		<p>The next version of the Windows SDK contains the CPP/WinRT components that support (and encourage) co-routines. Having already used them for some sockets code it was an absolute dream.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

