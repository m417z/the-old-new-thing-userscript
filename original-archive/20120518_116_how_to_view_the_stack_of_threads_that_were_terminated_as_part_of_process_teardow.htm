<html>
<head>
<title>How to view the stack of threads that were terminated as part of process teardown from user mode</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How to view the stack of threads that were terminated as part of process teardown from user mode</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 18, 2012 / year-entry #117</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time we saw how to view the stack of threads that were terminated as part of process teardown from the kernel debugger. You can do the same thing from a user-mode debugger, and it's actually a bit easier there. (The user-mode debugger I'm using is the one that comes with the Debugging Tools for...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last time we saw
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2012/05/17/10306078.aspx">
how to view the stack of threads that were terminated
as part of process teardown from the kernel debugger</a>.
You can do the same thing from a user-mode debugger,
and it's actually a bit easier there.
(The user-mode debugger I'm using is the one that comes with the
<a HREF="http://msdn.microsoft.com/en-us/windows/hardware/gg463009">
Debugging Tools for Windows</a>,
the debugging engine that goes by a number of different front-ends,
such as <code>ntsd</code>, <code>cdb</code>, and <code>windbg</code>.)
</p>
<p>
A direct translation of the kernel-mode technique from last
time would involve using the
<code>!vadump</code> command and picking through for the
memory blocks with candidate size and attributes.
But there's an easier way.
</p>
<blockquote CLASS=m><p>
Now would be a good point for me to remind you that
this information is
<b>for debugging purposes only</b>.
The structures and offsets are all implementation details
which can change from release to release.
</p>
</blockquote>
<p>
Recall that the TEB begins with some pointers which
bound the stack, and the seventh pointer is a self-pointer.
What's even more useful is the thirteenth pointer
(offset 0x30 for 32-bit TEBs, offset 0x60 for 64-bit TEBs),
because that is where the
<a HREF="http://msdn.microsoft.com/en-us/library/ff564670.aspx">
PEB</a> is stored.
</p>
<p>
Each process has a single global PEB, so all the TEBs will have
the same PEB value at offset 0x30/0x60.
And you can figure out the address of the current process's
PEB either by using the !peb command or by simply looking
at the TEB you already have.
</p>
<pre>
0:000&gt; dd fs:30 l1
0053:00000030  <u>7efde000</u>
</pre>
<p>
Now you can search through memory looking for that value.
If you see any hits at offset 0x30/0x60, then that's a candidate TEB.
</p>
<p>
The debugger normally limits memory scans to 256MB.
</p>
<pre>
0:001&gt; s 00000000 L 80000000 00 e0 fd 7e
                           ^ Range error in 's 00000000 l 80000000 00 e0 fd 7e'
</pre>
<p>
Therefore, you have to issue the search eight times (for 32-bit processes)
to cover the 2GB user-mode address space.
</p>
<pre>
0:001&gt; s 00000000 L 10000000 00 e0 fd 7e
0009e01c  00 e0 fd 7e 00 d0 fd 7e-44 e0 09 00 7b ef 17 77  ...~...~D...{..w
0009fdc0  00 e0 fd 7e 44 00 00 00-f0 ee 3a 00 10 ef 3a 00  ...~D.....:...:.
0009fe34  00 e0 fd 7e 78 fe 09 00-02 9f 18 77 00 e0 fd 7e  ...~x......w...~
0:001&gt; s 10000000 L 10000000 00 e0 fd 7e
0:001&gt; s 20000000 L 10000000 00 e0 fd 7e
0:001&gt; s 30000000 L 10000000 00 e0 fd 7e
0:001&gt; s 40000000 L 10000000 00 e0 fd 7e
0:001&gt; s 50000000 L 10000000 00 e0 fd 7e
0:001&gt; s 60000000 L 10000000 00 e0 fd 7e
0:001&gt; s 70000000 L 10000000 00 e0 fd 7e
7486af70  00 e0 fd 7e 00 00 00 00-b8 00 16 77 28 00 16 77  ...~.......w(..w
7efda030  00 e0 fd 7e 00 00 00 00-00 00 00 00 00 00 00 00  ...~............
7efdd030  00 e0 fd 7e 00 00 00 00-00 00 00 00 00 00 00 00  ...~............
</pre>
<p>
Alternatively, you can use the "length sanity check override"
by inserting a question mark after the L:
</p>
<pre>
0:001&gt; s 00000000 L?80000000 00 e0 fd 7e
0009e01c  00 e0 fd 7e 00 d0 fd 7e-44 e0 09 00 7b ef 17 77  ...~...~D...{..w
0009fdc0  00 e0 fd 7e 44 00 00 00-f0 ee 3a 00 10 ef 3a 00  ...~D.....:...:.
0009fe34  00 e0 fd 7e 78 fe 09 00-02 9f 18 77 00 e0 fd 7e  ...~x......w...~
7486af70  00 e0 fd 7e 00 00 00 00-b8 00 16 77 28 00 16 77  ...~.......w(..w
7efda030  00 e0 fd 7e 00 00 00 00-00 00 00 00 00 00 00 00  ...~............
7efdd030  00 e0 fd 7e 00 00 00 00-00 00 00 00 00 00 00 00  ...~............
</pre>
<p>
From the above output, we see that we can quickly reject all but
the last two entries because the offset within the page is not
the magic value 0x30.
(This is a 32-bit process.)
Hooray, two debugger commands reduce the search space to just
two pages!
</p>
<p>
At this point, you can continue with the debugging technique from last
time, looking at each candidate TEB to see if there's a valid stack in there.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-985943">
				<div id="div-comment-985943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-985943">
			May 18, 2012 at 10:10 am</a>		</div>

		<p>[ Now would be a good point for me to remind you that this information is for debugging purposes only. The structures and offsets are all implementation details which can change from release to release. ]</p>
<p>Given the fact the Wine team had to go out of their way to implement these structures due to massive dependencies on them, you can&#39;t change them without massive breakage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-985953">
				<div id="div-comment-985953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Tait</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-985953">
			May 18, 2012 at 10:37 am</a>		</div>

		<p>A slightly more supported way of getting the PEB than &quot;dd fs:30 l1&quot; is &quot;? $peb&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-985963">
				<div id="div-comment-985963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken W</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-985963">
			May 18, 2012 at 11:34 am</a>		</div>

		<p>@Joshua: [Given the fact the Wine team had to go out of their way to implement these structures due to massive dependencies on them, you can&#39;t change them without massive breakage.]</p>
<p>This has nothing to do with anything. The Wine developers are using implementation-specific details that are internal, and if those internals change the Wine team will need to make appropriate changes as well. MS isn&#39;t bound to not change anything just because Wine depends on it the way it is now. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-985973">
				<div id="div-comment-985973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-985973">
			May 18, 2012 at 11:40 am</a>		</div>

		<p>@Ken W: I think you missed the point. The Wine team did it because they found out what happened when they didn&#39;t do it. If MS repeats the experiment they too will find out just how many people depended on it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-985983">
				<div id="div-comment-985983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ens</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-985983">
			May 18, 2012 at 1:11 pm</a>		</div>

		<p>Wish I had this trick about a year and a half ago. &nbsp;This is one of those techniques that is probably pure gold once in a blue moon.</p>
<p>As for Wine: &nbsp;the fact that the structures exist and are necessary does not imply that every detail of every member is necessary, so it could change.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-986043">
				<div id="div-comment-986043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986043">
			May 19, 2012 at 3:12 am</a>		</div>

		<p>@Joshua:</p>
<p>Actually Microsoft don&#39;t have to bother too much with compatability if they don&#39;t want to. They have the advantage of <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms686708(v=vs.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms686708(v=vs.85).aspx</a> on their side. In the public Windows headers TEB is virtually undefined and marked as this structure could change. So anyone relying on TEB is playing with fire.</p>
<p>I can understand Wine emulating it, since it is a Windows environment emulator, so their priority is to get existing applications working, but Microsoft are not constrained by that. All Microsoft are bound by is the promise of keeping documented interfaces and structures as compatable as possible. Microsoft have broken people using undocumented interfaces and structures, or people using reserved things in the past. So TEB is no exception to this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-986053">
				<div id="div-comment-986053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986053">
			May 19, 2012 at 4:34 am</a>		</div>

		<p>@Crescens2k: but Wine Is Not an Emulator&#8230;</p>
<p>I once tried to submit a patch to Wine, but it was refused because it was too accurate. Instead they accepted a patch which happened to suffice to allow some application or other to run correctly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-986063">
				<div id="div-comment-986063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986063">
			May 19, 2012 at 5:28 am</a>		</div>

		<p>@Crescens2k The point is that MS quite rarely breaks backwards compatibility without a really good reason, even if people are using undocumented structures or just rely on bugs to work. Considering that you obviously know this blog here, I don&#39;t have to point to some examples of this ;)</p>
<p>So changing a structure in a way that would break lots of programs (by admission of Joshua, I&#39;ve no idea why people would need this structure for something other than debugging) is at least unlikely or would result in poor Raymond having to write some interesting shims.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-986073">
				<div id="div-comment-986073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986073">
			May 19, 2012 at 5:45 am</a>		</div>

		<p>@Niel:</p>
<p>That is why I was so specific about Wine&#39;s role. It is an environment emulator/compatability layer. It is not an &quot;Emulator&quot; as in it doesn&#39;t do emulation of processors or things like that. But while the term &quot;Emulator&quot; is often seen as software to mimic the functionality of a piece of hardware in software, the word emulate has a much looser meaning. The base meaning is &quot;match or surpass by imitation&quot;, and the computing related meaning is &quot;reproduce the function or action of &quot;. This was taken from the Oxford English Dictionary.</p>
<p>So Wine reproduces the Win32 API -&gt; Wine emulates the Win32 API -&gt; Wine is a Win32 environment emulator isn&#39;t that wrong, is it?</p>
<p>The acronym itself was really used to try and stop people thinking of it as an actual hardware emulator (like console emulation or the x86 emulation on ia64). As taken from the Debunking Wine Myths page</p>
<p>&quot;Wine is slow because it is an emulator&quot;</p>
<p>Wine&#39;s not that kind of emulator</p>
<p>When users think of emulators, they think of programs like Dosbox or zsnes. These applications run as virtual machines and are slow, having to emulate each processor instruction. Wine does not do any CPU emulation &#8211; hence the name &quot;Wine Is Not an Emulator.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-986083">
				<div id="div-comment-986083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986083">
			May 19, 2012 at 6:53 am</a>		</div>

		<p>@voo:</p>
<p>The thing is, the backwards compatability is centered around the public interfaces. Yes, Microsoft breaking compatability on public functions is rare. The thing is, these are internal interfaces. The compatability stories on here are usually about people getting information on public interfaces and assuming that it will always be true. For example, the stories on shell extensions.</p>
<p>But then we also have things like <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2003/12/18/44425.aspx" rel="nofollow">blogs.msdn.com/&#8230;/44425.aspx</a> which is then followed up later by <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2005/07/01/434648.aspx" rel="nofollow">blogs.msdn.com/&#8230;/434648.aspx</a> when Microsoft just changed the meaning of the reserved fields in a structure. So if something is marked as internal, then Microsoft can and will change things.</p>
<p>But I would be very surprised if changing the meaning of an internal structure would have mass breakage anyway. But then again, considering what some programmers are like, you never know.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-986093">
				<div id="div-comment-986093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986093">
			May 19, 2012 at 10:29 am</a>		</div>

		<p>@Crescens2k: Microsoft seems often more likely to change documented interfaces than undocumented interfaces. Like say ntdll was documented to be loaded at 0x7c900000. It&#39;s not often there anymore.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-986103">
				<div id="div-comment-986103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986103">
			May 19, 2012 at 11:13 am</a>		</div>

		<p>@Joshua:</p>
<p>That is a curious thing to say, since undocumented interfaces are undocumented, how would you know that they have changed? Also, for ntdll.dll, the base address of that is also implementation specific. As far as I remember, the only requirement for the base address of that DLL is that kernel mode knows where it is. Anyway, is it documented anywhere officially by Microsoft that ntdll would load in at that address only?</p>
<p>Anyway, think about the truely undocumented interfaces and structures. How much is actually written about those? If these interfaces are truely undocumented, why would Microsoft need to tell you about changes? We have had some rather big, not very well documented things over the last few years. The change in exception handling schemes on x64, the change in process termination and more. But since all of these are internal functions, how do you know that none of the interfaces have changed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-986113">
				<div id="div-comment-986113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986113">
			May 19, 2012 at 1:47 pm</a>		</div>

		<p>@Crescens2k: Read the NT4 documentation. The exact base address of that dll was listed in the documentation as a fundamental constant.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-986123">
				<div id="div-comment-986123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986123">
			May 19, 2012 at 2:33 pm</a>		</div>

		<p>But did that documentation say that it would always load in at that same address even after major version updates? The fact that it is Windows NT4 documentation heavily implies that it was only guaranteed during the NT4 lifetime. When you also take into consideration that when Windows 2000 shipped, the base address of ntdll.dll had moved to 0x77F80000, then it does really show that 0x7c900000 was NT4 only.</p>
<p>Since both the Windows kernel and executive, and ntdll.dll are controlled by Microsoft, it does make a lot of sense to think that the base can be moved. The only reason why ntdll.dll is fixed is because of user mode/kernel mode callbacks and perhaps the switches between WoW64 and native x64 (I&#39;m not sure if wntdll.dll goes through ntdll.dll or one of the wow DLLs). Either way, all that needs to occur is that everything agrees on where, and that is completely under Microsoft&#39;s control.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-986133">
				<div id="div-comment-986133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986133">
			May 19, 2012 at 3:33 pm</a>		</div>

		<p>@Crescens You have a point there, although I can think of exceptions to that rule, the pattern does make sense.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-986143">
				<div id="div-comment-986143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986143">
			May 19, 2012 at 4:23 pm</a>		</div>

		<p>Aother wa to do it with !vadump. Typically stack consists 3 parts: a reserved then guadpage and then finally &#8211; commited part with actual stack data. For example:</p>
<p>BaseAddress: &nbsp; &nbsp; &nbsp; 00030000</p>
<p>RegionSize: &nbsp; &nbsp; &nbsp; &nbsp;000e9000</p>
<p>State: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 00002000 &nbsp;MEM_RESERVE</p>
<p>Type: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;00020000 &nbsp;MEM_PRIVATE</p>
<p>BaseAddress: &nbsp; &nbsp; &nbsp; 00119000</p>
<p>RegionSize: &nbsp; &nbsp; &nbsp; &nbsp;00001000</p>
<p>State: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 00001000 &nbsp;MEM_COMMIT</p>
<p>Protect: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 00000104 &nbsp;PAGE_READWRITE + PAGE_GUARD</p>
<p>Type: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;00020000 &nbsp;MEM_PRIVATE</p>
<p>BaseAddress: &nbsp; &nbsp; &nbsp; 0011a000</p>
<p>RegionSize: &nbsp; &nbsp; &nbsp; &nbsp;00016000</p>
<p>State: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 00001000 &nbsp;MEM_COMMIT</p>
<p>Protect: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 00000004 &nbsp;PAGE_READWRITE</p>
<p>Type: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;00020000 &nbsp;MEM_PRIVATE</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-986163">
				<div id="div-comment-986163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986163">
			May 19, 2012 at 7:35 pm</a>		</div>

		<blockquote><p>
  But did that documentation say that it would always load in at that same address even after major version updates?
</p></blockquote>
<p>Neither does it say any such thing about CreateWindow. Without the benefit of hindsight it would have been impossible to tell the difference between the two.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-986173">
				<div id="div-comment-986173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt T</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986173">
			May 20, 2012 at 3:57 am</a>		</div>

		<p>NTDLL loads at a different address every time you reboot as of Vista. It&#39;s called ASLR.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-986183">
				<div id="div-comment-986183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986183">
			May 20, 2012 at 8:18 am</a>		</div>

		<p>@Matt Yep and I think security better trump backwards compatibility every time.. and MS seems to agree.</p>
<p>Also maybe I&#39;m missing something (I&#39;ve had not much sleep), but why exactly do we need to know where the OS will load some library? I can&#39;t think of a single thing where this would be necessary that couldn&#39;t be achieved in a simpler manner (heck if that wasn&#39;t true ASLR would be quite problematic). Well except if we&#39;re writing viruses, but I doubt MS is quite as worried about those developers ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-986193">
				<div id="div-comment-986193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken W</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986193">
			May 21, 2012 at 5:36 am</a>		</div>

		<p>@Joshua &#8211; Ah, got it. You&#39;re right &#8211; I did miss your point. I stand corrected. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-986253">
				<div id="div-comment-986253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986253">
			May 21, 2012 at 8:55 am</a>		</div>

		<p>@Joshua:</p>
<p>What was NTDLL address in NT 3.1?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-986293">
				<div id="div-comment-986293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986293">
			May 21, 2012 at 3:12 pm</a>		</div>

		<p>It&#39;s somewhat annoying that there&#39;s no documented way to get the TEB for a target thread. &nbsp;NtQueryInformationThread works, but isn&#39;t documented. &nbsp;The only fully-documented way only works on x86: GetThreadContext to get the value of FS, GetThreadSelectorEntry to get the base address of the FS segment, ReadProcessMemory that address into an NT_TIB32 structure (defined in WinNT.h), then look at the Self pointer, which in NT will equal the base address of the FS segment.</p>
<p>It&#39;s too bad that GetThreadSelectorEntry isn&#39;t allowed on x86-64 threads. &nbsp;There&#39;s no reason it couldn&#39;t be implemented.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-986303">
				<div id="div-comment-986303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986303">
			May 21, 2012 at 4:01 pm</a>		</div>

		<p>@Myria: AFAIK GetThreadSelectorEntry works on x86-64 when operating on the thread that called it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-986693">
				<div id="div-comment-986693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986693">
			May 22, 2012 at 4:27 pm</a>		</div>

		<p>2Myria actually you can to get FS (GS fo x64) by GetThreadContext, then launch additional thread in same process and that thread must load passed to it selector&#39;s value into say es and then read TEB::Self ptr into eax (rax) and return. The caller will able to get pointer as thread&#39;s exit code or whatever else.</p>
<p>PS But NtQueryInformationThread simplier ad faster :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-986733">
				<div id="div-comment-986733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120518-00/?p=7583#comment-986733">
			May 22, 2012 at 9:58 pm</a>		</div>

		<p>@Joshua: Nope, GetThreadSelectorEntry on x86-64 just calls BaseSetLastNTError(STATUS_NOT_SUPPORTED) and returns FALSE. &nbsp;Wow64GetThreadSelectorEntry only understands the segments used in 32-bit mode: 0x0020, 0x0028, and 0x0050 (ignoring RPL bits), so won&#39;t accept 64-bit.</p>
<p>@Killer{R}: All threads have the same GS selector value &#8211; it&#39;s the segment&#39;s base that differs. &nbsp;Attempting to do that from a new thread will return the new thread&#39;s TEB.</p>
<p>The fact that GetThreadSelectorEntry doesn&#39;t work on x86-64 means that you could make some really obfuscated code by using user-mode thread scheduling, which creates LDT entries for the TEBs. &nbsp;Debuggers wouldn&#39;t be able to tell what address is being read.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

