<html>
<head>
<title>Don't let more than one process try to read from stdin at the same time</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Don&#8217;t let more than one process try to read from stdin at the same time</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 2, 2011 / year-entry #287</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer reported a problem with a program that ran a series of other programs in parallel. We have a main program (call it main.exe) that runs a bunch of child processes with stdout and stderr redirected. (We are not redirecting stdin.) We've found that some of the child processes get stuck inside the C...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer reported a problem with a program that ran a series of other programs in parallel.</p>
<blockquote class="q"><p> We have a main program (call it main.exe) that runs a bunch of child processes with stdout and stderr redirected. (We are not redirecting stdin.) We've found that some of the child processes get stuck inside the C runtime startup code on a call to <code>Get&shy;File&shy;Type</code> on the stdin handle. What could be the reason for this? Is there something we can do that doesn't require us to modify the child processes? (They are third party code we do not have control over.) </p>
</blockquote>
<p> This is one of those <i>once you've debugged this problem you never forget it</i> type of problems. </p>
<p> Notice that each of the child processes inherits the same stdin from main.exe, since you aren't redirecting stdin. Since the stdin handle was not opened as overlapped, all I/O to the handle is serialized. </p>
<p> The C runtime calls <code>Get&shy;File&shy;Type</code> at startup to determine whether or not to use buffering. When each child process starts up, it calls <code>Get&shy;File&shy;Type</code>, enters its <code>main</code>, and goes about its business. Everything is great <i>until one of them tries to read from stdin</i>. At that point, everything falls apart. </p>
<p> The next child process to start calls <code>Get&shy;File&shy;Type</code>, but instead of returning with a result, it waits for the previous I/O request (the read) to complete because the handle is marked synchronous, and synchronous handles permit only one operation at a time. The user, of course, doesn't realize that the first program is waiting for input (the prompt got redirected), so the user sits and waits for the program while the program sits and waits for the user. </p>
<p> To solve this problem, you first need to decide what you want to happen to stdin. Right now, you gave stdin to a dozen child processes, and each line of input the user types will be randomly assigned to one of those programs. In this case, the customer's answer is "I don't care about stdin; these programs aren't supposed to be reading from stdin anyway", in which case you can redirect stdin of the child processes to <code>NUL</code>. </p>
<p> <b>Bonus chatter</b>: This is also why, when you hit Ctrl+C to exit a console program which launched child processes with <code>CREATE_<wbr>NEW_<wbr>PROCESS_<wbr>GROUP</wbr></wbr></wbr></code>, the command prompt that comes back sometimes behaves kind of strangely. Since the child processes were launched in a separate process group, the Ctrl+C killed the main program but left the child processes running. If any of those child processes read from stdin, you get the "Randomly assign input" effect described above because you have two programs racing to read from stdin: the orphaned child process and <code>cmd.exe</code>. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-950883">
				<div id="div-comment-950883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-950883">
			December 2, 2011 at 8:09 am</a>		</div>

		<p>Been there, done that, got that headache.</p>
<p>Also happens on UNIX systems if you screw job control up badly enough.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-950893">
				<div id="div-comment-950893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dmitry_vk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-950893">
			December 2, 2011 at 10:31 am</a>		</div>

		<p>I&#39;d say that the problem is actually worse. Not only child processes examine stdin/stderr/stdout but also libraries loaded with LoadLibrary. Try e.g. reading from stdin in one thread and loading ws2_32.dll from another &#8211; they&#39;ll deadlock.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-brunopitrus even thread-even depth-1" id="comment-950913">
				<div id="div-comment-950913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kinokijuf' rel='external nofollow' class='url'>kinokijuf</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-950913">
			December 2, 2011 at 12:36 pm</a>		</div>

		<p>This belongs in the category „What if two programs did this?”.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-950923">
				<div id="div-comment-950923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paramanand</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-950923">
			December 2, 2011 at 10:09 pm</a>		</div>

		<p>Thanks Raymond for the bonus chatter. I used to get this kind of situation when running some batch files (like a build job) and pressing Ctrl+C to stop it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-950953">
				<div id="div-comment-950953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-950953">
			December 3, 2011 at 8:13 am</a>		</div>

		<p>@Cesar &#8211;</p>
<p>I&#39;m not sure why this is surprising as I would expect all file operations (be they querying operations, etc.) would block when operating on a non-overlapped file handle that already has an operation blocking on it. &nbsp;If anything Windows is being extremely consistent: namely blocking regardless of the file type and file operation when an operation is pending on a non-overlapped handle. &nbsp;Why should such consistency be documented? &nbsp;Only inconsistent behavior really needs documentation here.</p>
<p>Anyway, the whole thing is moot as you should be handling the standard input properly to begin with, which in the instance that Raymond mentions here is clearly incorrect.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-950973">
				<div id="div-comment-950973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-950973">
			December 3, 2011 at 9:23 am</a>		</div>

		<p>@Cesar</p>
<p>Instead of saying it shouldn&#39;t count, come up with reasons why you don&#39;t think it should count.</p>
<p>But remember that this function works on character mode devices, files and pipes. Also, the handle is a structure in memory that can change as time passes and be accessed from multiple threads at once. Oh, and do it in terms of the object manager, not what you expect as a programmer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-950993">
				<div id="div-comment-950993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-950993">
			December 3, 2011 at 10:25 am</a>		</div>

		<p>@Crescens2k: Because it does not count on *nix systems. Fundamentally, there is no good reason for a query for file metadata to block on a read of the file from another thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-951003">
				<div id="div-comment-951003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-951003">
			December 3, 2011 at 12:13 pm</a>		</div>

		<p>@Joshua</p>
<p>Well, here is a surprise for you, this isn&#39;t *nix, this is Windows. So please tell me why you would expect a fundamentally different operating system to work the same?</p>
<p>This is like saying a motorbike shouldn&#39;t tip over when you lean to the side because cars don&#39;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-950943">
				<div id="div-comment-950943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-950943">
			December 3, 2011 at 5:37 am</a>		</div>

		<p>Well, this behavior is *very* surprising. I would never expect GetFileType() to block, since the information it returns should already be available to the kernel. And even if it blocked, I would expect it to block only if the handle is for a file, and the filesystem is busy (for instance if the handle is from a remote filesystem which is slow or disconnected). I would *not* expect GetFileType() to block simply because of a blocking read on the same handle!</p>
<p>This is the kind of surprising behavior which really has to be documented on the function&#39;s documentation. Not everyone would know that non-overlapped handles can only have one operation active at a time, *and* that GetFileType() would count as one of these operations (since it is a simple query, I would expect it to *not* count).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-951033">
				<div id="div-comment-951033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-951033">
			December 4, 2011 at 11:21 am</a>		</div>

		<p>Moreover, CloseHandle for the last handle on a non-overlapped file obj will block, too, if there are operations pending on the file object. This may cause quite obscure deadlocks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-951053">
				<div id="div-comment-951053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-951053">
			December 4, 2011 at 8:12 pm</a>		</div>

		<p>@Crescens2k: How about because dir on the directory doesn&#39;t block on any pending file operations in that directory. Blocking the handle just seems sloppy to me in this case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-951063">
				<div id="div-comment-951063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-951063">
			December 5, 2011 at 12:32 am</a>		</div>

		<p>@Kyle: &quot;I&#39;m not sure why this is surprising as I would expect all file operations (be they querying operations, etc.) would block when operating on a non-overlapped file handle that already has an operation blocking on it.&quot;</p>
<p>I find it very suprising that operations can block which only handle file meta data.</p>
<p>The whole blocking concept is not about &quot;there can be only one API call active at any time&quot;, its about &quot;a call does not return until all of its arguments are processed by the OS&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-951073">
				<div id="div-comment-951073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-951073">
			December 5, 2011 at 1:21 am</a>		</div>

		<p>My previous remark was about the &quot;overlapping&quot; construct in Windows in general. For reading data from a stream (file, pipe, socket,&#8230;) &quot;blocking&quot; has usually the more specific meaning of &quot;do not return until: Error or EOF or &lt;data has read&gt;&quot;.</p>
<p>This all does not imply anything about calls from different threads or about calls that query metadata.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-951083">
				<div id="div-comment-951083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-951083">
			December 5, 2011 at 4:21 am</a>		</div>

		<p>@Joshua</p>
<p>The thing is, dir would use a new handle to list the files in the directory. STDIN is using the SAME handle that is currently doing something to query for information.</p>
<p>Remember, a handle is what user mode applications use to access an object, and this is where the problems are occuring. There is nothing stopping accessing the object multiple times at once via different handles, but since someone has explicitly stated somewhere that this handle can only be accessed by one thing at a time, then the blocking occurs on the HANDLE.</p>
<p>So try to remember that handles to an object and an object are two seperate things, and this is occuring at the handle level.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-951093">
				<div id="div-comment-951093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-951093">
			December 5, 2011 at 6:07 am</a>		</div>

		<p>@Cesar: It *is* documented in MSDN. The remarks for CreateNamedPipe() state the following:</p>
<p>&quot;The pipe server should not perform a blocking read operation until the pipe client has started. Otherwise, a race condition can occur. This typically occurs when initialization code, such as the C run-time, needs to lock and examine inherited handles.&quot;</p>
<p>Note the last bit: The C run-time needs to lock and examine inherited handles at program initialization.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-951353">
				<div id="div-comment-951353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-951353">
			December 5, 2011 at 7:14 pm</a>		</div>

		<p>@Crescens2k: It&#39;s not the same handle. It&#39;s in two different processes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-951423">
				<div id="div-comment-951423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-951423">
			December 6, 2011 at 6:10 am</a>		</div>

		<p>Joshua:</p>
<p>If you are trying to learn how the CRT startup works by refuting everything I say, I would suggest looking at the code in the VC directory instead. The CRT source is there and is a good read if you are curious.</p>
<p>Otherwise I would suggest you read up a bit more on handles in Windows. It is vital.</p>
<p>A handle can be inheritable. This means that the same handle can be passed between two processes and a second process can use it without any problems by marking it as inheritable. You can read more about it here <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms683463(v=vs.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms683463(v=vs.85).aspx</a></p>
<p>So it is entirely possible for two processes to use the same handle. You will also see near the bottom that the IO handles can be inherited through STARTUPINFO.</p>
<p>Next, for getting the actual console handles, there is a function named GetStdHandle. This is what the CRT uses to initialise the CRT somewhere deep in the _ioinit function of the startup code. For a particular console window, it will give out the same handle to all processes using it. (This particular case is easy to infer through experimentation and the fact that this blog post exists in the first place).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-951473">
				<div id="div-comment-951473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-951473">
			December 6, 2011 at 7:29 am</a>		</div>

		<p>I forgot to add two things to my previous post.</p>
<p>First, something which may add a bit of confusion is that console handles are pseudohandles. What this means is that the handles themselves given out by GetStdHandle are not the actual handles, but can be used like them and gets redirected automatically to the right handle. Unless of course the parent process used SetStdHandle, then the handle obtained is the actual handle.</p>
<p>Secondly, I forgot to link <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms682075(v=vs.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms682075(v=vs.85).aspx</a> and mention the fact that it is documented that handles are inherited between parent and child processes for consoles unless you explicitly start a new console session, or start it disconnected from a console.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-952053">
				<div id="div-comment-952053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111202-00/?p=8983#comment-952053">
			December 7, 2011 at 10:53 pm</a>		</div>

		<p>@Ian.</p>
<p>It should be documented *better*!</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

