<html>
<head>
<title>A question about the FileTimeToLocalFileTime function turned out to be something else</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A question about the FileTimeToLocalFileTime function turned out to be something else</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 6, 2015 / year-entry #49</td></tr>
<tr><td><b>Tags:</b></td><td>code;time</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150306-00/?p=44523</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer reported that their program was running into problems with the File­Time­To­Local­File­Time function. Specifically, they found that the values reported by the function varied wildly for different time zones. Even though the two time zones were only a few hours apart, the results were hundreds of centuries apart. The customer did a very good...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer reported that their program was running into problems
with the
<code>File&shy;Time&shy;To&shy;Local&shy;File&shy;Time</code> function.
Specifically, they found that the values reported by the function
varied wildly for different time zones.
Even though the two time zones were only a few hours apart,
the results were hundreds of centuries apart.
</p>
<p>
The customer did a very good job of
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/10/18/10457796.aspx">
reducing</a> the problem,
providing a very simple program that illustrated the problem.
I cleaned it up a bit.
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;

int main(int argc, char **argv)
{
 FILETIME ftUTC = { 0, 0 };
 FILETIME ftLocal;
 SYSTEMTIME stLocal;
 double vLocal = 0;
 BOOL result = 0;

 printf("ftUTC = {%d,%d}\n",
        ftUTC.dwHighDateTime, ftUTC.dwLowDateTime);

 result = FileTimeToLocalFileTime(&amp;ftUTC, &amp;ftLocal);
 printf("FT2LFT returns %d\n", result);

 printf("ftLocal = {%d,%d}\n",
        ftLocal.dwHighDateTime, ftLocal.dwLowDateTime);

 FileTimeToSystemTime(&amp;ftLocal, &amp;stLocal);

 printf("stLocal = %d.%d.%d %02d:%02d:%02d\n",
        stLocal.wYear, stLocal.wMonth, stLocal.wDay,
        stLocal.wHour, stLocal.wMinute, stLocal.wSecond);

 SystemTimeToVariantTime(&amp;stLocal, &amp;vLocal);
 printf("vLocal = %f\n", vLocal);

 return 0;
}
</pre>
<p>
According to the customer,
"When we run the program with the current time zone set to UTC-8,
we get the correct values,
but if we run it with the time zone set to UTC+8, we get the wrong values.
We expect that a zero starting file time should result in a zero variant
time."
They also provided two screen shots, which I converted to a table.
</p>
<table BORDER=1 BORDERCOLOR=black CELLPADDING=3
    STYLE="border-collapse: collapse">
<tr>
<th>UTC+8</th>
<th>UTC-8</th>
</tr>
<tr>
<td><tt>ftUTC = {0,0}</tt><br>
        <tt>FT2LFT returns 1</tt><br>
        <tt>ftLocal = {67,237191168}</tt><br>
        <tt>stLocal = 1601.1.1 08:00:00</tt><br>
        <tt>vLocal = <font COLOR=red>-109205.000000</font></tt></td>
<td><tt>ftUTC = {0,0}</tt><br>
        <tt>FT2LFT returns 1</tt><br>
        <tt>ftLocal = {-68,-237191168}</tt><br>
        <tt>stLocal = 34453.15281.0 00:30:19624</tt><br>
        <tt>vLocal = <font COLOR=red>0.000000</font></tt></td>
</tr>
<tr>
<th>Incorrect</th>
<th>Correct</th>
</tr>
</table>
<p>
Okay, first of all,
let's see which is actually correct and which is incorrect.
</p>
<p>
The
<code>File&shy;Time&shy;To&shy;Local&shy;File&shy;Time</code> function
subtracts or adds eight hours.
Since the starting time was zero, the result in the case of UTC-8
is an integer underflow, which prints as negative numbers if you
use the <code>%d</code> format.
(Note to language lawyers:
Don't get all worked up about stuff like "passing an unsigned
integer to the <code>%d</code> format results in undefined behavior."
I'm talking about Win32 here,
and I'm trying to explain observed behavior,
not justify theoretical behavior.)
</p>
<p>
The value
<code>{67,237191168}</code>
corresponds to
<code>0x00000043`0e234000</code>,
which has the signed decimal value
<code>288000000000</code> which is exactly equal to
<code>8 * 10000 * 1000 * 3600</code>,
or eight hours after zero.
On the other hand,
the value <code>{-68,-237191168}</code>
corresponds to <code>0xffffffbc`f1dcc000</code> which has
the signed decimal value
<code>-288000000000</code> which is exactly equal to
<code>-8 * 10000 * 1000 * 3600</code>,
or eight hours before zero.
</p>
<p>
So far,
the numbers match what we expect.
Although we do have an issue that
in the UTC-8 case, the value underflowed to a very large positive number.
</p>
<p>
Next, we convert <code>ftLocal</code>
to <code>stLocal</code>.
The easy case is UTC+8, where the timestamp of
eight hours after zero is converted to
January 1, 1601 at 8am,
because
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/03/06/9461176.aspx">
the zero time for <code>FILETIME</code> is
January 1, 1601 at midnight</a>.
This is spelled out in the very first sentence of
<a HREF="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724284(v=vs.85).aspx">
the documentation for the <code>FILETIME</code> structure</a>.
</p>
<p>
Okay, now the hard case of UTC-8.
The timestamp
<code>0xffffffbc`f1dcc000</code>,
if interpreted as an unsigned number,
corresponds to May 27, 58456 (at around 9:30pm),
but if interpreted as a signed number,
corresponds to 4pm December 31, 1600.
The
<code>File&shy;Time&shy;To&shy;System&shy;Time</code> function
rejects negative timestamps,
return <code>FALSE</code> and
<code>ERROR_<wbr>INVALID_<wbr>PARAMETER</code>.
Since the call failed,
the value in <code>stLocal</code> is undefined,
and here, it just contains uninitialized garbage.
(Because "uninitialized garbage" is a valid value for
"undefined".)
</p>
<p>
The next thing we do is convert the <code>stLocal</code> to
a variant time.
As noted in the documentation,
<a HREF="http://msdn.microsoft.com/en-us/library/ms221646(v=VS.85).aspx">
the zero time for variant time is December 30, 1899</a>.
(Required reading:
<a HREF="http://blogs.msdn.com/b/ericlippert/archive/2003/09/16/eric-s-complete-guide-to-vt-date.aspx"
>Eric's Complete Guide to VT_DATE</a>,
wherein the insanities of variant time are investigated.)
Again, the case of UTC+8 is easy:
January 1, 1601 is many many days before December 30, 1899,
apparently &minus;109205 days.
I'm going to take this for granted and not check the math,
because the goal is not to double-check the results but
rather to explain why the results are what they are.
On the other hand, the (garbage) date of the zeroth day
of the 15281th month of the year 34453 is not valid,
and the
<code>System&shy;Time&shy;To&shy;Variant&shy;Time</code>
fails because the parameter is invalid.
In this case, the output variable <code>vLocal</code> is
left unchanged,
and it continues to have the value zero,
the value it was initialized with.
</p>
<p>
Therefore, the fact that in the so-called "correct" case
the value of <code>vLocal</code> is zero has nothing to
do with the functioning of the API,
but rather has everything to do with the line
</p>
<pre>
 double vLocal = 0;
</pre>
<p>
at the start of the program.
Change the line to
</p>
<pre>
 double vLocal = 3.14159;
</pre>
<p>
and the result in the "correct" case will be 3.14159.
</p>
<p>
The conclusion here is that the so-called "incorrect"
result is actually correct,
and the so-called "correct" result is just an accident.
The customer is under the mistaken impression that a zero
<code>FILETIME</code> matches a zero variant time,
but they do not.
The zero points for the two time formats are quite different.
The problem was exacerbated by the fact that the test program
didn't check the return values of
<code>File&shy;Time&shy;To&shy;System&shy;Time</code>
or
<code>System&shy;Time&shy;To&shy;Variant&shy;Time</code>,
so what it thought were the values set by those two functions
were actually just the uninitialized values passed into
the respective functions.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1178723">
				<div id="div-comment-1178723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150306-00/?p=44523#comment-1178723">
			March 6, 2015 at 7:46 am</a>		</div>

		<p>As Ericâ€™s Complete Guide eloquently explains, variant time is so broken by design as to be unusable for almost any purposes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1178753">
				<div id="div-comment-1178753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150306-00/?p=44523#comment-1178753">
			March 6, 2015 at 8:52 am</a>		</div>

		<p>programming is hard.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1178763">
				<div id="div-comment-1178763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150306-00/?p=44523#comment-1178763">
			March 6, 2015 at 9:14 am</a>		</div>

		<p>It&#39;s amazing how something that everyone normally deals with easily since childhood is so complex on computing systems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1178773">
				<div id="div-comment-1178773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ch</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150306-00/?p=44523#comment-1178773">
			March 6, 2015 at 9:47 am</a>		</div>

		<p>Presumably this problem would have been much more easily solved if the return value from SystemTimeToVariantTime() had been checked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1178783">
				<div id="div-comment-1178783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@ch</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150306-00/?p=44523#comment-1178783">
			March 6, 2015 at 10:44 am</a>		</div>

		<p>That&#39;s literally the last line of the post.</p>
<p>&quot;The problem was exacerbated by the fact that the test program didn&#39;t check the return values of FileÂ­TimeÂ­ToÂ­SystemÂ­Time or SystemÂ­TimeÂ­ToÂ­VariantÂ­Time, so what it thought were the values set by those two functions were actually just the uninitialized values passed into the respective functions.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1178793">
				<div id="div-comment-1178793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150306-00/?p=44523#comment-1178793">
			March 6, 2015 at 11:08 am</a>		</div>

		<p>Dates are very complex. &nbsp;We deal with them because we&#39;ve been taught the rules. &nbsp;And generally speaking, we only know a very small subset of the rules as applies to our very short, very limited, very contextual lives in a single culture over the span of no-changes-to-dates-of-any-real-significance.</p>
<p>The math on dates is anything but simple. &nbsp;Leap-years, Leap-decades, time-zones, multiple formats, etc. &nbsp;I think a lot of people don&#39;t realized how complex a thing is because they&#39;ve never tired to code for it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1178803">
				<div id="div-comment-1178803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wutz Rong Izright</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150306-00/?p=44523#comment-1178803">
			March 6, 2015 at 4:32 pm</a>		</div>

		<p> &nbsp;&quot;the so-called &quot;incorrect&quot; result is actually correct, and the so-called &quot;correct&quot; result is just an accident.&quot;</p>
<p>The best part of your blog is how you sum it all up!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1178843">
				<div id="div-comment-1178843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150306-00/?p=44523#comment-1178843">
			March 6, 2015 at 6:29 pm</a>		</div>

		<p>@Ray- should be 3.1415926536..that&#39;s my location where I go to round-up error when it comes to monsieur &quot;Pie&quot;. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1178853">
				<div id="div-comment-1178853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150306-00/?p=44523#comment-1178853">
			March 7, 2015 at 9:31 am</a>		</div>

		<p>I just realized this time-oriented post was probably a reminder that DST starts in the US this weekend.</p>
<p>Don&#39;t forget to adjust your clocks, everybody!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1178863">
				<div id="div-comment-1178863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150306-00/?p=44523#comment-1178863">
			March 8, 2015 at 7:09 pm</a>		</div>

		<p>Related to DST and UTC, if you&#39;re using .NET framework, make sure you use UTC time instead of Local time, or turn of DST, to evade this bug.</p>
<p><a rel="nofollow" target="_new" href="https://social.msdn.microsoft.com/Forums/en-US/8a8615f5-4591-4be9-8b04-bae52750442e/datetimenow-is-throwing-a-systemargumentoutofrangeexception?forum=netfxbcl">social.msdn.microsoft.com/&#8230;/datetimenow-is-throwing-a-systemargumentoutofrangeexception</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1178873">
				<div id="div-comment-1178873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150306-00/?p=44523#comment-1178873">
			March 9, 2015 at 7:04 am</a>		</div>

		<p>@cheong00</p>
<p>What&#39;s the actual reproduction for that bug? I don&#39;t see any code.</p>
<p>We have hundreds of DateTime.Nows in our code, it would be nice if we could demonstrate an issue before all of our users see it, but </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1178893">
				<div id="div-comment-1178893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150306-00/?p=44523#comment-1178893">
			March 9, 2015 at 7:59 am</a>		</div>

		<p>That was supposed to read &quot;&#8230;but I&#39;m not sure how to reproduce it, since just adding/subtracting time across the boundary doesn&#39;t cause any exceptions here.&quot;</p>
<p>I blame DST for the typo.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1178943">
				<div id="div-comment-1178943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Bisbjerg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150306-00/?p=44523#comment-1178943">
			March 9, 2015 at 1:59 pm</a>		</div>

		<p>Brilliant 10 minute video on why Timezones are hard, by Computerphile: <a rel="nofollow" target="_new" href="https://www.youtube.com/watch?v=-5wpm-gesOY">http://www.youtube.com/watch</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1178973">
				<div id="div-comment-1178973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150306-00/?p=44523#comment-1178973">
			March 9, 2015 at 6:10 pm</a>		</div>

		<p>@Anon: There is a bug in logic that, when DST is in effect, on some arbitrary UTC time, when converted to local time (by calling Datetime.Now), will case the millisecond field to overflow / underflow when scaling.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1178993">
				<div id="div-comment-1178993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150306-00/?p=44523#comment-1178993">
			March 10, 2015 at 1:24 am</a>		</div>

		<p>@cheong00</p>
<p>Bah, can&#39;t get a code change approved without a reproduction.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1179293">
				<div id="div-comment-1179293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150306-00/?p=44523#comment-1179293">
			March 10, 2015 at 6:49 pm</a>		</div>

		<p>Well, since the original poster of problem didn&#39;t specify the Culture his code runs at, I don&#39;t know how to reproduce it either.</p>
<p>However from the nature of problem, you might try those time zone with non-whole-hour DST like New Zealand Chatham Islands (1h45m).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

