<html>
<head>
<title>When generating a random password, the result must still be a valid string</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When generating a random password, the result must still be a valid string</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 13, 2018 / year-entry #160</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Invalid strings can't round trip through multiple encodings.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer had a problem with auto-generated random passwords.
Their password generator
generated a string by choosing each character randomly
with a code unit from U+0001 to U+FFFF.
(They avoided U+0000 because that is the string terminator.)
They didn't mind that the resulting passwords were untypeable,
because the passwords were going to be entered programmatically.
</p>
<p>
Things seemed to work great.
One computer created the account with the untypeable password,
and another computer was able to log in with that password.
</p>
<p>
But occasionally, they would find that
the first computer would create the account, but the second
computer couldn't use it to sign in.
If they re-ran the password generator, then everything worked again.
If they went back to the original password, it stopped.
</p>
<p>
They were occasionally generating haunted passwords.
</p>
<p>
If you take a bunch of randomly-generated code units,
the result may not be a legal Unicode string.
This is true for UTF-16LE (which is the
default encoding used by Windows)
as well as UTF-8.
</p>
<p>
What is going on is that occasionally, the random number
generator will produce an invalid Unicode string,
like say, a high surrogate not followed by a low surrogate.
When the account is created locally, the UTF-16LE string
is passed directly to the underlying service,
which creates the account with the specified password as-is.
</p>
<p>
The string is then transmitted to the other computer,
and the other computer tries to sign in with that password.
However, the network protocol for the service specifies
that the password is encoded as UTF-8 before being
hashed or encrypted or whatever it is that network protocols
do to protect passwords.
</p>
<p>
The problem is that an invalid UTF-16LE string cannot be
converted to Unicode code points, and therefore cannot be
re-encoded as UTF-8 for transmission on the wire.
At best, you get
<a HREF="http://www.fileformat.info/info/unicode/char/0fffd/index.htm">U+FFFD</code>
REPLACEMENT CHARACTER</a>,
which says "Um, there was something here,
but it wasn't a valid Unicode code point,
so I have no way of expressing it."
</p>
<p>
The password goes out over the wire, and the server
receives the UTF-8 string and transcodes it back
to UTF-16LE,
and the strings don't match because invalid strings
do not round trip from UTF-16LE to UTF-8 and back.
</p>
<p>
The solution to the problem is to stop generating garbage strings
that aren't even legal.
They can generate the same amount of random data (preserving entropy),
but convert it to Unicode via an encoding like base64 which
is guaranteed to produce a legal string.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1351785">
				<div id="div-comment-1351785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1351785">
			July 13, 2018 at 7:42 am</a>		</div>

		<p>Another (vaguely related) tricky thing is that substitution of invalid UTF-8 sequences with U+FFFD REPLACEMENT CHARACTER during conversion from UTF-8 to UTF-16 expands their length from 1 to 3 bytes when converting back to UTF-8.</p>
<p>This may undermine optimistic buffer size assumptions and result in clipped strings if relying on the cached original UTF-8 length when converting the string back to UTF-8.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1351825">
				<div id="div-comment-1351825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://geelaw.blog/' rel='external nofollow' class='url'>Gee Law</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1351825">
			July 13, 2018 at 8:32 am</a>		</div>

		<p>I yelled out the surrogate issue as soon as I read past the second sentence.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1351955">
				<div id="div-comment-1351955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1351955">
			July 13, 2018 at 10:39 am</a>		</div>

		<p>Well, using lone or swapped surrogates is the only way to generate invalid UTF-16 sequences.</p>
<p>For UTF-8, on the other hand, there&#8217;s invalid lead bytes (those initiating actually allowed 2- to 4-byte sequences but resulting in code points beyond U+10FFFF, and those initiating completely invalid 5- to 8-byte sequences), wrong numbers of trail bytes following certain lead bytes, trail bytes with value ranges not allowed after certain lead bytes, or lone trail bytes. Not only may such sequences result in invalid code points in the narrower sense, but also in overlong forms, or code points from the surrogates range (which are reserved for UTF-16).</p>
<p>That&#8217;s why programming with UTF-16 seems simple and light-weight compared to programming with UTF-8. Just my personal opinion.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt depth-2 parent" id="comment-1351965">
				<div id="div-comment-1351965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1351965">
			July 13, 2018 at 11:18 am</a>		</div>

		<p>Good for you. You waited till the second paragraph. As soon as I read the title, I thought &#8220;Password complexity policy&#8221;.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1352405">
				<div id="div-comment-1352405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Quick D. McGraw</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1352405">
			July 17, 2018 at 2:59 pm</a>		</div>

		<p>It took me only up to the 4th word in the title to guess it was garbage-in/garbage-out&#8230; which was confirmed by the second-to-last word in the title.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1351855">
				<div id="div-comment-1351855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1351855">
			July 13, 2018 at 8:51 am</a>		</div>

		<p>Another solution is to do what Cygwin finally had to break down and do&#8211;use WTF-8 as an interchange format. Cygwin&#8217;s reason was because Windows will permit filenames to contain invalid UTF-16, and since Unix programs have to deal with invalid UTF-8 in filenames anyway, handling of such filenames in Windows worked.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1352015">
				<div id="div-comment-1352015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1352015">
			July 13, 2018 at 12:40 pm</a>		</div>

		<p>I got a kick out of &#8220;WTF-8&#8221;.  Seems like a Freudian slip; I guess it&#8217;s the encoding mechanism that you use when you don&#8217;t really care if it works.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1352075">
				<div id="div-comment-1352075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1352075">
			July 13, 2018 at 5:10 pm</a>		</div>

		<p>I think it&#8217;s intentional acronym collision.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1352115">
				<div id="div-comment-1352115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chrissielein</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1352115">
			July 14, 2018 at 8:00 pm</a>		</div>

		<p>Well, actually there is a WTF-8 encoding. <a href="https://simonsapin.github.io/wtf-8/" rel="nofollow">https://simonsapin.github.io/wtf-8/</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1352045">
				<div id="div-comment-1352045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1352045">
			July 13, 2018 at 2:55 pm</a>		</div>

		<p>This is also done by the Rust language. It uses UTF-8 for strings, but for talking with the operating system (mostly filesystem paths), it has a separate string type. On most operating systems, it&#8217;s an array of bytes (which might or might not be valid UTF-8); on Windows, it uses the WTF-8 encoding. In both cases, if the string is valid UTF-16 (on Windows) or UTF-8 (everywhere else), these &#8220;OS strings&#8221; will be valid UTF-8 (WTF-8 maps valid UTF-16 to valid UTF-8, and uses something else for invalid UTF-16).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1351905">
				<div id="div-comment-1351905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1351905">
			July 13, 2018 at 9:29 am</a>		</div>

		<p>Another solution is to cut back on the complexity and increase the length.</p>
<p>You could scale all the way back to letters, numbers and normal punctuation,   make the password 4 times the length,  and it will still be unbreakable in reasonable time.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1351925">
				<div id="div-comment-1351925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://geelaw.blog/' rel='external nofollow' class='url'>GL</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1351925">
			July 13, 2018 at 10:20 am</a>		</div>

		<p>You seem to have repeated the last sentence of the blog post&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1352005">
				<div id="div-comment-1352005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nico</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1352005">
			July 13, 2018 at 12:14 pm</a>		</div>

		<p>This is such a terrible approach to the problem &#8212; it&#8217;s just begging for problems at every level.   I can only assume that anyone claiming that they require the full unicode character space in order for their passwords to be secure really has no clue what they&#8217;re talking about and should be kept away from anything related to security.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1352035">
				<div id="div-comment-1352035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Keith Patrick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1352035">
			July 13, 2018 at 2:48 pm</a>		</div>

		<p>&#8220;Create a random password generator&#8221; used to be an interview question my company would ask almost everyone.  It was hugely surprising to me how challenging the question was to a large percentage of people, and it didn&#8217;t even get as deep as this post.  Just the simple concept of generating random numbers (even a single seed wasn&#8217;t a deal breaker!) and creating alphanumerics from that weeded out a TON of candidates.  But there were some somewhat out-of-box, less-than-idea solutions, too (hashing a username and/or base64-encoding it&#8230;.returning part of a GUID without the dashes)   (my favorite solution is &#8220;Use ASP.Net&#8217;s automatic generator&#8221; since it demonstrates some deeper knowledge of the underlying library we were using)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1352425">
				<div id="div-comment-1352425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.lebeausoftware.org' rel='external nofollow' class='url'>Remy Lebeau</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1352425">
			July 17, 2018 at 5:47 pm</a>		</div>

		<p>Isn&#8217;t the real problem that the password generator was producing *code units* instead of *code points*?  Had it been producing the latter instead of the former, then it could have encoded the generated values in whatever UTF it needed, and ended up with a valid string that round trips correctly when re-encoded between UTFs.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1352435">
				<div id="div-comment-1352435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1352435">
			July 17, 2018 at 6:10 pm</a>		</div>

		<p>I wouldn&#8217;t be surprised if a defective string didn&#8217;t normalize properly, though. E.g., starting with a combining character.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1352635">
				<div id="div-comment-1352635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1352635">
			July 18, 2018 at 11:19 pm</a>		</div>

		<p>Not sure, all I know is that no unassigned code points should be passed to normalization routines, but not sure about broken combining character sequences.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1352445">
				<div id="div-comment-1352445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1352445">
			July 17, 2018 at 11:00 pm</a>		</div>

		<p>Only &#8220;scalar&#8221; code points (U+0000 to U+D7FF and U+E000 to U+10FFFF) will round-trip properly, the 2048 surrogate code points still have to be excluded, as they&#8217;re reserved exclusively for use with UTF-16.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1352535">
				<div id="div-comment-1352535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1352535">
			July 18, 2018 at 8:37 am</a>		</div>

		<p>Right, but if you generate UTF-16LE  &#8220;code points&#8221; instead of &#8220;code units&#8221;, the result should survive a roundtrip through UTF8.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4" id="comment-1352555">
				<div id="div-comment-1352555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180713-00/?p=99235#comment-1352555">
			July 18, 2018 at 9:45 am</a>		</div>

		<p>But will it survive a round trip through Unicode normalization?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

