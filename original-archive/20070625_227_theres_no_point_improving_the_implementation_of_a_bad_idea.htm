<html>
<head>
<title>There's no point improving the implementation of a bad idea</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>There&#8217;s no point improving the implementation of a bad idea</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 25, 2007 / year-entry #228</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>42</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">IsBadXxxPtr is a bad idea and you shouldn't call it. In the comments, many people proposed changes to the function to improve the implementation. But what's the point? IsBadXxxPtr is just a bad idea. There's no point improving the implementation of a bad idea. On the other hand, some people suggested making it clear that...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/09/27/773741.aspx">
<code>IsBadXxxPtr</code> is a bad idea and you shouldn't call it</a>.
In the comments, many people proposed changes to the function to
improve the implementation.
But what's the point?
<code>IsBadXxxPtr</code> is just a bad idea.
There's no point improving the implementation of a bad idea.
</p>
<p>
On the other hand, some people suggested making it clear that
<code>IsBadXxxPtr</code> is a bad idea by making it <strong>worse</strong>.
While this is tempting in a "I'm forcing you to do the right thing"
sense, it carries with it serious compatibility problems.
</p>
<p>
There's a lot of code that uses <code>IsBadXxxPtr</code> even though
it's a bad idea, and making <code>IsBadXxxPtr</code> worse would
risk breaking those programs that managed to get away with it up
until now.
The danger of this is that people would upgrade to the next version
of Windows and their program would stop working.
Who do you think the blame will be placed on?
</p>
<p>
Sure, you might tell these people,
"That's because it's a bug in your program.
Go contact the vendor for an update."
Of course, that's assuming you can prove that the reason why
the program stopped working was this <code>IsBadXxxPtr</code> stuff.
How can you tell that that was the problem?
Maybe it was caused by some other problem,
possibly even a bug in Windows itself.
Or is your answer just going to be "Any program that crashes
must be crashing due to misuse of <code>IsBadXxxPtr</code>?"
</p>
<p>
And, as I've noted before, contacting the vendor may not be enough.
Most large corporations have programs that run their day-to-day
operations.
Some of them may have been written by a consultant ten years ago.
Even if they have the source code, they may not have the expertise,
resources, or simply inclination go to in and fix it.
This happens more often than you think.
To these customers, the behavior change is simply a regression.
</p>
<p>
Even if you have the source code and expertise, fixing the problem
may not be as simple as it looks.
You may have designed your program poorly and relied on
<code>IsBadXxxPtr</code> to cover for your failings.
For example, you may have decided that
"The <code>lParam</code> to this message is a pointer to
a <code>CUSTOMER</code> structure, or it could just be
the customer ID number.
I'll use <code>IsBadReadPtr</code>, and if the pointer is bad,
then the value must be the customer ID number."
Or you
<a HREF="http://blogs.msdn.com/ericlippert/archive/2006/09/27/774117.aspx">
may have changed the definition of a function parameter</a>
and now need to detect whether your caller is calling the "old function"
or the "new one".
Or it could simply be that once you remove the call to
<code>IsBadXxxPtr</code>, your program crashes constantly
because the <code>IsBadXxxPtr</code> was covering up for
a huge number of other programming errors (such as uninitialized
variables).
</p>
<p>
"But what if I'm just using it for debugging purposes?"
For debugging purposes, allow me to propose the following
drop-in replacement functions:
</p>
<pre>
inline BOOL IsBadReadPtr2(CONST VOID *p, UINT_PTR cb)
{
  memcmp(p, p, cb);
  return FALSE;
}

inline BOOL IsBadWritePtr2(LPVOID p, UINT_PTR cb)
{
  memmove(p, p, cb);
  return FALSE;
}
</pre>
<p>
It's very simple: To see if a pointer is bad for reading,
<strong>just read it</strong> (and similarly writing).
If the pointer is bad, the read (or write) will raise an exception,
and then you can investigate the bad pointer at the point it
is found.
We read from the memory by comparing it to itself
and write to the memory by copying it to itself.
These have no effect but they do force the memory to be
read or written.
Of course, this trick assumes that the compiler didn't optimize
out the otherwise pointless "compare memory to itself"
and "copy memory to itself" operations.
(Note also that the replacement <code>IsBadWritePtr2</code>
is not thread-safe, since another thread might be modifying the
memory while we're copying it.
But then again, the original <code>IsBadWritePtr</code> wasn't
thread-safe either, so there's no loss of amenity there.)
</p>
<p>
(As an aside: I've seen people try to write replacements
for <code>IsBadXxxPtr</code> and end up introducing a bug along
the way.
There are many corner cases in this seemingly-simple family of
functions.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (42)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-518883">
				<div id="div-comment-518883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-518883">
			June 25, 2007 at 10:23 am</a>		</div>

		<p>To turn off the compiler smartness, add make it a &quot;void const volatile*&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-518893">
				<div id="div-comment-518893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-518893">
			June 25, 2007 at 10:40 am</a>		</div>

		<p>See the C++ standard, section 7.1.5.1. &nbsp;The volatile keyword is only a hint. &nbsp;It does not guarantee that optimizations are not applied. &nbsp;Thus you can&#8217;t assume all Visual C++ compilers, past, present, and future, will not apply an optimization to a volatile variable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-518903">
				<div id="div-comment-518903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-518903">
			June 25, 2007 at 10:41 am</a>		</div>

		<p>If fixing IsBadxxxPtr is really that simple why doesn&#8217;t MSFT do that?</p>
<p>I suspect this API, flawed as it is, is just useful enough that it&#8217;s worth hanging onto.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zian odd alt thread-odd thread-alt depth-1" id="comment-518913">
				<div id="div-comment-518913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zian+Choy' rel='external nofollow' class='url'>Zian Choy</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-518913">
			June 25, 2007 at 10:52 am</a>		</div>

		<p>Raymond just spent 4 paragraphs explaining why changing the function would be a bad idea.</p>
<p>In brief:</p>
<ol>
<li>
<p>Application compatability</p>
</li>
<li>
<p>Fixing a bad program (that uses IsBadXxxPointer) can be harder than you think</p>
</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-518923">
				<div id="div-comment-518923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.parkscomputing.com/' rel='external nofollow' class='url'>Paul M. Parks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-518923">
			June 25, 2007 at 11:02 am</a>		</div>

		<p>Zian,</p>
<p>To preempt Raymond: You must be new here. No extent of verbosity will deter the nitpickers.</p>
<p>PMP</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-518933">
				<div id="div-comment-518933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">geraldtubing</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-518933">
			June 25, 2007 at 11:13 am</a>		</div>

		<p>dal:</p>
<p>In addition to what Zian said, Raymond&#8217;s &quot;fix&quot; (as you call it) is basically a replacement function <em>for debugging purposes</em>. It does not silently test whether the memory can be written/read and return TRUE/FALSE depending on that; it just always returns FALSE, and if it really is impossible to read from/write to that pointer, it will throw an exception, ie. the program will crash or it will break into the debugger.</p>
<p>IIRC IsBadXXXPtr basically does what Raymond&#8217;s function does, but the body is wrapped in a exception handler which silently catches any exceptions and returns TRUE which signifies that you should not read from / write to that memory location.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-518943">
				<div id="div-comment-518943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">invert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-518943">
			June 25, 2007 at 11:22 am</a>		</div>

		<p>Why not introduce a IsGoodXXXPtr?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-518973">
				<div id="div-comment-518973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.parkscomputing.com/' rel='external nofollow' class='url'>Paul M. Parks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-518973">
			June 25, 2007 at 11:27 am</a>		</div>

		<p>invert,</p>
<p>Because, as the first link at the top of the article explains, the concept is flawed. Turning it into !IsBadXXXPtr doesn&#8217;t change that.</p>
<p>PMP</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-518983">
				<div id="div-comment-518983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-518983">
			June 25, 2007 at 11:29 am</a>		</div>

		<p>I must be missing something here &#8230;</p>
<p>a) If IsBadXXXPtr() so bad then why did it get introduced in the first place?</p>
<p>b) why doesn&#8217;t someone stub it out so it doesn&#8217;t do anything? &nbsp;Then it wouldn&#8217;t matter if anyone called it or not?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-519003">
				<div id="div-comment-519003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519003">
			June 25, 2007 at 11:37 am</a>		</div>

		<p>@invert: Dear gods, I hope that&#8217;s sarcasm.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-519013">
				<div id="div-comment-519013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519013">
			June 25, 2007 at 11:38 am</a>		</div>

		<p>I propose this:</p>
<p>bool IsBadCodeIdea(LPCTSTR szYourIdea);</p>
<p>Pass in a string expressing your idea for IsBadXXXPtr() fixes. At present it always returns true.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-519023">
				<div id="div-comment-519023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">constants flawed</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519023">
			June 25, 2007 at 11:41 am</a>		</div>

		<p>The concept is flawed with any constants defined and stored within a pointer. Even a null pointer is a flawed concept, becase that prevents allocation at address 0x00000000.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-519033">
				<div id="div-comment-519033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jake</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519033">
			June 25, 2007 at 11:43 am</a>		</div>

		<p>John,</p>
<p>(Sigh&#8230;)</p>
<p>b) why doesn&#8217;t someone stub it out so it doesn&#8217;t do anything? &nbsp;Then it wouldn&#8217;t matter if anyone called it or not?</p>
<p>&lt;Snip&gt;</p>
<p>Or it could simply be that once you remove the call to IsBadXxxPtr, your program crashes constantly because the IsBadXxxPtr was covering up for a huge number of other programming errors (such as uninitialized variables).</p>
<p>&lt;/Snip&gt;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-519053">
				<div id="div-comment-519053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.parkscomputing.com/' rel='external nofollow' class='url'>Paul M. Parks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519053">
			June 25, 2007 at 11:50 am</a>		</div>

		<p>Poor Raymond. How does he do it?</p>
<p>PMP</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-519073">
				<div id="div-comment-519073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jaspax.com' rel='external nofollow' class='url'>JS Bangs</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519073">
			June 25, 2007 at 11:54 am</a>		</div>

		<p>It&#8217;s heartening to see that in this case, at least, the regulars are doing Raymond&#8217;s work of making fun of the nitpickers and people who didn&#8217;t read the article.</p>
<p>IsBadXxxPtr should never have been written, but it&#8217;s too late now, so the best thing we can do is tell people not to use it and try not to make it worse.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-519083">
				<div id="div-comment-519083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519083">
			June 25, 2007 at 11:58 am</a>		</div>

		<p>Hi Raymond,</p>
<p>A quick question. &nbsp;In your previous posts about this and the links that came up, it was shown that there&#8217;s also a problem with stack expansion and IsBadXXXPtr. &nbsp;(From memory, the access might hit a stack guard page, which in the end results in an incorrect result and that stack not being expandable in the future.)</p>
<p>I assume this problem remains with your replacement? &nbsp;I think it does, but I&#8217;m just checking.</p>
<p>I realise your propsed replacement is for debugging purposes only.</p>
<p>Ta,</p>
<p>Doug</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-519093">
				<div id="div-comment-519093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519093">
			June 25, 2007 at 11:59 am</a>		</div>

		<p>Ignore the last &#8211; I overlooked the fact you&#8217;d removed the exception handling. &nbsp;Apologies.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-519113">
				<div id="div-comment-519113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519113">
			June 25, 2007 at 12:16 pm</a>		</div>

		<p>Anonymous: times are changing. Compiler vendors are working on a memory model for C++, and &quot;volatile&quot; is pretty much inescapably going to mark &quot;barrier&quot; variables. Visual Studio 2003 and later already treat volatile objects as barriers, and starting with Visual Studio 2005 barriers are enforced up the whole call stack. C/C++ can no longer afford to ignore the consequences of multi-processing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-519123">
				<div id="div-comment-519123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Craptain</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519123">
			June 25, 2007 at 12:54 pm</a>		</div>

		<p>Maybe an IsBadComment() function would help this blogpost.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zian odd alt thread-odd thread-alt depth-1" id="comment-519133">
				<div id="div-comment-519133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zian+Choy' rel='external nofollow' class='url'>Zian Choy</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519133">
			June 25, 2007 at 1:00 pm</a>		</div>

		<p>@PMP</p>
<p>Actually, I&#8217;ve been following this blog for over a year.</p>
<p>Anyway, I was getting slightly tired of the nitpickers. If Raymond can have fun with them, why not us?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-519143">
				<div id="div-comment-519143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.parkscomputing.com/' rel='external nofollow' class='url'>Paul M. Parks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519143">
			June 25, 2007 at 1:06 pm</a>		</div>

		<p>Apologies, Zian; I read your post the wrong way. Perhaps I&#8217;m developing the social skills of a thermonuclear device.</p>
<p>PMP</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-519163">
				<div id="div-comment-519163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kokomo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519163">
			June 25, 2007 at 1:45 pm</a>		</div>

		<p>Invert is right. Create IsGoodXXXPtr(). Since IsGoodXXXPtr() is the exact opposite of IsBadXxxPtr(), that should fix the problem. ;-)</p>
<p>No seriously.. these recent stories are not as good as the Bob stories. More Bob stories please Raymond?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-519183">
				<div id="div-comment-519183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Hensley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519183">
			June 25, 2007 at 2:50 pm</a>		</div>

		<p>The second poster is misreading the standard. &quot;volatile&quot; is a hint, but it is a hint that the implementation must follow as far as can be determined from the observable behavior of the program.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-519203">
				<div id="div-comment-519203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://disorderedthoughtprocesses.com/2007/06/25/baffling-how-i-learned-to-stop-worrying-and-love-the-gui-and-high-level-languages/' rel='external nofollow' class='url'>baffling (how i learned to stop worrying and love the gui and high-level languages) &lt; disordered thought processes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519203">
			June 25, 2007 at 3:29 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://disorderedthoughtprocesses.com/2007/06/25/baffling-how-i-learned-to-stop-worrying-and-love-the-gui-and-high-level-languages/" rel="nofollow">http://disorderedthoughtprocesses.com/2007/06/25/baffling-how-i-learned-to-stop-worrying-and-love-the-gui-and-high-level-languages/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-519213">
				<div id="div-comment-519213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519213">
			June 25, 2007 at 4:16 pm</a>		</div>

		<p>Perhaps someone should suggest to the MSDN team that they change the documentation for IsBad__Ptr to read: &quot;&lt;b&gt;DO NOT CALL THIS FUNCTION&lt;/b&gt;&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-519223">
				<div id="div-comment-519223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">There's no idea that couldn't be improved</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519223">
			June 25, 2007 at 4:22 pm</a>		</div>

		<p>Jake wrote:</p>
<blockquote><p>
  I propose this:
</p></blockquote>
<p>></p>
<blockquote><p>
  bool IsBadCodeIdea(LPCTSTR szYourIdea);
</p></blockquote>
<p>Even better:</p>
<p>LPCTSTR GiveMeBetterIdea(LPCTSTR szYourIdea);</p>
<p>&nbsp;LPCTSTR idea = _T(&quot;Let&#8217;s iterate&quot;);</p>
<p>&nbsp;LPCTSTR heureka;</p>
<p>&nbsp;while (idea = GiveMeBetterIdea(idea))</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;heureka = idea;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-519233">
				<div id="div-comment-519233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://myfirstrealcsharpproject.blogspot.com/' rel='external nofollow' class='url'>peterchen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519233">
			June 25, 2007 at 4:39 pm</a>		</div>

		<p>@constants flawed:</p>
<p>C (and IIRC C++, too) doesn&#8217;t require the null pointer to be all-zeroes.</p>
<p>(does that make me a comment nitpick?)</p>
<p>As I understand, the idea was that, if the platform supports it,</p>
<p>void * p = 0;</p>
<p>would assign a &quot;magic bit pattern&quot; to p, that raises a hardware exception when dereferenced (without an explicit null check). Similary, (p==0) would compare p to the magic bit pattern, not test for all zeroes.</p>
<p>In that sense, 0 is a C language level constant, but not a machine code one.</p>
<p>and why is the concept flawed for constants? If it would work, it would still tell you if your constant would make a good read pointer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-519253">
				<div id="div-comment-519253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519253">
			June 25, 2007 at 5:43 pm</a>		</div>

		<p>KJK::Hyperion: volatile is highly unlikely to change much judging by all the proposals submitted and the general trend on the C++0x mailing lists. The problem with supporting it is that it&#8217;s not fine grained enough for a low-level primitive (in terms of current and future computers with increasingly aggressive and peculiar visibility rules and the various optimizations compilers would have to disable) and there&#8217;s too much legacy code due to vendors overloading volatile for their own purpose.</p>
<p>I don&#8217;t doubt that Visual Studio allows this in the same way that Visual Studio allows type punning and breaking aliasing rules since a lot of people (including Microsoft) depend on this hand-wavy specified behavior.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-519103">
				<div id="div-comment-519103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">poochner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519103">
			June 25, 2007 at 12:06 pm</a>		</div>

		<p>While I think you could actually &quot;fix&quot; IsBadXxxPtr(), the method that comes to mind would be a lot* slower than the &quot;try it and see if you get an exception&quot; method. &nbsp;The kernel could check the current memory mappings for the process. &nbsp;However, since the routines are marked as &quot;obsolete, and should not be used,&quot; this is moot.</p>
<p>*possibly a major understatement.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-519303">
				<div id="div-comment-519303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sohail</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519303">
			June 26, 2007 at 12:36 am</a>		</div>

		<p>People don&#8217;t really do stupid things like pass in a Customer ID to that function do they?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-519313">
				<div id="div-comment-519313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519313">
			June 26, 2007 at 2:13 am</a>		</div>

		<p>&quot;Even a null pointer is a flawed concept, becase that prevents allocation at address 0x00000000.&quot;</p>
<p>Bah. &nbsp;The ability to have a &quot;maybe a pointer to x&quot; type outweighs the need to have that type be able to point to addresses near (whatever your bit pattern for null is). &nbsp;If you really need to use every bit of your address space then you probably have enough control over the environment that it&#8217;s safe to dereference a &quot;null&quot; pointer, should you decide otherwise. &nbsp;(and you&#8217;re certainly not running Windows, that prevents allocation of a LOT more places)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-519273">
				<div id="div-comment-519273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mr Cranky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519273">
			June 25, 2007 at 8:18 pm</a>		</div>

		<p>Is this so hard?</p>
<p>inline BOOL IsBad***Ptr(CONST VOID *p, UINT_PTR cb)</p>
<p>{</p>
<p> &nbsp;return TRUE;</p>
<p>}</p>
<p>Surely that would wind down the usage expeditiously enough.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-519323">
				<div id="div-comment-519323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fluffy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519323">
			June 26, 2007 at 3:44 am</a>		</div>

		<p>Shouldn&#8217;t that be:</p>
<p>inline BOOL IsBadReadPtr2( CONST VOID *p, UINT_PTR cb )</p>
<p>{</p>
<p>__try { memcmp( p, p, cb ); }</p>
<p>__except( EXCEPTION_EXECUTE_HANDLER ) { return( FALSE ); }</p>
<p>return( TRUE );</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-519333">
				<div id="div-comment-519333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519333">
			June 26, 2007 at 6:35 am</a>		</div>

		<p>&quot;Sohail</p>
<p>People don&#8217;t really do stupid things like pass in a Customer ID to that function do they?&quot;</p>
<p>He mentioned LPARAM being sometimes an integer and sometimes a pointer which should give you a hint.</p>
<p><a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-us/library/ms649055.aspx" rel="nofollow">http://msdn2.microsoft.com/en-us/library/ms649055.aspx</a></p>
<p>from WINBASE.H</p>
<p>#define MAKEINTATOM(i) &nbsp;(LPTSTR)((DWORD)((WORD)(i)))</p>
<p>Mind you, I think all the &quot;cast an integer to a pointer&quot; functions in the Windows API only work with 16 bit integers, so provided the first 64K is off limits, it&#8217;s possible to do this</p>
<p>if ( arg &lt; 0xFFFF )</p>
<p>&nbsp; &nbsp;// we have an integer</p>
<p>else</p>
<p>&nbsp; &nbsp;// we have a pointer</p>
<p>Which is safe. But it could be that when this stuff was designed things were just much more single threaded so IsBadWritePtr could be made to work reliably. On a Risc platform where structures are naturally aligned you can use the low two bits as an &quot;this is an integer&quot; flag. It&#8217;s still a evil though, since someone might port to x86.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-519343">
				<div id="div-comment-519343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519343">
			June 26, 2007 at 7:09 am</a>		</div>

		<p>asdf: doesn&#8217;t matter it&#8217;s not fine-grained enough &#8211; there are third-party specifications for fine-grained intrinsics (see: IA64&#8217;s __sync_xxx family) &#8211; it still needs to be defined in terms of a memory model. In practice, a &quot;volatile&quot; read or write is simply compiled as a full barrier, because it&#8217;s the safest bet</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jamesnt odd alt thread-odd thread-alt depth-1" id="comment-519423">
				<div id="div-comment-519423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/JamesNT' rel='external nofollow' class='url'>JamesNT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519423">
			June 26, 2007 at 11:11 am</a>		</div>

		<p>The idea that some of you are having such a hard time with the point Mr. Chen is trying to make just kills me.</p>
<p>JamesNT</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-519483">
				<div id="div-comment-519483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519483">
			June 26, 2007 at 12:21 pm</a>		</div>

		<p>ho god.. IsBadReadPtr&#8230; I must have written here this previously, but this call was everywhere in our multi-million lines of code application.</p>
<p>one of the &quot;ui and services&quot; dev just went crazy with it, checking every function parameters with it, and of course that code was copied by others. &nbsp;</p>
<p>Sometimes in 2000, after some internal debate I &nbsp;silently went and used a #define in a global header to change that call to be only check for &nbsp;&quot;pointer is not NULL&quot;. &nbsp;</p>
<p>The application gained quite a bit of performance and no one cared from then on about this.</p>
<p>Checking if the pointer was not null was all that anyone in our app actually could actually get. &nbsp;What, ho, what, sort of stack or mem corruption was the dev trying to catch, and what exactly did he expect to be able to achieve by return E_POINTER. &nbsp;If the ram is corrupted, you&#8217;re dead!</p>
<p>A little knowledge is a dangerous thing.</p>
<p>That IsBadReadPtr was being called thousands of times a second.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-519363">
				<div id="div-comment-519363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519363">
			June 26, 2007 at 9:20 am</a>		</div>

		<p>John Hensley wrote:</p>
<p>&gt; The second poster is misreading the standard.</p>
<p>&gt; &quot;volatile&quot; is a hint, but it is a hint that the</p>
<p>&gt; implementation must follow as far as can be</p>
<p>&gt; determined from the observable behavior of the</p>
<p>&gt; program.</p>
<p>More than that: the way the program reads and modifies volatile data (and calls to library functions) is the *definition* of the observable behaviour of the program, and must not be changed by any optimization.</p>
<p>C++ standard 1.9/6.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-519573">
				<div id="div-comment-519573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519573">
			June 26, 2007 at 5:54 pm</a>		</div>

		<p>@Fluffy:</p>
<p>Even better:</p>
<p>inline BOOL IsBadReadPtr2( CONST VOID *p, UINT_PTR cb ) {</p>
<p>&nbsp;return IsBadReadPtr(p,cb);</p>
<p>}</p>
<p>Errr&#8230; How much improved is it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-519653">
				<div id="div-comment-519653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.asvguy.com' rel='external nofollow' class='url'>Burak KALAYCI</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519653">
			June 26, 2007 at 9:53 pm</a>		</div>

		<blockquote><p>
  The danger of this is that people would upgrade to the next version of Windows and their program would stop working. Who do you think the blame will be placed on?
</p></blockquote>
<p>LOL. Of course, people will blame Microsoft and the next Windows, and they will be 100% right! I can&#8217;t believe you had to write that&#8230;</p>
<blockquote><p>
  &quot;That&#8217;s because it&#8217;s a bug in your program&quot;
</p></blockquote>
<p>Simple logic:</p>
<ul>
<li>Program runs fine with Windows X.</li>
<li>
<p>Program crashes/does not work with Windows X+1.</p>
</li>
</ul>
<p>Possible conclusions:</p>
<ul>
<li>Windows X+1 has limited compatibility with Windows X.</li>
</ul>
<li>
<p>Windows X+1 has a bug.</p>
</li>
<p>But,</p>
<ul>
<li>Program has a bug</li>
</ul>
<p>will totally make me LOL&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-519663">
				<div id="div-comment-519663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-519663">
			June 27, 2007 at 1:28 am</a>		</div>

		<p>Thank you Raymond.</p>
<p>I se IsBadXXXPtr in a lot of code I inherit, and all the do is verify that a pointer is valid. To me, it adds verbosity to code that shouldn&#8217;t be needed, and I&#8217;m sure it hides bugs. Crashing early and with a debugger attached makes life easier.</p>
<p>I do Windows CE BSP development, and the earlier and faster drivers and utility libraries crash during testing, the less post-project customer support is needed. If you can, get the mobile/embedded team to deprecate those calls &#8211; backwards compatibility is less an issue on embedded devices.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-520453">
				<div id="div-comment-520453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070625-00/?p=26283#comment-520453">
			June 28, 2007 at 10:00 pm</a>		</div>

		<p>volatile is the only way to tell the compiler to keep that damn overoptimized variable spilled to the stack.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

