<html>
<head>
<title>Enumerating integer compositions (the return of the binomial coefficients)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Enumerating integer compositions (the return of the binomial coefficients)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 14, 2014 / year-entry #169</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In number theory, a composition of an integer is an ordered sequence of positive integers which sum to the target value. For example, the value 3 can be written as 3, 1+2, 2+1, or 1+1+1. You can think about the target number as a string of stars, and a composition is a way of breaking...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>In number theory,
a
<a HREF="http://en.wikipedia.org/wiki/Composition_(number_theory)">
composition of an integer</a>
is an ordered sequence of positive integers which sum to the target value.
For example, the value 3 can be written as
3, 1+2, 2+1, or 1+1+1.
</p>
<p>
You can think about the target number as a string of stars,
and a composition is a way of breaking the stars into groups.
For example, here are the compositions of 3:
</p>
<table BORDER=0>
<tr>
<td><tt>* * *</tt></td>
<td>3</td>
</tr>
<tr>
<td><tt>*|* *</tt></td>
<td>1+2</td>
</tr>
<tr>
<td><tt>* *|*</tt></td>
<td>2+1</td>
</tr>
<tr>
<td><tt>*|*|*</tt>&nbsp;&nbsp;</td>
<td>1+1+1</td>
</tr>
</table>
<p>
How would you generate all compositions of a particular length?
In the above example, the compositions of length 2 would be 1+2 and 2+1.
Let's take a look at the last star in the composition.
If it is immediately preceded by a space,
then removing it results in a string one star shorter,
but with the same number of groups (but the last group is
one star smaller).
In other words, what's left behind
is a composition of <var>n</var> &minus; 1 of length <var>k</var>.
You can recover the original string by adding a star at the end.
</p>
<p>
On the other hand, if the last star is immediately preceded by a vertical
line,
then removing it deletes an entire group,
so what remains is a string one star shorter with one fewer group.
In other words, what's left behind
is a composition of <var>n</var> &minus; 1 of length <var>k</var> &minus; 1.
You can recover the original string by adding a separator
and a star at the end.
</p>
<p>
Therefore, our algorithm goes like this:
</p>
<ul>
<li>Handle base cases.
<li>Otherwise,
<ul>
<li>Recursively call
    Compositions(<var>n</var> &minus; 1,
    <var>k</var>) and add a star to the end.
    (<i>I.e.</i>, increment the last term.)</p>
<li>Recursively call
    Compositions(<var>n</var> &minus; 1,
    <var>k</var> &minus; 1) and add
    a vertical line and a star to the end.
    (<i>I.e.</i>, add a <tt>+1</tt> to the end.)
</ul>
</ul>
<pre>
function Compositions(n, k, f) {
 if (n == 0) { return; }
 if (k == 1) { f([n]); return; }
 Compositions(n-1, k, function(s) {
  f(s.map(function(v, i) { // increment the last element
    return i == s.length - 1 ? v + 1 : v;
  }));
 });
 Compositions(n-1, k-1, function(s) {
  f(s.concat(1)); // append a 1
 });
}

Compositions(5, 3, function(s) { console.log(s.join("+")); });
</pre>
<p>
Once again,
this algorithm should look awfully familiar,
because we've seen it twice before,
once in the context of
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/04/14/10516909.aspx">
enumerating subsets with binomial coefficients<a>,
and again when
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/06/16/10534442.aspx">
Enumerating bit strings with a specific number of bits set</a>.
All we're doing is decorating the results differently.
</p>
<p>
Here's a way to see directly how compositions are the same
as subset selection.
Let's ignore the stars and instead look at the gaps between them.
</p>
<pre>
* * * * *
 ^ ^ ^ ^
</pre>
<p>
Each of the gaps can hold either a space or a vertical line.
Breaking <var>n</var> into <var>k</var> pieces is the same as
drawing <var>k</var> &minus; 1
vertical lines in the <var>n</var> &minus; 1 gaps.
In other words,
you have <var>n</var> &minus; 1 locations
and you want to choose <var>k</var> &minus; 1 of them:
Ta da, we converted the problem into generating
subsets of size
<var>k</var> &minus; 1 from a collection of size
<var>n</var> &minus; 1.
(In mathematics, this visualization is known as
<a HREF="http://en.wikipedia.org/wiki/Stars_and_bars_(combinatorics)">
stars and bars</a>.)
</p>
<p>
Therefore, we could have made the
<code>Subsets</code> function do the work:
</p>
<pre>
function Compositions(n, k, f) {
 Subsets(n-1, k-1, function(s) {
  s.push(n);
  f(s.map(function(v, i) { return v - (s[i-1]||0); }));
  s.pop();
 });
}
</pre>
<p>
The callback merely calculates the differences between
adjacent elements of the subset, which is the number of stars
between each line.
There is a little extra playing around in order to create
a virtual vertical bar at the beginning and end.
</p>
<p>
Since there is an incremental way of enumerating subsets,
there should be an incremental way of enumerating compositions.
If you look at how the incremental subset enumerator works,
you can see how it maps to incremental composition enumeration:
Incrementing an index is the same as moving a bar to the right,
which maps to incrementing one term and decrementing the subsequent
term.
Resetting subsequent indices to the minimum values corresponds
to setting the corresponding term to 1.
The only trick is maintaining the value of the final term,
which gathers all the values squeezed out of earlier terms.
</p>
<pre>
function NextComposition(s) {
 var k = s.length;
 for (var i = k - 1; i &gt;= 1; i--) {
  if (s[i] &gt; 1) {
   s[i]--;
   s[i-1]++;
   for (; i &lt; k - 1; i++) { s[k-1] += s[i] - 1; s[i] = 1; }
   return true;
  }
 }
 return false;
}
</pre>
<p>
<b>Exercise</b>:
If you wanted to generate all compositions of any length,
you could do it by generating all compositions of length 1,
then compositions of length 2, and so on up to length <var>n</var>.
What's the easier way of doing it?</p>
<p>
<b>Bonus chatter</b>:
If you want to generate all partitions
(which is like compositions, except that order doesn't matter),
you can use
<a HREF="http://code.activestate.com/recipes/218332-generator-for-integer-partitions/">
this recursive version</a>
or 
<a HREF="http://homepages.ed.ac.uk/jkellehe/partitions.php">
this iterative one</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1137943">
				<div id="div-comment-1137943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1137943">
			July 14, 2014 at 7:09 am</a>		</div>

		<p>Does integer composition have any useful usage in the real world?</p>
<div class="post">[<em>You must be new here. Monday programs do not come with motivation. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1137973">
				<div id="div-comment-1137973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Katie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1137973">
			July 14, 2014 at 9:49 am</a>		</div>

		<p>@Yuri</p>
<p>According to Wikipedia &quot;[integer partitions] occur in a number of branches of mathematics and physics,&quot; but there is no citation. I&#39;ve done something similar but with factorization. It was a DSP application where breaking a high-order operation down into several lower-order passes could give huge performance gains, but there was no straightforward way of knowing the ideal order of each pass because the performance of each pass depended on the chain of previous pass orders. The number of passes involved was small enough that I could just brute-force the solution at the beginning of the task.</p>
<p>Also, like Raymond says, we don&#39;t need motivation. :-) It&#39;s just a fun problem on its own.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1137983">
				<div id="div-comment-1137983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1137983">
			July 14, 2014 at 9:57 am</a>		</div>

		<p>OK understood, it&#39;s just that I never experienced the &#39;fun with mathematics&#39; part.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1137993">
				<div id="div-comment-1137993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Katie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1137993">
			July 14, 2014 at 10:17 am</a>		</div>

		<p>I think my favorite part of this series is that it clearly demonstrates how problems that seem different on the surface can actually be transformed between each other in straightforward ways. It isn&#39;t a skill that you always use in day-to-day programming, but when you get an interesting problem to work on being able to identify those connections can be invaluable.</p>
<p>I&#39;ve been tying together the fields of control systems and DSP in very powerful and novel ways with my current project, and it comes from recognizing similarities in the structures of the algorithms or the math behind them.</p>
<div class="post">[<em>Recognizing how one problem can be transformed into another is important in software engineering. It lets you reuse code. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1138003">
				<div id="div-comment-1138003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1138003">
			July 14, 2014 at 10:37 am</a>		</div>

		<p>&gt; &nbsp;for (i = k &#8211; 1; i &gt;= 1; i&#8211;) {</p>
<p>Gack! var this i, please; you can actually get away with this, but only once.</p>
<div class="post">[<em>Fixed, but only once. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1138013">
				<div id="div-comment-1138013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1138013">
			July 14, 2014 at 10:42 am</a>		</div>

		<p>@Maurits: Little Programs aren&#39;t polished.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1138023">
				<div id="div-comment-1138023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1138023">
			July 14, 2014 at 5:41 pm</a>		</div>

		<p>&quot;If you wanted to generate all compositions of any length &#8230; What&#39;s the easier way of doing it?&quot;</p>
<p>A composition can be identified by whether or not a break is present in each of the n-1 possible slots, as you said at the start. So just enumerate all numbers from 0 to 2^(n-1)-1 and consider the binary representation of each number as a composition.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1138033">
				<div id="div-comment-1138033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1138033">
			July 15, 2014 at 3:48 am</a>		</div>

		<p>I guess the ultimate limit of all these partitioning exercises is the problem of solving the Numbers game in Countdown. (Just for the record, the hardest problem that I have ever seen on the show was to compute 834 given 100, 75, 50, 25, 10 and 5.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1138623">
				<div id="div-comment-1138623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1138623">
			July 15, 2014 at 5:30 pm</a>		</div>

		<p>@Neil, you can do it with only 100 and 10:</p>
<p>(100*10 &#8211; 100 &#8211; 100) + (100/10 + 100/10 + 100/10) + (10/10 + 10/10 + 10/10 + 10/10)</p>
<p>Obviously™, it gets cuter with the rest of the numbers:</p>
<p>75*5 + 50*10 &#8211; 50 + 10 &#8211; 25/25</p>
<p>Oh, the possibilities&#8230; Say, *that* would be an awesome little program!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1138783">
				<div id="div-comment-1138783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Katie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1138783">
			July 16, 2014 at 6:34 am</a>		</div>

		<p>@John Doe, you can&#39;t reuse the numbers. The goal is to get as close as possible, so something like 75*10 + 50 + 25 + 10 = 835 would be good, but there may be a way to reach it exactly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1138893">
				<div id="div-comment-1138893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Katie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1138893">
			July 16, 2014 at 8:11 am</a>		</div>

		<p><a rel="nofollow" target="_new" href="http://rve.org.uk/countdown?n=100&amp;n=75&amp;n=50&amp;n=25&amp;n=10&amp;n=5&amp;t=834">rve.org.uk/countdown</a></p>
<p>This finds the exact solution, but I can&#39;t imagine how anyone could figure it out in the game show situation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1139763">
				<div id="div-comment-1139763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140714-00/?p=513#comment-1139763">
			July 21, 2014 at 7:11 am</a>		</div>

		<p>@Katie, Thanks.</p>
<p>Sometimes, my hubris fogs me to the point I can&#39;t tell I&#39;m stupid, much less how stupid I am.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

