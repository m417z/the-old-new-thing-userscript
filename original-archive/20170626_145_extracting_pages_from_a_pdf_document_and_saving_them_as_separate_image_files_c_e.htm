<html>
<head>
<title>Extracting pages from a PDF document and saving them as separate image files, C# edition</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Extracting pages from a PDF document and saving them as separate image files, C# edition</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 26, 2017 / year-entry #146</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170626-00/?p=96465</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A Little Program I needed.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program extracts the pages from a PDF document
and saves them as separate image files.
Why?
Because I needed to do that.
</p>
<p>
I'll start with the
<a HREF="https://github.com/Microsoft/Windows-universal-samples/tree/v1.0.11/Samples/PdfDocument">
PDF Document</a> sample program and change it so that instead of
displaying pages on the screen, it saves them to disk.
</p>
<p>
Take the C# sample and make these changes to
<code>Scenario1_Render.xaml.cs</code>:</p>
<pre>
private async void ViewPage()
{
    rootPage.NotifyUser("", NotifyType.StatusMessage);

    uint pageNumber;
    if (!uint.TryParse(PageNumberBox.Text, out pageNumber) ||
        (pageNumber &lt; 1) || (pageNumber &gt; pdfDocument.PageCount))
    {
        rootPage.NotifyUser("Invalid page number.", NotifyType.ErrorMessage);
        return;
    }

    <font COLOR="blue">// New: Ask the user for the output file.
    var save = new FileSavePicker();
    save.FileTypeChoices["PNG image"] = new[] { ".png" };
    var outfile = await save.PickSaveFileAsync();
    if (outfile == null) return;</font>

    Output.Source = null;
    ProgressControl.Visibility = Visibility.Visible;

    // Convert from 1-based page number to 0-based page index.
    uint pageIndex = pageNumber - 1;

    using (PdfPage page = pdfDocument.GetPage(pageIndex))
    <font COLOR="blue">using (var transaction = await outfile.OpenTransactedWriteAsync())
    {
        await page.RenderToStreamAsync(transaction.Stream);
    }</font>
    ProgressControl.Visibility = Visibility.Collapsed;
}
</pre>
<p>
Actually, I kind of gutted the program and replaced it with
my own stuff.
The only interesting parts that remain from the original program
are the
<code>Load&shy;Document</code> method (not shown here)
which loads the PDF file into the <code>pdfDocument</code>
variable,
and the part that obtains the
<code>PdfPage</code> from the user-specified page number.
</p>
<p>
We ask for the output file, obtain a write stream to that file,
and ask the <code>page</code> to render into that stream.
The default options generate a bitmap in PNG format
whose size matches the
declared <code>Size</code> of the page.
</p>
<p>
The PNG format was fine for my purposes, but the size wasn't.
WinRT view pixels are 1/96 of an inch,
so the resulting bitmap was rendered as if printed to a
96 DPI printer.
That's the resolution of a first-generation fax machine,
which isn't all that great.
I wanted 192 DPI, so I needed to render the image at double-size.
</p>
<pre>
    using (PdfPage page = pdfDocument.GetPage(pageIndex))
    using (var transaction = await outfile.OpenTransactedWriteAsync())
    {
        <font COLOR="blue">var options = new PdfPageRenderOptions();
        options.DestinationHeight = (uint)(page.Size.Height * 2);
        options.DestinationWidth = (uint)(page.Size.Width * 2);
        await page.RenderToStreamAsync(transaction.Stream, options);</font>
    }</font>
</pre>
<p>
(If I had wanted to change the file format, I'd have set the
<code>options.Bitmap&shy;Encoder&shy;Id</code>
to something like
<code>Bitmap&shy;Encoder.</code><code>Jpeg&shy;Encoder&shy;Id</code>.)
</p>
<p>
I didn't have a large document to convert, so changing the page number
and clicking the (now-mislabeled) "View" button a dozen times
<a HREF="https://xkcd.com/1205/">
wasn't that big of a deal</a>.
</p>
<p>
For the rest of the week, I'm going to be translating this
program into C++/CX (twice) and JavaScript (twice).
</p>
<p>
Twice?
</p>
<p>
Yes, twice. You'll see.
</p>
<p>
And then there will be a bonus.
</p>
<p>
I can sense your anticipation.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1300675">
				<div id="div-comment-1300675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170626-00/?p=96465#comment-1300675">
			June 26, 2017 at 7:42 am</a>		</div>

		<p>If Raymond can sense our anticipation now, from however long ago he wrote and queued up this blog entry, then all this talk about not having a time machine has just been to direct our attention away from the fact that his psychic powers include being able to read what our minds will be thinking in the future!</p>
<p>On a more serious note, it&#8217;s nice to see that Windows has all this PDF handling functionality built in for programmatic use; I only wish that more of it was exposed in the default PDF reading software. At least Windows finally has Print to PDF built in.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00034001a5381f07 odd alt thread-odd thread-alt depth-1" id="comment-1300686">
				<div id="div-comment-1300686" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Georg_Rottensteiner' rel='external nofollow' class='url'>Georg_Rottensteiner</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170626-00/?p=96465#comment-1300686">
			June 26, 2017 at 8:26 am</a>		</div>

		<p>God, this async stuff is majorly annoying when you&#8217;re forced to do it. E.g. when you try to do that with C++/Cx and it won&#8217;t let you call await right away.<br />
 I&#8217;m actually interested how you&#8217;re solving that tomorrow :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1300695">
				<div id="div-comment-1300695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smithers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170626-00/?p=96465#comment-1300695">
			June 26, 2017 at 9:10 am</a>		</div>

		<p>Convert pages of a PDF into individual image files? I remember doing that once; let&#8217;s see if I&#8217;ve still got the script handy&#8230;</p>
<p>convert -density 450 MLP_CCG_Comprehensive_Rules_3-3.pdf -gravity center -extent 3300&#215;4650 -density 0 -scene 1 input\page.png</p>
<p>Ah yes, good ol&#8217; imagemagick. Complete with extracting the right resolution and cropping the white border. The reason the results are sent to the &#8216;input&#8217; directory is that they were used as the input to some further processing (adding covers and pairing pages in the correct order to print as a booklet).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1300715">
				<div id="div-comment-1300715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170626-00/?p=96465#comment-1300715">
			June 26, 2017 at 11:22 am</a>		</div>

		<p>I wonder what the odds are that &#8220;Convert&#8221; does about the same as what Raymond listed above?</p>
<p>Running a compiled program is one thing; seeing how it&#8217;s done is something else entirely.  Once you compile code that does this work, you could probably run one command that doesn&#8217;t even need parameters&#8230;..  I don&#8217;t know what your example is trying to show!</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1300726">
				<div id="div-comment-1300726" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170626-00/?p=96465#comment-1300726">
			June 26, 2017 at 5:11 pm</a>		</div>

		<p>Imagemagic is a library that happens to provide a command line interface too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1300735">
				<div id="div-comment-1300735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170626-00/?p=96465#comment-1300735">
			June 26, 2017 at 5:19 pm</a>		</div>

		<p>It&#8217;s showing MS reinventing the wheel, NIH as usual. Apparently more than twice in this case.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1300755">
				<div id="div-comment-1300755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170626-00/?p=96465#comment-1300755">
			June 27, 2017 at 12:24 am</a>		</div>

		<p>Not really.<br />
First, it&#8217;s just a Little Program, no need to take offense. Talking about &#8220;MS reinventing the wheel&#8221; for what is only a Little Program in a blog post is quite ridiculous.</p>
<p>Secondly, in the most recent versons of ImageMagick, &#8220;convert&#8221; isn&#8217;t installed by default anymore / doesn&#8217;t exist. :p</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1300765">
				<div id="div-comment-1300765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smithers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170626-00/?p=96465#comment-1300765">
			June 27, 2017 at 2:06 am</a>		</div>

		<p>s/convert/magick/ then if you&#8217;re on IM7. I think it still takes all of these arguments.</p>
<p>If his answer to &#8220;why?&#8221; really is &#8220;because I needed to do that,&#8221; then Raymond is reinventing the wheel (MS aren&#8217;t, this is a Little Program, not a product).</p>
<p>But I suspect the answer is really &#8220;because I needed to do that and wanted to play around with a such-and-such API,&#8221; which is a valid reason to code just about anything.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-odd thread-alt depth-1 parent" id="comment-1300736">
				<div id="div-comment-1300736" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170626-00/?p=96465#comment-1300736">
			June 26, 2017 at 7:03 pm</a>		</div>

		<p>Am I the only one found it disturbing the nowhere in the documentation for .RenderToStreamAsync() seems to mention the rendered stream is in PNG format?</p>
<p>The first overload that accepts IRandomAccessStream as parameter simply says &#8220;The stream of data, which represents a Portable Document Format (PDF) page&#8217;s content.&#8221; and make you think it may mean the function will render the serialized structure of page to stream.</p>
<p>The second overload that accepts both IRandomAccessStream and PdfPageRenderOptions specifies it&#8217;s an image, and the type of image can be selected by PdfPageRenderOptions.BitmapEncoderId , but kind of make you think there may be some difference than the first overload.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1300766">
				<div id="div-comment-1300766" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170626-00/?p=96465#comment-1300766">
			June 27, 2017 at 12:23 pm</a>		</div>

		<p>&#8220;Render&#8221; means &#8220;convert to bitmap&#8221; in this context, as in other graphics APIs. This API isn&#8217;t designed to give you any tools to search, create, or work with PDF as a document, it&#8217;s purely a convenience API for showing pages. Aside from on-screen viewing, the primary use case is probably generating thumbnails.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1300915">
				<div id="div-comment-1300915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170626-00/?p=96465#comment-1300915">
			June 29, 2017 at 2:29 am</a>		</div>

		<p>This PDF API is UWP-only? Is there no way to use it from desktop apps?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

