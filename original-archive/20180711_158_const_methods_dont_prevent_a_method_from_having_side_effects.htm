<html>
<head>
<title>Const methods don't prevent a method from having side effects</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Const methods don&#8217;t prevent a method from having side effects</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 11, 2018 / year-entry #158</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>29</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Though they shouldn't if you know what's good for you, but the compiler doesn't know whether you know what's good for you.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In my musing on
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170719-00/?p=96645">
whether
people write insane code with multiple overlapping side effects
with a straight face</a>,
I noted that raising a warning on any code that depends on
the order of evaluation would generate a lot of false positives,
such as
</p>
<pre>
total_cost = p-&gt;base_price + p-&gt;calculate_tax();
</pre>
<p>
<a HREF="https://www.reddit.com/r/programming/comments/6ogjie/do_people_write_insane_code_with_multiple/dkn3ha9/">
It has been argued</a>
that this is merely evidence that the
<code>calculate_tax</code> method should be const.
</p>
<p>
Well, except it may not be const.
For example,
<code>calculate_tax</code> needs to look up the tax rate,
which means it needs to look up the tax region,
and it may decide to cache that information in the object so that
future tax calculations can be more efficient.
Which means non-const.
</p>
<p>
And then there's this:
</p>
<pre>
total_cost = apply_discount(p-&gt;base_price) + p-&gt;calculate_tax();
</pre>
<p>
This is still a potential dependency upon the order of evaluation,
because the <code>apply_discount</code> function might modify
the thing that <code>p</code> points to.
</p>
<p>
It's unlikely, but technically legal.
</p>
<p>
In practice, nearly everything you write is potentially dependent
upon the order of evaluation, but in practice it isn't because
you are not a nincompoop.
But the compiler doesn't know that.
The compiler must adhere to the letter of the language standard,
because it has to compile insane code as well as sane code.
</p>
<p>
Maybe you'll say,
"Fine, the compiler shouldn't complain about potential order of
evaluation dependencies in sane code."
But now the argument is circular:
What is sane code?
Code that isn't dependent upon order of evaluation.
</p>
<p>
<b>Bonus reading</b>:
<a HREF="http://isocpp.org/blog/2012/12/you-dont-know-const-and-mutable-herb-sutter">
You don't know const and mutable</a>.
Which introduces yet another wrinkle into the story.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1351315">
				<div id="div-comment-1351315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351315">
			July 11, 2018 at 7:16 am</a>		</div>

		<p>Wouldn&#8217;t that cache be a candidate for a mutable member var? And then have the function still be const? Or is that considered worse.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1351705">
				<div id="div-comment-1351705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Moore</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351705">
			July 12, 2018 at 10:36 pm</a>		</div>

		<p>If you&#8217;re in a const function, all of your member vars are themselves const, and therefore, non-mutable. This isn&#8217;t to say it&#8217;s side-effect free: You could store the cache on-disk, on network, in registry, in a global variable, in a random chunk of unallocated memory, pretty much anywhere *but* a mutable member var.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1351945">
				<div id="div-comment-1351945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Moore</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351945">
			July 13, 2018 at 10:29 am</a>		</div>

		<p>Apparently I overlooked that &#8216;mutable&#8217; was a C++ keyword designed speifically for this. I&#8217;d say it&#8217;s way worse because mutating something that&#8217;s const violates the entire intention of const.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1351325">
				<div id="div-comment-1351325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alv</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351325">
			July 11, 2018 at 7:27 am</a>		</div>

		<p>I&#8217;ve not used C++ for a while now and not up to date with the latest standards, but the argument that calculate_tax shouldn&#8217;t be const  because of some implementation detail which is not visible at the public interface at all seems a bit misguided. If whatever the method does internally doesn&#8217;t change its public behaviour, why can&#8217;t it be considered const?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1351425">
				<div id="div-comment-1351425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351425">
			July 11, 2018 at 10:17 am</a>		</div>

		<p>Okay, so what if <code>calculate_tax</code> was <code>const</code>, but it did do some logging. Changing the order of evaluation changes the log file contents, which is externally observable. So the program still relies on order of evaluation.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1351505">
				<div id="div-comment-1351505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alv</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351505">
			July 12, 2018 at 12:25 am</a>		</div>

		<p>But this is the whole point: by using const we can tell the compiler that we don&#8217;t care about that and it should not flag this as a false positive.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1351605">
				<div id="div-comment-1351605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351605">
			July 12, 2018 at 1:07 pm</a>		</div>

		<p>Now we&#8217;re adding a third semantic to const. It already means &#8220;read-only&#8221; and &#8220;thread-safe&#8221;, and now it also means &#8220;unaffected by order of evaluation.&#8221; And what if you also want to say that a non-const method is unaffected by order of evaluation? e.g. <code>auto combined_result = when_all(start_task_1(), start_task_2());</code> The <code>start_task()</code> methods are definitely not const, but they are also independent of each other and are not affected by order of evaluation.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5 parent" id="comment-1351795">
				<div id="div-comment-1351795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alv</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351795">
			July 13, 2018 at 7:59 am</a>		</div>

		<p>But doesn&#8217;t &#8220;read-only&#8221; and &#8220;thread-safe&#8221; already imply &#8220;does not affect order of evaluation&#8221;? &#8220;Unaffected by order of evaluation&#8221; is only a consequence of &#8220;does not affect order of evaluation&#8221; being true for all sub-expressions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-5" id="comment-1351835">
				<div id="div-comment-1351835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351835">
			July 13, 2018 at 8:33 am</a>		</div>

		<p>Atomic increment, for example, is thread-safe, but is definitely dependent on order of evaluation.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1351515">
				<div id="div-comment-1351515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351515">
			July 12, 2018 at 2:29 am</a>		</div>

		<p>No it doesn&#8217;t, unless the program reads its own log which is ridiculous. Enabling instumentation in a pure Haskell program doesn&#8217;t suddenly  make it impure either.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1351845">
				<div id="div-comment-1351845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabriel Ravier</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351845">
			July 13, 2018 at 8:36 am</a>		</div>

		<p>It&#8217;s a lot less ridiculous when you start considering any program that lets you open arbitrary files and/or modify them.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1351355">
				<div id="div-comment-1351355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351355">
			July 11, 2018 at 7:32 am</a>		</div>

		<p>calculate_tax() could be const, only make sure that the tax region cache is mutable&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1351365">
				<div id="div-comment-1351365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351365">
			July 11, 2018 at 7:33 am</a>		</div>

		<p>I think you meant apply_discount(p) instead of apply_discount(p-&gt;base_price). Unless you want to make the parameter a reference or base_price a pointer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1351375">
				<div id="div-comment-1351375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jaha</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351375">
			July 11, 2018 at 7:37 am</a>		</div>

		<p>mutable taxRate;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1351415">
				<div id="div-comment-1351415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351415">
			July 11, 2018 at 10:15 am</a>		</div>

		<p>Great, now you need to add locks to avoid multithreaded race conditions. Because <code>const</code> and <code>mutable</code> imply &#8220;thread-safe&#8221;. Even if your object was not intended to be multithreaded, you just signed yourself up for additional work.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1351435">
				<div id="div-comment-1351435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jaha</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351435">
			July 11, 2018 at 10:33 am</a>		</div>

		<p>True, but AFAIK it&#8217;s the suggested approach. Otherwise you need to throw away const for an entire call chain for caching/lazy initializing? Doesn&#8217;t sound better.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1351385">
				<div id="div-comment-1351385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phil Miller</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351385">
			July 11, 2018 at 7:44 am</a>		</div>

		<p>It doesn&#8217;t help the cases shows, since arithmetic arguments aren&#8217;t ordered, but since C++17, per proposal <a>P0145</a>, order of evaluation around function/method calls is at least somewhat tighter specified.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1351395">
				<div id="div-comment-1351395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351395">
			July 11, 2018 at 7:47 am</a>		</div>

		<p>That is a task for static code analysis. Static analyzers can easily detect an expression which relies on the order of evaluation (or produces any kind of side effects) and notify the programmer. Also, programmers which use static analyzers are supposed to be more careful, so there will be less false positives, and they will be addressed by someone that know what s/he&#8217;s doing.</p>
<p>Of course, it is possible than in an organization somewhere the pointed-haired boss tells fresh-out-of college coders to regularly run static analysis on the codebase and blindly tweak it until all warnings are gone. But at least static code analyzers aren&#8217;t usually featured in business magazines&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1351405">
				<div id="div-comment-1351405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Davidbrcz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351405">
			July 11, 2018 at 7:59 am</a>		</div>

		<p>Code in functional languages is independent from the order of evaluation as there are no values, simply expression that get combined / rewritten.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-andycadley2 odd alt depth-2" id="comment-1351465">
				<div id="div-comment-1351465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351465">
			July 11, 2018 at 12:02 pm</a>		</div>

		<p>Yes, this feels a lot like trying to add verification to a language to make it act like a functional one. Wouldn&#8217;t it just be easier to write in a functional language in the first place if that&#8217;s what people want?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1351455">
				<div id="div-comment-1351455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351455">
			July 11, 2018 at 10:53 am</a>		</div>

		<p>This makes me think about the &#8220;Movers and Shakers&#8221; section of _Writing Solid Code_ by Steve Maguire.  That section focuses on the C allocator and how it (especially realloc) will often do the expected thing but will occasionally do surprising things.  This allows bugs to lurk because the surprising behavior rarely happens.  The solution is to make an allocator that always does the surprising thing so that you&#8217;re almost certain to see the bugs in the code that wasn&#8217;t prepared for the surprising behavior.</p>
<p>This idea can be applied to other areas.  There are unit test suites that will run your tests in a randomized order each time in order to ferret out bugs where one test accidentally depends on a side effect of an earlier test.</p>
<p>It makes me wonder whether it would be worth having a compiler option to always do the surprising thing, like evaluate expressions in a random order wherever the standard allows.  Without optimization (i.e., in your debug builds) the order is probably exactly what you&#8217;d expect, and the surprises only happen when the optimizer has a better idea (i.e., in your release builds).  You&#8217;ve got low odds of even detecting the bug, and, if you do, it&#8217;ll be tough to debug.  A mover and shaker built into the compiler could be a real benefit.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1351485">
				<div id="div-comment-1351485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351485">
			July 11, 2018 at 3:14 pm</a>		</div>

		<p>It would be entertaining to observe the debate between movers and shakers and reproducible builds.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1351525">
				<div id="div-comment-1351525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351525">
			July 12, 2018 at 2:49 am</a>		</div>

		<p>I love how the compiler has been groomed to take programmer hints over the decades. &#8220;inline int Fling(&#8230;) const throw(P *p) { register int i&#8230; stuff&#8230; return (i = p-&gt;Addref();) }&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1351575">
				<div id="div-comment-1351575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351575">
			July 12, 2018 at 9:28 am</a>		</div>

		<p>What is insane here is C and C++ standard not defining evaluation order where it matters.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1351695">
				<div id="div-comment-1351695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M Hotchin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351695">
			July 12, 2018 at 10:12 pm</a>		</div>

		<p>The reason this was not specified is so that compilers could take advantage of any particular quirks of the target hardware to optimize the result (typically for speed or size).  For any particular order of operations, there&#8217;s probably a piece of hardware that could do things better in a different order.</p>
<p>For example, depending on how many registers you have available, one particular order might be able to be done without any intermediate memory stores.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1351625">
				<div id="div-comment-1351625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Sutherland</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351625">
			July 12, 2018 at 2:58 pm</a>		</div>

		<p>Clearly, the answer is for the compiler only to accept sane code in the first place &#8230; whatever that is! Probably implemented as a side-effect of the often demanded &#8220;do what I mean not what I say&#8221; feature&#8230;</p>
<p>Quite topical seeing a cache update as a side effect, that being the essence of Spectre/Meltdown (&#8220;if we speculatively execute the instruction then throw the result away if it shouldn&#8217;t have run after all, that&#8217;s OK isn&#8217;t it, because it&#8217;s as if the instruction never executed? Right?&#8221;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1351875">
				<div id="div-comment-1351875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alv</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351875">
			July 13, 2018 at 9:15 am</a>		</div>

		<p>&#8220;Atomic increment, for example, is thread-safe, but is definitely dependent on order of evaluation.&#8221;</p>
<p>&#8211; but definitely not read-only. Or am I mistaken in assuming that &#8216;const&#8217; implies/requires both?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1351915">
				<div id="div-comment-1351915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1351915">
			July 13, 2018 at 10:03 am</a>		</div>

		<p>See Herb Sutter&#8217;s talk, which I linked to. <code>const</code> is more complicated than you think.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1352025">
				<div id="div-comment-1352025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alv</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180711-00/?p=99215#comment-1352025">
			July 13, 2018 at 1:30 pm</a>		</div>

		<p>The talk can be interpreted in two ways. I&#8217;d see your point if the moral of the story was &#8216;const only means thread-safe now, not logically const any more&#8217;. But to me it seems that &#8216;logically const and from c++11 on also thread-safe&#8217; is the correct interpretation. Thus, a const function must have no observable side effects, so if everything in the expression is const, the result should not depend on the order of evaluation.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

