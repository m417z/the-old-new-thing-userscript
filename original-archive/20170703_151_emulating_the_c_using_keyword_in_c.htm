<html>
<head>
<title>Emulating the C# using keyword in C++</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Emulating the C# <CODE>using</CODE> keyword in C++</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 3, 2017 / year-entry #152</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The co_await enables new patterns.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
C# has a very convenient <code>using</code> statement
which ensures that an object is <code>Dispose()</code>d
when control exits the block.
C++ has a generalization of this concept with RAII types,
but things get tricky when you have tasks,
lambda capture, and
the need to explicitly
<code>Close()</code> the hat pointer.
</p>
<p>
Here we go.
</p>
<p>
Here's one attempt, for C++/CX hat pointers:
</p>
<pre>
template&lt;typename T&gt;
class unique_close
{
public:
  unique_close(T^ t) : m_t(t) { }
  ~unique_close() { delete m_t; }

  // Disallow copying
  unique_close(const unique_close&amp; other) = delete;
  unique_close&amp; operator=(const unique_close&amp; other) = delete;

  // Moving transfers the obligation to Close
  unique_close(unique_close&amp;&amp; other)
  {
    *this = std::move(other);
  }
  unique_close&amp; operator=(unique_close&amp;&amp; other)
  {
    using std::swap; // enable ADL on the swap
    swap(m_t, other.m_t);
    return *this;
  }

private:
  T^ m_t;
};

template&lt;typename T&gt;
auto make_unique_close(T^ t)
{
  return unique_close&lt;T&gt;(t);
}
</pre>
<p>
With explicit task chaining, you need to remember to
use <code>std::</code><code>move</code> to move the <code>unique_close</code> object
into the final task in the chain if you didn't construct it
directly in the capture.
If you forget to do this, then the destruction of
the <code>unique_close</code> objects in the main function
will close the objects prematurely
because they are still in control.
</p>
<pre>
void Scenario1_Render::ViewPage()
{
    ...

    if (outfile)
    {
        auto page = pdfDocument-&gt;GetPage(pageIndex);

        return create_task(outfile-&gt;OpenTransactedWriteAsync())
            .then([this, page, <font COLOR="blue">usingPage{make_unique_close(page)}</font>]
                  (StorageStreamTransaction^ transaction) <font COLOR="blue">mutable</font>
        {
            auto options = ref new PdfPageRenderOptions();
            options-&gt;DestinationHeight = (unsigned)(page-&gt;Size.Height * 2);
            options-&gt;DestinationWidth = (unsigned)(page-&gt;Size.Width * 2);
            create_task(page-&gt;RenderToStreamAsync(transaction-&gt;Stream, options))
                .then([this, <font COLOR="blue">usingPage{std::move(usingPage)},
                       usingTransaction{make_unique_close(transaction)}</font>]() <font COLOR="blue">mutable</font>
            {
                <font COLOR="blue">// destruction of usingPage and usingTransaction
                // will close the page and transaction.</font>
            });
        });
    }
    ...
}
</pre>
<p>
(Let us ignore the fact that this doesn't work because
<code>task::</code><code>then</code> requires a copyable lambda,
and ours is merely movable.)
</p>
<p>
One way to address the added cognitive burden of
having to remember to
<a HREF="http://tvtropes.org/pmwiki/pmwiki.php/Main/MoveAlongNothingToSeeHere">
keep moving</a>
the obligation to close
is to share that obligation,
so that only when the last shared reference is destructed
does the object get closed.
</p>
<pre>
template&lt;typename T&gt;
class ensure_close
{
public:
  ensure_close(T^ t) : m_t(t) { }
  ~ensure_close() { delete m_t; }

  // Disallow copying and moving
  ensure_close(const ensure_close&amp; other) = delete;
  ensure_close&amp; operator=(const ensure_close&amp; other) = delete;
  ensure_close(const ensure_close&amp;&amp; other) = delete;
  ensure_close&amp; operator=(const ensure_close&amp;&amp; other) = delete;

private:
  T^ m_t;
};

template&lt;typename T&gt;
using shared_close = std::shared_ptr&lt;ensure_close&lt;T&gt;&gt;;

template&lt;typename T&gt;
auto make_shared_close(T^ t)
{
  return std::make_shared&lt;ensure_close&lt;T&gt;&gt;(t);
}
</pre>
<p>
Now you can copy the <code>shared_close</code> around,
and only when the last copy is destructed does the wrapped
hat pointer get closed.&sup1;
</p>
<pre>
void Scenario1_Render::ViewPage()
{
    ...

    if (outfile)
    {
        auto page = pdfDocument-&gt;GetPage(pageIndex);
        <font COLOR="blue">auto usingPage = make_shared_close(page);</font>

        return create_task(outfile-&gt;OpenTransactedWriteAsync())
            .then([this, page, <font COLOR="blue">usingPage</font>]
                  (StorageStreamTransaction^ transaction)
        {
            <font COLOR="blue">auto usingTransaction = make_shared_close(transaction);</font>
            auto options = ref new PdfPageRenderOptions();
            options-&gt;DestinationHeight = (unsigned)(page-&gt;Size.Height * 2);
            options-&gt;DestinationWidth = (unsigned)(page-&gt;Size.Width * 2);
            return create_task(page-&gt;RenderToStreamAsync(transaction-&gt;Stream, options))
                .then([this, <font COLOR="blue">usingPage, usingTransaction</font>]()
            {
                <font COLOR="blue">// destruction of the last shared usingPage
                // and usingTransaction will close the page and transaction.</font>
            });
        });
    }
    ...
}
</pre>
<p>
Still, you have to remember to keep passing the <code>usingPage</code>
and <code>usingTransaction</code> around.
If you forget, then the object gets closed prematurely.
(And if the <code>shared_close</code> is created by one lambda
and consumed by a sibling lambda,
well you now have
<a HREF="https://en.wikipedia.org/wiki/David_Wheeler_(British_computer_scientist)#Quotes">
a <code>shared_ptr</code> to a
<code>shared_close</code></a>,
which is getting ridiculous.)
</p>
<p>
But wait, you can stop the madness.
</p>
<p>
Let's go back to <code>unique_close</code>:
This class becomes much more convenient if you use
the <code>co_await</code> keyword,
because the compiler will do the heavy lifting of cleaning
up when the last task has completed.&sup2;
</p>
<pre>
task&lt;void&gt; Scenario1_Render::ViewPageAsync()
{
    ...

    if (outfile)
    {
        auto page = pdfDocument-&gt;GetPage(pageIndex);
        <font COLOR="blue">auto usingPage = make_unique_close(page);</font>

        auto transaction =
            co_await outfile-&gt;OpenTransactedWriteAsync();
        <font COLOR="blue">auto usingTransaction = make_unique_close(transaction);</font>
        auto options = ref new PdfPageRenderOptions();
        options-&gt;DestinationHeight = (unsigned)(page-&gt;Size.Height * 2);
        options-&gt;DestinationWidth = (unsigned)(page-&gt;Size.Width * 2);
        co_await page-&gt;RenderToStreamAsync(transaction-&gt;Stream, options);
        <font COLOR="blue">// destruction of usingPage and usingTransaction
        // will close the page and transaction.</font>
    }
    ...
}
</pre>
<p>
We have offloaded all the thinking to the compiler.
The compiler will do the work of making sure that the
<code>unique_close</code> objects are destructed when control
leaves the block.
The <code>unique_close</code> objects will remain alive
during the
<code>co_await</code> statements,
which is what we want.
</p>
<p>
We could make our
<code>unique_close</code> a little fancier by
making it a little more <code>unique_ptr</code>y.
</p>
<pre>
template&lt;typename T&gt;
class unique_close
{
public:
  unique_close(T^ t) : m_t(t) { }
  ~unique_close() { delete m_t; }

  <font COLOR="blue">T^ get() { return m_t; }
  T^ operator*() { return m_t; }
  T^ operator-&gt;() { return m_t; }</font>
  ...
};
</pre>
<p>
This leaves us with
</p>
<pre>
task&lt;void&gt; Scenario1_Render::ViewPageAsync()
{
    ...

    if (outfile)
    {
        auto page = <font COLOR="blue">make_unique_close(</font>
             pdfDocument-&gt;GetPage(pageIndex)<font COLOR="blue">)</font>;
        auto transaction = <font COLOR="blue">make_unique_close(</font>
            co_await outfile-&gt;OpenTransactedWriteAsync()<font COLOR="blue">)</font>;
        auto options = ref new PdfPageRenderOptions();
        options-&gt;DestinationHeight = (unsigned)(page-&gt;Size.Height * 2);
        options-&gt;DestinationWidth = (unsigned)(page-&gt;Size.Width * 2);
        co_await page-&gt;RenderToStreamAsync(transaction-&gt;Stream, options);
        <font COLOR="blue">// destruction of page and transaction
        // will close the page and transaction.</font>
    }
    ...
}
</pre>
<p>
That doesn't seem so bad.
Pretty close to C# but still in the spirit of C++.&sup3;
</p>
<p>
&sup1;
You (and by "you" I mean "me")
would be sorely tempted to write this with a custom deleter instead.
</p>
<pre>
namespace Details
{
  template&lt;typename T&gt;
  struct close_deleter
  {
    void operator()(T^ t) { delete t; }
  };
}

template&lt;typename T&gt;
auto make_shared_close(T^ t)
{
    return std::shared_ptr&lt;T&gt;(t, Details::close_deleter&lt;T&gt;());
}
</pre>
<p>
Except that this doesn't work because
<code>std::shared_ptr</code> manages raw pointers, not hat pointers.
</p>
<p>
&sup2;
If you are a total crazy person, you might consider adding a
boolean conversion operator to the <code>unique_close</code>:
</p>
<pre>
...
   operator bool() const { return true; }
...
</pre>
<p>
This appears to serve no purpose, but it lets you write this:
</p>
<pre>
// Oh my goodness what kind of craziness is about to happen?
#define scope_using__(t, c) \
    if (auto _scope_using_##c##_ = make_unique_close(t))
#define scope_using_(t, c) scope_using__(t, c) 
#define scope_using(t) scope_using(t, __COUNTER__)

task&lt;void&gt; Scenario1_Render::ViewPageAsync()
{
    ...

    if (outfile)
    {
        auto page = pdfDocument-&gt;GetPage(pageIndex);
        <font COLOR="blue">scope_using (page)
        {</font>
            auto transaction =
                co_await outfile-&gt;OpenTransactedWriteAsync();
            <font COLOR="blue">scope_using (transaction)
            {</font>
                auto options = ref new PdfPageRenderOptions();
                options-&gt;DestinationHeight = (unsigned)(page-&gt;Size.Height * 2);
                        options-&gt;DestinationWidth = (unsigned)(page-&gt;Size.Width * 2);
                co_await page-&gt;RenderToStreamAsync(transaction-&gt;Stream, options);
                <font COLOR="blue">// exiting the scope_using will close
                // the corresponding objcts.</font>
            }
        }
    }
    ...
}
</pre>
<p>
This is a moral outrage.
<a HREF="http://tvtropes.org/pmwiki/pmwiki.php/Main/LetUsNeverSpeakOfThisAgain">
Let us never speak of this again</a>.
</p>
<p>
&sup3;
If you wanted to be cute, you could rename
<code>make_unique_close</code> to <code>Using</code>.
</p>
<pre>
auto page = <font COLOR="blue">Using</font>(pdfDocument-&gt;GetPage(pageIndex));
auto transaction = <font COLOR="blue">Using</font>(co_await outfile-&gt;OpenTransactedWriteAsync());
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1301205">
				<div id="div-comment-1301205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301205">
			July 3, 2017 at 7:09 am</a>		</div>

		<p>And here is why I&#8217;ve stopped using c++, preferring c#!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1301215">
				<div id="div-comment-1301215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Schroedl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301215">
			July 3, 2017 at 8:15 am</a>		</div>

		<p>Some pretty cool techniques here!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1301225">
				<div id="div-comment-1301225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301225">
			July 3, 2017 at 8:31 am</a>		</div>

		<p>Nice!  A great example and motivation for await and co_await &#8211; they make this kind of async continuation based work so much easier to read and write correctly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1301235">
				<div id="div-comment-1301235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rich</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301235">
			July 3, 2017 at 9:36 am</a>		</div>

		<p>that deserves a round of applause !</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1301255">
				<div id="div-comment-1301255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301255">
			July 3, 2017 at 12:00 pm</a>		</div>

		<p>I don&#8217;t like the idea of implementing the move constructor using the move assignment operator / std::swap().</p>
<p>The move constructor is required to leave &#8220;other&#8221; in a valid (but otherwise unspecified) state. This is so that the destructor can run correctly on the moved-from value. By swapping with an uninitialized *this, you leave behind uninitialized memory in other, and the destructor call has undefined behavior. Now, I&#8217;m not sure what the rules with ^ pointers are &#8212; if these are implicitly initialized to nullptr, the code here happens to be fine. But applying the same move constructor pattern to other classes is likely to result in subtle bugs.</p>
<p>A much less error-prone pattern for move constructors is to move-construct the members and then reset the state in other so that the destructor becomes a no-op:<br />
  unique_close(unique_close&amp;&amp; other)<br />
     : m_t(std::move(other.m_t))<br />
  {<br />
    other.m_t = nullptr;<br />
  }</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1301776">
				<div id="div-comment-1301776" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301776">
			July 11, 2017 at 7:30 am</a>		</div>

		<p>Hat pointers default-construct as <code>nullptr</code>, so we&#8217;re okay.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command even thread-odd thread-alt depth-1" id="comment-1301285">
				<div id="div-comment-1301285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301285">
			July 3, 2017 at 11:52 pm</a>		</div>

		<p>In a way, this post reminds me of my childhood: I used to read computer magazines that had Pascal or C source codes, then try to reproduce them in QBasic! Of course, those programming languages have a very rich and flexible type system and QBasic didn&#8217;t even have one-byte data types. Oh, the troubles!</p>
<p>Then I purchased a Borland Pascal license and left the QBasic world behind, just like a baby who leaves the restricted world of womb behind.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1301295">
				<div id="div-comment-1301295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ADev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301295">
			July 4, 2017 at 5:55 am</a>		</div>

		<p>Can&#8217;t wait for CoreRT to come and finaly get rid of that ancient and ugly C++</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude even thread-odd thread-alt depth-1 parent" id="comment-1301305">
				<div id="div-comment-1301305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301305">
			July 4, 2017 at 6:18 am</a>		</div>

		<p>I&#8217;m pretty sure you could use the <code>default</code> move assignment and constructor here for <code>unique_close</code>, just declaring them automatically deletes the copy members making the type move only. In essence <code>unique_close(unique_close&amp;&amp; other) = default; </code> should do the trick.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1301556">
				<div id="div-comment-1301556" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301556">
			July 7, 2017 at 8:03 am</a>		</div>

		<p>No: the default implementation of &#8220;move&#8221; for primitive types such as handles is to copy the pointer.  This would result in double (and premature) free, when the moved-from object runs its destructor.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1301335">
				<div id="div-comment-1301335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301335">
			July 4, 2017 at 11:13 am</a>		</div>

		<p>I came up with this nice use of the coroutines TS recently (hopefully the formatting comes through):</p>
<p>template<br />
auto enumerate(T &amp;&amp; sequence)<br />
{<br />
    int n = 0;<br />
    for (auto &amp;&amp; item : sequence) {<br />
        co_yield std::make_pair(n, item);<br />
        ++n;<br />
    }<br />
}</p>
<p>I think I should be forwarding to make_pair, and I&#8217;m not sure the &amp;&amp; on item is right, but I&#8217;m not sure how to do this all correctly at this point. This is doable but far far more obnoxious without co_yield.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1301405">
				<div id="div-comment-1301405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pm100</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301405">
			July 5, 2017 at 8:14 am</a>		</div>

		<p>the fact that this idiom keeps getting implemented over and over again just shows how useful &#8216;finally&#8217; would be in c++, but they stubbornly refuse to do it. &#8220;For the 50th time today &#8211; there&#8217;s no call for it&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jeremytais even thread-even depth-1" id="comment-1301435">
				<div id="div-comment-1301435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SimonRev' rel='external nofollow' class='url'>SimonRev</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301435">
			July 5, 2017 at 11:57 am</a>		</div>

		<p>I have to confess that I have a LOCK #define for a CRITICAL_SECTION wrapper class that does exactly what your footnote 2 does (I wrote it years ago but still occasionally pull it out). </p>
<p>It is moral outrage, but still makes the critical section blocks so much easier to follow when reading the code.  And I remember clearly when I was puzzling that out and the feeling I had when I realized that I had to add a useless bool conversion operator to make it work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1301555">
				<div id="div-comment-1301555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515#comment-1301555">
			July 7, 2017 at 8:01 am</a>		</div>

		<p>BUG: The unique_close move constructor swaps an uninitialized member with the corresponding member of the source object.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

