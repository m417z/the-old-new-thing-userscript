<html>
<head>
<title>Closing the race window between creating a suspended process and putting it in a job</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Closing the race window between creating a suspended process and putting it in a job</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 16, 2018 / year-entry #259</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20181116-00/?p=100245</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Start it there from the beginning.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer had a test harness that spawns
a very large number of processes.
To make sure everything gets cleaned up
if the test harness closes unexpectedly,
they start the process suspended,
then place the processes in a job object
before resuming the process.
The job object is marked as
<code>JOB_</code><code>OBJECT_</code><code>LIMIT_</code><code>KILL_</code><code>ON_</code><code>JOB_</code><code>CLOSE</code>
so that when the last handle to the job is closed,
the processes in the job are terminated.
</p>
<p>
This was successful for the most part,
except for the small race window when the
process has been created suspended
but has not been added to a job.
A poorly-timed cancellation of the test harness
would leave the zombie process behind:
Suspended, but with nobody around to terminate it.
</p>
<p>
The customer was looking for ideas to close this last
remaining race window.
</p>
<p>
My suggestion was to put the test harness in the job, too!
This entail splitting the test harness into two processes.
The first process is what the test infrastructure
launches.
It doesn't actually run any tests, but rather
creates the environment for tests to run.
Put all the test harness code in the
second process.
</p>
<p>
The first process creates the
kill-on-close job,
creates the second process (not suspended),
passing it a handle to itself and a handle
to an event.
The first process puts the second process
in the job and then signals the event,
to tell the second process,
"You're in a job now.
You can do your thing."
</p>
<p>
The second process, when it starts up,
waits for either of the passed-in handles
to be signaled.
If the handle to the first process is signaled,
then it means that the test was canceled,
and the second process should kill itself.
If the event handle is signaled,
then it means that the second process is
now safely in a job and can start launching
tests.
Those tests will immediately belong to the job object,
since they were created by a process already in the job.
There is no "suspended process" window.
</p>
<p>
So now we have these points at which the test can be stopped:
</p>
<p>
Before the first process creates the
second process, terminating the first
process terminates the test.
</p>
<p>
After the first process creates the second process,
but before it puts the second process into the job,
terminating the first process will cause its own
process handle to become signaled,
and the second process responds by terminating itself.
No tests have started yet.
</p>
<p>
After the second process is placed in the job,
terminating the first process will cause the
job handle to become closed,
at which point everything in the job
(the second process plus all of the tests)
will be terminated.
</p>
<p>
If it's essential that the tests run in a separate
job from the test harness, the test harness can
create a second job for the tests themselves.
It creates the tests suspended, then moves
them into the second job.
The tests always belong to <i>some</i> job,
so they will get terminated eventually.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-dpb even thread-even depth-1 parent" id="comment-1370885">
				<div id="div-comment-1370885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SpecLad' rel='external nofollow' class='url'>SpecLad</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181116-00/?p=100245#comment-1370885">
			November 16, 2018 at 12:30 pm</a>		</div>

		<p>There&#8217;s still a small possibility of a leaked process here: if the first process is terminated before it can put the second process into the job, and the second process hangs for whatever reason before it can exit. It&#8217;s quite unlikely, of course, but the possibility is there.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-2" id="comment-1370905">
				<div id="div-comment-1370905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181116-00/?p=100245#comment-1370905">
			November 16, 2018 at 1:59 pm</a>		</div>

		<p>If WaitForMultipleObjects or ExitProcess/TerminateProcess fails then you have more to worry about than just a leaked process, you must have a bug in a kernel driver or something.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuffa8 even thread-odd thread-alt depth-1 parent" id="comment-1370895">
				<div id="div-comment-1370895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/uffa8' rel='external nofollow' class='url'>uffa8</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181116-00/?p=100245#comment-1370895">
			November 16, 2018 at 12:48 pm</a>		</div>

		<p>i can not understand for what here need use two processes ? &#8220;The first process puts the second process in the job&#8221; &#8211; why not second process yourself create kill-on-close job and assign yourself to this job ? all tests will be assigned to this job automatically. in this case the first process became not need. so for what carry out this task to separate &#8220;first&#8221; process ?<br />
also before Windows 8 process can be associated with only a single job. so for pre win8 we can not run tests in  separate job. but begin from win 8 can</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-aadsso-1live-com00034001d01cd865 odd alt depth-2 parent" id="comment-1370915">
				<div id="div-comment-1370915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Neil+Rashbrook+%28Copy+1%29' rel='external nofollow' class='url'>Neil Rashbrook (Copy 1)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181116-00/?p=100245#comment-1370915">
			November 17, 2018 at 2:49 am</a>		</div>

		<p>Perhaps the process might not have permission to put itself into a job, but would have permission for a process that it created?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-yuffa8 even depth-3" id="comment-1370925">
				<div id="div-comment-1370925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/uffa8' rel='external nofollow' class='url'>uffa8</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181116-00/?p=100245#comment-1370925">
			November 17, 2018 at 3:17 am</a>		</div>

		<p>of course no. for call AssignProcessToJobObject we need have process handle PROCESS_SET_QUOTA and PROCESS_TERMINATE access rights. the pseudo-handle GetCurrentProcess() have all this &#8211; so no any problem yourself create kill-on-close job and assign yourself to this job. use additional separate process for this no sense</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuffa8 odd alt depth-3" id="comment-1370935">
				<div id="div-comment-1370935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/uffa8' rel='external nofollow' class='url'>uffa8</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181116-00/?p=100245#comment-1370935">
			November 17, 2018 at 7:10 am</a>		</div>

		<p>process can yourself create job object and assign yourself to it. problem was before win8, if process was already in job, because before win8 process can be associated only with a single job. only in this case exist sense try use 2 processes. but first process need only for start second with the CREATE_BREAKAWAY_FROM_JOB flag. it must not create job yourself, event, etc. only for breakway from job. so we must at begin call IsProcessInJob &#8211; if no &#8211; run as single process. if yes, call the CreateProcess (for self exe) function with the CREATE_BREAKAWAY_FROM_JOB flag. if of course job allow breakway (JOB_OBJECT_LIMIT_BREAKAWAY_OK must be set for job) or we got access denied error in call CreateProcess. but anyway if want &#8211; &#8220;If it&#8217;s essential that the tests run in a separate job from the test harness, the test harness can create a <b>second job for the tests themselves</b>&#8221; &#8211; we need win 8+ for this, but in this case, if process already in job at startup not a problem</p>
<p>simply implementation: <a href="https://pastebin.com/Gh6Qqkq4" rel="nofollow">https://pastebin.com/Gh6Qqkq4</a></p>
<p>void JobTest()<br />
{<br />
	MessageBoxW(0,0,L&#8221;Begin Test&#8221;,0);<br />
	BOOL bInJob;<br />
	if (!IsProcessInJob(GetCurrentProcess(), 0, &amp;bInJob))<br />
	{<br />
		GetLastError();<br />
		return ;<br />
	}</p>
<p>	STARTUPINFO si = { sizeof(si) };<br />
	PROCESS_INFORMATION pi;<br />
	WCHAR ApplicationName[MAX_PATH];<br />
	if (bInJob)<br />
	{<br />
		//try breakway &#8211; need only before win 8<br />
		if (GetModuleFileNameW(0, ApplicationName, RTL_NUMBER_OF(ApplicationName)))<br />
		{<br />
			if (CreateProcessW(ApplicationName, 0, 0, 0, 0, CREATE_BREAKAWAY_FROM_JOB, 0, 0, &amp;si, &amp;pi))<br />
			{<br />
				CloseHandle(pi.hThread);<br />
				CloseHandle(pi.hProcess);<br />
			}<br />
		}</p>
<p>		GetLastError();<br />
		return;<br />
	}</p>
<p>	if (HANDLE hJob = CreateJobObject(0, 0))<br />
	{<br />
		JOBOBJECT_EXTENDED_LIMIT_INFORMATION jbli;<br />
		jbli.BasicLimitInformation.LimitFlags = JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE;</p>
<p>		if (SetInformationJobObject(hJob, JobObjectExtendedLimitInformation, &amp;jbli, sizeof(jbli)) &amp;&amp;<br />
			AssignProcessToJobObject(hJob, GetCurrentProcess()))<br />
		{<br />
			if (HANDLE hNestedJob = CreateJobObject(0, 0))<br />
			{<br />
				jbli.BasicLimitInformation.LimitFlags = JOB_OBJECT_LIMIT_ACTIVE_PROCESS;<br />
				jbli.BasicLimitInformation.ActiveProcessLimit = 1;</p>
<p>				if (SetInformationJobObject(hNestedJob, JobObjectBasicLimitInformation,<br />
					&amp;jbli.BasicLimitInformation, sizeof(jbli.BasicLimitInformation)))<br />
				{<br />
					if (GetEnvironmentVariable(L&#8221;ComSpec&#8221;, ApplicationName, RTL_NUMBER_OF(ApplicationName)))<br />
					{<br />
						// process will be auto asigned to kill-on-close hJob<br />
						if (CreateProcessW(ApplicationName, 0, 0, 0, 0, CREATE_SUSPENDED, 0, 0, &amp;si, &amp;pi))<br />
						{<br />
							// before win 8 this fail anyway.<br />
							if (AssignProcessToJobObject(hNestedJob, pi.hProcess))<br />
							{<br />
								// cmd.exe will be run bat can not exec any process yourself<br />
								// say help command fail with<br />
								ResumeThread(pi.hThread);<br />
							}<br />
							else<br />
							{<br />
								TerminateProcess(pi.hProcess, GetLastError());<br />
							}<br />
							CloseHandle(pi.hThread);<br />
							CloseHandle(pi.hProcess);<br />
						}<br />
						GetLastError();<br />
					}<br />
				}<br />
				CloseHandle(hNestedJob);<br />
			}<br />
		}</p>
<p>		MessageBoxW(0,0,L&#8221;End Test&#8221;,0);<br />
		// terminate all<br />
		CloseHandle(hJob);<br />
	}<br />
}</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

