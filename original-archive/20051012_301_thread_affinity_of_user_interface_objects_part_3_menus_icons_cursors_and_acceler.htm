<html>
<head>
<title>Thread affinity of user interface objects, part 3: Menus, icons, cursors, and accelerator tables</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Thread affinity of user interface objects, part 3: Menus, icons, cursors, and accelerator tables</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 12, 2005 / year-entry #302</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20051012-00/?p=33803</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The remaining user interface objects in common use are menus, icons, cursors, and accelerator tables. Menus do not have thread affinity. Any thread can use a menu. However, if two threads use a menu, it is the responsibility of those threads to coordinate among themselves how that menu will be used, so that one thread...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The remaining user interface objects in common use are menus, icons, cursors, and accelerator tables.</p>
<p> Menus do not have thread affinity. Any thread can use a menu. However, if two threads use a menu, it is the responsibility of those threads to coordinate among themselves how that menu will be used, so that one thread doesn't modify a menu while another is busy displaying it, for example. (More on this subject later.) </p>
<p> Icons, cursors, and accelerator tables behave like menus. They do not have thread affinity. They are easier to manage than menus since they cannot be modified once created, so the only thing you have to worry about is not to use one after it has been destroyed. </p>
<p> Next time, GDI objects and an expansion on the subject of thread safety. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-312603">
				<div id="div-comment-312603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Name required. Yeah yeah.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051012-00/?p=33803#comment-312603">
			October 13, 2005 at 3:18 am</a>		</div>

		<p>Do people really do this kind of thing? Split their UI into several threads, I mean. I would expect it to lead to unpredicatable UI behaviour, which is one of the most basic usability no-nos.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-312633">
				<div id="div-comment-312633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051012-00/?p=33803#comment-312633">
			October 13, 2005 at 4:11 am</a>		</div>

		<p>Thursday, October 13, 2005 3:18 AM by Name required. Yeah yeah. </p>
<p>&gt; Do people really do this kind of thing?<br />
<br />&gt; Split their UI into several threads, I mean.</p>
<p>Suppose a person starts out without that detailed knowledge of Windows APIs or MFC, but they know how to create separate threads to communicate with separate clients or read from separate devices.  Maybe the person wants to display all of the events in a single window.  The person might design it with a semaphore so that any thread who wants to append to the window takes the semaphore and updates the window.  Oops.  MFC&#8217;s documentation of the fact that this isn&#8217;t allowed seems to be published in assert statements instead of in MSDN.  AFTER that, people learn not to split their UI into several threads.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-315653">
				<div id="div-comment-315653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051012-00/?p=33803#comment-315653">
			October 25, 2005 at 8:43 pm</a>		</div>

		<p>Norman: It&#8217;s important to understand what it is that MFC doesn&#8217;t allow, and also to understand that it&#8217;s a limitation of MFC and not the Windows API.  In addition, the limitation is plainly documented in MSDN, for example, at &quot;Multithreading: Programming Tips&quot; at <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/en-us/vccore98/html/_core_multithreading.3a_.programming_tips.asp" rel="nofollow"></a><a href="http://msdn.microsoft.com/library/en-us/vccore98/html/" rel="nofollow">http://msdn.microsoft.com/library/en-us/vccore98/html/</a><em>core_multithreading.3a</em>.programming_tips.asp</p>
<p>MFC uses thread-local storage for its windows handle map (i.e., the map between a handle for a windows window and a C++ CWnd object).  Thus, any MFC function (like CDocument::UpdateAllViews) that needs to map from a CWnd object to to a corresponding HWND will fail if called from a worker thread.</p>
<p>That&#8217;s a limitation of MFC, but not a limitation of the API, for the reason that if you know the HWND directly, then it&#8217;s always possible to call the API function directly (i.e., without the MFC wrapper).</p>
<p>As for whether it&#8217;s a good idea to split responsibility for the UI between different threads, well, that&#8217;s a different question.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

