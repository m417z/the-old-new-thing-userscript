<html>
<head>
<title>On the circular path from RAII to crazy-town back to RAII: Thoughts on emulating C#&#39;s using in C++</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>On the circular path from RAII to crazy-town back to RAII: Thoughts on emulating C#&#39;s <CODE>using</CODE> in C++</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 10, 2017 / year-entry #157</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170710-00/?p=96565</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A trip around the block.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Some follow-up notes on
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170703-00/?p=96515">
Emulating the C# <code>using</code> keyword in C++</a>,
primarily for the benefit of
<a HREF="https://www.reddit.com/r/programming/comments/6l6b3e/emulating_the_c_using_keyword_in_c/">
people from reddit who stumbled into the series and
didn't understand the context of the discussion</a>,
because this was really part 6 of the series begun the previous week,
even though it wasn't labeled as such.
(And the title itself was a party trick rather than a serious
proposal.)
</p>
<p>
The main complication that prevented us from using RAII was
the use of the
<a HREF="https://msdn.microsoft.com/en-us/library/dd492418.aspx">
Parallel Patterns Library</a> (PPL)
to express asynchronous programming in C++.&sup1;
The most general pattern for asynchronous programming is that
you start an operation, and then specify a callback
to be invoked when the operation completes.
In traditional C-style programming, this callback is
a boring function pointer, coupled with some reference
data so the callback has context for why it is being called back.
C++ provides lambdas which let you express the continuation as
a callback <i>object</i>,
which is much more convenient since you can express the control
flow inline instead of having tiny pieces of control flow scattered
all over your program.
And lambda capture makes it easy to express what pieces of information
needs to be carried forward to the continuation.
</p>
<p>
If we didn't have any asynchronous operations, then a basic RAII
class would do the trick:
When the RAII class destructs, the cleanup operation occurs.
(In our example, the cleanup operation is calling <code>Close</code>.)
The difficulty in the asynchonous case
is that it is cumbersome to keep carrying
this RAII class forward and preventing it
from destructing until the entire chain of continuations has completed.
That's where the <code>ensure_</code><code>close</code> and
<code>shared_</code><code>close</code> classes entered the picture.
But you still had to remember to carry them forward.
</p>
<p>
The magical step was the
introduction of the not-yet-standard-but-hopefully-soon
<code>co_await</code> keyword.
This
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20080812-00/?p=21273">
transforms the function into a state machine</a>,
where each <code>co_await</code> represents
the end of a state.
The current execution state is saved, and execution of the task
suspends.
When the awaited operation completes, the execution state is
restored and the function resumes execution.
This transformation is very tedious and error-prone to perform
by hand (especially when there are loops and branches),
and in particular,
it preserves RAII semantics:
The automatic variables created by the pre-transformed function
become part of the execution state,
and they are destructed at the "natural" time they would have
been destructed prior to transformation.
</p>
<p>
As a result, switching to <code>co_await</code> brings us full circle
back to plain old RAII.
Behind the scenes, the compiler is doing the wacky transformations
that we tried to mimic with <code>ensure_</code><code>close</code>
and <code>shared_</code><code>close</code>.
But <code>co_await</code> lets us write the code in a far more natural way.
</p>
<p>
&sup1;
There's also
<code>std::future</code>,
but
<a HREF="https://bartoszmilewski.com/2009/03/03/broken-promises-c0x-futures/">
its lack of composability</a>
makes it a poor choice for asynchronous programming.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1" id="comment-1301735">
				<div id="div-comment-1301735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170710-00/?p=96565#comment-1301735">
			July 10, 2017 at 7:56 am</a>		</div>

		<p>Having recently used <code>co_await</code> with cppwinrt for some sockets code it is indeed wonderful magical pixie dust that I can&#8217;t wait to get fully standardized.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1301755">
				<div id="div-comment-1301755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mathias Gaunard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170710-00/?p=96565#comment-1301755">
			July 10, 2017 at 10:05 pm</a>		</div>

		<p>The concurrency TS has future::then, which makes it composable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1302015">
				<div id="div-comment-1302015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170710-00/?p=96565#comment-1302015">
			July 13, 2017 at 8:36 am</a>		</div>

		<p>This is probably the blog platform&#8217;s fault and out of your control, but the social links on this article have some busted HTML with unescaped quotes in their attributes:</p>
<p>&lt;a data-social=&#039;{&quot;type&quot;:&quot;twitter&quot;, &quot;url&quot;:&quot;<a href="https://blogs.msdn.microsoft.com/oldnewthing/20170710-00/?p=96565&#038;quot" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20170710-00/?p=96565&#038;quot</a>;, &quot;text&quot;: &quot;On the circular path from RAII to crazy-town back to RAII: Thoughts on emulating C#&#039;s <code>using</code> in C++&#8221;}&#8217; href=&#8221;#&#8221; id=&#8221;post_tweet_count&#8221;&gt;0</p>
<p>Workaround: remove the apostrophe from the article title, since other articles aren&#8217;t quite as busted as this one.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1302025">
				<div id="div-comment-1302025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170710-00/?p=96565#comment-1302025">
			July 13, 2017 at 9:47 am</a>		</div>

		<p>Yeah, I&#8217;ve opened a ticket with the blog platform team. <del>Meanwhile, I changed the &#8216; to &amp;#39; to work around the problem.</del> They asked me to turn the corruption back on so they can investigate.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

