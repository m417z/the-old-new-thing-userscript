<html>
<head>
<title>Is this a really bug with CreateWindowEx or am I just confused?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Is this a really bug with CreateWindowEx or am I just confused?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 12, 2011 / year-entry #218</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Somebody sent me email pointing out strange behavior in the MessageBox function if you fail a window creation by returning &minus;1 from the WM_CREATE message. On the other hand, returning FALSE from WM_NCCREATE seems to work just fine. "So why the difference with WM_CREATE?" #include <windows.h> LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Somebody sent me email pointing out strange behavior in the
<code>MessageBox</code> function if you fail a window creation
by returning &minus;1 from the <code>WM_CREATE</code> message.
On the other hand, returning <code>FALSE</code> from
<code>WM_NCCREATE</code> seems to work just fine.
"So why the difference with <code>WM_CREATE</code>?"
</p>
<pre>
#include &lt;windows.h&gt;

LRESULT CALLBACK
WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    switch(uMsg)
    {
        case WM_CREATE:
            return -1;
        
        case WM_DESTROY:
            PostQuitMessage(0);
            return 0;
    }
    
    return DefWindowProc(hWnd, uMsg, wParam, lParam);
}

int APIENTRY WinMain(HINSTANCE hInst, HINSTANCE hPrev,
    LPSTR lpCmdLine, int nShowCmd)
{
    MSG msg;
    HWND hWnd;
    WNDCLASS wc = { 0 };
    wc.lpfnWndProc   = WndProc;
    wc.hInstance     = hInst;
    wc.hIcon         = LoadIcon(NULL, IDI_APPLICATION);
    wc.hCursor       = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    wc.lpszClassName = "TestApp";
    
    if(!RegisterClass(&amp;wc)){
        MessageBox(NULL, "Error creating class",
            "Test App", MB_ICONERROR);
        return 1;
    }
    
    hWnd = CreateWindow(wc.lpszClassName, "Test App",
        WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT,
        CW_USEDEFAULT, CW_USEDEFAULT, NULL, 0, hInst, NULL);
    if(!hWnd){
        MessageBox(NULL, "Error creating window",
            "Test App", MB_ICONERROR);
        return 1;
    }
    
    ShowWindow(hWnd, nShowCmd);
    UpdateWindow(hWnd);

    while(GetMessage(&amp;msg, NULL, 0, 0))
    {
        TranslateMessage(&amp;msg);
        DispatchMessage(&amp;msg);
    }
    
    return (int)msg.wParam;
}
</pre>
<p>
You already know enough to solve this puzzle.
You just need to connect the dots.
</p>
<p>
(In fact, the person who sent me this topic did so
a year after
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/05/20/8520129.aspx">
I already answered it</a>.
But I'm repeating it here because the original answer
<a HREF="http://www.adrianmccarthy.com/blog/?p=3">
was accidentally destroyed</a>.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-934843">
				<div id="div-comment-934843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A. Skrobov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-934843">
			September 12, 2011 at 7:17 am</a>		</div>

		<p>Do you mean, WM_QUIT gets posted before the control returns to WinMain, thus making the modal loop in MessageBox exit immediately?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-934853">
				<div id="div-comment-934853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-934853">
			September 12, 2011 at 7:26 am</a>		</div>

		<p>As the reference docs say, WM_CREATE is called after the window is created, but before its set visible, and that failure from WM_CREATE causes the window to be destroyed. &nbsp;This means that failing from WM_CREATE causes WM_DESTROY to be sent, which posts a quit message, which quits the message box. &nbsp;Presumably, failing a WM_NCCREATE doesn&#39;t cause a matching WM_DESTROY (perhaps it causes a WM_NCDESTROY?!)</p>
<p>Of course, this behavior is counter-intuitive to C++ programmers. &nbsp;If a constructor fails (by way of an exception of course), you never get a destructor call on a partially constructed object. &nbsp;I&#39;m sure the way most people think of it is &quot;if I fail a create, I clean up after myself first. &nbsp;If a create passes, THEN call WM_DESTROY because only them am I a fully constructed window&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-934863">
				<div id="div-comment-934863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-934863">
			September 12, 2011 at 7:26 am</a>		</div>

		<p>The question contains two conceptual errors, I think. (A long time since I did this for real&#8230;)</p>
<p>First error is as A. Skrobov, the quit message on the queue kills the dialog. Questioner assumes it does not.</p>
<p>Second half is, Questioner assumes WM_DESTROY will be sent since the window is being destroyed. But since it is only partially created it only needs to be partially destroyed. WM_NCDESTROY will still occur, since we reached WM_NCCREATE, but WM_DESTROY will not because we never reached that stage of creation, so there should be nothing to destroy. So no quit message is posted, and the messagebox shows fine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-934873">
				<div id="div-comment-934873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-934873">
			September 12, 2011 at 9:27 am</a>		</div>

		<p>Not destroyed, just well hidden:</p>
<p><a rel="nofollow" target="_new" href="http://web.archive.org/web/20071031111918/http://www.adrianmccarthy.com/blog/?m=200703#post-52" rel="nofollow">web.archive.org/&#8230;/blog</a></p>
<p>(then scroll up slightly, since the panel at the top covers the start of the post)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-934883">
				<div id="div-comment-934883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-934883">
			September 12, 2011 at 10:50 am</a>		</div>

		<p>I&#39;m guessing from the answers so far that the &quot;strange behaviour&quot; of the MessageBox function is that the second message is never seen. However, this isn&#39;t actually stated in the original article.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-934913">
				<div id="div-comment-934913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-934913">
			September 12, 2011 at 2:30 pm</a>		</div>

		<p>Its all obvous here&#8230; BTW I always wondered about that different return results meaning in quite same messages:</p>
<p>WM_CREATE &#8211; &quot;If an application processes this message, it should return zero to continue creation of the window. If the application returns â€“1, the window is destroyed&quot;</p>
<p>vs</p>
<p>WM_NCCREATE &#8211; &quot;Nonzero if the nonclient area is created. It is 0 if an error occurs; the Create function will return failure &quot;</p>
<p>WM_PAINT &#8211; &quot;An application returns zero if it processes this message.&quot;</p>
<p>vs</p>
<p>WM_ERASEBKGND &#8211; &quot;An application should return nonzero if it erases the background; otherwise, it should return zero.&quot;</p>
<p>WM_SIZING, WM_MOVING &#8211; &quot;An application should return TRUE if it processes this message&quot;</p>
<p>vs</p>
<p>WM_WINDOWPOSCHANGING &#8211; &quot;If an application processes this message, it should return zero.&quot;</p>
<p>Why so much mess in quite similar functionality? Is it just a historical random or some compatibility tricks hidden here?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-934923">
				<div id="div-comment-934923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-934923">
			September 12, 2011 at 3:24 pm</a>		</div>

		<p>@Killer: It&#39;s almost like Microsoft doesn&#39;t want us to get it right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-934963">
				<div id="div-comment-934963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-934963">
			September 13, 2011 at 5:32 am</a>		</div>

		<p>@Killer: You forgot the WM_CTLCOLORxxx messages, which ignore the DWL_MSGRESULT, and whose documentation said &quot;cast the return value to a BOOL&quot; long after the DLGPROC return type was changed to INT_PTR, despite being the only reason I can see for a DLGPROC to return an INT_PTR in the first place!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-935093">
				<div id="div-comment-935093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-935093">
			September 13, 2011 at 10:19 am</a>		</div>

		<p>Now reading the answers here and the online help, I think I&#39;ve understood it:</p>
<p>WM_NCCREATE Message: &quot;If the application returns FALSE, the CreateWindow or CreateWindowEx function will return a NULL handle.&quot;</p>
<p>WM_CREATE Message: &quot;If the application returns â€“1, the window is destroyed and the CreateWindowEx or CreateWindow function returns a NULL handle.&quot;</p>
<p>Raymonds &quot;Modality, part 3: The WM_QUIT message&quot;: &quot;The other important thing about modality is that a WM_QUIT message always breaks the modal loop. Remember this in your own modal loops! If ever you call &nbsp;the PeekMessage function or &nbsp;The [typo fixed 10:30am] GetMessage function and get a WM_QUIT message, you must not only exit your modal loop, but you must also re-generate the WM_QUIT message (via &nbsp;the PostQuitMessage message) so the next outer layer will see the WM_QUIT message and do its cleanup as well.&quot;</p>
<p>So I guess &quot;the window is destroyed&quot; in the second reference means (I think it can be more clearly written in the documentation) is &quot;the WM_DESTROY is called.&quot; I guess it&#39;s called because CreateWindow is itself called before the application even entered message loop, and CreateWindow somehow manages to call the WndProc with WM_CREATE before. So it probably also does other calls. And the call to WM_DESTROY of given WndProc in the given application finally performs: &quot;PostQuitMessage(0)&quot;</p>
<p>Now how is MessageBox modal loop is written? Based on the third (Raymond&#39;s) reference the modal loop should detect the WM_QUIT and finish itself. That means that the GetMessage or PeekMessage of that modal loop must be used with the second parameter NULL:</p>
<p>&quot;If hWnd is NULL, GetMessage retrieves messages for any window that belongs to the current thread, and any messages on the current thread&#39;s message queue whose hwnd value is NULL (see the MSG structure). Therefore if hWnd is NULL, both window messages and thread messages are processed.&quot;</p>
<p>Now in Raymond&#39;s example application at the moment MessageBox modal loop runs it sees that WM_QUIT and nicely closes itself.</p>
<p>Not obvious at all for uninitiated, I don&#39;t know where in the MSDN the exact &quot;protocol&quot; of calls to WndProc is documented (like CreateWindow calls that that and that, and all that without the queue) and where I&#39;d otherwise find the info from &quot;Modality, part 3: The WM_QUIT message&quot;</p>
<p>Again, it appears that Raymond provided more alone than the official documentation maintained for years (if it&#39;s not so I&#39;d appreciate pointers, thanks).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-935203">
				<div id="div-comment-935203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110912-00/?p=9673#comment-935203">
			September 13, 2011 at 11:56 pm</a>		</div>

		<p>It would be nice if there was a way for Windows to hint this stuff. You&#39;re in Visual Studio, you do something like this, then a tab on the output pops up like &quot;Hinta&quot; listing things that went strange but the dev might not notice.</p>
<p>In this case, it would say &quot;filename.c:37 &#8211; MessageBox called while quitting (WM_QUIT or PostQuitMessage called before this MessageBox). MessageBox not displayed. MessageBox contents: &#8230;&quot;</p>
<p>Because it&#39;s going to happen again and again.</p>
<p>And no, it only exists if enabled in the build. Call it &quot;Debugging Aide &#8211; helps solve common Windows problems.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

