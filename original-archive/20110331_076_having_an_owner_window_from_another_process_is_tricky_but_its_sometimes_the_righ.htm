<html>
<head>
<title>Having an owner window from another process is tricky, but it's sometimes the right thing to do</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Having an owner window from another process is tricky, but it&#8217;s sometimes the right thing to do</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 31, 2011 / year-entry #77</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110331-00/?p=11083</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer had a main program (let's call it A) and a helper program (let's call it B), and the customer wanted and wanted B to act like a modal dialog relative to A. When B is launched, we disable A's window and then call SetForegroundWindow(hwndB) to simulate a modal dialog. How do we make sure...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer had a main program (let's call it A) and a helper program (let's call it B), and the customer wanted and wanted B to act like a modal dialog relative to A.</p>
<blockquote class="q"><p>  When B is launched, we disable A's&nbsp;window and then call <code>SetForegroundWindow(hwndB)</code> to simulate a modal dialog. How do we make sure that focus goes to B's&nbsp;window and not A's? We've found that if the user clicks on the (now-disabled) window from the process&nbsp;A, then window&nbsp;B loses focus. This is not the behavior from regular modal windows however: For normal modal windows, clicking on the disabled owner activates the modal popup. </p>
<p> One idea is to watch for <code>WM_ACTIVATE(FALSE)</code> notifications on <code>hwndSecondProcess</code>, and if the window that took focus from us is the one from the first process, then take it back with <coe>SetForegroundWindow(hwndSecondProcess). </coe></p>
<p> But then we wondered, since we disabled window&nbsp;A, will it even get the normal activation message? </p>
</blockquote>
<p> Since the window is disabled, it will not receive activation messages because disabled windows cannot be activated. So no, this solution won't work. </p>
<p> The subject line of the question, however, gave the answer without even realizing it. The subject was <i>Out-of-proc pseudo-parent/child window relationship</i>. (Well, okay, the subject line <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/03/15/9978691.aspx"> confused parent/child with owner/owned</a>, but that's a common source of sloppiness when talking about the relationship among windows.) </p>
<p> Instead of having a pseudo-owner/owned window relationship, just have a real one. Why fake it when you can get the real thing? </p>
<p> When you call <code>DialogBox</code> in process&nbsp;B, pass <code>hwndA</code> as the owner window. Now the two windows have a genuine owner/owned relationship, along with the standard behaviors that come with it. It's legal to have an owner/owned relationship that crosses process boundaries. Note that when you do this, it <a href="https://channel9.msdn.com/posts/scobleizer/Raymond-Chen-PDC-05-Talk-Five-Things-Every-Win32-Programmer-Needs-to-Know/"> attaches the two threads' input queues</a> so you have to be careful if both windows process input at the same time. Fortunately, in the modal dialog case, only one of the windows accepts input at a time, so the scariest part of attached input queues doesn't apply. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-904483">
				<div id="div-comment-904483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matthew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110331-00/?p=11083#comment-904483">
			March 31, 2011 at 7:37 am</a>		</div>

		<p>I&#39;d love to hear more about how to setup a cross-process owner/owned relationship. In particular, how do you build something like IE8/9 where every tab gets it&#39;s own process?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-904493">
				<div id="div-comment-904493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110331-00/?p=11083#comment-904493">
			March 31, 2011 at 7:46 am</a>		</div>

		<p>This bit me in the ass once when I tried to host a .net window as a child window, .net has it&#39;s own focus/activewindow handling that prevented me from doing what I wanted&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-904503">
				<div id="div-comment-904503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110331-00/?p=11083#comment-904503">
			March 31, 2011 at 7:54 am</a>		</div>

		<p>@Matthew I understand how Google Chrome does it is that the main process owns all the UI and the helper processes just paint to it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-904543">
				<div id="div-comment-904543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110331-00/?p=11083#comment-904543">
			March 31, 2011 at 11:09 am</a>		</div>

		<p>@The mazzter: Correct. The screensaver preview however does things differently.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-904863">
				<div id="div-comment-904863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110331-00/?p=11083#comment-904863">
			April 1, 2011 at 2:14 pm</a>		</div>

		<p>Somehow this even works when child process is impersonating different user!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-904913">
				<div id="div-comment-904913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110331-00/?p=11083#comment-904913">
			April 1, 2011 at 8:16 pm</a>		</div>

		<p>I have done this, and yes it was the right thing to do. I&#39;m glad I wasn&#39;t abusing an undocumented feature because it did exactly what I wanted with no unintended consequences.</p>
<p>Incidentally parent/child works just as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

