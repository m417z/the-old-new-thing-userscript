<html>
<head>
<title>Dragging a shell object, part 5: Making somebody else do the heavy lifting</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Dragging a shell object, part 5: Making somebody else do the heavy lifting</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 10, 2004 / year-entry #418</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20041210-00/?p=37063</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Creating that drag image was a bit of work. Fortunately, the listview control is willing to do some of the work for you. Throw away the OnLButtonDown function (and the HANDLE_MESSAGE that goes with it). Instead, we'll make the listview do all our presentation for us. BOOL OnCreate(HWND hwnd, LPCREATESTRUCT lpcs) { g_hwndChild = CreateWindow(WC_LISTVIEW,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Creating that drag image was a bit of work.
Fortunately, the listview control is willing to do some
of the work for you.
</p>
<p>
Throw away the <code>OnLButtonDown</code> function
(and the <code>HANDLE_MESSAGE</code> that goes with it).
Instead, we'll make the listview do all our presentation
for us.
</p>
<pre>
BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
  <font COLOR=blue>g_hwndChild = CreateWindow(WC_LISTVIEW, NULL,
                             WS_CHILD | WS_VISIBLE | LVS_ICON |
                             LVS_SHAREIMAGELISTS, // flag added 13 Dec
                             0, 0, 0, 0,
                             hwnd, (HMENU)1, g_hinst, 0);
  if (!g_hwndChild) return FALSE;

  SHFILEINFOW sfi;
  HIMAGELIST himl = (HIMAGELIST)
    SHGetFileInfoW(g_pszTarget, 0, &amp;sfi, sizeof(sfi),
                   SHGFI_SYSICONINDEX |
                   SHGFI_DISPLAYNAME | SHGFI_LARGEICON);
  if (!himl) return FALSE;

  ListView_SetImageList(g_hwndChild, himl, LVSIL_NORMAL);

  LVITEM item;
  item.iSubItem = 0;
  item.mask = LVIF_TEXT | LVIF_IMAGE;
  item.pszText = sfi.szDisplayName;
  item.iImage = sfi.iIcon;
  if (ListView_InsertItem(g_hwndChild, &amp;item) &lt; 0)
    return FALSE;</font>

  return TRUE;
}
</pre>
<p>
We now let the listview control worry about the icon and its
text and all the other UI that goes along with it.
And we can make the listview worry about the drag image, too.
</p>
<pre>
<font COLOR=blue>void OnBeginDrag(HWND hwnd, NMLISTVIEW *plv)
{
  IDataObject *pdto;
  if (SUCCEEDED(GetUIObjectOfFile(hwnd, g_pszTarget,
                   IID_IDataObject, (void**)&amp;pdto))) {
    IDragSourceHelper *pdsh;
    if (SUCCEEDED(CoCreateInstance(CLSID_DragDropHelper, NULL,
                    CLSCTX_ALL, IID_IDragSourceHelper, (void**)&amp;pdsh))) {
      pdsh-&gt;InitializeFromWindow(g_hwndChild, &amp;plv-&gt;ptAction, pdto);
      pdsh-&gt;Release();
    }

    IDropSource *pds = new CDropSource();
    if (pds) {
      DWORD dwEffect;
      if (DoDragDrop(pdto, pds, DROPEFFECT_MOVE |
                     DROPEFFECT_COPY | DROPEFFECT_LINK,
                     &amp;dwEffect) == DRAGDROP_S_DROP &amp;&amp;
          (dwEffect &amp; DROPEFFECT_MOVE)) {
        DeleteFileW(g_pszTarget);
      }
      pds-&gt;Release();
    }
    pdto-&gt;Release();
  }
}

LRESULT OnNotify(HWND hwnd, int idCtrl, NMHDR *pnm)
{
  if (idCtrl == 1) {
    NMLISTVIEW *plv;
    switch (pnm-&gt;code) {
    case LVN_BEGINDRAG:
      plv = (NMLISTVIEW*)pnm;
      OnBeginDrag(hwnd, plv);
      break;
    }
  }
  return 0;
}

    HANDLE_MSG(hwnd, WM_NOTIFY, OnNotify);</font>
</pre>
<p>
Instead of detecting the drag operation, we let the listview do it
and just wait for the <code>LVN_BEGINDRAG</code> notification,
at which point we get the data object for the file we want to drag
and ask the listview to create the drag image by passing its window
handle to
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/idragsourcehelper/InitializeFromWindow.asp">
the <code>IDragSourceHelper::InitializeFromWindow</code> method</a>.
</p>
<p>
The listview control does the work of generating the drag image
and setting it into the data object.  In our specific case, it
may have been a toss-up which way is easier, but if you enable
multiple-selection capability in the listview, using
the <code>IDragSourceHelper::InitializeFromWindow</code> method</a>
is a major savings because the listview will do the work of
generating the radial gradient alpha channel that you see when
dragging multiple files in Explorer.
</p>
<p>
You may notice some color fringes around the icons generated by
the listview.  That's because we're using version&nbsp;5 of the
common controls, which doesn't support alpha channels very well.
If you
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/commctls/userex/cookbook.asp">
switch to version&nbsp;6</a>,
you'll find that the fringes are gone and the icon looks a lot
prettier.
</p>
<p>
That's all for now on the subject of initiating a drag/drop operation.
Back to one-day topics for a while.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-234053">
				<div id="div-comment-234053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mfink</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041210-00/?p=37063#comment-234053">
			December 12, 2004 at 11:58 pm</a>		</div>

		<p>According to the SHGetFileInfo() and ListView_SetImageList() function documentation on MSDN, don&#8217;t you have to set the LVS_SHAREIMAGELISTS style for this list control? I understand that the system image list is destroyed at exit anyway, but it would be cleaner, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-234093">
				<div id="div-comment-234093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041210-00/?p=37063#comment-234093">
			December 13, 2004 at 8:58 am</a>		</div>

		<p>Excellent point. Fixed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-234183">
				<div id="div-comment-234183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeproject.com/script/articles/list_articles.asp?userid=152' rel='external nofollow' class='url'>Mike Dunn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041210-00/?p=37063#comment-234183">
			December 13, 2004 at 10:18 am</a>		</div>

		<p>And actually, you *must* use LVS_SHAREIMAGELISTS on 9x, because SHGetFileInfo() returns a handle to the real system image list, and you don&#8217;t want to destroy that. On NT, each process gets a copy, so destroying it isn&#8217;t as harmful.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

