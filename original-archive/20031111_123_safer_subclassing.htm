<html>
<head>
<title>Safer subclassing</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Safer subclassing</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 11, 2003 / year-entry #124</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20031111-00/?p=41883</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Answer to yesterday's homework assignment, with discussion.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
        So what was wrong with <a href="http://blogs.gotdotnet.com/raymondc/PermaLink.aspx/45113814-5b31-4f47-a1c5-6013350df2d2">our
        little subclassing sketch</a>? 
    </p>
<p>
        Most people figured this out. 
    </p>
<p>
        Consider what would happen if somebody else had subclassed the window during the "...
        do stuff ..." section. When we unsubclassed the window, we would have removed <strong>two</strong> subclasses,
        the one we installed, and the one that was installed after us. If the other subclass
        allocated memory (which is very common), then that memory got leaked, in addition
        to the subclass failing to do whatever it was trying to do. 
    </p>
<p>
        Do not assume that subclasses are added and removed in a purely stack-like manner.
        If you want to unsubclass and find that you are not the window procedure at the top
        of the chain <strong>you cannot safely unsubclass</strong>. You will have to leave
        your subclass attached until it becomes safe to unsubclass. Until that time, you just
        have to keep passing the messages through to the previous procedure. 
    </p>
<p>
        This is quite a cumbersome process, so the shell team wrote some helper functions
        to do all this for you. The <a href="http://msdn.microsoft.com/library/en-us/shellcc/platform/commctls/userex/subclassingcontrols.asp">SetWindowSubclass
        function</a> does all the grunt work of installing a subclass procedure, remembering
        the previous one, and passing reference data to the subclass procedure you provide.
        You use the <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/shell/reference/functions/defsubclassproc.asp">DefSubclassProc
        function</a> to forward the message to the previous subclass procedure, and when you're
        done, you use the <a href="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/functions/removewindowsubclass.asp">RemoveWindowSubclass
        function</a> to remove yourself from the chain. RemoveWindowSubclass does all the
        work to do the right thing if you are not the window procedure at the top of the chain. 
    </p>
<p>
        One gotcha that isn't explained clearly in the documentation is that <strong>you must
        remove your window subclass before the window being subclassed is destroyed</strong>.
        This is typically done either by removing the subclass once your temporary need has
        passed, or if you are installing a permanent subclass, by inserting a call to RemoveWindowSubclass
        inside the subclass procedure itself: 
    </p>
<pre>...
case WM_NCDESTROY:
  RemoveWindowSubclass(hwnd, thisfunctionname, uIdSubclass);
  return DefSubclassProc(...);
</pre>
<p>
        One comment expressed concern that a message could be sent between the call to <code>SubclassWindow</code> and
        the store of the previous window procedure into the <code>OldWndProc</code> variable.
        This is actually a safe operation provided that you are doing the work from the thread
        that owns the window you are subclassing. Remember that message delivery occurs only
        when the thread is in a receiving state, such as when it calls <code>GetMessage</code> or <code>PeekMessage</code>.
        If somebody sends a message when the thread is not in a receiving state, the message
        merely waits until the thread finally calls <code>GetMessage</code> (for example)
        before being delivered. Since we don't make any message-receiving function calls between
        the <code>SubclassWindow</code> and the store into <code>OldWndProc</code>, there
        is no risk of an untimely message arriving before the store to <code>OldWndProc</code> has
        occurred. 
    </p>
<p>    There was another comment that claimed that the <code>SubclassWindow</code> macro
    is undocumented. Actually this macro is so old that <a href="http://community.borland.com/article/0,1410,17542,00.html">the
    documentation for it has faded almost into obscurity</a>. (You forced my hand;
<a HREF="/oldnewthing/archive/2003/11/12/55659.aspx">
I wasn't
    going to dig into this header file until tomorrow</a>!) 
</body></p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-131083">
				<div id="div-comment-131083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gene Hamilton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031111-00/?p=41883#comment-131083">
			November 11, 2003 at 12:59 pm</a>		</div>

		<p>Someone also mentioned the use of SetWindowsHook in the comments of the previous blog entry.  Isn&#8217;t that a better alternative to SubclassWindow altogether?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-131093">
				<div id="div-comment-131093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031111-00/?p=41883#comment-131093">
			November 11, 2003 at 2:14 pm</a>		</div>

		<p>Hooks are for a different problem. Hooks are very expensive from a system performance standpoint, so using them as an alternative to subclassing is way overkill. Like using liquid oxygen to start a barbecue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-131103">
				<div id="div-comment-131103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrei</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031111-00/?p=41883#comment-131103">
			November 11, 2003 at 5:27 pm</a>		</div>

		<p>Raymond, could you explain what happens when someone neglects to unsubclass a window and it gets destroyed?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-131113">
				<div id="div-comment-131113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031111-00/?p=41883#comment-131113">
			November 12, 2003 at 2:45 am</a>		</div>

		<p>If you subclassed with the SetWindowSubclass function, then you need to unsubclass to clean up the bookkeeping that SetWindowSubclass created for you. If you are running a chk build, you will break into the debugger with an error if SetWindowSubclass detects that a subclass failed to clean itself up.</p>
<p>If you subclassed manually via SubclassWindow then you&#8217;re on your own to to clean up whatever bookkeeping you have attached to the subclass. If you have no bookkeeping that needs to be cleaned up, then you&#8217;re home free.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-253113">
				<div id="div-comment-253113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2005/02/04/367423.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031111-00/?p=41883#comment-253113">
			February 4, 2005 at 5:06 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

