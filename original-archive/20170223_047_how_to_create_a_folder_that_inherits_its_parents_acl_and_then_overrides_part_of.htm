<html>
<head>
<title>How to create a folder that inherits its parent's ACL, and then overrides part of it</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How to create a folder that inherits its parent&#8217;s ACL, and then overrides part of it</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 23, 2017 / year-entry #48</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Creating it with a custom security descriptor isn't working.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer wants to create a folder that inherits its parent's ACL
but then overrides part of it.
Specifically, the customer wanted to disallow the creation of subfolders.
The customer reported that when they used the
<code>SH&shy;Create&shy;Directory</code> function to create the folder,
the folder did not inherit any ACLs at all from its parent.
The only thing it got was the "deny creation of subfolders" part.
</p>
<p>
The customer provided this sample code to demonstrate what they were doing.
</p>
<pre>
int main()
{
  PSECURITY_DESCRIPTOR pSD;
  ULONG ulSDDL;
  LPTSTR pszPath = L"C:\\my\\test\\directory";
  LPTSTR pszDacl = L"D:(D;;0x4;;;WD)";

  if (ConvertStringSecurityDescriptorToSecurityDescriptor(
    pszDacl, SDDL_REVISION_1, &amp;pSD, &amp;ulSDDL))
  {
    wprintf(L"Created security descriptor\n");
    SECURITY_ATTRIBUTES sa;
    sa.lpSecurityDescriptor = pSD;
    sa.nLength = sizeof(sa);
    sa.bInheritHandle = TRUE;
    if (SUCCEEDED(SHCreateDirectoryEx(nullptr, pszPath, &amp;sa)))
    {
        wprintf(L"Created folder %s\n", pszPath);
    }
  }
  return 0;
}
</pre>
<p>
Notice the importance of
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20131018-00/?p=2893">
reduction</a>,
simplifying the problem to the smallest program that still demonstrates
the issue.
This boils the problem down to its essence,
thereby allowing the development team to focus on the issue
and not have to wade through (and possibly debug) unrelated code.
Reduction is also a useful exercise on the part of the person
reporting the problem,
in order to verify that the problem really is what you think it is,
rather than being a side effect of some other part of the program.
</p>
<p>
The customer added,
"The ACL we are using
<code>D:(D;;0x4;;;WD)</code>
denies folder creation to everyone.
We tried adding flags like
<code>P</code>,
<code>AI</code>,
<code>OICI</code>,
<i>etc</i>.,
but none of them seem to work."
</p>
<p>
The shell takes the security descriptor passed to the
<code>SH&shy;Create&shy;Directory&shy;Ex</code> function
and passes it through to the
<code>Create&shy;Directory</code> function,
so any issues you have with the security descriptor
are really issues with the
<code>Create&shy;Directory</code> function.
The shell is just the middle man.
</p>
<p>
But even though this wasn't really the expertise of the shell
team, we were able to figure out the problem.
</p>
<p>
First off, we have a red herring:
The
<code>bInherit&shy;Handle</code> member controls handle
inheritance, not ACL inheritance.
Setting it to <code>TRUE</code> causes the handle to be
inherited by child processes.
But that has no effect on the ACL.
And since
the
<code>Create&shy;Directory</code> function doesn't return
a handle at all,
fiddling with the
<code>bInherit&shy;Handle</code> means nothing since there
is no handle in the first place.
It's a double red herring.
</p>
<p>
When you specify an explicit security descriptor to the
<code>Create&shy;Directory</code> function,
that establishes the security descriptor on the newly-created object.
There is no inheritance from the parent.
Inheritance rules are applied at creation
only when you create the object
with the default security attributes:&sup1;
</p>
<blockquote CLASS="q"><p>
<a HREF="https://msdn.microsoft.com/library/windows/desktop/aa363855(v=vs.85).aspx">
If <i>lpSecurityAttributes</i> is <b>NULL</b></a>,
the directory gets a default security descriptor.
The ACLs in the default security descriptor for a directory are inherited from its parent directory.
</p>
</blockquote>
<p>
Passing an explicit security descriptor
overrides the default behvaior.
</p>
<p>
If you want a blend of default behavior and custom behavior,
then you have a few options available.
</p>
<p>
One option is to read the security descriptor of the parent object
and propagate the inheritable ACEs to the child
in the appropriate manner.
This is a
complicated endeavor
and probably is best left to the experts.
It's not a simple matter of copying them from the parent
to the child.
You also have to 
to adapt the ACEs based on flags like
"inherit only" and "container inherit".
</p>
<p>
The second option is to create the directory without an explicit
security descriptor and let the experts create it with the default
security descriptor,
which takes into account all the inheritance rules.
And then modify the security descriptor post-creation to include
the new ACE you want.
Fortunately,
<a HREF="http://msdn.microsoft.com/library/aa379283(v=vs.85).aspx">
MSDN has sample code</a>
for how to add an ACE to an existing security descriptor.
</p>
<p>
The customer 
reported that they adapted the code from MSDN and it worked perfectly.
</p>
<p>
&sup1;
Inheritance rules are also applied when you use functions
like
<a HREF="https://msdn.microsoft.com/library/windows/desktop/aa376326(v=vs.85).aspx">
<code>Set&shy;Named&shy;Security&shy;Info</code> and
<code>Set&shy;Security&shy;Info</code></a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-ipoverscsi even thread-even depth-1 parent" id="comment-1285885">
				<div id="div-comment-1285885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ipoverscsi' rel='external nofollow' class='url'>ipoverscsi</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545#comment-1285885">
			February 23, 2017 at 7:37 am</a>		</div>

		<p>While the idea of creating the folder and then modifying the permissions is certainly the easier option, it does open up a race condition. It similar to the problem with using sequence tmpnam() -&gt; open() in C/C++ and why they now suggest using tmpfile(). </p>
<p>I wish the Windows security model were easier to use as the first option would avoid the race condition. But as they say &#8220;A wish in one hand and $10 in the other will get you a Starbucks moca frappachino&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1285895">
				<div id="div-comment-1285895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545#comment-1285895">
			February 23, 2017 at 8:10 am</a>		</div>

		<p>You can avoid the race condition: create a first dummy directory using the process Raymond outlined. Then use the ACL of that dumym directory to create the real directory you wanted and delete the dummy.</p>
<p>I wonder if there might be corner cases where the ACL of the dummy cannot be directly mimicked for the real directory?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1286627">
				<div id="div-comment-1286627" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MarcK4096</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545#comment-1286627">
			February 28, 2017 at 7:34 am</a>		</div>

		<p>Creating a dummy folder and deleting it later opens up the possibility that AV will interfere and the delete will fail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1287445">
				<div id="div-comment-1287445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545#comment-1287445">
			March 5, 2017 at 3:29 pm</a>		</div>

		<p>It would probably be preferable to create the real directory immediately, but with an empty ACL, blocking all access.  You can then assign the permissions you want using SetSecurityInfo with the UNPROTECTED_DACL_SECURITY_INFORMATION option.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1285905">
				<div id="div-comment-1285905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545#comment-1285905">
			February 23, 2017 at 8:30 am</a>		</div>

		<p>The trick here is to not use the shell functions and just read the ACL of the parent.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong odd alt depth-3" id="comment-1286015">
				<div id="div-comment-1286015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545#comment-1286015">
			February 23, 2017 at 6:47 pm</a>		</div>

		<p>Reading ACL of parent and fiddle it yourself is error prone. In addition to &#8220;inherit only&#8221; and &#8220;container inherit&#8221;, if there are &#8220;explicit set on this object&#8221; rule on the parent ACL, copying it to child directly means if users/administrator somehow want to remove that rule from the parent folder, users will still be able to access this folder using this rule.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even depth-2 parent" id="comment-1285916">
				<div id="div-comment-1285916" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545#comment-1285916">
			February 23, 2017 at 10:19 am</a>		</div>

		<p>The NT API lets you solve this without a race in multiple ways:</p>
<p>A) Use NtCreateFile to create the directory because it gives you a handle to the directory. Then modify the ACL.</p>
<p>B) Call CreateFile on the parent directory to get its handle. Get the ACL from the handle and then use NtCreateFile to create the new directory relative to the parents handle.</p>
<p>There is still a race on the ACL itself of course but without functions that manipulate ACLs while holding a lock on filesystem there is not much you can do about that.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-3 parent" id="comment-1286035">
				<div id="div-comment-1286035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545#comment-1286035">
			February 23, 2017 at 6:56 pm</a>		</div>

		<p>&#8230;and if the NT API is unacceptable you can use transactions instead (but they are deprecated).</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1286725">
				<div id="div-comment-1286725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545#comment-1286725">
			February 28, 2017 at 1:40 pm</a>		</div>

		<p>Too bad that feature would have had to wait a decade to get any traction. It was a good idea. It was abandoned before most people who would use it could decide to use it.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1286005">
				<div id="div-comment-1286005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545#comment-1286005">
			February 23, 2017 at 5:24 pm</a>		</div>

		<p>I don&#8217;t think there&#8217;s a race condition here.  Any attackers that could create a subdirectory in the newly created folder before the security was changed could also create subdirectories in the parent folder, i.e., they could have created the folder and any contents they wanted ahead of time, no need to wait for the posted code to run, hence no race.</p>
<p>(For that matter, the problem with tmpnam isn&#8217;t the race condition per se, it is that UNIX traditionally uses a shared temporary directory.)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks even depth-3 parent" id="comment-1286025">
				<div id="div-comment-1286025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545#comment-1286025">
			February 23, 2017 at 6:52 pm</a>		</div>

		<p>The race is still there even though you are probably the only person on the racetrack. It is not even all about an attacker even though we are talking about locking down ACLs. A race in the filesystem also affects general robustness and should be avoided if it is possible to perform the multi-step operation on a handle rather than a path.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1286045">
				<div id="div-comment-1286045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545#comment-1286045">
			February 23, 2017 at 7:51 pm</a>		</div>

		<p>Can you provide an example of how robustness could be affected?  I don&#8217;t see it.  (I&#8217;m not sure you&#8217;re using the word &#8220;race&#8221; in the sense I&#8217;m familiar with.  How can there be a race when there is only one thread acting on the object in question?)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1286055">
				<div id="div-comment-1286055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545#comment-1286055">
			February 23, 2017 at 8:23 pm</a>		</div>

		<p>The assumption is that your program only works properly if there are no subfolders &#8211; otherwise you wouldn&#8217;t care.</p>
<p>Your program creates the folder, then its timeslice ends<br />
Another application creates a subfolder.<br />
Your timeslice starts again, the ACLs are set.</p>
<p>Now your program does not work properly, because there is a subfolder. Your assumption is broken.</p>
<p>The other program may not work properly as it could create a subfolder before and now can&#8217;t. The subfolder may also have a different set of ACLs, which may lead to further issues.</p>
<p>ACLs are quite nasty tbh. An extremely powerful feature that is very hard to understand &#8211; perhaps something for future blog posts?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1286076">
				<div id="div-comment-1286076" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545#comment-1286076">
			February 24, 2017 at 2:49 am</a>		</div>

		<p>@Richard, as I said above, that&#8217;s not really a race condition, because even if your code creates the folder with the correct permissions atomically, the other application could have created both the folder AND the subfolder before you even got started.   skSdnW seemed to be thinking of something else.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-4 parent" id="comment-1286645">
				<div id="div-comment-1286645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MarcK4096</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545#comment-1286645">
			February 28, 2017 at 7:40 am</a>		</div>

		<p>You might think you are the only one in the race, but AV is usually right there with you ready to get in the way.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1286735">
				<div id="div-comment-1286735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545#comment-1286735">
			February 28, 2017 at 2:58 pm</a>		</div>

		<p>True, but it had better not be creating new files and folders in arbitrary locations, and even if it is, setting security permissions isn&#8217;t likely to stop it.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1286165">
				<div id="div-comment-1286165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545#comment-1286165">
			February 24, 2017 at 9:19 am</a>		</div>

		<p>There used to be an application that thought that when moving a file from one directory to another that it would be a good idea to reset all the permissions to the new inherited permissions. Fortunately that was an easier fix (read the old explicit permissions first).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1286405">
				<div id="div-comment-1286405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170223-00/?p=95545#comment-1286405">
			February 26, 2017 at 3:58 am</a>		</div>

		<p>Pity that there is no function to ask the experts to do their thing, and only their thing, without the folder creation.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

