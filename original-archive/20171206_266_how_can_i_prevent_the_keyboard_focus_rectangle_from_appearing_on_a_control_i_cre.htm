<html>
<head>
<title>How can I prevent the keyboard focus rectangle from appearing on a control I created?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I prevent the keyboard focus rectangle from appearing on a control I created?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 6, 2017 / year-entry #267</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171206-00/?p=97526</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">You can lie to the control.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer wanted to prevent keyboard focus rectangles from appearing
on controls they have created, like button controls.
Presumably the reason is that they have customized the control's
appearance to the point where the focus rectangle is no longer
necessary.
Drawing a focus rectangle in addition to the customized focus
appearance would be redundant.
</p>
<p>
Recall how the focus indicator is managed:
The system sends
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20130516-00/?p=4343">
<code>WM_</code><code>UPDATE&shy;UI&shy;STATE</code> messages</a>
to each control to tell it to alter its appearance and either add or remove
keyboard focus and accelerator indicators.
</p>
<p>
Therefore,
if you don't want a control to show keyboard focus indicators,
you can intercept this message before it reaches the control and
prevent it from learning about the change in state.
</p>
<pre>
#define STRICT
#include &lt;windows.h&gt;
#include &lt;windowsx.h&gt;
#include &lt;commctrl.h&gt;

LRESULT CALLBACK AlwaysHideFocusRectangleSubclassProc(
    HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam,
    UINT_PTR idSubclass, DWORD_PTR dwRefData)
{
 switch (uMsg) {
 case WM_NCDESTROY:
  <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20031111-00/?p=41883/">RemoveWindowSubclass</a>(hwnd,
   AlwaysHideFocusRectangleSubclassProc, idSubclass);
 break;

 case WM_UPDATEUISTATE:
  // do not let them modify UISF_HIDEFOCUS
  wParam &amp;= ~MAKELONG(0, UISF_HIDEFOCUS);
  break;
 }
 return DefSubclassProc(hwnd, uMsg, wParam, lParam);
}

INT_PTR CALLBACK DialogProc(HWND hdlg, UINT uMsg,
    WPARAM wParam, LPARAM lParam)
{
 switch (uMsg) {
 case WM_INITDIALOG:
  SendDlgItemMessage(hdlg, IDCANCEL, WM_UPDATEUISTATE,
    MAKELONG(UIS_SET, UISF_HIDEFOCUS), 0);
  SetWindowSubclass(GetDlgItem(hdlg, IDCANCEL),
    AlwaysHideFocusRectangleSubclassProc, 0, 0);
  return TRUE;

  case WM_COMMAND:
   if (GET_WM_COMMAND_ID(wParam, lParam) == IDCANCEL) {
    EndDialog(hdlg, 0);
   }
   break;
  }
  return FALSE;
}

int WINAPI WinMain(HINSTANCE hinst, HINSTANCE hinstPrev,
    LPSTR lpCmdLine, int nShowCmd)
{
 DialogBox(hinst, MAKEINTRESOURCE(1), nullptr, DialogProc);
 return 0;
}

// resource file
#include &lt;windows.h&gt;
1 DIALOGEX 0, 0, 305, 280
STYLE DS_MODALFRAME | WS_POPUP | WS_CAPTION |WS_SYSMENU
BEGIN
  DEFPUSHBUTTON "Button &amp;1", IDOK, 0,0,50,50
  PUSHBUTTON "Button &amp;2", IDCANCEL, 0,60,50,50
END
</pre>
<p>
This sample program creates a dialog box with two buttons.
Button&nbsp;1 behaves normally, but we customized the
focus indicators for Button&nbsp;2:
</p>
<p>
When the dialog box initializes, we tell Button&nbsp;2
to set the <code>UISF_</code><code>HIDE&shy;FOCUS</code>
flag in its UI state.
Note that this creates a window tree with an inconsistent
UI state,
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20171122-00/?p=97445">
which would normally get you into trouble</a>,
but let's play this out.
</p>
<p>
After forcing the focus rectangle to be hidden on Button&nbsp;2,
we subclass the button,
and in our subclass function,
we clear the
<code>UISF_</code><code>HIDE&shy;FOCUS</code>
flag when we receive
the <code>WM_</code><code>UPDATE&shy;UI&shy;STATE</code> message,
which blocks all attempts to initialize, set, or clear that state.
This means that the focus rectangle will remain hidden on Button&nbsp;2.
</p>
<p>
When you run this program,
you'll see that the focus rectangle won't appear on Button&nbsp;2
even if it is enabled on Button&nbsp;1.
</p>
<p>
Notice that we did not block the
<code>WM_</code><code>CHANGE&shy;UI&shy;STATE</code> message.
This means that if focus is on Button&nbsp;2 and
the user hits the <kbd>Tab</kbd> key
to call up focus indicators,
the request to show indicators will still bubble out to the dialog
box root, and then propagate down to all the dialog box controls
as a
<code>WM_</code><code>UPDATE&shy;UI&shy;STATE</code> message.
Button&nbsp;1 will honor the request, but
Button&nbsp;2 will ignore it.
This is probably the behavior the user wants:
They asked for focus indicators, so we will show focus indicators
in all the controls that wish to support them.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1317565">
				<div id="div-comment-1317565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171206-00/?p=97526#comment-1317565">
			December 6, 2017 at 7:58 am</a>		</div>

		<p>&#8220;we did not block the WM_CHANGE­UI­STATE message&#8230; the request to show indicators will still bubble out to the dialog box root&#8221;</p>
<p>But there&#8217;s still the system code that elides propagation if the requested state matches the current state.  That&#8217;s probably less of a problem for the focus rectangle (since focus is on one control at a time) than it would be for accelerator visibility, but it still seems like it should be addressed.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1317585">
				<div id="div-comment-1317585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171206-00/?p=97526#comment-1317585">
			December 6, 2017 at 9:02 pm</a>		</div>

		<p>Yes &#8211; it seems as if the request to show focus indicators will succeed, but a subsequent request (while focus is on Button 2) to hide them would not?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1317595">
				<div id="div-comment-1317595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171206-00/?p=97526#comment-1317595">
			December 6, 2017 at 11:06 pm</a>		</div>

		<p>SetWindowSubclass and  RemoveWindowSubclass are so much nicer than SetWindowLongPtr(hwndButton, GWLP_WNDPROC, &#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1317597">
				<div id="div-comment-1317597" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171206-00/?p=97526#comment-1317597">
			December 7, 2017 at 2:32 am</a>		</div>

		<p>The only form of customisation I know of is WM_DRAWITEM, which I had assumed was expected to handle all aspects of drawing the focus rectangle. Is that not the case?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

