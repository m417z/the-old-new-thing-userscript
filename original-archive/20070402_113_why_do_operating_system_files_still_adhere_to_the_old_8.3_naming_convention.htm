<html>
<head>
<title>Why do operating system files still adhere to the old 8.3 naming convention?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why do operating system files still adhere to the old 8.3 naming convention?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 2, 2007 / year-entry #114</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>44</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Commenter Brian Reiter asks a duplicate of a question that was already submitted to the Suggestion Box: Darren asks why operating system&dagger; files still (for the most part) adhere to the old 8.3 naming convention. There are a few reasons I can think of. I'm not saying that these are the reasons; I'm just brainstorming....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Commenter
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/04/12/574927.aspx#574976">
Brian Reiter</a>
asks a duplicate of a
question that was already submitted to the Suggestion Box:
<a HREF="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#416908">
Darren asks
why operating system&dagger; files still (for the most part)
adhere to the old 8.3 naming convention</a>.
</p>
<p>
There are a few reasons I can think of.
I'm not saying that these are <i>the</i> reasons;
I'm just brainstorming.
</p>
<p>
First, of course, the name of a DLL cannot change once it has been
chosen, because that would break programs which linked to that DLL
by its old name.
Windows&nbsp;95 did not require the system volume and user profile
volume to support long file names, although that was certainly the
case by default.
Companies which used
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/06/30/434209.aspx">
roaming profiles</a>
or
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/02/06/525700.aspx">
redirected folders</a>
may have had a heavy investment in servers which did not support
long file names.
Therefore, all system files on Windows&nbsp;95 had to conform to the
8.3 naming convention.
</p>
<p>
I believe that
Windows&nbsp;NT permitted the system volume to be a short-file-names-only
FAT partition as late as Windows&nbsp;2000.
Therefore, any DLL that existed in the Windows&nbsp;2000 era
had to conform to the 8.3 naming convention.
</p>
<p>
Starting in Windows&nbsp;XP, long file names became mandatory,
and a few system files
such as
<code>shellstyle.dll</code>
waded tentatively into the long file name world.
(The .NET Framework folks jumped in with both feet with their managed
DLLs, but notice that their unmanaged DLLs like
<code>mscoree.dll</code> still conform to 8.3.)
But the waters in this world can be treacherous for operating
system components.
</p>
<p>
First of all, you have to worry about the automatically-generated
short name.
Suppose the operating system setup program is copying the
<code>shellstyle.dll</code> file, but there is already a file
called <code>shellstuff.dll</code>.
The short name for <code>shellstuff.dll</code> will probably be
<code>SHELLS~1.DLL</code>,
and therefore the short name for
<code>shellstyle.dll</code> will likely be
<code>SHELLS~2.DLL</code>.
Now, this may not be a big deal, except that some programs
like to hard-code a file's short name.
(There are a lot of programs that assume that the Program Files
directory is C:\PROGRA~1, for example.)
</p>
<p>
Furthermore, you can create confusion if the same DLL is loaded
by both its short and long names, since the loader treats them as
distinct:
</p>
<pre>
#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;

int __cdecl main(int argc, char **argv)
{
 printf("%p\n", LoadLibrary("SHELLS~1.DLL"));
 printf("%p\n", LoadLibrary("SHELLSTYLE.DLL"));
 return 0;
}
</pre>
<p>
If you run this program, you will get something like this:
</p>
<pre>
6F2C0000
00340000
</pre>
<p>
Even though the two paths refer to the same DLL,
the loader treats them as different, and you end up with two
copies of the same DLL loaded into memory.
Now things get confusing, since you now have two sets of
global variables, and if two components both use
<code>SHELLSTYLE.DLL</code> but one used the short name and
the other the long name, things get exciting when those two
components try to talk about what they think is the same thing.
</p>
<p>
It's like that time when I was a child and our family
took a trip to Disneyland.
Our parents put my brother and me on the gondola ride,
and upon arrival at the other end, we were to go to the
Autopia ride which was right next door.
The plan was that our parents would meet us at the exit to
Autopia.
When my brother and I exited Autopia, we expected our parents to
be waiting there for us, but they were nowhere to be seen.
Sticking to the plan, we waited patiently for our parents to arrive.
We sat there for what seemed like two hours
(but which was probably much less),
until eventually
we decided that my brother would stay put and I would go looking around,
at which point it didn't take long for me to find my father,
who was walking around looking for us.
</p>
<p>
What went wrong?
Well, the problem was that the map of Disneyland showed Autopia,
but what the map didn't say was that there were <strong>two</strong>
Autopia rides (and therefore two Autopia exits) right next to each other.
My brother and I were waiting by one exit, and our parents
were waiting by the other.
Each of us thought the other party was simply late.
</p>
<p>
Similarly, if a DLL goes by multiple names, you can end up with two
copies of it loaded into the process, with different components talking
about different copies, unaware that they are talking about different
things.
</p>
<p>
And one final reason I can think of for sticking with 8.3 file names
for operating system DLLs is simply,
"Well, that's the way we've always done it.
All the problems with 8.3 names are well-understood and under control.
If we switched to long file names, we'd end up discovering a whole
new set of problems.
Why mess with something that works if it isn't broken?"
</p>
<p>
Better the devil you know.
</p>
<p>
Exercise: Why is it okay for the .NET Framework to use long
file names for their managed DLLs?
</p>
<p>
<b>Nitpicker's Corner</b>
</p>
<p>
&dagger;s/operating system/Windows operating system/.
Apparently nothing is obvious from context any more.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (44)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-488263">
				<div id="div-comment-488263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darren Winsper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488263">
			April 2, 2007 at 10:31 am</a>		</div>

		<p>Because the .Net framework doesn&#8217;t use the filename as anything other than the name of the assembly file? &nbsp;That is, the name and version information about the assembly are stored inside the file and those values are used by the assembly loader rather than anything involving the file name.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488283">
				<div id="div-comment-488283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisV</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488283">
			April 2, 2007 at 11:36 am</a>		</div>

		<p>Exactly. .Net implements its own loader, so since assemblies are identified by strong name the system is not confused by filename aliasing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488293">
				<div id="div-comment-488293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488293">
			April 2, 2007 at 11:48 am</a>		</div>

		<p>Another extremely good reason for DLLs to conform to 8.3 notation is simply that developers tend to have to type the names of the DLLs they&#8217;re working on quite often. &nbsp;Shorter names are easier to type, so developers rarely want to make filename longer than 8 characters.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488303">
				<div id="div-comment-488303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dotnoted.spaces.live.com' rel='external nofollow' class='url'>codekaizen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488303">
			April 2, 2007 at 11:49 am</a>		</div>

		<p>Those comments are close. The .Net loader subsystem is Fusion, which uses manifests to load assemblies. Fusion is a Windows subsystem, and it can use the same technique to load unmanaged (win32) assemblies. The key is the manifest file (or resource), which explictly tells the loader which file to expect and load based on a combination of factors, including the file name, version and a signed hash of the file contents. This metadata/file content based approach enforces unique distinction of the assembly or module regardless of file name, but the file name is still part of it. If you change the file name of the assembly, Fusion just won&#8217;t load it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488353">
				<div id="div-comment-488353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488353">
			April 2, 2007 at 12:35 pm</a>		</div>

		<p>As recently as Win2K, I had to a post-install action to rename a file with a long filename.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488363">
				<div id="div-comment-488363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.daan.us/2007/04/02/windows-trapped-in-the-1970s/' rel='external nofollow' class='url'>windows: trapped in the 1970&#8217;s &middot; disordered thought processes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488363">
			April 2, 2007 at 12:58 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blog.daan.us/2007/04/02/windows-trapped-in-the-1970s/" rel="nofollow">http://blog.daan.us/2007/04/02/windows-trapped-in-the-1970s/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488393">
				<div id="div-comment-488393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blorq.com' rel='external nofollow' class='url'>Brad</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488393">
			April 2, 2007 at 1:19 pm</a>		</div>

		<p>This is the kind of muck that just needs to die already. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488423">
				<div id="div-comment-488423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">names chinese proverbs &raquo; Why do operating system files still adhere to the old 8.3 naming &#8230;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488423">
			April 2, 2007 at 1:59 pm</a>		</div>

		<p>PingBack from <a href="http://meaningofnamesblog.info/why-do-operating-system-files-still-adhere-to-the-old-83-naming/" rel="nofollow">http://meaningofnamesblog.info/why-do-operating-system-files-still-adhere-to-the-old-83-naming/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488433">
				<div id="div-comment-488433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">andy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488433">
			April 2, 2007 at 2:03 pm</a>		</div>

		<p>Reminds me of a blog article by Larry Osterman: &quot;What is AUDIODG.EXE?&quot; (<a rel="nofollow" target="_new" href="http://blogs.msdn.com/larryosterman/archive/2007/01/31/what-is-audiodg-exe.aspx" rel="nofollow">http://blogs.msdn.com/larryosterman/archive/2007/01/31/what-is-audiodg-exe.aspx</a>)</p>
<p>Seems like the installer technology (e.g. INF) can add some other reasons to the list as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488443">
				<div id="div-comment-488443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">names girl boy &raquo; Why do operating system files still adhere to the old 8.3 naming &#8230;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488443">
			April 2, 2007 at 2:05 pm</a>		</div>

		<p>PingBack from <a href="http://babiesblog.info/why-do-operating-system-files-still-adhere-to-the-old-83-naming/" rel="nofollow">http://babiesblog.info/why-do-operating-system-files-still-adhere-to-the-old-83-naming/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488453">
				<div id="div-comment-488453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Will</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488453">
			April 2, 2007 at 2:10 pm</a>		</div>

		<p>&quot;(There are a lot of programs that assume that the Program Files directory is C:PROGRA~1, for example.)&quot;</p>
<p>Unfortunately, using 8.3 aliases such as PROGRA~1 and MICROS~1 in the registry causes problems for backup programs which work on a file-by-file basis rather than imaging an entire filesystem.</p>
<p>e.g. Suppose I have the directories:</p>
<p>&quot;Microsoft Office&quot; (MICROS~1)</p>
<p>&quot;Microsoft Visual Studio&quot; (MICROS~2)</p>
<p>If I back up and restore my hard drive, there&#8217;s no guarantee that the new short names, which are ALWAYS auto-generated, will match the original one.</p>
<p>Obviously this will cause problems for anyone who referenced the generated short names.</p>
<p>Not a flame, just an observation (although I&#8217;m sure most people are aware of this.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488463">
				<div id="div-comment-488463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hair cuts &raquo; Why do operating system files still adhere to the old 8.3 naming &#8230;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488463">
			April 2, 2007 at 2:13 pm</a>		</div>

		<p>PingBack from <a href="http://shorthaircutsblog.info/why-do-operating-system-files-still-adhere-to-the-old-83-naming/" rel="nofollow">http://shorthaircutsblog.info/why-do-operating-system-files-still-adhere-to-the-old-83-naming/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488503">
				<div id="div-comment-488503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488503">
			April 2, 2007 at 2:42 pm</a>		</div>

		<p>That DLL alias is kinda weird. &nbsp;I assumed that the loader would de-alias DLLs when doing lookups just to avoid the problem mentioned. &nbsp;Does Windows do anything special to de-alias hard-links to DLLs on an NTFS partition?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488513">
				<div id="div-comment-488513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">wParam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488513">
			April 2, 2007 at 3:18 pm</a>		</div>

		<p>Ain&#8217;t it also because of the installation CD that the files are 8.3? The CDs use ISO 9660 Level 1 to ease copying.</p>
<p>BTW, Windows XP can be installed on a FAT32 filesystem too, so I guess you meant that Windows 2000 could also work on FAT16? (And that filesystem was made before Windows 95 so does not support LFN, and FAT32 does?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488533">
				<div id="div-comment-488533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pavel Lebedinsky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488533">
			April 2, 2007 at 3:24 pm</a>		</div>

		<p>My understanding is that at least on XP (and probably before that), the loader should correctly resolve short/long names and other aliases, so this shouldn&#8217;t result in the same dll being loaded more than once.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488563">
				<div id="div-comment-488563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488563">
			April 2, 2007 at 4:30 pm</a>		</div>

		<p>The thing I find most funny is how much Vista is reverting back to shorter names. &nbsp;I understand this is for practical reasons of only having MAX_PATH characters in a path in Win32, but C:Documents and Settings is now C:Users, and &quot;Application Data&quot; is now just AppData. &nbsp;&quot;Local Settings&quot; is now just Local (and LocalLow).</p>
<p>I really wish there were an easy solution to transition out of the 255 character path limitation. &nbsp;I rather liked the verbose names (except when I had to type them :) )</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-rosyna even thread-even depth-1" id="comment-488583">
				<div id="div-comment-488583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rosyna</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488583">
			April 2, 2007 at 4:55 pm</a>		</div>

		<p>Jack, I believe this was due to limits in MAX_PATH. Too many people were hitting it. There&#8217;s a series on it here <a rel="nofollow" target="_new" href="http://blogs.msdn.com/bclteam/archive/2007/03/26/long-paths-in-net-part-2-of-3-long-path-workarounds-kim-hamilton.aspx" rel="nofollow">http://blogs.msdn.com/bclteam/archive/2007/03/26/long-paths-in-net-part-2-of-3-long-path-workarounds-kim-hamilton.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488613">
				<div id="div-comment-488613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dotnoted.spaces.live.com' rel='external nofollow' class='url'>codekaizen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488613">
			April 2, 2007 at 5:10 pm</a>		</div>

		<p>@Jack Mathews</p>
<p>&quot;I really wish there were an easy solution to transition out of the 255 character path limitation.&quot;</p>
<p>Especially since it&#8217;s just a constant in WinDef.h and the underlying file system, NTFS, supports 32k characters for file names. Further, you can get around the MSCRT limitation (not sure how this plays with all Win32 APIs, though) by prefixing paths with &quot;\?&quot;&#8230; Just try that in .Net though: System.IO.Path will stop you cold.</p>
<p>(Even more) tangentially, interested readers can do their part on that last front. Here&#8217;s the Connect issue to vote to get rid of that limitation in .Net (although it is closed, you can still vote for it):</p>
<p><a rel="nofollow" target="_new" href="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=240812" rel="nofollow">https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=240812</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-xepol even thread-even depth-1" id="comment-488623">
				<div id="div-comment-488623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Xepol' rel='external nofollow' class='url'>Xepol</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488623">
			April 2, 2007 at 5:37 pm</a>		</div>

		<p>Of course, a small tweak to the loader could make it easily recognize that short and long filenames were equivalent, forever removing any concern and solving the problem once and for all.</p>
<p>ANd any app that decided to load MyCust~1.dll instead of MyCustom.dll and got MyCustardSkin.dll would have ONLY itself to blame for making stupid, unpredicable, asinine assumptions what are just as likely to go wrong in an 8.3 world anyways.</p>
<p>Change the loader to NOT load any dll with a short name where the short name and long name do not match and the rest of the arguments are just spurious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488633">
				<div id="div-comment-488633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488633">
			April 2, 2007 at 5:51 pm</a>		</div>

		<p>Incidentally, the FS has to generate short names for lfn files. &nbsp;If you don&#8217;t have a long name, though, you only need one $FILENAME metadata entry. &nbsp;This may or may not actually make a difference, but I speculate that it makes the directory indices smaller and more efficient for large directories of system files like System32.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488663">
				<div id="div-comment-488663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random Reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488663">
			April 2, 2007 at 6:24 pm</a>		</div>

		<p>Short filename generation is actually optional; I usually turn it off ASAP for my NTFS filesystems.</p>
<p>Unfortunately, I then discover just how many third-party installers for modern, up-to-date programs are completely retarded and require short filenames.</p>
<p>Will mentioned file-by-file backup programs: on XP/2003+ there&#8217;s actually an API for that, SetFileShortName(), so backup programs that are aware of the issue can handle it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488673">
				<div id="div-comment-488673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nobodyman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488673">
			April 2, 2007 at 6:26 pm</a>		</div>

		<p>&#8230; I wasn&#8217;t trying to claim that 8.3 filenames were the sole cause of Vista&#8217;s delays. &nbsp; I meant that last sentence &nbsp;to be more &quot;big-picture&quot; than it wound up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ryanbemrose even thread-even depth-1" id="comment-488543">
				<div id="div-comment-488543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Ryan+Bemrose' rel='external nofollow' class='url'>Ryan Bemrose</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488543">
			April 2, 2007 at 3:26 pm</a>		</div>

		<p>The situation with loading by long and short names may be more complicated than Raymond suggests. &nbsp;When working with databases on Win2k, I discovered exactly what he outlines here, that LoadLibrary() treats &quot;msjetoledb40.dll&quot; and &quot;msjeto~1.dll&quot; as distinct files, but FreeLibrary() treats them as the same.</p>
<p>int __cdecl main(int argc, char **argv)</p>
<p>{</p>
<p> HANDLE short = LoadLibrary(&quot;SHELLS~1.DLL&quot;);</p>
<p> HANDLE long = LoadLibrary(&quot;SHELLSTYLE.DLL&quot;);</p>
<p> FreeLibrary(long); // frees short version</p>
<p> FreeLibrary(short); // Double-free error</p>
<p> return 0;</p>
<p>}</p>
<p>I think I recall verifying this also happened on WinXP, though I can&#8217;t be sure. &nbsp;I never checked on Vista.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-larryosterman odd alt thread-odd thread-alt depth-1" id="comment-488703">
				<div id="div-comment-488703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Larry+Osterman+%5BMSFT%5D' rel='external nofollow' class='url'>Larry Osterman [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488703">
			April 2, 2007 at 11:47 pm</a>		</div>

		<p>Andy, actually the 8.3 naming of the new audio files was a historical accident &#8211; we deployed the new engine at a time when the system was transitioning between the Windows XP INF based installer technology and the Vista manifest based installer technology. &nbsp;During the period when we were creating the files, the system had to work in a wierd hybrid mode and it didn&#8217;t allow 8.3 names at that particular moment. &nbsp;Later on it didn&#8217;t matter, but it was too much work to change the names (the lead developer of the build team described our suggestion of changing the name as &quot;vanity&quot;, and he was right).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488713">
				<div id="div-comment-488713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.daan.us/2007/04/02/the-old-dilemma-legacy-support-vs-the-bleeding-edge/' rel='external nofollow' class='url'>the old dilemma: legacy support vs the bleeding edge &middot; disordered thought processes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488713">
			April 3, 2007 at 12:32 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blog.daan.us/2007/04/02/the-old-dilemma-legacy-support-vs-the-bleeding-edge/" rel="nofollow">http://blog.daan.us/2007/04/02/the-old-dilemma-legacy-support-vs-the-bleeding-edge/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488723">
				<div id="div-comment-488723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488723">
			April 3, 2007 at 12:36 am</a>		</div>

		<p>Speaking of multiple copies of the same DLL loading&#8230;</p>
<p>I&#8217;ve had my own DLL Hell with .NET. &nbsp;I have my binaries built in a tree structure like this:</p>
<p>Program.exe</p>
<p>PluginInterface.dll</p>
<p>PluginsPlugin1.dll</p>
<p>PluginsPlugin2.dll</p>
<p>etc.</p>
<p>The Program depends on PluginInterface, which contains interface IPlugin. &nbsp;Plugin# also depends on PluginInterface and creates classes that derive from IPlugin. &nbsp;Thus Program can load the Plugin# dlls, look for classes that inherit from IPlugin, and cast them to IPlugin and use them. &nbsp;Wala, a plugin system.</p>
<p>Now, because they all depend on PluginInterface, a copy of that DLL is put in  when I build Program, and an additional copy in Plugins whenever I build a Plugin (and I just now remembered how to suppress that, heh).</p>
<p>When Program.exe ran, .NET would load ProgramInterface.dll automatically since Program depended on it. &nbsp;Then my code would run and load each Plugin#.dll.</p>
<p>When each Plugin#.dll loaded, .NET would see it depended on PluginInterface&#8230; and then look for a DLL to load. &nbsp;Oddly enough, instead of using the current loaded assembly, it opts to use the PluginInterface.dll from the current directory! &nbsp;(I guess it finds it a closer match.)</p>
<p>Now Program checks Plugin#.dll for classes that implement the interface in Program&#8217;s PluginInterface.dll.</p>
<p>Except there are none&#8230; in any of the plugin DLLs. &nbsp;Oops. &nbsp;The Plugin&#8217;s classes derive from the PluginsPluginInterface.dll&#8217;s interfaces, which is a different assembly from PluginInterface.dll.</p>
<p>Visual Studio&#8217;s Debugger was useless in diagnosing what was wrong, since all the class names were EXACTLY THE SAME. &nbsp;I suppose if I had dug deep enough I would have figured out the classes were from different files, but I happened to figure it out before then in a spurt of inspiration&#8230; I deleted PluginsPluginInterface.dll. &nbsp;Then Program worked fine.</p>
<p>All the plugins use the already-loaded PluginInterface assembly if they can&#8217;t find one to load in the current directory and everything works fine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488733">
				<div id="div-comment-488733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488733">
			April 3, 2007 at 12:47 am</a>		</div>

		<p>Larry: There&#8217;s a fveupdate.exe in systemroot without a short file name too. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488743">
				<div id="div-comment-488743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dsn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488743">
			April 3, 2007 at 12:50 am</a>		</div>

		<p>Thanks Raymond &#8211; its exactly this kind of post that keeps us coming back to your blog. &nbsp;:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488643">
				<div id="div-comment-488643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nobodyman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488643">
			April 2, 2007 at 6:15 pm</a>		</div>

		<p>Twenty years ago, I’m sure that 8.3 was more than adequate to uniquely identify every file on an MSDOS system disk, and even be descriptive.</p>
<p>Fast forward to now. &nbsp;There are currently 2,294 files in my %windir%system32 directory. &nbsp;Plenty of room to uniquely identify them all, but I challenge you to tell me what “browselc.dll” does and how it differs from, say, “browsewm.dll”. &nbsp;Calling it a &quot;name&quot; is a bit of an overstatement now.</p>
<p>I agree that doing something different for its own sake is foolish. &nbsp;I’d even allow that it’s worth it to make sacrifices in the name of backwards compatibility. &nbsp;But all of these “Evil that you know” problems add up to the point to where you *must* break something in order to move forward. &nbsp; Otherwise you reach a point where new features die a death of a thousand cuts.</p>
<p>Windows Vista was delayed for years, most of its advertised features scrapped. &nbsp;Isn’t it a fair criticism to say that fear of “The devil that you don’t know” and this slavish pursuit of backwards compatibility is at least partly to blame? &nbsp;</p>
<p>Do you agree (at least at some level)? &nbsp;Do you feel that this issue was at the heart of Vista’s development woes?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488773">
				<div id="div-comment-488773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hayden</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488773">
			April 3, 2007 at 6:36 am</a>		</div>

		<p>And then there was LFNBACK.exe.</p>
<p>If you wanted to back up Win95 using a DOS or Win31 backup system, you could strip out the long file names into a data file. On restore, you could get them back.</p>
<p>Win95 would still start (just) if you had just LFNBACK&#8217;ed the system drive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488823">
				<div id="div-comment-488823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">redxii</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488823">
			April 3, 2007 at 11:40 am</a>		</div>

		<p>You can edit setupreg.hiv &amp; hivesys.inf on the XP setup CD to set ntfsdisable8dot3namecreation to 1 and after setup XP would be completely devoid of any 8.3 names. You&#8217;d be surprised how many programs won&#8217;t run correctly in this environment, and i&#8217;m not talking about legacy apps. Apps that used InstallShield won&#8217;t uninstall from Add/Remove, for example. Or Firefox.</p>
<p>I agree with nobodyman. With Vista, no one is obligated to fix their program to run under non-admin because Vista will automatically redirect files that write to HKEY_LOCAL_MACHINE and Program Files. And as if people or businesses are going to upgrade to Vista in order to run a program that was last updated for DOS 5.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488833">
				<div id="div-comment-488833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488833">
			April 3, 2007 at 11:47 am</a>		</div>

		<p>Dan: Wala? &nbsp;Is that the phonetic spelling of Voila (accent over the a)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-488963">
				<div id="div-comment-488963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian Oney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488963">
			April 3, 2007 at 5:29 pm</a>		</div>

		<p>I know one reason why a small set of system files had to be 8.3.</p>
<p>The NT Loader needs to launch the kernel with enough drivers to access the disk. The list would include the HAL, storage drivers, file system drivers, etc.</p>
<p>Think about that last one &#8211; how does the NT Loader locate the filesystem drivers without using the filesystem drivers? Well, NT&#8217;s loader solved this catch 22 by using miniature versions of the filesystem drivers built directly into it. An 8.3 issue arose here because one of those miniature filesystem libraries, the one for FAT, never had long filename support added. As a consequence, the kernel, HAL, and core drivers had to fit into 8.3.</p>
<p>(Note: this might not hold for Vista, which has an entirely new loader architecture).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488973">
				<div id="div-comment-488973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian Oney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-488973">
			April 3, 2007 at 5:30 pm</a>		</div>

		<p>I know one reason why a small set of system files had to be 8.3.</p>
<p>The NT Loader needs to launch the kernel with enough drivers to access the disk. The list would include the HAL, storage drivers, file system drivers, etc.</p>
<p>Think about that last one &#8211; how does the NT Loader locate the filesystem drivers without using the filesystem drivers? Well, NT&#8217;s loader solved this catch 22 by using miniature versions of the filesystem drivers built directly into it. An 8.3 issue arose here because one of those miniature filesystem libraries, the one for FAT, never had long filename support added. As a consequence, the kernel, HAL, and core drivers had to fit into 8.3.</p>
<p>(Note: this might not hold for Vista, which has an entirely new loader architecture).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-489003">
				<div id="div-comment-489003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.hkascii.com/blog/archives/42' rel='external nofollow' class='url'>??????????????????????????? &raquo; Blog Archive &raquo; ?????????????????? dll???????????????</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-489003">
			April 3, 2007 at 10:03 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.hkascii.com/blog/archives/42" rel="nofollow">http://www.hkascii.com/blog/archives/42</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-489063">
				<div id="div-comment-489063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.knocks-solutions.com' rel='external nofollow' class='url'>KNOCKS</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-489063">
			April 4, 2007 at 5:14 am</a>		</div>

		<p>METADATA: CLR uses metadata to load an assembly, it doesn&#8217;t care abt the file name. Simple</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-489163">
				<div id="div-comment-489163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-489163">
			April 4, 2007 at 10:25 am</a>		</div>

		<p>The explanation by Adrian Oney sound good.</p>
<p>During the initialization phaze of loading the operating system you can&#8217;t depend on having the long filename layer available. &nbsp;The core files should have 8.3.</p>
<p>Vista could be different.</p>
<p>.NET kicks in long after the core operating system is loaded. &nbsp;By that time the long filename handler should be ready.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-489473">
				<div id="div-comment-489473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zhoumx</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-489473">
			April 4, 2007 at 1:29 pm</a>		</div>

		<p>Microsoft should start phasing out short filenames, and then the application developers will follow, even though they will be slow and probably reluctant.</p>
<p>you can only maintain backward-compatibility to a certain point. After that everything turns around and starts to hurt you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-489763">
				<div id="div-comment-489763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-489763">
			April 5, 2007 at 4:14 am</a>		</div>

		<p>I don&#8217;t understand what everybody has against random system files having short filenames. If there was anything to gain from having long filenames, systems that have always supported them would already use them everywhere. Afterall, Unix has had a maximum of 14 character (or longer) filenames for over 30 years, yet finding a filename longer than 12 characters (the length of an 8.3 filename) on a Unix box is just as hard as on a Windows box.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-490163">
				<div id="div-comment-490163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian Reiter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-490163">
			April 6, 2007 at 9:13 am</a>		</div>

		<p>Thanks for answering my question, Raymond. In the intervening time I also had stumbled upon a partial answer in Larry Osterman&#8217;s blog. Some part of the fundemental Windows installer technology before Vista was limited to 8.3 file names. I&#8217;m guessing this is the part used by the text-mode bootstrap installer.</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/larryosterman/archive/2007/01/31/what-is-audiodg-exe.aspx" rel="nofollow">http://blogs.msdn.com/larryosterman/archive/2007/01/31/what-is-audiodg-exe.aspx</a></p>
<p>&quot;For a number of reasons that are no longer relevant (they&#8217;re related to the INF based installer technology that was used before Vista), we thought that we needed to limit our binary names to 8.3 (it&#8217;s a long story &#8211; in reality we didn&#8217;t, but we thought we did). &nbsp;So the nice long names we had chosen (AudioEngine.Dll, AudioKSEndpoint.Dll, and DeviceGraph.Exe) had to be truncated to 8.3.&quot;</p>
<p>It’s fascinating how old decisions, obsolete technologies continue to shape reality. Consider that everything in our culture is shaped by our collective history. The amazing thing is that we somehow expect computer systems to be exempt. Maybe this because they change so rapidly and seem so fungible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-490603">
				<div id="div-comment-490603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pwb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-490603">
			April 8, 2007 at 12:55 am</a>		</div>

		<p>The questioner did not ask why &quot;operating systems&quot; adhere to 8.3, (s)he asked why *Windows* still uses 8.3 so much!!</p>
<p>&quot;Another extremely good reason for DLLs to conform to 8.3 notation is simply that developers tend to have to type the names of the DLLs they&#8217;re working on quite often. &nbsp;Shorter names are easier to type, so developers rarely want to make filename longer than 8 characters.&quot;</p>
<p>That is a *horrible* reason!!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-490703">
				<div id="div-comment-490703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deadnode.org/' rel='external nofollow' class='url'>James</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-490703">
			April 9, 2007 at 4:51 am</a>		</div>

		<p>Brian: In addition, the text mode installer displayed the name of each file as it was copied; the space, in the bottom-right corner of the screen, is only a dozen or so characters wide, so anything much over 8.3 wouldn&#8217;t fit neatly.</p>
<p>(For a long time after most of &quot;us&quot; would have stopped using FAT file systems, OEMs were using FAT-only disk duplication systems, so those had to be supported more recently than you might think as well; as a result, even systems which shipped with an NTFS Windows installation had to start life as plain old 8.3 FAT16 images.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-492523">
				<div id="div-comment-492523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">VAR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-492523">
			April 12, 2007 at 7:46 pm</a>		</div>

		<p>I have another related question.</p>
<p>Why does the Win32 console still default to using non-unicode raster fonts and obsolete OEM code pages, forcing devs to go jump through all sorts of hoops in order to get text to display consistently in both environments? This is the case even with MS&#8217;s new Powershell.</p>
<p>I can&#8217;t really see the backwards compatibility angle, since NTDVM could be extended to handle legacy fonts and code pages for DOS apps.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-616003">
				<div id="div-comment-616003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jpassing.wordpress.com/2008/04/06/kernel-and-83-file-names/' rel='external nofollow' class='url'>/kernel and 8.3 file names &laquo; JP&#8217;s Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070402-00/?p=27413#comment-616003">
			April 6, 2008 at 6:03 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://jpassing.wordpress.com/2008/04/06/kernel-and-83-file-names/" rel="nofollow">http://jpassing.wordpress.com/2008/04/06/kernel-and-83-file-names/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

