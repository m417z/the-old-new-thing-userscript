<html>
<head>
<title>What happens if I wake a condition variable when nobody is waiting for it? Is the wake saved for the next thread that waits?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What happens if I wake a condition variable when nobody is waiting for it? Is the wake saved for the next thread that waits?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 25, 2017 / year-entry #214</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170925-00/?p=97075</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It shouldn't matter.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Suppose you call
<a HREF="https://msdn.microsoft.com/library/windows/desktop/ms687080(v=vs.85).aspx">
<code>Wake&shy;Xxx&shy;Condition&shy;Variable</code></a>
to wake a
<code>CONDITION_</code><code>VARIABLE</code></a>,
but nobody is waiting on the condition variable.
What happens?
In particular, is the wake saved for the next thread that waits,
so the next call to
<code>Sleep&shy;Condition&shy;Variable&shy;Xxx</code>
returns immediately instead of waiting?
</p>
<p>
The answer is, "It shouldn't matter."
</p>
<p>
The
<a HREF="https://msdn.microsoft.com/library/windows/desktop/ms682052(v=vs.85).aspx">
intended use pattern for a condition variable</a>
is to do the following:
</p>
<ol>
<li>Enter a lock.</li>
<li>Check a condition.</li>
<li>If the condition is false, then call
    <code>Sleep&shy;Condition&shy;Variable&shy;Xxx</code>
    and then go to step 2.
    </li>
<li>Perform an operation.</li>
<li>Release the lock.</li>
</ol>
<p>
And the code that establishes the condition (or at least
changes the condition so it might be true for at least one waiter)
calls <code>Wake&shy;Xxx&shy;Condition&shy;Variable</code>.
</p>
<p>
If you follow this pattern, then it doesn't matter whether
a call to
<code>Wake&shy;Xxx&shy;Condition&shy;Variable</code> is remembered
when there are no waiting threads.
According to the intended use pattern, a thread is expected
to check the condition first,
and only if the condition is false should the thread call
<code>Sleep&shy;Condition&shy;Variable&shy;Xxx</code>.
Whether the wake is remember or not is irrelevant
because the waiting thread never actually waits!
</p>
<p>
In other words, if you are counting on an unnecessary wake
being saved and waking up a future sleep,
then that means that you went to sleep before checking
the condition.
(Because if you had checked the condition,
you would have avoided the sleep.)
<a HREF="http://youreholdingitwrong.org/">
You're holding it wrong</a>.
</p>
<p>
Conversely, if you didn't expect the unnecessary wake to be
remembered, but you got one anyway,
well, that's also permitted
because condition variables are explicitly documented as
subject to spurious wakes.
Again, if you follow the intended use pattern,
spurious wakes aren't a problem (aside from performance)
because the recommended pattern is to re-check the condition
after the sleep wakes.
If the wake were spurious, the check would fail,
and you would go back to sleep.
</p>
<p>
In summary, if you wake
a condition variable when nobody is waiting for it,
it is unspecified whether the wake is saved for the next thread
that waits,
and that's okay,
because if you follow the intended use pattern,
it doesn't matter.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1310295">
				<div id="div-comment-1310295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170925-00/?p=97075#comment-1310295">
			September 25, 2017 at 7:43 am</a>		</div>

		<p>&gt; spurious wakes aren&#8217;t a problem (aside from performance)</p>
<p>I&#8217;m not sure why you dismiss performance so casually&#8230;  If the CV wakes a thread (spurious or not), the thread by definition is holding a mutex which means other threads may not be able to make progress (on top of a potentially needless context switch).  That by itself might be a genuine problem if many of the wakeups are spurious.</p>
<p>You shouldn&#8217;t say it absolutely doesn&#8217;t matter &#8212; you can only say it _usually_ doesn&#8217;t matter.</p>
<p>As an aside, C++11&#8217;s std::condition_variable specifies a total &#8220;happens before&#8221; ordering on CV wakeups and wait()s to address this issue.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1310306">
				<div id="div-comment-1310306" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170925-00/?p=97075#comment-1310306">
			September 25, 2017 at 10:24 am</a>		</div>

		<p>I&#8217;m saying that spurious wakeups aren&#8217;t a problem from a correctness point of view. They impact performance but not correctness.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1310307">
				<div id="div-comment-1310307" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clockwork-Muse</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170925-00/?p=97075#comment-1310307">
			September 25, 2017 at 12:00 pm</a>		</div>

		<p>&#8230;. except, unless I&#8217;m missing something, it doesn&#8217;t actually address these issues so much as abstract the loop away.  Even then, spurious wakeups can happen for unrelated reasons, so handling the condition is essentially some form of standard &#8220;tax&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1310325">
				<div id="div-comment-1310325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.farnz.org.uk/' rel='external nofollow' class='url'>Simon Farnsworth</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170925-00/?p=97075#comment-1310325">
			September 26, 2017 at 5:48 am</a>		</div>

		<p>I&#8217;ve just had a look through the last C++11 draft (n3337), and I can&#8217;t find the language you&#8217;re referring to. 30.5 requires an unspecified total order for the parts of the CV operation, and 30.5.1 says that spurious wake-ups are allowed. </p>
<p>There&#8217;s a variant on wait that takes a predicate, and is documented to be equivalent to while(!predicate) wait();, but possibly using library optimizations to reduce spurious wake-ups. However, it&#8217;s legitimate to have spurious wake-ups and tests of the predicate.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1310485">
				<div id="div-comment-1310485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170925-00/?p=97075#comment-1310485">
			September 27, 2017 at 8:57 am</a>		</div>

		<p>&gt; I’ve just had a look through the last C++11 draft (n3337), and I can’t find the language you’re referring to. 30.5 requires an unspecified total order for the parts of the CV operation, and 30.5.1 says that spurious wake-ups are allowed.</p>
<p>In the C++17 draft (n4660), section 33.5:</p>
<p><i>The implementation shall behave as if all executions of notify_one, notify_all, and each part of the wait,<br />
wait_for, and wait_until executions are executed in a single unspecified total order consistent with the<br />
&#8220;happens before&#8221; order.</i></p>
<p>That combined with the definition of notify_all() (<i>Unblocks all threads that are blocked waiting for *this</i>), unambiguously addresses the &#8220;is the wake saved for the next thread that waits&#8221; question in the first paragraph.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zlynx odd alt depth-2" id="comment-1310365">
				<div id="div-comment-1310365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170925-00/?p=97075#comment-1310365">
			September 26, 2017 at 9:35 am</a>		</div>

		<p>The spurious wake is hardly ever a problem for performance although of course you need to profile to be sure.<br />
It is usually caused by a broadcast wake sent to multiple waiters. By the time the &#8220;spurious&#8221; wake happens, the other threads have consumed all available work events. And so the wasted wake mutexes are burned on threads doing no work but don&#8217;t interrupt the other threads, because they&#8217;re busy working.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

