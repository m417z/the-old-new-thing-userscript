<html>
<head>
<title>Improving the performance of CF_HDROP by providing file attribute information</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Improving the performance of CF_HDROP by providing file attribute information</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 9, 2014 / year-entry #142</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140609-00/?p=783</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The CF_HDROP clipboard format is still quite popular, despite its limitation of being limited to files. You can't use it to represent virtual content, for example. For all of you still using CF_HDROP, you can improve the performance of drag/drop operations by adding a little more information to your data object. Observe that the CF_HDROP...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The <code>CF_HDROP</code> clipboard format is still quite popular,
despite its limitation of being limited to files.
You can't use it to represent
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2008/03/18/8080183.aspx">
virtual content</a>,
for example.
</p>
<p>
For all of you still using
<code>CF_HDROP</code>,
you can improve the performance of drag/drop operations by
adding a little more information to your data object.
</p>
<p>
Observe that the
<code>CF_HDROP</code>
clipboard format is just a list of paths.
Some drop targets care about whether the paths refer to directories
or to files,
and since <code>CF_HDROP</code> does not provide this information,
the drop targets are forced to access the disk to get the answer.
(This can be expensive for network locations.)
</p>
<p>
To help this case, you can add a
<code>CFSTR_<wbr>FILE_<wbr>ATTRIBUTES_<wbr>ARRAY</code> to your
data object.
This contains the file attribute information for the items in your
<code>CF_HDROP</code>,
thereby saving the drop target the cost of having to go find them.
</p>
<p>
Take our
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2008/03/11/8080077.aspx">
tiny drag-drop sample</a>
and make the following changes:
</p>
<pre>
class CTinyDataObject : public IDataObject
{
  ...
  enum {
    <font COLOR=red>// <strike>DATA_TEXT,</strike></font>
    <font COLOR=blue>DATA_HDROP,</font>
    DATA_NUM,
    DATA_INVALID = -1,
  };
  ...
};

CTinyDataObject::CTinyDataObject() : m_cRef(1)
{
  SetFORMATETC(&amp;m_rgfe[DATA_<font COLOR=blue>HDROP</font>], CF_<font COLOR=blue>HDROP</font>);
}

<font COLOR=blue>struct STATICDROPFILES
{
 DROPFILES df;
 TCHAR szFile[ARRAYSIZE(TEXT("C:\\Something.txt\0"))];
} const c_hdrop = {
  {
    FIELD_OFFSET(STATICDROPFILES, szFile),
    { 0, 0 },
    FALSE,
    sizeof(TCHAR) == sizeof(WCHAR), // fUnicode
  },
  TEXT("C:\\Something.txt\0"),
};</font>


HRESULT CTinyDataObject::GetData(FORMATETC *pfe, STGMEDIUM *pmed)
{
  ZeroMemory(pmed, sizeof(*pmed));

  switch (GetDataIndex(pfe)) {
  case <font COLOR=blue>DATA_HDROP</font>:
    pmed-&gt;tymed = TYMED_HGLOBAL;
    return CreateHGlobalFromBlob(&<font COLOR=blue>&amp;c_hdrop, sizeof(c_hdrop),</font>
                              GMEM_MOVEABLE, &amp;pmed-&gt;hGlobal);
  }

  return DV_E_FORMATETC;
}
</pre>
<p>
Okay, let's look at what we did here.
</p>
<p>
First, we make our data object report a
<code>CF_<wbr>HDROP</code>.
We then declare a static <code>DROP&shy;FILES</code> structure
which we use for all of our drag-drop operations.
(Of course, in real life, you would generate it dynamically,
but this is just a Little Program.)
</p>
<p>
That's our basic program that drags a file.
</p>
<p>
Note that
</p>
<blockquote CLASS=q><p>
you are much better off letting the shell create the data object,
</p>
</blockquote>
<p>
since that data object will contain much richer information
(and this entire article would not be needed).
Here's a sample program which
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/12/06/275659.aspx">
uses the <code>Get&shy;UI&shy;Object&shy;Of&shy;File</code> function
to do this in just a few lines</a>.
It's much shorter than having to cook up this
<code>CTiny&shy;Data&shy;Object</code> class.
I'm doing it this way on the assumption that your program
is deeply invested in the less flexible <code>CF_<wbr>HDROP</code>
format,
so changing from <code>CF_<wbr>HDROP</code> to some other format
would be impractical.
</p>
<p>
Okay, so that's the program we're starting from.
Let's add support for precomputed attributes.
</p>
<pre>
class CTinyDataObject : public IDataObject
{
  ...
  enum {
    DATA_HDROP,
    <font COLOR=blue>DATA_ATTRIBUTES,</font>
    DATA_NUM,
    DATA_INVALID = -1,
  };
  ...
};

CTinyDataObject::CTinyDataObject() : m_cRef(1)
{
  SetFORMATETC(&amp;m_rgfe[DATA_HDROP], CF_HDROP);
  <font COLOR=blue>SetFORMATETC(&amp;m_rgfe[DATA_ATTRIBUTES],
               RegisterClipboardFormat(CFSTR_FILE_ATTRIBUTES_ARRAY));</font>
}

<font COLOR=blue>FILE_ATTRIBUTES_ARRAY c_attr = {
 1, // cItems
 FILE_ATTRIBUTE_ARCHIVE, // OR of attributes
 FILE_ATTRIBUTE_ARCHIVE, // AND of attributes
 { FILE_ATTRIBUTE_ARCHIVE }, // the file attributes
};</font>

HRESULT CTinyDataObject::GetData(FORMATETC *pfe, STGMEDIUM *pmed)
{
  ZeroMemory(pmed, sizeof(*pmed));

  switch (GetDataIndex(pfe)) {
  case DATA_HDROP:
    pmed-&gt;tymed = TYMED_HGLOBAL;
    return CreateHGlobalFromBlob(&amp;amp;c_hdrop, sizeof(c_hdrop),
                              GMEM_MOVEABLE, &amp;pmed-&gt;hGlobal);
  <font COLOR=blue>case DATA_ATTRIBUTES:
    pmed-&gt;tymed = TYMED_HGLOBAL;
    return CreateHGlobalFromBlob(&amp;c_attr1, sizeof(c_attr1),
                              GMEM_MOVEABLE, &amp;pmed-&gt;hGlobal);</font>
  }

  return DV_E_FORMATETC;
}
</pre>
<p>
Okay, let's look at what we did here.
</p>
<p>
We added a new data format,
<code>CFSTR_<wbr>FILE_<wbr>ATTRIBUTES_<wbr>ARRAY</code>,
and we created a static copy of the
<code>FILE_<wbr>ATTRIBUTES_<wbr>ARRAY</code>
variable-length structure that contains the attributes of our
one file.
Of course, in a real program, you would generate the structure
dynamically.
Note that I use a sneaky trick here:
Since the
<code>FILE_<wbr>ATTRIBUTES_<wbr>ARRAY</code>
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/08/26/220873.aspx">
ends with an array of length 1</a>,
and I happen to need exactly one item,
I can just declare the structure as-is and fill in the one slot.
(If I had more than one item, then I would have needed more typing.)
</p>
<p>
To make things easier for the consumers of the
<code>FILE_<wbr>ATTRIBUTES_<wbr>ARRAY</code>,
the structure also asks you to report the logical OR and logical AND
of all the file attributes.
This is to allow quick answers to questions like
"Is everything in this <code>CF_<wbr>DROP</code> a file?"
or
"Is anything in this <code>CF_<wbr>DROP</code> write-protected?"
Since we have only one file, the calculation of these OR and AND
values is nearly trivial.
</p>
<p>
Okay, so there isn't much benefit to adding file attributes
to a drag of a single file from the local hard drive,
since the local hard drive is pretty fast,
and the file attributes may very well be cached.
But if you've placed thousands of files from a network drive
onto the clipboard,
this shortcut can save a lot of time.
(That was in fact the customer problem that inspired this Little Program.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1130433">
				<div id="div-comment-1130433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140609-00/?p=783#comment-1130433">
			June 11, 2014 at 1:53 am</a>		</div>

		<p>Hmm. I wanted to implement a drop target that only accepts real-on-disk files (cause transcoder libraries really want fast random-access, and media files are big), and got the nasty surprise of HDROP working with &quot;C:UsersBobVideosXxX_HOT_MARIO_SPEEDRUN_XxX.mkv&quot;, but the far more likely &quot;VideosXxX_HOT_MARIO_SPEEDRUN_XxX.mkv&quot; not :(.</p>
<div class="post">[<em>What would the meaning of a relative path be? Relative to what? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1130523">
				<div id="div-comment-1130523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140609-00/?p=783#comment-1130523">
			June 11, 2014 at 3:09 pm</a>		</div>

		<p>&quot;What would the meaning of a relative path be? Relative to what?&quot;</p>
<p>Sorry for the ambiguoity, I mean the path as shown by Explorer (Shell namespace?), that is, the Videos library. I beleive we had the same problem with dragging from the desktop.</p>
<p>Of course, I could have just messed up how you are supposed to do IDropTarget. But I&#39;m not here to ask for tech support, just mentioning that HDROPs are pretty limited on the other side too :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1130593">
				<div id="div-comment-1130593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140609-00/?p=783#comment-1130593">
			June 12, 2014 at 8:20 am</a>		</div>

		<p>[What would the meaning of a relative path be? Relative to what? -Raymond]</p>
<p>I was expecting this.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

