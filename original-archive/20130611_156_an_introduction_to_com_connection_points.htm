<html>
<head>
<title>An introduction to COM connection points</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>An introduction to COM connection points</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 11, 2013 / year-entry #157</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time, we saw how to enumerate all the Internet Explorer and Explorer Windows and see what they are viewing. But that program printed static information. It didn't track the changes to the windows if the user clicked to another Web page or navigated to a different folder. In order to hook that up, we...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/06/10/10424662.aspx">
Last time</a>,
we saw how to enumerate all the Internet Explorer and
Explorer Windows and see what they are viewing.
But that program printed static information.
It didn't track the changes to the windows if the user
clicked to another Web page or navigated to a different folder.
</p>
<p>
In order to hook that up, we
need to understand the connection point model and the
way events are expressed in dispatch interfaces.
First, let's look at the connection point model.
These topics confused me when I first met them
(in part because I didn't do a good job of mentally
separating them into two topics and instead treated it
as one big topic),
so I'm going to spend a few days
trying to explain how it works,
and then later this week, we'll actually hook things up.
(And actually hooking it up is a lot easier than explaining it.)
</p>
<p>
Today, the connection point model.
</p>
<p>
Suppose you have a widget which can have multiple clients.
The clients can communicate with the widget by invoking methods
on the widget, like
<code>IWidget::<wbr>Set&shy;Color</code>.
but how does the widget communicate with its clients?
Well, since this is COM, the first thing you need is an interface,
say,
<code>IWidget&shy;Client</code>.
The idea is that each client implements
<code>IWidget&shy;Client</code>,
and when the widget needs to, say, notify each client that
the color changed,
it can invoke
<code>IWidget&shy;Client::<wbr>On&shy;Color&shy;Changed</code>
on each one.
Each client can register with the widget for notifications.
</p>
<p>
The COM interface for standardizing the registration mechanism
is <code>IConnection&shy;Point</code>.
A <i>connection point</i>
acts as a middle-man between
the widget and all its clients:
Whenever the widget needs to notify all its clients,
it tells the connection point to do it.
</p>
<table>
<tr>
<table BORDER=0 CELLPADDING=0 CELLSPACING=0
       SUMMARY="To the left is the widget. An arrow goes from the widget to the connection point in the center. Three arrows go from the connection point to clients A, B, and C on the right.">
<tr>
<td ROWSPAN=5 ALIGN=center STYLE="border: solid black .75pt; padding: 3pt">
    Widget</td>
<td></td>
<td ROWSPAN=5 ALIGN=center STYLE="border: solid black .75pt; padding: 3pt">
    Connection<br>Point</td>
<td>&rarr;</td>
<td ALIGN=center STYLE="border: solid black .75pt; padding: 3pt">
    Client&nbsp;A</td>
</tr>
<tr STYLE="height: 1ex">
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&rarr;</td>
<td>&rarr;</td>
<td ALIGN=center STYLE="border: solid black .75pt; padding: 3pt">
    Client&nbsp;B</td>
</tr>
<tr STYLE="height: 1ex">
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>&rarr;</td>
<td ALIGN=center STYLE="border: solid black .75pt; padding: 3pt">
    Client&nbsp;C</td>
</tr>
</table>
<p>
A client registers with a connection point by calling
<code>IConnection&shy;Point::<wbr>Advise</code>,
and it unregisters by calling
<code>IConnection&shy;Point::<wbr>Unadvise</code>.
</p>
<p>
Okay, that's great,
but how do clients find the connection point so they can register with it?
</p>
<p>
The widget exposes an interface known as
<code>IConnection&shy;Point&shy;Container</code>
which provides access to an object's connection points.
The client can call the
<code>IConnection&shy;Point&shy;Container::<wbr
>Find&shy;Connection&shy;Point</code> method
to get access to a specific connection point.
</p>
<p>
Here's how the pieces fit together:
</p>
<pre>
// error checking elided for expository purposes

void IUnknown_FindConnectionPoint(IUnknown *punk,
                                  REFIID riid,
                                  IConnectionPoint **ppcp)
{
 // get the IConnectionPointContainer interface
 CComQIPtr&lt;IConnectionPointContainer&gt; spcpc(punk);

 // Locate the connection point
 spcpc-&gt;FindConnectionPoint(riid,  ppcp);
}

class CClient : public IWidgetClient
{
...
 IWidget *m_pWidget;
 DWORD m_dwCookie;
};

CClient::RegisterWidgetClient()
{
 // Find the IWidgetClient connection point
 CComPtr&lt;IConnectionPoint&gt; spcp;
 IUnknown_FindConnectionPoint(m_pWidget,
                              IID_IWidgetClient, &amp;spcp);

 // register with it
 spcp-&gt;Advise(this, &amp;m_dwCookie);
}

CClient::UnregisterWidgetClient()
{
 // Find the IWidgetClient connection point
 CComPtr&lt;IConnectionPoint&gt; spcp;
 IUnknown_FindConnectionPoint(m_pWidget,
                              IID_IWidgetClient, &amp;spcp);

 // unregister from it
 spcp-&gt;Unadvise(m_dwCookie);
}
</pre>
<p>
After registering as a widget client,
the <code>CClient</code> object will receive
method calls on its <code>IWidget&shy;Client</code>
until it unregisters.
</p>
<p>
Now the widget and clients have two-way communication.
If the clients want to initiate the communuication,
it can call a method on <code>IWidget</code>.
If the widget wants to initiate the communication,
it can call a method on <code>IWidget&shy;Client</code>.
</p>
<p>
Note that we've created a giant circular reference.
The widget has a reference to its connection point
(so it can tell it to fire a notification to all its clients),
and the connection point has a reference to the widget
client
(so it can forward the notification along),
and the widget client has a reference to the widget
in its <code>m_pWidget</code> member.
In order to break this cycle,
you have to remember to explicitly call
<code>Unregister&shy;Widget&shy;Client</code>
when you are no longer interested in receiving
widget notifications.
</p>
<p>
Note that even though the arrows in the diagram above
flow from left to right (from widget to clients),
that doesn't mean that the
information flow is strictly left-to-right.
You can pass information in the other direction
via return values or output parameters.
</p>
<p>
For example, there might be a method on
the <code>IWidget&shy;Client</code> interface
called <code>Get&shy;Color</code>:
</p>
<pre>
interface IWidgetClient : IUnknown
{
 ...
 HRESULT GetColor([out] COLORREF *pclr);
 ...
};
</pre>
<p>
Since there can be multiple clients, the widget
needs to have some sort of rule for deciding which
client gets to choose the color.
It might decide to ask each client in turn for a color,
until one of them returns <code>S_OK</code>,
and that client's color is used and no further clients
are notified.
</p>
<p>
Or maybe there's a method called
<code>On&shy;Save</code>:
</p>
<pre>
interface IWidgetClient : IUnknown
{
 ...
 HRESULT OnSave([in] IPropertyStorage *pps);
 ...
};
</pre>
<p>
The convention here might be that all clients
will be notified of the Save operation and they
can write any additional information to the
<code>IProperty&shy;Storage</code> while handing
the notification.
</p>
<p>
Those are just examples.
Feel free to make up your own.
The point is that just because the arrows go from the
widget to the clients doesn't mean that information
can't flow back the other way.
</p>
<p>
Most of the time, you have the simple case where
a widget will expose a single connection point.
In that case, the generality of the
<code>IConnection&shy;Point&shy;Container</code>
may seem unnecessary.
But it allows you to add new connection points later.
For example, you might have multiple client interfaces
for different types of clients.
You could have
<code>IWidget&shy;Color&shy;Client</code>
for clients that are interested only in color changes,
and
<code>IWidget&shy;Network&shy;Client</code>
for clients that are interested only in monitoring the
widget's network activity.
</p>
<p>
Or maybe you didn't plan on having multiple connection points
originally,
but in the second version of your product,
you want to add additional methods to
<code>IWidget&shy;Client</code>,
so you need to create
<code>IWidget&shy;Client2</code>,
which means that you also need a new connection point for it.
</p>
<p>
Next time, a look at the special case where
the client interface is a dispatch interface.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-chuckop even thread-even depth-1" id="comment-1060733">
				<div id="div-comment-1060733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ChuckOp' rel='external nofollow' class='url'>ChuckOp</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060733">
			June 11, 2013 at 7:10 am</a>		</div>

		<p>This showed up on my Favorites bar as &quot;An introduction to COM connection points (new)&quot; and I thought, &quot;this is anything but new! &nbsp;Maybe a dormant form of the Y2K issue, where everything from the 1990&#39;s is new.&quot; &nbsp;I&#39;m teasing of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1060743">
				<div id="div-comment-1060743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060743">
			June 11, 2013 at 7:23 am</a>		</div>

		<p>The generality of IConnection­Point­Container also means that it is possible to write a generic helper function, and the shell already has one; shlwapi!ConnectToConnectionPoint (And some undocumented? IDispacth? IConnectionPoint helpers)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060753">
				<div id="div-comment-1060753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060753">
			June 11, 2013 at 8:03 am</a>		</div>

		<p>There&#39;s also ATLAdvise / AtlUnadvise which presumably does that internally.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060773">
				<div id="div-comment-1060773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060773">
			June 11, 2013 at 9:51 am</a>		</div>

		<p>Ah, good old Connection Points. &nbsp;I made extensive use of these (and Monikers) back in the Windows 95/NT4 days on a desktop video product that was all built out of COM components (although we refused to deal with IDispatch interfaces &#8211; anyone wanting to play in our pool had to use a real language to write their components). &nbsp;I recall writing something like ConnectToConnectionPoint way back then as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060783">
				<div id="div-comment-1060783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ipoverscsi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060783">
			June 11, 2013 at 10:16 am</a>		</div>

		<p>@CarlD: I&#39;ve read the Component Object Model Specification v0.9 from cover to cover, and besides the actual low-level marshaling stuff, the only other part I never got was Monikers. &nbsp;Oh, I know that they&#39;re supposed to be names to COM objects, but I never really groked what you were supposed to do with them. &nbsp;Since you&#39;re the first person I&#39;ve heard of who actually implemented them, care to share what you did with them?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060793">
				<div id="div-comment-1060793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060793">
			June 11, 2013 at 11:37 am</a>		</div>

		<p>Oh, Monikers are cool! &nbsp;In the video product, for example, I supported Monikers for just about everything, from a clip on the hard drives, to the master controller for the whole system. &nbsp;The great thing about monikers (which is also a bad thing, depending on your POV) is that you can hide an arbitrarily object binding operation behind a moniker &#8211; the client just call CoGetObject and is blissfully unaware of what needs to go on behind the scenes to instantiate that object. &nbsp;They were fun stuff, for sure!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060803">
				<div id="div-comment-1060803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060803">
			June 11, 2013 at 12:26 pm</a>		</div>

		<p>arrg! &nbsp;s/arbitrarily object binding/arbitrarily complex object binding/</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060813">
				<div id="div-comment-1060813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060813">
			June 11, 2013 at 3:16 pm</a>		</div>

		<p>Oh, and as far as what you&#39;re supposed to DO with Monikers: Their reason for being is OLE linking (not embedding). &nbsp;It gives you a way to store a string (the Moniker) that refers to (a part of) another thing, like a range of cells in an Excel spreadsheet, or a clip on a hard drive (in a particular slot of a particular chassis of a particular FX machine connected to a particular network interface,&#8230;) and then use that string to retrieve a reference to the original object at a later time, without your program needing to know how to navigate through layers of containers to find the object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060823">
				<div id="div-comment-1060823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060823">
			June 11, 2013 at 10:22 pm</a>		</div>

		<p>Question:</p>
<p>In the code CComPtr&lt;IConnectionPoint&gt; spcp;</p>
<p>IUnknown_FindConnectionPoint(m_pWidget,ID_IWidgetClient, &amp;spcp);</p>
<p>How does one avoid/filter out debug assert on operator &amp; of CComPtr?</p>
<p>(I am doing same thing in my code, but with RSS Platform andI&#39;d like to avoid hundreds of debug asserts, when it iterates over items in feeds.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060843">
				<div id="div-comment-1060843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ens</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060843">
			June 12, 2013 at 4:57 am</a>		</div>

		<p>Klimax:</p>
<p>Sounds like you&#39;re re-using spcp. &nbsp;Don&#39;t do that! &nbsp;That&#39;s a memory leak! &nbsp;That&#39;s why CComPtr complains about the &amp; operator when spcp is non-NULL. &nbsp;In Raymond&#39;s code it should not assert (CComPtr has a constructor which auto-nulls itself).</p>
<p>If you must do that, call spcp.Release() beforehand. &nbsp;But that starts to defeat the point of smart pointers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1060863">
				<div id="div-comment-1060863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060863">
			June 12, 2013 at 5:55 am</a>		</div>

		<p>@Klimax: You just posted the code of operator*, not operator&amp;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060853">
				<div id="div-comment-1060853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060853">
			June 12, 2013 at 5:37 am</a>		</div>

		<p>@Ens:</p>
<p>There is no reuse. Debug_Assert(resp. ATLEnsure) complains on *null* pointer. (It&#39;s freshly constructed object)</p>
<p>That code is identical to the one in article. (Checked that again)</p>
<p>Code of ATL member function:</p>
<p>T&amp; operator*() const</p>
<p>{</p>
<p> &nbsp;ATLENSURE(p!=NULL);</p>
<p> &nbsp;return *p;</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060943">
				<div id="div-comment-1060943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1060943">
			June 12, 2013 at 10:05 am</a>		</div>

		<p>How can one tell I am in a hurry&#8230;</p>
<p>T** operator&amp;() throw()</p>
<p> &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;ATLASSERT(p==NULL);</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;return &#038;p;</p>
<p> &nbsp; &nbsp;}</p>
<p>This should be right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1061073">
				<div id="div-comment-1061073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1061073">
			June 13, 2013 at 3:43 pm</a>		</div>

		<p>@Ian &#8211; I completely agree. &nbsp;One of the best technical introductions ever, and an indispensable book if you&#39;re diving deep into COM.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1061043">
				<div id="div-comment-1061043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Boyd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1061043">
			June 13, 2013 at 10:27 am</a>		</div>

		<p>Speaking of COM connection points, it&#39;s time to plug Don Box&#39;s book Essential COM. It is probably the best technical introduction to any topic ever.</p>
<p>In the 35 pages of the first chapter, Don Box explains the fundamental problem of trying to re-use classes. And through a series of simple steps of solving the problems: he invents COM before your very eyes. Once you realize the *why* of COM, the remaining 300 pages are obvious, and just detail Microsoft&#39;s implementation. That includes `IUnknown`, `IDispatch`, ProgIDs, ClassIDs, and yes even Connection Points.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1061253">
				<div id="div-comment-1061253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">alexander</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130611-00/?p=4113#comment-1061253">
			June 16, 2013 at 10:54 am</a>		</div>

		<p>and my first thought was we travelled back to the 90s for serial communicatiob ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

