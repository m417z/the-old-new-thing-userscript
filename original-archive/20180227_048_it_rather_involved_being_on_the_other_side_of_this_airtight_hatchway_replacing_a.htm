<html>
<head>
<title>It rather involved being on the other side of this airtight hatchway: Replacing an unsigned writable MSI package</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>It rather involved being on the other side of this airtight hatchway: Replacing an unsigned writable MSI package</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 27, 2018 / year-entry #48</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Another case of the insecurely-configured system.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In the category of dubious security vulnerability, we have
this report:
</p>
<blockquote CLASS="q">
<p>
I have found a security vulnerability in Windows that permits
an attacker to run arbitrary code on a remote system.
Prepare the system as follows:
</p>
<ul>
<li>Set up a domain controller and one or more clients
    joined to that domain.</li>
<li>Create an MSI package and put it on a network share.
    For example, you can use the popular XYZ package,
    available for download <u>here</u>.</li>
<li>Use Group Policy to deploy the MSI package to the client machines.</li>
</ul>
<p>
Given these starting conditions, the attacker can do the following:
</p>
<ul>
<li>Replace the MSI package on the network share with a rogue
    package that contains the malicious payload.</li>
<li>Wait for the user to Repair the MSI package.
    On a large corporate network, this is probably not going to take long.</li>
<li>When the user performs a Repair,
    Windows will automatically download and install
    the rogue MSI package from the network share.
    Since MSI packages can install registry keys, shell extensions,
    and services, the malicious payload will start executing
    almost immediately.&sup1;</li>
</ul>
</blockquote>
<p>
Okay, let's see what we have here.
</p>
<p>
First, we have the XYZ package.
Closer inspection of the XYZ package reveals that it is not
digitally signed.
Therefore, anybody can tamper with it undetected,
since there is nothing that attests to its authenticity.
</p>
<p>
Okay, but a rogue copy of the XYZ package is dangerous only
if you manage to trick somebody into installing it.
The first step in the attack is to convince the domain administrator
to deploy the authentic XYZ package to all the machines on the network.
</p>
<p>
The second step in the attack is that the network administrator
must have placed the
authentic XYZ package in a location that
the attacker has write access to.
</p>
<p>
Okay, let's stop and take another look at those prerequisites.
</p>
<p>
We're requiring the domain administrator to deploy an MSI package
that is not digitally signed,
and put it on an insecure share.
</p>
<p>
In other words,
we're assuming that the domain administrator is incompetent and
set up an insecure system.
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20100114-00/?p=15273">
Insecure system is insecure</a>.
</p>
<p>
If you study this report more carefully, you'll see that
you don't even need to wait for the Repair step in order
to attack client machines.
You just have to wait for a new client computer to join the domain.
On a large corporate network, this will not take long.
That new client computer will receive instructions from the
Group Policy object it received from the domain controller that
it should install the XYZ program from the insecure share.
You don't even need any of the steps in the second half of the
vulnerability report:
The new client computer is already attacked the moment it joins
the domain!
</p>
<p>
The finder tried to salvage this report by altering the attack
slightly:
</p>
<blockquote CLASS="q"><p>
Alternatively, the attacker can replace the
<code>XYZ.DLL</code> file in its default location of
<code>C:\Program Files\XYZ\XYZ.DLL</code>
with a rogue copy.
</p>
</blockquote>
<p>
Okay, but wait:
How did the attacker get write access to
<code>C:\Program Files\XYZ\XYZ.DLL</code>?
By default, you need administrator privileges to write to that file.
If an attacker can write to that file, then it means one of three
things:
</p>
<ul>
<li>The attacker already has administrator privileges.</li>
<li>The security on that file is different from the default.</li>
<li>The attacker does not have administrator privileges,
    the security on the file is set to the default,
    but the attacker found a sneaky way to trick the system into
    allowing a non-administrator to replace the file.</li>
</ul>
<p>
In the first case,
the attacker is already on the other side
of the airtight hatchway.
Nothing exciting there.
</p>
<p>
In the second case,
the XYZ package created an insecure configuration
that allows non-administrators to update one of its files.
That also falls into the category of
"If you set up an insecure system,
then don't be surprised that it's insecure."
</p>
<p>
The third case is interesting.
But the finder provided no details as to what sort of sneaky
trick is being used.
The finder merely presupposed the existence of a vulnerability,
and concluded
"If there is a vulnerability, then I found a vulnerability."
</p>
<p>
Or in the parlance of airtight hatchways:
"If there is a passageway that lets me to get to the other side
of the airtight hatchway,
then I can get to the other side of the airtight hatchway."
</p>
<p>
As you might suspect, this is not a particularly interesting statement.
</p>
<p>
&sup1;
In reality, the finder's attack was more convoluted than this.
In their version, the rogue XYZ package contained a slightly
altered version of <code>XYZ.DLL</code>, and you had to go through
some extra contortions to get the system to start using the
rogue version of that file without the user launching the XYZ program.
I removed all the
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090409-00/?p=18593">
style points</a>
and went to the direct attack.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1326785">
				<div id="div-comment-1326785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1326785">
			February 27, 2018 at 9:10 am</a>		</div>

		<p>The title says it all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1326795">
				<div id="div-comment-1326795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phil Wilson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1326795">
			February 27, 2018 at 10:55 am</a>		</div>

		<p>This would need to very convoluted. The rogue MSI package would need the same PackageCode and ProductCode as the original. But it&#8217;s not clear that the repair would do anything. The cached MSI on the system knows the version of xyz.dll on the system (in its File table), and if it&#8217;s the same as the actual file then Windows won&#8217;t repair it, and won&#8217;t need to go to the rogue MSI anyway. Maybe this was all in the minutiae of the convolutions, and it&#8217;s all academic anyway, but I&#8217;m not convinced it would work even it was a vulnerability!</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1326915">
				<div id="div-comment-1326915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://eskamation.de/' rel='external nofollow' class='url'>Stefan Kanthak</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1326915">
			February 27, 2018 at 9:21 pm</a>		</div>

		<p>Microsoft&#8217;s Securiry Response Center found it <b>not</b> academic, but a practically exploitable vulnerability.<br />
See <a href="https://technet.microsoft.com/en-us/library/ms14-049.aspx" rel="nofollow">https://technet.microsoft.com/en-us/library/ms14-049.aspx</a>, especially the acknowledgements.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alexcohn odd alt depth-3" id="comment-1327625">
				<div id="div-comment-1327625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1327625">
			March 3, 2018 at 12:19 pm</a>		</div>

		<p>I believe that this post discusses a different, even if related, scenario. With all due respect, the TechNet article and the accompanying knowledgebase article are too vague about the underlying details of the vulnerability, but they don&#8217;t mention domain policy. I guess that your story is about missing UAC dialog when an update to installed app is triggered. Domain admin can legitimately trigger updates without UAC prompt or end-user consent.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1326825">
				<div id="div-comment-1326825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1326825">
			February 27, 2018 at 11:37 am</a>		</div>

		<p>On the other hand, it may not be quite as obvious to System Administrators as it should be, that they need to ensure network shares which contain MSI files (or any other executable content) need to be read-only except to network admins (and they shouldn&#8217;t be logged in to those admin accounts except when they *need* to be.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1327385">
				<div id="div-comment-1327385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://eskamation.de/' rel='external nofollow' class='url'>Stefan Kanthak</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1327385">
			March 1, 2018 at 8:02 pm</a>		</div>

		<p>MSI packages can and are not only installed from properly protected (network) paths.<br />
Scenario 1: offer an MSI on your website. Your users will download it, typically into their &#8220;Downloads&#8221; folder %USERPROFILE%\Downloads and &#8220;open&#8221; it per double-click to start the installation.<br />
Scenario 2: wrap an MSI package into an self-extracting executable (like way to many incompetent developers do). The self-extractor typically places the MSI into %TEMP% or a subdirectory thereof. %TEMP% resolves to %USERPROFILE%\AppData\Local\Temp<br />
Scenario 3: offer an executable that downloads an MSI package and &#8220;opens&#8221; it.<br />
%USERPROFILE% and its subdirectories named above are under full control of the (unprivileged or non-elevated) user who performs the above actions.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1326865">
				<div id="div-comment-1326865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://eskamation.de/' rel='external nofollow' class='url'>Stefan Kanthak</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1326865">
			February 27, 2018 at 5:13 pm</a>		</div>

		<p>&#8220;If there is a passageway that lets me to get to the other side of the airtight hatchway, then I can get to the other side of the airtight hatchway.&#8221;</p>
<p>In standard installations of Windows 7 and later, this passageway is called &#8220;user account control&#8221;, or &#8220;Schroedinger&#8217;s Administrator&#8221;, if you like.<br />
For demonstration, use Windows Explorer and navigate to %SystemRoot%\Temp (see <a href="https://support.microsoft.com/en-us/kb/950934" rel="nofollow">https://support.microsoft.com/en-us/kb/950934</a>)</p>
<p>This directory also falls into your category of &#8220;If you set up an insecure system, then don&#8217;t be surprised that it&#8217;s insecure.&#8221;, especially when users of Windows install programs like Skype (see <a href="https://support.microsoft.com/en-us/kb/2876229" rel="nofollow">https://support.microsoft.com/en-us/kb/2876229</a>) which are offered through Microsoft Update (of course Skype ain&#8217;t the only one)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1326895">
				<div id="div-comment-1326895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1326895">
			February 27, 2018 at 8:19 pm</a>		</div>

		<p>I already discussed this <a href="https://blogs.msdn.microsoft.com/oldnewthing/20121031-00/?p=6203">many years ago</a>.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1326905">
				<div id="div-comment-1326905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://eskamation.de/' rel='external nofollow' class='url'>Stefan Kanthak</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1326905">
			February 27, 2018 at 9:14 pm</a>		</div>

		<p>Yes, you discussed that second point. Nevertheless your fellow colleagues at Microsoft (as well as the makers of Wix toolset and <b>many</b> other tools which create installers) failed to act on this discussion and did not fix quite some of their vulnerable products/installers which still use %TEMP%</p>
<p>No, you did <b>not</b> discuss the first point.<br />
I used %SystemRoot%\Temp there because changing its DACL doesn&#8217;t introduce a <b>new</b> vulnerability.<br />
Replace %SystemRoot%\Temp with %SystemRoot%\System32\Config or %SystemRoot%\ServiceProfiles\LocalService to understand the severity of Windows Explorer&#8217;s braindead behaviour.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4 parent" id="comment-1326975">
				<div id="div-comment-1326975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1326975">
			February 28, 2018 at 7:12 am</a>		</div>

		<p>I&#8217;m not sure what your point is. Yes, you found a vulnerability. Good job.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5 parent" id="comment-1326985">
				<div id="div-comment-1326985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://eskamation.de/' rel='external nofollow' class='url'>Stefan Kanthak</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1326985">
			February 28, 2018 at 7:23 am</a>		</div>

		<p>I wrote my point &#8220;In standard installations of Windows 7 and later, this passageway is called ‚Äúuser account control‚Äù, or ‚ÄúSchroedinger‚Äôs Administrator‚Äù, if you like.&#8221;<br />
In other words: there is <b>no</b> airtight hatchway in standard installations of Windows 7 and later!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-5 parent" id="comment-1327065">
				<div id="div-comment-1327065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1327065">
			February 28, 2018 at 10:20 am</a>		</div>

		<p>User Account Control <a href="https://technet.microsoft.com/en-us/library/2007.06.uac.aspx" rel="nofollow">is not a security boundary</a>.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1327115">
				<div id="div-comment-1327115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://eskamation.de/' rel='external nofollow' class='url'>Stefan Kanthak</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1327115">
			February 28, 2018 at 6:33 pm</a>		</div>

		<p>Thanks for the confirmation that Microsoft ships Windows without &#8220;artight hatchway!&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1327455">
				<div id="div-comment-1327455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://eskamation.de/' rel='external nofollow' class='url'>Stefan Kanthak</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1327455">
			March 2, 2018 at 7:30 am</a>		</div>

		<p>TEMP was also topic of <a href="https://blogs.msdn.microsoft.com/oldnewthing/20151216-00/?p=92661" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20151216-00/?p=92661</a>, and touched Windows^WMicrosoft Installer too</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fleet-command even depth-4" id="comment-1327565">
				<div id="div-comment-1327565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1327565">
			March 2, 2018 at 10:40 pm</a>		</div>

		<p>RC said &#8220;Yes, you found a vulnerability. Good job.&#8221; If I were you, I&#8217;d take that and leave, instead of acting like &#8230; that.</p>
<p>This blog is not a bug-reporting venue and, by the look of it, RC can&#8217;t do anything about it if he wanted to. Microsoft has set up many feedback venues recently. File a report there, and maybe a share link to that report, so that we can support your proposal. (Of course, after carefully reading it and seeing if it has merit.) Or&#8230; alternatively, acknowledge that Microsoft is now past its prime and everyone will eventually move on to another operating system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt depth-4" id="comment-1327575">
				<div id="div-comment-1327575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1327575">
			March 2, 2018 at 10:42 pm</a>		</div>

		<p>That&#8217;s not what RC said. UAC is a mean of traversing the security boundary instead of being one. It is like saying &#8220;Jeff is a border patrol, not the border.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1326875">
				<div id="div-comment-1326875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1326875">
			February 27, 2018 at 5:59 pm</a>		</div>

		<p>This sounds similar to a case where &#8220;if the domain logon script points to DFS share and you can somehow change the mount point to point to rogue share, you&#8217;re doomed&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1326885">
				<div id="div-comment-1326885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1326885">
			February 27, 2018 at 8:07 pm</a>		</div>

		<p>&#8220;Unsigned MSI&#8221; Meh. Most MSIs I encounter are unsigned these days.</p>
<p>&#8220;put it on an insecure share&#8221; &#8230; &#8220;installed by group policy&#8221;</p>
<p>There&#8217;s your other side of the airtight hatchway right there.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1326965">
				<div id="div-comment-1326965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1326965">
			February 28, 2018 at 1:52 am</a>		</div>

		<p>If you have a signed MSI package installed and then try to install an MSI package that claims to be an update for the first one, but is signed by a completely different entity, what would happen?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-even depth-1" id="comment-1326935">
				<div id="div-comment-1326935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1326935">
			February 27, 2018 at 10:59 pm</a>		</div>

		<p>Off topic, but I want to discuss <a href="https://blogs.technet.microsoft.com/exchange/2015/05/01/new-support-policy-for-repaired-exchange-databases/" rel="nofollow">https://blogs.technet.microsoft.com/exchange/2015/05/01/new-support-policy-for-repaired-exchange-databases/</a> . I agree that it is probably not a security issue, but has any kind of fuzzing been done on Exchange databases?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher even thread-odd thread-alt depth-1" id="comment-1327325">
				<div id="div-comment-1327325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180227-00/?p=98115#comment-1327325">
			March 1, 2018 at 1:49 pm</a>		</div>

		<p>I would argue that given known system administrators, that at the point in time the MSI is added to a group policy a cryptographic hash / signature should be generated, and then when machines join you probably ought to check that the MSI actually is the same as the one you intended.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

