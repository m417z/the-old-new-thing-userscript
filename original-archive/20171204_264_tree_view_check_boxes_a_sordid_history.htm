<html>
<head>
<title>Tree view check boxes: A sordid history</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Tree view check boxes: A sordid history</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 4, 2017 / year-entry #265</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171204-00/?p=97515</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">How we got into the mess we did.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Tree view check boxes were not part of the original
design of tree view controls,
so people who needed check boxes rolled their own.
At some point, somebody decided to do people a favor
and move that code into the tree view,
but did so in a way that preserved the way
an external consumer would add check boxes,
rather than integrating it with the tree view.
I don't know whether this was due to simplicity
of implementation (just taking existing code
and moving it into the tree view control),
or in order to preserve maximum compatibility
with the existing code base of people using the
external helper library
(so you can tell people,
"Just set this style and everything works the
same as the library you are already using").
Or most likely both.
</p>
<p>
One part of the craziness enters the picture
because the tree view
needs to know how big to make the check boxes.
If you have images associated with each item
(which the tree view control calls the
"normal image list"),
then the check boxes should match the size of the
images.
But if you don't have any images, then the check boxes
should match the system small icon size.
The tree view cannot see into the future to know
whether you are ever going to set the normal image list,
so you need to give the tree view a signal
to say "Okay, you can create the check boxes now."
</p>
<p>
Another part of the craziness is the fact that
an item with a state image index of zero gets no
state image.
Since zero is the default state image index,
it would mean that by default, even if you enable
check boxes, you won't get any check boxes.
Which is kind of unexpected.
Therefore, the tree view control, as a courtesy,
sets all the state image indices to 1 when it
enables check boxes,
thereby setting all the items into the unchecked state,
which is a much more reasonable default than
"no check box at all."
</p>
<p>
Given that the check boxes need to be created after
the normal image list is set,
it doesn't make sense to set the style at control
creation time,
because the control can't actually create the check boxes
at creation time
since you clearly haven't satisfied the prerequisites yet.
</p>
<p>
In retrospect, the use of a window style to trigger
the creation of check boxes was a bad idea.
It probably should have been a message like
<code>TVM_</code><code>ACTIVATE&shy;CHECK&shy;BOXES</code>.
That makes it clearer that you need to prepare the tree
view control, and then send the message to tell the
control,
"Okay, I'm all set. Go create the check boxes."
</p>
<p>
But it's a style, and we have to live with that.
The tree view control
responds to <i>changes</i>
in the
<code>TVS_</code><code>CHECK&shy;BOXES</code> style
to initialize check box operations,
because that's how things worked manually:
When you manually created a tree view with check boxes,
you created the tree view, and then added the check boxes.
</p>
<p>
That's why you have to set the style programmatically
rather than doing so in the dialog template.
If you set it in the dialog template, then the
style is set at creation and no change is ever observed.
If you were manually creating the tree view with check boxes,
you had to add the check boxes later,
and that's how the code was migrated into the tree view control.
</p>
<p>
And the act of showing the tree view control for the first
time causes all the check boxes to reset because the
rendering code has a special test that says,
"If the
<code>TVS_</code><code>CHECK&shy;BOXES</code> style
is set, and I never observed it being set,
then go and initialize the check boxes right now,
before it's too late!"
And one of steps in initializing the check boxes
is setting all of the check box states get to unchecked.
If it didn't do that, then there wouldn't be any check boxes
at all, because the default state image for a tree view item
is "blank".
</p>
<p>
But this means that when you add an item to the tree view,
and you say that you don't want a state image,
the tree view will say,
"You said you wanted check boxes,
but now you're adding an item with no check box at all.
I'm going to assume you simply forgot to specify that
you wanted an unchecked check box,
so I'll give you an unchecked check box."
</p>
<p>
If you really did want to add an item with no check box at all,
then you need to add it normally (whereupon it will be given
an unchecked check box),
and then clear the state image.
</p>
<pre>
// First add the item normally.
// The tree view control will assign the unchecked check box
// state if you didn't specify a state or specified a state
// of zero.
HTREEITEM hti = TreeView_InsertItem(hwndTV, &amp;tvis);

// Then explicitly remove the state image.
TreeView_SetItemState(hwndTV, hti,
                      INDEXTOSTATEIMAGEMASK(0),
                      TVIS_STATEIMAGEMASK);
</pre>
<p>
There's another quirk of the
<code>TVS_</code><code>CHECK&shy;BOXES</code> style:
In versions prior to Windows Vista,
the check boxes are created when the normal image list
changes from null to non-null.
And if you change it twice, then it creates the check boxes
twice (and leaks the first one).
</p>
<p>
This leak was fixed in Windows Vista in
version 6 of the common controls.
From Windows Vista onward, if you use version 6
of the common controls, the check boxes will 
not be recreated if you set the normal image list
more than once.
</p>
<p>
Given all these crazy behaviors, the best way to set up
a tree view with check boxes is to do the following,
in order:
</p>
<ul>
<li>
    Create the control without the <code>TVS_</code><code>CHECK&shy;BOXES</code>
    style.
</li>
<li>
    Set the normal image list, if you want one.
</li>
<li>
    Turn on the check boxes,
    either by setting the
    <code>TVS_</code><code>CHECK&shy;BOXES</code> style
    (if all you want is unchecked and checked)
    or setting one or more of
    the <code>TVS_</code><code>EX_</code><code>XXX&shy;CHECK&shy;BOXES</code>
    styles
    (if you want other states, too).
</li>
<li>
    Do not touch any of the checkbox-related styles any more.
    You get one chance, and that's it.
</li>
<li>
    If in the future you need to change the normal image list,
    change it from a non-null image list to another
    non-null image list.
    Do not change it to null, and then change it to non-null.
    This avoids the leak mentioned above.
</li>
<li>
    Add your items.
</li>
<li>
    If you need to add an item with no check box at all,
    first add it normally (whereupon it gets an empty check box
    assigned automatically),
    and then remove the check box manually, as noted above.
</li>
</ul>
<p>
Wait, what are these
<code>TVS_</code><code>EX_</code><code>XXX&shy;CHECK&shy;BOXES</code>
extended styles?
We'll look at those next time.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-ajgelado even thread-even depth-1 parent" id="comment-1317445">
				<div id="div-comment-1317445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Antonio+%27Grijan%27' rel='external nofollow' class='url'>Antonio 'Grijan'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171204-00/?p=97515#comment-1317445">
			December 4, 2017 at 10:42 am</a>		</div>

		<p>Frankly, this series could be renamed to &#8220;how not to add a feature to a control&#8221;. Given the care put by Microsoft in the design of the public interfaces (APIs, message model, etc.) of Windows and its user interface library, it&#8217;s surprising this got into production without raising some eyebrows.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong odd alt depth-2" id="comment-1317466">
				<div id="div-comment-1317466" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171204-00/?p=97515#comment-1317466">
			December 4, 2017 at 6:18 pm</a>		</div>

		<p>Btw, I&#8217;d be interested to know how Microsoft staffs did their code review in the old days (at the time like Win2.X or DOS). Did they only get review when there&#8217;s some bad smell of code detected by seniors or was there routine sampled checks?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1317485">
				<div id="div-comment-1317485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171204-00/?p=97515#comment-1317485">
			December 5, 2017 at 5:43 am</a>		</div>

		<p>Well, as Raymond says if you understand the history you can understand why the tradeoffs that were made at the time may have made sense at the time. First you don&#8217;t have a concept of &#8220;treeview with checkboxes&#8221;, but you do have &#8220;treeview with ability to put images next to items&#8221;. So, people build their own libraries to use checkboxes for those images, in the best way they can (without even using undocumented internal structures). Next, Microsoft when trying to figure out what features to add, decides that since everybody wants treeviews with checkboxes, to go ahead and add them. Then, they have to decide which way to do so: (1) In a way that&#8217;s easily backwards-compatible with the existing codebases and libraries, or (2) In a more &#8220;Windows-native&#8221; way that makes more sense with how other controls are created, meaning that anybody who wants to use it needs to rewrite their code.</p>
<p>Microsoft has historically chosen option (1) whenever possible, as Raymond keeps on demonstrating. Engineering is all about understanding tradeoffs, and I&#8217;m sure that they made this one intentionally.</p>
<p>And if you think there should be an option (3) Do Both, then, well, the feature would have taken at least twice as long and might not have been included in the first place.</p>
<p>There are no good answers. There is merely understanding the tradeoffs one is making.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1317495">
				<div id="div-comment-1317495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">viila</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171204-00/?p=97515#comment-1317495">
			December 5, 2017 at 8:38 am</a>		</div>

		<p>I don&#8217;t see why (3) should take twice as long. There is no reason why the enhancement has to be backwards compatible, adding new proper way wouldn&#8217;t stop the original workaround from working and the workaround that existing software already uses is already in place. You don&#8217;t need to do anything, just let it be. (In fact, since it&#8217;s being used by software it has to remain working no matter what you do.) Then implement (2) in the proper way.</p>
<p>Old software and people who like the old libraries continue to work as they always have. New software can take advantage of the new Right Way(tm) to do things.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1317525">
				<div id="div-comment-1317525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171204-00/?p=97515#comment-1317525">
			December 5, 2017 at 8:14 pm</a>		</div>

		<p>Realistically, there is no option 2. Option 1 was &#8220;Hey, our team made a nice routine to add checkboxes to the treeview last week. I can put it into common controls with an hour or two of work, maybe, save everyone the hassle in the future.&#8221; Option 3 involves tens of man-hours in meetings to design it robustly, then more hours to code it from scratch. Minimal effort won, in a way that it probably wouldn&#8217;t now.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-1317455">
				<div id="div-comment-1317455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171204-00/?p=97515#comment-1317455">
			December 4, 2017 at 12:31 pm</a>		</div>

		<p>I wonder if it is possible to go through NULL when setting a new image list. The idea is ImageList_Destroy(TreeView_SetImageList(hwndTV, nullptr, TVSIL_STATE)); TreeView_SetImageList(hwndTV, newImageList, TVSIL_STATE);</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

