<html>
<head>
<title>How are BitBlt raster opcodes calculated?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How are <CODE>BitBlt</CODE> raster opcodes calculated?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 28, 2018 / year-entry #121</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180528-00/?p=98845</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The complicated language of raster operation codes.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Commenter R P asks 
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180209-00/?p=97995#comment-1325265">
what the low-order 16 bits of the
<code>BitBlt</code> raster opcodes mean</a>.
</p>
<p>
<a HREF="https://msdn.microsoft.com/en-us/library/windows/desktop/dd145130(v=vs.85).aspx">
The documentation explains</a>
that the high-order 16 bits of the raster opcode are the
zero-extended 8-bit value that represents the
result of the raster operation 
given the 8 combinations of three binary inputs
(pattern, source, and destination).
This is the easy part to understand.
</p>
<p>
The documentation also says that the low-order 16 bits
are an operation code,
but gives no information as to how the operation code
is determined.
</p>
<p>
Okay, let's dig through the history.
</p>
<p>
Initially, the <code>BitBlt</code> raster opcodes
were only 16-bit values,
consisting of the operation codes.
The higher-order 16 bits were added later
because it turns out that people preferred table lookups
to parsing operation codes.
</p>
<p>
Okay, that's enough beating around the bush.
How do I parse the operation codes?
</p>
<p>
The operation code is interpreted as follows:
</p>
<table CLASS="cp3" BORDER="1" CELLPADDING="3" STYLE="border-collapse: collapse;text-align: center">
<tr>
<th STYLE="width: 10pt">15</th>
<th STYLE="width: 10pt">14</th>
<th STYLE="width: 10pt">13</th>
<th STYLE="width: 10pt">12</th>
<th STYLE="width: 10pt">11</th>
<th STYLE="width: 10pt">10</th>
<th STYLE="width: 10pt"> 9</th>
<th STYLE="width: 10pt"> 8</th>
<th STYLE="width: 10pt"> 7</th>
<th STYLE="width: 10pt"> 6</th>
<th STYLE="width: 20pt"> 5</th>
<th STYLE="width: 10pt"> 4</th>
<th STYLE="width: 10pt"> 3</th>
<th STYLE="width: 10pt"> 2</th>
<th STYLE="width: 10pt"> 1</th>
<th STYLE="width: 10pt"> 0</th>
</tr>
<tr>
<td COLSPAN="2">op5</td>
<td COLSPAN="2">op4</td>
<td COLSPAN="2">op3</td>
<td COLSPAN="2">op2</td>
<td COLSPAN="2">op1</td>
<td>op6</td>
<td COLSPAN="3">template</td>
<td COLSPAN="2">bias</td>
</tr>
</table>
<p>
Operations 1 through 5 select one of the following
logical operations:
</p>
<table CLASS="cp3" BORDER="1" CELLPADDING="3" STYLE="border-collapse: collapse">
<tr>
<th>Value</th>
<th>Operation</th>
<th>Abbreviation</th>
</tr>
<tr>
<td>0</td>
<td>not</td>
<td>n</td>
</tr>
<tr>
<td>1</td>
<td>exclusive or</td>
<td>x</td>
</tr>
<tr>
<td>2</td>
<td>or</td>
<td>o</td>
</tr>
<tr>
<td>3</td>
<td>and</td>
<td>a</td>
</tr>
</table>
<p>
Operation 6 encodes an optional final <i>not</i> operation.
</p>
<table CLASS="cp3" BORDER="1" CELLPADDING="3" STYLE="border-collapse: collapse">
<tr>
<th>Value</th>
<th>Operation</th>
<th>Abbreviation</th>
</tr>
<tr>
<td>0</td>
<td>no operation</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>1</td>
<td>not</td>
<td>n</td>
</tr>
</table>
<p>
The operations imply the number of input parameters required.
Each binary operation pops two arguments off the stack and pushes
the result back onto the stack, for a net reduction of one.
The unary <i>not</i> operation pops one argument off the stack and
pushes the result back onto the stack, for no net change.
And when we're finished, we want one final result on the stack.
Therefore, the number of items that need to be placed onto the stack
is one more than the number of binary operations.
</p>
<p>
The template and bias tell you what those parameters are.
First, the template selects one of the following sequences of elements.
</p>
<table CLASS="cp3" BORDER="1" CELLPADDING="3" STYLE="border-collapse: collapse">
<tr>
<th>Value</th>
<th>Template</th>
</tr>
<tr>
<td>0</td>
<td>SPDD</td>
</tr>
<tr>
<td>1</td>
<td>SPD</td>
</tr>
<tr>
<td>2</td>
<td>SDP</td>
</tr>
<tr>
<td>3</td>
<td>(not used)</td>
</tr>
<tr>
<td>4</td>
<td>(not used)</td>
</tr>
<tr>
<td>5</td>
<td>SSP*DS</td>
</tr>
<tr>
<td>6</td>
<td>SSP*PDS</td>
</tr>
<tr>
<td>7</td>
<td>SSD*PDS</td>
</tr>
</table>
<p>
Two of the templates are not currently used and are reserved
for future expansion.
</p>
<p>
The bias specifies how many initial template elements to ignore.
After that, take the template elements until you have consumed
one more than the number of binary operations.
Also take the asterisk, if you encounter one.
And if you run out of template elements, then start over from
the beginning.
</p>
<p>
Okay, now we put all the pieces together.
</p>
<ul>
<li>For each template element:</li>
<ul>
<li>If it is a letter, then push that input onto the stack.</li>
<li>If it is an asterisk, then perform the next operation.</li>
</ul>
<li>After you have used up all the template elements,
    perform all of the remaining operations.</li>
<li>When you're done, there should be one value left on the stack.
    That is the result of the <code>BitBlt</code> operation.</li>
</ul>
<p>
Consider the raster opcode
<code>0x00010289</code>.
The operation index is 1,
which decodes as follows:
</p>
<table CLASS="cp3" BORDER="1" CELLPADDING="3" STYLE="border-collapse: collapse">
<tr>
<th>P</th>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<th>S</th>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<th>D</th>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr STYLE="border-top: solid 2px black">
<th>Result</th>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
</table>
<p>
The
operation code is <code>0x0289</code>,
which decodes as follows:
</p>
<table CLASS="cp3" BORDER="1" CELLPADDING="3" STYLE="border-collapse: collapse;text-align: center">
<tr>
<th STYLE="width: 10pt">15</th>
<th STYLE="width: 10pt">14</th>
<th STYLE="width: 10pt">13</th>
<th STYLE="width: 10pt">12</th>
<th STYLE="width: 10pt">11</th>
<th STYLE="width: 10pt">10</th>
<th STYLE="width: 10pt"> 9</th>
<th STYLE="width: 10pt"> 8</th>
<th STYLE="width: 10pt"> 7</th>
<th STYLE="width: 10pt"> 6</th>
<th STYLE="width: 20pt"> 5</th>
<th STYLE="width: 10pt"> 4</th>
<th STYLE="width: 10pt"> 3</th>
<th STYLE="width: 10pt"> 2</th>
<th STYLE="width: 10pt"> 1</th>
<th STYLE="width: 10pt"> 0</th>
</tr>
<tr>
<td COLSPAN="2">op5</td>
<td COLSPAN="2">op4</td>
<td COLSPAN="2">op3</td>
<td COLSPAN="2">op2</td>
<td COLSPAN="2">op1</td>
<td>op6</td>
<td COLSPAN="3">template</td>
<td COLSPAN="2">bias</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td COLSPAN="2">0</td>
<td COLSPAN="2">0</td>
<td COLSPAN="2">0</td>
<td COLSPAN="2">2</td>
<td COLSPAN="2">2</td>
<td>0</td>
<td COLSPAN="3">2</td>
<td COLSPAN="2">1</td>
</tr>
<tr>
<td COLSPAN="2">n</td>
<td COLSPAN="2">n</td>
<td COLSPAN="2">n</td>
<td COLSPAN="2">o</td>
<td COLSPAN="2">o</td>
<td>&nbsp;</td>
<td COLSPAN="3">SDP</td>
<td COLSPAN="2">1</td>
</tr>
</table>
<p>
There are two binary operation codes (the two <i>or</i> operations),
so we will need three parameters.
</p>
<ul>
<li>The bias tells us to skip the first template element,
    so we skip the S.</li>
<li>The next element in the template is a D, so we push the destination.</li>
<li>The next element in the template is a P, so we push the pattern.</li>
<li>We have run out of template elements, so we wrap around and
    see that we have an S, so we push the source.</li>
<li>Now to use up the remaining operations, in order:</li>
<li>Operation 1 tells us to pop the top two values from the stack,
    <i>or</i> them together, and push the result back onto the stack.</li>
<li>Operation 2 tells us to pop the top two values from the stack,
    <i>or</i> them together, and push the result back onto the stack.</li>
<li>Operation 3 tells us to pop the top value from the stack,
    <i>bitwise-not</i> it, and push the result back onto the stack.</li>
<li>Operation 4 tells us to pop the top value from the stack,
    <i>bitwise-not</i> it, and push the result back onto the stack.</li>
<li>Operation 5 tells us to pop the top value from the stack,
    <i>bitwise-not</i> it, and push the result back onto the stack.</li>
<li>Operation 6 tells us to do nothing.</li>
<li>The final value on the stack is the result of the <code>BitBlt</code>
    operation.</li>
</ul>
<p>
In RPN, this encodes compactly as
<code>DPSoonnn</code>
</p>
<p>
It looks like a lot of work, but that's because I spelled it out in
painstaking detail. A shorter version would be
</p>
<ul>
<li>The template says SDP, and the bias is 1, so we start at the D
    and take three parameters (wrapping around if necessary),
    which gives us <code>DPS</code>.</li>
<li>Then we append the operations, which is <code>oonnn</code>.
</ul>
</p>
<p>
Observe that <code>nn</code> bitwise-negates the top item on the stack,
and then bitwise-negates it again.
The two operations cancel out, which means that any <code>nn</code> sequence
can be optimized out.
In practice, these <code>nn</code> operations will appear at the end.
If you're encoding operations,
and you have an even number of
leftover operation slots, then you pad out the unused
operations with <i>not</i>.
If you have an odd number of leftover operation slots,
then you put <i>not</i> in all but the last slot.
(Operation 6 is the only one that can be left empty.)
</p>
<p>
Removing the redundant </code>nn</code> leaves us with <code>DPSoon</code>,
which matches the value given in
<a HREF="https://msdn.microsoft.com/en-us/library/dd145130(v=vs.85).aspx">
the table</a>.
</p>
<p>
Let's try one of the more complicated operations.
Operation index <code>0xD4</code> is <code>0x00D41D78</code>.
The operation code is <code>0x1D78</code>:
</p>
<table CLASS="cp3" BORDER="1" CELLPADDING="3" STYLE="border-collapse: collapse;text-align: center">
<tr>
<th STYLE="width: 10pt">15</th>
<th STYLE="width: 10pt">14</th>
<th STYLE="width: 10pt">13</th>
<th STYLE="width: 10pt">12</th>
<th STYLE="width: 10pt">11</th>
<th STYLE="width: 10pt">10</th>
<th STYLE="width: 10pt"> 9</th>
<th STYLE="width: 10pt"> 8</th>
<th STYLE="width: 10pt"> 7</th>
<th STYLE="width: 10pt"> 6</th>
<th STYLE="width: 20pt"> 5</th>
<th STYLE="width: 10pt"> 4</th>
<th STYLE="width: 10pt"> 3</th>
<th STYLE="width: 10pt"> 2</th>
<th STYLE="width: 10pt"> 1</th>
<th STYLE="width: 10pt"> 0</th>
</tr>
<tr>
<td COLSPAN="2">op5</td>
<td COLSPAN="2">op4</td>
<td COLSPAN="2">op3</td>
<td COLSPAN="2">op2</td>
<td COLSPAN="2">op1</td>
<td>op6</td>
<td COLSPAN="3">template</td>
<td COLSPAN="2">bias</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td COLSPAN="2">0</td>
<td COLSPAN="2">1</td>
<td COLSPAN="2">3</td>
<td COLSPAN="2">1</td>
<td COLSPAN="2">1</td>
<td>1</td>
<td COLSPAN="3">6</td>
<td COLSPAN="2">0</td>
</tr>
<tr>
<td COLSPAN="2">n</td>
<td COLSPAN="2">x</td>
<td COLSPAN="2">a</td>
<td COLSPAN="2">x</td>
<td COLSPAN="2">x</td>
<td>n</td>
<td COLSPAN="3">SSP*PD</td>
<td COLSPAN="2">0</td>
</tr>
</table>
<p>
There are four binary operations, so we need five parameters.
There is no bias, so we start at the beginning
with <code>SSP</code>.
Next is an asterisk, so we replace it with the first operation,
which is <code>x</code>.
Then we continue with the template, which gives us <code>PD</code>.
And then we perform the leftover operations, which are <code>xaxnn</code>.
The resulting RPN is <code>SSPxPDxaxnn</code>,
which after canceling out the <code>nn</code> leaves
<code>SSPxPDxax</code>.
And this matches the value in the table.
</p>
<p>
If you write a program to apply this algorithm to all
of the raster operations,
you'll find that decoding the operation code results in the
published RPN,
with the exception of operation indices 0 and 255.
</p>
<p>
Let's decode operation index 0, whose operation code is
<code>0x0042</code>.
</p>
<table CLASS="cp3" BORDER="1" CELLPADDING="3" STYLE="border-collapse: collapse;text-align: center">
<tr>
<th STYLE="width: 10pt">15</th>
<th STYLE="width: 10pt">14</th>
<th STYLE="width: 10pt">13</th>
<th STYLE="width: 10pt">12</th>
<th STYLE="width: 10pt">11</th>
<th STYLE="width: 10pt">10</th>
<th STYLE="width: 10pt"> 9</th>
<th STYLE="width: 10pt"> 8</th>
<th STYLE="width: 10pt"> 7</th>
<th STYLE="width: 10pt"> 6</th>
<th STYLE="width: 20pt"> 5</th>
<th STYLE="width: 10pt"> 4</th>
<th STYLE="width: 10pt"> 3</th>
<th STYLE="width: 10pt"> 2</th>
<th STYLE="width: 10pt"> 1</th>
<th STYLE="width: 10pt"> 0</th>
</tr>
<tr>
<td COLSPAN="2">op5</td>
<td COLSPAN="2">op4</td>
<td COLSPAN="2">op3</td>
<td COLSPAN="2">op2</td>
<td COLSPAN="2">op1</td>
<td>op6</td>
<td COLSPAN="3">template</td>
<td COLSPAN="2">bias</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td COLSPAN="2">0</td>
<td COLSPAN="2">0</td>
<td COLSPAN="2">0</td>
<td COLSPAN="2">0</td>
<td COLSPAN="2">1</td>
<td>0</td>
<td COLSPAN="3">0</td>
<td COLSPAN="2">2</td>
</tr>
<tr>
<td COLSPAN="2">n</td>
<td COLSPAN="2">n</td>
<td COLSPAN="2">n</td>
<td COLSPAN="2">n</td>
<td COLSPAN="2">x</td>
<td>&nbsp;</td>
<td COLSPAN="3">SPDD</td>
<td COLSPAN="2">2</td>
</tr>
</table>
<p>
This decodes as <code>DDxnnnn</code>,
which simplifies to <code>DDx</code>,
but the published RPN is just <code>0</code>.
Aha, but we also know that anything <i>xor</i>'d with itself
is zero, so <code>DDx</code> simplifies further to <code>0</code>.
</p>
<p>
Similarly, operation index 255 has operation code <code>0x0062</code>
which decodes as follows:
</p>
<table CLASS="cp3" BORDER="1" CELLPADDING="3" STYLE="border-collapse: collapse;text-align: center">
<tr>
<th STYLE="width: 10pt">15</th>
<th STYLE="width: 10pt">14</th>
<th STYLE="width: 10pt">13</th>
<th STYLE="width: 10pt">12</th>
<th STYLE="width: 10pt">11</th>
<th STYLE="width: 10pt">10</th>
<th STYLE="width: 10pt"> 9</th>
<th STYLE="width: 10pt"> 8</th>
<th STYLE="width: 10pt"> 7</th>
<th STYLE="width: 10pt"> 6</th>
<th STYLE="width: 20pt"> 5</th>
<th STYLE="width: 10pt"> 4</th>
<th STYLE="width: 10pt"> 3</th>
<th STYLE="width: 10pt"> 2</th>
<th STYLE="width: 10pt"> 1</th>
<th STYLE="width: 10pt"> 0</th>
</tr>
<tr>
<td COLSPAN="2">op5</td>
<td COLSPAN="2">op4</td>
<td COLSPAN="2">op3</td>
<td COLSPAN="2">op2</td>
<td COLSPAN="2">op1</td>
<td>op6</td>
<td COLSPAN="3">template</td>
<td COLSPAN="2">bias</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td COLSPAN="2">0</td>
<td COLSPAN="2">0</td>
<td COLSPAN="2">0</td>
<td COLSPAN="2">0</td>
<td COLSPAN="2">1</td>
<td>1</td>
<td COLSPAN="3">0</td>
<td COLSPAN="2">2</td>
</tr>
<tr>
<td COLSPAN="2">n</td>
<td COLSPAN="2">n</td>
<td COLSPAN="2">n</td>
<td COLSPAN="2">n</td>
<td COLSPAN="2">x</td>
<td>n</td>
<td COLSPAN="3">SPDD</td>
<td COLSPAN="2">2</td>
</tr>
</table>
<p>
This decodes as <code>DDxnnnnn</code>,
which simplifies to <code>DDxn</code>,
and since we learned that <code>DDx</code> is <code>0</code>,
this gives us <code>0n</code>,
which simplifies further to just <code>1</code>,
which matches the published RPN.
</p>
<p>
Back to history:
As I noted earlier,
the raster opcodes were initially 16-bit values,
and the idea was that <code>BitBlt</code> implementations
would parse and execute the expressions encoded in the
operation code.
In practice, people just looked up the value in a table
of precomputed operation codes and used that to decide
how to perform the operation.
As a result,
the operation index was added to the raster opcode,
so that implementations who want to use a table lookup have a single
byte to look up instead of having to do a binary search
on the 16-bit operation code.
Both the operation index and operation code are present
so that the values work both with drivers that use lookup tables
and drivers which parse the operation code and execute the
miniature expression language.
</p>
<p>
Over time, the drivers that executed the miniature expression language
died out.
All anybody cares about nowadays is the operation index.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1342935">
				<div id="div-comment-1342935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180528-00/?p=98845#comment-1342935">
			May 28, 2018 at 7:39 am</a>		</div>

		<p>After introducing the index, it became clear that you can only use those 256 combination of opcodes. But, before that, was it legal to use any combination, or were the options limited from the beginning?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1342995">
				<div id="div-comment-1342995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180528-00/?p=98845#comment-1342995">
			May 28, 2018 at 2:42 pm</a>		</div>

		<p>There are 3 binary inputs (source, pattern, destination). Therefore, there are 2^3 = 8 possible input bit patterns, and the 8-bit (256-value) op code is sufficient for a full truth table that specifies the (1-bit) output for all possible combinations of inputs. All binary-valued functions of 3 binary inputs can be written in this form, and since the older encoding only lets you produce functions of those 3 input bits, everything the expression-style encoding can produce has a corresponding truth table.</p>
<p>It&#8217;s not immediately obvious to me whether the expression-like encoding is sufficient to express all possible functions of the 3 bits (although it probably is). The easiest way to do so would probably be to enumerate all 2^16 options and determine the truth table for all of them, and then you can see whether you hit all 256 possible truth tables.</p>
<p>The 8-bit encoding of 3-input truth tables turns turns out to be convenient for hardware &#8211; the implementation is regular, quite small, and fast. It shows up in other places like the Amiga blitter <a href="http://amigadev.elowar.com/read/ADCD_2.1/Hardware_Manual_guide/node011C.html" rel="nofollow">http://amigadev.elowar.com/read/ADCD_2.1/Hardware_Manual_guide/node011C.html</a> or, much more recently, the &#8220;VPTERNLOGD&#8221; / &#8220;VPTERNLOGQ&#8221; instructions in Intel&#8217;s AVX-512. Larger truth tables (4 or 6 bits input, typically) are used as primary building blocks in FPGAs.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-3" id="comment-1343095">
				<div id="div-comment-1343095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180528-00/?p=98845#comment-1343095">
			May 29, 2018 at 7:12 am</a>		</div>

		<p>Clearly the expression-based version was able to encode all 256 operations, seeing as that&#8217;s how it was done before indices were added, and <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd145130(v=vs.85).aspx" rel="nofollow">there&#8217;s a proof via explicit enumeration</a>.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1343045">
				<div id="div-comment-1343045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180528-00/?p=98845#comment-1343045">
			May 29, 2018 at 3:32 am</a>		</div>

		<p>For each bit there are two values for each of P, S and D. You can therefore build a truth table with 8 rows showing the resulting bit for the input bits of P, S and D. (If you design the truth table correctly, you can then read up the result column to obtain the binary raster operation index.) Since there are 2 output values for each of those 8 rows, there are therefore 256 different truth tables and raster operation indexes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1343105">
				<div id="div-comment-1343105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180528-00/?p=98845#comment-1343105">
			May 29, 2018 at 7:14 am</a>		</div>

		<p>You had to use the official operation codes, because, as I noted in the article, drivers in practice did not parse the operation code. They just looked it up in a table. So your operation code had better be in the table.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1343075">
				<div id="div-comment-1343075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180528-00/?p=98845#comment-1343075">
			May 29, 2018 at 6:09 am</a>		</div>

		<p>I am so glad I don&#8217;t have to know any of this stuff, so I can read it for a mere entertainment value, to learn how people of the yore had to blit their bits uphill both ways in the snow, and they liked it!</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1343305">
				<div id="div-comment-1343305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">R P (MSFT)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180528-00/?p=98845#comment-1343305">
			May 29, 2018 at 10:04 am</a>		</div>

		<p>In practice, most of us people of yore just used the predefined values like SRCCOPY or DSTINVERT or whatever. There&#8217;s almost no call for any other ROP codes, but if we needed them we could find them in that table. </p>
<p>So we didn&#8217;t need to know this stuff, which was good because we didn&#8217;t know this stuff. If it was documented anywhere it was only in the DDK (which was more difficult to get in those days.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

