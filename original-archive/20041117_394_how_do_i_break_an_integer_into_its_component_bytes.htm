<html>
<head>
<title>How do I break an integer into its component bytes?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I break an integer into its component bytes?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 17, 2004 / year-entry #395</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Warning: .NET content ahead. For some reason, this gets asked a lot. To break an integer into its component bytes, you can use the BitConverter.GetBytes method: int i = 123456; byte[] bytes = BitConverter.GetBytes(i); After this code fragment, the byte array contains { 0x40, 0xE2, 0x01, 0x00 }. Update 11am: The endian-ness of the result is determined...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Warning: .NET content ahead.
For some reason, this gets asked a lot.
</p>
<p>
To break an integer into its component bytes, you can use
<a HREF="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemBitConverterClassGetBytesTopic.asp">
the BitConverter.GetBytes method</a>:
</p>
<pre>
int i = 123456;
byte[] bytes = BitConverter.GetBytes(i);
</pre>
<p>
After this code fragment, the byte array contains
<code>{&nbsp;0x40, 0xE2, 0x01, 0x00&nbsp;}</code>.
</p>
<p>
<strong>Update</strong> 11am:
The endian-ness of the result is determined by
<a HREF="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfsystembitconverterclassislittleendiantopic.asp">
the
<code>BitConverter.IsLittleEndian</code> property</a>.
Thanks to reader Sean McVey for pointing this out.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-226963">
				<div id="div-comment-226963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">alfons</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-226963">
			November 17, 2004 at 7:59 am</a>		</div>

		<p>Perhaps stupid question: Why in little endian, or is it because of the platform you&#8217;re running it on?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-226993">
				<div id="div-comment-226993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Almost Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-226993">
			November 17, 2004 at 8:13 am</a>		</div>

		<p>.NET is supposed to be platform neutral &#8212; the code should return bytes in the same order irregardless of platform.</p>
<p>Little Endian is an interesting choice though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-227003">
				<div id="div-comment-227003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-227003">
			November 17, 2004 at 8:29 am</a>		</div>

		<p>When talking of bit representations of integers, the second issue (after endianness) is representation of negatives. Is it 2-complement or 1-complement?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227013">
				<div id="div-comment-227013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">alfons</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-227013">
			November 17, 2004 at 8:33 am</a>		</div>

		<p>|the code should return bytes in the<br />
<br />|same order irregardless of platform</p>
<p>This is exactly what I would have guessed, so if that&#8217;s true, the choice for little endianness would be a bit curious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-227023">
				<div id="div-comment-227023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JamesW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-227023">
			November 17, 2004 at 8:41 am</a>		</div>

		<p>I was wondering the same as alfons when I saw this. Is AA&#8217;s explanation correct or is GetBytes platform specific and returning the bytes as they are stored in memory? The linked MSDN documentation seems a bit lacking &#8211; it makes no mention of what byte order to expect.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227043">
				<div id="div-comment-227043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-227043">
			November 17, 2004 at 8:53 am</a>		</div>

		<p>Why everybody looks so surprised being little endian the choice? What were you guys expecting? Network byte order?  What byte order should be the appropiate for a &quot;platform-independent&quot; implementation?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-227083">
				<div id="div-comment-227083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-227083">
			November 17, 2004 at 9:12 am</a>		</div>

		<p>Perhaps they come out big-endian on a big-endian machine. I don&#8217;t have access to one to find out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227093">
				<div id="div-comment-227093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sean McVey</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-227093">
			November 17, 2004 at 9:28 am</a>		</div>

		<p>The documentation for the BitConverter class has an &quot;IsLittleEndian&quot; static property. Presumably, you might want to check that value.</p>
<p>The very idea of looking at the bytes of a conceptual value is inherently platform-specific.</p>
<p>At least they give you some help with this static  property.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-227113">
				<div id="div-comment-227113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Trent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-227113">
			November 17, 2004 at 9:30 am</a>		</div>

		<p>.NET may (supposedly, theoretically) be platform independent, but 99.9999999% of the machines it runs on will be little-endian, so I don&#8217;t find it at all surprising that it was selected.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227223">
				<div id="div-comment-227223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-227223">
			November 17, 2004 at 10:53 am</a>		</div>

		<p>More to the point, you&#8217;re pulling bits out of your int &#8211; surely, that stinks of noodling around on the other side of the abstraction. Inquiring minds want to know: how does it handle negatives? I had the hardest time getting 2s complement ints out of Java, as it didn&#8217;t have a similar method. I mostly stuck the int into a long and did an if x&lt;0, then x+=1&lt;&lt;31. Longs were harder.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-227293">
				<div id="div-comment-227293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Silk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-227293">
			November 17, 2004 at 1:27 pm</a>		</div>

		<p>int it   = 23;<br />
<br />int twos = ~it &#8211; 1</p>
<p>isn&#8217;t it ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227323">
				<div id="div-comment-227323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Bruyere</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-227323">
			November 17, 2004 at 2:24 pm</a>		</div>

		<p>One more reason to learn the basics and use a real programming language like C or C++, where the programmer actually has control over the real data</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-227333">
				<div id="div-comment-227333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-227333">
			November 17, 2004 at 2:27 pm</a>		</div>

		<p>Don&#8217;t know crap about .net/C# so I may be wrong, but it looks to me that it only supports 2&#8217;s compliment by comparing the documentation for:</p>
<p><a target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemint16classminvaluetopic.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemint16classminvaluetopic.asp</a><br />
<br /><a target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemint16classmaxvaluetopic.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemint16classmaxvaluetopic.asp</a></p>
<p>And looking at the mono source code, it looks like this does return it in whatever byte-layout the platform runs on.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227383">
				<div id="div-comment-227383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://andyandy.sprayblogg.no' rel='external nofollow' class='url'>Andreas H&#228;ber</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-227383">
			November 17, 2004 at 4:17 pm</a>		</div>

		<p>You can check out the source of it here: <a target="_new" href="http://dotnet.di.unipi.it/Content/sscli/docs/doxygen/fx/bcl/bitconverter_8cs-source.html" rel="nofollow">http://dotnet.di.unipi.it/Content/sscli/docs/doxygen/fx/bcl/bitconverter_8cs-source.html</a> (from the Microsoft SSCLI). I doubt that it is different in .NET v1.0 and v1.1. Maybe something is changed in .NET v2.0&#8230;</p>
<p>The rest of the answers is in the code ;)</p>
<p>(Btw. comparing the dissasembly of v1.0 vs v2.0(beta) of the class with with Reflector by Lutz Roeder; In v1.0 it is similar to the SSCLI(as expected), but in v2.0(beta!) it is just BitConverter.IsLittleEndian = true; &#8230;strange. But guess there is some #ifdef around the source code now instead.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-227463">
				<div id="div-comment-227463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Keith Hill</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-227463">
			November 17, 2004 at 9:20 pm</a>		</div>

		<p>What I dislike about BitConverter is that it is a static class.  Yeah sure, 99.9999% of machines .NET runs on are little endian.  However there are plenty of binary files out there standardized on BigEndian.  When parsing those files it sure would be nice to be able to create a &quot;BigEndian&quot; BitConverter but alas it can&#8217;t be done.  Bummer. BTW,</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227473">
				<div id="div-comment-227473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Keith Hill</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-227473">
			November 17, 2004 at 9:20 pm</a>		</div>

		<p>Doh!  Didn&#8217;t finish that last post.  That same applies to BinaryReader and BinaryWriter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-227483">
				<div id="div-comment-227483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dominic Cronin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-227483">
			November 17, 2004 at 11:30 pm</a>		</div>

		<p>Never mind 99.whatever % of machines. If Windows has to run on a bass-ackwards platform, the place to fix it would surely be in the hardware abstraction layer. That means 100% of machines running dotnet will be little-endian by the time anyone&#8217;s talking to the OS. </p>
<p>Of course, if you&#8217;re implementing dotnet on a non-Windows system, this is left as &quot;an exercise for the student&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227493">
				<div id="div-comment-227493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://andyandy.sprayblogg.no' rel='external nofollow' class='url'>Andreas H&#228;ber</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-227493">
			November 17, 2004 at 11:59 pm</a>		</div>

		<p>You can always do the bitconversion on your system(which gets it in the endianess of your system of course), and then convert it to network order when you need to send it (System.Net.IPAddress.HostToNetworkOrder).</p>
<p>I guess the rationale is that when you&#8217;re on a little endian system you should work in little endian too :) Maybe <a target="_new" href="http://blogs.msdn.com/BCLTeam/" rel="nofollow">http://blogs.msdn.com/BCLTeam/</a> has the answer?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-227503">
				<div id="div-comment-227503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-227503">
			November 18, 2004 at 12:20 am</a>		</div>

		<p>&quot;.NET is supposed to be platform neutral&quot;</p>
<p>Only in theory, it&#8217;s meant to give the illusion that you can develop applications for Windows without vendor lock-in.</p>
<p>I however, see no reason whatsoever for MS to promote platform independent software, since that would hurt it&#8217;s strangle hold on the OS market.</p>
<p>Sure, there will be VM&#8217;s on other platforms, but will the essential API&#8217;s be available ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227583">
				<div id="div-comment-227583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve P</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041117-00/?p=37283#comment-227583">
			November 18, 2004 at 2:32 pm</a>		</div>

		<p>Michael: -x = ~x + 1<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

