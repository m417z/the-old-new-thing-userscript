<html>
<head>
<title>Non-capturing C++ lambdas can be converted to a pointer to function, but what about the calling convention?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Non-capturing C++ lambdas can be converted to a pointer to function, but what about the calling convention?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 20, 2015 / year-entry #39</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>24</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">First, let's look at how lambdas are implemented in C++. It is similar in flavor to the way lambdas are implemented in C#, but the details are all different. When the C++ compiler encounters a lambda expression, it generates a new anonymous class. Each captured variable becomes a member of that anonymous class, and the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
First, let's look at how lambdas are implemented in C++.
</p>
<p>
It is similar in flavor to
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2006/08/02/686456.aspx">
the way lambdas are implemented
in C#</a>,
but the details are all different.
</p>
<p>
When the C++ compiler encounters a lambda expression,
it generates a new anonymous class.
Each captured variable becomes a member of that anonymous class,
and the member is initialized from the variable in the outer scope.
Finally, the anonymous class is given an
<code>operator()</code> implementation whose parameter list
is the parameter list of the lambda,
whose
body is the lambda body,
and whose return value is the lambda return value.
</p>
<p>
I am simplifying here.
You can read the C++ language specification for gory details.
The purpose of this discussion is
just to give a conceptual model for how lambdas work
so we can get to answering the question.
The language also provides for syntactic sugar to
infer the lambda return type
and capture variables implicitly.
Let's assume all the sugar has been applied so that everything
is explicit.
</p>
<p>
Here's a basic example:
</p>
<pre>
void ContainingClass::SomeMethod()
{
 int i = 0, j = 1;
 auto f = [this, i, &amp;j](int k) -&gt; int
    { return this-&gt;calc(i + j + k); };
 ...
}
</pre>
<p>
The compiler internally converts this to
something like this:
</p>
<pre>
void ContainingClass::SomeMethod()
{
 int i = 0, j = 1;

 // Autogenerated by the compiler
 <font COLOR=blue>class AnonymousClass$0
 {
 public:
  AnonymousClass$0(ContainingClass* this$, int i$, int&amp; j$) :
   this$0(this$), i$0(i$), j$0(j$) { }
  int operator</font>(int k) <font COLOR=blue>const</font>
     { return this$0-&gt;calc(i$0 + j$0 + k); }
 <font COLOR=blue>private:
  ContainingClass* this$0; // this captured by value
  int i$0;                 // i captured by value
  int&amp; j$0;                // j captured by reference
 };</font>

 auto f = <font COLOR=blue>AnonymousClass$0</font>(this, i, j);
 ...
}
</pre>
<p>
We are closer to answering the original question.
but we're not there yet.
</p>
<p>
As a special bonus:
If there are no captured variables, then there is
an additional conversion operator that can convert the lambda
to a pointer to a nonmember function.
This is possible only in the case of no captured variables
because captured variables would require an
<code>AnonymousClass$0</code> instance parameter,
but there is nowhere to pass it.
</p>
<p>
Here's a lambda with no captured variables.
</p>
<pre>
void ContainingClass::SomeMethod()
{
 auto f = [](int k) -&gt; int { return calc(k + 42); };
 ...
}
</pre>
<p>
The above code gets transformed to
</p>
<pre>
void ContainingClass::SomeMethod()
{
 class AnonymousClass$0
 {
 public:
  AnonymousClass$0()  { }
  <font COLOR=blue>operator int (*)(int k) { return static_function; }</font>
  int operator(int k) <font COLOR=blue>const</font> { return calc(k + 42); }
 private:
  static int static_function(int k) { return calc(k + 42); }
 };

 auto f = AnonymousClass$0();
 ...
}
</pre>
<p>
Okay, now we can get to the actual question:
How can I specify
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/01/27/10492898.aspx#10493271">
the calling convention for this implicit conversion
to a pointer to nonmember function</a>?
</p>
<p>
(Note that calling conventions are not part of the C++ standard,
so this question is necessarily a platform-specific question.)
</p>
<p>
The Visual C++ compiler automatically
<a HREF="http://blogs.msdn.com/b/vcblog/archive/2011/09/12/10209291.aspx">
provides conversions for every calling convention</a>.
So with Visual C++, the transformed code actually looks like this:
</p>
<pre>
void ContainingClass::SomeMethod()
{
 class AnonymousClass$0
 {
 public:
  AnonymousClass$0()  { }
  <font COLOR=blue>operator int (__cdecl *)(int k) { return cdecl_static_function; }
  operator int (__stdcall *)(int k) { return stdcall_static_function; }
  operator int (__fastcall *)(int k) { return fastcall_static_function; }</font>
  int operator(int k) { return cdecl_static_function(k); }
 private:
  static int __cdecl cdecl_static_function(int k) { return calc(k + 42); }
  static int __stdcall stdcall_static_function(int k) { return calc(k + 42); }
  static int __fastcall fastcall_static_function(int k) { return calc(k + 42); }
 };

 auto f = AnonymousClass$0();
 ...
}
</pre>
<p>
In other words, the compiler creates all the conversions,
just in case.
(The versions you don't use will be removed by the linker.)
</p>
<p>
But only for noncapturing lambdas.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1" id="comment-1176683">
				<div id="div-comment-1176683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176683">
			February 20, 2015 at 7:41 am</a>		</div>

		<p>I suspect there is the implicit asterisk of x86-64 where windows uses only one calling convention? or does the compiler create a __vectorcall overload in that case?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1176693">
				<div id="div-comment-1176693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176693">
			February 20, 2015 at 8:24 am</a>		</div>

		<p>It&#39;s theoretically possible for the compiler to generate conversions for capturing lambdas, but it requires being able to generate and execute new machine code at runtime &mdash; easy enough on normal OSes (e.g. VirtualProtect), but not possible on platforms like Xbox 360 where you can&#39;t create new executable pages at runtime for security reasons.</p>
<p>To convert a capturing lambda to a bare function pointer, you first create a static function that takes an extra context pointer, like in the non-capturing case. &nbsp;Then, on each conversion attempt, you allocate a new trampoline by copying a trampoline template for your CPU and fill in a pointer-sized placeholder with the context pointer. &nbsp;The trampoline is a short piece of code which loads that context pointer into the first argument&#39;s location, possibly adjusts the other arguments if necessary, and then jumps to the static function. &nbsp;Then of course at some pointer later on in the program, you have to deallocate the memory you allocated for the trampoline when the lambda is destroyed.</p>
<p>The GNU foreign function call library (<a href="http://www.gnu.org/software/libffcall/" rel="nofollow" target="_new">http://www.gnu.org/&#8230;/libffcall</a>) is capable of doing this on a number of systems.</p>
<div class="post">[<em>It&#39;s more than just creating the trampoline. You also have to register the trampoline with the operating system so that it knows how to unwind the code, should an exception be taken inside the trampoline. (Also, C++ needs to support machines that have separate address spaces for code and data.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1176703">
				<div id="div-comment-1176703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rodrigo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176703">
			February 20, 2015 at 8:45 am</a>		</div>

		<p>Wow I&#39;m just studying C++ lambdas, very informative post. Thank you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1176713">
				<div id="div-comment-1176713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176713">
			February 20, 2015 at 8:49 am</a>		</div>

		<p>&gt; but it requires being able to generate and execute new machine code at runtime</p>
<p>Inability to do that results in me not selecting that platform as a target.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1176723">
				<div id="div-comment-1176723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176723">
			February 20, 2015 at 9:22 am</a>		</div>

		<p>@Adam Rosenfield: How does that interact with NX/DEP?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1176733">
				<div id="div-comment-1176733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176733">
			February 20, 2015 at 9:39 am</a>		</div>

		<p>@Kevin: It&#39;s NX and DEP that make the VirtualProtect call necessary; previously your run-of-the-mill dynamic allocation was readable, writable, and executable. &nbsp;Anyway, W^X is more interesting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1176743">
				<div id="div-comment-1176743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176743">
			February 20, 2015 at 9:43 am</a>		</div>

		<p>@Joshua: iOS is another such platform. &nbsp;iOS is a pretty big market you&#39;re ignoring, from a business point-of-view.</p>
<p>@Kevin: When you control all of the code, it&#39;s pretty easy to call VirtualAlloc(PAGE_READWRITE), copy in the desired machine code, and VirtualProtect(PAGE_EXECUTE_READ) on a page of memory. &nbsp;No problems with NX/DEP when doing that. &nbsp;For an attacker, though, it&#39;s much harder to write an exploit which performs all of those operations while copying in a piece of untrusted attacker code during the step where the memory is writeable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1176753">
				<div id="div-comment-1176753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176753">
			February 20, 2015 at 10:29 am</a>		</div>

		<p>Awesome article. &nbsp;It&#39;s nice to see the mechanisms for these features brought out from &quot;behind the curtain&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1176773">
				<div id="div-comment-1176773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176773">
			February 20, 2015 at 12:35 pm</a>		</div>

		<p>A very useful feature it is too. Being able to use a lambda with APIs like EnumWindows is really nice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1176783">
				<div id="div-comment-1176783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176783">
			February 20, 2015 at 12:59 pm</a>		</div>

		<p>What about __vectorcall? &nbsp;Since now there are 6 calling conventions, 4 of which are relevant here&#8230;</p>
<p>@Joshua: Beyond the platforms already mentioned, Windows in Metro applications also prohibits marking pages executable&#8230;at least for the approval process. &nbsp;Nothing actually stops it at the moment. &nbsp;The NT kernel in 8.1 has a flag to prohibit a process from marking pages executable, but it&#39;s not used in anything I know of, because it breaks DLL relocation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1176793">
				<div id="div-comment-1176793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176793">
			February 20, 2015 at 1:18 pm</a>		</div>

		<p>@Myria, et all: Don&#39;t care about mobile phone as target. They get fed webpages anyway. Don&#39;t care about Metro either for the same reason.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1176803">
				<div id="div-comment-1176803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176803">
			February 20, 2015 at 3:10 pm</a>		</div>

		<p>On __vectorcall: it looks like the conversion operator is there (at least on 2015), but possibly not entirely supported on x86. At the very least, converting the introductory __vectorcall example so that AddParticles is a lambda results in these compile errors:</p>
<p>error C2719: &#39;p1&#39;: formal parameter with __declspec(align(&#39;16&#39;)) won&#39;t be aligned</p>
<p>error C2719: &#39;p2&#39;: formal parameter with __declspec(align(&#39;16&#39;)) won&#39;t be aligned</p>
<p>error C2719: &#39;unnamed-parameter&#39;: formal parameter with __declspec(align(&#39;16&#39;)) won&#39;t be aligned</p>
<p>On x64, the codegen for calling a normal __vectorcall function through a function pointer and calling a lambda converted to a __vectorcall function pointer through a function pointer seem similar.</p>
<p>(This is what I&#39;m referring to as the &quot;introductory __vectorcall example&quot; <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/vcblog/archive/2013/07/12/introducing-vector-calling-convention.aspx">blogs.msdn.com/&#8230;/introducing-vector-calling-convention.aspx</a> )</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1176763">
				<div id="div-comment-1176763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176763">
			February 20, 2015 at 11:44 am</a>		</div>

		<p>@Adam Rosenfield: &quot;It&#39;s theoretically possible&#8230;&quot;</p>
<p>I actually wrote a nifty little library that does exactly that: It uses libffi to dynamically allocate some memory for a thunk, generate code into it that pushes the extra parameter then calls the function, and then marks it as executable.</p>
<p>(I haven&#39;t actually *used* it for anything &#8212; I&#39;m not sure how good of an idea I think it is &#8212; I just wanted to make sure I could do it. :-) If anyone actually wants to use it let me know&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1176813">
				<div id="div-comment-1176813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">not an anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176813">
			February 20, 2015 at 9:03 pm</a>		</div>

		<p>Apologies in advance, but</p>
<p>@Raymond &#8212; considering that Suggestion Box 4 has been closed for a while, how should we get a hold of you regarding topics to cover? &nbsp;One of my fellow TDWTFers stumbled upon an utterly bizarre error message in Windows 7 x64, apparently generated by explorer.exe:</p>
<p>&quot;Too many other files are currently in use by 16-bit programs. &nbsp;Exit one or more 16-bit programs, or increase the value of the FILES command in your Config.sys file.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1176823">
				<div id="div-comment-1176823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176823">
			February 21, 2015 at 2:35 am</a>		</div>

		<p>I&#39;ve noticed that lambdas are calling convention agnostic when I discovered it&#39;s possible to use lambda for WndProc (which requires stdcall). It did work in VS2012, but not in GCC, at least back then.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1176833">
				<div id="div-comment-1176833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176833">
			February 21, 2015 at 12:43 pm</a>		</div>

		<p>not an anon: that message is string 0x2103 from shell32.dll.mui. A quick scan of shell32!_ExecErrorMsgBox shows this is displayed when one of the arguments is 4 (ERROR_TOO_MANY_OPEN_FILES). That function also displays &quot;Windows cannot run this program because it is not in a valid format.&quot; when that argument is 11 (ERROR_BAD_FORMAT), so my guess is that for some reason ShellExecute is returning ERROR_TOO_MANY_OPEN_FILES, and the shell&#39;s message for that situation hasn&#39;t been updated in a long time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-1176853">
				<div id="div-comment-1176853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176853">
			February 23, 2015 at 2:21 am</a>		</div>

		<p>@not an anon, @Mark: The number of handles in a Win32 process is limited to about 16.7 million (very nearly 2^24 &#8211; 1). That&#39;s due to handles being 32-bit values with 8 bits reserved for a handle re-use count. (This is the current architecture: 64-bit code should never assume that the upper 32 bits are unused.) The actual handle tables are allocated from paged pool.</p>
<p>The machine in question either has some Explorer plug-in installed which is leaking handles, or something is leaking paged pool.</p>
<p>In normal use, the likelihood of running out of handles is so low that I&#39;m not surprised that the message hasn&#39;t been updated. This all assumes that it isn&#39;t some rogue plug-in changing the last error code before Explorer itself actually sees it.</p>
<p>Information from <a rel="nofollow" target="_new" href="http://blogs.technet.com/b/markrussinovich/archive/2009/09/29/3283844.aspx">blogs.technet.com/&#8230;/3283844.aspx</a> .</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1176873">
				<div id="div-comment-1176873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176873">
			February 23, 2015 at 6:45 am</a>		</div>

		<p>Mike Dimmick: yeah, I assumed that this would be a plugin, given the improbability of running out of handles and Explorer not dying shortly afterwards. A quick look at some of the custom columns in task manager would be a worthwhile sanity check, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1176883">
				<div id="div-comment-1176883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176883">
			February 23, 2015 at 6:54 am</a>		</div>

		<p>I might be wrong, but I think, converting to nonmember function also requires the calc function, to be static or nonmember function</p>
<p>I think this is also a requirement besides having no captured variables</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1176893">
				<div id="div-comment-1176893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176893">
			February 23, 2015 at 7:23 am</a>		</div>

		<p>@Peter: &quot;I think this is also a requirement besides having no captured variables&quot;</p>
<p>It&#39;s a consequence of &#39;this&#39; basically being a hidden variable; I&#39;m pretty sure Raymond intended that interpretation (indicated by the change in invocation from this-&gt;calc(&#8230;) to just calc(&#8230;)). The standard wouldn&#39;t use that term of course, but I think that&#39;s why it wasn&#39;t mentioned.</p>
<div class="post">[<em>&quot;The language also provides for syntactic sugar to infer the lambda return type and capture variables implicitly. Let&#39;s assume all the sugar has been applied so that everything is explicit.&quot; If &quot;calc&quot; were a nonstatic member function, then &quot;this&quot; would have been captured. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1176903">
				<div id="div-comment-1176903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1176903">
			February 23, 2015 at 9:10 am</a>		</div>

		<p>[It&#39;s more than just creating the trampoline. You also have to register the trampoline with the operating system so that it knows how to unwind the code, should an exception be taken inside the trampoline. (Also, C++ needs to support machines that have separate address spaces for code and data.) -Raymond]</p>
<p>Good point about the OS unwind info. &nbsp;I&#39;m unfamiliar with the implementation details of exactly how those work, but I&#39;d presume that it&#39;s not too difficult to generate the proper machine code which does that correctly for the trampoline (after all, compilers do it all the time). &nbsp;It just makes the machine code a little more complicated than a push+jmp or equivalent.</p>
<p>Re: supporting machines with separate address spaces for code and data, I think that&#39;s pretty much equivalent to my statement that this requires being able to generate and execute new machine code at runtime. &nbsp;You need OS support to copy or move dynamically generated code from the data address space to the code address space, which OSes like Win32/Mac OS X/Linux provide, but some OSes like Xbox 360 and iOS do not provide. &nbsp;If C++ made converting capturing lambdas into bare function pointers a mandatory feature of the spec, then those platforms would not be able to claim 100% support for the spec.</p>
<p>It makes perfect sense that ISO/ANSI decided not to make that a mandatory (or optional) feature of C++11. &nbsp;But even though it&#39;s not part of the spec, it&#39;s possible to implement in a reasonable way on a subset of platforms.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1177003">
				<div id="div-comment-1177003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jingyu9575</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1177003">
			February 24, 2015 at 7:46 am</a>		</div>

		<p>I can&#39;t compile AnonymousClass; the closest code I can get is</p>
<p>&nbsp;(*operator int())(int k) { return static_function; }</p>
<p>&nbsp;int operator () (int k) const { return calc(k + 42); }</p>
<p>which compiles on g++ but fails on clang++ and cl.</p>
<div class="post">[<em>The code was intended to be illustrative, not to be actually compilable. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1177033">
				<div id="div-comment-1177033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1177033">
			February 24, 2015 at 8:19 am</a>		</div>

		<p>[&#8230; should an exception be taken inside the trampoline.]</p>
<p>We could avoid this problem by writing a trampoline that can&#39;t raise any recoverable exceptions. (RIP pointing into free RAM is not recoverable.) This requires register this calling convention on the receiving function (doable if it&#39;s not a COM class) and doesn&#39;t break the rollback code if _chkstk doesn&#39;t (we note that _chkstk uses a register calling convention.)</p>
<p>trampoline:</p>
<p>&nbsp; &nbsp;mov rax, this &nbsp;;this = constant</p>
<p>&nbsp; &nbsp;jmp [rip] &nbsp; &nbsp; &nbsp;;points just past jmp instruction</p>
<p>&nbsp; &nbsp;dq member_function_pointer</p>
<p>Here we take full advantage of the compiler allowed to alter the calling convention within limits.</p>
<div class="post">[<em>You can&#39;t prevent in-page errors. An app could try to recover them by retrying the I/O operation. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1177043">
				<div id="div-comment-1177043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150220-00/?p=44623#comment-1177043">
			February 24, 2015 at 9:46 am</a>		</div>

		<p>[You can&#39;t prevent in-page errors. An app could try to recover them by retrying the I/O operation. -Raymond]</p>
<p>No point. If the data pages are paged out and can&#39;t be paged in, then the swap file is in trouble. Better to fall on the sword now and take load off the swap. KERNEL_DATA_INPAGE_ERROR is coming.</p>
<div class="post">[<em>I&#39;m not saying it&#39;s a good idea. Just that it&#39;s something an app might try. And how about breakpoint exceptions? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

