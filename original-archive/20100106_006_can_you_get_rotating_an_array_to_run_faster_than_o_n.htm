<html>
<head>
<title>Can you get rotating an array to run faster than O(n²)?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Can you get rotating an array to run faster than O(n&#178;)?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 6, 2010 / year-entry #7</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>33</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Some follow-up remarks to my old posting on rotating a two-dimensional array: Some people noticed that the article I linked to purporting to rotate the array actually transposes it. I was wondering how many people would pick up on that. I was surprised that people confused rotating an array (or matrix) with creating a rotation...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Some follow-up remarks to my old posting on
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/09/02/8918130.aspx">
rotating a two-dimensional array</a>:
</p>
<p>
Some people noticed that the article I linked to purporting to rotate
the array actually transposes it.
I was wondering how many people would pick up on that.
</p>
<p>
I was surprised that people confused
rotating an array (or matrix) with creating a rotation matrix.
They are unrelated operations;
the only thing they have in common are the letters r-o-t-a-t-i.
A matrix is a representation of a linear transformation,
and
a rotation matrix is a linear transformation which rotates <i>vectors</i>.
In other words, applying the rotation matrix to a vector produces
a new vector which is a rotated version of the original vector.
The linear transformation is a <i>function</i> of one parameter:
It takes a vector and produces a new vector.
A rotation matrix is a matrix which <i>rotates other things</i>.
Whereas rotating an array is something you do <i>to the array</i>.
The array is the thing being rotated, not the thing doing the rotating.
It didn't even occur to me that people would confuse the two.
It's the difference a phone dial and dialing a phone.
</p>
<p>
Showing that you cannot rotate an array via matrix multiplication
is straightforward.
Suppose there were a matrix <i>R</i> which rotated an array (laid
out in the form of a matrix) clockwise.
The result of rotating the identity matrix would be a
a matrix with 1's along the diagonal
from upper right to lower left, let's call that matrix&nbsp;<i>J</i>.
Then we have <i>RI&nbsp;=&nbsp;J</i>, and therefore <i>R&nbsp;=&nbsp;J</i>.
Now apply&nbsp;<i>R</i> to both sides:
<i>RRI&nbsp;=&nbsp;RJ&nbsp;=&nbsp;I</i>
and therefore <i>R&sup2;&nbsp;=&nbsp;I</i>.
But clearly rotating clockwise twice is not the identity
for&nbsp;<i>n</i>&nbsp;&ge;&nbsp;2.
(Rotating clockwise twice is turning upside-down.)
</p>
<p>
A more mechanical way to see this is to take the equation
<i>R&nbsp;=&nbsp;J</i> and show that <i>J</i>
does not perform the desired operation;
just try it on the matrix with 1 in the upper left entry and 0's everywhere
else.
</p>
<p>
And since it's one of those geeky math pastimes to see
<a HREF="http://blogs.msdn.com/matthew_van_eerde/archive/2008/09/12/rotating-a-matrix-redux.aspx">
how many differents proofs you can come up with for a single result</a>,
the third way to show that rotation cannot be effected by
matrix multiplication is to observe that the transformation is not linear.
(That's the magical algebra-theoretical way of showing it,
which is either <i>so obvious you can tell just by looking at it</i>
or
<i>so obscure it defies comprehension</i>.)
[The transformation viewed as a transformation on matrices rather
than a transformation on column vectors is indeed linear,
but the matrix for that would be an <i>n&sup2;&nbsp;&times;&nbsp;n&sup2;</i>
matrix, and the operation wouldn't be matrix multiplication,
so that doesn't help us here.]
</p>
<p>The last question raised by this exercise was
<a HREF="http://beta.stackoverflow.com/questions/42519/how-do-you-rotate-a-two-dimensional-array">
whether you could do better than <i>O</i>(<i>n</i>&sup2;)</a>.
Computer science students spend so much time trying to push the
complexity of an algorithm down
that they neglect to learn how to tell that you can't go any lower.
In this case, you obviously can't do better than <i>O</i>(<i>n</i>&sup2;)
because every single one of the <i>n</i>&sup2; entries in the array
needs to move (except of course the center element if <i>n</i>&nbsp;is odd).
If you did less than <i>O</i>(<i>n</i>&sup2;) of work,
then for sufficiently large&nbsp;<i>n</i>,
you will end up not moving some array elements, which would be a failure
to complete the required operation.
</p>
<p>
<b>Bonus chatter</b>:
Mind you, you can do better than
<i>O</i>(<i>n</i>&sup2;) if you change the rules of the problem.
For example, if you allow <i>pretending</i> to move the elements,
say by overloading the <code>[]</code> operator,
then you can perform the rotation in
<i>O</i>(1) time by just writing a wrapper:
</p>
<pre>
struct IArray
{
  virtual int&amp; Element(int x, int y) = 0;
  virtual ~IArray() = 0;
};

class RotatedArray : public IArray {
public:
 RotatedArray(IArray *p) : m_p(p) { }
 ~RotatedArray() { delete m_p; }

 int&amp; Element(int x, int y) {
  return m_p-&gt;Element(y, x);
 }
private:
 IArray *m_p;
};

void RotateInPlace(IArray *& p, int N)
{
 p = new RotatedArray(p);
}
</pre>
<p>
This pseudo-rotates the elements by changing the accessor.
Cute but doesn't actually address the original problem,
which said that you were passed an array, not an interface
that simulates an array.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (33)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-800643">
				<div id="div-comment-800643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-800643">
			January 6, 2010 at 7:31 am</a>		</div>

		<p>Correct me if I&#8217;m wrong, but the RotatedArray doesn&#8217;t rotate at all. It flips the array according to the diagonal axis. For example, the item in position 0,0 stays in place where it should be in position n,0</p>
<div class=post>[<i>Congratulations, you found the inside joke (see second paragraph). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-800693">
				<div id="div-comment-800693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">R</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-800693">
			January 6, 2010 at 8:07 am</a>		</div>

		<p>You cannot take ownership of the IArray pointer just like that! This is disgraceful! :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-800713">
				<div id="div-comment-800713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark (The other Mark)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-800713">
			January 6, 2010 at 8:22 am</a>		</div>

		<p>&quot;It&#8217;s the difference a phone dial and dialing a phone.&quot;</p>
<p>Particularly if you remember rotary phone dials.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-800753">
				<div id="div-comment-800753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Duran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-800753">
			January 6, 2010 at 8:54 am</a>		</div>

		<p>You&#8217;re getting a little too meta with your humor, Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-800793">
				<div id="div-comment-800793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-800793">
			January 6, 2010 at 9:42 am</a>		</div>

		<p>This problem is just a bunch of rotations of each 4 elements. But if you want to get fancy, you can: 1) transpose the matrix 2) then mirror it relative to the vertical axis of symmetry. This sequence of operations is equivalent to rotation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-800803">
				<div id="div-comment-800803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">optimize</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-800803">
			January 6, 2010 at 9:45 am</a>		</div>

		<p>Memory writes are not free, they are usually much more expensive than a conditional compare. If the correct value, by coincidence, already exist at the target position, it doesn&#8217;t need to be written there. All memory must be read anyway, only 1 temp value have to be stored in some register.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-800843">
				<div id="div-comment-800843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-800843">
			January 6, 2010 at 10:07 am</a>		</div>

		<p>&gt;Cute but doesn&#8217;t actually address the original problem, which said that you were passed an array, not an interface that simulates an array.</p>
<p>Yes it does. Array means &#8220;something that exports the interface Array&#8221;, you should know that by now. The way the bits are actually stored is unimportant as long as you can get the information in/out fast enough for your purpose. Any large array will be stored with a much greater degree of convolution than the adding of a flag or the changing of a method pointer anyway. You can make the program see a flat array, even if in reality stale pages of it are compressed to avoid hitting the disk. Surely that still qualifies as an array; surely adding an extra flag is a completely permissible solution to the problem.</p>
<div class=post>[<i>What is this &#8220;Array&#8221; interface you talk about? I can&#8217;t find it in my C language reference. &#8220;Array&#8221; is not an interface in Java or C# either. And besides this &#8220;adding a flag&#8221; is not part of the original &#8220;Array&#8221; interface so that wouldn&#8217;t help anyway. Your solution wouldn&#8217;t rotate an Array; it would rotate an &#8220;augmented Array&#8221;. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-800853">
				<div id="div-comment-800853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-800853">
			January 6, 2010 at 10:08 am</a>		</div>

		<p>@optimize,</p>
<p>You forgot that memory writes go to the cache first, and get flushed by a cache line (64 bytes). It&#8217;s pretty likely at least one of items in the line will actually need to be written.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-800893">
				<div id="div-comment-800893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-800893">
			January 6, 2010 at 11:34 am</a>		</div>

		<p>Indeed, would-be optimizers often fail to take into account one or more aspects of the actual hardware.</p>
<p>Which is why the golden rule of optimization is &quot;for the love of god, profile it!&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-800913">
				<div id="div-comment-800913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://windowsmuseum.net.ru/' rel='external nofollow' class='url'>A. Skrobov</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-800913">
			January 6, 2010 at 11:39 am</a>		</div>

		<p>A related task that I was given at an interview: transpose a non-square matrix in-place.</p>
<p>Anyone want to try to solve?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-800923">
				<div id="div-comment-800923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-800923">
			January 6, 2010 at 11:47 am</a>		</div>

		<p>To transpose a matrix quickly, you need to take into account the size of your processor cache; or use a cache oblivious algorithm.</p>
<p>The trivial matrix transposition code will go through the array both in row-major and column-major order. So no matter how the matrix is stored; for sufficiently large matrices, that&#8217;s a cache miss on every second memory access. Ouch!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-800933">
				<div id="div-comment-800933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-800933">
			January 6, 2010 at 11:57 am</a>		</div>

		<p>Why is &#8220;n&#8221; the length of one dimension (and only meaningful for <em>square</em> arrays, not all two-dimensional arrays, though presumably for non-square arrays you would say &#8220;m*n&#8221; instead) rather than the number of elements?</p>
<div class=post>[<i>Because in the original problem statement, &#8220;n&#8221; is the length of one dimension. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-800953">
				<div id="div-comment-800953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-800953">
			January 6, 2010 at 12:33 pm</a>		</div>

		<p>&quot;[What is this &quot;Array&quot; interface you talk about? I can&#8217;t find it in my C language reference. &quot;Array&quot; is not an interface in Java or C# either. And besides this &quot;adding a flag&quot; is not part of the original &quot;Array&quot; interface so that wouldn&#8217;t help anyway. Your solution wouldn&#8217;t rotate an Array; it would rotate an &quot;augmented Array&quot;. -Raymond]&quot;</p>
<p>If your function is defined to return an &quot;Array&quot; which happens to be the rotation of the original one, a custom accessor is easy to do. It&#8217;s all a matter of defining the spec well enough ;)</p>
<p>(Well enough for the implementor at least)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-800993">
				<div id="div-comment-800993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-800993">
			January 6, 2010 at 1:14 pm</a>		</div>

		<p>@J:</p>
<p>Who said you are the implementor? For all you know, you were given a two-dimensional array whose only operations are reading and writing an element by row and column number. And you have to return it in the same format.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-801023">
				<div id="div-comment-801023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-801023">
			January 6, 2010 at 1:25 pm</a>		</div>

		<p>Heh, I didn&#8217;t read the linked article, and I got most of the way through the post saying to myself, &quot;why can&#8217;t it be done in O(n)?&quot; &nbsp;I decided that either 1) I was much more brilliant than Raymond (unlikely), or 2) I was missing something subtle about the definition of &#8216;rotate&#8217; or a problem constraint. &nbsp;Turns out we just didn&#8217;t agree on what &#8216;n&#8217; meant. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-801033">
				<div id="div-comment-801033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">chustar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-801033">
			January 6, 2010 at 2:33 pm</a>		</div>

		<p>One of the reasons I follow this blog so closely is because it allows me to learn a fair amount of new things (even in posts about his nieces).</p>
<p>That said, I&#8217;m not sure I understand how this works exactly.</p>
<p>Several things I noticed:</p>
<p>1) He declared a function inside of a struct.</p>
<p>2) He declared a virtual function to be 0.</p>
<p>3) He created a class that inherits a from a struct.</p>
<p>Also, in his declaration, he calls the function:</p>
<p>&nbsp; &nbsp;return m_p-&gt;Element(y, x);</p>
<p>However, earlier he declared that IArray::Element = 0, so how does the function call work?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-800653">
				<div id="div-comment-800653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-800653">
			January 6, 2010 at 7:34 am</a>		</div>

		<p>A blog post with an algebraic proof &#8230; *swoon*</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-801053">
				<div id="div-comment-801053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-801053">
			January 6, 2010 at 4:03 pm</a>		</div>

		<p>@J:</p>
<p>Returning the same type is usually part of the exercise and, not surprisingly, real life.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-801063">
				<div id="div-comment-801063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bekenn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-801063">
			January 6, 2010 at 5:26 pm</a>		</div>

		<p>@chustar:</p>
<p>Just read everything here: <a rel="nofollow" target="_new" href="http://www.parashift.com/c++-faq-lite/" rel="nofollow">http://www.parashift.com/c++-faq-lite/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-801083">
				<div id="div-comment-801083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">i</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-801083">
			January 6, 2010 at 5:48 pm</a>		</div>

		<p>&quot;It&#8217;s the difference a phone dial and dialing a phone.&quot;</p>
<p>The number you have dialed is imaginary. &nbsp;Please rotate your phone 90 degrees and try again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-801093">
				<div id="div-comment-801093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Logan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-801093">
			January 6, 2010 at 7:04 pm</a>		</div>

		<p>@chustar, the only difference between a class and a struct in C++ is the default visibility (public for struct, private for class). Knowing this, 1 and 3 should now make sense. &#8216;= 0&#8217; denotes a pure virtual function. You cannot create an instance of a class with a pure virtual function, instead a descendant class must implement the method.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-801113">
				<div id="div-comment-801113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">chustar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-801113">
			January 6, 2010 at 7:47 pm</a>		</div>

		<p>@Logan</p>
<p>But isn&#8217;t m_p an instance of the pure struct?</p>
<p>As in:</p>
<p>private:</p>
<p>IArray *mp;</p>
<p>@Bekenn</p>
<p>Checking it</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-801123">
				<div id="div-comment-801123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-801123">
			January 6, 2010 at 7:51 pm</a>		</div>

		<p>&quot;Computer science students spend so much time trying to push the complexity of an algorithm down that they neglect to learn how to tell that you can&#8217;t go any lower.&quot;</p>
<p>Every once in a while you&#8217;ll see something like that. For instance, &quot;you have to look at every element&quot; is brought up as an argument for why finding, e.g., the maximum element in an unsorted array can&#8217;t be done in sublinear time, and the (Knuth&#8217;s?) proof that comparison-based sorting can&#8217;t be done in better than O(n*log n) seems to be reasonably standard fare for algo classes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-801133">
				<div id="div-comment-801133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://loggingit.com' rel='external nofollow' class='url'>Stephan Wehner</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-801133">
			January 6, 2010 at 8:08 pm</a>		</div>

		<p>&quot;Computer science students spend so much time trying to push the complexity of an algorithm down that they neglect to learn how to tell that you can&#8217;t go any lower.&quot; -&gt; &nbsp;Proving what are called &quot;lower bounds&quot; is notoriously harder than &quot;upper bounds&quot;.</p>
<p>Stephan</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-801013">
				<div id="div-comment-801013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-801013">
			January 6, 2010 at 1:25 pm</a>		</div>

		<p>Who says you have to return the exact same array?</p>
<p>Unless your spec says you *must* modify the input array, you can return whatever subclass of your return type you want.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-801153">
				<div id="div-comment-801153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-801153">
			January 6, 2010 at 11:28 pm</a>		</div>

		<p>The thing about changing the accessor is cute, but it&#8217;s disingenuous to claim that it makes an O(n^2) operation O(1). &nbsp;It&#8217;s just breaking up that O(n^2) operation into steps that are done lazily. &nbsp;Actually applying those steps would still be O(n^2).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-801163">
				<div id="div-comment-801163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabest</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-801163">
			January 7, 2010 at 1:07 am</a>		</div>

		<p>And when those students leave the school they will realize 4&#215;4 matrices are the most common and those are transposed with 4 raw dependent SSE shuffle pairs, doh.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-801233">
				<div id="div-comment-801233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Levi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-801233">
			January 7, 2010 at 8:24 am</a>		</div>

		<p>It&#8217;s as if you were to asked to rotate a matrix written on a piece of paper and you just rotate the piece of paper == constant time. Brilliant!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-801253">
				<div id="div-comment-801253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dylan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-801253">
			January 7, 2010 at 9:34 am</a>		</div>

		<p>@James &quot;Actually applying those steps would still be O(n^2).&quot;</p>
<p>Not quite. &nbsp;With this augmented array datatype, while there is an overhead for access, you can rotate it as many times as you like during the time you spend using it at 0 additional cost.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-801283">
				<div id="div-comment-801283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-801283">
			January 7, 2010 at 10:07 am</a>		</div>

		<p>@Dylan,</p>
<p>The whole point of going into the array rotation trouble is to speed up the access to the rotated form. If you have to do index arithmetics, you just lose speed all the time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-801323">
				<div id="div-comment-801323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-801323">
			January 7, 2010 at 11:29 am</a>		</div>

		<p>Indexing is often very close to free these days, hidden in the latency of the memory operations that you are bottlenecked on.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-801513">
				<div id="div-comment-801513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harold De Armas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-801513">
			January 7, 2010 at 3:19 pm</a>		</div>

		<p>Because I&#8217;m always game for a fun puzzle, to rotate using indices vs memory swapping:</p>
<p>Rotated 0: ElementAt(x, y)</p>
<p>Rotated 90 CC: ElementAt(n-y, x)</p>
<p>Rotated 180 CC: ElementAt(n-x, n-y)</p>
<p>Rotated 270 CC: ElementAt(y, n-x)</p>
<p>Yet another thing to put on my list of &quot;Clever tricks I wish I thought of during programming contests but did the quick &amp; dirty way&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-801593">
				<div id="div-comment-801593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Christian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100106-00/?p=15383#comment-801593">
			January 8, 2010 at 4:34 am</a>		</div>

		<p>&quot;ElementAt(n-y, x)&quot; etc -&gt; n-1-y?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

