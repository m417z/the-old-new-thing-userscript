<html>
<head>
<title>Why does the compiler generate memory operations on the full variable even though only one byte is involved?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does the compiler generate memory operations on the full variable even though only one byte is involved?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 28, 2017 / year-entry #103</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170428-00/?p=96065</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Store-to-load forwarding.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Some time ago, I was helping out with code generation in
a just-in-time compiler,
and one thing I noticed was that when the compiler
needed to, say, set the top bit in a four-byte variable,
it did this:
</p>
<pre>
    or dword ptr [variable], 80000000h
</pre>
<p>
instead of the more compact
</p>
<pre>
    or byte ptr [variable+3], 80h
</pre>
<p>
The two operations are functionally equivalent:
Setting the top bit in a four-byte value is the
same as setting the top bit in a one-byte value,
because the lower bits are unaffected by the operation.
</p>
<p>
I knew there was a good reason for this because the
person who originally wrote the compiler
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20061114-15/?p=29003">
has decades of experience in this sort of thing</a>,
and this type of obvious optimization would not
have been passed up.
</p>
<p>
The answer is another of the hidden variables inside the CPU,
this one called the <i>store buffer</i>,
which is used in a process called
<i>store-to-load forwarding</i>.
You can
<a HREF="https://fgiesen.wordpress.com/2013/03/04/speculatively-speaking/">
read more about the topic here</a>,
but the short version is that when speculative execution
encounters a write to memory (a <i>store</i> operation),
it cannot write the memory immediately because it is merely
speculating.
Instead, it writes to a <i>store buffer</i>
which remembers,
"If we ultimately end up realizing this speculation,
we need to write the value <var>V</var> to the address <var>A</var>."
</p>
<p>
When a memory read operation (a <i>load</i>) is speculated,
it first checks the store buffer to see whether there is any
speculated write to to that address,
and if so, it uses that speculated value instead the actual value
in memory.
This step in the speculation process is known as
<i>store-to-load forwarding</i>.
</p>
<p>
Of course, life is not as easy as it appears
because there are many ways you could have modified
the memory at the address <var>A</var>,
thanks to the fact that the x86 permits both
sub-word memory access as well as misaligned memory access.
Misaligned memory access
means that if you want to read a four-byte value from
<var>A</var>,
you have to look not only for four-byte writes to <var>A</var>,
but also four-byte writes in the range
<var>A</var> &minus; 3 through
<var>A</var> + 3,
because those overlap the memory you are about to read.
And sub-word memory access means that you also have to look
for one-byte writes in the range <var>A</var> through
<var>A</var> + 3,
as well as
two-byte writes in the range <var>A</var> &minus; 1 through
<var>A</var> + 3.
(And even more combinations once you add SIMD registers.)
</p>
<p>
And just detecting the conflicting write is the easy part.
The hard part is finding
all the little pieces that wrote to
the memory you want to read and combine them
in the right order
to reconstruct the final value.
(And this might involve going back out to memory if the
little pieces do not completely cover the range of
memory addresses you want to read.)
</p>
<p>
In practice, the x86 doesn't bother with the complex
reconstruction.
When it discovers that there is a complicated interaction
between the store buffer and the speculated load,
it triggers a
<i>store-to-load forwarding stall</i>.
</p>
<p>
I don't know how severe this stall is,
but it stands to reason that you don't want it to happen,
so the just-in-time compiler I was working on
tries to access each variable in exactly the same way
(four-byte variables with four-byte instructions,
and so on),
so that these stalls do not occur.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1294446">
				<div id="div-comment-1294446" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170428-00/?p=96065#comment-1294446">
			April 28, 2017 at 9:20 am</a>		</div>

		<p>The optimization manuals from both Intel and AMD are full of details about avoiding this, so they seem to think it is important</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1294455">
				<div id="div-comment-1294455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170428-00/?p=96065#comment-1294455">
			April 28, 2017 at 10:04 am</a>		</div>

		<p>And a lot of restrictions were already removed.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1294465">
				<div id="div-comment-1294465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170428-00/?p=96065#comment-1294465">
			April 28, 2017 at 10:14 am</a>		</div>

		<p>First: It is covered by chapter 3.6.5 of Intel 64 and IA 32 Architectures Optimization Reference Manual.</p>
<p>As for severity of stall, according to manual it is same as is depth of pipeline.</p>
<p>Note: Chapter 2.3.5 has tables 2-21 &#8211; 2-24 that contain when S-L forwarding happens for Sandy Bridge. (A lot of cases will S-L)<br />
Apparently there were no significant changes to S-l since then.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1294505">
				<div id="div-comment-1294505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Patrick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170428-00/?p=96065#comment-1294505">
			April 28, 2017 at 1:10 pm</a>		</div>

		<p>Even before x86 had out-of-order execution, this was almost always considered the proper thing to do &#8211; the only exception would be if you need to prioritize code size (for example to keep an inner loop entirely in cache).<br />
The reason is that even though unaligned reads are allowed, the CPU still has to fetch a full machine word (if not more) from memory.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1294915">
				<div id="div-comment-1294915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170428-00/?p=96065#comment-1294915">
			May 2, 2017 at 3:59 am</a>		</div>

		<p>Sure, but in this case the alternative is a single byte write, which is never unaligned.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

