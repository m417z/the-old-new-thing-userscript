<html>
<head>
<title>The stream pointer position in IDataObject::GetData and IDataObject::GetDataHere is significant</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The stream pointer position in IDataObject::GetData and IDataObject::GetDataHere is significant</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 18, 2014 / year-entry #226</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140918-00/?p=44033</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">An oft-overlooked detail of the IData­Object::Get­Data and IData­Object::Get­Data­Here methods is the position of the stream pointer when the result is a stream. These rules are buried in the documentation, so I'm going to call them out louder. Let's look at IData­Object::Get­Data first. If IData­Object::Get­Data returns a stream, then the stream pointer must be positioned at...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
An oft-overlooked detail of the
<code>IData&shy;Object::<wbr>Get&shy;Data</code> and
<code>IData&shy;Object::<wbr>Get&shy;Data&shy;Here</code> methods
is the position of the stream pointer when the result is a stream.
These rules are
<a HREF="http://msdn.microsoft.com/library/ms687266">
buried in the documentation</a>,
so I'm going to call them out louder.
</p>
<p>
Let's look at
<code>IData&shy;Object::<wbr>Get&shy;Data</code> first.
</p>
<p>
If
<code>IData&shy;Object::<wbr>Get&shy;Data</code>
returns a stream,
then the stream pointer must be positioned at the
<i>end</i> of the stream before the stream is returned.
In other words, the last thing you do before returning
the stream is seek it to the end.
The contents of the data object are assumed to extend from the
start of the stream to the stream's position as returned by
<code>IData&shy;Object::<wbr>Get&shy;Data</code>.
(And no, I don't know why this rule exists.)
</p>
<p>
I messed this up in
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2008/03/19/8080215.aspx">
my demonstration of how to drag a stream</a>.
Let's fix it.
</p>
<pre>
  case DATA_FILECONTENTS:
    pmed-&gt;tymed = TYMED_ISTREAM;
    pmed-&gt;pstm = SHOpenRegStream(HKEY_LOCAL_MACHINE,
       TEXT("Hardware\\Description\\System\\CentralProcessor\\0"),
       TEXT("~MHz"), STGM_READ);
    <font COLOR=blue>if (pmed-&gt;pstm) {
      LARGE_INTEGER liZero = { 0, 0 };
      pmed-&gt;pstm-&gt;Seek(liZero, STREAM_SEEK_END, NULL);
    }</font>
    return pmed-&gt;pstm ? S_OK : E_FAIL;
  }
</pre>
<p>
But what if you don't know the stream size?
For example, what if the stream is coming from a live download?
What if the stream doesn't support seeking?
What if the stream is infinite?
In those cases, you don't really have a choice.
You just leave the stream pointer at the beginning and hope for the best.
(Fortunately, at least in the case of virtual file content,
the shell is okay with people who leave the stream pointer at the start
of the stream.
Probably for reasons like this.)
</p>
<p>
There is a similar detail with
<code>IData&shy;Object::<wbr>Get&shy;Data&shy;Here</code>:
If you are asked to produce the data into an existing stream,
you should write the data starting at the stream's current position
and leave the stream pointer at the end of the data you just wrote.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1152013">
				<div id="div-comment-1152013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Boyd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140918-00/?p=44033#comment-1152013">
			September 18, 2014 at 9:40 am</a>		</div>

		<p>Well damn. </p>
<p>I have some applications to fix.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1152033">
				<div id="div-comment-1152033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jps</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140918-00/?p=44033#comment-1152033">
			September 18, 2014 at 11:15 am</a>		</div>

		<p>I have some code to fix too&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1152083">
				<div id="div-comment-1152083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140918-00/?p=44033#comment-1152083">
			September 18, 2014 at 6:14 pm</a>		</div>

		<p>I know the rule still exist, but is there any known cases this is relevant?</p>
<p>Just like what you said, there are kinds of stream the have size unknown or simply don&#39;t support seeking. I think whatever OLE object that use this should expect to work when stream pointer position is not at the end.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1152093">
				<div id="div-comment-1152093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140918-00/?p=44033#comment-1152093">
			September 18, 2014 at 6:18 pm</a>		</div>

		<p>Since the only thing a readonly stream seeked to the end can do is seek elsewhere before reading, doesn&#39;t this rule realistically translate as &quot;You can&#39;t trust the pointer position of the output of this function, set it yourself manually before reading&quot;?</p>
<div class="post">[<em>It also means &quot;Make sure to set it properly on the production side, in case your consumer actually uses the stream position to make decisions.&quot; For example, the consumer might be COM itself, who is using the stream position to decide how big a <code>HGLOBAL</code> to allocate in order to serialize your data object when you call <code>OleFlushClipboard</code>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1152223">
				<div id="div-comment-1152223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140918-00/?p=44033#comment-1152223">
			September 20, 2014 at 5:45 am</a>		</div>

		<p>I always thought the point of the stream was that its size is unknown, that it&#39;s not just an array with an index variable. Heck, SICP introduces streams as &quot;suspended lists&quot;, meaning that you have a buffered part and a mysterious function that will produce the remaining part.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

