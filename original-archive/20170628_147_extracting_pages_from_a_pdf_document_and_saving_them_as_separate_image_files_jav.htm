<html>
<head>
<title>Extracting pages from a PDF document and saving them as separate image files, JavaScript edition with async</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Extracting pages from a PDF document and saving them as separate image files, JavaScript edition with async</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 28, 2017 / year-entry #148</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170628-00/?p=96477</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Diving into an upcoming feature of ES8.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<!-- backref: Extracting pages from a PDF document and saving them as separate image files, JavaScript edition with Promises -->
Last time</a>,
we converted the
JavaScript version of the
<a HREF="https://github.com/Microsoft/Windows-universal-samples/tree/v1.0.11/Samples/PdfDocument">
PDF Document</a> sample program so that it
saved the pages to disk as image files.
The asynchonous behavior was expressed via Promises.
Today we'll use the <code>async</code> and
<code>await</code> keywords
which didn't make ECMAScript 7,
but may make it into ECMAScript 8.
Support for it
<a HREF="https://blogs.windows.com/msedgedev/2015/09/30/asynchronous-code-gets-easier-with-es2016-async-function-support-in-chakra-and-microsoft-edge/">
arrived in Microsoft Edge as an experimental feature back in 2015</a>.
</p>
<pre>
<font COLOR=blue>async</font> function viewPage() {
  WinJS.log && WinJS.log("", "sample", "status");

  var pageNumber = parseInt(pageNumberBox.value, 10);
  if (isNaN(pageNumber) || (pageNumber &lt; 1) ||
    (pageNumber &gt; pdfDocument.pageCount)) {
    WinJS.log &amp;&amp; WinJS.log("Invalid page number.", "sample", "error");
    return;
  }

  output.src = "";
  progressControl.style.display = "block";

  // Convert from 1-based page number to 0-based page index.
  var pageIndex = pageNumber - 1;

  var page = pdfDocument.getPage(pageIndex);

  var picker = new Windows.Storage.Pickers.FileSavePicker();
  picker.fileTypeChoices["PNG image2"] = [".png"];
  <font COLOR=blue>var outfile = await picker.pickSaveFileAsync();</font>
  if (outfile) {
    <font COLOR=blue>var transaction = await outfile.openTransactedWriteAsync();</font>
    var options = new PdfPageRenderOptions();
    options.destinationHeight = page.size.height * 2;
    options.destinationWidth = page.size.width * 2;
    <font COLOR=blue>await page.renderToStreamAsync(transaction.stream, options);</font>
    transaction.close();
  }
  page.close();
  progressControl.style.display = "none";
}
</pre>
<p>
The <code>async</code> and <code>await</code> keywords
are analogous to their C# counterparts.
Declaring a function as <code>async</code> causes it to
return a Promise whose result is the nominal type of the function.
Inside an <code>async</code> function, you can use the
<code>await</code> keyword to cause the continuation to be
connected to the resolution of the Promise you are awaiting.
</p>
<p>
There's not much interesting to discuss here;
it's a straightforward translation of the C# sample.
Note that JavaScript doesn't have a <code>using</code> keyword,
so we have to <code>close()</code> the closable objects manually.
</p>
<p>
Next time, we'll move on to C++/CX.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1" id="comment-1300855">
				<div id="div-comment-1300855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170628-00/?p=96477#comment-1300855">
			June 28, 2017 at 7:39 am</a>		</div>

		<p>Actually you&#8217;d need to translate the <code>using</code> into a <code>try</code>/<code>finally</code> because if an <code>await</code>ed promise is rejected the rejection is <code>throw</code>n by the runtime so you would need to ensure that is handled by your continuation. <code>using</code> handles that for you in all cases which is rather nice. My understanding is that RAII still applies to <code>co_await</code> in C++17 so that would be equivalent there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1300865">
				<div id="div-comment-1300865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://skuldwyrm.no/' rel='external nofollow' class='url'>Roger HÃ¥gensen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170628-00/?p=96477#comment-1300865">
			June 28, 2017 at 8:34 am</a>		</div>

		<p>ECAMScript 8 ? I think you meant ECMAScript 8 (those darn pesky acronymic names)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1300905">
				<div id="div-comment-1300905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170628-00/?p=96477#comment-1300905">
			June 28, 2017 at 10:22 pm</a>		</div>

		<p>ECAMScript, the new scripting language for camera applications. Use ECAMScript to take a set of separate image files from your camera and turn them into a single PDF!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hardon odd alt thread-even depth-1 parent" id="comment-1300965">
				<div id="div-comment-1300965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/gdalsnes' rel='external nofollow' class='url'>gdalsnes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170628-00/?p=96477#comment-1300965">
			June 29, 2017 at 3:00 pm</a>		</div>

		<p>&#8220;Declaring a function as async causes it to return a Promise&#8221;<br />
But there is nothing returned from this function.<br />
Would be nice with example of the code calling viewPage() too.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1300986">
				<div id="div-comment-1300986" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170628-00/?p=96477#comment-1300986">
			June 30, 2017 at 2:16 am</a>		</div>

		<p>No the function does return a Promise, just one without any additional data.</p>
<p>It&#8217;s the difference between Task and Task.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1300995">
				<div id="div-comment-1300995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Trapp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170628-00/?p=96477#comment-1300995">
			June 30, 2017 at 3:40 am</a>		</div>

		<p>Not quite &#8211; from the view of the outside code, the function is now returning a promise. The promise is resolved to `undefined` however because the function doesn&#8217;t &#8220;return&#8221; a value.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1300996">
				<div id="div-comment-1300996" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Trapp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170628-00/?p=96477#comment-1300996">
			June 30, 2017 at 3:41 am</a>		</div>

		<p>(For clarification: The &#8220;not quite&#8221; was directed to gdalsnes)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

