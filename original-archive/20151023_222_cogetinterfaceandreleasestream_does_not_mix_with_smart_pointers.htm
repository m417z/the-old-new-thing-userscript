<html>
<head>
<title>CoGetInterfaceAndReleaseStream does not mix with smart pointers</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>CoGetInterfaceAndReleaseStream does not mix with smart pointers</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 23, 2015 / year-entry #223</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20151023-00/?p=91291</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Old school meets new school.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
One horrible gotcha of the
<code>Co&shy;Get&shy;Interface&shy;And&shy;Release&shy;Stream</code>
function is that <i>it releases the stream</i>.
This is a holdover from the old days before smart pointers.
The function released the stream to save you from having to
call <code>Release</code> yourself.
But nowadays, everybody is using smart pointers, so you never
had to type <code>Release</code> to begin with.
The problem is that you can fall into a double-<code>Release</code>
situation without realizing it.
</p>
<pre>
// Code in italics is wrong
void GetTheInterface(REFIID iid, void** ppv)
{
  Microsoft::WRL::ComPtr&lt;IStream&gt; stream;
  GetTheStream(&amp;stream);
  <i>CoGetInterfaceAndReleaseStream(stream.Get(), iid, ppv);</i>
}

void GetTheInterface(REFIID iid, void** ppv)
{
  ATL::CComPtr&lt;IStream&gt; stream;
  GetTheStream(&amp;stream);
  <i>CoGetInterfaceAndReleaseStream(stream, iid, ppv);</i>
}

void GetTheInterface(REFIID iid, void** ppv)
{
  _com_ptr_t&lt;IStream&gt; stream;
  GetTheStream(&amp;stream);
  <i>CoGetInterfaceAndReleaseStream(stream, iid, ppv);</i>
}

struct Releaser
{
    void operator()(IUnknown* p) { if (p) p-&gt;Release(); }
};

void GetTheInterface(REFIID iid, void** ppv)
{
  IStream* rawStream;
  GetTheStream(&amp;rawStream);
  std::unique_ptr&lt;IStream, Releaser&gt; stream(rawStream);
  <i>CoGetInterfaceAndReleaseStream(stream.get(), iid, ppv);</i>
}
</pre>
<p>
All of the code fragments above look completely natural,
and they all have a bug
because the smart pointer object <code>stream</code>
is going to call <code>Release</code> at destruction,
which will double-release the pointer because
<code>Co&shy;Get&shy;Interface&shy;And&shy;Release&shy;Stream</code>
<i>already released it</i>.
</p>
<p>
This type of bug is really hard to track down.
</p>
<p>
One way to fix this is to call the function and tell the
smart pointer class that you are transferring ownership
of the stream to the function.
</p>
<pre>
void GetTheInterface(REFIID iid, void** ppv)
{
  Microsoft::WRL::ComPtr&lt;IStream&gt; stream;
  GetTheStream(&amp;stream);
  CoGetInterfaceAndReleaseStream(<font COLOR="blue">stream.Detach()</font>, iid, ppv);
}

void GetTheInterface(REFIID iid, void** ppv)
{
  ATL::CComPtr&lt;IStream&gt; stream;
  GetTheStream(&amp;stream);
  CoGetInterfaceAndReleaseStream(<font COLOR="blue">stream.Detach()</font>, iid, ppv);
}

void GetTheInterface(REFIID iid, void** ppv)
{
  _com_ptr_t&lt;IStream&gt; stream;
  GetTheStream(&amp;stream);
  CoGetInterfaceAndReleaseStream(<font COLOR="blue">stream.Detach()</font>, iid, ppv);
}

void GetTheInterface(REFIID iid, void** ppv)
{
  IStream* rawStream;
  GetTheStream(&amp;rawStream);
  std::unique_ptr&lt;IStream, Releaser&gt; stream(rawStream);
  CoGetInterfaceAndReleaseStream(<font COLOR="blue">stream.release()</font>, iid, ppv);
}
</pre>
<p>
Another way to fix this is to simply stop using
<code>Co&shy;Get&shy;Interface&shy;And&shy;Release&shy;Stream</code>
with smart pointers,
because the function was designed for dumb pointers.
For smart pointers, use
<code>Co&shy;Unmarshal&shy;Interface</code>.
</p>
<pre>
void GetTheInterface(REFIID iid, void** ppv)
{
  Microsoft::WRL::ComPtr&lt;IStream&gt; stream;
  GetTheStream(&amp;stream);
  <font COLOR="blue">CoUnmarshalInterface</font>(stream.Get(), iid, ppv);
}

void GetTheInterface(REFIID iid, void** ppv)
{
  ATL::CComPtr&lt;IStream&gt; stream;
  GetTheStream(&amp;stream);
  <font COLOR="blue">CoUnmarshalInterface</font>(stream, iid, ppv);
}

void GetTheInterface(REFIID iid, void** ppv)
{
  _com_ptr_t&lt;IStream&gt; stream;
  GetTheStream(&amp;stream);
  <font COLOR="blue">CoUnmarshalInterface</font>(stream, iid, ppv);
}

void GetTheInterface(REFIID iid, void** ppv)
{
  IStream* rawStream;
  GetTheStream(&amp;rawStream);
  std::unique_ptr&lt;IStream, Releaser&gt; stream(rawStream);
  <font COLOR="blue">CoUnmarshalInterface</font>(stream.get(), iid, ppv);
}
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1197231">
				<div id="div-comment-1197231" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151023-00/?p=91291#comment-1197231">
			October 23, 2015 at 8:22 am</a>		</div>

		<p>A third way to fix this is to manually call AddRef right before calling CoGetInterfaceAndReleaseStream.</p>
<div class="post">[<em>Have you tried it? (Hint, it doesn&#39;t compile half the time.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197221">
				<div id="div-comment-1197221" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NotThisMind</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151023-00/?p=91291#comment-1197221">
			October 23, 2015 at 8:45 am</a>		</div>

		<p>Dumb pointers, well, that&#39;s funny.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle even thread-even depth-1" id="comment-1197211">
				<div id="div-comment-1197211" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151023-00/?p=91291#comment-1197211">
			October 23, 2015 at 8:59 am</a>		</div>

		<p>@Maurits [MSFT]: That feels more like a workaround than a codefix. &nbsp;Does work in a pinch though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197201">
				<div id="div-comment-1197201" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151023-00/?p=91291#comment-1197201">
			October 23, 2015 at 10:25 am</a>		</div>

		<p>Don&#39;t release the streams!!! More than once, anyway&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-1197181">
				<div id="div-comment-1197181" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151023-00/?p=91291#comment-1197181">
			October 23, 2015 at 12:49 pm</a>		</div>

		<p>I like the solution with Detach() more, because it allows to release the Stream as early as possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197161">
				<div id="div-comment-1197161" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151023-00/?p=91291#comment-1197161">
			October 23, 2015 at 3:59 pm</a>		</div>

		<p>I used a C bignum library that had a convention where all functions decremented the refcount and required you to increment it if you wanted to keep it around (i.e. the functions behaved like linear logic):</p>
<p>// copy(x) { ++x.refCount; return x; }</p>
<p>c = add(copy(a), copy(b));</p>
<p>it was actually quite pleasant to work with compared to the regular COM convention. It vaguely mirrored what C++ style smart pointers and std::move()s look like except using plain C.</p>
<p>The problem isn&#39;t so much having functions that automatically release for you, it&#39;s having both kinds functions around.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-michael-ratanapintha even thread-even depth-1" id="comment-1197151">
				<div id="div-comment-1197151" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Michael+Ratanapintha+%28ex-Microsoft%29' rel='external nofollow' class='url'>Michael Ratanapintha (ex-Microsoft)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151023-00/?p=91291#comment-1197151">
			October 23, 2015 at 4:22 pm</a>		</div>

		<p>Huh, weird. Previously, I submitted a comment to the effect that:</p>
<p>struct Releaser</p>
<p>{</p>
<p>&nbsp; &nbsp;void operator(IUnknown* p) { if (p) p-&gt;Release(); }</p>
<p>};</p>
<p>had a missing pair of parentheses in line 3, which should instead be</p>
<p>&nbsp; &nbsp;void operator()(IUnknown* p) { if (p) p-&gt;Release(); }</p>
<p>It looks like the comment didn&#39;t go through, but the mistake was corrected anyway. Maybe Raymond&#39;s psychic powers are even more powerful than I had thought!</p>
<div class="post">[<em>That&#39;s a general policy with comments that merely report typos. I fix the typo and delete the comment. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197141">
				<div id="div-comment-1197141" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151023-00/?p=91291#comment-1197141">
			October 23, 2015 at 9:47 pm</a>		</div>

		<p>[That&#39;s a general policy with comments that merely report typos. I fix the typo and delete the comment. -Raymond]</p>
<p>I like the policy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197131">
				<div id="div-comment-1197131" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151023-00/?p=91291#comment-1197131">
			October 23, 2015 at 11:29 pm</a>		</div>

		<p>So, in order to prevent the Release from being called on the stream, you have to call stream.release()? That seems somewhat ironic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1197121">
				<div id="div-comment-1197121" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151023-00/?p=91291#comment-1197121">
			October 24, 2015 at 12:12 am</a>		</div>

		<p>Yeah, the standard C++ auto_ptr&lt;&gt; and unique_ptr&lt;&gt; use &quot;release()&quot; instead of &quot;Detach()&quot;. I&#39;d call it dumb if they didn&#39;t have, IIRC, seniority.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197101">
				<div id="div-comment-1197101" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151023-00/?p=91291#comment-1197101">
			October 24, 2015 at 3:25 am</a>		</div>

		<p>I don&#39;t like the name &quot;release&quot; because it suggests that the smart pointer calls Release() when in fact it&#39;s used to avoid that. (The smart pointer library I&#39;m most used to calls that method &quot;forget&quot;.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197091">
				<div id="div-comment-1197091" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151023-00/?p=91291#comment-1197091">
			October 24, 2015 at 4:17 am</a>		</div>

		<p>&gt; [That&#39;s a general policy with comments that merely report typos. I fix the typo and delete the comment. -Raymond]</p>
<p>That&#39;s the problem with FixTypoAndDeleteComment. Perhaps the commenter was using a smart pointer class?</p>
<p>(sorry couldn&#39;t resist)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1234186">
				<div id="div-comment-1234186" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151023-00/?p=91291#comment-1234186">
			October 25, 2015 at 10:45 am</a>		</div>

		<p>[That&#39;s a general policy with comments that merely report typos. I fix the typo and delete the comment. -Raymond]</p>
<p>OK. Then please fix the order of arguments of CoGetInterfaceAndReleaseStream in the sample :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1211241">
				<div id="div-comment-1211241" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151023-00/?p=91291#comment-1211241">
			October 27, 2015 at 4:32 am</a>		</div>

		<p>&gt; Have you tried it?</p>
<p>No.</p>
<p>OK, now I have.</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/matthew_van_eerde/archive/2015/10/27/riffing-on-raymond-incrementing-the-reference-count-on-a-smart-pointer.aspx">blogs.msdn.com/&#8230;/riffing-on-raymond-incrementing-the-reference-count-on-a-smart-pointer.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

