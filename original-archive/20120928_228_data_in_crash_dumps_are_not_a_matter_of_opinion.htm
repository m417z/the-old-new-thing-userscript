<html>
<head>
<title>Data in crash dumps are not a matter of opinion</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Data in crash dumps are not a matter of opinion</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 28, 2012 / year-entry #229</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>24</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer reported a problem with the System­Time­To­Tz­Specific­Local­Time function. (Gosh, why couldn't they have reported a problem with a function with a shorter name! Now I have to type that thing over and over again.) We're having a problem with the System­Time­To­Tz­Specific­Local­Time function. We call it like this: s_pTimeZones->SystemTimeToTzSpecificLocalTime((BYTE)timeZoneId, &sysTime, &localTime); On some but not...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer reported a problem with the
<code>System&shy;Time&shy;To&shy;Tz&shy;Specific&shy;Local&shy;Time</code>
function.
(Gosh, why couldn't they have reported a problem with a function with
a shorter name!
Now I have to type that thing over and over again.)
</p>
<blockquote CLASS=q>
<p>
We're having a problem with the
<code>System&shy;Time&shy;To&shy;Tz&shy;Specific&shy;Local&shy;Time</code>
function.
We call it like this:
</p>
<pre>
s_pTimeZones-&gt;SystemTimeToTzSpecificLocalTime((BYTE)timeZoneId,
                                 &amp;sysTime, &amp;localTime);
</pre>
<p>
On some but not all of our machines,
our program crashes with the following call stack:
</p>
<pre>
ExceptionAddress: 77d4a0d0 (kernel32!SystemTimeToTzSpecificLocalTime+0x49)
   ExceptionCode: c0000005 (Access violation)
  ExceptionFlags: 00000000
NumberParameters: 2
   Parameter[0]: 00000000
   Parameter[1]: 000000ac
Attempt to read from address 000000ac
 
kernel32!SystemTimeToTzSpecificLocalTime+0x49
Contoso!CTimeZones::SystemTimeToTzSpecificLocalTime+0x26
Contoso!CContoso::ResetTimeZone+0xc0
Contoso!ResetTimeZoneThreadProc+0x32
</pre>
<p>
This problem appears to occur only with the release build;
the debug build does not have this problem.
Any ideas?
</p>
</blockquote>
<p>
Notice that in the line of code the customer provided,
they are <i>not</i> calling
<code>System&shy;Time&shy;To&shy;Tz&shy;Specific&shy;Local&shy;Time</code>;
they are instead calling some application-defined method
with the same name,
which takes different parameters from the system function.
</p>
<p>
The customer apologized and included the
source file they were using, as well as a crash dump file.
</p>
<pre>
void CContoso::ResetTimeZone()
{
 SYSTEMTIME sysTime, localTime;
 GetLastModifiedTime(&amp;sysTime);

 for (int timeZoneId = 1;
      timeZoneId &lt; MAX_TIME_ZONES;
      timeZoneId++) {
  if (!s_pTimeZones-&gt;SystemTimeToTzSpecificLocalTime((BYTE)timeZoneId,
                                  &amp;sysTime, &amp;localTime)) {
    LOG_ERROR("...");
    return;
  }
  ... do something with localTime ...
 }
}

BOOL CTimeZones::SystemTimeToTzSpecificLocalTime(
    BYTE bTimeZoneID,
    LPSYSTEMTIME lpUniversalTime,
    LPSYSTEMTIME lpLocalTime)
{
    return ::SystemTimeToTzSpecificLocalTime(
        &amp;m_pTimeZoneInfo[bTimeZoneID],
        lpUniversalTime, lpLocalTime);
}
</pre>
<p>
According to the crash dump,
the first parameter passed to
<code>CTime&shy;Zones::<wbr
>System&shy;Time&shy;To&shy;Tz&shy;Specific&shy;Local&shy;Time</code>
was <code>1</code>,
and the <code>m_pTimeZoneInfo</code> member was <code>nullptr</code>.
As a result, a bogus non-null pointer was passed as the first
parameter to
<code>System&shy;Time&shy;To&shy;Tz&shy;Specific&shy;Local&shy;Time</code>,
which resulted in a crash when the function tried to dereference it.
</p>
<p>
This didn't require any special secret kernel knowledge;
all I did was look at the stack trace and the value of the
member variable.
</p>
<p>
So far, it was just a case of a lazy developer who didn't know
how to debug their own code.
But the reply from the customer was most strange:
</p>
<blockquote CLASS=q>
<p>
I don't think so,
for two reasons.
</p>
<ol>
<li>The exact same build on another machine does not crash,
    so it must be a machine-specific or OS-specific bug.</p>
<li>The code in question has not changed in several months,
    so if the problem were in that code,
    we would have encountered it much earlier.
</ol>
</blockquote>
<p>
I was momentarily left speechless by this response.
It sounds like the customer simply refuses to believe the
information that's right there in the crash dump.
"La la la, I can't hear you."
</p>
<p>
Memory values are not a matter of opinion.
If you look in memory and find that the value 5
is on the stack,
then the value 5 is on the stack.
You can't say, "No it isn't; it's 6."
You can have different opinions on how the value 5
ended up on the stack, but the fact that the value is 5
is beyond dispute.
</p>
<p>
It's like a box of cereal that has been spilled on the floor.
People may argue over who spilled the cereal,
or who placed the box in such a precarious position in the first place,
but to take the position
"There is no cereal on the floor" is a pretty audacious move.
</p>
<p>
Whether you like it or not, the value is not correct.
You can't deny what's right there in the dump file.
(Well, unless you think the dump file itself is incorrect.)
</p>
<p>
A colleague studied the customer's code more closely
and pointed out a race condition where the thread which calls
<code>CContoso::ResetTimeZone</code>
may do so before the <code>CTimeZone</code> object has
allocated the <code>m_pTimeZoneInfo</code> array.
And it wasn't anything particularly subtle either.
It went like this, in pseudocode:
</p>
<pre>
CreateThread(ResetTimeZoneThreadProc);

s_pTimeZones = new CTimeZones;
s_pTimeZones-&gt;Initialize();

// the CTimeZones::Initialize method allocates m_pTimeZoneInfo
// among other things
</pre>
<p>
The customer never wrote back once the bug was identified.
Perhaps the sheer number of impossible things all happening
at once caused their head to explode.
</p>
<p>
I discussed this incident later with another colleague,
who remarked
</p>
<blockquote CLASS=m>
<p>
Frequently, some problem&nbsp;X will
occur, and the people debugging it will say,
"The only way that problem&nbsp;X to occur is if
we are in situation&nbsp;Y,
but we know that situation&nbsp;Y is impossible,
so we didn't bother investigating that possibility.
Can you suggest another idea?"
</p>
<p>
Yeah, I can suggest another idea.
"The computer is always right."
You already saw that problem&nbsp;X occurred.
If the only way that problem&nbsp;X can occur is if
you are in situation&nbsp;Y,
then the first thing you should do is assume that
you are in situation&nbsp;Y and work from there."
</p>
<p>
Teaching people to follow this simple axiom has
avoid a lot of fruitless misdirected speculative
debugging.
People seem hard-wired to
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2008/07/23/8765362.aspx">
prefer speculation</a>,
though, and it's common to slip back into forgetting
simple logic.
</p>
</blockquote>
<p>
To put it another way:
</p>
<ul>
<li>If X, then Y.
<li>X is true.
<li>Y cannot possible be true.
</ul>
<p>
In order for these three statements to hold simultaneously,
you must have found a fundamental flaw in the underlying axioms
of logic as they have been understood for thousands of years.
</p>
<p>
This is unlikely to be the case.
</p>
<p>
Given that you have X right in front of you,
X&nbsp;is true by observation.
That leaves the other two statements.
Maybe there's a case where X does not guarantee Y.
Maybe Y&nbsp;is true after all.
</p>
<p>
As Sherlock Holmes is famous for saying,
"<a HREF="http://en.wikiquote.org/wiki/Sherlock_Holmes#The_Sign_of_the_Four_.281890.29"
>When you have eliminated the impossible,
whatever remains,
however improbable,
must be the truth</a>."
But before you rule out the impossible,
make sure it's actually impossible.
</p>
<p>
<b>Bonus chatter</b>:
Now that I've told you that the debugger never lies,
I get to confuse you in a future entry by debugging a crash
where the debugger lied.
(Or at least wasn't telling the whole truth.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1013483">
				<div id="div-comment-1013483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013483">
			September 28, 2012 at 7:30 am</a>		</div>

		<p>In the code I wrote, the quality assurance guy with his super-mega-nuclear test (yes, that was the real name of the test script) was able to hit race conditions just a couple instructions wide. This confirms that whatever is mathematically possible, will happen. In the worst case, after it&#39;s deployed on many machines in the field.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1013493">
				<div id="div-comment-1013493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013493">
			September 28, 2012 at 7:34 am</a>		</div>

		<p>The debugger could lie to you if you have a rootkit (<a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2006/04/21/580608.aspx" rel="nofollow">blogs.msdn.com/&#8230;/580608.aspx</a>). &nbsp;Or possibly overclocking, I suppose.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1013513">
				<div id="div-comment-1013513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013513">
			September 28, 2012 at 7:53 am</a>		</div>

		<p>I have this problem all the time when dealing with people who do not fully grasp what &quot;undefined behavior&quot; means or what can happen when multi-threading goes wrong. &nbsp;&quot;Component ABC works on U, V, W, and X computers but not on Y computer. &nbsp;Therefore, Y computer must be defective / have a problem with its software environment / not compatible with some 3rd-party software on computer Y due to defect in the other software.&quot; &nbsp;Actually, that means nothing. &nbsp;Component ABC is guilty until proven innocent. &nbsp;The definition of undefined behavior includes cases where undesirable behavior only occurs 0.1% of the time.</p>
<p>In general &#8211; even outside of computers &#8211; I find I am a lot less willing to jump to conclusions about anything &#8211; compared to some people, anyway. &nbsp;Just never know about that 1% chance&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1013523">
				<div id="div-comment-1013523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kog999</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013523">
			September 28, 2012 at 8:12 am</a>		</div>

		<p>As a Systems Administrator I tend to find that many developers will blame literally anything else besides there code whenever there is an issue. Often it takes the form of them asking âis there a problem with the networkVMWareServersOperating System.Net Frameworkâ, with no information as to why they think there is a problem. This always receives the same answer</p>
<p>Me: âIâm not aware of any problems with the networkâ.</p>
<p>A brief moment of silence ensues</p>
<p>Me: âNo one has reported any problems with the network Iâve been using it all day and can even get to the old new thing, why do you think there is a network problemâ</p>
<p>Them: âMy code connects to database1 to get some info blah, blah, blah, and the webpage I wrote is displaying 5 instead of 6.â</p>
<p>Me: âso you can get to the server database1, sounds like the network is fine to me.â</p>
<p>Them: âWell I need you to check harder MY CODE HASNâT CHANGED!â</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1013533">
				<div id="div-comment-1013533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013533">
			September 28, 2012 at 8:14 am</a>		</div>

		<p>â¢ If X, then Y.</p>
<p>â¢ X is true.</p>
<p>â¢ Y cannot possible be true.</p>
<p>â´ Heap corruption.</p>
<p>Been there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wma odd alt thread-odd thread-alt depth-1" id="comment-1013553">
				<div id="div-comment-1013553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Wes+MacDonald' rel='external nofollow' class='url'>Wes MacDonald</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013553">
			September 28, 2012 at 9:10 am</a>		</div>

		<p>This is when you&#39;re thinking you sound like a teacher from a Charlie Brown TV episode ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1013573">
				<div id="div-comment-1013573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013573">
			September 28, 2012 at 9:44 am</a>		</div>

		<p>&quot;There is no bug here, the program works as coded&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1013583">
				<div id="div-comment-1013583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013583">
			September 28, 2012 at 1:52 pm</a>		</div>

		<p>When your code works on Machine X but not Machine Y, you could be running into CPU errata. In this case it might be the machine lying to you rather than the debugger.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1013593">
				<div id="div-comment-1013593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013593">
			September 28, 2012 at 3:29 pm</a>		</div>

		<p>@Gabe: True, it&#39;s certainly possible, like the infamous Pentium FDIV bug. &nbsp;But the majority of the time, if it works on Machine X but not Machine Y, you probably have a bug in your code (race condition, undefined behavior, or the like) which only manifests on X.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1013543">
				<div id="div-comment-1013543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013543">
			September 28, 2012 at 8:46 am</a>		</div>

		<p>When you have eliminated the impossible, then whatever remains, *however improbable*, must be the truth.</p>
<p>&#8212; Sherlock Holmes, The Sign of the Four</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1013663">
				<div id="div-comment-1013663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Wilson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013663">
			September 29, 2012 at 8:54 am</a>		</div>

		<p>Occam&#39;s Razor says its far more likely to be a bug in your code than a hardware fault.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1013673">
				<div id="div-comment-1013673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013673">
			September 29, 2012 at 2:44 pm</a>		</div>

		<p>If in doubt, it&#39;s always your code that screwed up. Blaming someone else should always be a last resort.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1013713">
				<div id="div-comment-1013713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013713">
			September 30, 2012 at 8:57 am</a>		</div>

		<p>@Matt &#8211; if only every compiler, interpreter, macro language, etc would display that message by default every time it was invoked. (Maybe I&#39;m wrong, but) it always seems to be the beginner programmers who assume that they&#39;re writing perfect, pristine code every time. (Of course, some beginners never grow out of this attitude, I&#39;m not sure how to fix those people, other than recommend they pick a different career)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1013763">
				<div id="div-comment-1013763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LaQuisha Redfern</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013763">
			October 1, 2012 at 1:56 am</a>		</div>

		<p>You went from &#39;customer&#39; to &#39;a lazy developer who didn&#39;t know how to debug their own code&#39; pretty quickly.</p>
<p>Don&#39;t let the marketing department see! They&#39;ll have kittens.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1013783">
				<div id="div-comment-1013783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Samuel222</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013783">
			October 1, 2012 at 2:33 am</a>		</div>

		<p>I&#39;m sure there is a huge religious/political can of worms somewhere in this argument.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1013793">
				<div id="div-comment-1013793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian Ratnapala</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013793">
			October 1, 2012 at 4:20 am</a>		</div>

		<p>&lt;em&gt;</p>
<p>&nbsp; &nbsp;If X, then Y.</p>
<p>&nbsp; &nbsp;X is true.</p>
<p>&nbsp; &nbsp;Y cannot possible be true.</p>
<p>&lt;/em&gt;</p>
<p>Well that&#39;s a one up on <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Paraconsistent_logic" rel="nofollow">en.wikipedia.org/&#8230;/Paraconsistent_logic</a></p>
<p>But still I am amused that the article mention using it as a way of tackling sofware systems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1013803">
				<div id="div-comment-1013803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Terry A. Davis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013803">
			October 1, 2012 at 5:30 am</a>		</div>

		<p>AdamLog(fmt_st,&#8230;) has variable number of args. &nbsp;The first on the stack is fmt_st, then #args, then args.</p>
<p>PrintF(&quot;%h5D&quot;,dt); &nbsp;That will print in date format 5. &nbsp;</p>
<p>It is faster execution time to number date formats than to use strings like &quot;mm:dd:yy&quot;. &nbsp;I learned this at Ticketmaster.</p>
<p>I did a quick solution to International &#8212; a level of indirection. &nbsp;It looks in an array to map date format numbers to new date format numbers.</p>
<p>time zone is set with a simple system-wide global variable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1013813">
				<div id="div-comment-1013813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jas71_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>jas71@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013813">
			October 1, 2012 at 6:34 am</a>		</div>

		<p>&quot;Gosh, why couldn&#39;t they have reported a problem with a function with a shorter name! Now I have to type that thing over and over again.&quot;</p>
<p>On the bright side, just imagine what Klingon epithet the equivalent function would be called on a Unix platform&#8230;</p>
<p>I recall one painful debugging session where a particular function call (NtClose), from userspace, was giving me a BugCheck. Every time. Now, even if I&#39;d been passing in random integers, that would have been a bad thing, but I was just closing the handle I&#39;d received earlier from NtCreateFile! After much probing of my own logic, my soul and the kernel crash dump, I found the culprit: buggy anti-virus filter driver. Turn it off, or switch to another product, everything worked fine. &quot;The AV filter does something stupid when NtCreateFile is called in certain ways, which then causes it to break later on when that handle is closed&quot; wasn&#39;t really a conclusion I&#39;d leap to readily.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1013843">
				<div id="div-comment-1013843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013843">
			October 1, 2012 at 7:16 am</a>		</div>

		<p>@jas88: Actually, I&#39;d argue that a bugcheck / BSOD is a good reason to suddenly jump to &quot;no way it&#39;s my code&quot;, unless you&#39;re actually working kernel code as part of your system. &nbsp;Especially if the bugcheck happens when running as a normal user. &nbsp;But even if you have administrator access, it should take an explicit effort to cause a bugcheck. &nbsp;User-mode code should never bugcheck the system. &nbsp;It can crash itself all it wants, but it should never cause a bugcheck.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1013893">
				<div id="div-comment-1013893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013893">
			October 1, 2012 at 8:15 am</a>		</div>

		<p>@JamesJohnson: If I&#39;d found that from unprivileged code, I&#39;d immediately be contacting Microsoft with a potential DOS exploit. They&#39;d probably be able to narrow it down to the screwed-up antivirus easily enough.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1013773">
				<div id="div-comment-1013773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1013773">
			October 1, 2012 at 2:15 am</a>		</div>

		<p>Whenever people ask me for my professional inspiration, I&#39;ll say &quot;Sherlock Holmes&quot;. And quote this line at them. Actually, I quote that line all the time, but that&#39;s just because people don&#39;t appreciate it enough.</p>
<p>It&#39;s soooo tempting to assume that you *know* what&#39;s going on and ignore the facts as they&#39;re staring you right in the face. After all, our software is whatever we want it to be, right? And computers just do what they&#39;re told, right? So obviously we have complete knowledge of the situation, right? Having the knowledge available and acting on it correctly are two very different things. Experience helps but is no absolute antidote against this (you&#39;ll just start letting more elaborate assumptions slip in, because &quot;you&#39;ve seen something like this before&quot;).</p>
<p>My standard reply to &quot;my code hasn&#39;t changed&quot; is &quot;then the circumstances on the machine have changed ever so slightly, exposing a subtle bug that you&#39;ve never noticed before&quot;. The important part is to never stop believing that the code has a bug, until you have solid, iron-clad evidence that something else is to blame. And even *then*, when you fix that you *still* assume your code has a bug by verifying that the fix does what it&#39;s supposed to do! Per Hickam&#39;s dictum (&quot;Patients can have as many diseases as they damn well please&quot;) when something goes wrong, as many things can be wrong at the same time as the universe damn well pleases, but it&#39;s also very probable that only one thing is actually causing the bug to appear.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1014023">
				<div id="div-comment-1014023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/tlwest_4000_gmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>tlwest@gmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1014023">
			October 1, 2012 at 6:37 pm</a>		</div>

		<p>&lt;i&gt;When you have eliminated the impossible, then whatever remains, *however improbable*, must be the truth.&lt;/i&gt;</p>
<p>Ah, it brings back fond memories of &quot;this bug cannot happen&quot; bugs.</p>
<p>The bugs that, after days, you finally get down to a state where you can decisively declare: &quot;Since this obviously can not be happening, the customer must have been hallucinating, and now we&#39;ve been infected as well.&quot;</p>
<p>The last one I had I got down to three lines of code as long as they were placed in a particular place in the code:</p>
<p>var x : int</p>
<p>x = 2</p>
<p>print x</p>
<p>&gt; 0</p>
<p>Turned out it was an obscure bug in the p-code generation&#8230;</p>
<p>The one before that was a buffer being filled in 5 minutes after the system reported a network read failure and we assumed it was safe to re-allocate the buffer. &nbsp;Apparently the call had given up, but somewhere deep inside the system, a brave routine was waiting all alone in the darkness for a packet that did, finally, come, allowing it to fulfill its mission (and corrupt our memory). &nbsp;We had no threads, and we could loop, outputting a memory location, and watch it spontaneously change by itself&#8230;</p>
<p>After those two, whenever we hit an non-obvious bug, it really did take effort to assume it was our code (which it was, of course, 4 times out of 5).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1014223">
				<div id="div-comment-1014223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1014223">
			October 3, 2012 at 6:37 am</a>		</div>

		<p>An interesting one: <a rel="nofollow" target="_new" href="http://mjg59.dreamwidth.org/11235.html" rel="nofollow">mjg59.dreamwidth.org/11235.html</a></p>
<p>The firmware set up the wireless card, and it was DMA-ing data to a region of memory every time it received a wireless beacon packet. The firmware did not reset the card before booting the operating system, and the region of memory it used for the DMA was marked as available for use by the operating system. Memory corruption ensues.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1014283">
				<div id="div-comment-1014283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/tlwest_4000_gmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>tlwest@gmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120928-00/?p=6463#comment-1014283">
			October 3, 2012 at 8:42 am</a>		</div>

		<p>&gt; The firmware set up the wireless card, and it was DMA-ing data to a region of memory </p>
<p>&gt; every time it received a wireless beacon packet. The firmware did not reset the card </p>
<p>&gt; before booting the operating system, and the region of memory it used for the DMA was </p>
<p>&gt; marked as available for use by the operating system. Memory corruption ensues.</p>
<p>Ah. more proof that no matter how bad a debugging scenario I&#39;ve encountered, someone&#39;s had it *much*, *much* worse :-).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

