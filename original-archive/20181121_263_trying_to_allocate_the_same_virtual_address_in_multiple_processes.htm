<html>
<head>
<title>Trying to allocate the same virtual address in multiple processes</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Trying to allocate the same virtual address in multiple processes</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 21, 2018 / year-entry #263</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20181121-00/?p=100285</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">But what are you going to put there?</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer wanted to know if it is possible
to allocate shared memory at the same virtual address
in multiple processes.
</p>
<p>
The short answer is that you can try to map a shared memory
block at a specific address by using the
<code>Map&shy;View&shy;Of&shy;File&shy;Ex</code> function,
but there is no guarantee that the desired address will be
available.
</p>
<p>
You could use the
<code>Virtual&shy;Query&shy;Ex</code> function to explore
the address spaces of each of the participating processes,
and then use the
<code>Map&shy;View&shy;Of&shy;File2</code> function
to map the view into each of them.
If any of the mapping calls fails (say, due to a race condition),
then roll back and look for another address range.
Repeat until successful, or you run out of addresses to try.
</p>
<p>
If processes can join the party dynamically,
you can run into the problem where the existing processes
agreed on an address to use,
and began using that memory,
and then a new process joins in, but the address
is not available in that new process.
</p>
<p>
We asked the customer why they wanted to do this.
</p>
<p>
The customer explained that they had a main program that wanted
to expose some data to diagnostic tools.
If they could put the shared memory block at the same address
in every process, then they could put
some
<code>std::vector</code> and
<code>std::map</code> objects in the shared memory.
Then they would have all the conveniences that come with
having ready-made <code>std::vector</code> and
<code>std::map</code> implementations.
</p>
<p>
Okay, so now that we understand the scenario,
we see that even if they managed to get the same virtual address
in every process, it still wouldn't work.
</p>
<p>
For one thing,
the default allocator for
<code>std::vector</code> and <code>std::map</code>
obtains memory from the C++ runtime,
which will probably allocate it from the heap.
That heap is not part of the shared memory,
which means that the objects contained by the
vector or map are not in the shared memory block,
so they aren't being shared at all in the first place.
</p>
<p>
You could try to fix this by creating a custom allocator
that allocates memory out of the shared memory block,
but now you've signed up for writing a custom allocator.
</p>
<p>
The second problem is thread safety.
The diagnostic process needs to make sure not to try
to read the vector or map while the main process is mutating it.
The data races could result in accessing memory that has
been freed.
You could use a mutex to protect access to the vector
and map,
but you would either have to expand the scope of the mutex to
cover all accesses,
or build a cross-process reader/writer lock so that the
diagnostic processes can take a read lock,
while the main process uses a write lock when mutating.
</p>
<p>
The third problem is that the main process and the
diagnostic processes will have to use the same versions
of the C++ runtime library.
If they fall out of sync,
then you have wandered into undefined behavior.
</p>
<p>
My impression is that the customer was considering
opening the diagnostic interfaces to third parties
so they could write fancy diagnostic tools.
In that case, can easily have the main process
and diagnostic processes falling out of sync.
</p>
<p>
Creating a cross-process data structure is quite complicated.
You can't just put a <code>std::vector</code> in some shared
memory and expect everything to be all peachy.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-parkrrrr even thread-even depth-1" id="comment-1371265">
				<div id="div-comment-1371265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/RP+%28MSFT%29' rel='external nofollow' class='url'>RP (MSFT)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181121-00/?p=100285#comment-1371265">
			November 21, 2018 at 8:31 am</a>		</div>

		<p>This seems like exactly the sort of thing for which one would use boost::interprocess.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-henke odd alt thread-odd thread-alt depth-1" id="comment-1371275">
				<div id="div-comment-1371275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Henke37' rel='external nofollow' class='url'>Henke37</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181121-00/?p=100285#comment-1371275">
			November 21, 2018 at 8:45 am</a>		</div>

		<p>Since it&#8217;s for diagnostic purposes, you can just use ReadProcessMemory. Heck, do your own page fault handler and you&#8217;d be able to do it silently. Please don&#8217;t do it silently.</p>
<p>The fact that it is diagnostics also mean that you already have to deal with possibly faulty processes. As such you need error recovery anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-sstewartgallus00 even thread-even depth-1" id="comment-1371295">
				<div id="div-comment-1371295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Steven+Stewart-Gallus' rel='external nofollow' class='url'>Steven Stewart-Gallus</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181121-00/?p=100285#comment-1371295">
			November 21, 2018 at 8:10 pm</a>		</div>

		<p>I recall Redis does similar hackery on its Windows port (because Windows doesn&#8217;t really support the fork system call [the Kernel does support it but there&#8217;s problems with third party AV and undocumented stuff but the support was needed for the ancient Posix compatibility layer and then there&#8217;s the newer WSL stuff but regardless it&#8217;s not the &#8220;proper&#8221; way to do things.])</p>
<p>Anyway you don&#8217;t need to do this for diagnostic purposes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-geelaw odd alt thread-odd thread-alt depth-1" id="comment-1371305">
				<div id="div-comment-1371305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Gee+Law' rel='external nofollow' class='url'>Gee Law</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181121-00/?p=100285#comment-1371305">
			November 21, 2018 at 10:50 pm</a>		</div>

		<p>What they could do is to resort to COM, which comes with system-provided proxies for inter-process and inter-apartment operations.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

