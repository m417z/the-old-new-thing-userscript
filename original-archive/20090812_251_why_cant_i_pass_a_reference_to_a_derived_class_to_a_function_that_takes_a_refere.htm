<html>
<head>
<title>Why can't I pass a reference to a derived class to a function that takes a reference to a base class by reference?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why can&#8217;t I pass a reference to a derived class to a function that takes a reference to a base class by reference?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 12, 2009 / year-entry #252</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>23</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">"Why can't I pass a reference to a derived class to a function that takes a reference to a base class by reference?" That's a confusing question, but it's phrased that way because the simpler phrasing is wrong! Ths misleading simplified phrasing of the question is "Why can't I pass a reference to a derived...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
"Why can't I pass a reference to a derived class
to a function that takes a reference to a base class by reference?"
That's a confusing question, but it's phrased that way because
the simpler phrasing is wrong!
</p>
<p>
Ths misleading simplified phrasing of the question is
"Why can't I pass a reference to a derived class to a function that
takes a base class by reference?"
And in fact the answer is "You can!"
</p>
<pre>
class Base { }
class Derived : Base { }

class Program {
  static void f(Base b) { }

  public static void Main()
  {
      Derived d = new Derived();
      f(d);
  }
}
</pre>
<p>
Our call to <code>f</code> passes a reference to the
derived class
to a function that takes a reference to the base class.
This is perfectly fine.
</p>
<p>
When people ask this question, they are typically wondering
about passing a reference to the base class <i>by reference</i>.
There is a double indirection here.
You are passing a reference to a variable,
and the variable is a reference to the base class.
And it is this double reference that causes the problem.
</p>
<pre>
class Base { }
class Derived : Base { }

class Program {
  static void f(<font COLOR=blue>ref</font> Base b) { }

  public static void Main()
  {
      Derived d = new Derived();
      f(<font COLOR=blue>ref</font> d); <font COLOR=blue>// error</font>
  }
}
</pre>
<p>
Adding the <code>ref</code> keyword to the parameter results
in a compiler error:
</p>
<pre>
error CS1503: Argument '1': cannot convert from 'ref Derived' to 'ref Base'
</pre>
<p>
The reason this is disallowed is that it would allow you to violate
the type system.
Consider:
</p>
<pre>
  static void f(ref Base b) { b = new Base(); }
</pre>
<p>
Now things get interesting.
Your call to <code>f(ref d)</code> passes a reference to a
<code>Derived</code> by reference.
When the <code>f</code> function modifies its formal parameter <code>b</code>,
it's actually modifying your variable <code>d</code>.
What's worse, it's putting a <code>Base</code> in it!
When <code>f</code> returns, your variable <code>d</code>,
which is declared as being a reference to a <code>Derived</code>
is actually a reference to the base class <code>Base</code>.
</p>
<p>
At this point everything falls apart.
Your program calls some method like <code>d.OnlyInDerived()</code>,
and the CLR ends up executing a method on an object that doesn't
even support that method.
</p>
<p>
You actually knew this; you just didn't know it.
Let's start from the easier cases and work up.
First, passing a reference into a function:
</p>
<pre>
void f(SomeClass s);

...
   T t = new T();
   f(t);
</pre>
<p>
The function <code>f</code> expects to receive a reference to a
<code>SomeClass</code>, but you're passing a reference to a <code>T</code>.
When is this legal?
</p>
<p>
"Duh.
<code>T</code> must be <code>SomeClass</code> or a class derived
from <code>SomeClass</code>."
</p>
<p>
What's good for the goose is good for the gander.
When you pass a parameter as <code>ref</code>,
it not only goes into the method, but it also comes out.
(<a HREF="http://foldoc.org/?call-by-value-result">Not strictly true</a>
but close enough.)
You can think of it as a bidirectional parameter to the function call.
Therefore, the rule "If a function expects a reference to a class,
you must provide a reference to that class or a derived class"
applies in both directions.
When the parameter goes in, you must provide a reference to that
class or a derived class.
And when the parameter comes out,
it also must be a reference to that class or a derived class
(because the function is "passing the parameter" back to you, the caller).
</p>
<p>
But the only time that <code>S</code> can be <code>T</code> or a subclass,
while simultaneously having
<code>T</code> be <code>S</code> or a subclass
is when <code>S</code> and <code>T</code> are the same thing.
This is just the law of antisymmetry for partially-ordered sets:
"if <i>a</i>&nbsp;&le;&nbsp;<i>b</i>
and <i>b</i>&nbsp;&le;&nbsp;<i>a</i>,
then <i>a</i>&nbsp=&nbsp;<i>b</i>."</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-761943">
				<div id="div-comment-761943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-761943">
			August 12, 2009 at 11:44 am</a>		</div>

		<p>Uh&#8230; what happend to &quot;not a .NET blog?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-761953">
				<div id="div-comment-761953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-761953">
			August 12, 2009 at 11:52 am</a>		</div>

		<p>VB has a more clear error message:</p>
<p>Option Strict On disallows narrowing from type &#8216;System.Windows.Forms.Control&#8217; to type &#8216;System.Windows.Forms.Panel&#8217; in copying the value of &#8216;ByRef&#8217; parameter &#8216;x&#8217; back to the matching argument.</p>
<p>Well, more clear in some ways. It could be incorrectly taken to suggest that Option Strict Off is an acceptable solution, but it at least explains about &quot;copying the parameter back to the argument&quot; [which isn&#8217;t [i]exactly[/i] what happens, but it serves as a valid explanation of why this is a problem]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-761993">
				<div id="div-comment-761993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-761993">
			August 12, 2009 at 1:25 pm</a>		</div>

		<p>To Maurits: Relax it&#8217;s a traditional CLR week.</p>
<p>I don&#8217;t program in .NET but I highly recommend reading Raymond&#8217;s CLR week posts. I even claim that from older CLR week posts most of the readers could actually learn something that they can use in their C/C++ programming.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762003">
				<div id="div-comment-762003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erzengel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762003">
			August 12, 2009 at 1:28 pm</a>		</div>

		<p>Maurits: It&#8217;s .NET week. It said so last post I believe. It happens every year.</p>
<p>Raymond: The runtime could throw an exception instead. For me, when I ran into this, it was because a reference to a struct got changed to a reference to a class, and so it became a double reference. The function was only changing the members of the variable, not assigning to the variable itself, so all that was necessary was to remove the ref. In that case there was no &quot;going around typing&quot;, but it also was unnecessary to use the ref.</p>
<p>After all, I can &quot;(Derived)Base&quot; to get around typing just as much as a ref would, but I&#8217;ll get a runtime exception if Base doesn&#8217;t actually contain a Derived.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762023">
				<div id="div-comment-762023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tony Cox [MSFT]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762023">
			August 12, 2009 at 2:07 pm</a>		</div>

		<p>@Erzengel: Yes, the runtime could check all the types and throw an exception, but there would be a performance cost to that.</p>
<p>Proper support for co/contra-variance is a better solution, and in fact is the route being taken.</p>
<p>(As an aside, CLR arrays are co-variant. Which is generally regarded as somewhat unfortunate these days.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-761933">
				<div id="div-comment-761933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-761933">
			August 12, 2009 at 11:14 am</a>		</div>

		<p>This is the same thing as converting Derived** to Base** in C++; see <a rel="nofollow" target="_new" href="http://www.parashift.com/c++-faq-lite/proper-inheritance.html#faq-21.2" rel="nofollow">http://www.parashift.com/c++-faq-lite/proper-inheritance.html#faq-21.2</a> for the C++ explanation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762053">
				<div id="div-comment-762053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erzengel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762053">
			August 12, 2009 at 6:15 pm</a>		</div>

		<p>Tony: Yes it does have a cost, but I was under the impression we were already paying that cost&#8230; It happens with arrays, after all.</p>
<p>I&#8217;m not saying that&#8217;s what I&#8217;d want, really. Compile time protection against that is a good thing. It&#8217;s just an intellectual exercise that, since it does it differently elsewhere, what if you applied that here?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762063">
				<div id="div-comment-762063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">wcoenen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762063">
			August 12, 2009 at 7:10 pm</a>		</div>

		<p>I like that the compiler does these sort of checks, but I don&#8217;t understand why it doesn&#8217;t stop me from shooting myself in the foot for a similar case with arrays:</p>
<p>// compiles but blows up at runtime</p>
<p>object[] test = new string[] {&#8220;foo&#8221;, &#8220;bar&#8221;};</p>
<p>test[0] = new object();</p>
<div class=post>[<i>But who actually writes code like that? You would much more likely write<br /><code><u>string</u>[] test = new string[] {&#8220;foo&#8221;, &#8220;bar&#8221;};<br />test[0] = new object(); // compiler raises error here</code><br />It seems odd to create special &#8220;constants propagation&#8221; code for something nobody actually writes. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762083">
				<div id="div-comment-762083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762083">
			August 12, 2009 at 9:01 pm</a>		</div>

		<p>&lt;i&gt;Ths misleading simplified phrasing of the question is &quot;Why can&#8217;t I pass a reference to a derived class to a function that takes a base class by reference?&quot; And in fact the answer is &quot;You can!&quot;&lt;i&gt;</p>
<p>I believe you&#8217;ve mis-worded the misleading simplified phrasing of the question. &nbsp;It should read &quot;Why can&#8217;t I pass a reference to a derived class to a function that takes a reference to a base class [by value]?&quot;</p>
<p>The terms &quot;by reference&quot; and &quot;by value&quot; have very specific meanings, in C# and elsewhere. &nbsp;In the &quot;You can!&quot; code example, the &quot;Base b&quot; argument to the method &quot;f&quot; is a &quot;by value&quot; argument, and when &quot;f&quot; is called, the variable &quot;d&quot; is passed &quot;by value&quot; to &quot;f&quot;. &nbsp;The value is a reference, but it&#8217;s passed &quot;by value&quot;, not &quot;by reference&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762093">
				<div id="div-comment-762093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erzengel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762093">
			August 12, 2009 at 9:51 pm</a>		</div>

		<p>[But who actually writes code like that? You would much more likely write</p>
<p>string[] test = new string[] {&#8220;foo&#8221;, &#8220;bar&#8221;}; &#8230;-Raymond]</p>
<p>Well, consider this possibility:</p>
<p>void MyFunction(object[] Params)</p>
<p>{</p>
<p> &nbsp; &nbsp;switch(this.MyEnum)</p>
<p> &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;case Enum.MyObject:</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Params[0] = new MyObject();</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;case Enum.OtherObject:</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Params[0] = new OtherObject();</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;default:</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;throw new Exception();</p>
<p>}</p>
<p>void UseMyFunction()</p>
<p>{</p>
<p> &nbsp; &nbsp;OtherObject[] Output = new OtherObject[5];</p>
<p> &nbsp; &nbsp;MyFunction(Output);</p>
<p>}</p>
<p>If this.MyEnum is Enum.MyObject, you&#8217;ve got a runtime error.</p>
<p>This is very, very bad code, but it is also valid code. I would expect something LIKE this could possibly happen. Especially if the programmer, when writing this code, says &#8220;Well, any function that calls UseMyFunction would set this.MyEnum to Enum.OtherObject, so it&#8217;s OK to create the array as an OtherObject array.&#8221; Then, lo, a few weeks later, someone makes a change and that&#8217;s no longer the case.</p>
<div>[<i>Well that&#8217;s not the same as the original code, which is all within a single function. This error requires cross-function data flow analysis. Even so, it raises a compiler error in MyFunction based on whether or not the function UseMyFunction exists. Most of the time, people don&#8217;t expect this sort of &#8220;spooky compiler action at a distance.&#8221; -Raymond</i>]</div>
<p>It&#8217;s always an annoyance to me when someone focuses on the example code. Programming is extremely complicated. There are massive layers of indirection and generalization that make it difficult to know what&#8217;s happening and when. It&#8217;s usually because of these layers that esoteric things go wonky. Focus on the actual problem, not the steps to reproduce.</p>
<p>Speaking as someone whose worked in Quality Assurance, I have seen times where bugs have been dismissed because &#8220;Well that seems extremely unlikely that someone would do that&#8221;, but they don&#8217;t realize that that was an example, that was the easiest, and clearest, way to reproduce it. But the bug happens everywhere, it&#8217;s just not so easy to show it everywhere. Focus on the problem, not the extremely simplified steps.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762113">
				<div id="div-comment-762113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.henning.makholm.net/' rel='external nofollow' class='url'>Henning Makholm</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762113">
			August 12, 2009 at 10:33 pm</a>		</div>

		<p>CLR inherited covariant array subtyping from Java &#8212; there must have been quite a strong marketing pressure for the language core not to obviously miss (mis)features Java had. I think it speaks well of C# that it does not extend the same wartiness to other primitives of its own invention.</p>
<p>The covariance of Java arrays may originally have been an oversight in the type system, but had a number of (more or less) legitimate uses before generics were added to the language. For example, it allows a general container class to have a</p>
<p>&nbsp; void writeAllElementsIntoArray(Object[] dest)</p>
<p>method, and let the caller supply an array of the type it knew the elements to have.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762123">
				<div id="div-comment-762123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hexatron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762123">
			August 12, 2009 at 10:51 pm</a>		</div>

		<p>Stuff like this makes me glad i never figured out all that object-oriented stuff (he said while lost in a deep/shallow copy bug in arch-competitor&#8217;s IPhone picture-taking doohickey.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762133">
				<div id="div-comment-762133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762133">
			August 12, 2009 at 10:58 pm</a>		</div>

		<p>&quot;The covariance of Java arrays may originally have been an oversight in the type system, but had a number of (more or less) legitimate uses before generics were added to the language.&quot;</p>
<p>Since Java generics aren&#8217;t reified, as in C#, I think there is still a legitimate use for covariant arrays in Java. &nbsp;For that matter, the lack of generics in C# 1.0 may be part of the justification for covariant arrays in the CLR <em>and</em> C#.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762213">
				<div id="div-comment-762213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762213">
			August 13, 2009 at 5:05 am</a>		</div>

		<p>@Erzengel: I would simply repeat &quot;who actually writes code like that&quot;, but with a dash of &quot;if you do write code like that and you&#8217;ve determined that you need it, the compiler is no longer able to help you, deal with it&quot;.</p>
<p>The problem here is array covariance, which as this example demonstrates is a double-edged sword. Understanding it and when it causes problems is the programmer&#8217;s burden. The problem is in any case not with the compiler &#8212; static type checking only goes so far, that&#8217;s nothing new. The compiler isn&#8217;t there to catch all errors in code that&#8217;s &quot;very bad&quot; but &quot;valid&quot;.</p>
<p>It&#8217;s also good to keep in mind that all the complexity in &quot;programming is extremely complicated&quot; is put there by the programmers. It might be necessary complexity, but it&#8217;s all of our own making.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762223">
				<div id="div-comment-762223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">C++ programmer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762223">
			August 13, 2009 at 5:12 am</a>		</div>

		<p>&quot;Our call to f passes a reference to the derived class to a function that takes a reference to the base class. This is perfectly fine.&quot;</p>
<p>Is it? I do not know much about C# currently but I would have thought this would slice the class as it would in C++. Is that not the case?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762233">
				<div id="div-comment-762233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762233">
			August 13, 2009 at 6:54 am</a>		</div>

		<p>Of course sometimes you want to do the reverse but you can&#8217;t do that either except by collecting everything up in the return value.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762293">
				<div id="div-comment-762293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://polymathprogrammer.com/' rel='external nofollow' class='url'>Vincent</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762293">
			August 13, 2009 at 11:44 am</a>		</div>

		<p>Just a short note. I understand that law of antisymmetry as the squeeze theorem in calculus.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-762253">
				<div id="div-comment-762253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762253">
			August 13, 2009 at 7:01 am</a>		</div>

		<p>C++ programmer: there is no equivalent of C++ objects on the stack in C#. When you declare a name of class type within a function body, you are not actually declaring an object. You&#8217;re declaring a *reference* to an object. However, if the variable is a &#8216;value type&#8217; &#8211; either a fixed-size built-in type such as int, float, double, bool, or a &#8216;struct&#8217; &#8211; then it actually *is* an object on the stack.</p>
<p>So, to review: if A is a &#8216;class&#8217;, in C#:</p>
<p>A a;</p>
<p>is the equivalent of</p>
<p>A* a;</p>
<p>in C++.</p>
<p>That means when you pass a reference type (class type) to a method, you are *automatically* passing by reference. Because class types are never passed by value &#8211; and only class types support inheritance &#8211; slicing is not possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762383">
				<div id="div-comment-762383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">manicmarc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762383">
			August 13, 2009 at 2:50 pm</a>		</div>

		<p>Interesting &#8211; I program c# every day and I&#8217;ve never had a need to do this, so never noticed it. I avoid using ref where possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762443">
				<div id="div-comment-762443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762443">
			August 13, 2009 at 5:40 pm</a>		</div>

		<p>Yeah, I messed up doing this from memory &#8211; all &quot;const&quot;s not <em>before</em> a T should be moved one position to the right in the left column</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762413">
				<div id="div-comment-762413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mauke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762413">
			August 13, 2009 at 4:41 pm</a>		</div>

		<p>@hexatron: &quot;Stuff like this makes me glad i never figured out all that object-oriented stuff&quot; &#8212; well, you&#8217;ve got the same problem in plain C. If you have a type T, &#8216;T *&#8217; is convertible to &#8216;const T *&#8217;; but &#8216;T **&#8217; can&#8217;t be converted to &#8216;const T **&#8217;, for exactly the same reason: you could use it to make a &#8216;T *&#8217; point to a &#8216;const T&#8217;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762423">
				<div id="div-comment-762423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762423">
			August 13, 2009 at 5:16 pm</a>		</div>

		<p>@mauke: Of course, &#8220;T **&#8221; can be converted to &#8220;T const **&#8221;. It&#8217;s a matter of asking the right question.</p>
<p>typedef (whatever) T;</p>
<p>typedef T *PT;</p>
<p>typedef const T *PCT;</p>
<p>T * = PT = pointer to T</p>
<p>const T * = PCT = pointer to const T</p>
<p>T const * = const PT = const pointer to T</p>
<div class="post">[<i>This is where your logic falls apart. &#8220;T const *&#8221; is a pointer to const T. You&#8217;re confusing it with &#8220;T * const&#8221; which is a const pointer to T. -Raymond</i>]</div>
<p>T ** = PT * = pointer to pointer to T</p>
<p>T const ** = const PT * = pointer to const pointer to T</p>
<p>const T ** = PCT * = pointer to pointer to const T</p>
<p>T * const * = PT const * = const pointer to pointer to T</p>
<p>&#8220;pointer to {FOO}&#8221; is convertible to &#8220;pointer to const {FOO}&#8221;</p>
<p>&#8220;const {FOO}&#8221; is an actual const, which cannot be assigned to, but can be assigned to a {FOO}.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762913">
				<div id="div-comment-762913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090812-00/?p=17133#comment-762913">
			August 16, 2009 at 9:18 am</a>		</div>

		<p>I don&#8217;t get the point. T** can be converted to T*const* but not to const T** (as mauke said).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

