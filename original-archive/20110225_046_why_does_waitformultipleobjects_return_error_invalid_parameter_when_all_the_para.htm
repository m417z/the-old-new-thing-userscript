<html>
<head>
<title>Why does WaitForMultipleObjects return ERROR_INVALID_PARAMETER when all the parameters look valid to me?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does WaitForMultipleObjects return ERROR_INVALID_PARAMETER when all the parameters look valid to me?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 25, 2011 / year-entry #47</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110225-00/?p=11383</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer asked for assistance with the WaitForMultipleObjects function: I am getting ERROR_INVALID_PARAMETER when calling Wait­For­Multiple­Objects even though all the parameters are valid as far as I can tell. I've narrowed it down to this simple program. int main() { int i; HANDLE Handles[4]; // Create the events for (i = 0; i < 4;...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer asked for assistance with the
<code>WaitForMultipleObjects</code> function:
</p>
<blockquote CLASS=q>
<p>
I am getting
<code>ERROR_<wbr>INVALID_<wbr>PARAMETER</wbr></wbr></code>
when calling
<code>Wait&shy;For&shy;Multiple&shy;Objects</code> even though
all the parameters are valid as far as I can tell.
I've narrowed it down to this simple program.
</p>
<pre>
int main()
{
 int i;
 HANDLE Handles[4];

 // Create the events
 for (i = 0; i &lt; 4; i++) {
  Handles[i] = CreateEvent(NULL, FALSE, FALSE, TEXT("Test"));
  if (Handles[i] == NULL) {
   printf("Failed to create event - test failed\n"); return 0;
  }
 }

 // Set them all to signaled
 for (i = 0; i &lt; 4; i++) SetEvent(Handles[i]);

 // Wait for all of them - we expect this to return WAIT_OBJECT_0
 printf("WaitForMultipleObjects returned %d\n",
        WaitForMultipleObjects(4, Handles, TRUE, INFINITE));

 return 0;
}
</pre>
</blockquote>
<p>
First of all,
<i>thank you</i> for narrowing the issue down to
a minimal program that illustrates the problem.
You'd be surprised how often a customer says,
"I'm having problem with function&nbsp;X.
Here's a program that illustrates the problem."
And then attaches a huge project that doesn't
compile because it is written in some
development environment different from the one you have
on your machine.
</p>
<p>
The problem here is that you are passing four handles to the same
event to <code>Wait&shy;For&shy;Multiple&shy;Objects</code> with the
<code>bWait&shy;All</code> parameter set to <code>TRUE</code>.
The <code>Wait&shy;For&shy;Multiple&shy;Objects</code> function rejects
duplicates if you ask it to wait for all of the objects.
Why is that?
</p>
<p>
Well, consider this program:
It creates a named auto-reset
event (as is "obvious" from
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/08/28/728349.aspx">
the <code>FALSE</code> second
parameter passed to <code>Create&shy;Event</code></a>)
and stores a handle to it in <code>Handles[0]</code>.
The second through fourth calls to <code>Create&shy;Event</code> merely create
new handles to the same auto-reset event because the name matches
an existing event.
The second loop sets that same event four times.
And then the <code>Wait&shy;For&shy;Multiple&shy;Objects</code> asks to wait
for all of the handles to be signaled.
But since all four handles refer to the same object,
it's being asked to wait until the event has reached the state
where the wait can complete four times simultaneously. (Huh?)
</p>
<p>
Recall that <code>Wait&shy;For&shy;Multiple&shy;Objects</code> does not
alter the state of any of the waited objects until the wait completes.
If you ask it to wait for both an event and a semaphore,
and the event is signaled but the semaphore is not,
then the function will leave the event signaled while it waits
for the semaphore.
Only when all the items being waited for are signaled will the
<code>Wait&shy;For&shy;Multiple&shy;Objects</code> function perform whatever
actions are appropriate for acquiring a signaled object and return.
</p>
<p>
Okay, so we asked it to wait on the same auto-reset event four times.
But that's nonsense:
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/06/22/642849.aspx">
An auto-reset event is just a stupid semaphore</a>
which can have at most one token.
But in order for the wait to succeed, it needs four tokens.
That's never going to happen, so the wait is nonsensical.
</p>
<p>
More generally speaking,
<code>Wait&shy;For&shy;Multiple&shy;Objects</code> returns
<code>ERROR_<wbr>INVALID_<wbr>PARAMETER</wbr></wbr></code> if you pass
<code>bWaitAll = TRUE</code>
and there are any duplicates in the handle array
(either identical handles, or different handles to the same
underlying object).
It doesn't try to puzzle out the objects and say,
"Well, let me see if this is a reasonable combination of
objects to wait on more than once";
it just sees the duplicate and says
"Forget this!"
</p>
<p>
Going back to the customer's original problem:
We asked why they were creating four handles to the same
object, and what they expected when waiting for an auto-reset
event to have four available tokens (which it never will),
and the customer admitted that it was just an error in their code.
The original version of the code used a named event and waited
on it with <code>Wait&shy;For&shy;Single&shy;Object</code>,
and when they modified the code to make it support
multiple events, they forgot to give each event a different name.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-897263">
				<div id="div-comment-897263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110225-00/?p=11383#comment-897263">
			February 25, 2011 at 7:20 am</a>		</div>

		<p>Besides from the customer&#39;s problem, use of a named event in 90% of the cases is a design error. In the remaining 10%, 9% are also highly suspicious and may not be well thought.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-897333">
				<div id="div-comment-897333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110225-00/?p=11383#comment-897333">
			February 25, 2011 at 9:53 am</a>		</div>

		<p>I wonder how a caller who gets some handles to use with this wait-api-function could check for this specific problem and produce a better error message?</p>
<p>I have often wrapped up API functions to raise human readable exceptions, instead of general INVALID_PARAMETER errors. They check input parameters beforehand in DEBUG mode so a developer can find out easier what the problem may be.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-897343">
				<div id="div-comment-897343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rafael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110225-00/?p=11383#comment-897343">
			February 25, 2011 at 9:56 am</a>		</div>

		<p>Alex could you provide more info about that? I use named events to signal it is time to do something or that something is already done, between already running applications. I can&#39;t think about a better IPC method to achieve that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-897363">
				<div id="div-comment-897363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110225-00/?p=11383#comment-897363">
			February 25, 2011 at 10:51 am</a>		</div>

		<p>The names are global (at least for all processes in the same session, and when you prefix the names with &quot;Local&quot;). Any program can grab your events and manipulate them. You need to make sure that there will never be any name collision, with your own software (when started more than once), and especially with other software.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-897383">
				<div id="div-comment-897383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MarcT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110225-00/?p=11383#comment-897383">
			February 25, 2011 at 11:36 am</a>		</div>

		<p>So weird, I just fixed a bug related to this last week.</p>
<p>SetNotificationPositions is a DirectSound call that creates signal points in a hardware sound buffer, which we wait on using WaitForMultipleObjects. When the play head passes the notification point, we get a signal and can then refill a portion of the buffer. In our 10-year-old sound code, we divide the buffer into equal segments, with a notification position at the end of each, and also put a final notification position at the point where the file will end after X times filling the buffer.</p>
<p>After 10 years and thousands of sound files, we finally happened to hit one where the &quot;end position&quot; coincided with one of the segment divisions, and SetNotificationPositions returned &quot;INVALID_PARAMETER&quot;. And I tracked it down and realized exactly the fact this post explains.</p>
<p>Really weird note for those not bored already: The call failed even though the two positions (expressed as bytes into the sound buffer) were 1 byte off. Playing with the debugger, I found that it failed when A = B &#8211; 1, and when A = B, but not A = B + 1. Maybe there&#39;s some sort of float conversion thing going on? I really hate sound drivers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-897423">
				<div id="div-comment-897423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110225-00/?p=11383#comment-897423">
			February 25, 2011 at 2:33 pm</a>		</div>

		<p>@Rafael:</p>
<p>To see if your design falls into those 90% or 9% or the last 1%, you need to answer these questions:</p>
<ol>
<li>
<p>How do you make sure there is no name collision between your event name and third party app event name, if there is one?</p>
</li>
<li>
<p>Do you need to communicate between applications in different security contexts (logon contexts) on the same desktop session?</p>
</li>
<li>
<p>Do you need to isolate applications running in different desktop sessions?</p>
</li>
<li>
<p>Do you need to run two instances of signalling or watching applications in the same session? Do you need to broadcast the signal?</p>
</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-897433">
				<div id="div-comment-897433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110225-00/?p=11383#comment-897433">
			February 25, 2011 at 2:56 pm</a>		</div>

		<p>MarcT:</p>
<p>My guess is that your sample size is more than 1 byte.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-897463">
				<div id="div-comment-897463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110225-00/?p=11383#comment-897463">
			February 26, 2011 at 9:32 am</a>		</div>

		<p>Almost anytime I want an event I end up using a socket to simulate it.</p>
<p>Why? So I can use select() to wait for it. WaitForMultipleObjects doesn&#39;t work correctly with socket objects, and select() doesn&#39;t work at all on event objects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-897483">
				<div id="div-comment-897483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110225-00/?p=11383#comment-897483">
			February 26, 2011 at 1:02 pm</a>		</div>

		<blockquote>
<ol>
<li>How do you make sure there is no name collision between your event name and third party app </li>
</ol>
<p>  event name, if there is one?
</p></blockquote>
<p>When I&#39;ve used a named event=, I&#39;ve put a GUID in the name. &nbsp;Intentional manipulation by third part applications? &#8211; Possible. &nbsp;Accidental collision? &#8211; No.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-897563">
				<div id="div-comment-897563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rafael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110225-00/?p=11383#comment-897563">
			February 27, 2011 at 1:44 pm</a>		</div>

		<p>Alex, I think this is how windows programming is meant to be. Whatever synchronization object you use, there is a chance (in terms of possible/impossible) that there will be a collision (or another app trying to hijack us).</p>
<p>IMHO, It is not a problem inherent from named objects per se. Imagine we could create an unnamed event object (or a pipe, mutex, memmappedfile, etc) and DuplicateHandle to our target process and work on the duplicated handle from there. Even this way, how could we know what our target process is? Checking its window caption? Checking its CRC? There is still a chance for collision or third party manipulation.</p>
<p>Acidental collisions are mitigated by using a GUID like our friend Marc said. So we need to worry about third party app hijacks.</p>
<p>This is what I meant when I said this is how windows programming is meant to be, there is no way to know what is a legit process since user mode processes are easily hijackable. Could you give an example of how would you do it to signal from process A that process B should do something?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-897593">
				<div id="div-comment-897593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110225-00/?p=11383#comment-897593">
			February 27, 2011 at 9:42 pm</a>		</div>

		<p>Name collisions are just an inherent property of the world. It can apply to anything that doesn&#39;t have a central naming authority. You can have collisions in window classes, ProgIDs, file names, registry keys, and everywhere else where you need to know names in advance without coordination.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-897763">
				<div id="div-comment-897763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110225-00/?p=11383#comment-897763">
			February 28, 2011 at 7:57 am</a>		</div>

		<p>@Mark, Rafael:</p>
<p>Use of a GUID is what I hoped you&#39;re doing. That solves unintentional collision problem. Of course, named objects can be manipulated in Windows and &quot;the other OS&quot; by other processes; Windows is no worse here. &quot;The other OS&quot; also has peans to manipulate other process memory; no difference here as well.</p>
<p>If you want to pass a handle to another process, your best chance is when you start that process. You could use lpReserved2 in STARTUPINFO to pass a blob of data, although you need to make sure you get to it before CRTL in the child process. Or you can use STARTUPINFOEX and pass the handles through it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-897963">
				<div id="div-comment-897963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt [Visual C++ MVP]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110225-00/?p=11383#comment-897963">
			February 28, 2011 at 12:45 pm</a>		</div>

		<p>@Joshua: There&#39;s WSAEventSelect for that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-898023">
				<div id="div-comment-898023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gaddafi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110225-00/?p=11383#comment-898023">
			February 28, 2011 at 4:37 pm</a>		</div>

		<p>I use scottGUIDs to be safe.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

