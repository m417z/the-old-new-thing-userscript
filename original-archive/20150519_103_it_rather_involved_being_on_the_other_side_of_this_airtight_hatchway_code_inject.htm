<html>
<head>
<title>It rather involved being on the other side of this airtight hatchway: Code injection via QueueUserAPC</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>It rather involved being on the other side of this airtight hatchway: Code injection via QueueUserAPC</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 19, 2015 / year-entry #104</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150519-00/?p=45571</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A security vulnerability report arrived that took the following form: The Queue­User­APC function can be used to effect an elevation of privilege, as follows: Identify a process you wish to attack. Obtain access to a thread with THREAD_SET_­CONTEXT access. Make some educated guesses as to what DLLs are loaded in that process. Start with kernel32.dll,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A security vulnerability report arrived that took the following form:
</p>
<blockquote CLASS=q>
<p>
The <code>Queue&shy;User&shy;APC</code> function can be used to effect
an elevation of privilege, as follows:
</p>
<ol>
<li>Identify a process you wish to attack.
<li>Obtain access to a thread with
    <code>THREAD_<wbr>SET_&shy;CONTEXT</code> access.</p>
<li>Make some educated guesses as to what DLLs are loaded in that
    process.
    Start with
    <code>kernel32.dll</code>,
    since you're going to need it in step&nbsp;5.</p>
<li>From the attacking process, scan the memory of those DLLs
    looking for a backslash, followed by something that can pass
    for a path and file name.
    Such strings are relatively abundant because there are a lot
    of registry paths hard-coded into those binaries.
    Suppose you found the string
    <code>\Windows NT\<wbr>Current&shy;Version\<wbr>App&shy;Compat&shy;Flags</code>.
    Even though ASLR randomizes DLL placement, the placement
    is consistent among all processes,
    so an address calculated in one process is highliy likely to be valid
    in all processes.</p>
<li>Create a DLL called
    <code>C:\Windows NT\<wbr>Current&shy;Version\<wbr>App&shy;Compat&shy;Flags.dll</code>.
    Put your payload in this DLL.</p>
<li>From the attacking thread,
    call
    <code>Queue&shy;User&shy;APC</code>
    with the address of <code>Load&shy;LibraryW</code> as the function
    pointer, the victim thread as the thread handle,
    and a pointer to the fixed string identified in part&nbsp;4
    as the last parameter.</p>
<li>The next time the victim thread processes APCs,
    it will pass
    <code>\Windows NT\<wbr>Current&shy;Version\<wbr>App&shy;Compat&shy;Flags</code>
    to the <code>Load&shy;LibraryW</code> function,
    which will load the payload DLL, thereby effecting code injection
    and consequent elevation of privilege.
</ol>
</blockquote>
<p>
Note that this attack fails if the victim thread never waits alertably,
which is true of most threads.</p>
<p>
If you have been paying attention, the alarm bells probably went off
at step&nbsp;2.
If you have
<code>THREAD_<wbr>SET_&shy;CONTEXT</code> access to a thread,
then you pwn that thread.
There's no need to use
<code>Queue&shy;User&shy;APC</code> to make the thread do your
bidding.
You already have enough to make the thread dance to your music.
In other words, you are already on the other side of the airtight
hatchway.
</p>
<p>
Here's how:
Look for a code sequence that goes
</p>
<pre>
    push someregister
    call LoadLibraryW
</pre>
<p>
Use the <code>&shy;Set&shy;Thread&shy;Context</code> function
to set the pushed register equal to the address of the string
you found in step&nbsp;4,
and set the instruction pointer to the code fragment.
The thread will then resume execution at the specified instruction
pointer:
It pushes the address of the string, and then it calls
<code>Load&shy;LibraryW</code>.
Bingo, your DLL loads,
and you didn't even have to wait for the thread to wait
alertably.
</p>
<p>
On non-x86 platforms, this is even easier:
Since all other platforms use register-based calling conventions,
you merely have to load the address of the string into the
"first parameter" register (<code>rcx</code> for x64)
and set the instruction pointer to the beginning of
<code>Load&shy;LibaryW</code>.
</p>
<p>
By default,
<code>THREAD_<wbr>SET_&shy;CONTEXT</code> access
is granted only to the user, and never to lower integrity levels.
In other words, a low IL process cannot get
<code>THREAD_<wbr>SET_&shy;CONTEXT</code> access to a medium or
high integrity thread,
and a medium IL process cannot get access to a high integrity thread.
This means that, by default, you can only get
<code>THREAD_<wbr>SET_&shy;CONTEXT</code> access to threads
that have equivalent permissions to what you already have,
so there is no elevation.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1243696">
				<div id="div-comment-1243696" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150519-00/?p=45571#comment-1243696">
			May 19, 2015 at 7:16 am</a>		</div>

		<p>And how often do you have THREAD_SET_Â­CONTEXT but not PROCESS_VM_WRITE+PROCESS_VM_OPERATION so you cannot inject the &quot;normal&quot; way?</p>
<p>If someone were to put this in a reusable library you might start running into the &quot;what if another application also did this&quot; problem unless it picks a random string. You also litter the users drive with strange folders which are sure to ring some alarm bells&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1243686">
				<div id="div-comment-1243686" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150519-00/?p=45571#comment-1243686">
			May 19, 2015 at 7:28 am</a>		</div>

		<p>Sounds like somebody tried to create threads running as different users in the same process. While you can do this (and I know why you might want to), the threads are not secured from each other, so don&#39;t run code from a different user in such a thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243676">
				<div id="div-comment-1243676" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150519-00/?p=45571#comment-1243676">
			May 19, 2015 at 8:22 am</a>		</div>

		<p>I fail to see how step 3 is relevant. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1243666">
				<div id="div-comment-1243666" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150519-00/?p=45571#comment-1243666">
			May 19, 2015 at 8:37 am</a>		</div>

		<p>Doesn&#39;t step 5 also require Administrator privileges to write into a subdirectory of C:Windows NT? &nbsp;Or are there compatibility shims that allow that to work without being an Administrator?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1243656">
				<div id="div-comment-1243656" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150519-00/?p=45571#comment-1243656">
			May 19, 2015 at 8:41 am</a>		</div>

		<p>SetThreadContext() also allows you to directly set the Instruction Pointer register for this thread, so you can directly make it call LoadLibrary()&#8230; Oh, and you control the Stack Pointer, too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1243646">
				<div id="div-comment-1243646" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150519-00/?p=45571#comment-1243646">
			May 19, 2015 at 10:12 am</a>		</div>

		<p>&gt;Doesn&#39;t step 5 also require Administrator privileges to write into a subdirectory of C:Windows NT? </p>
<p>Since &quot;C:Windows NT&quot; doesn&#39;t exist (at least not on Win7 Enterprise), unless there is a group policy in place preventing users from creating folders in the root folder, anyone can create a new folder named &quot;Windows NT&quot; and sub-folders thereof.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243636">
				<div id="div-comment-1243636" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150519-00/?p=45571#comment-1243636">
			May 19, 2015 at 10:15 am</a>		</div>

		<p>Oh right, duh. &nbsp;Things that are not the same: {C:Windows, C:Windows NT}.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1243626">
				<div id="div-comment-1243626" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150519-00/?p=45571#comment-1243626">
			May 19, 2015 at 11:11 am</a>		</div>

		<p>The set of {PROCESS_CREATE_THREAD, PROCESS_DUP_HANDLE, PROCESS_VM_OPERATION, PROCESS_VM_WRITE, THREAD_SET_Â­CONTEXT} should just have been a single access right. The way it is now just makes people think that you can grant one of them without giving full access to your process &#8211; in reality every one of them implies full access except for PROCESS_VM_OPERATION &#8211; but why would you change the protection of pages in the process without doing anything else to it anyways?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243596">
				<div id="div-comment-1243596" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150519-00/?p=45571#comment-1243596">
			May 20, 2015 at 1:27 am</a>		</div>

		<p>It feels like &quot;It rather involved being on the other side of this airtight hatchway&quot; should be a tag by now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-metac_kozelcu odd alt thread-odd thread-alt depth-1" id="comment-1243586">
				<div id="div-comment-1243586" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Pyjong' rel='external nofollow' class='url'>Pyjong</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150519-00/?p=45571#comment-1243586">
			May 20, 2015 at 5:16 am</a>		</div>

		<p>I love how Raymond elaborates the presented attempt and then says &quot;nope, doesn&#39;t work&quot; in the last sentence :D</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243566">
				<div id="div-comment-1243566" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150519-00/?p=45571#comment-1243566">
			May 20, 2015 at 11:49 am</a>		</div>

		<p>yet another way to steal your own money</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

