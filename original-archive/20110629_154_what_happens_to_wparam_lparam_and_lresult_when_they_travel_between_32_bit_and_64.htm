<html>
<head>
<title>What happens to WPARAM, LPARAM, and LRESULT when they travel between 32-bit and 64-bit windows?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What happens to WPARAM, LPARAM, and LRESULT when they travel between 32-bit and 64-bit windows?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 29, 2011 / year-entry #155</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110629-00/?p=10303</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The integral types WPARAM, LPARAM, and LRESULT are 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems. What happens when a 32-bit process sends a message to a 64-bit window or vice versa? There's really only one choice when converting a 64-bit value to a 32-bit value: Truncation. When a 64-bit...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The integral types <code>WPARAM</code>, <code>LPARAM</code>,
and <code>LRESULT</code> are 32 bits wide on 32-bit systems
and 64 bits wide on 64-bit systems.
What happens when a 32-bit process sends a message to a 64-bit window
or vice versa?
</p>
<p>
There's really only one choice when
converting a 64-bit value to a 32-bit value: Truncation.
When a 64-bit process sends a message to a 32-bit window,
the 64-bit <code>WPARAM</code> and <code>LPARAM</code> values
are truncated to 32 bits.
Similarly, when a 64-bit window returns an <code>LRESULT</code> back
to a 32-bit sender, the value is truncated.
</p>
<p>
But converting a 32-bit value to a 64-bit value introduces a choice:
Do you zero-extend or sign-extend?
</p>
<p>
The answer is obvious if you remember
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/11/25/55850.aspx">
the history of <code>WPARAM</code>,
<code>LPARAM</code>, and <code>LRESULT</code></a>,
or if you just look at the header file.
</p>
<p>
The <code>WPARAM</code> is zero-extended,
while <code>LPARAM</code> and <code>LRESULT</code>
are sign-extended.
</p>
<p>
If you remember that <code>WPARAM</code> used to be a <code>WORD</code>
and <code>LPARAM</code> and <code>LRESULT</code> used to be <code>LONG</code>,
then this follows from the fact that <code>WORD</code> is an unsigned type
(therefore zero-extended) and <code>LONG</code> is a signed type
(therefore sign-extended).
</p>
<p>
Even if you didn't know that, you could look it up in the header file.
</p>
<pre>
typedef UINT_PTR WPARAM;
typedef LONG_PTR LPARAM;
typedef LONG_PTR LRESULT;
</pre>
<p>
<code>UINT_PTR</code> is an unsigned type (therefore zero-extended)
and
<code>LONG_PTR</code> is a signed type (therefore sign-extended).</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-921983">
				<div id="div-comment-921983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110629-00/?p=10303#comment-921983">
			June 29, 2011 at 7:46 am</a>		</div>

		<p>I&#39;d assume that for messages where either WPARAM or LPARAM is a pointer, the kernel marshals the pointed-to data between the different address spaces? &nbsp;In which case, no truncation or sign/zero-extension takes place, but instead the address spaces get remapped as appropriate. &nbsp;That only works for known messages, though, where the kernel knows that the parameters are pointers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-921993">
				<div id="div-comment-921993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110629-00/?p=10303#comment-921993">
			June 29, 2011 at 7:54 am</a>		</div>

		<p>@Adam, well, yeah, (well, i suspect it&#39;s user32 that does it, not &quot;the kernel&quot;) the same as on 32-bit windows. Each process has its own address space, after all &#8211; and even within a process messages with string parameters have to [potentially] be converted between ANSI and Unicode.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-922023">
				<div id="div-comment-922023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110629-00/?p=10303#comment-922023">
			June 29, 2011 at 9:05 am</a>		</div>

		<p>The Win32 marshaling (I think USER32 is what does it although I don&#39;t know) only applies to standard messages, so don&#39;t depend on WM_USER+X doing it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-922073">
				<div id="div-comment-922073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110629-00/?p=10303#comment-922073">
			June 29, 2011 at 12:48 pm</a>		</div>

		<p>Actually for messages in the system range (&lt; WM_USER), marshalling is exactly what happens, and is documented. &nbsp;Of course for those messages, Windows understands what the data points to and so can perform an appropriate copy.</p>
<p>Naturally, for messages outside that range Windows has no idea what the data is about and does not provide marshalling.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-922053">
				<div id="div-comment-922053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arlie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110629-00/?p=10303#comment-922053">
			June 29, 2011 at 11:04 am</a>		</div>

		<p>The kernel/user32 has no business marshaling what the data points to. &nbsp;It has no idea what the data is, how big it is, and whether that data contains *more* pointers. &nbsp;If you want a marshaling/RPC subsystem, then use one, but that&#39;s not what MSG is for.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-922143">
				<div id="div-comment-922143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zahical</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110629-00/?p=10303#comment-922143">
			June 30, 2011 at 8:49 am</a>		</div>

		<p>And, of course, we have the &quot;poorman&#39;s RPC&quot; generic WM_COPYDATA message. (though it&#39;s a bit harder to use on Vista+ because of UIPI)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

