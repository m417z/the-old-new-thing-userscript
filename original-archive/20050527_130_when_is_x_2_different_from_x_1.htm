<html>
<head>
<title>When is x/2 different from x>>1?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When is x/2 different from x&gt;&gt;1?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 27, 2005 / year-entry #131</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Everyone "knows" that the following pairs of expressions are equivalent: x*2 &equiv; x<<1 x/2 &equiv; x>>1 Too bad they aren't. In the C language standard, there is no requirement that the internal representation of signed integers be two's complement. All the permissible representations agree for positive numbers, but negative numbers can have different representations. If...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Everyone "knows" that the following pairs of expressions are equivalent:</p>
<table>
<tr>
<td><code>x*2 &equiv; x&lt;&lt;1</code></td>
</tr>
<tr>
<td><code>x/2 &equiv; x&gt;&gt;1</code></td>
</tr>
</table>
<p> Too bad they aren't. </p>
<p> In the C language standard, there is no requirement that the internal representation of signed integers be two's complement. All the permissible representations agree for positive numbers, but negative numbers can have different representations. If <code>x</code> is negative, then <code>x*2</code> and <code>x&lt;&lt;1</code> are quite different on a sign/magnitude system. </p>
<p> However, Win32 requires a two's complement machine, in which case the first equivalence <code>x*2 &equiv; x&lt;&lt;1</code> is indeed always true. </p>
<p> Of course, the compiler is free to recognize this and rewrite your multiplication or shift operation.  In fact, it is very likely to do this, because <code>x+x</code> is more easily <a href="http://www.gamedev.net/reference/articles/article212.asp"> pairable</a> than a multiplication or shift. Your shift or multiply-by-two is probably going to be rewritten as something closer to an <code>add eax, eax</code> instruction. </p>
<p> As for the second so-called equivalence, the C language specification originally did not specify whether division of a negative number by a positive number rounds towards or away from zero, but in 1999, the specification was revised to require rounding towards zero. Furthermore, the result of a right-shift of a negative value is unspecified, so the expression <code>x&gt;&gt;1</code> has an unspecified result if <code>x</code> is negative. </p>
<p> Even if you assume that the shift fills with the sign bit, The result of the shift and the divide are different if <code>x</code> is negative. </p>
<table>
<tr>
<td><code>(-1) / 2 &equiv; 0</code></td>
</tr>
<tr>
<td><code>(-1) &gt;&gt; 1 &equiv; -1</code></td>
</tr>
</table>
<p> The moral of the story is to write what you mean. If you want to divide by two, then write "<code>/2</code>", not "<code>&gt;&gt;1</code>". </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-278193">
				<div id="div-comment-278193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278193">
			May 27, 2005 at 9:25 am</a>		</div>

		<p>&quot;The moral of the story is to write what you mean. If you want to divide by two, then write &quot;/2&quot;, not &quot;&gt;&gt;1&quot;. &quot;</p>
<p>Unless you are concerned about perfomance. I can&#8217;t recall the URL now but I read an article on MSDN which states the bit shifting is always faster than division/multiplication on the .NET framework and backed it up with stats.<br />
<br />If you are going to be dealing only with unsigned types and for eg you are writing a chess program using bitboards, I figure you would prefer to write &quot;&gt;&gt;1&quot; and not &quot;/2&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278223">
				<div id="div-comment-278223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nate</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278223">
			May 27, 2005 at 9:39 am</a>		</div>

		<p>KC, I&#8217;d like to see that URL.  I&#8217;d imagine that in general, bitshifting would be faster, but I have difficulty believing that they are any different when multiplying or dividing by constant powers of 2, as this is child&#8217;s play for the optimizer.</p>
<p>I&#8217;d imagine that this would be easy for lightweight JITers like EconoJIT as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278243">
				<div id="div-comment-278243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://Ken@Alverson.net' rel='external nofollow' class='url'>Ken</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278243">
			May 27, 2005 at 9:45 am</a>		</div>

		<p>I&#8217;ve been telling people this for years.  Especially back when VB.Net had just come out &#8211; people were swearing up and down that they /needed/ to have shift operators so they could divide quickly.</p>
<p>At the time, VB.Net had /only/ signed integer types.  Explanations that shifting and dividing were not and could not be the same operation in that language fell largely on deaf ears.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278253">
				<div id="div-comment-278253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://Ken@Alverson.net' rel='external nofollow' class='url'>Ken</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278253">
			May 27, 2005 at 9:49 am</a>		</div>

		<p>KC &#8211; if you write a multiplication by power of two and aren&#8217;t inhibiting optimizations (for example, running under the debugger), the JIT can and does optimize the multiplication into a bit shift (or an add).</p>
<p>Turning division into a bitshift is a little trickier, but the optimizer does it &#8211; it&#8217;s basically a bitshift with some extra code to fix up the rounding if the dividend is negative.  Not quite as fast as a raw bitshift, but you get the right answer, so that&#8217;s always good.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278263">
				<div id="div-comment-278263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://Ken@Alverson.net' rel='external nofollow' class='url'>Ken</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278263">
			May 27, 2005 at 9:49 am</a>		</div>

		<p>KC &#8211; if you write a multiplication by power of two and aren&#8217;t inhibiting optimizations (for example, running under the debugger), the JIT can and does optimize the multiplication into a bit shift (or an add).</p>
<p>Turning division into a bitshift is a little trickier, but the optimizer does it &#8211; it&#8217;s basically a bitshift with some extra code to fix up the rounding if the dividend is negative.  Not quite as fast as a raw bitshift, but you get the right answer, so that&#8217;s always good.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278273">
				<div id="div-comment-278273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://Ken@Alverson.net' rel='external nofollow' class='url'>Ken</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278273">
			May 27, 2005 at 9:50 am</a>		</div>

		<p>KC &#8211; if you write a multiplication by power of two and aren&#8217;t inhibiting optimizations (for example, running under the debugger), the JIT can and does optimize the multiplication into a bit shift (or an add).</p>
<p>Turning division into a bitshift is a little trickier, but the optimizer does it &#8211; it&#8217;s basically a bitshift with some extra code to fix up the rounding if the dividend is negative.  Not quite as fast as a raw bitshift, but you get the right answer, so that&#8217;s always good.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278283">
				<div id="div-comment-278283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278283">
			May 27, 2005 at 9:59 am</a>		</div>

		<p>Nate, I found the URL. Here it is:</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dndotnet/html/fastmanagedcode.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dndotnet/html/fastmanagedcode.asp</a></p>
<p>Have a gander at Table 1.</p>
<p>I didn&#8217;t know the compiler will optimize the code to a bit shift if you are dividing by powers of two. Well, you learn something new everyday.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278303">
				<div id="div-comment-278303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://Ken@Alverson.net' rel='external nofollow' class='url'>Ken</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278303">
			May 27, 2005 at 10:30 am</a>		</div>

		<p>KC &#8211; that table does show that shifting is faster than multiplication (though not nearly by as large a margin as many people think).  However, that table is comparing multiplcation which actually gets compiled as multiplication with shifting.</p>
<p>When the JIT recognizes a constant multiplication and compiles it as a shift, it would no longer fall under multiplication in that table.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-larryosterman even thread-even depth-1" id="comment-278313">
				<div id="div-comment-278313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Larry+Osterman+%5BMSFT%5D' rel='external nofollow' class='url'>Larry Osterman [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278313">
			May 27, 2005 at 10:30 am</a>		</div>

		<p>Even the compiler I wrote for my compiler design class in college supported constant folding.  It&#8217;s pretty easy to implement (although if you combine constant folding and common subexpression elimination it can get hairy).</p>
<p>I&#8217;d be surprised if any compiler didn&#8217;t support it these days (except for naive implementations of PCC (assuming that PCC&#8217;s still around)).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-larryosterman odd alt thread-odd thread-alt depth-1" id="comment-278323">
				<div id="div-comment-278323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Larry+Osterman+%5BMSFT%5D' rel='external nofollow' class='url'>Larry Osterman [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278323">
			May 27, 2005 at 10:34 am</a>		</div>

		<p>Oh, and KC, that article you&#8217;re quoting just says that shift is faster than divide.</p>
<p>You&#8217;re assuming that you&#8217;re smarter than the compiler when you make statements like that.</p>
<p>And you&#8217;re not.  There are TIMES when a human can write better code than a compiler can.  But in these days, I&#8217;m not so sure about it &#8211; the rules for writing truly efficient code are sufficiently squirrly that hand coding in assembly is almost ALWAYS a performance loss.</p>
<p>The days when mere mortals were able to keep all the ramifications of code in memory are long gone.</p>
<p>If you thought it was hard keeping track of what values were in 6 general purpose registers, consider what happens when you have 128&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278343">
				<div id="div-comment-278343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nate</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278343">
			May 27, 2005 at 12:47 pm</a>		</div>

		<p>One rule of optimization is that if you could possibly write a reasonable Perl script to make the optimization on the source code, chances are that the compiler already makes that optimization behind your back.</p>
<p>Changing &#8216;x *= 2&#8217; to &#8216;x &lt;&lt;= 1&#8217; certainly falls in that category.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278383">
				<div id="div-comment-278383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">roxfan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278383">
			May 27, 2005 at 1:32 pm</a>		</div>

		<p>MSVC also does a neat optimization trick when dividing by a constant. E.g. &quot;a/10&quot; compiles into following (&quot;a&quot; is a signed int):<br />
<br />mov  ecx, DWORD PTR _a$[esp+4]<br />
<br />mov  eax, 66666667h<br />
<br />imul     ecx<br />
<br />sar  edx, 2<br />
<br />mov  eax, edx<br />
<br />shr  eax, 1Fh<br />
<br />add  edx, eax</p>
<p>For unsigned case it&#8217;s a bit simpler:<br />
<br />mov  eax, 0CCCCCCCDh<br />
<br />mul  DWORD PTR _a$[esp+4]<br />
<br />shr  edx, 3</p>
<p>The trick here is that a/b=(2^N/b)*(a/2^N). As b is constant, the first part can be folded. And the second part is replaced by shifts.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278423">
				<div id="div-comment-278423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://Ken@Alverson.net' rel='external nofollow' class='url'>Ken</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278423">
			May 27, 2005 at 4:28 pm</a>		</div>

		<p>roxfan &#8211; the more general explanation for what they are doing there is they are basically doing a fixed point multiplication of &quot;a&quot; by &quot;1/b&quot;.  2^N is &quot;1&quot; in M.N fixed point, so &quot;2^N/b&quot; is &quot;1/b&quot;.  Multiply by &quot;a&quot;, and then the &quot;/2^N&quot; converts from fixed point back to integer by dropping the N fractional bits from the result (rounding down).</p>
<p>I have to wonder why they don&#8217;t use 32.32 fixed point, as they could completely eliminate the shift (the top 32 bits of a multiplication are just &quot;edx&quot;) &#8211; there must be rounding effects that prevent 32.32 fixed point from being accurate in all cases.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278203">
				<div id="div-comment-278203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">polytix</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278203">
			May 27, 2005 at 9:34 am</a>		</div>

		<p>(If you are going to be dealing only with unsigned types and for eg you are writing a chess program using bitboards, I figure you would prefer to write &quot;&gt;&gt;1&quot; and not &quot;/2&quot;)</p>
<p>Exactly. In that case, you *mean* to shift bits arounds, not divide. Whoever heard of dividing chess games?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278213">
				<div id="div-comment-278213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278213">
			May 27, 2005 at 9:37 am</a>		</div>

		<p>KC: You should nevertheless &quot;write what you mean&quot; until you discover that really THAT instruction make any impact on the performance of your application, which is  almost certainly *never* going to happen.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278433">
				<div id="div-comment-278433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278433">
			May 27, 2005 at 4:45 pm</a>		</div>

		<p>Actually, the standard says nothing about left shifting a signed integer (some machines trap under certain conditions) so you can argue whether left shifting a signed integer is actually undefined or not. Right shifting a signed integer is implementation defined, not unspecified (implementation defined is the same thing as unspecified except they&#8217;re required to document what happens) so a compiler writer may or may not decide to implement it using sign extension even on 2s complement. So, my suggestion is to never use bit operations on signed integers (and I&#8217;ll even extend this to requiring both operands being unsigned so you don&#8217;t trigger a promotion to a signed integer type under certain conditions).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278443">
				<div id="div-comment-278443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278443">
			May 27, 2005 at 5:35 pm</a>		</div>

		<p>err I meant right shifting a negative value is implementation defined.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278463">
				<div id="div-comment-278463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dutch Meyer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278463">
			May 27, 2005 at 5:39 pm</a>		</div>

		<p>Let&#8217;s not go too far in disparaging the effectiveness of hand optimization in assembly.</p>
<p>In fact, speaking as someone who does this kind of thing, one of the reasons to avoid these premature optimizations is the possiblity that it will be assembly optimized in the future.</p>
<p>Whoever does that work is going to want you to use the more descriptive option, because it will provide them with a better understanding of the code.  This high level of understanding is what allows programmers to write better code than compilers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278353">
				<div id="div-comment-278353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278353">
			May 27, 2005 at 12:54 pm</a>		</div>

		<p>I think the real moral of the story is: &quot;Being shifty is not the same as being divisive.&quot; (Sorry to bring up the last election.)</p>
<p>I sense that the AutoCad programmers that didn&#8217;t even *check* the icon for their Add/Remove entry probably berated their junior programmers for not replacing small power-of-2 divides by shifts. My 3GHz CPU divides a lot better than it displays non-existent icons.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278483">
				<div id="div-comment-278483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jamesatuncw.com/blog/archive/2005/05/28/1858.aspx' rel='external nofollow' class='url'>James Summerlin's Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278483">
			May 28, 2005 at 2:48 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278523">
				<div id="div-comment-278523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278523">
			May 30, 2005 at 2:49 am</a>		</div>

		<blockquote><p>
  &gt;&gt; If x is negative, then x*2 and x&lt;&lt;1 are<br />
  <br />&gt;&gt;&gt; quite different on a sign/magnitude<br />
  <br />&gt;&gt;&gt; system.<br />
  <br />&gt;&gt;<br />
  <br />&gt;: I don&#8217;t see it.<br />
  <br />&gt;<br />
  <br />&gt; Consider x = -1<br />
  <br />&gt; x = 0x80000001<br />
  <br />&gt; x &lt;&lt; 1 = 0x00000002 = +2 </p>
<p>That&#8217;s why I said:</p>
<p>&gt;&gt; The closest thing I can think of is that<br />
  <br />&gt;&gt; a broken compiler generates a machine<br />
  <br />&gt;&gt; instruction for logical (or unsigned) shift<br />
  <br />&gt;&gt; left instead of arithmetic (or signed)<br />
  <br />&gt;&gt; shift left, but that would break programs<br />
  <br />&gt;&gt; that had valid code to do arithmetic left<br />
  <br />&gt;&gt; shifting of positive values.</p>
<p>Though now I notice that it wouldn&#8217;t break<br />
  <br />programs with valid code doing that, it would<br />
  <br />only break programs with overflowing code<br />
  <br />doing that.  For example:<br />
  <br />0x40000000 &lt;&lt; 1 yielding 0x80000000 instead of 0x00000000 is just overflowing one way instead of overflowing a different way.</p>
<p>Nonetheless a lot of machine languages do have separate instructions for arithmetic shifts than for logical shifts, and non-broken compilers know to map signed shift operators onto arithmetic shift instructions.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278503">
				<div id="div-comment-278503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278503">
			May 29, 2005 at 9:25 pm</a>		</div>

		<p>&gt; If x is negative, then x*2 and x&lt;&lt;1 are<br />
<br />&gt; quite different on a sign/magnitude system. </p>
<p>I don&#8217;t see it.  The closest thing I can think of is that a broken compiler generates a machine instruction for logical (or unsigned) shift left instead of arithmetic (or signed) shift left, but that would break programs that had valid code to do arithmetic left shifting of positive values.  The second closest thing I can think of is overflow, where the undefined results of one overflow don&#8217;t have to match the undefined results of a different overflow.</p>
<p>Did you mean that x*2 and x&lt;&lt;1 have different results on a one&#8217;s complement machine?  In that case I&#8217;d have to study the standard for a while.  I&#8217;m not quite inclined to waste time on that though, because the 1989 standard was already broken in its handling of one&#8217;s complement and last I saw the 1999 standard didn&#8217;t fix it.  The %c format specifier writes or reads an object of any character type in a way where the library cannot figure out which character type it was, so the library cannot figure out whether or not the value was a one&#8217;s complement negative value that needs an adjustment to be applied.</p>
<p>Regarding comments on writing assembly code, there are essentially two situations where it should be done.  One is when there isn&#8217;t a compiler that will produce the necessary code (e.g. when a human reads a manual and figures out which subset of the registers should be saved at the beginning of an interrupt handler).  The other is when the compiler generated correct code but you can look at it and see a necessary improvement.</p>
<p>As an example of the latter case, for a garbage collection routine I had to do a quicksort before moving live objects, and it was much better to monopolize the CPU for 0.25 seconds instead of 1.00 seconds.  This was on an industrial system which wasn&#8217;t going to respond to external events during that time.  (Sure there were other ways of avoiding monopolizing the CPU, equivalent to a Visual Basic program calling DoEvents in a loop.  Then the thing would have spread its 1.00 second of CPU time across an elapsed time of 20 minutes more or less, which also wasn&#8217;t acceptable.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-278513">
				<div id="div-comment-278513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278513">
			May 29, 2005 at 11:21 pm</a>		</div>

		<p>&gt; If x is negative, then x*2 and x&lt;&lt;1 are<br />
<br />&gt; quite different on a sign/magnitude system.<br />
<br />: I don&#8217;t see it.</p>
<p>Consider x = -1</p>
<p>x = 0x80000001<br />
<br />x &lt;&lt; 1 = 0x00000002 = +2<br />
<br />but x * 2 = -2 = 0x80000002.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-278803">
				<div id="div-comment-278803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278803">
			May 31, 2005 at 2:04 pm</a>		</div>

		<p>The C standard states (section 6.5.7) that the result of &quot;x &lt;&lt; y&quot; is undefined if x &lt; 0. The compiler is not broken.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278863">
				<div id="div-comment-278863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050527-25/?p=35523#comment-278863">
			May 31, 2005 at 9:19 pm</a>		</div>

		<blockquote><p>
  The C standard states (section 6.5.7) that<br />
  <br />&gt; the result of &quot;x &lt;&lt; y&quot; is undefined if x &lt; 0.<br />
  <br />&gt; The compiler is not broken. </p>
<p>Hmm, on my second reading of the relevant paragraph I think you&#8217;re right.  The minimum grammatical change to make that paragraph non-self-contradictory would be to change a semicolon to a period and let the next word begin a new sentence.  That is probably what the committee intended, and in that context you are right.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

