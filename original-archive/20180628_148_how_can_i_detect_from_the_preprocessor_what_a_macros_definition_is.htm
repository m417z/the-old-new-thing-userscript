<html>
<head>
<title>How can I detect from the preprocessor what a macro's definition is?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I detect from the preprocessor what a macro&#8217;s definition is?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 28, 2018 / year-entry #148</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Evil preprocessor tricks.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
It is common that a preprocessor macro chooses between multiple
behaviors based on various other controlling macros.
</p>
<pre>
#ifdef BUILD_DLL
#define CONTOSOAPI __declspec(dllexport)
#else
#define CONTOSOAPI __declspec(dllimport)
#endif

#ifdef USE_STDCALL
#define CONTOSOAPICALL __stdcall
#else
#define CONTOSOAPICALL __cdecl
#endif
</pre>
<p>
Suppose you want to check at compile time how these
macros are defined.
Is there a way to do string comparisons in the preprocessor,
something like this?
</p>
<pre>
#if somethingsomething CONTOSOAPI == __declspec(dllexport)
</pre>
<p>
I'll get it out of the way up front:
Instead of trying to parse the value of a macro,
you can just replicate the conditionals that led to the
macro's definition.
In other words, you can do this:
</p>
<pre>
#ifdef BUILD_DLL
... stuff to do when CONTOSOAPI is __declspec(dllexport)
#else
... stuff to do when CONTOSOAPI is __declspec(dllimport)
#endif

#ifdef USE_STDCALL
... stuff to do when CONTOSOAPICALL is __stdcall
#else
... stuff to do when CONTOSOAPICALL is __cdecl
#endif
</pre>
<p>
But let's say that this option isn't available.
For example, maybe the logic that eventually leads to
the definition of <code>CONTOSOAPI</code> is super-complicated
and difficult to replicate.
Or the header file is not under your control and you want your
code to adapt to newer versions of the header file that may
use different logic to decide what definition to use.
</p>
<p>
The C and C++ preprocessors do not do string comparisons.
All they can do is evaluate constant integral expressions.
So things don't sound good.
</p>
<p>
But wait, maybe we can trick them into evaluating constant
integral expressions!
</p>
<pre>
#define __declspec
#define dllexport 1
#define dllimport 2

#if CONTOSOAPI == __declspec(dllexport)
... stuff to do when CONTOSOAPI is __declspec(dllexport)
#elif CONTOSOAPI == __declspec(dllimport)
... stuff to do when CONTOSOAPI is __declspec(dllimport)
#else
#error I don't know what CONTOSOAPI is defined as
#endif

#undef dllimport
#undef dllexport
#undef __declspec

#define __stdcall 1
#define __cdecl 2

#if CONTOSOAPICALL == __stdcall
... stuff to do when CONTOSOAPICALL is __stdcall
#elif CONTOSOAPICALL == __cdecl
... stuff to do when CONTOSOAPICALL is __cdecl
#else
#error I don't know what CONTOSOAPICALL is defined as
#endif

#undef __cdecl
#undef __stdcall
</pre>
<p>
By redefining the words that appear in the
<code>CONTOSOAPI</code> and <code>CONTOSOAPICALL</code>
macros,
you can turn the text into integer constant expression.
After macro expansion,
<code>__declspec(dllexport)</code> becomes
<code>(1)</code>, and
<code>__declspec(dllimport)</code> becomes
<code>(2)</code>.
These are integer constant expressions that can be
evaluated by the preprocessor!
</p>
<p>
Why did I choose <code>1</code> and <code>2</code> as the
integer constants rather than <code>0</code> and <code>1</code>?
One of the rules of the C and C++ preprocessors is that
after macro substitution, if there are any identifiers remaining
whose values are not known, then they are treated as zero.
This means that <code>__declspec(magicbeans)</code> expands to
<code>(magicbeans)</code>,
and since there is no definition for <code>magicbeans</code>,
the preprocessor treats it as zero.
If I had defined <code>dllexport</code> as <code>0</code>,
then I would misdetect <code>__declspec(magicbeans)</code>
as <code>dllexport</code>.
</p>
<p>
This is extreme abuse of the C and C++ preprocessor.
But desperate times may call for desperate measures.
</p>
<p>
<b>Bonus chatter</b>:
Note that this trick requires that you find some way of defining
symbols so that what remains is a valid integer constant expression.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1349225">
				<div id="div-comment-1349225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115#comment-1349225">
			June 28, 2018 at 7:09 am</a>		</div>

		<p>The traditional answer to this question is &#8220;add an autoconf test for it&#8221; (autoconf can compile and run arbitrary test programs at configure time). Of course, that&#8217;s not always an option.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1349235">
				<div id="div-comment-1349235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115#comment-1349235">
			June 28, 2018 at 8:18 am</a>		</div>

		<p>Okay, so how do you write a test program to determine how the macro is defined?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-david-taylor even depth-3 parent" id="comment-1349245">
				<div id="div-comment-1349245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/D+Taylor+84' rel='external nofollow' class='url'>D Taylor 84</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115#comment-1349245">
			June 28, 2018 at 8:37 am</a>		</div>

		<p>#define STR(x) #x</p>
<p>if (!strcmp(STR(CONTOSOAPI), &#8220;__declspec(dllexport)&#8221;)<br />
  exit(0);</p>
<p>exit(1);</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-david-taylor odd alt depth-4" id="comment-1349275">
				<div id="div-comment-1349275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/D+Taylor+84' rel='external nofollow' class='url'>D Taylor 84</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115#comment-1349275">
			June 28, 2018 at 8:39 am</a>		</div>

		<p>Well, I can&#8217;t work out how to format that legibly, but basically &#8220;stringification&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1349325">
				<div id="div-comment-1349325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115#comment-1349325">
			June 28, 2018 at 11:32 am</a>		</div>

		<p>True, though it breaks if whitespace changes. Probably not an issue in practice.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1349395">
				<div id="div-comment-1349395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">R P (MSFT)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115#comment-1349395">
			June 28, 2018 at 2:15 pm</a>		</div>

		<p>If it were an issue in practice, you could use std::regex instead of strcmp.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1349475">
				<div id="div-comment-1349475" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115#comment-1349475">
			June 28, 2018 at 5:32 pm</a>		</div>

		<p>Again, it just boils down to how much code you&#8217;re willing to write.</p>
<p>The thing that annoys me is in modern C++ you&#8217;re not allowed to redefine keywords anymore. Thankfully the compiler vendors have their act together we&#8217;ll enough to provide an option to turn that dumb rule off.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1349265">
				<div id="div-comment-1349265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Quantum</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115#comment-1349265">
			June 28, 2018 at 8:38 am</a>		</div>

		<p>I think he meant using # to turn it into a string and print it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1349295">
				<div id="div-comment-1349295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thomas Harte</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115#comment-1349295">
			June 28, 2018 at 9:39 am</a>		</div>

		<p>Sometimes I wonder what proportion of these things you&#8217;ve stumbled upon as a result of your role in maintaining backwards compatibility. Surely having to come up with integral substitutions that definitely produce unique results does just that little amount less than would be ideal to ensure compatibility with future changes to headers beyond your control? It feels intuitively like the sort of maintenance issue that, ten years and three developers later, might result in a call to Microsoft for help under the pretext of &#8220;this was working, now it isn&#8217;t, ergo you broke this&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1349305">
				<div id="div-comment-1349305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SwineOne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115#comment-1349305">
			June 28, 2018 at 10:31 am</a>		</div>

		<p>Well wouldn&#8217;t you know it, just this week I had the exact same problem, and eventually I solved it exactly that way (save for the fact I didn&#8217;t know about the issue with 0, so I&#8217;ll go change my program now).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1349315">
				<div id="div-comment-1349315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115#comment-1349315">
			June 28, 2018 at 10:55 am</a>		</div>

		<p>Clever, but please let me never have to deal with code that uses this technique.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1349335">
				<div id="div-comment-1349335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Touton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115#comment-1349335">
			June 28, 2018 at 12:05 pm</a>		</div>

		<p>It&#8217;s worth noting here that defining a macro with the same name as a language keyword is forbidden, and the preprocessor is allowed to reject that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1349345">
				<div id="div-comment-1349345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon Cohen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115#comment-1349345">
			June 28, 2018 at 1:24 pm</a>		</div>

		<p>This is solvable in C++ as opposed to using autoconf or cmake:</p>
<p><a href="https://godbolt.org/g/d6ZCq2" rel="nofollow">https://godbolt.org/g/d6ZCq2</a></p>
<p>That is in c++17 for ease of implementation, but it&#8217;s possible in C++11 using recursion instead of a for loop.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1349355">
				<div id="div-comment-1349355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon Cohen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115#comment-1349355">
			June 28, 2018 at 1:25 pm</a>		</div>

		<p>You can solve this in C++: <a href="https://godbolt.org/g/d6ZCq2" rel="nofollow">https://godbolt.org/g/d6ZCq2</a></p>
<p>This implementation is in C++17 but it should work in c++11 as well, just with a slightly uglier look since you have to use recursion instead of iteration in the constexpr string comp</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1349495">
				<div id="div-comment-1349495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115#comment-1349495">
			June 29, 2018 at 7:06 am</a>		</div>

		<p>Provided the behavior you want to vary is expressible within the C++ language. But what if you wanted to #include a different header file depending on the setting? Or declare a member variable conditionally? (You can sort of fake the latter with a templatized struct, but it&#8217;s not as neat as an #ifdef.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1349365">
				<div id="div-comment-1349365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://www.alpinesoft.co.uk' rel='external nofollow' class='url'>Paul Sanders</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115#comment-1349365">
			June 28, 2018 at 1:47 pm</a>		</div>

		<p>Ingenious, Raymond, ingenious!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1349385">
				<div id="div-comment-1349385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115#comment-1349385">
			June 28, 2018 at 1:59 pm</a>		</div>

		<p>And why would you ever feel the desire to do that?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1349465">
				<div id="div-comment-1349465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115#comment-1349465">
			June 28, 2018 at 4:58 pm</a>		</div>

		<p>One thing I&#8217;ve seen is an accompanying macro with an integral value that is defined alongside the actual behaviour you want. Checking which behaviour is in use boils down to checking the accompanying macro.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

