<html>
<head>
<title>Another pattern for using the InitOnce functions</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Another pattern for using the InitOnce functions</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 22, 2016 / year-entry #269</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161222-00/?p=94995</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>1</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The synchronous two-phase initialization.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In my
survey of
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20110408-01/?p=10983">
patterns for using the InitOnce functions</a>,
I omitted the synchronous two-phase initialization.
</p>
<p>
The synchronous two-phase initialization is similar to the
simple callback-based version in that only one thread gets
to attempt an initialization at a time.
But instead of doing the initialization in a callback,
you do the initialization inline.
</p>
<p>
As a refresher, here's how you do it
using <code>Init&shy;Once&shy;Execute&shy;Once</code>:
</p>
<pre>
BOOL CALLBACK AllocateAndInitializeTheThing(
    PINIT_ONCE initOnce,
    PVOID parameter,
    PVOID *context)
{
    *context = new(std::nothrow) Thing();
    return *context != nullptr;
}

Thing *GetSingletonThing()
{
    static INIT_ONCE initOnce = INIT_ONCE_STATIC_INIT;
    void *result;
    if (InitOnceExecuteOnce(&amp;initOnce,
                            AllocateAndInitializeTheThing,
                            nullptr, &amp;result)) {
        return static_cast&lt;Thing*&gt;(result);
    }
    return nullptr;
}
</pre>
<p>
To use <code>Init&shy;Once&shy;Begin&shy;Initialize</code>
in synchronous mode, you basically move the callback function
inline:
</p>
<pre>
Thing *GetSingletonThing()
{
    static INIT_ONCE initOnce = INIT_ONCE_STATIC_INIT;
    void *result;
    BOOL pending;
    if (InitOnceBeginInitialize(&amp;initOnce, 0,
                                &amp;pending, &amp;result)) {
        if (pending) {
            // Try to initialize the thing.
            result = new(std::nothrow) Thing();

            InitOnceComplete(&amp;initOnce,
                result ? 0 : INIT_ONCE_INIT_FAILED,
                result);
        }
        return static_cast&lt;Thing*&gt;(result);
    }
    return nullptr;
}
</pre>
<p>
You start by calling
<code>Init&shy;Once&shy;Begin&shy;Initialize</code>, and
the value stored in the <code>pending</code> parameter
tells you whether you need to run the initialization.
If it says that you need to initialize, then do your
initialization and then report the result back by calling
<code>Init&shy;Once&shy;Complete</code>, saying either
<code>0</code> to mean that initialization succeeded,
or <code>INIT_<wbr>ONCE_<wbr>INIT_<wbr>FAILED</code>
to say that it failed.
</p>
<p>
If a second thread tries to initialize while an initialization
is already in progress, the initial request waits to see what
the result of the existing initialization is.
If the existing initialization eventually succeeds, then
the second initialization is told, "It's all good.
No need to initialize."
If the existing initialization eventually fails, then
the second initialization is told, "Not yet initialized.
Why don't you give it a shot?"
</p>
<p>
In other words, <code>Init&shy;Once&shy;Execute&shy;Once</code>
acts like a wrapper that goes roughly like this:
</p>
<pre>
BOOL InitOnceExecuteOnce(
    PINIT_ONCE initOnce,
    PINIT_ONCE_FN callback,
    void* parameter,
    void** context)
{
  BOOL pending;
  BOOL success = InitOnceBeginInitialize(
                          initOnce, 0, &amp;pending, context)) {
  if (success) {
    if (pending) {
      success = callback(initOnce, parameter, context);
      InitOnceComplete(initOnce,
        success ? 0 : INIT_ONCE_INIT_FAILED, *context);
    }
  }
  return success;
}
</pre>
<p>
Here's a comparison table:
</p>
<table BORDER=1 BORDERCOLOR=black
    STYLE="border-collapse: collapse"
    CELLSPACING=0 CELLPADDING=3>
<tr>
<td></td>
<th>
    Init&shy;Once&shy;Execute&shy;Once
    </th>
<th>
    Init&shy;Once&shy;Begin&shy;Initialize<br>
    Synchronous mode
    </th>
<th>
    Init&shy;Once&shy;Begin&shy;Initialize<br>
    Asynchronous mode
    </th>
</tr>
<tr>
<td>How initialized</td>
<td>Callback</td>
<td>Inline</td>
<td>Inline</td>
</tr>
<tr>
<td>Initialization parallelism</td>
<td>Serialized</td>
<td>Serialized</td>
<td>Parallel</td>
</tr>
<tr>
<td>Success reporting</td>
<td>Callback returns TRUE</td>
<td>Init&shy;Once&shy;Complete(0)</td>
<td>Init&shy;Once&shy;Complete(INIT_<wbr>ONCE_<wbr>ASYNC)</td>
</tr>
<tr>
<td>Failure reporting</td>
<td>Callback returns FALSE</td>
<td>Init&shy;Once&shy;Complete(INIT_<wbr>ONCE_<wbr>FAILED)</td>
<td>Do nothing</td>
</tr>
</table>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (1)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1" id="comment-1277845">
				<div id="div-comment-1277845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161222-00/?p=94995#comment-1277845">
			December 22, 2016 at 10:49 am</a>		</div>

		<p>A side note: <code>std::call_once</code>[1] appears roughly equivalent to the synchronous path. Magic statics[2] may be faster as the compiler can optimize quite a bit but most likely cannot handle two phase init safely as shown above.  C++ does not appear to provide an equivalent to the asynchronous pattern.</p>
<p>[1] <a href="http://en.cppreference.com/w/cpp/thread/call_once" rel="nofollow">http://en.cppreference.com/w/cpp/thread/call_once</a><br />
[2] <a href="http://en.cppreference.com/w/cpp/language/storage_duration#Static_local_variables" rel="nofollow">http://en.cppreference.com/w/cpp/language/storage_duration#Static_local_variables</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

