<html>
<head>
<title>When you have a SAFEARRAY, you need to know what it is a SAFEARRAY *of*</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When you have a SAFEARRAY, you need to know what it is a SAFEARRAY *of*</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 25, 2013 / year-entry #24</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130125-00/?p=5443</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer had a problem with SAFEARRAY, or more specifically, with CComSafeArray. CComSafeArray<VARIANT> sa; GetAwesomeArray(&sa); LONG lb = sa.GetLowerBound(); LONG ub = sa.GetUpperBound(); for (LONG i = lb; i <= ub; i++) { CComVariant item = sa.GetAt(i); ... use the item ... } The GetAt method returns a VARIANT&, and when it is copy-constructed into...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer had a problem with <code>SAFEARRAY</code>,
or more specifically, with
<code>CComSafeArray</code>.
</p>
<pre>
CComSafeArray&lt;VARIANT&gt; sa;
GetAwesomeArray(&amp;sa);

LONG lb = sa.GetLowerBound();
LONG ub = sa.GetUpperBound();

for (LONG i = lb; i &lt;= ub; i++) {
 CComVariant item = sa.GetAt(i);
 ... use the item ...
}
</pre>
<p>
The <code>GetAt</code> method returns a
<code>VARIANT&amp;</code>,
and when it is copy-constructed into
<code>item</code>,
the
<code><a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/08/28/9887637.aspx"
>DISP_<wbr>E_</a><wbr>BAD&shy;VAR&shy;TYPE</code>
exception is raised.
</p>
<p>
On the other hand, if the offending line is changed to
</p>
<pre>
CComQIPtr&lt;IAwesome&gt; pAwesome = sa.GetAt(i).punkVal;
</pre>
<p>
then the problem goes away.
</p>
<p>
Your initial reaction to this code would be that
there is an off-by-one error in the loop control,
but it turns out that there isn't because
<code>SAFEARRAY</code> uses inclusive upper bounds
rather than exclusive.
</p>
<p>
The first step in debugging this is seeing what is
in the bad variant that makes the copy constructor
think it's not a valid variant type.
</p>
<p>
Inspecting in the debugger shows that the variant
returned by <code>GetAt</code> has a valid
<code>punk</code>, but the <code>vt</code> is <code>0x1234</code>.
Well, that's not a valid variant type, so that's the proximate
cause of the problem.
</p>
<p>
How did an invalid variant type get into your <code>SAFEARRAY</code>?
</p>
<p>
At this point the customer realized that maybe their code to create
the array was faulty,
so they offered to share it.
</p>
<pre>
void GetAwesomeArray(SAFEARRAY **ppsa)
{
 SAFEARRAY *psa = SafeArrayCreateVector(VT_UNKNOWN, 0, m_count);
 for (LONG i = 0; i &lt; m_count; i++) {
  CComPtr&lt;IAwesome&gt; spAwesome;
  CreateAwesomeThing(i, &amp;spAwesome);
  SafeArrayPutElement(psa, &amp;i, spAwesome);
 }
 *ppsa = psa;
}
</pre>
<p>
Okay, now all the pieces fell into place.
</p>
<p>
The <code>Get&shy;Awesome&shy;Array</code>
function is creating an array of <code>VT_UNKNOWN</code>,
but the code fragment that calls
<code>Get&shy;Awesome&shy;Array</code>
treats it as an array of <code>VT_VARIANT</code>.
</p>
<p>
Your array of <code>IUnknown*</code> is being misinterpreted
as an array of <code>VARIANT</code>.
That explains all the symptoms:
The <code>vt</code> is wrong, because it's really just the
low-order word of the first <code>IUnknown*</code>.
Ignoring the <code>vt</code> and going straight for the
<code>punk</code> seems to work because that's where
the <i>second</i> <code>IUnknown*</code> happens to be.
(Or third, if you are compiling as 32-bit.)
</p>
<p>
In other words, it's as if you did a
<code>reinterpret_<wbr>cast&lt;<wbr>VARIANT&amp;&gt;(punkArray[0])</code>.
</p>
<p>
If you had used regular C-style arrays
or a C++ collection,
then the compile-time type checking would have told you that
you mismatched the producer and consumer.
But since you went through a <code>SAFEARRAY</code>,
that compile-time type information is lost,
since a
<code>SAFEARRAY</code> is a polymorphic array.
It now becomes your job to keep track of what you have an array <i>of</i>,
and its dimensions and bounds.
</p>
<p>
You can keep track of this information via documentation,
"This function returns a 1-dimensional
<code>SAFEARRAY</code> of <code>VT_IUNKNOWN</code>,
with lower bound 0 and variable upper bound."
Or you can check at runtime, by calling
<code>Safe&shy;Array&shy;Get&shy;Vartype</code>
to see what the base type is,
and
<code>Safe&shy;Get&shy;Dim</code> to see how many
dimensions the array has,
and
<code>Safe&shy;Array&shy;Get&shy;LBound</code>
and
<code>Safe&shy;Array&shy;Get&shy;UBound</code>
to obtain the upper and lower bounds for those dimensions.
</p>
<p>
The code above seemed not to be sure which model it wanted
to use.
It trusted the base type and the dimension,
but checked the upper and lower bounds.
</p>
<p>
Anyway,
assuming we are going with the "keep track via documentation"
approach,
the solution for the original problem is to have
the producer and consumer agree on exactly what kind of
<code>SAFEARRAY</code> is being handed around.
Either produce an array of <code>VT_UNKNOWN</code> and
consume it as a <code>CComSafeArray&lt;IUnknown*&gt;</code>
or produce an array of <code>VT_VARIANT</code> and consume
it as a
<code>CComSafeArray&lt;VARIANT&gt;</code>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1035623">
				<div id="div-comment-1035623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sirin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130125-00/?p=5443#comment-1035623">
			January 25, 2013 at 8:50 am</a>		</div>

		<p>Well, does not sound like these safearrays are very safe</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1035633">
				<div id="div-comment-1035633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SpecLad</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130125-00/?p=5443#comment-1035633">
			January 25, 2013 at 9:25 am</a>		</div>

		<p>GetAwesomeArray(&amp;sa); &#8211; how does this work? GetAwesomeArray accepts SAFEARRAY **, and &amp;sa is CComSafeArray&lt;VARIANT&gt;*, which is not convertible to it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1035663">
				<div id="div-comment-1035663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130125-00/?p=5443#comment-1035663">
			January 25, 2013 at 12:06 pm</a>		</div>

		<p>@SpecLad</p>
<p>Generally, something like</p>
<p>SAFEARRAY** operator &amp;() const</p>
<p>{</p>
<p> &nbsp; &nbsp;return &amp;m_psa;</p>
<p>}</p>
<p>in CComSafeArray.</p>
<p>The odd-man-out is CComVariant, which actually is-a VARIANT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1035683">
				<div id="div-comment-1035683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130125-00/?p=5443#comment-1035683">
			January 26, 2013 at 4:29 am</a>		</div>

		<p>So CComSafeArray&lt;VARIANT&gt; allows you to put any type of SAFEARRAY in it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1035703">
				<div id="div-comment-1035703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Motti</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130125-00/?p=5443#comment-1035703">
			January 27, 2013 at 2:39 am</a>		</div>

		<p>@Anonymouse that would make it work but @SpecLad is correct CComSafeArray does *not* contain an &quot;operator&amp;&quot;[*]. I think Raymond meant to use &quot;.GetSafeArrayPtr()&quot;. </p>
<p>CComSafeArray leaves, in my opinion, much to be desired. For example the &quot;GetAwesomeArray&quot; method can&#39;t easily use a CComSafeArray internally due to locking (see my stackoverflow question[**] regarding this).</p>
<p>[*] CComSafeArray operators: <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-US/library/bac63k5t.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/bac63k5t.aspx</a> </p>
<p>[**] <a rel="nofollow" target="_new" href="http://stackoverflow.com/q/1778491/3848" rel="nofollow">stackoverflow.com/&#8230;/3848</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

