<html>
<head>
<title>What's the point of letting you change the GCL_CBCLSEXTRA if it has no effect?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What&#8217;s the point of letting you change the GCL_CBCLSEXTRA if it has no effect?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 14, 2013 / year-entry #218</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130814-00/?p=3503</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The documentation for the Set­Class­Long­Ptr function mentions GCL_CB­CLS­EXTRA: Sets the size, in bytes, of the extra memory associated with the class. Setting this value does not change the number of extra bytes already allocated. What's the point of letting the application change a value if it has no effect? The GCL_CB­CLS­EXTRA class long grants access...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The documentation for
<a HREF="http://msdn.microsoft.com/library/ms633589">
the <code>Set&shy;Class&shy;Long&shy;Ptr</code> function</a>
mentions
</p>
<blockquote CLASS=q><p>
<b>GCL_<wbr>CB&shy;CLS&shy;EXTRA</b>:
Sets the size, in bytes, of the extra memory associated with the class.
Setting this value does not change the number of extra bytes already allocated.
</p>
</blockquote>
<p>
What's the point of letting the application change a value if it
has no effect?
</p>
<p>
The <code>GCL_<wbr>CB&shy;CLS&shy;EXTRA</code>
class long grants access to the
<code>cbCls&shy;Extra</code> value that was originally
passed in the
<code>WND&shy;CLASS</code>
structure when you called
<code>Register&shy;Class</code>,
or the Ex-versions <i LANG=la>mutatus mutandis</i>.
The intent is for it to be used with
<code>Get&shy;Class&shy;Long</code> so you can read
the value back,
in case you forgot,
or if you are inspecting somebody else's class
(for example, because you want to superclass it,
although <code>Get&shy;Class&shy;Info</code> is probably
a better choice).
But since
<code>Get&shy;Class&shy;Long</code> and
<code>Set&shy;Class&shy;Long</code> take the
same class index parameter,
once it's defined for one, it's defined for the other.
</p>
<p>
Okay, well, first, let's explain why it has no effect:
The class has already been created.
The <code>cbCls&shy;Extra</code> tells the window manager
how much extra memory to allocate in the class when it is created.
After the class is created, the value isn't really used any more,
but Windows hangs on to the value since it needs to report the
value when you call
<code>Get&shy;Class&shy;Info</code>.
Trying to change the value is like
making changes to a blueprint after the building has
finished construction.
The blueprints are still on file at the planning office,
but changing them has no effect on the building.
(Though it will
mislead the fire chief who is studying the blueprints
in order to
<a HREF="http://www.codinghorror.com/blog/2009/02/are-you-an-expert.html">
decide how to put out the fire that is raging on one
of your upper floors</a>.)
</p>
<p>
Okay, so why does Windows let you change the values if they
have no effect?
</p>
<p>
Let's look at the values of those class longs:
</p>
<pre>
#define GCL_MENUNAME        (-8)
#define GCL_HBRBACKGROUND   (-10)
#define GCL_HCURSOR         (-12)
#define GCL_HICON           (-14)
#define GCL_HMODULE         (-16)
#define GCL_CBWNDEXTRA      (-18)
#define GCL_CBCLSEXTRA      (-20)
#define GCL_WNDPROC         (-24)
</pre>
<p>
How very strange.
They're all even numbers,
and negative, too.
And the value <code>-22</code> is skipped,
which lies between
<code>GCL_<wbr>CB&shy;CLS&shy;EXTRA</code>
and
<code>GCL_<wbr>WND&shy;PROC</code>.
</p>
<p>
Let's look at what the values were in 16-bit Windows:
</p>
<pre>
#define GCL_MENUNAME        (-8)
#define GCW_HBRBACKGROUND   (-10)
#define GCW_HCURSOR         (-12)
#define GCW_HICON           (-14)
#define GCW_HMODULE         (-16)
#define GCW_CBWNDEXTRA      (-18)
#define GCW_CBCLSEXTRA      (-20)
#define GCL_WNDPROC         (-24)
#define GCW_STYLE           (-26)
</pre>
<p>
Okay, now it looks even more suspicious.
All of the special class values were words
(as indicated by the <code>W</code> in <code>GCW</code>),
except for two longs (<code>GCL</code>),
and the gap exactly falls right where a long would go.
</p>
<p>
You've probably figured it out by now.
In 16-bit Windows, the internal <code>CLASS</code>
structure looked like this:
</p>
<pre>
typedef struct <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2008/03/27/8338530.aspx">tag</a>CLASS
{
    ... blah blah blah ...
    UINT      style;            // offset -26 from extraBytes
    WNDPROC   lpfnWndProc;      // offset -24 from extraBytes
    int       cbClsExtra;       // offset -20 from extraBytes
    int       cbWndExtra;       // offset -18 from extraBytes
    HMODULE   hModule;          // offset -16 from extraBytes
    HICON     hIcon;            // offset -14 from extraBytes
    HCURSOR   hCursor;          // offset -12 from extraBytes
    HBRUSH    hbrBackground;    // offset -10 from extraBytes
    LPSTR     lpszMenuName;     // offset -8 from extraBytes
    LPSTR     lpszClassName;    // offset -4 from extraBytes
    BYTE      <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/08/26/220873.aspx">extraBytes[1]</a>;    // offset 0 (extra bytes start here)
}
CLASS;
</pre>
<p>
When a class was created, the class extra bytes were appended
directly to the <code>CLASS</code> structure, which meant that
you could use negative offsets to access the internal class
structures.
</p>
<pre>
WORD GetClassWord(HWND hwnd, int index)
{
    CLASS *pcls = GetWindowClassPointer(hwnd);
    WORD *pw = (WORD*)&amp;pcls-&gt;cls_extraBytes[index];
    return *pw;
}

LONG GetClassLong(HWND hwnd, int index)
{
    CLASS *pcls = GetWindowClassPointer(hwnd);
    LONG *pl = (LONG*)&amp;pcls-&gt;cls_extraBytes[index];
    return *pl;
}

WORD SetClassWord(HWND hwnd, int index, WORD wNewValue)
{
    CLASS *pcls = GetWindowClassPointer(hwnd);
    WORD *pw = (WORD*)&amp;pcls-&gt;cls_extraBytes[index];
    WORD wPrevValue = *pw;
    *pw = wNewValue;
    return wPrevValue;
}

LONG SetClassLong(HWND hwnd, int index, LONG lNewValue)
{
    CLASS *pcls = GetWindowClassPointer(hwnd);
    LONG *pl = (LONG*)&amp;pcls-&gt;cls_extraBytes[index];
    LONG lPrevValue = *pl;
    *pl = lNewValue;
    return lPrevValue;
}
</pre>
<p>
Except of course that the original code was written in
assembly language, so it was more like
</p>
<pre>
FindClassExtraBytes proc
      mov  bx, [bp][2][4] ;; caller's hwnd
      mov  bx, [bx].wnd_pcls ;; get the class for the window
      add  bx, cls_extraBytes ;; move to extra bytes
      add  bx, [bp][2][4][2] ;; pointer to the requested bytes
      ret

;; use helper macros from cmacros.inc

cProc GetClassWord, &lt;FAR, PUBLIC&gt;
ParmW hwnd
ParmW index
cBegin
      call FindClassExtraBytes
      mov  ax, [bx]      ;; get the word
cEnd

cProc GetClassLong, &lt;FAR, PUBLIC&gt;
ParmW hwnd
ParmW index
cBegin
      call FindClassExtraBytes
      mov  ax, [bx]      ;; get the low word
      mov  dx, [bx][2]   ;; get the high word
cEnd

cProc SetClassWord, &lt;FAR, PUBLIC&gt;
ParmW hwnd
ParmW index
ParmW newValue
cBegin
      call FindClassExtraBytes
      mov  ax, newValue
      xchg ax, [bx]      ;; exchange value
cEnd

cProc SetClassLong, &lt;FAR, PUBLIC&gt;
ParmW hwnd
ParmW index
ParDL newValue
cBegin
      call FindClassExtraBytes
      mov  ax, newValue[0] ;; low word
      mov  dx, newValue[2] ;; high word
      xchg ax, [bx][0]     ;; exchange low word
      xchg dx, [bx][2]     ;; exchange high word
cEnd
</pre>
<p>
In other words, the negative offsets were exactly the values
needed to access the corresponding fixed fields in the
<code>CLASS</code> structure as if they were extra bytes.
(Again, I marvel at how 16-bit Windows
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2006/08/09/693280.aspx">
managed to accomplish
what it did in so little code</a>.
The actual code was even tighter than this.)
</p>
<p>
There were programs that said,
"Hey, since I know I can change this value all I want,
and it won't have any effect,
I can use it as a <i>secret hiding place</i>,"
and instead of storing data in a more sane location,
they just squirreled it away in the
<code>GCL_<wbr>CB&shy;CLS&shy;EXTRA</code>.
</p>
<p>
Windows blocked changes to
<code>GCL_<wbr>CB&shy;CLS&shy;EXTRA</code> starting in
Windows&nbsp;95,
but a compatibility loophole was created
so that 16-bit programs written for older versions of Windows
could still get the old behavior where they could modify
a value that had no effect,
just so that they could use it as a secret hiding place.
</p>
<p>
But for all 32-bit programs and newer 16-bit programs,
attempting to modify the
<code>cbCls&shy;Extra</code> value will fail with
<code>ERROR_<wbr>INVALID_<wbr>PARAMETER</code>.
</p>
<p>
<b>Bonus chatter</b>:
Another secret hiding place that applications discovered
was storing data in the
window extended style bits,
<code>dwEx&shy;Style</code>.
"Thanks, Windows, for adding four more bytes of data to
each window.
I'll use it to store a pointer!
(I'm sure Windows won't mind.)"
There is code in the window manager to enforce the rule
that you must use <code>Set&shy;Window&shy;Pos</code> to
change the
<code>WS_<wbr>EX_<wbr>TOP&shy;MOST</code> style
rather than calling
<code>Set&shy;Window&shy;Long</code>,
but there is a compatibility loophole:
If your application was written for Windows&nbsp;3.1
and you are setting extended styles that didn't exist
in Windows&nbsp;3.1,
then the window manager says,
"I think I know what you're up to"
and suspends the rules so that the application can go ahead
and use the extended window style as a secret hiding place.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1072913">
				<div id="div-comment-1072913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130814-00/?p=3503#comment-1072913">
			August 14, 2013 at 7:52 am</a>		</div>

		<p>Which reminds me, were the &quot;private window bytes&quot; of the Dialog window class always &quot;private&quot;, or was that added later?</p>
<p>I ran into those when trying to implement the sadly missing BOOL HasEndDialogBeenCalled(HWND) function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1072923">
				<div id="div-comment-1072923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130814-00/?p=3503#comment-1072923">
			August 14, 2013 at 9:45 am</a>		</div>

		<p>Raymond, I very much enjoy reading about how stuff was done in the old days and how it effects current stuff. &nbsp;Thanks!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1072943">
				<div id="div-comment-1072943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/richie_4000_entrian.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>richie@entrian.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130814-00/?p=3503#comment-1072943">
			August 14, 2013 at 10:57 am</a>		</div>

		<p>The Windows compatibility code must make an absolute mockery of the modern mantra that code comments are a bad thing and should be avoided, to be replaced by self-documenting code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1072953">
				<div id="div-comment-1072953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130814-00/?p=3503#comment-1072953">
			August 14, 2013 at 12:49 pm</a>		</div>

		<p>Wait, so the documentation says that you can set the value (which has no effect), but you actually can&#39;t?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-1072963">
				<div id="div-comment-1072963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130814-00/?p=3503#comment-1072963">
			August 14, 2013 at 2:38 pm</a>		</div>

		<p>I wonder why MS didn&#39;t change the values in Win32.</p>
<div class="post">[<em>Why change them? That would be a gratuitous <a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/09/13/10348876.aspx">breaking change</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1072973">
				<div id="div-comment-1072973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jolyon.smith_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>jolyon.smith@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130814-00/?p=3503#comment-1072973">
			August 14, 2013 at 5:05 pm</a>		</div>

		<p>@Roman, I am equally confused. &nbsp;The history lesson was interesting but the title and the pre-amble all imply that you can continue to change this value and then BOOOM, right at the last minute comes the shattering revelation that 32-bit and newer 16-bit Windows applications can&#39;t change it at all. &nbsp;But presumably older 16-bit applications and brand spanking new 64-bit applications can continue to modify this value &#8230; ?</p>
<p>All just a matter of idle curiosity of course, but even so&#8230; wibble.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1072983">
				<div id="div-comment-1072983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bdell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130814-00/?p=3503#comment-1072983">
			August 14, 2013 at 5:24 pm</a>		</div>

		<p>How do you tell the difference between an old 16-bit program and a new one?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1072993">
				<div id="div-comment-1072993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130814-00/?p=3503#comment-1072993">
			August 14, 2013 at 7:15 pm</a>		</div>

		<p>@bdell: Try run &quot;dumpbin /headers &lt;filename.exe&gt;&quot; in your Visual Studio command prompt to see what is there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-1073003">
				<div id="div-comment-1073003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130814-00/?p=3503#comment-1073003">
			August 14, 2013 at 7:19 pm</a>		</div>

		<p>@cheong00: For 16-bit programs, use EXEHDR instead. MS supplied a new version of RC.EXE with the Win32 SDK and Win9x SDK with a -40 switch.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-1073013">
				<div id="div-comment-1073013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130814-00/?p=3503#comment-1073013">
			August 14, 2013 at 7:20 pm</a>		</div>

		<p>&quot;But presumably older 16-bit applications and brand spanking new 64-bit applications can continue to modify this value &#8230; ?&quot;</p>
<p>64-bit would behave the same as 32-bit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-1073023">
				<div id="div-comment-1073023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130814-00/?p=3503#comment-1073023">
			August 14, 2013 at 7:20 pm</a>		</div>

		<p>*Win9x SDK</p>
<p>Win9x DDK, of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-1073033">
				<div id="div-comment-1073033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130814-00/?p=3503#comment-1073033">
			August 14, 2013 at 7:40 pm</a>		</div>

		<p>&quot;If your application was written for Windows 3.1 and you are setting extended styles that didn&#39;t exist in Windows 3.1, then the window manager says, &quot;I think I know what you&#39;re up to&quot; and suspends the rules so that the application can go ahead and use the extended window style as a secret hiding place.&quot;</p>
<p>In addition, I read that WM_STYLECHANGING and WM_STYLECHANGED are only sent if the app is marked as 4.0.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1073053">
				<div id="div-comment-1073053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130814-00/?p=3503#comment-1073053">
			August 15, 2013 at 3:32 am</a>		</div>

		<p>I seem to remember looking at all of these extra bytes (can&#39;t remember whether they were class or window) of the built-in classes and wondering why some of them were odd, given that you could only get a word or a long at a time. I seem to remember that one class had a single byte for some sort of flag and then four other bytes (which would then be misaligned, although I guess fewer people cared back then).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-1073203">
				<div id="div-comment-1073203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130814-00/?p=3503#comment-1073203">
			August 16, 2013 at 12:47 am</a>		</div>

		<p>Also notice that this matched the original WNDCLASS structure.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

