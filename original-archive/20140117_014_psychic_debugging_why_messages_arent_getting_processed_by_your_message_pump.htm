<html>
<head>
<title>Psychic debugging: Why messages aren't getting processed by your message pump</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Psychic debugging: Why messages aren&#8217;t getting processed by your message pump</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 17, 2014 / year-entry #15</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The second parameter to the Get­Message is an optional window handle that is used to tell the Get­Message function to retrieve only messages that belong to the specified window. A filtered Get­Message is nearly always a bad idea, because your program will not respond to messages that don't meet the filter. Unlike a filtered Peek­Message...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The second parameter to the
<code>Get&shy;Message</code>
is an optional window handle that is used to tell the
<code>Get&shy;Message</code> function to retrieve
only messages that belong to the specified window.
</p>
<p>
A filtered
<code>Get&shy;Message</code>
is nearly always a bad idea,
because your program will not respond to messages that don't meet
the filter.
Unlike a filtered <code>Peek&shy;Message</code> (which simply
returns "no messages satisfy the filter"),
<code>Get&shy;Message</code> blocks your thread and does not return
until a satisfactory message arrives.
Instead, they just pile up like newspapers on your doorstep.
</p>
<p>
A common mistake I encounter is using a filtered
<code>Get&shy;Message</code> as the main message pump:
</p>
<pre>
hwnd = CreateWindow(...);
if (hwnd == NULL) { return error }
<i>while (GetMessage(&amp;msg, hwnd, 0, 0)) {</i>
 ...
}
</pre>
<p>
I don't know for sure, but I'm guessing that the author said,
"Well, I created only one window, so clearly that is the only
window that can receive messages,
and therefore that is the only window I care about."
</p>
<p>
That may be the only window you explicitly created
<i>in that function</i>,
but there are still plenty of opportunities
for other windows to get created.
For example, there may be child windows of your main window.
Or there may be hidden windows created by other components
such as OLE which are used for cross-thread communication.
Filtering your message pump's
<code>Get&shy;Message</code> prevents those other windows
from receiving queued messages,
and consequently prevents those windows from getting done
whatever it was you asked them to do.
</p>
<p>
When a support request comes in for a program that hangs
or acts erratically,
you don't think to look at the message pump,
because that is nearly always just boilerplate code.
Only when you glance at it and notice that the boilerplate
code has been tweaked do you realize that
the tweaking is the source of the problem.
(And when I point out the mistake, I may get a "Thank you"
and possibly even a "I didn't realize that",
but never a
"This is what I was thinking when I wrote that in the first place,"
so I never figure out why they went to the extra effort of adding a
<code>Get&shy;Message</code> filter.)
</p>
<p>
Armed with this new psychic power, you can help this
customer out:
</p>
<blockquote CLASS=q>
<p>
I can't get combo boxes to work outside of a dialog box.
When used as a standalone window,
the combo box doesn't work correctly.
It doesn't respond to mouse hover,
sometimes it ignores clicks,
sometimes it makes my app hang when I select an item with the
mouse.
But if I put the combo box inside a dialog,
then it works perfectly.
As you can see in the attached project,
the exact same function (<code>Create&shy;Combo</code>)
works if called from a dialog box, but not from a regular window.
Is there something special about combo boxes that prevent
them from being used outside of a dialog box?
</p>
<pre>
void CreateCombo(HWND hwndParent)
{
 HWND hwndCombo = CreateWindow(TEXT("combobox"), 0,
  WS_BORDER | WS_CHILD | WS_VISIBLE | CBS_DROPDOWNLIST,
  10, 10, 200, 200, hwndParent, NULL, g_hinst);

 ComboBox_AddString(hwndCombo, TEXT("Item 0"));
 ComboBox_AddString(hwndCombo, TEXT("Item 1"));
 ComboBox_AddString(hwndCombo, TEXT("Item 2"));
 ComboBox_AddString(hwndCombo, TEXT("Item 3"));
 ComboBox_AddString(hwndCombo, TEXT("Item 4"));
 ComboBox_AddString(hwndCombo, TEXT("Item 5"));
 ComboBox_AddString(hwndCombo, TEXT("Item 6"));
 ComboBox_AddString(hwndCombo, TEXT("Item 7"));
 ComboBox_AddString(hwndCombo, TEXT("Item 8"));
 ComboBox_AddString(hwndCombo, TEXT("Item 9"));
}

// Dialog box version
INT_PTR CALLBACK DialogProc(
    HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
 switch (uMsg) {
 case WM_INITDIALOG:
  CreateCombo(hdlg);
  return TRUE;
 case WM_CLOSE:
  EndDialog(hdlg, 0);
  return TRUE;
 }
 return FALSE;
}

void TestDialog()
{
 DialogBox(g_hinst, MAKEINTRESOURCE(IDD_DIALOG),
           NULL, DialogProc);
}

// Plain window version
LRESULT CALLBACK WndProc(
    HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
 switch (uMsg) {
 case WM_CREATE:
  CreateCombo(hwnd);
  return 0;
 case WM_DESTROY:
  PostQuitMessage(0);
  return 0;
 }
 return DefWindowProc(hwnd, uMsg, wParam, lParam);
}

void TestWindow()
{
 WNDCLASS wc = { 0, WndProc, 0, 0, g_hinst, NULL, NULL,
                 (HBRUSH)(COLOR_WINDOW+1), NULL, TEXT("Test"));
 RegisterClassEx(&amp;wc); // succeeds
 HWND hwnd = CreateWindow(TEXT("Test"), TEXT("Test"),
                  WS_OVERLAPPEDWINDOW | WS_VISIBLE | WS_CLIPCHILDREN,
                  CW_USEDEFAULT, CW_USEDEFAULT,
                  CW_USEDEFAULT, CW_USEDEFAULT,
                  NULL, NULL, g_hinst, NULL);
 MSG msg;
 while (GetMessage(&amp;msg, hwnd, 0, 0)) {
  TranslateMessage(&amp;msg);
  DispatchMessage(&amp;msg);
 }
 UnregisterClass(TEXT("Test"), g_hinst);
}
</pre>
</blockquote>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1100253">
				<div id="div-comment-1100253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100253">
			January 17, 2014 at 7:06 am</a>		</div>

		<p>The fun part isn&#39;t pointing out the error. It is understanding why it worked despite the error.</p>
<p>The answer is that the DialogBox function runs its own message pump that doesn&#39;t do the incorrect filtering.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100273">
				<div id="div-comment-1100273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100273">
			January 17, 2014 at 7:24 am</a>		</div>

		<p>OK, I seriously missing something here in this article. &nbsp;I get that applying a filter is dangerous. &nbsp;What I don&#39;t get is where it is happening? &nbsp;I see this everywhere:</p>
<p>GetMessage(&amp;msg, hwnd, 0, 0)</p>
<p>And according to MSDN the zeros mean that there is no filtering and all messages will be retrieved.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100283">
				<div id="div-comment-1100283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100283">
			January 17, 2014 at 7:29 am</a>		</div>

		<p>@Nicholas: The hwnd parameter is a filter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100293">
				<div id="div-comment-1100293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100293">
			January 17, 2014 at 7:39 am</a>		</div>

		<p>This is why you never provide a solution until someone explains how and why they created the problem!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100303">
				<div id="div-comment-1100303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100303">
			January 17, 2014 at 7:45 am</a>		</div>

		<p>Is there a good reason to use the hwnd argument anymore or is it a holdover from Win16?</p>
<div class="post">[<em>I can&#39;t think of a good reason even in Win16. It probably exists merely to align with with PeekMessage. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100333">
				<div id="div-comment-1100333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jason</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100333">
			January 17, 2014 at 8:39 am</a>		</div>

		<p>@Nicholas: I think those are different types of filtering. &nbsp;hWnd filters on the window handle, wMsgFilterMin/Max filter on the message value.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100343">
				<div id="div-comment-1100343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pmbAustin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100343">
			January 17, 2014 at 8:47 am</a>		</div>

		<p>It seems to me this would be a good target for code analysis&#8230; flagging that as a warning if a parameter is ever specified there. &nbsp;If it&#39;s a constant source of misunderstanding, and thus bugs, and there&#39;s no obvious &quot;good&quot; reason to ever supply that parameter, then it would seem flagging it would be a Very Good Thing to do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100383">
				<div id="div-comment-1100383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100383">
			January 17, 2014 at 11:03 am</a>		</div>

		<p>You&#39;ll get this problem all the time 99% of software developers belong to a cargo cult. It&#39;s only possible because software development has been made &quot;easier&quot;, if it was harder they wouldn&#39;t have found their way out of writing hello world.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100403">
				<div id="div-comment-1100403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100403">
			January 17, 2014 at 12:07 pm</a>		</div>

		<p>1) I assume the filter parameters for GetMessage have to remain in the binary interface for compatibility reasons, but there&#39;s no reason why the header files couldn&#39;t include a macro that disables their use.</p>
<p>2) I&#39;ve seen countless message loops, and all the ones that weren&#39;t flawed were essentially the same. Why then, isn&#39;t this standard message loop part of the Win32 API? I realise that most GUI toolkits provide it, but more people than you&#39;d think use raw C++ and screw it up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100423">
				<div id="div-comment-1100423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100423">
			January 17, 2014 at 1:24 pm</a>		</div>

		<p>If I recall correctly (it&#39;s been a looong time), my documentation stated GetMessage was available on Windows 2.x but PeekMessage required 3.0.</p>
<p>I&#39;d guess the filter is to remove a message you know you posted there by some action.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100443">
				<div id="div-comment-1100443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100443">
			January 17, 2014 at 3:28 pm</a>		</div>

		<p>Thanks laonianren and Jason. &nbsp;Stupid of me since the very first line of the article is:</p>
<p>&quot;The second parameter to the GetÂ­Message&#8230;&quot;</p>
<p>Apparently I had severe memory loss by the time I got to the end of the article. &nbsp;My bad.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100473">
				<div id="div-comment-1100473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100473">
			January 17, 2014 at 6:20 pm</a>		</div>

		<p>What happens if you (i.e. someone at Microsoft) edits GetMessage to ignore the filter parameter, and then run all of your app-compat regression tests. That would show you (A) if there are any legitimate uses of this functionality and (B) give you a cheap fix for this if not. You can maintain the binary compatibility by making hwndFilter a reserved (and ignored) parameter.</p>
<div class="post">[<em>I&#39;m sure there are apps that rely on filtering. That doesn&#39;t mean that their use is legitimate. <a href="http://blogs.msdn.com/b/oldnewthing/archive/2005/01/18/355177.aspx">A lot of compatibility involves getting existing apps to work in spite of their bugs</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100373">
				<div id="div-comment-1100373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio &#039;Grijan&#039;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100373">
			January 17, 2014 at 10:31 am</a>		</div>

		<p>TRWTF is adding your own message pump to a test window. After reading the series of articles on the dialog manager, I wouldn&#39;t dare to have more than one message pump for each thread (apart from the dialog manager itself, that is). If you ever need to make something fancy with some window&#39;s messages, you can always call a filter function in the main message loop, just before the call to DispatchMessage().</p>
<p>A filtered GetMessage() *could* be useful to remove messages left by PeekMessage() when hWnd != NULL and wRemoveMsg == PM_NOREMOVE (if you ever need to do that, which is dubious), but that&#39;s a corner case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00034001a5381f07 odd alt thread-odd thread-alt depth-1" id="comment-1100483">
				<div id="div-comment-1100483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Georg_Rottensteiner' rel='external nofollow' class='url'>Georg_Rottensteiner</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100483">
			January 17, 2014 at 11:09 pm</a>		</div>

		<p>The next really common problem is returning TRUE for every handled message in your custom WindowProc without calling DefWindowProc and/or putting return DefWindowProc only in the default clause.</p>
<p>Te cause for this might be the default Win32 project template. At least in VS 2008 it does exactly that. While it works for that specific sample it is a really bad start if the code gets expanded. Sooner or later a message is handled, not passed on to DefWindowProc and everything breaks apart.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100493">
				<div id="div-comment-1100493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyle S.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100493">
			January 17, 2014 at 11:53 pm</a>		</div>

		<p>&gt; [I can&#39;t think of a good reason even in Win16. It probably exists merely to align with with PeekMessage. -Raymond]</p>
<p>On the Mac, NSWindow has -nextEventMatchingMask:, which behaves identically to GetMessage. So apparently at some point in the time of Win16 and NEXTSTEP this was considered a good idea.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1100503">
				<div id="div-comment-1100503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100503">
			January 18, 2014 at 2:36 am</a>		</div>

		<p>Doesn&#39;t the fact that a dialog has its own message loop cause a problem if you have more than one top-level window? Unless you create them in different threads, then as soon as you open a dialog the accelerators in the other window will stop working.</p>
<div class="post">[<em>You can read <a href="http://blogs.msdn.com/b/oldnewthing/archive/tags/modality/">the modality series</a> for extended discussion on this topic. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100513">
				<div id="div-comment-1100513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100513">
			January 18, 2014 at 3:25 am</a>		</div>

		<p>@Georg_Rottensteiner: what would break apart? I don&#39;t see the point in passing most of handled messages to DefWindowProc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00034001a5381f07 odd alt thread-odd thread-alt depth-1" id="comment-1100543">
				<div id="div-comment-1100543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Georg_Rottensteiner' rel='external nofollow' class='url'>Georg_Rottensteiner</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100543">
			January 18, 2014 at 11:00 pm</a>		</div>

		<p>@Azarien: The sample code from VS does return 0 if the message is handled without calling DefWindowProc. Try that with WM_CREATE for example, or WM_NC_CREATE. Basically every message should be passed on unless the explicitely say so.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1100603">
				<div id="div-comment-1100603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Master</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100603">
			January 19, 2014 at 11:23 am</a>		</div>

		<p>Creating hidden windows for cross-thread communication: fail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1100633">
				<div id="div-comment-1100633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100633">
			January 19, 2014 at 7:47 pm</a>		</div>

		<p>@Neil:</p>
<p>Having more than one top-level window opens a big can of worms. Having any top-level window enabled while showing a modal dialog (or running any modal loop without mouse capture bail-out) will give you headaches.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1100653">
				<div id="div-comment-1100653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140117-00/?p=2053#comment-1100653">
			January 20, 2014 at 7:10 am</a>		</div>

		<p>The combo box fails becauses it uses a non-child window, doesn&#39;t it? (and IIRC, it&#39;s also unowned, and I&#39;m not sure it should be)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

