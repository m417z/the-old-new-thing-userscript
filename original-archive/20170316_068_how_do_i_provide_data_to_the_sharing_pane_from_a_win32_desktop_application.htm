<html>
<head>
<title>How do I provide data to the sharing pane from a Win32 desktop application?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I provide data to the sharing pane from a Win32 desktop application?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 16, 2017 / year-entry #69</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170316-00/?p=95745</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Continuing the interop pattern.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last time, we were able to show the sharing pane from a Win32 desktop
application, but we didn't provide any information to the sharing
pane, so all it did was offer to share a screen shot.
Today, let's provide some data.
</p>
<p>
This is a continuation of the interop pattern.
Repeating the table we had from last time:
</p>
<table BORDER=1 STYLE="border-collapse: collapse"
    CELLPADDING=3>
<tr>
<th>XxxStatics</th>
<th>XxxInterop</th>
</tr>
<tr>
<td>Get&shy;For&shy;Current&shy;View</td>
<td>Get&shy;For&shy;Window</td>
</tr>
<tr>
<td>Do&shy;Something (implied "for current view")</td>
<td>Do&shy;Something&shy;For&shy;Window</td>
</tr>
</table>
<p>
Last time, we used the second case,
converting
<code>Show&shy;Sharing&shy;UI</code> to
<code>Show&shy;Sharing&shy;UI&shy;For&shy;Window</code>.
Today we're going to use the first case:
Converting
<code>Get&shy;For&shy;Current&shy;View</code>
to
<code>Get&shy;For&shy;Window</code>.
</p>
<p>
Start with
a blank
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20030723-00/?p=43073">
scratch program</a>
and make these changes.
(Remember, Little Programs do little to no error checking.)
</p>
<pre>
#include &lt;wrl/client.h&gt;
#include &lt;wrl/event.h&gt;
#include &lt;wrl/wrappers/corewrappers.h&gt;
#include &lt;windows.applicationmodel.datatransfer.h&gt;
#include &lt;shlobj.h&gt; // IDataTransferManagerInterop
#include &lt;tchar.h&gt; // Huh? Why are you still using ANSI?
#include &lt;roapi.h&gt;

namespace WRL = Microsoft::WRL;
namespace awf = ABI::Windows::Foundation;
namespace dt = ABI::Windows::ApplicationModel::DataTransfer;

using Microsoft::WRL::Wrappers::HStringReference;

WRL::ComPtr&lt;IDataTransferManagerInterop&gt; g_dtmInterop;
WRL::ComPtr&lt;DT::IDataTransferManager&gt; g_dtm;
EventRegistrationToken g_dataRequestedToken;
</pre>
<p>
Note that in real life, these global variables would
be instance variables of some C++ class.
</p>
<pre>
BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
  RoGetActivationFactory(HStringReference(
    RuntimeClass_Windows_ApplicationModel_DataTransfer_DataTransferManager)
                         .Get(), IID_PPV_ARGS(&amp;g_dtmInterop));

  g_dtmInterop-&gt;GetForWindow(hwnd, IID_PPV_ARGS(&amp;g_dtm));

  auto callback = WRL::Callback&lt;WF::ITypedEventHandler&lt;
    DT::DataTransferManager*, DT::DataRequestedEventArgs*&gt;&gt;(
        [](auto&amp;&amp;, DT::IDataRequestedEventArgs* e)
    {
      WRL::ComPtr&lt;DT::IDataRequest&gt; request;
      e-&gt;get_Request(&amp;request);

      WRL::ComPtr&lt;DT::IDataPackage&gt; data;
      request-&gt;get_Data(&amp;data);

      WRL::ComPtr&lt;DT::IDataPackagePropertySet&gt; properties;
      data-&gt;get_Properties(&amp;properties);

      // Title is mandatory
      properties-&gt;put_Title(HStringReference(L"Title from Win32").Get());

      // Description is optional
      properties-&gt;put_Description(HStringReference(L"This text came from a Win32 app").Get());

      data-&gt;SetText(HStringReference(L"Text from Win32 app!").Get());

      return S_OK;
    });

  g_dtm->add_DataRequested(callback.Get(), &amp;g_dataRequestedToken);

  return TRUE;
}

void
OnDestroy(HWND hwnd)
{
    g_dtm-&gt;remove_DataRequested(g_dataRequestedToken);
    g_dtm.Reset();
    g_dtmInterop.Reset();
    PostQuitMessage(0);
}


void OnChar(HWND hwnd, TCHAR ch, int cRepeat)
{
  switch (ch) {
  case TEXT(' '):
    g_dtmInterop->ShowShareUIForWindow(hwnd);
    }
    break;
  }
}

HANDLE_MSG(hwnd, WM_CHAR, OnChar);
</pre>
<p>
Okay, let's see what happened here.
</p>
<p>
When the window is created,
we get the interop interface and save it in the global variable
for later use.
We then call
<code>Get&shy;For&shy;Window</code> to obtain the
<code>Data&shy;Transfer&shy;Manager</code> for our window.
In WinRT this would have been a call to
<code>Get&shy;For&shy;Current&shy;View</code>.
</p>
<p>
That's all for the interop part of this exercise.
Everything else is just operating on the WinRT objects
at the ABI level instead of at the projection level.
</p>
<p>
Next we create a callback handler for the
<code>Data&shy;Requested</code> event.
We'll look at the body of the handler later.
</p>
<p>
We then register the handler for the event by calling
<code>add_<wbr>Data&shy;Requested</code>
and save the registration token so we can unregister
later.
</p>
<p>
Okay, now to look inside the callback:
This is a direct translation of
<code>Data&shy;Transfer&shy;Manager</code>
from projection back into ABI.
Reading a property becomes a call to the
<code>get_<wbr>PropertyName</code> method,
and writing a property becomes a call to the
<code>put_<wbr>PropertyName</code> method.
In our case, we take the <code>Data&shy;Requested&shy;Event&shy;Args</code>
and get the <code>Request</code> property,
which is an <code>IData&shy;Request</code>.
From the <code>IData&shy;Request</code> we set
the <code>Title</code> and
<code>Description</code> properties,
and use the
<code>SetText</code> method to provide the text that
we are sharing.
</p>
<p>
At destruction, we unregister the event and release
the objects.
</p>
<p>
The final snippet of code is what we saw last time:
When the user hits the space bar, open the share pane.
But this time, the share pane actually shows something
interesting, because our
<code>Data&shy;Requested</code> event handler provides
text to be shared.
</p>
<p>
Of course, in a real program, you would presumably
offer text or other content that is based on the current
state or selection rather than just spitting out hard-coded
content,
but this is just a Little Program.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1 parent" id="comment-1289166">
				<div id="div-comment-1289166" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170316-00/?p=95745#comment-1289166">
			March 16, 2017 at 9:30 am</a>		</div>

		<p>Are we going to see the other side of this contract or is it impossible for desktop apps to be share targets?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1289175">
				<div id="div-comment-1289175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170316-00/?p=95745#comment-1289175">
			March 16, 2017 at 9:32 am</a>		</div>

		<p>My understanding is that desktop apps cannot be share targets because the activation model is WinRT-based.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1289185">
				<div id="div-comment-1289185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Gallant</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170316-00/?p=95745#comment-1289185">
			March 16, 2017 at 9:43 am</a>		</div>

		<p>It sounds like if you use the Desktop Bridge technology on a desktop app it is possible.  (Perhaps only with the Creator&#8217;s Update that&#8217;s coming?) Among the VS2017 launch videos, I watched this one:<br />
<a href="https://channel9.msdn.com/Events/Visual-Studio/Visual-Studio-2017-Launch/APP-104" rel="nofollow">https://channel9.msdn.com/Events/Visual-Studio/Visual-Studio-2017-Launch/APP-104</a></p>
<p>I don&#8217;t remember all the specifics, but around the 37 minute mark, they talk about and then demo taking a WPF app and making it a Share target.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1289195">
				<div id="div-comment-1289195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mahen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170316-00/?p=95745#comment-1289195">
			March 17, 2017 at 1:07 am</a>		</div>

		<p>Back in November 2006, you wrote a blog post about how a user complained that if a USB with malformed data is used on Windows, it may crash the computer and result in a DoS attack. Back then, the whole internet, you included made fun of that user. </p>
<p>Forward to 2017, Wikileaks revealed that CIA operatives were using exactly the same techniques described about to hack into windows computers and install malware.  My question is why 11 years after that blog post, Windows still blindly trust any USB pendrive connected to it?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1289255">
				<div id="div-comment-1289255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170316-00/?p=95745#comment-1289255">
			March 17, 2017 at 9:09 am</a>		</div>

		<p>Not sure what this has to do with the sharing pane. If you let something access your hardware bus, you&#8217;ve already lost, because the hardware already trusted it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1289265">
				<div id="div-comment-1289265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170316-00/?p=95745#comment-1289265">
			March 17, 2017 at 11:08 am</a>		</div>

		<p>GPO is your friend. You can deny installation of removable HW. That will likely shut down that attempt.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mngoldeneagle even depth-3" id="comment-1289267">
				<div id="div-comment-1289267" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170316-00/?p=95745#comment-1289267">
			March 17, 2017 at 11:23 am</a>		</div>

		<p>You can also restrict it to only accept certain types of storage devices, which would allow standard USB devices to work (like a keyboard) while blocking thumb drives.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1289285">
				<div id="div-comment-1289285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lucas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170316-00/?p=95745#comment-1289285">
			March 18, 2017 at 1:39 pm</a>		</div>

		<p>This is a really useful post! I had no idea that these interop interfaces existed. I went looking for IApplicationViewInterop but only found IApplicationViewInteropStatics. I was hoping for a similar Get­For­Window method to access the TitleBar property for a Win32 HWND since it would be nice to color theme it without doing the whole WM_NCPAINT. Does such a thing exist?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1289375">
				<div id="div-comment-1289375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170316-00/?p=95745#comment-1289375">
			March 20, 2017 at 5:17 pm</a>		</div>

		<p>These methods affect how CoreWindows are rendered, but your Win32 window is probably not a CoreWindow, so they don&#8217;t help you. The CoreWindow renderer doesn&#8217;t draw your Win32 windows.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wswiktor odd alt thread-odd thread-alt depth-1" id="comment-1289305">
				<div id="div-comment-1289305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Azarien' rel='external nofollow' class='url'>Azarien</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170316-00/?p=95745#comment-1289305">
			March 19, 2017 at 2:39 am</a>		</div>

		<p>Is there a way to use C++/CX syntax for this example?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

