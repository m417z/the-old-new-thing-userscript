<html>
<head>
<title>Where can I find the standard asynchronous stream?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Where can I find the standard asynchronous stream?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 14, 2015 / year-entry #10</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150114-00/?p=43153</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In the documentation for XmlLite, one of the features called out is that XmlLite is a non-blocking parser. If the input stream returns E_PENDING, then XmlLite propagates that status to its caller, and a subsequent request to XmlLite to parse will resume where it left off. That documentation calls out two scenarios in which this...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>In <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms753140(v=vs.85).aspx"> the documentation for XmlLite</a>, one of the features called out is that XmlLite is a non-blocking parser. If the input stream returns <code>E_PENDING</code>, then XmlLite propagates that status to its caller, and a subsequent request to XmlLite to parse will resume where it left off.</p>
<p> That documentation calls out two scenarios in which this can happen, the second of which is </p>
<blockquote class="q"><p> 2. The input Stream is a standard asynchronous stream. The E_PENDING HRESULT may be raised when the data is temporarily unavailable on the network. In this case, you need to try again later in a callback or after some interval of time. </p>
</blockquote>
<p> A customer was kind of confused by this explanation. "Where do I get a standard asynchronous stream so I can use it in scenario 2?" </p>
<p> The documentation here is trying to be helpful by expanding on the original statement that XmlLite is a non-blocking parser and providing examples of how you can take advantage of this non-blocking behavior. The normative statement is the one that says, "XmlLite propagates the E_PENDING from the input stream to its caller, and a subsequent request to read data from the XmlLite parser will resume where it left off." The rest is informational, but it seems that the informational text was more confusing than helpful. </p>
<p> The informational text is trying to say, "Here are some examples where you can take advantage of this behavior." The first scenario is an example where you provided an IStream that returns <code>E_PENDING</code> when it wants to force the XmlLite parser to stop parsing. You might do this, for example, if you have out-of-band data in your XML stream. The stream would return <code>E_PENDING</code> when it encounters the out-of-band data, and this causes the XmlLite parser to stop parsing and return <code>E_PENDING</code>. You can then process the out-of-band data, and then when you are ready to resume parsing, you reissue the call that returned <code>E_PENDING</code> so the parser can resume where it left off. </p>
<p> The second scenario is an example where you provided an IStream that returns <code>E_PENDING</code> to indicate that there is more data in the stream, but it is not available right now. For example, the stream may be the result of a streaming download, and the next chunk of the download hasn't arrived yet. Instead of blocking the read, the stream returns <code>E_PENDING</code> to say, "There is more data, but I can't provide it right now. Go do something else for a while." The download stream presumably has some way of notifying when the next download chunk is ready. Your program can subscribe to that notification, and when it is received, you can resume parsing with XmlLite. </p>
<p> The adjective "standard" here in the phrase "a standard asynchronous stream" does not refer to a specific reference implementation. It's using the word "standard" in the sense of "regularly and widely used, seen, or accepted; <a href="http://www.merriam-webster.com/dictionary/standard"> not unusual or special</a>." (This was subtly implied by the use of the indefinite rather than the definite article, but that use of the indefinite could be interpreted to mean "an instance of the standard asynchronous stream".) In other words, the opening sentence is saying, "The input Stream is any asynchronous stream that behaves in the usual manner." </p>
<p> By analogy, consider the sentence "This service is available from a standard touch-tone phone." This doesn't mean "There is a specific model of touch-tone phone that is the standard touch-tone phone, and you must use that one." It's just saying "Any touch-tone phone (that conforms to the standard) will work." </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1171053">
				<div id="div-comment-1171053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150114-00/?p=43153#comment-1171053">
			January 14, 2015 at 7:51 am</a>		</div>

		<p>&quot;It&#39;s using the word &quot;standard&quot; in the sense of &quot;regularly and widely used, seen, or accepted; &nbsp;not unusual or special.&quot;&quot;</p>
<p>&quot;ordinary&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171063">
				<div id="div-comment-1171063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Taylor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150114-00/?p=43153#comment-1171063">
			January 14, 2015 at 9:10 am</a>		</div>

		<p>Woah, woah, slow down there, egghead!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171093">
				<div id="div-comment-1171093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150114-00/?p=43153#comment-1171093">
			January 14, 2015 at 11:27 am</a>		</div>

		<p>Touch tone phones have a standard in which each row and column correspond to a specific tone frequency and thus each button corresponds to a specific pair of frequencies. &nbsp;That standard is named &quot;ITU-T Recommendation Q.23&quot; and can be examined at <a rel="nofollow" target="_new" href="http://www.itu.int/rec/T-REC-Q.23/en">http://www.itu.int/&#8230;/en</a>.</p>
<p>What is the standard that applies to asynchronous streams? &nbsp;What is &#39;the usual manner&#39; of operation for an asynchronous stream? &nbsp;I suggest that the phrase &#39;standard asynchronous stream&#39; should be a link to some documentation. &nbsp;The customer&#39;s question could very well have been &quot;How do I implement a standard asynchronous stream?&quot; and I see only vague outlines of an answer to that question here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1171103">
				<div id="div-comment-1171103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150114-00/?p=43153#comment-1171103">
			January 14, 2015 at 12:12 pm</a>		</div>

		<p>In Microspeak, &quot;this is a standard XYZ&quot; is the opposite of &quot;on the face of it this appears to be an XYZ, but&#8230;&quot; (followed by a list of gotchas that someone used to dealing with other XYZs are likely to run into when attempting to consume this pseudo-XYZ.)</p>
<p>I would translate it into non-Microspeak as &quot;this is an XYZ.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171113">
				<div id="div-comment-1171113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150114-00/?p=43153#comment-1171113">
			January 14, 2015 at 1:45 pm</a>		</div>

		<p>@Maurits: That has an incredible amount of explaining power.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171123">
				<div id="div-comment-1171123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dominic</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150114-00/?p=43153#comment-1171123">
			January 14, 2015 at 6:08 pm</a>		</div>

		<p>@ Tim!</p>
<p>From the XMLLite documentation link:</p>
<p>You Must Use a Class that Implements IStream &#8211; Both the XmlLite reader and writer use a stream object for reading and writing the XML. Therefore, you must either use or implement a class that extends the IStream interface.</p>
<p>In this case &#39;standard asynchronous stream&#39; is context sensitive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171143">
				<div id="div-comment-1171143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pet</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150114-00/?p=43153#comment-1171143">
			January 14, 2015 at 10:01 pm</a>		</div>

		<p>If msdn would had been a wiki I would have fixed it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171153">
				<div id="div-comment-1171153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150114-00/?p=43153#comment-1171153">
			January 15, 2015 at 2:37 am</a>		</div>

		<p>I thought it was the standard meaning of the word standard&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

