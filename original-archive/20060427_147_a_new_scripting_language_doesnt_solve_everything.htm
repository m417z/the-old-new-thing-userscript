<html>
<head>
<title>A new scripting language doesn't solve everything</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A new scripting language doesn&#8217;t solve everything</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 27, 2006 / year-entry #148</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>96</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Yes, there are plenty of scripting languages that are much better than boring old batch. Batch files were definitely a huge improvement over SUBMIT back in 1981, but they've been showing their age for quite some time. The advanced age of boring old batch, on the other hand, means that you have millions of batch...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Yes, there are plenty of scripting languages that are much
better than boring old batch.
Batch files were definitely a huge improvement over <code>SUBMIT</code>
back in 1981,
but they've been showing their age for quite some time.
The advanced age of boring old batch, on the other hand, means that you have
millions of batch files out there that you had better not break if you
know what's good for you.
(Sure, in retrospect, you might decide to call the batch language
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/09/09/462906.aspx#463547">
a design mistake</a>,
but remember that it had to run in 64KB
of memory on a 4.77MHz machine while still remaining compatible in
spirit with CP/M.)
</p>
<p>
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/09/09/462906.aspx#463052">
Shipping a new command shell</a>
doesn't solve everything either.
For one thing,
you have to decide if you are going to support classic batch files or not.
Maybe you decide that you won't and prefer to
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/03/22/558007.aspx">
force people to rewrite all their
batch files into your new language</a>.
Good luck on that.
</p>
<p>
On the other hand, if you decide that you will support batch files after all,
then
presumably your new command shell will not execute old batch files
natively, but rather will defer to <code>CMD.EXE</code>.
And there's your problem:
You see, batch files have the ability to modify environment
variables and have the changes persist beyond
the end of the batch file.
Try it:
</p>
<pre>
C&gt; copy <a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/10/22/55388.aspx">con</a> marco.cmd
@set MARCO=polo
^Z
        1 file(s) copied.

C&gt; echo %MARCO%
%MARCO%

C&gt; marco

C&gt; echo %MARCO%
polo
</pre>
<p>
If your new command shell defers to <code>CMD.EXE</code>,
these environment changes won't propagate back to your command
shell since the batch file modifies the environment variables
of <code>CMD.EXE</code>, not your shell.
Many organizations have a system of batch files that
rely on the ability to pass parameters
between scripts by stashing them into environment variables.
The DDK's own <code>razzle</code>
does this, for example, in order to establish a consistent build
environment and pass information to <code>build.exe</code>
about what kind of build you're making.
And I bet you have a batch file or two that sets your <code>PROMPT</code>
or <code>PATH</code> environment variable or changes your current
directory.
</p>
<p>
So good luck with your replacement command shell.
I hope you figure out how to run batch files.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (96)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-373903">
				<div id="div-comment-373903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-373903">
			April 27, 2006 at 10:20 am</a>		</div>

		<p><a rel="nofollow" target="_new" href="http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx" rel="nofollow">http://www.microsoft.com/technet/scriptcenter/hubs/msh.mspx</a></p>
<p>Looks like a nice ideea :). More power and easier.<br />
<br />Shouldn&#8217;t this live together with the old commannd shell?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-373913">
				<div id="div-comment-373913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-373913">
			April 27, 2006 at 10:26 am</a>		</div>

		<p>Personally, I&#8217;d make people invoke cmd explicitly if they need batch files. &nbsp;Presumably it&#8217;s easier to pass values out of the new shell than out of cmd, so shimming them around for a hybrid script would be possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-373933">
				<div id="div-comment-373933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carlos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-373933">
			April 27, 2006 at 10:36 am</a>		</div>

		<p>That&#8217;s easy! &nbsp;Suppose you want to run &quot;real.bat&quot;. &nbsp;Write a temporary batch file containing:</p>
<p>call &quot;real.bat&quot;<br />
<br />set &gt; env.tmp</p>
<p>and execute it using cmd.exe. &nbsp;When cmd.exe terminates extract the environment variables from &quot;env.tmp&quot;. &nbsp;You can hide this cruft from the end-user.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-373953">
				<div id="div-comment-373953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://tim.strafenet.com' rel='external nofollow' class='url'>Tim Misiak</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-373953">
			April 27, 2006 at 10:40 am</a>		</div>

		<p>Monad is a fantastic scripting language and command shell, and will definately offer a huge boost in productivity to smart system administrators. However, this doesnt really solve certain problems, as raymond has stated before:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2006/03/22/558007.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2006/03/22/558007.aspx</a></p>
<p>I do believe that it would be a great benefit if Monad shipped standard with some future version of windows, such as Vista SP2 or something. Release with Vista is probably not an option, but that would really be nice. It certainly can&#8217;t replace the command shell, but it can at least coexist. One great application for PowerShell/Monad/MSH would be for build environments (especially for .Net targets).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-373963">
				<div id="div-comment-373963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miles Archer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-373963">
			April 27, 2006 at 10:44 am</a>		</div>

		<p>Raymond,</p>
<p>64K was the maximum memory you could have. The minimum was 16K.</p>
<p>For me it was a huge step up from the 4K I had on my Altair.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-373973">
				<div id="div-comment-373973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-373973">
			April 27, 2006 at 10:58 am</a>		</div>

		<p>I don&#8217;t understand what the problem is.</p>
<p>1) The new command shell should support monad scripts.</p>
<p>2) cmd.exe should support batch files.</p>
<p>a) If you&#8217;re in cmd.exe and run a batch file, it should do what it always does.</p>
<p>b) If you&#8217;re in msh (? What is name of monad shell executable?) and run a monad script, it should do whatever that&#8217;s supposed to do.</p>
<p>c) If you&#8217;re in msh and run a batch file, it should launch cmd.exe and run the batch file in that. When the batch file exits, that version of cmd.exe exits but your msh environment is untouched.</p>
<p>d) If you&#8217;re in msh and run cmd.exe, you&#8217;re in cmd.exe, see a)</p>
<p>e) If you&#8217;re in cmd.exe and run a monad script, it should launch msh and the the monad script in that. When the monad script exits, that copy of msh exits and your cmd.exe environment is untouched.</p>
<p>f) If you&#8217;re in cmd.exe and run msh, you&#8217;re in msh, see b)</p>
<p>If you have batch files, they&#8217;ll all still run fine from cmd.exe. You can keep developing them if you want. There are new rules for calling batch files from msh, but that&#8217;s OK because msh is new, so there&#8217;s no backwards compatibility there to keep.</p>
<p>So, what&#8217;s the problem here? How hard is it to look at other systems that have multiple command shells with incompatible command sets and see how they handle it? (e.g. sh and csh on unix)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-373993">
				<div id="div-comment-373993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">andy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-373993">
			April 27, 2006 at 11:10 am</a>		</div>

		<p>Doesn&#8217;t seem like PowerShell supports this:</p>
<p>PS C:TMP&gt; Gci env: -Include MARCO<br />
<br />PS C:TMP&gt; .marco.bat</p>
<p>$ set MARCO=POLO</p>
<p>$ set &nbsp; | grep -i &quot;marco&quot;<br />
<br />MARCO=POLO<br />
<br />PS C:TMP&gt; Gci env: -Include MARCO<br />
<br />PS C:TMP&gt;</p>
<p>&#8230; the solutions above are nice enough, except that you&#8217;ll need to add them to all systems which you intend to run PS on.</p>
<p>I guess we&#8217;ll end up with batch &amp; PowerShell living together for some time, but eventuality most of the stuff people use are either upgraded/converted to PowerShell if it is necessary there or left behind.</p>
<p>&quot;A new scripting language doesn&#8217;t solve everything&quot;<br />
<br />Yes, true. But the old scripting language doesn&#8217;t always solve everything too. And as you&#8217;ve written, it is very very hard to do any change to it because some software might depend on that small bug you wanted to fix. Therefore a new language is needed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374003">
				<div id="div-comment-374003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374003">
			April 27, 2006 at 11:13 am</a>		</div>

		<p>Almost forgot:</p>
<p>g) If you&#8217;re in some other shell (e.g. windows explorer) and run a batch file, it loads cmd.exe and runs the batch file as it always used to, as in c)</p>
<p>h) If you&#8217;re in some other shell (e.g. windows explorer) and run a monad script, it loads msh and runs the monad script however it&#8217;s supposed to, as in e)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374013">
				<div id="div-comment-374013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Risto</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374013">
			April 27, 2006 at 11:21 am</a>		</div>

		<p>I find that CMD.EXE gets better and better with each OS release. Sheesh, it has if-else to avoid some goto hell, tab file name completion, wicked FOR function, and FINDSTR as a replacement for FIND. When that runs out, I use VBScript or even a C program to enhance batch scripts.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-374023">
				<div id="div-comment-374023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374023">
			April 27, 2006 at 11:22 am</a>		</div>

		<p>Adam: In other words, you&#8217;re willing to accept that batch files from msh don&#8217;t quite work right. That&#8217;s a fine decision, though not everybody will agree with it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374033">
				<div id="div-comment-374033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374033">
			April 27, 2006 at 11:32 am</a>		</div>

		<p>No, they don&#8217;t &quot;quite work right&quot; in that environment variables aren&#8217;t passed all the way back up the process tree, but so what?</p>
<p>If you want to run a batch file that does that, you can run in from cmd.exe. You don&#8217;t need to ever take that away from anyone.</p>
<p>(Although, I&#8217;m now wondering, does cmd.exe pass it&#8217;s environment &quot;up the process tree&quot;? Do other 32-bit windows programs? How far up the tree do env vars get propagated? Until you reach a change of userid? I take it env vars don&#8217;t get passed back up to login.exe, or whatever the login program is that runs as ?localsystem?)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374043">
				<div id="div-comment-374043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ahrh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374043">
			April 27, 2006 at 11:33 am</a>		</div>

		<p>&quot;Many organizations have a system of batch files that rely on the ability to pass parameters between scripts by stashing them into environment variables.&quot;</p>
<p>This is a ridiculous way of doing anything important. &nbsp;Any organization doing that can easily rewrite their crappy scripts. &nbsp;On the other hand, if it is mission critical software that they refuse to rewrite correctly, then they can stick with the operating system it runs on too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374053">
				<div id="div-comment-374053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374053">
			April 27, 2006 at 11:37 am</a>		</div>

		<p>It seems to me that the problem was the decision way back in DOS to make batch files able to modify their parent&#8217;s environment.</p>
<p>(And yes, DOS was single tasking, so the concept of a &quot;parent&quot; process didn&#8217;t exactly exist. &nbsp;That was part of the problem too &#8212; Unix, for instance, ran multiple processes just fine. &nbsp;Of course it ran them on CPUs that were a LOT better than the 8088/8086; Intel CPUs had no way to separate processes until the 386. &nbsp;So the blame is not entirely Microsoft&#8217;s; a good chunk of it is Intel&#8217;s. &nbsp;Not that that helps in fixing the problem, either.)</p>
<p>If the batch processor had not run the batch file in the context of itself, but had shelled out a new instance of itself instead (like sh, csh, ksh, bash, etc. all do), then no one would have gotten used to being able to modify the parent&#8217;s environment.</p>
<p>&gt; Adam: In other words, you&#8217;re willing to accept that batch files from msh don&#8217;t quite work right.</p>
<p>You&#8217;re right, but they don&#8217;t work right from Explorer today. &nbsp;When Explorer launches a batch file, it runs in a new instance of cmd.exe, which then exits. &nbsp;The environment variables do not take effect in the instance of Explorer that launched the batch file.</p>
<p>It seems to me that running batch files from msh isn&#8217;t that different from running them from Explorer. &nbsp;Users don&#8217;t double-click on a batch file expecting its changes to take effect when they double-click on the next one, because that won&#8217;t work. &nbsp;Whatever workaround they use for that would also work to run the batch files from msh.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374063">
				<div id="div-comment-374063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BillyBob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374063">
			April 27, 2006 at 11:39 am</a>		</div>

		<blockquote><p>
  &gt;This is a ridiculous way of doing anything important. &nbsp;Any organization doing that can easily rewrite their crappy scripts. &nbsp;On the other hand, if it is mission critical software that they refuse to rewrite correctly, then they can stick with the operating system it runs on too &nbsp;&lt;&lt;</p>
<p>My, aren&#8217;t you being a bit self righteous? &nbsp;</p>
<p>Our build system currently uses batch files. &nbsp;We have one batch file to set the correct paths to our output directories. &nbsp; Why? &nbsp;Because standardizing crap like that was considered too stupid when we could abstract it into one batch file that set the directories to the common files. &nbsp;Each of our 50+ build scripts calls this one batch file to set the correct environment variables. &nbsp;
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374093">
				<div id="div-comment-374093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">WhatIsTheProblem?</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374093">
			April 27, 2006 at 12:02 pm</a>		</div>

		<p>Why would this break anything?</p>
<p>&quot;It seems to me that running batch files from msh isn&#8217;t that different from running them from Explorer. &nbsp;Users don&#8217;t double-click on a batch file expecting its changes to take effect when they double-click on the next one, because that won&#8217;t work. &nbsp;Whatever workaround they use for that would also work to run the batch files from msh.&quot;</p>
<p>Exactly<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374103">
				<div id="div-comment-374103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">davidacoder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374103">
			April 27, 2006 at 12:11 pm</a>		</div>

		<p>&quot;Shipping a new command shell doesn&#8217;t solve everything either.&quot; Who said it would solve everything? You attack an enemy that isn&#8217;t there&#8230;</p>
<p>PowerShell is tackling a whole new set of problems than batch files. If you look at it as just a replacement for batch (as you seem to do), yes, a cynical comment like &quot;Good luck&#8230;&quot; might be appropriate. But I believe you completely missed what the planned area of use for this is. Every attempted to manage Exchange with batch files?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis even thread-even depth-1" id="comment-374123">
				<div id="div-comment-374123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374123">
			April 27, 2006 at 12:13 pm</a>		</div>

		<p>Environment variable changes in a batch file do not affect any other already-running processes. &nbsp;Batch files run within the context of the existing cmd.exe process, and affect only the environment variables of that process. &nbsp;You can prevent even that with setlocal/endlocal. &nbsp;Environment changes made by batch files can be inherited by child processes, but they never affect parent processes. &nbsp;(That&#8217;s actually a good thing!)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374143">
				<div id="div-comment-374143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374143">
			April 27, 2006 at 12:25 pm</a>		</div>

		<p>&quot;It seems to me that running batch files from msh isn&#8217;t that different from running them from Explorer. &nbsp;Users don&#8217;t double-click on a batch file expecting its changes to take effect when they double-click on the next one, because that won&#8217;t work.&quot;</p>
<p>Well, I can see the following scenario. In fact, I bet it happens frequently after the release of PowerShell.</p>
<p>A project has several CMD scripts. They all run another script that sets the env variables correctly for that project. That script might even be one of the VS scripts to setup %INCLUDE% and %PATH% for the appropriate version of VS for that project.</p>
<p>Somebody sets out to add a new script. &quot;Hey, I&#8217;ll check out Monad^H^H^H^H^HPowerShell!&quot; First line: run CMD script to import env variables. Duoh.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374153">
				<div id="div-comment-374153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.JCABs-Rumblings.com' rel='external nofollow' class='url'>JCAB</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374153">
			April 27, 2006 at 12:33 pm</a>		</div>

		<p>Behold the power of the batch file!</p>
<p><a rel="nofollow" target="_new" href="http://www.lysator.liu.se/tolkien-games/entry/hobbit-true.html" rel="nofollow">http://www.lysator.liu.se/tolkien-games/entry/hobbit-true.html</a></p>
<p>This would be an example of program that wouldn&#8217;t run from Monad. But&#8230; as several people mentioned, as long as CMD.EXE is still there and can be used as an interactive shell, that is just not a problem.</p>
<p>Not everyody will agree with whichever decision is taken, no matter what it is. But you have to suck up and make your decision anyway. Leaving CMD.EXE completely separate, at least, is more future-proof. Just make sure to include it in the proper documentation (KB article, whatever).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374173">
				<div id="div-comment-374173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374173">
			April 27, 2006 at 12:53 pm</a>		</div>

		<p>And what&#8217;s this &quot;PowerShell&quot;? I tried googling, but haven&#8217;t found something that can be a new batch language?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-374193">
				<div id="div-comment-374193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374193">
			April 27, 2006 at 1:02 pm</a>		</div>

		<p>Batch files are typically not run from Explorer. They are run from a command prompt.</p>
<p>If everybody is in agreement that a new scripting language doesn&#8217;t have to solve everything, then why do people keep touting each new command shell as the greatest thing ever that will kill batch files dead?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374203">
				<div id="div-comment-374203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dflare</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374203">
			April 27, 2006 at 1:31 pm</a>		</div>

		<p>I just don&#8217;t see the problem. It should use the same concept as Linux systems do. The shell is a component so there should be lots of plugglabe shells, so you can use the one that suit you. </p>
<p>The old .bat files should run against the old cmd, If you want something more fancy, you can use sh, bash,etc ( or msh in this case :) ), this way, is very easy to do the scripts that you want in the language that you want ( the .net philosophy) ( I will love a sC# ).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-374213">
				<div id="div-comment-374213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374213">
			April 27, 2006 at 1:40 pm</a>		</div>

		<p>Dflare: The problem is interoperating with other script languages. That&#8217;s my point. Interoperating with batch files is hard.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374223">
				<div id="div-comment-374223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dflare</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374223">
			April 27, 2006 at 1:50 pm</a>		</div>

		<p>Not necessary, &nbsp;I mean, If every shell support the basic arquitectural structures, you can support it. Taking your example, if the enviromental variables are shared between shells you can run your .bat file inside another shell, take those variables and modify them and then run another shell etc.</p>
<p>Anyway, Thankfully the problem is with one shell ( the old MSDOS ) so you can give functions or support structures to others shells so they can interact with this one shell, and then make a foundation so every new shell, could be ( in a way ) interoperable</p>
<p>:D ( Anyway, I love the old msdos, but What i usually do is install the Unix tools so I can do things like ls|grep &#8216;hi&#8217; on the cmd prompt)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-374233">
				<div id="div-comment-374233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374233">
			April 27, 2006 at 2:10 pm</a>		</div>

		<p>I wish setlocal was the DEFAULT behavior in batch files. &nbsp;It&#8217;s rare that I want to modify the caller&#8217;s environment from a batch file, and frequent that I want to store locally-important state.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374243">
				<div id="div-comment-374243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">davidacoder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374243">
			April 27, 2006 at 2:14 pm</a>		</div>

		<p>&quot;why do people keep touting each new command shell as the greatest thing ever that will kill batch files dead?&quot;</p>
<p>Who claims that?!? People are excited about PowerShell, because it is incredibly powerful and will allow us to do things that weren&#8217;t possible with batch files. But being excited about something new does NOT imply that we believe it will kill off the old thing. I really feel your are putting words into the mouths of the people that are excited about PowerShell with sentences like that. Had the PowerShell people claimed that once they ship batch files will be dead, a comment like &quot;good luck&quot; (implying you believe it will never work) would have been appropriate. But I just can&#8217;t see that the people that think PowerShell is the greatest thing in &quot;shell space&quot; also think it will kill off batch files over night, or even over years.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374263">
				<div id="div-comment-374263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374263">
			April 27, 2006 at 2:51 pm</a>		</div>

		<p>Regarding getting changes in a cmd script&#8217;s environment not propogating to Monad (or psh):</p>
<p>Since microsoft controls both cmd.exe and psh.exe, it would be possible to distribute an updated cmd.exe with the PowerShell distribution. &nbsp;This cmd.exe would be essentially the same as the current cmd.exe, but will also have a protocol that psh can use to grab it&#8217;s changed environment.</p>
<p>I know that updating cmd.exe from an optional utility package seems like it would open a lot of potential problems, but it seems to me to be quite feasible.</p>
<p>An alternative is that PowerShell can distribute it&#8217;s own version of cmd.exe (say, pshcmd.exe) that&#8217;s built from the same source as cmd.exe, with the additional environment change protocol built in. &nbsp;Since cmd.exe&#8217;s source is used to build the thing, it&#8217;ll have 100% compatibility with cmd.exe.</p>
<p></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374273">
				<div id="div-comment-374273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.undeadshell.com' rel='external nofollow' class='url'>John Stanhope</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374273">
			April 27, 2006 at 2:51 pm</a>		</div>

		<p>This is exactly why I start writing my own shell. It&#8217;s called the undeadshell and it supports a (currently) limited bash and cmd syntax. You can switch between the two by settings the variable UNDEAD_SYNTAX to bat or shell. &nbsp;And one day it will let you run batch scripts from the bash side and bash scripts from the batch side.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-374283">
				<div id="div-comment-374283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374283">
			April 27, 2006 at 3:10 pm</a>		</div>

		<p>davidacoder: People are saying it right here in the comments! &nbsp;&quot;Any organization doing that can easily rewrite their crappy scripts.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374293">
				<div id="div-comment-374293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://matthew.chaboud.com' rel='external nofollow' class='url'>Matthew Chaboud</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374293">
			April 27, 2006 at 3:16 pm</a>		</div>

		<p>People can jump on Raymond all they want for this, but he&#8217;s absolutely right. &nbsp;You&#8217;re missing the point of his post if you think that using cmd and Powershell for separate tasks is a reasonable solution. &nbsp;It may be a reasonable solution for the user, but it doesn&#8217;t incentivize the user&#8217;s adoption of Powershell.</p>
<p>We use batch files for our build environment setup, and we use python invoked from batch files for quite a bit. &nbsp;If I know and use this large library of batch files already, what&#8217;s the incentive to jump to Powershell for some work and back into cmd for other work?</p>
<p>I don&#8217;t know many people who use csh, bash, ash, tcsh, zsh, and sh for each of the little quirks. &nbsp;Most everyone I know just uses bash.</p>
<p>I&#8217;m not going to bother uninstalling Powershell, but it&#8217;s highly unlikely that I&#8217;ll be using it in the near future (read: next several years). &nbsp;I imagine that there must be some people who think that extending cmd to pass back environment changes is worth it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374313">
				<div id="div-comment-374313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://stuckinthecube.blogspot.com/' rel='external nofollow' class='url'>ReallyEvilCanine</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374313">
			April 27, 2006 at 4:48 pm</a>		</div>

		<p>Why won&#8217;t Microsoft write a new OS from the bottom up? I finished an almost-rant about that &lt;a href=&quot;<a rel="nofollow" target="_new" href="http://stuckinthecube.blogspot.com/2006/04/attention-microsoftie-infidels.html&quot;&gt;about" rel="nofollow">http://stuckinthecube.blogspot.com/2006/04/attention-microsoftie-infidels.html&quot;&gt;about</a> 15 minutes ago&lt;/a&gt;. I actually like batch scripting. Maybe it has something to do with the fact that I can remember programming in COBOL and FORTRAN. On punch cards. Honest.</p>
<p>The command shell is important. Baic bath commands and manipulations are important. If I need some customer to E-Mail the contents of a directory, DIR X: /S &gt;&gt; DIR.TXT takes eight seconds, but trying to do that from the GUI? Fuhgeddabowdit.</p>
<p>To this day there are companies who write sh scripts and limit them to whatever can also be done in DOS batch.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374333">
				<div id="div-comment-374333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">vince</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374333">
			April 27, 2006 at 5:07 pm</a>		</div>

		<p>&quot;Those who don&#8217;t understand UNIX are doomed to reinvent it, poorly.&quot;<br />
<br />&#8211;Henry Spencer</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-374343">
				<div id="div-comment-374343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374343">
			April 27, 2006 at 5:20 pm</a>		</div>

		<p>Apparently OS/2 and Windows NT were chopped liver.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374353">
				<div id="div-comment-374353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gene Hamilton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374353">
			April 27, 2006 at 5:29 pm</a>		</div>

		<p>@ReallyEvilCanine</p>
<p>How would re-writing an OS help? &nbsp;All you do is wind up with a new crop of bugs and new problems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374073">
				<div id="div-comment-374073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374073">
			April 27, 2006 at 11:56 am</a>		</div>

		<p>Well I must admit that I don&#8217;t know how I can use Win32 API to change environment variables for parent or at least for user or computer. Anybody knows that?</p>
<p>For example, I&#8217;d like to make something which would permanently change PATH paths more comfortably (one path in per line) than through &quot;My computer&quot; properties, where I have a lot of paths all in one single line, and it&#8217;s a *real pain* to edit.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374083">
				<div id="div-comment-374083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Trent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374083">
			April 27, 2006 at 11:57 am</a>		</div>

		<p>So&#8230; You&#8217;re really going to sit there and tell us that Microsoft can&#8217;t figure out how to solve the problem of propagating environment variable changes to the parent process?</p>
<p>Modesty is one thing&#8230; but that&#8217;s just ridiculous.</p>
<p>But for all those pooh-poohing the problem, tell me: as stupid and ridiculous as global variables are, can you really tell us with a straight face that you&#8217;ve *never* written a program that used them? &#8216;Cause that&#8217;s exactly what these cross-batch-file environment variables are.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374373">
				<div id="div-comment-374373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374373">
			April 27, 2006 at 7:03 pm</a>		</div>

		<p>This is really easy. So easy, in fact, that unix did it 30+ years ago:</p>
<p>#!python<br />
<br />this is a python script</p>
<p>And for all of you who think that cmd is actually doing something innovative by giving you if statements and tab completion, perhaps you could ask why it wasn&#8217;t here 10 years ago? sh and bash have supported this stuff for ages. We also have value defaulting, and full on functions.</p>
<p>Yeah, it makes sense that this wasn&#8217;t around for Dos1.0 &#8211; it was a quick hack written for fun, but you should&#8217;ve had all this by at least Dos 5.0</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374113">
				<div id="div-comment-374113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">WhyNewShell?</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374113">
			April 27, 2006 at 12:12 pm</a>		</div>

		<p>Who needs a new shell? &nbsp;cmd.exe can execute perl scripts :-)<br />
<br />&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-<br />
<br />@rem &#8211;*-Perl-*&#8211;<br />
<br />@echo off<br />
<br />perl.exe -x &quot;%~dpnx0&quot; %*<br />
<br />goto :eof</p>
<p>#!perl<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374133">
				<div id="div-comment-374133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374133">
			April 27, 2006 at 12:15 pm</a>		</div>

		<p>Yeah, what BrianK said.</p>
<p>If &quot;not working quite right&quot; means &quot;working exactly the same way that they *currently* do from all shells other than cmd.exe (e.g. windows explorer)&quot; then you have a point.</p>
<p>(Forget my rambling about passing env vars up the process tree &#8211; your post suddenly made me think that running batch files from explorer could change the explorer environment.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-374383">
				<div id="div-comment-374383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374383">
			April 27, 2006 at 7:16 pm</a>		</div>

		<p>Cooney: ? How does that solve the &quot;environment variable sharing&quot; problem?</p>
<p>If you just wanted to solve the &quot;run a particular script with a particular interpreter&quot;, that&#8217;s already been done &#8211; create a file association saying that *.python files should be run by python.exe.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374393">
				<div id="div-comment-374393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374393">
			April 27, 2006 at 7:43 pm</a>		</div>

		<p>There is a simple solution that you are ignoring (willfully, it appears). Make cmd default, just like today and allow people to change their interpreter. new interpreters need not be fully compatible with the foibles of cmd, as you have the option of using it or not (default to using cmd). You have to use the same command interpreter as the script in order to share env variables (just like unix). You should also make this require an artifact, as cmd is the only one that does it.</p>
<p>If you run a script, it defaults to being a cmd script unless specified otherwise.</p>
<p>What I&#8217;m saying is that the new cmd interpreter need not be compatible with the old one, since changing the intepreter is a deliberate act.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-374403">
				<div id="div-comment-374403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374403">
			April 27, 2006 at 7:57 pm</a>		</div>

		<p>That still doesn&#8217;t solve the problem where you&#8217;ve already started the alternate shell (PowerShell, bash, whatever) and then you want to run a cmd.exe batch file that relies on environment variable sharing or current directory sharing or pushd stack sharing or some other cmd.exe feature where batch files can communicate with each other after they have exited. That is the problem I&#8217;m discussing today. The #!python thing is nice but it is also irrelevant to the topic at hand.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374183">
				<div id="div-comment-374183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://bogol.blogspot.com' rel='external nofollow' class='url'>HA HA HA</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374183">
			April 27, 2006 at 12:58 pm</a>		</div>

		<p>they&#8217;re is *no* porblam u cant slove wiht a new sriptign langage! </p>
<p>especily if its dasignd acording to the inventers crackpot theries abuot alnguage design or is a subtly incompatable dilect of lisp. or better yet alla teh above.</p>
<p>i meean liek *duh*?!</p>
<p>sheesh.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374413">
				<div id="div-comment-374413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Guest</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374413">
			April 27, 2006 at 8:16 pm</a>		</div>

		<p>Well, Microsoft could write a converter that converts cmd script files into PowerShell ones&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-374433">
				<div id="div-comment-374433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374433">
			April 27, 2006 at 8:29 pm</a>		</div>

		<p>Good luck converting &quot;goto&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374443">
				<div id="div-comment-374443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374443">
			April 27, 2006 at 8:40 pm</a>		</div>

		<p>Am I missing something obvious here?</p>
<p>Why have separate exes for old and new style scripts? If you start a .bat file from the command prompt cmd.exe should execute it using the old syntax. If you start a .bat2 file it should use the new syntax. Both are interpreted by the same exe and will share the same environment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374453">
				<div id="div-comment-374453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matthew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374453">
			April 27, 2006 at 8:55 pm</a>		</div>

		<blockquote><p>
  &gt; This is a ridiculous way of doing anything important.</p>
<p>Why? If it works, what is wrong with it? Seriously.</p>
<p>&gt;&gt; That is the problem I&#8217;m discussing today. </p>
<p>Raymond, you should know better than to expect people to READ, UNDERSTAND and ENGAGE with your posts. Its much easier for them to imagine some other topic you are discussing and respond to that instead.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374463">
				<div id="div-comment-374463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374463">
			April 27, 2006 at 9:24 pm</a>		</div>

		<p>Raymond,<br />
<br />If you&#8217;re in &lt;random shell&gt; and you invkoe magic.cmd that mucks about with environment variables, it gets a copy of the environment.</p>
<p>The compatibility break is this: you don&#8217;t then copy the env back out on exit. If that&#8217;s necessary, then wrap the cmd scritps in a script and they can share the same interpreter. this env sharing is a nasty thing and deserves to die &#8211; you should only be able to do that sort of thing inside of the same cmd interpreter, such as a bash script sourcing another bash script.</p>
<p>Ivo:<br />
<br />&gt; Why have separate exes for old and new style scripts? </p>
<p>Because there&#8217;s no reason to tie this together. Understand that most people will leave cmd.exe alone, but the ones of us who like running bash or whatever will like being able to upgrade that stuff independently.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374473">
				<div id="div-comment-374473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374473">
			April 27, 2006 at 9:31 pm</a>		</div>

		<blockquote><p>
  A frankly minor interop issue between old and new scripts doesn&#8217;t lessen the value of a decent shell at last.</p>
<p>IMNSHO, interop in the face of a workable way to distinguish shells (like #! syntax) is a nonissue.</p>
<p>I use Unix. I&#8217;m so spoiled.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374253">
				<div id="div-comment-374253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374253">
			April 27, 2006 at 2:44 pm</a>		</div>

		<p>Anonymous Coward: &nbsp;Yes, that would be a problem. &nbsp;That&#8217;s why sh/ksh/bash have the &quot;.&quot; or &quot;source&quot; builtin &#8212; to run another script in the context of the current shell process, so that environment variable changes (or shell function definitions, or whatever) made in that script also take effect in the parent. &nbsp;But it doesn&#8217;t work when the target script is written in another scripting language; in that case, there is no solution.</p>
<p>(As Aaron said, environment variable settings are usually propagated down the process tree, but *NEVER* up it. &nbsp;It just looks that way in batch files because all .bat / .cmd files called by one &quot;parent&quot; batch file or from the command line get interpreted by the same process.)</p>
<p>Anyway, I&#8217;m no longer sure what my point is, but I think it has something to do with the fact that different languages rarely interoperate without the programmer thinking.</p>
<p>In the case of monad / powershell / whatever it&#8217;s called this week, if it has a &quot;source&quot; equivalent, then it would be possible to rewrite the target batch file in monad (of course this creates two versions of the same script that have to be kept in sync), and then source that script.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374483">
				<div id="div-comment-374483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Byron Ellacott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374483">
			April 27, 2006 at 10:09 pm</a>		</div>

		<p>Hmm. &nbsp;I&#8217;ve not yet seen someone propose that the batch file interpreter of CMD.EXE be wrapped up as a library and used directly by replacement shells. &nbsp;Tada, it&#8217;s no longer a child process, and is free to screw around with the replacement shell&#8217;s environment as much as it likes.</p>
<p>If worst comes to worst, it&#8217;s not even a particularly complex syntax, it can be reimplemented from scratch in a fairly short time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374493">
				<div id="div-comment-374493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bramster</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374493">
			April 27, 2006 at 11:00 pm</a>		</div>

		<p>Raymond said </p>
<p>&quot;Batch files are typically not run from Explorer. They are run from a command prompt.&quot;</p>
<p>Alas, were it true.</p>
<p>I&#8217;m a command line guy. . . &nbsp; &nbsp;I write a lot of programs in which a batch file passes the output of program 1 to program 2 to program 3, etc.</p>
<p>The Windeeze use explorer, and click on my batch file. . .</p>
<p>Now, a lot of this discussion is waaaay over my head. . . &nbsp; &nbsp; but I&#8217;ve seen batch files setting environment variables. . . &nbsp;and I ask why. &nbsp; With 300 Gb drives at $150 or so, why not just run your whole job in the current directory, and forget about all that pain?</p>
<p>Am I missing something?</p>
<p></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-374513">
				<div id="div-comment-374513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374513">
			April 28, 2006 at 1:13 am</a>		</div>

		<p>Cooney: I&#8217;m not sure what you meant by that &#8220;interop in the face of a<br />
workable way to distinguish shells is a nonissue&#8221;. Are you saying,<br />
&#8220;Since there is a workable way to distinguish shells [file extensions<br />
in the Windows case], interop is a nonissue&#8221;? In other words, the<br />
&#8220;environment sharing&#8221; problem is a figment of my imagination? When you<br />
wrote, &#8220;this env sharing is a nasty thing and deserves to die&#8221;, do you<br />
mean &#8220;Anybody who does this deserves to be broken&#8221;? Telling people that<br />
they &#8220;deserve to die&#8221; is not a great way to win them over.</p>
<p>Byron Ellacott: &#8220;[the cmd.exe interpreter] can be reimplemented from<br />
scratch in a fairly short time.&#8221; And then when Vista adds new features<br />
to the cmd.exe interpreter, your reimplementation stops working (since<br />
it doesn&#8217;t support the new features that new Vista batch files rely on).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374363">
				<div id="div-comment-374363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374363">
			April 27, 2006 at 6:40 pm</a>		</div>

		<p>&quot;If everybody is in agreement that a new scripting language doesn&#8217;t have to solve everything, then why do people keep touting each new command shell as the greatest thing ever that will kill batch files dead?&quot;</p>
<p>You&#8217;re absolutely right Raymond. It&#8217;s like that Windows thing, everyone says that will kill DOS stone dead but the fact it works slightly differently I&#8217;m sure means we&#8217;ll all still be using it for years to come&#8230;</p>
<p>*sigh*</p>
<p>Will all those batch files go away overnight? No. Are sysadmins like myself crying out for something less of a mess than batch files but less hard work than vbs? Absolutely. Batch files are horrid to write and even worse to maintain, not as bad as Perl but close.</p>
<p>A frankly minor interop issue between old and new scripts doesn&#8217;t lessen the value of a decent shell at last.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-junfeng even thread-even depth-1" id="comment-374523">
				<div id="div-comment-374523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Junfeng+Zhang' rel='external nofollow' class='url'>Junfeng Zhang</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374523">
			April 28, 2006 at 1:41 am</a>		</div>

		<p>Just leave the batch file alone. People will write script for the new shell. </p>
<p>Unix has so many shells. I don&#8217;t see people complain about interoperability.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374533">
				<div id="div-comment-374533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cheong00</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374533">
			April 28, 2006 at 3:02 am</a>		</div>

		<p>Sorry for being OT, but I&#8217;d like to ask: Is there any conclusion reached for how to handle the Samba bug in fast mode? I really want to know what handling will be made regarding that issue as I&#8217;m running 2 or 3 Samba file servers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374543">
				<div id="div-comment-374543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374543">
			April 28, 2006 at 3:26 am</a>		</div>

		<p>Raymond: I&#8217;m not sure what you meant by that &quot;interop in the face of a workable way to distinguish shells is a nonissue&quot;. Are you saying, &quot;Since there is a workable way to distinguish shells [file extensions in the Windows case], interop is a nonissue&quot;? In other words, the &quot;environment sharing&quot; problem is a figment of my imagination? When you wrote, &quot;this env sharing is a nasty thing and deserves to die&quot;, do you mean &quot;Anybody who does this deserves to be broken&quot;? Telling people that they &quot;deserve to die&quot; is not a great way to win them over.</p>
<p>I&#8217;m saying a couple of things:<br />
<br />1: file extensions are a bad idea. Everything should be a .cmd. Extend cmd.exe to recognize alternate interpreters and launch them, then leave it be.</p>
<p>2: nobody needs interop with cmd, since it&#8217;s still there.</p>
<p>3: environment pollution is a bad idea and isn&#8217;t worthy of being supported outside of cmd. It&#8217;s reminiscent of the poor isolation inherent in windows that leads to many of its current problems.</p>
<p>4: environment sharing is indeed a misconception of yours. It does not exist as a requirement for new shells: all they must do is provide a compelling experience, not implement a superset of cmd.</p>
<p>5: anybody who doesn&#8217;t agree with me and likes cmd just fine will not be affected in the least, as I intend no changes to cmd. It&#8217;s a relic and offers nothing I haven&#8217;t had elsewhere for a decade.</p>
<p>I&#8217;d like to add a couple more things:<br />
<br />I like unix, mainly because I can so everything from the cmd line. This is important when screwing with one or more servers sitting on the other side of an ocean. </p>
<p>Windows would do well to emulate the parts of this that are useful &#8211; remote admin without a mouse or gui is a powerful thing.</p>
<p>&gt; Telling people that they &quot;deserve to die&quot; is not a great way to win them over.</p>
<p>Final dig: I tell people that the feature is useless, not that they should die. In fact, I am even more polite than that: I say that the benefits do not justify the concomitant problems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374423">
				<div id="div-comment-374423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">orcmid</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374423">
			April 27, 2006 at 8:29 pm</a>		</div>

		<p>Wow, I&#8217;m almost sorry that I read all of these comments. &nbsp;</p>
<p>My sense is that batch files (and command-line utilities that accept response files) will be around for a long time. &nbsp;For one thing, VS 2005 still produces them and uses them to accomplish builds. &nbsp;A lot of Platform SDK material uses them, as do other language-tool examples. &nbsp;</p>
<p>I also find batch files very handy when sharing code and builds. &nbsp;You can count on them being usable, and you can easily set them up so that customization to a particular configuration is straightforward. &nbsp;</p>
<p>I expect nmake to be around for the same reason, even though VS 2005 has a &quot;better way.&quot;</p>
<p>In addition, before we get to PowerShell, there&#8217;s already WSH and the assured-to-be-available scripting languages JScript and VBScript. &nbsp;(I just saw where there is an Ajax-oriented kit that will pack up a JavaScript into an .exe for easy deployment. &nbsp;I can dig that too! <a rel="nofollow" target="_new" href="http://ajaxian.com/archives/javeline-deskrun-run-ajax-apps-as-native-windows-programs" rel="nofollow">http://ajaxian.com/archives/javeline-deskrun-run-ajax-apps-as-native-windows-programs</a>)</p>
<p>So I don&#8217;t think I will worry about PowerShell very soon. &nbsp;</p>
<p>Also, my approach to forcing toolcraft on others is to always share code using the lowest-level scripts that I know will work on the platforms I am sharing code for, and that&#8217;s usually *.bat and cmd.exe. &nbsp;I don&#8217;t mind people using alternative shells (I fancy 4DOS and 4NT myself), including bash, other *nix shell flavors, REXX, and PowerShell. I just don&#8217;t want to have that mean I need to run them too. &nbsp;(The number of different scripting and build tools it can take to build a single *nix application is ridiculous.)</p>
<p>I figure the next step up from *.bat is *.js or JavaScript hosted in a local web page (or a *.hta if I&#8217;m rally feeling lucky).</p>
<p>At bottom think it is basically a big 80-20 thing. &nbsp;Simple tools for simple purposes win with me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374573">
				<div id="div-comment-374573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374573">
			April 28, 2006 at 5:38 am</a>		</div>

		<p>AC: to set vars permanently, use setx.exe (available in Win2003, and above I guess). It&#8217;s the same like setting it in System Properties.<br />
<br />When I do need to edit it manually, I always copy the path for the (ridiculously small) edit box into notepad, edit and then copy back.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374593">
				<div id="div-comment-374593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374593">
			April 28, 2006 at 8:59 am</a>		</div>

		<p>Thanks Jonathan, I&#8217;ve found SetX for W2K. I&#8217;ve also found the documentation for changing the environment variables on system level:</p>
<p>&quot;To programmatically add or modify system environment variables, add them to the HKEY_LOCAL_MACHINESystemCurrentControlSetControlSession ManagerEnvironment registry key, then broadcast a WM_SETTINGCHANGE message.&quot;</p>
<p>which is what SetX probably uses. But I still don&#8217;t know how USER defined variables can be accessed.</p>
<p>Regarding PowerShell, now the search machines are updated, that&#8217;s the new name since Tuesday for Monad/Msh. I didn&#8217;t google on news.google.com lats time. :) Btw &#8212; don&#8217;t you hate the term &quot;experience&quot; used as a &nbsp;obligatory word in MSFT materials? Marketspeak^2.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-374623">
				<div id="div-comment-374623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374623">
			April 28, 2006 at 9:47 am</a>		</div>

		<p>Centaur: What if multiple scripts &quot;bar1&quot;, &quot;bar2&quot;, &quot;bar3&quot; all want to use foo1.cmd to set common variables such as the PATH?</p>
<p>Cooney: Okay, so you&#8217;re agreeing that &quot;A new scripting language doesn&#8217;t solve everything&quot; and are taking the option in the second paragraph: &quot;Maybe you decide that you won&#8217;t and prefer to force people to rewrite all their batch files into your new language. Good luck on that.&quot;</p>
<p>I think a lot of the misunderstanding is that people are going for the second-paragraph option without saying so.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374563">
				<div id="div-comment-374563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374563">
			April 28, 2006 at 4:16 am</a>		</div>

		<p>The whole idea to call a script that will set environment variables is a design antipattern.</p>
<p>*Context:* A script FOO needs an unspecified set of environment variables.</p>
<p>*Proposed solution:* The script FOO calls another script BAR which sets the variables and returns.</p>
<p>*Forces:* environment changes propagate down to child processes and in the same process but not up to parent processes.</p>
<p>*Resulting context:* Both scripts have to run in a single process, since otherwise environment changes made by BAR will not propagate to FOO.</p>
<p>*Therefore:*</p>
<p>Invert the parent/child relationship between FOO and BAR. Have BAR call FOO as its last command. If the environment set up by BAR is going to be used by more than one script FOO1, FOO2, …, FOOn, have the continuation command passed to BAR in command line parameters.</p>
<p>::: foo1.cmd<br />
<br />if &quot;%SOME_VAR%&quot; == &quot;&quot; goto noenv<br />
<br />:: do the work</p>
<p>goto end<br />
<br />:noenv<br />
<br />bar.cmd %0 %*<br />
<br />:end<br />
<br />::# foo1.cmd</p>
<p>::: bar.cmd<br />
<br />set SOME_VAR=hello world<br />
<br />set SOME_OTHER_VAR=polo<br />
<br />%*<br />
<br />::# bar.cmd</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374773">
				<div id="div-comment-374773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374773">
			April 28, 2006 at 1:44 pm</a>		</div>

		<p>AC:</p>
<p>[HKEY_CURRENT_USEREnvironment]<br />
<br />&quot;Name&quot;=&quot;Value&quot; ; REG_EXPAND_SZ works too</p>
<p>then broadcast a WM_SETTINGCHANGE message.<br />
<br />But: running instances of CMD.EXE don&#8217;t get the change, neither for SYSTEM nor for USER variables.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374783">
				<div id="div-comment-374783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">microbe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374783">
			April 28, 2006 at 1:46 pm</a>		</div>

		<p>: Although, I&#8217;m now wondering, does cmd.exe pass it&#8217;s environment &quot;up the process tree&quot;? </p>
<p>I don&#8217;t think anyone is passing env back to parents. In the example Raymond gave, he runs multiple .bat files inside one cmd.exe. So it seems in this case .bat file doesn&#8217;t spawn new processes, instead it&#8217;s interpreted inside the current cmd.exe directly, so they share the environment.</p>
<p>Don&#8217;t know if it&#8217;s the case for MSH too..but if you run .bat inside MSH and MSH has to spawn a cmd.exe, apparently you can&#8217;t share env among multiple .bat (unless you pass multiple .bat to the same cmd.exe in one commandline).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-374813">
				<div id="div-comment-374813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374813">
			April 28, 2006 at 2:53 pm</a>		</div>

		<p>&quot;You rewrite your scripts of you want to use bash. don&#8217;t if you want to keep cmd.&quot;</p>
<p>And then your cmd batch scripts that try to share environment variables stop working when run from your alternate shell. That&#8217;s my point.</p>
<p>&quot;You&#8217;re acting as if there can be only one shell.&quot;</p>
<p>Quite the contrary. There&#8217;s cmd.exe and there&#8217;s &quot;alternate shell&quot; and the interop boundary is where the problem is. If you decide that you want your alternate shell to be able to run batch files, then you have the environment variable problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374583">
				<div id="div-comment-374583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374583">
			April 28, 2006 at 8:30 am</a>		</div>

		<p>Cooney:</p>
<p>&gt; The compatibility break is this: you don&#8217;t<br />
<br />&gt; then copy the env back out on exit.</p>
<p>But cmd.exe *does not do this*. &nbsp;If you have a batch file that calls another batch file, the second file does not run in a new process. &nbsp;You know Unix, where each shell script runs in its own process unless the calling script says otherwise; cmd.exe simply doesn&#8217;t work that way. &nbsp;It runs every called batch file in the same process.</p>
<p>&gt; you should only be able to do that sort of<br />
<br />&gt; thing inside of the same cmd interpreter,<br />
<br />&gt; such as a bash script sourcing another bash<br />
<br />&gt; script.</p>
<p>You *can* only do that sort of thing inside the same cmd interpreter; it&#8217;s just that &quot;inside the same cmd interpreter&quot; has always been the default.</p>
<p>Yes, this is broken (I fully agree with your point #3 above), but unfortunately it&#8217;s the way it is, and people have made (IMO stupid) script systems based on this misfeature. &nbsp;And Microsoft doesn&#8217;t think it can say &quot;well that&#8217;s just not going to work anymore&quot;. &nbsp;(For that matter, they&#8217;re probably right; they probably can&#8217;t.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374853">
				<div id="div-comment-374853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.morganalley.com' rel='external nofollow' class='url'>Dewi Morgan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374853">
			April 28, 2006 at 3:48 pm</a>		</div>

		<p>Adam&#8217;s a-h list is correct, and the only way that anyone would want or expect it to ever work.</p>
<p>This is, after all, the way that cmd.exe does it: if you call cmd.exe from within cmd.exe, then the &quot;inner&quot; shell will not pass its environment to the calling shell. It was ever thus, by design.</p>
<p>The problem appears to be that .bat files will not affect the environment in the new shell, which will upset interactive users of the new shell, attempting to use their old library of interactive batch files.</p>
<p>Carlos and others suggested a workaround which was basically associating batch files with a cmd.exe wrapper that stored the environment on a per-shell-PID basis, rather than with cmd.exe itself. Downside there is that when you run it from windows explorer and all other shells in the universe, you don&#8217;t expect or want the previous environment to be stored, and storing it may break scripts designed for use by clicking in explorer or running from any non-cmd.exe shell. Which means you need a separate association for .bat files in monad compared to the association in every other shell you might use, so that monad and cmd.exe can run .bat files and look the same.</p>
<p>This is blatantly silly. Here in win2k, I have cmd.exe and command.com. They are incompatible, and batch files from one will not run in the other (though cmd.exe is MOSTLY backwardly compatible). We have command.com because cmd.exe is NOT always backwardly compatible. For people who use batch files with sideeffects, there will always be cmd.exe and command.com, just as there will alwys be notepad.exe in two places, and moricons.dll. They&#8217;re the historical compatibility tax.</p>
<p>I personally will continue to use cmd.exe for commandline utils, because I prefer it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374903">
				<div id="div-comment-374903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374903">
			April 28, 2006 at 4:24 pm</a>		</div>

		<blockquote><p>
  And then your cmd batch scripts that try to share environment variables stop working when run from your alternate shell. That&#8217;s my point. </p>
<p>And my point is that that&#8217;s too bad &#8211; if you want to share environments, use cmd. There&#8217;s no reason to restrict the use of shells because they don&#8217;t play well with cmd.</p>
<p>&gt; If you decide that you want your alternate shell to be able to run batch files, then you have the environment variable problem.</p>
<p>If you run bash, you don&#8217;t expect batch files to mess with your env. There is no problem because interop is never promised.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-374913">
				<div id="div-comment-374913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374913">
			April 28, 2006 at 4:35 pm</a>		</div>

		<p>&quot;interop is never promised.&quot;</p>
<p>So you&#8217;re back in paragraph 2 after all. You don&#8217;t have 100% support for classic batch files. People who want to use their classic batch files may have to rewrite them in your new shell language.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374923">
				<div id="div-comment-374923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374923">
			April 28, 2006 at 5:16 pm</a>		</div>

		<blockquote><p>
  So you&#8217;re back in paragraph 2 after all. You don&#8217;t have 100% support for classic batch files. People who want to use their classic batch files may have to rewrite them in your new shell language.</p>
<p>Yes I do. If they want 100% compatibility, cmd.exe is still there. I&#8217;m proposing something new, which requires changes if you want to use it. The value proposition will hopefully be enough that some people will switch. If people with a large investment in cmd files don&#8217;t switch, so what? It&#8217;s a shell.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374953">
				<div id="div-comment-374953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Steward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374953">
			April 28, 2006 at 5:44 pm</a>		</div>

		<p>Dewi: I agree with this, and my feeling is that a method for running batch files in &quot;persistent&quot; mode is the only effective solution.</p>
<p>However, I&#8217;d say the problem with persisting environment variables is like cmd.exe not supporting pipes (and command.com continuing to). &nbsp;It would fundamentally break a number of important uses for batch files, and forcing people to use command.com for pipes would make it difficult to take advantage of the new features in cmd.exe.</p>
<p>This is basically about interfacing. &nbsp;Yes, you can run all your interwoven batch files in one instance of cmd.exe, but you then need to get output from that back into whatever scripting language you&#8217;re using to call it. &nbsp;And you need to plan that carefully &#8211; what if you want to change the order the batch files are called? &nbsp;You need someone who can rewrite the legacy batch file interface.</p>
<p>Of course, I&#8217;d prefer rewrite the batch files, but there are only so many hours in a day &#8211; I still have some up-to-date code that&#8217;s built with batch files, because getting VS to build it is too much work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374983">
				<div id="div-comment-374983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carlos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374983">
			April 28, 2006 at 6:23 pm</a>		</div>

		<p>Dewi Morgan: you misrepresent me. &nbsp;I&#8217;m suggesting that the new shell implement the wrapper for batch files.</p>
<p>So cmd.exe is unchanged, and existing behaviour is unaltered.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-374723">
				<div id="div-comment-374723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fox Cutter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374723">
			April 28, 2006 at 12:20 pm</a>		</div>

		<p>Well, if I had to solve this I would do something like this.</p>
<p>* Take advantage of the fact that the child process can get a copy of the parent&#8217;s environment.</p>
<p>* When launching a batch file I would do more then just run Command with the batch file. I would run it with a custom batch file that has three steps.</p>
<p>1: Run a small app that will write out a copy of the environment to a temp file (file name probably based on the process ID).</p>
<p>2: Run the batch file</p>
<p>3: Run a second app that will create a delta of it&#8217;s current environment (given to it by cmd and having all the environment variable changes) with the temp file, and write out all the changes to a final temp file.</p>
<p>* In the new shell, once cmd returns it can read the file with the delta and update it&#8217;s environment as needed.</p>
<p>Is this a simple and clean answer&#8230; hardly. Will it work, I give it fairly high chance of working correctly 95% of the time. </p>
<p>The perfect world solution with be to tweak cmd to report any environment changes to a different application (via a pipe or something) but that not really a realistic solution. The last thing you want is Power Shell installing a different (and potentially older) version of cmd.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-375023">
				<div id="div-comment-375023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Russ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-375023">
			April 28, 2006 at 8:16 pm</a>		</div>

		<p>IMO, everyone is missing the real problem here. There should be an easy way for environment variable changes to be propogated to parent processes and/or globally. There currently is not, hence lots of problems&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-375033">
				<div id="div-comment-375033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Steward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-375033">
			April 28, 2006 at 8:56 pm</a>		</div>

		<p>Russ: Yes, there should be a way to propagate variables to the parent, but how, and when do you stop? &nbsp;Global variables don&#8217;t scale very well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374793">
				<div id="div-comment-374793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-374793">
			April 28, 2006 at 2:23 pm</a>		</div>

		<p>Bryank<br />
<br />&gt; But cmd.exe *does not do this*. &nbsp;If you have a batch file that calls another batch file, the second file does not run in a new process.</p>
<p>If you want to maintain compatibility with CMD, you must do this when writing another shell.</p>
<p>&gt; Yes, this is broken (I fully agree with your point #3 above), but unfortunately it&#8217;s the way it is, and people have made (IMO stupid) script systems based on this misfeature. &nbsp;And Microsoft doesn&#8217;t think it can say &quot;well that&#8217;s just not going to work anymore&quot;. &nbsp;(For that matter, they&#8217;re probably right; they probably can&#8217;t.)</p>
<p>I&#8217;m not saying that. I&#8217;m saying that other shells can behave differently. CMD can do its own thing, and bash does its own thing.</p>
<p>Raymond:<br />
<br />&gt; &quot;Maybe you decide that you won&#8217;t and prefer to force people to rewrite all their batch files into your new language. Good luck on that.&quot; </p>
<p>No, no, no. You rewrite your scripts of you want to use bash. don&#8217;t if you want to keep cmd. You&#8217;re acting as if there can be only one shell.</p>
<p>microbe:<br />
<br />&gt; I don&#8217;t think anyone is passing env back to parents.</p>
<p>The only reason for this is to maintain the env sharing misfeature when interfacing two different shells. When you think about this, it&#8217;s such a bad idea that hopefully nobody will try it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-375083">
				<div id="div-comment-375083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tony</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-375083">
			April 28, 2006 at 10:39 pm</a>		</div>

		<p>Raymond,</p>
<p>Really good to see your support of another Microsoft Product. </p>
<p>Your pompous attitude is really starting to get tiring.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-375063">
				<div id="div-comment-375063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-375063">
			April 28, 2006 at 9:34 pm</a>		</div>

		<p>Russ&gt; &quot;There should be an easy way for environment variable changes to be propogated to parent processes&quot;</p>
<p>And how is that supposed to work?</p>
<p>Process A spawns child process B. At process creation time, B gets a copy of A&#8217;s environment. Process A continues to run. Process A changes its current working directory and PATH environment variable because it needs to. Process B then changes its cwd and PATH, does a few things and exits.</p>
<p>At what point do you propose copying Bs changes back to A, and how do you expect to stop A breaking because of it?</p>
<p>Processes should *NOT* be able to modify data in each others address space. Period. Environment vars are data in a processes address space. If you disagree with this, please go read a book on OS design.</p>
<p>If you want to add a function so that a process can READ a child&#8217;s environment (which might be sane, but I&#8217;m not completely sure about that &#8211; imagine an unpriveliged process reading the environment of a more priveliged child), then a particular parent might choose to read its child&#8217;s environment after it notices that the child has terminated, but before its resources are released by that parent (i.e. &#8211; while it is in a zombie state).</p>
<p>I&#8217;m not convinced it&#8217;s a good idea though. Imagine a parent that runs two child processes. The envrionment the parent ends up with will depend on which child finishes last. Uurgh.</p>
<p>No, auto-propagation of env data up the process tree is a bad idea.</p>
<p>Russ&gt; &quot;and/or globally.&quot;</p>
<p>WHAT!?!</p>
<p>So, if two people are logged onto the same computer, either with fast user switching, or on a terminal server, you want changes in one person&#8217;s environment to be propagated to the other? Are you kidding me? You want to be able to change someone else&#8217;s PATH while they&#8217;re logged on and potentially in the middle of some operation?</p>
<p>Um, NO! Talk about a security risk. Geez&#8230;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-375203">
				<div id="div-comment-375203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-375203">
			April 29, 2006 at 5:49 pm</a>		</div>

		<p>@Tony</p>
<p>I have a perfect solution for you if you are getting tired of Raymond&#8217;s attitude: &nbsp;stop reading his blog. &nbsp;See it&#8217;s nice and easy, now run along.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-375233">
				<div id="div-comment-375233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-375233">
			April 29, 2006 at 7:46 pm</a>		</div>

		<p>Sure, the new shell won&#8217;t see environment changes made by your .bat file. Seeing as you&#8217;re already manually running a bunch of .bat files, what&#8217;s so bad with manually starting cmd.exe first?<br />
<br />Alternatively, if the .bat files call each other automatically they&#8217;ll all be running under the same cmd.exe anyway.<br />
<br />If you really need to pass environment changes back to the parent then some sort of eval works e.g. eval <code>ssh-agent -s</code> or eval <code>tset -s</code></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-375313">
				<div id="div-comment-375313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Craig Matthews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-375313">
			April 30, 2006 at 10:24 am</a>		</div>

		<p>&lt;i&gt;Adam: In other words, you&#8217;re willing to accept that batch files from msh don&#8217;t quite work right. That&#8217;s a fine decision, though not everybody will agree with it. &lt;/i&gt;</p>
<p>Unless Microsoft is going to force people to use MSH and send out shock troops to delete cmd.exe, I don&#8217;t understand what the problem is. &nbsp;If I&#8217;m running a .CMD file, why would I even think I&#8217;m supposed to be able to execute that properly from MSH? &nbsp;Why wouldn&#8217;t I just run it via cmd.exe? &nbsp;</p>
<p>It &lt;i&gt;is&lt;/i&gt;, afterall, appropriate for me to use the command shell that my batch script needs &#8230; isn&#8217;t it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-375333">
				<div id="div-comment-375333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-375333">
			April 30, 2006 at 1:27 pm</a>		</div>

		<p>Neil: Sure, you can do that, but it means that if you have a set of batch files, one of which prepares an environment (&quot;setenv.cmd&quot;), and others which use it (&quot;co.cmd&quot;, &quot;buildit.cmd&quot;) &#8211; then you have to stay in cmd.exe once you&#8217;ve run the first one. You can&#8217;t use your alternate shell any more.</p>
<p>$ cmd.exe<br />
<br />C:&gt; setenv<br />
<br />Environment set for development.<br />
<br />C:&gt; co myfile.c<br />
<br />myfile.c checked out to you.<br />
<br />C:&gt; edit myfile.c<br />
<br />&#8230;<br />
<br />C:&gt; buildit<br />
<br />myfile.exe built successfully.<br />
<br />C:&gt; exit<br />
<br />$ (back to original shell)</p>
<p>Is this acceptable? Is it acceptable to have to use some &quot;eval&quot; magic to re-import the modified environment variables?</p>
<p>Craig Matthews: The problem is if you decide to want to use some alternate shell as your primary shell, and then you run some batch file (via cmd.exe) and it doesn&#8217;t work [see above]. Is this (1) a bug, or (2) a feature?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-375463">
				<div id="div-comment-375463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-375463">
			April 30, 2006 at 11:23 pm</a>		</div>

		<p>An idea, choose your preferred default behaviour, add switch to cmd.exe to turn it on or off.</p>
<p>Seems quite likely that any new shell language is going to be calling BAT files within the first few minutes of its release.</p>
<p>I gather some readers would be amazed at rather large amounts of BAT code that exists. Heck, I&#8217;m amazed at the amount of Cobol code that&#8217;s still running.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-375473">
				<div id="div-comment-375473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jachymko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-375473">
			April 30, 2006 at 11:58 pm</a>		</div>

		<p>I see no problem using both the old and the new thing inside each other. I deleted my old environment-preparing batch file today. Its last command used to be PowerShell -NoLogo -NoExit, so the environment was inherited by PS, which was in turn used to launch other legacy batches.</p>
<p>And BTW, I dont plan to move everything to PS. cmd.exe is still better for simple static configuration scripts without too much logic (lists of setx, reg import, setup.exe)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-375763">
				<div id="div-comment-375763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave W</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-375763">
			May 1, 2006 at 5:22 pm</a>		</div>

		<p>The solution here seems clear to me: each shell needs a command that will invoke a child interpreter giving it effective write-access to the parent&#8217;s environment. &nbsp;That way the parent is in control of whether its environment gets modified or not (by default, not, except for within cmd). &nbsp;This could be implemented using the wrapper techniques discussed above. &nbsp;So you could have something like:</p>
<p>my_shell % env_copy cmd setvars.bat</p>
<p># setvars gets to modify my_shell&#8217;s environment</p>
<p>my_shell % env_copy cmd cmd1.bat</p>
<p># cmd1.bat needs to pass an environment<br />
<br /># variable along to the next script.</p>
<p>my_shell % cmd cmd2.bat</p>
<p># any changes made by cmd2.bat don&#8217;t propagate<br />
<br /># back to here.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-376023">
				<div id="div-comment-376023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-376023">
			May 2, 2006 at 10:45 am</a>		</div>

		<p>I forgot to mention that co.bat changes environment variables (set FILES_CHECKED_OUT=1) that buildit.bat reads (if %FILES_CHECKED_OUT%==1 set BUILD_FLAGS=-DPRIVATE_BUILD). If you run co.bat from PowerShell, the modified FILES_CHECKED_OUT variable won&#8217;t be passed to buildit.bat, causing your build to be marked as &quot;built from current sources&quot; rather than &quot;build contains private changes&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-376053">
				<div id="div-comment-376053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.valhallalegends.com/skywing' rel='external nofollow' class='url'>Skywing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-376053">
			May 2, 2006 at 11:43 am</a>		</div>

		<p>Actually, razzle is Microsoft internal and not available on the DDK last time I checked. &nbsp;Such tools are not meant for us mere mortals&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-375993">
				<div id="div-comment-375993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-375993">
			May 2, 2006 at 9:07 am</a>		</div>

		<p>Raymond&gt; &quot;then you have to stay in cmd.exe once you&#8217;ve run the first one. You can&#8217;t use your alternate shell any more.&quot;</p>
<p>How does that follow?</p>
<p>If I am in cmd.exe and run setenv.bat, then it should set up the environment properly.</p>
<p>As already metioned, from here I should be able to run PowerShell shell scripts, and they should pick up the environment vars from cmd.exe, including the ones set by setenv.bat. Are we at least in agreement here?</p>
<p>More importantly, if I run an interactive PowerShell shell from that cmd.exe, then I&#8217;ll be in the new shell, with all the command-line goodness that the new shell has, and I&#8217;ll have inherited all the environment variables from the parent cmd.exe process, including the ones set by setenv.bat.</p>
<p>I could also run co.bat and buildit.bat &#8211; old batch files that have not been converted yet &#8211; from that PowerShell, as the cmd.exe subprocess will inherit its environment from that shell, which will include the setenv.bat vars that it inherited from *its* cmd.exe parent.</p>
<p>If I&#8217;ve missed something, please explain in small words. I still don&#8217;t see where the problem is that you&#8217;re describing.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-376033">
				<div id="div-comment-376033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.kryogenix.org/' rel='external nofollow' class='url'>Stuart Langridge</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-376033">
			May 2, 2006 at 11:27 am</a>		</div>

		<p>Just so I understand this, the problem is that having cmd.exe be the handler for .bat files will break because Monad (a new Windows shell?) will run cmd.exe as its own process, and that means it&#8217;ll get its own copy of the environment which then gets thrown away (with any modifications being lost) when the process ends? And this didn&#8217;t happen before Monad because running a batch file from an existing cmd.exe would *not* start a new cmd.exe but instead run it in the current one?<br />
<br />If that&#8217;s the case, is it possible to give batch files special handling? Have monad.exe execute batch files itself, but the code in monad simply execs a new cmd.exe to run foo.bat, grabs its environment before it exits, and applies that environment to the running monad.exe (as Carlos suggested up the top in <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2006/04/27/585047.aspx#585084" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2006/04/27/585047.aspx#585084</a>).<br />
<br />Any other shell that wants to implement this special &quot;in-process running&quot; for batch files can then do the same thing. I don&#8217;t know, however, if it&#8217;s possible for process M (Monad) to exec a process C (cmd.exe) and then peek at its environment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-376233">
				<div id="div-comment-376233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-376233">
			May 2, 2006 at 4:27 pm</a>		</div>

		<p>Stuart: &nbsp;See Adam&#8217;s post here:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2006/04/27/585047.aspx#586484" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2006/04/27/585047.aspx#586484</a></p>
<p>for problems with that approach. &nbsp;(&quot;Imagine a parent that runs two child processes. The envrionment the parent ends up with will depend on which child finishes last.&quot;)</p>
<p>Yes, it might be possible to figure out the environment *changes*, and somehow apply both sets of changes from both sub-processes, but what do you do when you see a conflict? &nbsp;(E.g., all sub-processes change the same environment variable. &nbsp;Which new value do you use, the one from the process that exited last? &nbsp;Yikes.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-376293">
				<div id="div-comment-376293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-376293">
			May 2, 2006 at 6:16 pm</a>		</div>

		<p>&#8212; Quote &#8212; <br />Russ&gt; &#8220;There should be an easy way for environment variable changes to be propogated to parent processes&#8221; </p>
<p>And how is that supposed to work? </p>
<p>Process A spawns child process B. At process creation time, B gets a copy of A&#8217;s environment. Process A continues to run. Process A changes its current working directory and PATH environment variable because it needs to. Process B then changes its cwd and PATH, does a few things and exits. </p>
<p>At what point do you propose copying Bs changes back to A, and how do you expect to stop A breaking because of it? </p>
<p>Processes should *NOT* be able to modify data in each others address space. Period. Environment vars are data in a processes address space. If you disagree with this, please go read a book on OS design.&lt;/i&gt; <br />&#8212; End quote &#8212; </p>
<p>Obviously it doesn&#8217;t work in this case. &nbsp;Clearly, the copying must only happen in a small subset of cases where it would work. &nbsp;To this end, it should only happen where process A has specifically requested the behaviour. </p>
<p>&#8212; Quote &#8212; <br />Imagine a parent that runs two child processes. The envrionment the parent ends up with will depend on which child finishes last. Uurgh. <br />&#8212; End quote &#8212; </p>
<p>Clearly this is also a situation where the facility should not be used. &nbsp;It only really makes sense to use it if process A stops what it is doing after executing process B and waits for process B to complete, as would be the case in the current example of a shell executing a different shell to interpret a script file in a language it didn&#8217;t understand.</p>
<div class=post>[<i>Since you already presume that the two processes are already in cahoots, you can come up with whatever mechanism you like for the child process to signal the parent &#8220;Hey, here are some variables I want you to copy into your environment.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-376383">
				<div id="div-comment-376383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.kryogenix.org/' rel='external nofollow' class='url'>Stuart Langridge</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-376383">
			May 3, 2006 at 3:07 am</a>		</div>

		<p>Bryan,</p>
<p>Ah, I see the problem there. Would it not be easier to just not run .bat files in the background, but instead hang until they&#8217;re finished? Then you can&#8217;t run two at once. A switch added to monad&#8217;s &quot;call&quot; command that runs a .bat file in the background and returns immediately can then be used by people who don&#8217;t care about the environment issue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-376413">
				<div id="div-comment-376413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-376413">
			May 3, 2006 at 4:48 am</a>		</div>

		<p>Raymond:</p>
<p>OK. In that particular case, yes, you can&#8217;t use PowerShell.</p>
<p>You&#8217;ll just have to use cmd.exe. Oh no! How ever will you cope?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-376443">
				<div id="div-comment-376443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carlos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-376443">
			May 3, 2006 at 9:52 am</a>		</div>

		<p>@Adam and BryanK:</p>
<p>&quot;Imagine a parent that runs two child processes. The envrionment the parent ends up with will depend on which child finishes last.&quot;</p>
<p>This is a non-problem. &nbsp;At present, if you want to run two batch files in parallel you need to use two instances of cmd.exe and the environments aren&#8217;t shared.</p>
<p>Since we&#8217;re trying to support existing behaviour there&#8217;s no reason for a new shell to act differently. &nbsp;So when you launch a child batch file asynchronously you don&#8217;t use a wrapper and you don&#8217;t attempt to capture the resulting environment. &nbsp;And everything works just as you&#8217;d expect.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-376543">
				<div id="div-comment-376543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-376543">
			May 3, 2006 at 11:57 am</a>		</div>

		<p>Hmm&#8230; true, I suppose.</p>
<p>So basically you&#8217;d be importing the &quot;source&quot; builtin from Unix sh, except that the target would not have to be written in the same language as the source, because you have a way to communicate changes.</p>
<p>How far would this extend? &nbsp;Hopefully not to arbitrary EXEs that are supposed to run in a more-privileged child process (e.g. by calling LogonUser with a static password, and then whatever API starts the token impersonation)&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379643">
				<div id="div-comment-379643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http:/www.leeholmes.com/blog' rel='external nofollow' class='url'>Lee Holmes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060427-21/?p=31383#comment-379643">
			May 11, 2006 at 2:53 am</a>		</div>

		<p>Hmmm, sorry I missed this conversation &#8212; my RSS reader was busted for a while and I didn&#8217;t realize it.</p>
<p>I sense two messages here:<br />
<br /> &nbsp;&#8211; &lt;Technology X&gt; is not a silver bullet<br />
<br /> &nbsp;&#8211; Interop and backwards compatibility is hard. &nbsp;New technologies ultimately break this at some point.</p>
<p>I put some thoughts about the topic here: <a rel="nofollow" target="_new" href="http://www.leeholmes.com/blog/NothingSolvesEverythingPowerShellAndOtherTechnologies.aspx" rel="nofollow">http://www.leeholmes.com/blog/NothingSolvesEverythingPowerShellAndOtherTechnologies.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

