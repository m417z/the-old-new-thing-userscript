<html>
<head>
<title>Why did HeapFree fail with ERROR_POSSIBLE_DEADLOCK?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why did HeapFree fail with ERROR_POSSIBLE_DEADLOCK?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 6, 2012 / year-entry #9</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120106-00/?p=8663</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>17</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer reported that they were receiving some assertion failures because the Heap­Free function was failing with what they believed to be a valid heap block, and the Get­Last­Error function reported that the reason for failure was ERROR_POSSIBLE_DEADLOCK. What's going on? One of my colleagues asked the psychic question, "Is the process exiting?" "Why yes,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer reported that they were receiving some assertion failures because the <code>Heap&shy;Free</code> function was failing with what they believed to be a valid heap block, and the <code>Get&shy;Last&shy;Error</code> function reported that the reason for failure was <code>ERROR_<wbr>POSSIBLE_<wbr>DEADLOCK</wbr></wbr></code>. What's going on?</p>
<p> One of my colleagues asked the psychic question, "Is the process exiting?" </p>
<p> "Why yes, in fact it is. How did you know?" </p>
<p> Recall <a href="http://blogs.msdn.com/b/oldnewthing/archive/2007/05/03/2383346.aspx"> how processes exit</a>. One of the first things that happens is that all the other threads in the process are forcible terminated, which has as a consequence that any synchronization resources owned by those threads are now orphaned. And in this case, the synchronization resource in question was the heap. </p>
<p> When the function calls <code>Heap&shy;Free</code>, the heap code tries to take the <a href="http://msdn.microsoft.com/library/aa366702.aspx"> heap lock</a> but finds that it can't because the heap lock was owned by another thread. And that other thread no longer exists. (Perhaps it was terminated while it was in the middle of its own <code>Heap&shy;Free</code> operation.) The heap code detects this and instead of deadlocking on its own custom synchronization object, it fails with the error <code>ERROR_<wbr>POSSIBLE_<wbr>DEADLOCK</wbr></wbr></code>. </p>
<p> By the same logic, you can demonstrate that you cannot reliably allocate memory at process shutdown either. So now you can't allocate memory; you can't free memory. As we saw last time, when you are told that the process is exiting, <a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/01/05/10253268.aspx"> you should not do any cleanup at all</a>. The memory will get freed when the process address space is torn down. No need to free it manually; that's just a waste of time. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-957593">
				<div id="div-comment-957593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120106-00/?p=8663#comment-957593">
			January 6, 2012 at 8:09 am</a>		</div>

		<p>Sure, you can allocate memory. VirtualAlloc and friends work just fine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-957623">
				<div id="div-comment-957623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">avakar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120106-00/?p=8663#comment-957623">
			January 6, 2012 at 8:17 am</a>		</div>

		<p>What you actually need to ensure is that you join all threads before you start exiting. There are other locks that may easily become abandoned (notably the loader lock) with catastrophic results.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-957633">
				<div id="div-comment-957633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120106-00/?p=8663#comment-957633">
			January 6, 2012 at 8:30 am</a>		</div>

		<p>@Joshua</p>
<p>VirtualAlloc still needs unfragmented virtual address space to work. If the process is terminating under low memory conditions then you are going to have problems even with VirtualAlloc. That means even VirtualAlloc isn&#39;t able to reliably allocate memory, so you still can&#39;t allocate during process termination.</p>
<p>Of course, whipping out VirtualAlloc feels a lot like using napalm to kill an ant. I would also question whether someone allocating memory in DllMain during DLL_PROCESS_DETACH is doing the correct thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-957683">
				<div id="div-comment-957683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leonard Crestez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120106-00/?p=8663#comment-957683">
			January 6, 2012 at 9:18 am</a>		</div>

		<p>The correct way to handle errors from free functions is to just ignore them, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-957703">
				<div id="div-comment-957703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leo Davidson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120106-00/?p=8663#comment-957703">
			January 6, 2012 at 9:38 am</a>		</div>

		<p>Thinking more about this and yesterday&#39;s post, I have to wonder why anything is running any code during process exit.</p>
<p>Yesterday I was thinking in terms of a process that was about to exit, cleaning things up before actually exiting, but we&#39;re obviously talking about processes which have crossed that line. (As we were yesterday, too.)</p>
<p>The fact that any code is being run at all once that line has been crossed seems like a design flaw to me. (Outside of very special cases.)</p>
<p>The process should be cleaning up anything that needs to be cleaned up (or that it is inconvenient, and not worth the effort, to prevent being cleaned up; e.g. destructors) before it exits, not after.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-957713">
				<div id="div-comment-957713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clinton Pierce</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120106-00/?p=8663#comment-957713">
			January 6, 2012 at 9:42 am</a>		</div>

		<p>After I read the previous post on the topic I went home and had a real-life experience that made me flash back&#8230;</p>
<p>I was replacing a cat litter box that had cracked with a new one. &nbsp;I had prepared things to empty the &quot;used&quot; litter from the old box into the trash when I realized&#8230; &quot;the process is exiting, there&#39;s no need to free the memory&quot; &#8230; and threw away the entire bin: litter, &quot;unpleasant stuff&quot;, and all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-957733">
				<div id="div-comment-957733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120106-00/?p=8663#comment-957733">
			January 6, 2012 at 9:59 am</a>		</div>

		<p>It seems the design (if any!) for process termination is a little ad-hoc to me. Was it always like that or did it just happen over the years?</p>
<div class="post">[<i>See <a href="http://blogs.msdn.com/b/oldnewthing/archive/2007/05/02/2365433.aspx" rel="nofollow">the classical model on how processes exit</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-957763">
				<div id="div-comment-957763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Grier [MSFT]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120106-00/?p=8663#comment-957763">
			January 6, 2012 at 10:46 am</a>		</div>

		<p>@NB: I think that you can pretty easily attribute the whole thing to simplistic views of the world (as Raymond points out by referencing the older post). &nbsp;Another good example of this sort of thing which you can&#39;t really call ad-hoc is the C++ static object construction/destruction problem. &nbsp;It is well defined for a source unit but not even defined across source units.</p>
<p>@Leo Davidson: The problem is at what granularity do you support this option? &nbsp;For individual DLLs, they can already do the right thing and just return immediately in this case. &nbsp;For executables, it&#39;s really not OK for them to set policy for every component that is in their address space (welcome to the world of in-process components). &nbsp;The classic case which stymied my efforts a few years ago to do exactly what you describe is the C runtime library. &nbsp;Nobody expects that helloworld.c may not actually write its output.</p>
<p>Executables which want to take control of this can always call TerminateProcess() instead of ExitProcess() and the whole thing is over and done with.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-957813">
				<div id="div-comment-957813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120106-00/?p=8663#comment-957813">
			January 6, 2012 at 5:47 pm</a>		</div>

		<p>Actually, I think that while memory resources will be freed by system automatically, hardware resources will not because the system has no way to know what to do with all kinds of non-standard (read: weird) hardwares.</p>
<p>And then there&#39;s a question: While we should not free memory at terminations, we still need to free locks, especially if shared across other processes, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-957853">
				<div id="div-comment-957853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120106-00/?p=8663#comment-957853">
			January 7, 2012 at 2:02 am</a>		</div>

		<p>@cheongOO: If the driver is coded properly, it doesn&#39;t matter.</p>
<p>You see, when a process terminates, after the kernel reclaims the memory, it closes all the handles, so the driver&#39;s close functions are invoked. As long as the close functions release the locks (which are held by the kernel, so the locks stay shut).</p>
<p>Closing handles also closes kernel managed application locks like semaphores and such.</p>
<p>About the only thing that doesn&#39;t happen are flushing of application managed file buffers (kernel buffers are flushed when the handle is closed), and telling other processes that are interacting via IPC that you&#39;re closing up shop, e.g., if you have shared memory and use events to signal when the shared memory changes, then the other processes will wait forever until someone else can set that event. Of course, if you&#39;re using kernel-managed IPC, then some may provide such notification ( e.g., TCP/IP sockets are closed by the kernel).</p>
<p>I had this problem because a driver I wrote required per-process data structures, and I needed to free those data structures when the process quit, either by crashing or cleanly. Otherwise the memory would end up leaked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-957923">
				<div id="div-comment-957923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120106-00/?p=8663#comment-957923">
			January 7, 2012 at 7:35 pm</a>		</div>

		<p>It&#39;s very naive to think that a program doesn&#39;t have to allocate memory at shutdown. Meaning, it&#39;s easy to say, but it does happen alot, and when you least expect it. Try to write an app with 1M SLOC and tell me all corner cases of the shutdown process is simple to define. It&#39;s not gonna happen.</p>
<p>There&#39;s lots of different kinds of resources that you want to gracefully dispose of. Memory allocations is the obvious one, with those the OS has a theoretical chance of disposing. Other things I can think of right away is RPC, SOAP. And all frameworks that is layered on top of that. With those it&#39;s usually nearly impossible to not allocate memory, because they are usually designed to do that when destructing/disposing remote objects.</p>
<div class="post">[<i>If you&#39;re doing RPC or sending an HTTP request in your <code>DLL_PROCESS_DETACH</code> handler, you&#39;ve already screwed up badly. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-957963">
				<div id="div-comment-957963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120106-00/?p=8663#comment-957963">
			January 8, 2012 at 6:14 pm</a>		</div>

		<p>[If you&#39;re doing RPC or sending an HTTP request in your DLL_PROCESS_DETACH handler, you&#39;ve already screwed up badly. -Raymond]</p>
<p>I can imagine a situation where this can be classified under flushing buffers. Anyway, if I had such an application I&#39;d be sure for all of the paths in question that they follow the classical model but somebody else might not have been so fortunate to be in a place to do that, e.g. web browser plugin.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-957983">
				<div id="div-comment-957983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120106-00/?p=8663#comment-957983">
			January 8, 2012 at 6:46 pm</a>		</div>

		<p>@640k: A networking application should handle case where the network is disconnected unexpectedly. So for RPC or SOAP requests, you application should be able to die right away without much problem other than loss of work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-957973">
				<div id="div-comment-957973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120106-00/?p=8663#comment-957973">
			January 8, 2012 at 6:16 pm</a>		</div>

		<p>@640k: What do you think private heap is *for*?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-958473">
				<div id="div-comment-958473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120106-00/?p=8663#comment-958473">
			January 10, 2012 at 2:43 am</a>		</div>

		<p>@Joshua and other with &quot;What do you think private heap is *for*?&quot; and the like:</p>
<p>Most people are using frameworks for 99.99% of the code. How to you redesign 10,000 or more predefined .NET or Delphi or C++ classes with complicated relationships between them, to meet your point of view? In the managed case (.NET and Java) you still have resources to manage, only memory is managed automatically, but all the other are still managed by destructor-like constructs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-958693">
				<div id="div-comment-958693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120106-00/?p=8663#comment-958693">
			January 10, 2012 at 11:11 am</a>		</div>

		<p>@Hm: You know full well you cannot call managed code from DllMain. As for C++, you do know you can redefine global operator new, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-958783">
				<div id="div-comment-958783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120106-00/?p=8663#comment-958783">
			January 11, 2012 at 3:09 am</a>		</div>

		<blockquote><p>
  &gt;As for C++, you do know you can redefine global operator new, right?
</p></blockquote>
<p>How do you override the global new operator when the foreign software is not compiled with the compiler product you are using?</p>
<p>How do you do that for COM components or data providers you have to use, or for the Delphi VCL und runtime when your program is not written in Delphi, how do you to that for XML parsers, SOAP classes and so on you need to use but come as external DLLs with some C-style API.</p>
<p>This utility classes or modules may inturn use large third-party DLLs to do the job (database clients!), may be written in pure C, may be linked against some runtime you do not use yourself.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

