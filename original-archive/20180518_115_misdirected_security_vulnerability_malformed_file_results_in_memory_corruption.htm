<html>
<head>
<title>Misdirected security vulnerability: Malformed file results in memory corruption</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Misdirected security vulnerability: Malformed file results in memory corruption</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 18, 2018 / year-entry #115</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180518-00/?p=98785</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>17</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Who did the corrupting?</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A security vulnerability report arrived that went something
like this:
</p>
<blockquote CLASS="q">
<p>
<b>Subject</b>:
An Exploitable Vunerability in dwrite.dll
(stack hash 0x6b6f6f4c.0x4654d7441)</p>
<p>
The file <code>dwrite.dll</code> allows an attacker to execute
arbitrary code or trigger a denial of service by a
crafted corrupted PNG file.
This vulnerability can be reproduced by using
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20061013-05/?p=29393">
LitWare</a>
Publisher 2.0,
clicking <i>Insert Image</i> and then selecting the attached PNG file.
Debugger output follows:
</p>
<pre>
ModLoad: 00060000 0009f000   litware.exe
ModLoad: 77df0000 77f47000   ntdll.dll
ModLoad: 76dd0000 76ea0000   C:\WINDOWS\SysWOW64\KERNEL32.DLL
...
ModLoad: 71e40000 71e59000   C:\Windows\SysWOW64\dwrite.dll

(1788.17ec): Access violation - code c0000005 (first chance)
eax=00000000 ebx=0039d82c ecx=0000000a edx=00000000 esi=006c6608 edi=36363636
eip=767b997e esp=003afb44 ebp=003afb54 iopl=0 nv up ei pl zr na pe nc
cs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b efl=00010246
msvcrt!_VEC_memzero+0x6a:
767b997e f3aa rep stos byte ptr es:[edi]

0:004&gt; k
ChildEBP RetAddr
003afb54 74db8b92 msvcrt!_VEC_memzero+0x6a
003afb8c 68f41cbf COMCTL32!Progress_Paint+0x4c
003afba8 68ff6fbb COMCTL32!Progress_UpdatePosition+0x6b
003afbbc 690c3dea COMCTL32!Progress_Update+0x46
003afc48 756377d8 COMCTL32!Progress_WndProc+0x14bfdc
003afc74 756378cb USER32!InternalCallWinProc+0x23
003afcf0 7563f139 USER32!UserCallWinProcCheckWow+0x100
003afd58 75648fce USER32!SendMessageWorker+0x656
003afd80 0006e7db USER32!SendMessageA+0x8b
003afdbc 00080688 litware+0xe7db
003afde0 00092061 litware+0x20688
003affa8 0007ff75 litware+0x32061
003affc4 0008fe12 litware+0x1ff75
003b00ec 00074066 litware+0x2fe12
003b1760 756377d8 litware+0x14066
003b2d40 756378cb USER32!InternalCallWinProc+0x23
003b2d6c 7563f139 USER32!UserCallWinProcCheckWow+0x100
003b2de8 75648fce USER32!SendMessageWorker+0x656
003b2e50 00e949db USER32!SendMessageA+0x8b
003b2e78 00e9546f litware+0x1849db
003b2ec8 0108a800 litware+0x18546f
003b307c 77a7850d litware+0x37a800
003b30c8 77e4bf39 KERNEL32!BaseThreadInitThunk+0xe
003b30d4 77e4bf0c ntdll!__RtlUserThreadStart+0x72
003b3118 00000000 ntdll!_RtlUserThreadStart+0x1b

0:004&gt; !exploitable

Exploitability Classification: EXPLOITABLE
Recommended Bug Title: Exploitable - User Mode Write AV
    starting at msvcrt!_VEC_memzero+0x000000000000006a
    (stack hash 0x6b6f6f4c.0x4654d7441)

User mode write access violations that are not near NULL are exploitable.
</pre>
</blockquote>
<p>
Okay, let's look at what we were given.
We have a stack trace, where the code is trying to zero out
a block of memory,
but the address of that block of memory is <code>0x36363636</code>,
which is invalid and awfully suspicious.
This was classified by
<a HREF="https://blogs.technet.microsoft.com/srd/2009/04/08/the-history-of-the-exploitable-crash-analyzer/">
the <code>!exploitable</code> debugger extension</a>
as exploitable because the bad address is used control a write.
</p>
<p>
Great, now let's look at the analysis by the submitter.
</p>
<p>
The submitter says that the vulnerability is in
<code>dwrite.dll</code>.
It's not clear from the stack trace why <code>dwrite.dll</code>
is getting the blame.
After all, there is no <code>dwrite</code> code anywhere on the stack.
</p>
<p>
The only appearance of <code>dwrite</code> in the debugger output
is the fact that <code>dwrite.dll</code> was the DLL most recently
loaded by the process.
I guess the submitter decided that this was enough to pin the blame
on <code>dwrite.dll</code>.
"The most recent person to enter the room is responsible for everything bad
that happens."
</p>
<p>
(Note that they quite pointedly took the bug title that the
<code>!exploitable</code> debugger extension recommended
and changed the name of the DLL, while keeping the rest the same,
including the stack hash!)
</p>
<p>
What more likely happened is that loading the malformed PNG file
caused LitWare to corrupt some memory that <code>Progress_Paint</code>
was using,
and then when LitWare finally got around to updating the progress
control, the
<code>Progress_Paint</code> function crashed because its pointer
to some internal data structure got corrupted.
</p>
<p>
This is a case of somebody knowing just enough to be dangerous.
They found the <code>!exploitable</code> debugger extension,
but they didn't understand how to use it.
</p>
<p>
Yes, they found a vulnerability.
But they didn't understand how to assign the blame,
so they blamed Microsoft!
</p>
<p>
This issue needs to go to the publishers of LitWare.
Their program is the one that is corrupting memory in response
to the malformed PNG file.
</p>
<p>
<b>Bonus chatter</b>:
This conclusion took some time to verify,
because it's possible that LitWare Publisher uses
a component provided by Microsoft
(such as the
<a HREF="https://msdn.microsoft.com/en-us/library/windows/desktop/ee719654(v=vs.85).aspx">
Windows Imaging Component</a>)
to decode PNG files,
in which case the vulnerability could be in that component
rather than in LitWare itself.
But we were able to confirm that the memory corruption was coming
from LitWare's own custom PNG decoder.
</p>
<p>
This last step is important, because if you had simply redirected
the report without investigating it,
and the problem really was in, say,
the Windows Imaging Component, then 
you are in the unenviable position of having been informed of
a security vulnerability and blown it off.
And then when the vulnerability makes the front page of the news,
everybody's going to say,
"What a bunch of idiots over there at Microsoft.
They received the vulnerability report months ago and rejected
it as not their bug!"
</p>
<p>
<b>Bonus chatter</b>:
Turns out that the finder was using an old version of LitWare.
The problem doesn't exist in the latest version of LitWare,
so presumbly LitWare already found and fixed the problem on their side.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1340815">
				<div id="div-comment-1340815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180518-00/?p=98785#comment-1340815">
			May 18, 2018 at 8:13 am</a>		</div>

		<p>I understand, that MS employees handling security issues have difficult work. However they should treat each message more politely. I reported an issue, where simple program run under standard account will crash Windows Biometric Service causing DOS (users cannot login using biometry until reboot). I attached source code of the program and described what is happening. The issue was immediately closed. I understand, that this was not a typical security problem, however this was a bug for sure.<br />
Now I have much less motivation to report any problem to MS.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1340845">
				<div id="div-comment-1340845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">shawn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180518-00/?p=98785#comment-1340845">
			May 18, 2018 at 9:32 am</a>		</div>

		<p>If it&#8217;s a non-security bug, I believe the correct place to document it is the feedback app. Then it&#8217;s triaged according to how many people have the issue.  Did 1000 people each encounter this bug once?  Did one person encounter the bug 1000 times?  Was it some kind of mix between the two? How severe is it? Does it lead to data loss or security issue, or is it just an annoyance?  Depending on the answers to these and hundreds of other questions, the issue will be assigned a priority and assigned to someone to work on coding a solution, and it won&#8217;t &#8220;just get closed&#8221;.  I&#8217;d start there.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1341025">
				<div id="div-comment-1341025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180518-00/?p=98785#comment-1341025">
			May 19, 2018 at 1:54 pm</a>		</div>

		<p>1. &#8220;Denial of service&#8221; is a vulnerability.<br />
2. which feedback app?<br />
There is no such app on Windows Embedded POSReady 2009, Windows Server 2008 [R2] and Windows 7, and there was none on Windows XP and Windows Vista.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1340875">
				<div id="div-comment-1340875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://english.rejbrand.se' rel='external nofollow' class='url'>Andreas Rejbrand</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180518-00/?p=98785#comment-1340875">
			May 18, 2018 at 10:14 am</a>		</div>

		<p>But to be fair, I think we can all imagine the amount of feedback Microsoft is receiving each day.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1340895">
				<div id="div-comment-1340895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">The_Assimilator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180518-00/?p=98785#comment-1340895">
			May 18, 2018 at 10:52 am</a>		</div>

		<p>Martin, that&#8217;s unfortunate, but posts like this one hopefully help you to understand how and why Microsoft support gets a little jaded.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1340955">
				<div id="div-comment-1340955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180518-00/?p=98785#comment-1340955">
			May 18, 2018 at 4:54 pm</a>		</div>

		<p>I would guess that Microsoft do not consider local denial of service attacks to count as security vulnerabilities, presumably on the grounds that a local user can inevitably DoS the system using much simpler techniques, e.g., a fork bomb.</p>
<p> &#8230; and I would further guess that the security team have been instructed in no uncertain terms not to do anything about bug reports that don&#8217;t represent security vulnerabilities, because otherwise they&#8217;d be quickly overwhelmed by them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-2" id="comment-1341015">
				<div id="div-comment-1341015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180518-00/?p=98785#comment-1341015">
			May 19, 2018 at 3:05 am</a>		</div>

		<p>Remember, while he showed that there was a bug in the application, he didn&#8217;t successfully show where it was. The dwrite.dll doesn&#8217;t actually decode png files, all it does is read fonts and draw them either to a Direct2D surface or a GDI HDC.<br />
Even then, it is hard to pin it down to a particular component, since WIC does actually decode png files, but unless there is an indication of WIC being used (like windowscodecs.dll being loaded) then there is just as much of a chance that libpng or a hand written png decoder was used, and do you expect Microsoft to fix bugs in libraries that they don&#8217;t own?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1340835">
				<div id="div-comment-1340835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180518-00/?p=98785#comment-1340835">
			May 18, 2018 at 9:11 am</a>		</div>

		<p>&#8220;User mode write access violations that are not near NULL are exploitable.&#8221; </p>
<p>What is &#8220;&#8230; not near NULL&#8221;?  How can something be near NULL?  If it&#8217;s very tiny perhaps?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1340965">
				<div id="div-comment-1340965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180518-00/?p=98785#comment-1340965">
			May 18, 2018 at 6:03 pm</a>		</div>

		<p>0x00000008 is just a DoS not an exploitable crash.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1340975">
				<div id="div-comment-1340975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M Hotchin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180518-00/?p=98785#comment-1340975">
			May 18, 2018 at 6:43 pm</a>		</div>

		<p>Think structure offsets, etc.  If your structure pointer is NULL, and you access anything other than the first element, then you will have pointer values &#8216;near&#8217; null.  Windows / x64 use all bits zero as the NULL pointer, so these would have values like &#8216;memory at address 14&#8217;.</p>
<p>I think 64K is mapped as inaccessible for this reason.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1341145">
				<div id="div-comment-1341145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180518-00/?p=98785#comment-1341145">
			May 21, 2018 at 7:46 am</a>		</div>

		<p>Thanks for the info.  &#8220;Not near address zero&#8221; might be more understandable.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1340885">
				<div id="div-comment-1340885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://geelaw.blog/' rel='external nofollow' class='url'>Gee Law</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180518-00/?p=98785#comment-1340885">
			May 18, 2018 at 10:40 am</a>		</div>

		<p>It can be brain twisting when reading stories anonymised by replacing a company with a fictional Microsoft company name, because, after all, Litware <em>is</em> Microsoft.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1340905">
				<div id="div-comment-1340905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Max</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180518-00/?p=98785#comment-1340905">
			May 18, 2018 at 12:59 pm</a>		</div>

		<p>My experience with dealing with the bug-reporting sides of various teams has been similarly bad, and seeing the same bug being improperly closed every six months or so isn&#8217;t much fun. But that&#8217;s not Raymond&#8217;s fault &#8211; that&#8217;s something that goes up the management chain.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1340915">
				<div id="div-comment-1340915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180518-00/?p=98785#comment-1340915">
			May 18, 2018 at 1:47 pm</a>		</div>

		<p>Well to be fair, sometimes it took publishing the vulnerabilities to get MS to respond to them. At least the policy is well and thoroughly fixed even though the practice isn&#8217;t quite. I suspect that catching on that a kernel privilege exploit that&#8217;s only reachable by corrupting an NTFS filesystem first is a real security bug would take a long time.</p>
<p>I wonder how long before KPTI does wonders for the MPAA.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1340945">
				<div id="div-comment-1340945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180518-00/?p=98785#comment-1340945">
			May 18, 2018 at 2:32 pm</a>		</div>

		<p>Thank you for sharing these fascinating behind-the-scenes stories.  Are you able to share how many man-hours this sort of bug typically ends up wasting?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1341005">
				<div id="div-comment-1341005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Koopa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180518-00/?p=98785#comment-1341005">
			May 18, 2018 at 11:36 pm</a>		</div>

		<p>I almost messed up thinking you listed a real company name here, mistaking LitWare for Leadtools.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1341065">
				<div id="div-comment-1341065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">quiret</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180518-00/?p=98785#comment-1341065">
			May 20, 2018 at 3:26 am</a>		</div>

		<p>Thank you for professionally handling all kinds of reports, Raymond. Your blog is always a good read to me :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

