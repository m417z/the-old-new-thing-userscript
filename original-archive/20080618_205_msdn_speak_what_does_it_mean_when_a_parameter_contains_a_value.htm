<html>
<head>
<title>MSDN-speak: What does it mean when a parameter contains a value?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>MSDN-speak: What does it mean when a parameter contains a value?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 18, 2008 / year-entry #206</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>32</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">I've seen some confusion over this, heck I've been confused by this, so I figured I'd share what I've learned. In MSDN, you may see wording like this: pdwResult [out] When the function returns, contains a pointer to a DWORD value that contains the result of the computation. What they're trying to say is that...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>I've seen some confusion over this, heck <i>I've</i> been confused by this, so I figured I'd share what I've learned.</p>
<p> In MSDN, you may see wording like this: </p>
<blockquote class="m"><p style="text-indent: -5em; margin-left: 5em"> <i>pdwResult</i> [out] When the function returns, contains a pointer to a <code>DWORD</code> value that contains the result of the computation. </p>
</blockquote>
<p> What they're trying to say is that the <code>pdwResult</code> <i>is</i> a pointer to a <code>DWORD</code> that <i>receives</i> the result of the computation. Personally, I take issue with both uses of the word "contains", but they tell me that that is their standard for describing [out] parameters, so you'd better get used to it. </p>
<p> When they say that the parameter contains a value, they mean that the you passed that value as the parameter. I prefer to think of the parameter <i>being</i> the value; the parameter is just a convenient name for the value that the caller passed. The MSDN approach is to think of the parameter as its own variable which therefore contains a value, as variables do. In this specific case, they are saying that <code>pdwResult</code> "contains a pointer" to mean that the parameter is itself a pointer that you pass in. </p>
<p> Now on to the second half. When they say that the pointed-to value contains the result, they mean that the function itself writes to the pointed-to value. The opening phrase "when the function returns" is intended to indicate this, but I have two issues with that approach. </p>
<p> First, it seems to modify the wrong verb. Since it's at the beginning of the sentence, the temporal clause appears to modify the first "contains" and not the second. "When the function returns, the parameter contains a pointer...", suggesting that perhaps when you initially called the function, the parameter <i>didn't</i> contain the pointer and that the statement becomes true only when the function returns. </p>
<p> Second, it doesn't emphasize that the function itself sets the value. You can read the sentence passively, as if to say, "Well, when the function returns, there's stuff there, who knows how it got there, maybe it was there all along, maybe you were expected to put it there first, sometimes things just happen to be that way, you know?" Sort of like, "When I get home, the lights are on." Maybe you turned on the lights remotely from work before you left for home. Maybe they are on a timer so they turn on at the same time every day. Maybe they were on all day. Heck, you're not even ruling out the possibility that the lights have psychic powers and turn themselves on as a way of welcoming you home. </p>
<p> Anyway, now you know what that sentence means when you read it in MSDN. It's not how I would've written it, but I'm not the chief editor of MSDN. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (32)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-639443">
				<div id="div-comment-639443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639443">
			June 18, 2008 at 10:33 am</a>		</div>

		<p>It&#8217;s hard to come up with a good standard for documenting APIs; sometimes certain APIs just need their own &quot;natural language&quot; description that doesn&#8217;t fit into the standard. &nbsp;I prefer something like this:</p>
<p>pdwResult [out] The function sets the value pointed to by pdwResult to the result of the computation.</p>
<p>or maybe even:</p>
<p>pdwResult [out] The result of the computation is stored in the location pointed to by pdwResult.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-639473">
				<div id="div-comment-639473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve Nuchia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639473">
			June 18, 2008 at 11:03 am</a>		</div>

		<p>Maybe the MSDN-speak version of MSDN content should be regarded as the source form and English should be one of the many natural languages into which it gets translated. &nbsp;Then somebody who has a passing familiarity with at least one of the dialects of English used outside of Redmond might have a whack at it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-639483">
				<div id="div-comment-639483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639483">
			June 18, 2008 at 11:15 am</a>		</div>

		<p>Even a simple tweak to the word order makes the phrase much more understandable:</p>
<p>Contains a pointer to a DWORD value that, when the function returns, contains the result of the computation.</p>
<p>Note that this is virtually true in the case of a system call as even your user-mode debugger doesn&#8217;t get to see the exact time at which the value gets to contain the result!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-639493">
				<div id="div-comment-639493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">daves561</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639493">
			June 18, 2008 at 12:59 pm</a>		</div>

		<p>The entire &#8220;when the function returns&#8221; clause should be omitted, because it is implicit in the [out] specification. If you don&#8217;t know what [out] means, you need to back up and read some introductory literature. Readers who are familiar with the construct shouldn&#8217;t be punished every time MSDN needs to refer to an [out].</p>
<p>That being the case, I vote for:</p>
<p>pdwResult [out]: A pointer to a DWORD value that is the result of the computation.</p>
<div class=post>[<i>And then you get people who read that and say, &#8220;But that&#8217;s a Catch-22! How can I pass a pointer to the result of the computation <u>into</u> the function? I don&#8217;t have the result of the computation. If I did, I wouldn&#8217;t need to call the function!&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-639503">
				<div id="div-comment-639503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639503">
			June 18, 2008 at 12:59 pm</a>		</div>

		<p>We have a similar problem here where our new documentation writer is trying to &quot;standardize&quot; our documentation, thereby turning it in to an unreadable mess.</p>
<p>but hey, at least it&#8217;s consistently an unreadable mess now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-639523">
				<div id="div-comment-639523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Illuminator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639523">
			June 18, 2008 at 1:20 pm</a>		</div>

		<p>I say:</p>
<p>pdwResult [out]: A pointer to a DWORD that will receive the result of the computation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-639533">
				<div id="div-comment-639533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639533">
			June 18, 2008 at 1:27 pm</a>		</div>

		<p>daves561 wrote:</p>
<p>&quot;</p>
<p>pdwResult [out]: A pointer to a DWORD value that is the result of the computation.</p>
<p>&quot;</p>
<p>If you do know what [out] is, you probably know what a C prototype is, and so, &quot;A pointer to a DWORD value&quot; is useless.</p>
<p>So, the sentence becomes:</p>
<p>pdwResult [out]: Points to the result of the computation</p>
<p>The name of the variable says it all. This can be condensed to:</p>
<p>pdwResult [out]: Self-describing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-639543">
				<div id="div-comment-639543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://12noon.com' rel='external nofollow' class='url'>Stefan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639543">
			June 18, 2008 at 1:35 pm</a>		</div>

		<p>I sympathize with the writing team&#8217;s job. It&#8217;s very hard to accurately describe thousands of functions, structures, classes, etc. Unfortunately, all developers suffer because MSDN&#8217;s text is sloppy (and downright inaccurate) in many, many places. If the MSDN doc had more example code, such awkward text wouldn&#8217;t be as much of an issue. (Although you&#8217;d still have inaccurate descriptions and code.) It&#8217;d be nice if there were test code used by the developers that could also be posted to the doc.</p>
<p>I like the Community Content feature that lets people correct and expand the doc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-639553">
				<div id="div-comment-639553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">daves561</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639553">
			June 18, 2008 at 2:03 pm</a>		</div>

		<p>SuperKoko:</p>
<p>&quot;The name of the variable says it all. This can be condensed to:</p>
<p>pdwResult [out]: Self-describing.&quot;</p>
<p>Yup. Works for me. :^) (tho you could argue that pdw is a convention thusly deserving a clarification, whereas [out] is a defined axiom of the syntax)</p>
<p>Must be something in the coffee this morning; I find myself curmudgeonly defending the terseness. This is technical documentation for an engineering discipline. I don&#8217;t look at, e.g., fancy VLSI diagrams and identify every component immediately, but presumably an electrical engineer would. And that&#8217;s okay. This just seems like excessive hand-holding. I&#8217;m not endorsing arcaneness as an end in and of itself. I&#8217;m just trying to spare programmers&#8217; brains from sifting through a zillion function header comments that start with &quot;This purpose of this function is to&#8230;&quot;</p>
<p>Color me grumpy. I&#8217;ll lighten up tomorrow&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-639563">
				<div id="div-comment-639563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dodgson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639563">
			June 18, 2008 at 2:23 pm</a>		</div>

		<p>Name/Is/Called argument, continued. AKA, semantics are fun to play with.</p>
<p>If the following bit from &quot;Through the Looking Glass&quot; makes sense, then you&#8217;ve programmed in C</p>
<p>&quot;The name of the song is called &#8216;Haddocks&#8217; Eyes.&#8217;&quot;</p>
<p>&quot;Oh, that&#8217;s the name of the song, is it?&quot; Alice said trying to feel interested.</p>
<p>&quot;No, you don&#8217;t understand,&quot; the Knight said, looking a little vexed.</p>
<p>&quot;That&#8217;s what the name is called. The name really is &#8216;The Aged Aged Man.&#8217;&quot;</p>
<p>&quot;Then I ought to have said &#8216;That&#8217;s what the song is called&#8217;?&quot; Alice corrected herself.</p>
<p>&quot;No, you oughtn&#8217;t: that&#8217;s quite another thing! The song is called &#8216;Ways and Means&#8217;: but that&#8217;s only what it&#8217;s called, you know!&quot;</p>
<p>&quot;Well, what is the song, then?&quot; said Alice, who was by this time completely bewildered.</p>
<p>&quot;I was coming to that,&quot; the Knight said. &quot;The song really is &#8216;A-sitting On A Gate&#8217;: and the tune&#8217;s my own invention.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-639573">
				<div id="div-comment-639573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Greg D</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639573">
			June 18, 2008 at 2:37 pm</a>		</div>

		<p>Interestingly (and perhaps sadly), phrasing such as described in the article is largely responsible for my kneejerk fear of older MSDN docs. &nbsp;I applaud the effort that&#8217;s gone into the .Net docs as I personally find them to be vastly more readable and, correspondingly, more useful.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jamesnt odd alt thread-odd thread-alt depth-1" id="comment-639583">
				<div id="div-comment-639583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/JamesNT' rel='external nofollow' class='url'>JamesNT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639583">
			June 18, 2008 at 2:43 pm</a>		</div>

		<p>While we do have to deal with the occassionally poorly wording documentation, I don&#8217;t take exception to anything I&#8217;ve seen in MSDN or TechNet. &nbsp;I have certainly seen documentation far worse on many &quot;professional&quot; websites and MS&#8217;s very on competition.</p>
<p>JamesNT</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-639593">
				<div id="div-comment-639593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639593">
			June 18, 2008 at 2:45 pm</a>		</div>

		<p>FWIW, I like Neil&#8217;s phrasing. It has the advantage of (apparently) not needing a change to MSDN&#8217;s phrasing rules.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-639603">
				<div id="div-comment-639603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Poochner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639603">
			June 18, 2008 at 3:10 pm</a>		</div>

		<p>As for Looking Glass, it&#8217;s not surprising that he also wrote a couple of volumes on symbolic logic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-639613">
				<div id="div-comment-639613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639613">
			June 18, 2008 at 3:30 pm</a>		</div>

		<p>I&#8217;ve never been confused by this. &nbsp;I agree with MSDN&#8217;s approach, it describes thing quite clearly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mikewasson odd alt thread-odd thread-alt depth-1" id="comment-639623">
				<div id="div-comment-639623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MikeWasson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639623">
			June 18, 2008 at 3:30 pm</a>		</div>

		<p>In my docs, I use &quot;Receives [whatever]&quot;. I feel that &quot;Pointer to a DWORD&quot; is redundant, given the syntax block immediately preceding. Sometimes a parameter really is self-describing, but consider:</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms700182.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms700182.aspx</a></p>
<p>Would this be better with no parameter description? I pulled this example almost at random. Not to say that it&#8217;s a perfect ref page, but hopefully it&#8217;s better than NO ref page.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-639633">
				<div id="div-comment-639633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639633">
			June 18, 2008 at 3:32 pm</a>		</div>

		<p>Why deal with pointer semantics at all? You just write:</p>
<p>*pdwResult = (The result of the function);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-nathan_works odd alt thread-odd thread-alt depth-1" id="comment-639433">
				<div id="div-comment-639433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/nathan_works' rel='external nofollow' class='url'>nathan_works</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639433">
			June 18, 2008 at 10:23 am</a>		</div>

		<p>I wonder if the advent of COM makes it confusing with the IUnknown and casting it (void**)&amp;x. Versus here you just pass in &amp;x to get the result.</p>
<p>I&#8217;d also guess the API standardization of returning an HRESULT (or some other pass/fail/failed-this-way) return means you have to push other information to return into the parameter list. (I&#8217;m sure some obscure programming language folks will tell us that&#8217;s why $LANGUAGE is so much better, or SEH folks will say that&#8217;s why failures should be throw(), etc)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-639643">
				<div id="div-comment-639643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639643">
			June 18, 2008 at 5:34 pm</a>		</div>

		<p>I&#8217;m just glad that MSDN documentation is generally up to date and extensive. &nbsp;I don&#8217;t know how many APIs and libraries from various places have little or no documentation at all. &nbsp;And I guess once you get used to how things are generally worded, it gets to be second nature. &nbsp;Of course, a little experimentation is in order if you&#8217;re not sure how it works.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-639663">
				<div id="div-comment-639663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639663">
			June 18, 2008 at 6:14 pm</a>		</div>

		<p>It&#8217;s true, you&#8217;re totally right about that temporal clause, plus the word &#8216;contains&#8217;, completely confuses the meaning. &nbsp;In fact it seems to be wrong, but we understand it because we&#8217;re C programmers.</p>
<p>A pointer to a DWORD value that will contain the result of the computation when the function returns.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-639673">
				<div id="div-comment-639673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">R</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639673">
			June 18, 2008 at 6:41 pm</a>		</div>

		<p>Not sure how critical one should be&#8230; The order of words in a sentence can be different in non-English languages. I will speculate: perhaps the bad wording reveals that the original writer was not a native Englih speaker?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-639683">
				<div id="div-comment-639683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Weiguo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639683">
			June 18, 2008 at 7:18 pm</a>		</div>

		<p>certainly not everyone everywhere is expected to have perfect English, but when one&#8217;s job entails writing documentation in English, isn&#8217;t near-native fluency important?</p>
<p>as far as the documention itself goes, I do think it could be less confusing and much less awkward. &nbsp;I know what it means, but only because I can tell what it&#8217;s <em>trying</em> to say.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-639693">
				<div id="div-comment-639693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Donnelly (MSFT)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639693">
			June 18, 2008 at 7:26 pm</a>		</div>

		<p>I have been writing API docs at MSFT for more than a decade, and I can&#8217;t tell you how many times this issue of [out] parameters has been discussed and how many efforts have been made to standardize the wording. In fact, I recall Raymond raising this issue with me many years ago, back when we were both working on DirectInput.</p>
<p>Personally, I prefer that parameters be described as what they are when they are parameters, i.e. when they are passed. When an [out] parameter is passed, it is nothing more than the address of a variable that&#8217;s going to be initialized by the function, so I&#8217;ve always leaned towards something like &quot;The address of a variable that receives the foo.&quot; I don&#8217;t like &quot;A pointer to foo,&quot; since it isn&#8217;t any such thing until the function returns.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-639703">
				<div id="div-comment-639703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639703">
			June 18, 2008 at 7:59 pm</a>		</div>

		<p>If [out] was a tooltip or linked to the page of MSDN documentation conventions (I presume it exists, I tried briefly to find it, SNR) then that page could what an out parameter is, which means we could have a succinct description.</p>
<p>All up the MSDN documentation is excellent, although I wish it was more prescriptive. As JamesNT said, you need to see what else is out there to really appreciate it.</p>
<p>Raymond, I&#8217;m a little surprised you didn&#8217;t suggest your own wording.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-639723">
				<div id="div-comment-639723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bubbel urp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639723">
			June 19, 2008 at 3:31 am</a>		</div>

		<p>&quot;they mean that the you passed that value as the parameter.&quot;</p>
<p>Sorry to the be such a grammar nazi but&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-639743">
				<div id="div-comment-639743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639743">
			June 19, 2008 at 3:59 am</a>		</div>

		<p>The parameter contains a pointer containing the address to the value.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-639773">
				<div id="div-comment-639773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">yme</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639773">
			June 19, 2008 at 10:00 am</a>		</div>

		<p>C has no concept of [out] parameter. &nbsp;The effect of an [out] parameter of type T can be gotten in C by using a parameter of type pointer-to-T. &nbsp;It is a confusion of different levels of abstraction to consider the <em>pointer</em> as being an [out] parameter, but it is notated as such in the documentation, and perhaps this led to the confused English description of the parameter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-639753">
				<div id="div-comment-639753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639753">
			June 19, 2008 at 4:15 am</a>		</div>

		<p>Really confusing, that wording in combination with the prefix. I&#8217;d expect DWORD** ppdwResult. Otherwise, there is no way that the callee can make it contain a pointer after the callee returns.</p>
<p>As Raymond pointed out before, APIs are contract specifications. The caller has the obligation to set pdwResult to the address of a DWORD. This should be the first part of the documentation, so the caller knows that NULL (&quot;I don&#8217;t need the result&quot;) isn&#8217;t allowed. The second part of the documentation is for the callee: it must store the function result in *pdwResult. Trying to combine the two sides of the contract in one sentence doesn&#8217;t help.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-639813">
				<div id="div-comment-639813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NickS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639813">
			June 19, 2008 at 11:30 am</a>		</div>

		<p>I agree with JamesNT, the MSDN docs are generally pretty good compared to what else you can find out there. &nbsp;But here&#8217;s another example that had me puzzled for quite a while:</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms706241" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms706241</a>(VS.85).aspx</p>
<p>&quot;A pointer to a variable that, on successful return, points [to] an array of pointers to IDot11AdHocInterfaces.&quot; &nbsp;It took me quite a while to figure out that the function does not allocate the array for you, it is the caller&#8217;s responsibility.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-639893">
				<div id="div-comment-639893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-639893">
			June 19, 2008 at 1:40 pm</a>		</div>

		<p>I think &#8216;yme&#8217; has it best, above.</p>
<p>The pointer is the *mechanism* by which the output *value* can be returned.</p>
<p>Note that there&#8217;s a similar potential for mechanism/value confusion on input args as well. &nbsp;For example, to my way of thinking, strcpy&#8217;s input argument is a character string value; the mechanism used to pass that value is pointer-to-first-char.</p>
<p>(The &#8216;argument value&#8217; is the thing that strcpy operates on, namely the actual characters).</p>
<p>DEC&#8217;s VMS documentation used to use a horrible parameter notation that at least had the benefit of (when correctly written) distinguishing between value and mechanism.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-640163">
				<div id="div-comment-640163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pyrochild</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-640163">
			June 20, 2008 at 12:26 am</a>		</div>

		<p>You lost me at &quot;temporal clause.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-641193">
				<div id="div-comment-641193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://eleccham.valleyhold.org' rel='external nofollow' class='url'>Gordon Schumacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080618-00/?p=21913#comment-641193">
			June 24, 2008 at 6:14 am</a>		</div>

		<p>I&#8217;ve certainly gotten tripped up by the misordered &quot;when&quot; clause &#8211; it left me wondering what they meant until I found some example code. &nbsp;&quot;Oh, they just mean, &#8216;pass in a pointer&#8217;! &nbsp;How silly of me&#8230;&quot;</p>
<p>I have no issue at all with &quot;excessive&quot; specificity, but while that particular inversion isn&#8217;t grammatically incorrect, it&#8217;s certainly poor usage.</p>
<p>It remains a source of bafflement to me that there can be simultaneously the &quot;hacker love of screwing with language&quot; (<a rel="nofollow" target="_new" href="http://www.catb.org/jargon/html/introduction.html" rel="nofollow">http://www.catb.org/jargon/html/introduction.html</a>) and the stereotype of programmers not knowing how to write coherently (e.g., how much *really* poorly written documentation/comments/etc. have you seen&#8230;?) &nbsp;How do these states coexist?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

