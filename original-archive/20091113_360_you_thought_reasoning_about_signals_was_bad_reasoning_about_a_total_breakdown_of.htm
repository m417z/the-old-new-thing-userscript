<html>
<head>
<title>You thought reasoning about signals was bad, reasoning about a total breakdown of normal functioning is even worse</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>You thought reasoning about signals was bad, reasoning about a total breakdown of normal functioning is even worse</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 13, 2009 / year-entry #361</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20091113-00/?p=16043</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>17</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer came to the Windows team with a question, the sort of question which on its face seems somewhat strange, which is itself a sign that the question is merely the tip of a much more dangerous iceberg. Under what circumstances will the GetEnvironmentVariable function hang? This is kind of an open-ended question. I...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer came to the Windows team with a question, the sort of question which on its face seems somewhat strange, which is itself a sign that the question is merely the tip of a much more dangerous iceberg.</p>
<blockquote class="q"><p> Under what circumstances will the <code>GetEnvironmentVariable</code> function hang? </p>
</blockquote>
<p> This is kind of an open-ended question. I mean, for example, somebody might sneak in and call <code>SuspendThread</code> on your thread while <code>GetEnvironmentVariable</code> is running, which will look like a hang because the call never completes because the thread is frozen. </p>
<p> But the real question for the customer is, "What sort of problem are you seeing that is manifesting itself in an apparent hang in the <code>GetEnvironmentVariable</code> function?" </p>
<p> The customer was kind enough to elaborate. </p>
<blockquote class="q"><p> We have a global unhandled exception filter in our application so we can log all failures. After we finish logging, we call <code>ExitProcess</code>, but we find that the application never actually exits. If we connect a debugger to the stuck application, we see it hung in <code>GetEnvironmentVariable</code>. </p>
</blockquote>
<p> Your gut response should be, "Holy cow, I'm surprised you even got that far!" </p>
<p> This isn't one of those global unhandled exception filters that got installed because your program plays some really clever game with exceptions, No, this is an "Oh no, my program just crashed and I want to log it" exception handler. In other words, when this exception handler "handles" an exception, it's because your program has encountered some sort of serious internal programming error for which the program did not know how to recover. We saw earlier that <a href="http://blogs.msdn.com/oldnewthing/archive/2008/07/28/8781423.aspx"> you can't do much in a signal handler</a> because you might have interrupted a block of code which was in the middle of updating some data structures, leaving them momentarily inconsistent. But this exception filter is in an even worse state: Not only is there a good chance that the program is in the middle of updating something and left it in an inconsistent state, you are in fact <i>guaranteed</i> that the system is in a corrupted state. </p>
<p> Why is this a guarantee? Because if the system were in a consistent state, you wouldn't have crashed! </p>
<p> Programming is about establishing invariants, perturbing them, and then re-establishing them. It is a game of stepping-stone from one island of consistency to another. But the code that does the perturbing and the re-establishing assumes that it's starting from a consistent state to begin with. For example, a function that removes a node from a doubly-linked list manipulates some backward and forward link pointers (temporarily violating the linked list invariant), and then when it's finished, the linked list is back to a consistent state. But this code assumes that the linked list is not corrupted to begin with! </p>
<p> Let's look again at that call to <code>ExitProcess</code>. That's going to detach all the DLLs, calling each DLL's <code>DllMain</code> with the <code>DLL_PROCESS_DETACH</code> notification. But of course, those <code>DllMain</code> are going to assume that the data structures are intact and nothing is corrupted. On the other hand, you know for a fact that these prerequisites are not met&mdash;the program crashed precisely because something is corrupted. One DLL might walk a linked list&mdash;but you might have crashed because that linked list is corrupted. Another DLL might try to delete a critical section&mdash;but you might have crashed because the data structure containing the critical section is corrupted. </p>
<p> Heck, the crash might have been inside somebody's <code>DLL_PROCESS_DETACH</code> handler to begin with, for all you know. </p>
<p> "Yeah, but the documentation for <code>TerminateProcess</code> says that it does not clean up shared memory." </p>
<p> Well, it depends on what you mean by <i>clean up</i>. The reference count on the shared memory is properly decremented when the handle is automatically closed as part of process cleanup, and the shared memory will be properly freed once there are no more references to it. It is not cleaned up in the sense of "corruption is repaired"&mdash;but of course the operating system can't do that because it doesn't know what the semantics of your shared memory block are. </p>
<p> But this is hardly anything to get concerned about because <i>your program doesn't know how to un-corrupt the data either</i>. </p>
<p> "It also says that DLLs don't receive their <code>DLL_PROCESS_DETACH</code> notification." </p>
<p> As we saw before, this is a good thing in the case of a corrupted process,  because the code that runs in <code>DLL_PROCESS_DETACH</code> assumes that your process has not been corrupted in the first place. There's no point running it <i>when you know the process is corrupted</i>. You're just making a bad situation worse. </p>
<p> "It also says that I/O will be in an indeterminate state." </p>
<p> Well yeah, but that's no worse than what you have now, which is that your I/O is in an indeterminate state. You don't know what buffers your process hasn't flushed, but since your process is corrupted, you have no way of finding out anyway. </p>
<p> "Are you seriously recommending that I use <code>TerminateProcess</code> to exit the last chance exception handler?!?" </p>
<p> Your process is unrecoverably corrupted. (This is a fact, because if there were a way to recover from it, <i>you would have done it instead of crashing</i>.) What other options are there? </p>
<p> Quit while you're behind. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-786233">
				<div id="div-comment-786233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091113-00/?p=16043#comment-786233">
			November 13, 2009 at 8:20 am</a>		</div>

		<p>Sometimes it&#8217;s fascinating, how you say something should be obvious and to me it&#8217;s not. Then I read the explanation and say to myself &quot;this should be obvious&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk odd alt thread-odd thread-alt depth-1" id="comment-786253">
				<div id="div-comment-786253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091113-00/?p=16043#comment-786253">
			November 13, 2009 at 9:06 am</a>		</div>

		<p>@Pi: Yes, Raymond is good at that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-786263">
				<div id="div-comment-786263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091113-00/?p=16043#comment-786263">
			November 13, 2009 at 10:52 am</a>		</div>

		<p>TerminateProcess is bad, 0xbaaaaaad. Unless you&#8217;re already half DEAD BEEF.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-786273">
				<div id="div-comment-786273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091113-00/?p=16043#comment-786273">
			November 13, 2009 at 11:14 am</a>		</div>

		<p>So did anybody figure out why GetEnvironmentVariable was hanging? I would imagine that if environment variables are stored in user mode memory and there&#8217;s some critical section around them that got corrupted, I could see a hang. But otherwise I&#8217;m out of ideas.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-786303">
				<div id="div-comment-786303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.henke37.cjb.net/' rel='external nofollow' class='url'>Henke37</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091113-00/?p=16043#comment-786303">
			November 13, 2009 at 11:39 am</a>		</div>

		<p>It could just be that a function pointer was corrupted and we got a situation like earlier this week.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-786313">
				<div id="div-comment-786313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.syfuhs.net' rel='external nofollow' class='url'>Steve Syfuhs</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091113-00/?p=16043#comment-786313">
			November 13, 2009 at 12:42 pm</a>		</div>

		<p>Spawn another process instead of Terminate! &nbsp;Oh wait&#8230;right.</p>
<p>@Gabe My understanding was that when it went into the logging method, something above it corrupted, and as it tried exiting the method it hung when it hit the corruption&#8230; &nbsp;Then again, I&#8217;m more of a managed code guy&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-786343">
				<div id="div-comment-786343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kujo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091113-00/?p=16043#comment-786343">
			November 13, 2009 at 1:29 pm</a>		</div>

		<p>Gabe: (psychic debugging hat on) GetEnvironmentVariable probably takes a global lock of some kind, quite possible one taken by HeapAlloc, which may have thrown an out-of-memory exception from another thread.</p>
<p>Even the decision to end the program from the exception handler is fishy, as it &quot;hides&quot; the crash from everything else. &nbsp;Calling the next exception filter or returning EXCEPTION_CONTINUE_SEARCH is the &quot;normal&quot; way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-786373">
				<div id="div-comment-786373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vlad</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091113-00/?p=16043#comment-786373">
			November 13, 2009 at 2:08 pm</a>		</div>

		<p>Wonder why DrWtsn32/WER wasn&#8217;t producing the level of detail they required from an unhandled second chance exception anyway&#8230; perhaps they didn&#8217;t ever let the exception get to that stage, so they didn&#8217;t know there&#8217;d be a dump created from it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-786383">
				<div id="div-comment-786383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091113-00/?p=16043#comment-786383">
			November 13, 2009 at 2:19 pm</a>		</div>

		<p>I would suspect that it wasn&#8217;t even really in GetEnvironmentVariable(). When I&#8217;ve seen that sort of hang or crash in a system call like that, it was because the state was so messed up, it had no idea where it really was.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-786413">
				<div id="div-comment-786413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091113-00/?p=16043#comment-786413">
			November 13, 2009 at 7:11 pm</a>		</div>

		<p>these guys obviously mean well.</p>
<p>however when you think about it, then don&#8217;t need to exit the program in any cleaner way than if the crash had occurred without their exception handler.</p>
<p>and it&#8217;s kinda of obvious that windows frees global ram in TerminateProcess, otherwise the OS would leak everytime something crashes. &nbsp;However people probably believe that it does. (in the same way that they think it&#8217;s still based on DOS)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-786453">
				<div id="div-comment-786453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091113-00/?p=16043#comment-786453">
			November 15, 2009 at 3:01 am</a>		</div>

		<p>@Pi: Reminds me of the old Feynman tale about how mathematicians use the word “trivial” to mean ”proven”.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-786493">
				<div id="div-comment-786493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091113-00/?p=16043#comment-786493">
			November 15, 2009 at 5:14 pm</a>		</div>

		<p>@Vlad: DrWatson isn&#8217;t there from XP+, and WER doesn&#8217;t produce local reports, only send-to-Microsoft-and-hope-you-have-a-digital-signature reports, AFAIK.</p>
<p>If you&#8217;re on a system that&#8217;s unlikely to have Internet access, or the developers can&#8217;t afford a signature (eg. shareware, freeware, open source), local logging seems like the way to go. &nbsp;But you have to be really careful at that point, since you have no idea how much you can trust application/library state at that point (heck, if it&#8217;s a stack error, you may not be able to call anything at all).</p>
<p>But yeah, TerminateProcess makes more sense than ExitProcess. &nbsp;Or passing the exception along, as Kujo said.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-786503">
				<div id="div-comment-786503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091113-00/?p=16043#comment-786503">
			November 15, 2009 at 5:46 pm</a>		</div>

		<blockquote><p>
  &gt; Or passing the exception along, as Kujo said.
</p></blockquote>
<p>Reminds me of a Leslie Nielson film: as a fireworks factory is going up in flames and exploding he is telling the assembling crowd &quot;Move along, nothing to see&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-786513">
				<div id="div-comment-786513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091113-00/?p=16043#comment-786513">
			November 15, 2009 at 11:07 pm</a>		</div>

		<p>@Miral:</p>
<p>What is the mysterious DW20.exe that starts itself whenever something goes horribly wrong in a process? I always thought that was DrWatson 2.0&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-786523">
				<div id="div-comment-786523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091113-00/?p=16043#comment-786523">
			November 15, 2009 at 11:52 pm</a>		</div>

		<p>Yes! Yes, thank you Raymond! That&#8217;s what I do, too. When shit hits the fan, TerminateProcess, end of.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk odd alt thread-odd thread-alt depth-1" id="comment-786613">
				<div id="div-comment-786613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091113-00/?p=16043#comment-786613">
			November 16, 2009 at 8:07 am</a>		</div>

		<p>@Killian: &nbsp;No, &quot;trivial&quot; means &quot;I think this part is right, but I don&#8217;t want to spend time trying to figure it out right now.&quot; &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-787863">
				<div id="div-comment-787863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">scorpion007</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091113-00/?p=16043#comment-787863">
			November 19, 2009 at 8:47 pm</a>		</div>

		<p>@Miral,</p>
<p>Uh, no. XP has DrWtsn32, and Vista+ allows you to make crash dumps just as easily, with the Task Manager while it&#8217;s running, or by setting a flag in your registry to force dump queuing.</p>
<p>HKLMSOFTWAREMicrosoftWindowsWindows Error ReportingForceQueue = 1</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

