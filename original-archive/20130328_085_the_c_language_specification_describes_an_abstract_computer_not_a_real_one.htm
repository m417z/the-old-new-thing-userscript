<html>
<head>
<title>The C language specification describes an abstract computer, not a real one</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The C language specification describes an abstract computer, not a real one</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 28, 2013 / year-entry #86</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If a null pointer is zero, how do you access the memory whose address is zero? And if C allows you to take the address one past the end of an array, how do you make an array that ends at 0xFFFFFFFF, since adding one to that value would wrap around? First of all, who...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>If a null pointer is zero, how do you access the memory whose address is zero? And if C allows you to take the address one past the end of an array, how do you make an array that ends at <code>0xFFFFFFFF</code>, since adding one to that value would wrap around?</p>
<p> First of all, who says that there is a byte zero? Or a byte <code>0xFFFFFFFF</code>? </p>
<p> The C language does not describe an actual computer. It describes a theoretical one. On this theoretical computer, it must be possible to do certain things, like generate the address of one item past the end of an array, and that address must compare greater than the address of any member of the array. </p>
<p> But how the C language implementation chooses to map these theoretical operations to actual operations is at the discretion of the C language implementation. </p>
<p> Now, most implementations will do the "obvious" thing and say, "Well, a pointer is represented as a numerical value which is equal to the low-level memory address." But they are not required to do so. For example, you might have an implementation that says, "You know what? I'm just going to mess with you, and every pointer is represented as a numerical value which is equal to the low-level memory address <i>minus 4194304</i>. In other words, if you try to dereference a pointer whose numeric value is 4096, you actually access the memory at 4194304 + 4096 = 4198400. On such a system, you could have an array that goes all the way to <code>0xFFFFFFFF</code>, because the numeric value of the pointer to that address is <code>0xFFBFFFFF</code>, and the pointer to one past the end of the array is therefore a perfectly happy <code>0xFFC00000</code>. </p>
<p> Before you scoff and say "That's a stupid example because nobody would actually do that," think again. Win32s did exactly this. (The 4194304-byte offset was done in hardware by manipulating the base address of the flat selectors.) This technique was important because byte 0 was the start of the MS-DOS interrupt table, and corrupting that memory was a sure way to mess up your system pretty bad. By shifting all the pointers, it meant that a Win32s program which dereferenced a null pointer ended up accessing byte 4194304 rather than byte 0, and Win32s made sure that there was no memory mapped there, so that the program took an access violation rather than corrupting your system. </p>
<p> But let's set aside implementations which play games with pointer representations and limit ourselves to implementations which map pointers to memory addresses directly. </p>
<p> "A 32-bit processor allegedly can access up to 2&sup3;&sup2; memory locations. But if zero and <code>0xFFFFFFFF</code> can't be used, then shouldn't we say that a 32-bit processor can access only 2&sup3;&sup2; &minus; 2 memory locations? Is everybody getting ripped off by two bytes? (And if so, then who is <a href="http://www.amazon.com/dp/B000059XUJ?tag=tholneth-20"> pocketing all those lost bytes</a>?)" </p>
<p> A 32-bit processor can address 2&sup3;&sup2; memory locations. There are no "off-limits" addresses from the processor's point of view. The guy that made addresses zero and <code>0xFFFFFFFF</code> off-limits was the C language specification, not the processor. That a language fails to expose the full capabilities of the underlying processor shouldn't be a surprise. For example, you probably would have difficulty accessing the byte at <code>0xFFFFFFFF</code> from JavaScript. </p>
<p> There is no rule in the C language specification that the language must permit you to access any byte of memory in the computer. Implementations typically leave certain portions of the address space intentionally unused so that they have wiggle room to do the things the C language specification requires them to do. For example, the implementation can arrange never to allocate an object at address zero, so that it can conform to the requirement that the address of an object never compares equal to the null pointer. It also can arrange never to allocate an object that goes all the way to <code>0xFFFFFFFF</code>, so that it can safely generate a pointer one past the end of the object which behaves as required with respect to comparison. </p>
<p> So you're not getting ripped off. Those bytes are still addressable in general. But you cannot get to them in C without leaving the C abstract machine. </p>
<p> A related assertion turns this argument around. "It is impossible to write a conforming C compiler for MS-DOS because the C language demands that the address of a valid object cannot be zero, but in MS-DOS, the interrupt table has address zero." </p>
<p> There is a step missing from this logical argument: It assumes that the interrupt table is a C object. But there is no requirement that the C language provide access to the interrupt table. (Indeed, there is no mention of the interrupt table anywhere in the C language specification.) All a conforming implementation needs to do is say, "The interrupt table is not part of the standard-conforming portion of this implementation." </p>
<p> "Aha, so you admit that a conforming implementation cannot provide access to the interrupt table." </p>
<p> Well, certainly a conforming implementation can provide language extensions which permit access to the interrupt table. It may even decide that dereferencing a null pointer grants you access to the interrupt table. This is permitted because dereferencing a null pointer invokes <i>undefined behavior</i>, and one legal interpretation of undefined behavior is "grants access to the interrupt table." </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1047823">
				<div id="div-comment-1047823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1047823">
			March 28, 2013 at 7:39 am</a>		</div>

		<p>Ah, it&#39;s been a long time since I worked on a project that involved public published specs and RFCs, with the various ways people would interpret should/must/will/always/may etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1047843">
				<div id="div-comment-1047843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1047843">
			March 28, 2013 at 8:24 am</a>		</div>

		<p>Also, a null pointer doesn&#39;t have to have a numeric value of zero at all. Converting a null pointer to an integer could yield whatever number the compiler feels like, and vice versa (only integer <em>constant expressions</em> equal to 0 must be converted to null pointers &#8211; an integer variable that is 0 could become some other pointer.)</p>
<p>Generally this sort of thing was done on architectures that had a pre-existing &quot;invalid pointer value&quot; convention. The x86 just uses general registers for pointers, and 0 is the easiest value to compare an integer to, so null pointer is 0. This was also true on the PDP-11, which is how NULL == 0 became the convention in C in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1047863">
				<div id="div-comment-1047863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1047863">
			March 28, 2013 at 8:32 am</a>		</div>

		<p>nullptr != 0 is murderous on most modern code that assumes memset() on a struct sets the contained pointers to NULL.</p>
<p>With the 0 address is invalid problem, I encountered a system that put the heap descriptor there. It was amusing because the heap was written in C, and so special care had to be taken to avoid using NULL inside the heap manager itself.</p>
<p>The 0xFFFFFFFF problem is trivially avoided on all systems with arbitrary mapping by placing the top of stack there. In C, you can&#39;t walk the stack without invoking undefined behavior so this reduces that to a non-issue.</p>
<div class="post">[<em>The sort of person who asks this question would then say, &quot;So how do you make an array that ends at 0xFFFFFFFF?&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1047873">
				<div id="div-comment-1047873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1047873">
			March 28, 2013 at 8:51 am</a>		</div>

		<p>Ah, I missed the &quot;let&#39;s set aside implementations which play games with pointer representations&quot; clause.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1047893">
				<div id="div-comment-1047893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henning Makholm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1047893">
			March 28, 2013 at 9:21 am</a>		</div>

		<p>Virtual memory in general is arguably a case of &quot;implementations which play games with pointer representations&quot;. Whether it&#39;s done with segment descriptors (as Win32s apparently did), or with paging, the effect is more or less the same from the viewpoint of user code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1047903">
				<div id="div-comment-1047903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Y</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1047903">
			March 28, 2013 at 9:53 am</a>		</div>

		<p>Dereferencing null is undefined? &nbsp;Cool! &nbsp;I thought it was guaranteed to crash, just like a false assertion or something. &nbsp;So crashing is the OS guarantee, not the language guarantee apparently.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1047923">
				<div id="div-comment-1047923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1047923">
			March 28, 2013 at 10:07 am</a>		</div>

		<p>S/360 was one of the first systems to do virtual to physical address mapping in hardware. &nbsp;Just because you think that you are addressing a particular byte &#8212; even if you write in BAL (that&#39;s Basic Assembler Langugage for you youngsters) &#8212; you are not unless you have told the OS during configuration that you are running in a Virtual=Real environment.</p>
<p>I am not crazy about the C convention of NULL=0. &nbsp;However, if one looks back at the first implementations and the hardware limitations that they dealt with, it is very understandable why that convention exists in the form it does.</p>
<p>The bottom line is that no matter how far forward we move, we must always deal with decisions from the past.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1047933">
				<div id="div-comment-1047933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1047933">
			March 28, 2013 at 10:21 am</a>		</div>

		<p>Obligatory link: &quot;What Every C Programmer Should Know About Undefined Behavior&quot; (3 part series) <a rel="nofollow" target="_new" href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html" rel="nofollow">blog.llvm.org/&#8230;/what-every-c-programmer-should-know.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm even thread-even depth-1" id="comment-1047943">
				<div id="div-comment-1047943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1047943">
			March 28, 2013 at 10:34 am</a>		</div>

		<p>&quot;Virtual memory in general is arguably a case of &quot;implementations which play games with pointer representations&quot;.&quot;</p>
<p>In general, yes, but in this case, not really. &nbsp;The same principles apply to accessing bytes 0 and 0xFFFFFFFF of the process&#39;s address space whether or not there is a virtual memory system between the address space and the actual RAM.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1047963">
				<div id="div-comment-1047963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1047963">
			March 28, 2013 at 12:06 pm</a>		</div>

		<p>On Linux, you can use mmap(2) to map the 0 page and dereference null pointers, but you first need to write to /proc/sys/vm/mmap_min_addr (as root) to enable that. &nbsp;Of course, if you do that inside the kernel, that&#39;s extra-bad, and it can be easily exploited, as demonstrated here: <a rel="nofollow" target="_new" href="https://blogs.oracle.com/ksplice/entry/much_ado_about_null_exploiting1" rel="nofollow">blogs.oracle.com/&#8230;/much_ado_about_null_exploiting1</a> .</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1047993">
				<div id="div-comment-1047993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1047993">
			March 28, 2013 at 1:41 pm</a>		</div>

		<p>The whole concept of a null pointer is a anti pattern, in the same way any magic number is. Actually, most of the C standard is an anti pattern in itself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1048013">
				<div id="div-comment-1048013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1048013">
			March 28, 2013 at 1:45 pm</a>		</div>

		<p>Prior to Windows 8, you could allocate the first 64k of address space by calling VirtualAlloc with a pointer of 1. &nbsp;It would round down your pointer to 0 for the allocation, but not interpret your request as NULL = allocate anywhere.</p>
<p>Windows 8 blocks off such allocations as a kernel exploit mitigation, for the same reason Linux does. &nbsp;But, unlike Linux, there&#39;s no direct way to disable that feature, and no way at all on 64-bit. &nbsp;Virtual DOS machines in 32-bit Windows 8 can still allocate the first 64k so that they can have an emulated real mode interrupt table.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1048023">
				<div id="div-comment-1048023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1048023">
			March 28, 2013 at 1:53 pm</a>		</div>

		<p>On a related note to the original topic, it should be noted that casting to uintptr_t to do pointer arithmetic and casting back to pointer type is not portable, though it will work with any flat-addressing implementation. &nbsp;This is because C does not require the uintptr_t to be any meaningful value &#8211; all that C requires is that casting to uintptr_t and casting back to the same pointer type survives a round trip. &nbsp;A silly but compliant C implementation could convert to uintptr_t by doing a DES encrypt on the pointer, then DES encrypt back, and even use different encryption keys for each type of pointer.</p>
<p>I think that it would be interesting to have a C implementation that is the worst-case scenario, breaking on as many undefined operations as possible. &nbsp;The compiler would implement C in the most ridiculous ways possible while adhering to the Standard.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1047813">
				<div id="div-comment-1047813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1047813">
			March 28, 2013 at 7:35 am</a>		</div>

		<p>I don&#39;t follow the argument that people are being shortchanged by two bytes. Is there a rule that a pointer has to actually refer to a memory address? Or can a conforming C implementation do something like:</p>
<p>Assume a machine has exactly 4 GB of memory, so memory locations 0x00000000 through 0xffffffff are valid.</p>
<p>Use a 64-bit type to store pointer values.</p>
<p>Map nullptr == (void*)0 to a bogus memory location&#8230; for example, 0x12345678`9abcdef0</p>
<p>Map (void*)p to the memory location at (p &#8211; 1) for all other values of p</p>
<div class="post">[<em>That sounds familiar. Oh right, I wrote that. See the paragraph &quot;For example, you might have an implementation that says&#8230;&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1048033">
				<div id="div-comment-1048033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Y</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1048033">
			March 28, 2013 at 3:06 pm</a>		</div>

		<p>@Myria: That sounds very useful: think lint on steroids!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1048053">
				<div id="div-comment-1048053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1048053">
			March 28, 2013 at 3:36 pm</a>		</div>

		<p>@Myria: You&#39;re talking about the DeathStation 9000, which has never really sold well.</p>
<p>The problem with this approach is that almost no program that&#39;s not a toy would even run under the most unreasonable interpretation of the Standard, and even those that do would probably find themselves unable to produce desirable output, and even those that could would be running as slow as molasses. It would be an exercise in constrained writing that does very little for improving the quality of code that actually needs to get things done.</p>
<p>There is a huge gap between &quot;break on as many undefined operations as possible&quot; and &quot;implement C in the most ridiculous way possible&quot;. The former is actually useful, the latter is at best exercise material for language lawyers. There are research projects for compilers/analyzers that try to nail down undefined behavior as much as possible &#8212; i.e., catch the stuff that actually matters. Unfortunately UB is UB for a reason, namely that it would be very hard for a compiler to detect that it is actually UB, in some cases being as hard as solving the halting problem. Even so, those attempts are more useful than an actual DS9K.</p>
<p>In the end, if you really need to get rid of undefined behavior, you have to seriously consider not using C (at least not in its pure form). It places tremendous and in most cases unwarranted trust in the ability of the programmer to keep track of sets of fairly arcane rules that exist primarily to allow compiler writers to optimize the tar out of C code, something which is almost completely in opposition to getting reliable code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1047883">
				<div id="div-comment-1047883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1047883">
			March 28, 2013 at 9:12 am</a>		</div>

		<p>For what it&#39;s worth, this code is an honest attempt at constructing a pointer for the memory at location 0 provided your machine has such a location (the details of which, as Raymond points out, are not guaranteed by the Standard):</p>
<p>int x = 0;</p>
<p>void* p = (void*) x;</p>
<p>This invokes implementation-defined behavior. The reason you need to get tricky is to avoid constructing a null pointer &#8212; which, as Random832 points out, is *not* necessarily zero. And even then, as Raymond points out, &quot;memory location 0&quot; need not correspond to what you would like it to be, but your implementation is ethically obliged to document that (technically, it need only document how pointers convert to integers and back, but leaving out a discussion on actual memory locations of that would be chicanery of the most deplorable kind).</p>
<p>The confusion between 0 and the null pointer is one of the bigger warts of C, IMO. NULL helps pragmatically, but does nothing for the semantics.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1048073">
				<div id="div-comment-1048073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1048073">
			March 28, 2013 at 5:58 pm</a>		</div>

		<p>@MarkY &quot;Dereferencing null is undefined? &nbsp;Cool! &nbsp;I thought it was guaranteed to crash, just like a false assertion or something. &nbsp;So crashing is the OS guarantee, not the language guarantee apparently.&quot;</p>
<p>Nope. It&#39;s not an OS guarantee either. The OS won&#39;t ever normally allocate memory at address zero, but there&#39;s nothing to stop you telling it to. Try doing &quot;VirtualAlloc(1, 4096, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE)&quot; on your pre-Windows8 machine.</p>
<p>In fact, this is the reason why null-dereferences in kernel mode are often exploitable as elevation of privilege attacks. The null-page is mappable and within the user-addressable region of memory, so if the kernel dereferences a null pointer, it reads attacker controllable data.</p>
<p>And btw, this is the reason why on Linux and Windows8+ you can&#39;t map the null-page.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1048083">
				<div id="div-comment-1048083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1048083">
			March 28, 2013 at 6:27 pm</a>		</div>

		<p>@Matt: Sometimes you have to reconfigure to allow mapping the NULL page on Linux to run Wine (16 bit Windows apps).</p>
<p>My only gripe about LLVM compiler was no way to remove the optimization about remove null pointer checks without disabling optimizations. The Linux team actually made a policy decision to never remove NULL pointer checks anymore after the last NULL exploit would have been prevented except for the optimizer removed the check. De-referencing *(NULL + some sufficiently large x) is still exploitable and there&#39;s no way around that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1048163">
				<div id="div-comment-1048163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wilmer E. Henao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1048163">
			March 29, 2013 at 2:18 pm</a>		</div>

		<p>Those adresses beyond 0xFFFFFFFF sound very dangerous. &nbsp;So no standard way to catch this exception, huh?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-1048283">
				<div id="div-comment-1048283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130328-00/?p=4823#comment-1048283">
			April 1, 2013 at 12:04 am</a>		</div>

		<p>@Joshua: AFAIK Win8 handles this by disabling NTVDM by default.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

