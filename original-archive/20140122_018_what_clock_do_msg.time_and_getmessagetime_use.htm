<html>
<head>
<title>What clock do MSG.time and GetMessageTime use?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What clock do MSG.time and GetMessageTime use?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 22, 2014 / year-entry #19</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The MSG structure has a field called time which is a DWORD. There is also a function Get­Message­Time which returns a LONG. Both are documented as returning the time the message was generated, but the types are different. Are these time units comparable? Yes, they are the same thing. They all use the 32-bit timer...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The <code>MSG</code> structure has a field called <code>time</code>
which is a <code>DWORD</code>.
There is also a function
<code>Get&shy;Message&shy;Time</code> which returns a <code>LONG</code>.
Both are documented as returning the time the message was generated,
but the types are different.
Are these time units comparable?
</p>
<p>
Yes, they are the same thing.
They all use the 32-bit timer provided by the
<code>Get&shy;Tick&shy;Count</code> function.
Sorry about the inconsistency in signed/unsigned-ness.
Feel free to cast between them; they are fundamentally the same thing.
</p>
<p>
Whether you prefer the signed or unsigned version depends on what
you intend to do with the calculation,
specifically, how you want to treat the case where the events
occurred out of the expected order.
</p>
<p>
If you want to see whether some amount of time has elapsed,
then you probably want to cast the return value of
<code>Get&shy;Message&shy;Time</code> to <code>DWORD</code>:
</p>
<pre>
if ((DWORD)GetMessageTime() - dwStartTime &lt; VALUE) {
 ...
}
</pre>
<p>
The unsigned test checks that the message time is
<i>on or after</i>
the start time, but not more than <code>VALUE</code> milliseconds
after it.
If the message time comes <i>before</i> the start time,
then the test fails.
</p>
<p>
On the other hand, if you want to see which of two events occurred
earlier,
then you want to use a signed subtraction:
</p>
<pre>
if (GetMessageTime() - (LONG)dwStartTime &lt; VALUE) {
 ...
}
</pre>
<p>
The signed test checks that the message time is
<i>no later than</i> <code>VALUE</code> milliseconds after
the start time.
</p>
<p>
Note that language lawyers may note that the above calculation
relies on two's-complement overflow,
and signed arithmetic overflow is specifically called out
by the C language as <i>undefined behavior</i>.
Therefore, a stricter language-compliant
version of the above test would be
</p>
<pre>
if ((LONG)((DWORD)GetMessageTime() - dwStartTime) &lt; VALUE) {
 ...
}
</pre>
<p>
The above version still relies on twos-complement arithmetic,
but the Win32 ABI requires twos-complement arithmetic, so we're
safe there at least.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1101353">
				<div id="div-comment-1101353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101353">
			January 22, 2014 at 7:21 am</a>		</div>

		<p>The MSDN page for Get&shy;Message&shy;Time mentions it wraps around to zero but they talk about the maximum value for a long integer, perhaps this could be updated to make it clear the number is unsigned.</p>
<div class="post">[<em>Get&shy;Message&shy;Time uses a signed integer, so it wraps from 0x7FFFFFFF to 0x80000000. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1101463">
				<div id="div-comment-1101463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101463">
			January 22, 2014 at 9:54 am</a>		</div>

		<p>@Raymond, I&#39;ll have to agree with @skSdnW, the current doc says:</p>
<p>&quot;The return value from the GetMessageTime function does not necessarily increase between subsequent messages, because the value wraps to zero if the timer count exceeds the maximum value for a long integer.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-john-ludlow even thread-even depth-1" id="comment-1101473">
				<div id="div-comment-1101473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/John+Ludlow' rel='external nofollow' class='url'>John Ludlow</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101473">
			January 22, 2014 at 9:57 am</a>		</div>

		<p>Yes &#8211; what Raymond is saying seems to be correct in terms of how the value would wrap (without having tested this myself!) but it&#39;s not what the documentation is saying.</p>
<p>I&#39;d suggest this is an error in the documentation and it should be updated to reflect reality,</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1101543">
				<div id="div-comment-1101543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wolf Logan [Bing IPE]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101543">
			January 22, 2014 at 11:56 am</a>		</div>

		<p>&#8230;unless I&#39;m misreading the intent of GetMessageTime(). On reflection, it&#39;s likely that the docs for GetMessageTime() were cut-and-pasted from GetÂ­TickÂ­Count(), without accounting for the change in return type.</p>
<p>Yuck. In that case, I agree there&#39;s an issue with the GetMessageTime() docs; they don&#39;t seem to match the return type correctly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1101593">
				<div id="div-comment-1101593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101593">
			January 22, 2014 at 5:33 pm</a>		</div>

		<p>I wouldn&#39;t take the notion of relying on undefined behavior lightly, as there have been several high-profile cases (somewhat) recently of code behaving differently because of a compiler removing undefined behavior to remove or modify code. See <a rel="nofollow" target="_new" href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html">blog.llvm.org/&#8230;/what-every-c-programmer-should-know.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1101603">
				<div id="div-comment-1101603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JDT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101603">
			January 22, 2014 at 7:44 pm</a>		</div>

		<p>C++ really does feel like a minefield sometimes, doesn&#39;t it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1101533">
				<div id="div-comment-1101533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wolf Logan [Bing IPE]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101533">
			January 22, 2014 at 11:48 am</a>		</div>

		<p>Stop &#8212; you&#39;re both right!</p>
<p>The docs say that the returned value wraps, so that you&#39;ll never see a &quot;negative&quot; value from GetMessageTime(); but *operations on the underlying type* (LONG) will wrap as Raymond describes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1101643">
				<div id="div-comment-1101643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101643">
			January 23, 2014 at 4:20 am</a>		</div>

		<p>What&#39;s this fancy new Windows Application Brogramming Interface?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1101653">
				<div id="div-comment-1101653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101653">
			January 23, 2014 at 4:33 am</a>		</div>

		<p>@David:</p>
<p>Not sure if serious or tongue-in-cheek. I like &quot;Brogramming&quot;, anyways.</p>
<p>But of course it&#39;s the Application Binary Interface, which is not the same as the API.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1101703">
				<div id="div-comment-1101703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Anil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101703">
			January 23, 2014 at 10:53 am</a>		</div>

		<p>There is no undefined behavior, except in the specific instance where the author points it out, and provides an alternative implementation that does not rely on undefined behavior.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1101723">
				<div id="div-comment-1101723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101723">
			January 23, 2014 at 12:28 pm</a>		</div>

		<p>Someone&#39;s blog had this example of the problem of signed integer overflow in C, but I don&#39;t remember where. =/</p>
<p>uint64_t MultiplyWords(uint16_t x, uint16_t y)</p>
<p>{</p>
<p> &nbsp;uint32_t result = x * y;</p>
<p> &nbsp;return result;</p>
<p>}</p>
<p>One compiler&#39;s object code returned 0xFFFFFFFFFFFE0001 for Multiply(0xFFFF, 0xFFFF), and it wasn&#39;t a compiler bug &#8211; what the heck? &nbsp;It&#39;s because of extremely subtle invocation of the undefined behavior rules of signed integers in C.</p>
<p>Values smaller than &quot;int&quot; get promoted to &quot;int&quot; during an arithmetic operation. &nbsp;This occurs regardless of whether the source type is signed or unsigned, annoyingly. &nbsp;So the uint16_t&#39;s get cast to int; int32_t is assumed in this example. &nbsp;Since the &quot;from&quot; type is unsigned, the values get zero-extended. &nbsp;Now the multiply happens. &nbsp;The compiler thus assumes that this cannot overflow &#8211; in other words, cross INT_MAX &#8211; and just emits a normal 32-bit multiply (mul or imul on x86; it doesn&#39;t matter, since the high half is discarded).</p>
<p>Next is the uint32_t. &nbsp;In the case of the compiler in question, it noticed that because the multiply cannot overflow, and because the input values are never signed, the multiplication result cannot be negative. &nbsp;Therefore, casting from int32_t to uint32_t does nothing. &nbsp;The optimizer removes the cast entirely &#8211; now the type of the &quot;x * y&quot; is int32_t instead of uint32_t.</p>
<p>Finally, it returns the uint64_t. &nbsp;The compiler&#39;s optimizer in this case was *not* as smart, not noticing that again the int32_t cannot be negative due to its previous assumptions. &nbsp;Therefore, it sees a cast from int32_t to uint64_t, and emits a sign extension (cdq or movsxd on x86).</p>
<p>When the input is 0xFFFF * 0xFFFF, the multiply results in the 32-bit value 0xFFFE0001. &nbsp;The sign extension results in 0xFFFFFFFFFFFE0001.</p>
<p>This shows that always using unsigned integers whenever possible still won&#39;t save you. &nbsp;I wish C/C++ weren&#39;t like this &#8211; I&#39;d take slightly slower run-time performance over hard-to-find bugs and security holes any day.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1101773">
				<div id="div-comment-1101773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1101773">
			January 24, 2014 at 12:04 am</a>		</div>

		<p>&quot;Sorry about the inconsistency in signed/unsigned-ness. Feel free to cast between them; they are fundamentally the same thing&quot;</p>
<p>No they are not. This is clear evidence that someone inside Microsoft is working at that time machine otherwise wouldn&#39;t need for negative time. Ray, you lied to us all the time, you do have it after all :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1102253">
				<div id="div-comment-1102253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140122-00/?p=2013#comment-1102253">
			January 25, 2014 at 1:01 am</a>		</div>

		<p>Time modulo 49 days are useless. Have to write 100 SLOCs for handling every operation because of it. (or 1 SLOC if you omit lf &#8211; worse)</p>
<div class="post">[<em>Most user interface actions are complete in less than 49 days. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

