<html>
<head>
<title>How do I test that return value of ShellExecute against 32?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I test that return value of ShellExecute against 32?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 8, 2006 / year-entry #378</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>39</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">We discussed earlier the history behind the the return value of the ShellExecute function, and why its value in Win32 is meaningless aside from testing it against the value 32 to determine whether an error occurred. How, then, should you check for errors? Let's turn the question around. How would you, the implementor of the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>We discussed earlier the history behind the the return value of the <code>ShellExecute</code> function, and why its value in Win32 is meaningless aside from testing it against the value 32 to determine whether an error occurred.</p>
<p> <a href="http://blogs.msdn.com/oldnewthing/archive/2006/05/05/590749.aspx#592875"> How, then, should you check for errors</a>? </p>
<p> Let's turn the question around. How would you, the implementor of the <code>ShellExecute</code> function, report success? The <code>ShellExecute</code> is a very popular function, so you have to prepared for the ways people check the return code incorrectly yet manage to work in spite of themselves. The goal, therefore, is to report success in a manner that breaks as few programs as possible. </p>
<p> (Now, there may be those of you who say, "Hang compatibility. If programs checked the return value incorrectly, then they deserve to stop working!" If you choose to go in that direction, then be prepared for the deluge of compatibility bugs to be assigned to you to fix. And they're going to come from a grumpy compatibility testing team because they will have spent a long time just finding out that the problem was that the program was checking the return value of <code>ShellExecute</code> incorrectly.) </p>
<p> Since there is still 16-bit code out there that may thunk up to 32-bit code, you probably don't want to return a value greater than <code>0xFFFF</code>. Otherwise, when that value gets truncated to a 16-bit <code>HINSTANCE</code> will lose the high word. If you returned a value like <code>0x00010001</code>, this would truncate to <code>0x0001</code>, which would be treated as an error code. </p>
<p> For similar reasons, the 64-bit implementation of the <code>ShellExecute</code> function had better not use the upper 32&nbsp;bits of the return value. Code that casts the return value to <code>int</code> will lose the high 32&nbsp;bits. </p>
<p> Furthermore, you shouldn't return a value that, when cast to an integer, results in a negative number. Some people will use a signed comparison against&nbsp;32; others will use an unsigned comparison. If you returned a value like <code>-5</code>, then the people who used a signed comparison would think the function failed, whereas those who used an unsigned comparison would think it succeeded. </p>
<p> By the same logic, the value you choose as the return value should not result in a negative number when cast to a 16-bit integer. If the return value is passed to a 16-bit caller that casts the result to an integer and compares against 32, you want consistent results independent of whether the 16-bit caller used a signed or unsigned comparison. </p>
<p> Edge conditions are tricky, so you don't want to return  the value 32 exactly. If you look at code that checks the return value from <code>ShellExecute</code>, you'll probably find that the world is split as to whether 32 is an error code or not. So it'd be in your best interest not to return the value 32 exactly but rather a value larger than 32. </p>
<p> So far, you're constrained to choosing a value in the range 33&ndash;32767. </p>
<p> Finally, you might be a fan of Douglas Adams. (Most geeks are.) The all-important number 42 fits into this range. Your choice of return value, therefore, might be <code>(HINSTANCE)42</code>. </p>
<p> Going back to the original question: How should I check the return value of <code>ShellExecute</code> for errors? MSDN says you can cast the result to an integer and compare the result against 32. That'll work fine. You could cast in the other direction, comparing the return value against <code>(HINSTANCE)32</code>. That'll work fine, too. Or you could cast the result to an <code>INT_PTR</code> and compare the result against 32. That's fine, too. They'll all work, because the implementor of the <code>ShellExecute</code> function had to plan ahead for you and all the other people who call the <code>ShellExecute</code> function. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (39)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-440563">
				<div id="div-comment-440563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440563">
			November 8, 2006 at 10:34 am</a>		</div>

		<p>You know, I&#8217;m beginning to think Microsoft needs to add one more thing to it&#8217;s logo requirements. &nbsp;That would be a clause forcing companies to patch any discovered incompatibilities of these (assorted and frequently mentioned here )natures in their software or face financial penalties and/or loss of logo rights in ALL their software. &nbsp;It should also asign Microsoft rights to patch their software should they refuse or should it be orphaned. &nbsp;</p>
<p>I think that the most popular programs are the most likely, if not only, ones Microsoft has to include shims and other workarounds for and that those are most likely to be logo compliant. &nbsp;Any time Microsoft&#8217;s compatibility testing team traced a common problem back to such a bug they&#8217;d at least have the legal options of pulling logos or patching the software rather than teaking the os.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-440573">
				<div id="div-comment-440573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lewis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440573">
			November 8, 2006 at 10:41 am</a>		</div>

		<p>You are assuming that all of the important programs for an enterprise are &quot;logo-ized&quot;. I&#8217;ll bet you that most of the internally developed, mission critical, applications that are out there AREN&#8217;T logo-certified, nor would the company care about that, because writing &quot;logo-ized&quot; apps isn&#8217;t their core business.</p>
<p>However, if the perception is that upgrading to version X of the OS breaks all of the mission critical applications, half of which they can&#8217;t change because the consultants caught fire in a team-building &quot;walking on hot coals&quot; disaster, then the enterprise ain&#8217;t likely to want to buy version X.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-440583">
				<div id="div-comment-440583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Ritchie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440583">
			November 8, 2006 at 10:45 am</a>		</div>

		<p>+1 for expanded logo requirements (not that every single program goes through certification&#8230;).</p>
<p>When will we learn that overriding a function is bad; just retire/obsolete it if it no longer can accomodate what it needs to do and create a new one! &nbsp;Doing that might force designers to think ahead a little more about things like future integer sizes, etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-440593">
				<div id="div-comment-440593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440593">
			November 8, 2006 at 11:06 am</a>		</div>

		<p>I can see the headlines now &quot;MS EXPOSES SEC HOLES WHEN PATCHING WIDGET-TECH&#8217;S PERVASIVE YET CRUMMY APP&quot;. The only reason MS patches the OS to accommodate the crummy apps is so that they can sell more copies of the OS, not because of some altruistic need to heal the afflicted.</p>
<p>Then there is the legal aspect of this idea. There is no freaking way MS could take on this responsibility. For one thing they already struggle patching their own apps would you really want them responsible for doing binary patches on 3rd party apps? I donâ€™t.</p>
<p>Another flaw in this great plan is that MS is in the business of selling the OS, not being a the coding police. If you write crappy code eventually people will figure that out and avoid your products and if they don&#8217;t then they deserve what they get.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-440603">
				<div id="div-comment-440603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440603">
			November 8, 2006 at 11:19 am</a>		</div>

		<p>I think you&#8217;re missing the poster&#8217;s point Lewis. &nbsp;</p>
<p>No, you wouldn&#8217;t assume that internally developed mission critical applications out there are &quot;logo-ized,&quot; but how many of those does Microsoft shim and patch the OS for? &nbsp;Few, if any? &nbsp;</p>
<p>It&#8217;s the big boys in widespread use that cause most of the tweaks, fixes, shims, and work-arounds on Microsoft&#8217;s part. &nbsp;Right now the most Microsoft can do is notify the software makers and hope they fix it or patch the OS over and over to maintain compatibility. &nbsp;They&#8217;re most often forced into the latter.</p>
<p>Since Microsoft has already gone through the trouble of discovering where and what the cause of the error is, wouldn&#8217;t you much rather they have the legal right to patch the offending software or theaten loss of logo than patch and shim the OS. &nbsp;Patching the OS to maintain compatibility with misbehaving apps is largely to blame for many of Windows&#8217; shortcomings today.</p>
<p>Let me point out that a companie&#8217;s enterprise, or perhaps I should say enterprisy, app can break because Microsoft is forced to change something to maintain compatibility with BigBoyApp(TM) too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-440613">
				<div id="div-comment-440613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440613">
			November 8, 2006 at 11:37 am</a>		</div>

		<p>Steve, I doubt Microsoft would patch much software, but I would like them to have the option. &nbsp;Even moreso I&#8217;d like them to have a way to pressure vendors of buggy software into fixing it.</p>
<p>As far as your sensationalist headlines go, I think (hope) most developers reading Raymond&#8217;s blog are bright enough to realize I&#8217;m talking about patching programs to fix little things like checks of the return values of ShellExecute, Windows version numbers, etc.. &nbsp;You know, the stuff Microsoft is already forced to rig and patch but from their end instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-440643">
				<div id="div-comment-440643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.tungware.com' rel='external nofollow' class='url'>Henry Skoglund</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440643">
			November 8, 2006 at 1:55 pm</a>		</div>

		<p>It&#8217;s funny how that number 42 crops up in Microsoft&#8217;s software. For example, in 16-bit Windows, rebooting was done by passing 42 (in hex, of course) to ExitWindows. (<a rel="nofollow" target="_new" href="http://support.microsoft.com/kb/142820" rel="nofollow">http://support.microsoft.com/kb/142820</a>)</p>
<p>Rgrds Henry</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-440653">
				<div id="div-comment-440653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440653">
			November 8, 2006 at 2:07 pm</a>		</div>

		<p>Raymond:</p>
<p>(a) for the ignorant such as myself: why the heck doesn&#8217;t ShellExecute return zero on success in the first place?</p>
<p>(b) why the heck don&#8217;t you guys, when making new ABIs such as 64-bit, insert a translation layer capable of fixing the sins of the past? I.E., when people recompile for 64-bit, they get the new, more strict behavior, but old 32-bit code doesn&#8217;t break because the 32-bit version preserves the compatibility hacks? I would think it&#8217;d be in your interest to clean things up, and ABI changes are your only real chance given your software architecture.</p>
<div class=post>[<i>I already answered these questions. (<a href="http://blogs.msdn.com/oldnewthing/archive/2004/06/14/155107.aspx" rel="nofollow">a</a>) and (<a href="http://blogs.msdn.com/oldnewthing/archive/2005/01/31/363790.aspx" rel="nofollow">b</a>). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-440663">
				<div id="div-comment-440663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bilbo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440663">
			November 8, 2006 at 2:10 pm</a>		</div>

		<p>There&#8217;s the bug in Windows &#8211; they were handed the answer to the ultimate question of life, the universe, and everything, and they messed it up by keying it as a hex 42.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-440683">
				<div id="div-comment-440683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440683">
			November 8, 2006 at 2:59 pm</a>		</div>

		<p>Some day it would be nice to see a Raymond post about crafting a good design, in the context of backward compatibility for a huge developer base, whose comments don&#8217;t immediately descend into claims that Windows is &#8220;bloated&#8221; and &#8220;hacky&#8221; because Microsoft can&#8217;t start with a blank slate. &nbsp;I think there&#8217;s a big mistaken assumption being made here.</p>
<p>Yes, it&#8217;s harder to pick an error return code when you have to pay attention to constraints. &nbsp;It&#8217;s harder to write strict-meter poetry than free verse, too, but that doesn&#8217;t make it automatically worse.</p>
<p>I&#8217;d want to see some hard data: &nbsp;how much of Windows&#8217; &#8220;bloat,&#8221; how much of its day-to-day instability, is due to code mandated for backwards compatibility with external programs that don&#8217;t play by today&#8217;s rules?</p>
<div class=post>[<i>I find it amazing that people consider &#8220;return 42&#8221; bloat. You have to return <u>something</u>. It&#8217;s not like you can save two bytes by deleting the &#8220;return&#8221; statement. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-440693">
				<div id="div-comment-440693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440693">
			November 8, 2006 at 3:18 pm</a>		</div>

		<p>I say we mandate that 42 be the official successful return code for all functions that return an integer. &nbsp;Then we can cast Integers to a new Boolean type with the values true, false and The Answer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-440703">
				<div id="div-comment-440703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://levicki.blogspot.com/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440703">
			November 8, 2006 at 3:36 pm</a>		</div>

		<p>Raymond, he didn&#8217;t mean bloated because of return code. He meant because of all that legacy compat junk you kkep dragging around with you.</p>
<p>&gt;The goal, therefore, is to report success in a manner that breaks as few programs as possible.</p>
<p>How about simple TRUE or FALSE?</p>
<p>I mean, wasn&#8217;t there already a discussion about bad things happening because of another function which returns 3 different types of return value (has to do with add/rem programs applet and app icons)?!?</p>
<p>Why don&#8217;t you return additional value through a pointer if needed?</p>
<p>BOOL ShellExecute(HINSTANCE *hinstPtr,&#8230;)</p>
<p>What happened with GetLastError()?!?</p>
<p>Why not:</p>
<p>if (!ShellExecute(&amp;hinstPtr, &#8230;) {</p>
<p>&nbsp; &nbsp;DWORD crap = GetLastError();</p>
<p>}</p>
<p>I am amazed why you still haven&#8217;t overhauled all APIs and deprecated all functions which use multiple different return values because they always create problems when people misunderstand them or when you have to port to next larger integer size.</p>
<p>IMO, you are making your job harder intentionally by bad design. So, go and tell everyone &#8220;returning things other than TRUE and FALSE from non-computational function is a NO-NO&#8221; and move on.</p>
<div class=post>[<i>Again, I already explained <a href="http://blogs.msdn.com/oldnewthing/archive/2004/06/14/155107.aspx" rel="nofollow">why ShellExecute returns an HINSTANCE</a>. If you want a function that returns a BOOL and an output pointer, use ShellExecuteEx. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-440633">
				<div id="div-comment-440633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Elijah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440633">
			November 8, 2006 at 1:02 pm</a>		</div>

		<p>You know, I&#8217;m tired of actually reading the documentation and trying to get it right when MS bends over backwards to help the monkeys who don&#8217;t care.</p>
<p>Seeing as MS appear to preserve back-compat at all costs &#8211; even when it conflicts with posted documentation (the MSDN docs say that the *ONLY* thing you can do with the HINSTANCE returned by ShellExecute is cast it to an int and compare against 32, or against a few individual error codes, despite what you claim) &#8211; and will apparently happily keep their end limping along to support me from now &#8217;til eternity no matter what manner of lunacy I attempt, I&#8217;m going to take them up on it.</p>
<p>From now on, I&#8217;ll take the current implementation as the authoritative source on what is supposed to work and what isn&#8217;t. From now on, I won&#8217;t bother reading the documentation to e.g. find out whether I&#8217;m supposed to be able to pass NULL (or null for .NET) into a function. From now on, I&#8217;ll invalidate the NULL window occasionally just for the heck of it. From now on I&#8217;ll crawl up the stack and poke around there &#8211; knowing which function you&#8217;ve been called might allow me to do some &#8220;interesting&#8221; optimisations. If it works on my machine, that&#8217;s it.</p>
<p>I fully expect my productivity to soar past that of my colleagues who have already learned this lesson and do not spend their precious time reading the documentation.</p>
<p>I&#8217;m sick of trying to do the right thing and basically being told &#8220;yeah, but you needn&#8217;t have bothered, we&#8217;ve set the wrong thing in stone too.&#8221;</p>
<p>If MS are going to reward (or at least not punish) this kind of behaviour, they shouldn&#8217;t be surprised or complain when devs start exhibiting it.</p>
<div class=post>[<i>Where did I ever claim that you could do anything other than compare the result with 32 (and specific error codes)? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-440773">
				<div id="div-comment-440773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440773">
			November 8, 2006 at 9:17 pm</a>		</div>

		<p>I&#8217;m constantly surprised by IT people saying &quot;Make it better, don&#8217;t worry about how it will affect people.&quot; Every thing you do in IT has a potential downstream impact, even if it has a workaround.</p>
<p>Imagine the worldwide cost in $ or hours if something as seemingly innocuous as ShellExecute&#8217;s behaviour changed. What if BestSellingApp relied on it &#8212; all of a sudden millions of users of BSA can no longer do their jobs?</p>
<p>How often has the IT dept where you work suddenly decided to change something only to have critical apps like email go down for several hours? Or scheduled updates during business hours? Always think about the consequences of what you&#8217;re doing.</p>
<p>When the reason is good enough, things can (and should change) but geeky cleanliness/perfectionism is not enough to convince many companies they need to spend millions of their currency units for absolutely nothing.</p>
<p>WRT to ShellExecute or any function that has a preferred alternative, I&#8217;d start adding some #pragma PreferredAlternative(ShellExecuteEx) into the SDK so the messages show up at compiler time &#8212; at least future errors will be reduced over time.</p>
<p>BTW how forward thinking is MS: is Win128 a consideration for the Win64 folk?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-440753">
				<div id="div-comment-440753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Elijah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440753">
			November 8, 2006 at 7:21 pm</a>		</div>

		<p>&#8220;You could cast in the other direction, comparing the return value against (HINSTANCE)32. That&#8217;ll work fine, too. Or you could cast the result to an INT_PTR and compare the result against 32. That&#8217;s fine, too.&#8221;</p>
<p>It says you *must* cast to an *int* and compare that way.[0]</p>
<p>Therefore, any value that, when cast to an int and is less than or equal to 32, is an error. Including values that cast to negative ints.</p>
<p>That&#8217;s the definition! That&#8217;s what the docs say!</p>
<p>Casting the result to unsigned types (like INT_PTR) explicitly breaks this. If HINSTANCEs are/can be unsigned types (I don&#8217;t know whether this is defined or not, and the ShellExecute docs don&#8217;t have link to the HINSTANCE definition) then *not* casting the result and comparing to an unsigned 32 will also break it.</p>
<p>Casting to wider/narrower types is also undefined and might break your code.</p>
<p>The &#8220;only thing&#8221; you can do is &#8220;cast it to an int&#8221;. That&#8217;s not ambiguous. It&#8217;s not unclear. It&#8217;s plain blac^H^H^H^Hones and zeros.</p>
<p>*boggle*</p>
<p>But &#8230; but &#8230; you&#8217;re Raymond Chen. You rule! How can you not read the documentation also?</p>
<p>Screw it, it must be me. If you think that everyone else in the whole world is insane, it&#8217;s much more likely that you are instead. Therefore, it is not the whole world that is insane for not reading the documentation or not caring what it actually says; it must be me for reading it and caring. Well, bring me the straightjacket &#8211; I give up.</p>
<p>[0] <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/shell/reference/functions/shellexecute.asp" target=_new rel=nofollow rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/shell/reference/functions/shellexecute.asp</a></p>
<div class=post>[<i>The only <u>correct</u> thing you can do is to cast to an int and compare against 32, just like the documentation says. My point is that the implementation of ShellExecute has to watch out for people who do <u>incorrect</u> things, too. That doing things other than following the documentation is incorrect I sort of took for granted. Perhaps you would prefer that I had written more pedantically? &#8220;You could <u>incorrectly</u> cast in the other direction comparing the return value against (HINSTANCE)32. That&#8217;ll work fine, too <u>(even though it is incorrect)</u>.&#8221; So go ahead and mentally insert &#8220;(Doing anything other than casting to an int and comparing against 32 is incorrect, of course.)&#8221; after every sentence. I was hoping I didn&#8217;t need to do that. This is a conversation, not formal documentation. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-440833">
				<div id="div-comment-440833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">required</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440833">
			November 9, 2006 at 3:36 am</a>		</div>

		<blockquote><p>
  Does nobody else understand the sentence &quot;X works even though it is incorrect&quot;?
</p></blockquote>
<p>You forgot to say &#8216;Does nobody else understand the sentence &quot;X works today even though it is incorrect&quot;?&#8217;</p>
<p>Just to be really pedantic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-440763">
				<div id="div-comment-440763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Elijah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440763">
			November 8, 2006 at 8:06 pm</a>		</div>

		<p>&#8220;That&#8217;ll work fine, too (even though it is incorrect).&#8221;</p>
<p>I *was* reading it like that. Don&#8217;t you don&#8217;t see the contradiction there?</p>
<p>By saying that &#8220;you could cast in the other direction [and it] *will* work fine too&#8221; (emphasis mine), you are claiming it *is* defined behaviour, and that it *will* work.</p>
<p>Therefore, you&#8217;re saying that doing those things is &#8220;correct&#8221;, *despite* what the documentation says.</p>
<p>Aren&#8217;t you?</p>
<p>/me is confused.</p>
<div class=post>[<i>Casting in the other direction is undefined behavior. It&#8217;s undefined behavior that happens to work, but formally it is undefined. In the same way that driving off the road is undefined according to traffic laws but it works because the road has a shoulder. Is it just me? Does nobody else understand the sentence &#8220;X works even though it is incorrect&#8221;? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-440843">
				<div id="div-comment-440843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440843">
			November 9, 2006 at 4:18 am</a>		</div>

		<p>&gt; Going back to the original question: How</p>
<p>&gt; should I check the return value of</p>
<p>&gt; ShellExecute for errors? MSDN says you can</p>
<p>&gt; cast the result to an integer and compare the</p>
<p>&gt; result against 32. That&#8217;ll work fine.</p>
<p>That looks like a promise.</p>
<p>If we read it in MSDN then experimentation is needed in order to<br />
determine whether or not this is among the 75% of MSDN&#8217;s promises that<br />
tend to be accurate &#8212; today. &nbsp;Reading it here, it looks like a<br />
real promise.</p>
<p>&gt; You could cast in the other direction,</p>
<p>&gt; comparing the return value against</p>
<p>&gt; (HINSTANCE)32. That&#8217;ll work fine, too.</p>
<p>That looks like a promise. &nbsp;I&#8217;ve delayed a few hours and reread<br />
before posting, but it still looks the same. &nbsp;I don&#8217;t see anything<br />
that says &#8220;works even though it is incorrect&#8221;. &nbsp;Your later<br />
comments said what you meant, but your initial posting looks like a<br />
real promise.</p>
<p>&gt; Or you could cast the result to an INT_PTR</p>
<p>&gt; and compare the result against 32. That&#8217;s</p>
<p>&gt; fine, too.</p>
<p>That also looks like a real promise.</p>
<p>Obviously I&#8217;m not the only one who read it that way. &nbsp;Thank you<br />
for making corrections, even though you thermonucleated without<br />
justification.</p>
<p>Separate issue:</p>
<p>&gt; They&#8217;ll all work, because the implementor of</p>
<p>&gt; the ShellExecute function had to plan ahead</p>
<p>&gt; for you and all the other people who call the</p>
<p>&gt; ShellExecute function.</p>
<p>OK, I really don&#8217;t have much of a complaint about this kind of<br />
effort when it serves a useful purpose. &nbsp;My complaint is about<br />
priorities. &nbsp;I wish that implementors of other functions would<br />
plan ahead for readers and people who call functions as documented, and<br />
would make other functions work when they&#8217;re supposed to. &nbsp;I wish<br />
that kind of work would be given priority.</p>
<p>My second-latest experience isn&#8217;t quite an example of this wish.<br />
&nbsp;The Japanese version of StringCchPrintf falls over dead as soon<br />
as it hits a Japanese string in the Japanese version of Windows CE.<br />
&nbsp;Well, MSDN&#8217;s documentation for StringCchPrintf&#8217;s %S and %s<br />
formats is all garbled up in Windows CE, unlike ordinary Windows.<br />
&nbsp;Someone pointed out this means that the implementation isn&#8217;t<br />
really violating MSDN. &nbsp;That&#8217;s what makes this a not quite<br />
example. &nbsp;Nonetheless I wish that priority would be given to<br />
making APIs work.</p>
<div class="post">[<i>You may be shocked to realize that the people who<br />
work on the Japanese version of StringCchPrintf on Windows CE are not<br />
the same people who work on ShellExecute function. May I suggest that<br />
you re-read <a href="http://blogs.msdn.com/oldnewthing/archive/2006/07/13/664448.aspx" rel="nofollow">this article</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-440873">
				<div id="div-comment-440873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440873">
			November 9, 2006 at 6:21 am</a>		</div>

		<p>Most times backwards compatibility doesn&#8217;t mean extra code. It just means a constraint on the design parameters for your extension: that you can&#8217;t use certain values that are already defined, or you can&#8217;t change the meanings of existing parameters in the way that you might like.</p>
<p>This requires more care and attention when making changes, so that you don&#8217;t accidentally break old clients, and of course there&#8217;s extra code for the new features, but you rarely have to write new code for old features.</p>
<p>Sometimes compatibility code, if a mistake happened frequently enough, is placed in the main line of code. However, most errors have only occurred in a few programs, so the code to fix them is in a separately loadable shim, only loaded into programs known to have the problem. If you repeat the error, you may not get the shim and <em>your</em> program won&#8217;t work.</p>
<p>Compatibility shims are only required when there are clients which are expecting accidental behaviour, behaviour which wasn&#8217;t specified in the documentation but which happened to occur anyway. Of course here you need reliable, complete and accurate documentation in order to use the functions as designed. Microsoft&#8217;s developers get feedback from PSS as to the most frequent/most severe problems that customers are experiencing, but I&#8217;m not sure that the community resources are processed in the same way. In my experience developers don&#8217;t generally consult PSS unless there&#8217;s a serious blocking issue with a tool, which means that a lot of the problems are dealt with only by consulting peers &#8211; who only have the public resources. If those resources are erroneous or incomplete, we have to guess what the correct incantation is, and sometimes we guess wrong.</p>
<p>A lot of programmers seem to avoid recourse to books, which can be a helpful resource if the author has gained access to the development team and asked them to clarify how something is meant to work &#8211; this will then be more reliable than simply asking peers on a forum, newsgroup or mailing list. More dangerous is the type of book where the author has misunderstood something and <em>not</em> clarified it with the development team &#8211; this propogates the mistake through every program written by readers of the book. For &#8216;book&#8217;, read also &#8216;sample&#8217;, &#8216;magazine article&#8217;, &#8216;blog post&#8217; etc.</p>
<p>The .NET Framework team seems to have a rule that says every element &#8211; method, field or property &#8211; must have an XML doc comment, from which the documentation is generated. However, that metric says nothing about the quality of the comment, which can often be poor.</p>
<p>In my book, if you implement a feature in an API &#8211; any feature &#8211; you must <em>completely</em> document it: what it is, how you invoke it, when to use it, how it interacts with other features. Otherwise you risk this kind of erroneous interpretation of the feature that leads to compatibility problems down the road.</p>
<p>In my case I&#8217;m finding that on Windows CE, the SIO_ADDRESS_LIST_CHANGE notification isn&#8217;t working in my code &#8211; the event I&#8217;ve registered using WSAEventSelect isn&#8217;t being set when an address change occurs (which should happen when the WiFi radio comes into coverage). I can find no examples of how this call is meant to work. I&#8217;m probably going to change over to using NotifyAddrChange from the IP Helper API, which does have a sample.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-440803">
				<div id="div-comment-440803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Steward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440803">
			November 8, 2006 at 10:55 pm</a>		</div>

		<p>I think a lot of people are misreading this as a style guide. &nbsp;Maybe the &quot;should&quot;s have confused people? &nbsp;Raymond&#8217;s simply explaining the MSDN recommendation, which itself says *ignore* that it says it&#8217;s an HINSTANCE &#8211; it&#8217;s not one. &nbsp;You might think of it as an enum unioned with HINSTANCE. &nbsp;The only reason you can cast it to int is that&#8217;s part of the spec of the function.</p>
<p>I&#8217;d never taken the time to see what number it returns on success. &nbsp;I like that it&#8217;s 42: it makes me happy, in a Ctrl-Alt-Shift-in-About-boxes way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-440883">
				<div id="div-comment-440883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">koehli</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440883">
			November 9, 2006 at 8:47 am</a>		</div>

		<blockquote><p>
  &gt; You could cast in the other direction,</p>
<p>  &gt; comparing the return value against</p>
<p>  &gt; (HINSTANCE)32. That&#8217;ll work fine, too.</p>
<p>  That looks like a promise. &nbsp;I&#8217;ve delayed a few</p>
<p>  hours and reread before posting, but it still</p>
<p>  looks the same. &nbsp;I don&#8217;t see anything that</p>
<p>  says &quot;works even though it is incorrect&quot;.</p>
<p>  Your later comments said what you meant, but</p>
<p>  your initial posting looks like a real</p>
<p>  promise.
</p></blockquote>
<p>I personally am not a native speaker. You probably aren&#8217;t either and the intricacies of the English language can be rather daunting. I&#8217;ll try to explain it with an example.</p>
<p>&quot;The sky is blue.&quot; &#8211; This is a description of the weather. It&#8217;s not a promise. There is no temporal specification. The sky is blue now, but it might or might not be blue tomorrow.</p>
<p>&quot;I promise, the sky will be blue tomorrow.&quot; &#8211; This is a promise. It might hold true or it might get broken. But a promise it is.</p>
<p>In all of his post, Raymond never made a promise. He merely described the state as-is an the arising consequences. Hopefully this will help you with your language problems :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-440893">
				<div id="div-comment-440893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">C Gomez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440893">
			November 9, 2006 at 9:16 am</a>		</div>

		<p>New applications should do things the correct way. &nbsp;Microsoft deprecates APIs, certain usages of APIs, or even certain incorrect usages of APIs. &nbsp;That is like a warning: &quot;Everyone, this can go away someday.&quot;</p>
<p>As new applications replace old, and older code (even 16-bit code) falls away, MSFT can make the &quot;breaking change&quot; that stops that code from working. &nbsp;That same &quot;breaking change&quot; provides needed stability to new apps, because the newer API, usage, return value, exception, etc., is more deterministic or &quot;better&quot; in some way.</p>
<p>This behavior can go away someday. &nbsp;Stop using it. &nbsp;Fix old code if you can (often you can&#8217;t).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-440913">
				<div id="div-comment-440913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">required</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440913">
			November 9, 2006 at 10:13 am</a>		</div>

		<blockquote><p>
  In all of his post, Raymond never made a promise.
</p></blockquote>
<p>No, however, and I think this is the point others are trying to make: we know that Microsoft will bend over backwards to make existing apps not break under new versions of Windows, so if enough people read things like this and do the wrong-but-works-ok thing then even if MS wants to tighten things up, they can&#8217;t, because then they&#8217;ll break compatability. This is exactly what Elijah was saying &#8211; those of us who take time to try and do things the right way will be trampled by the hordes who have read something somewhere on a webpage that says &quot;it works ok this way&quot;, because MS will actually reward them for it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-440863">
				<div id="div-comment-440863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Elijah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440863">
			November 9, 2006 at 4:39 am</a>		</div>

		<p>&#8220;Does nobody else understand the sentence &#8220;X works even though it is incorrect&#8221;?&#8221;</p>
<p>But you&#8217;re not saying &#8220;X works&#8221;, you&#8217;re saying &#8220;X *will* work&#8221;. To<br />
me, that sounds like a guarantee that MS is *not* going to change the<br />
behaviour so that &#8220;incorrect&#8221; usage breaks; that the behaviour *is*<br />
&#8220;defined&#8221;</p>
<p>What is correct/incorrect/defined/undefined usage of an API?<br />
Correct/defined usage is that which is guaranteed to work, now and in<br />
future versions.</p>
<p>You&#8217;re saying that &#8220;incorrectly&#8221; casting the HRESULT to an INT_PTR<br />
and comparing works now and is *guaranteed* to work in the future. So<br />
under what definition is that behaviour &#8220;incorrect&#8221; or &#8220;undefined&#8221;? The<br />
documentation?!? Hmph &#8211; it wouldn&#8217;t be the first time MSDN is wrong/out<br />
of date.</p>
<p>Unless you can say that MS *might* change the behaviour of<br />
ShellExecute() in the future in such a way that could break &#8220;incorrect&#8221;<br />
usage of the API, I don&#8217;t see how you can possibly claim that that<br />
behaviour is &#8220;undefined&#8221;.</p>
<p>So, if MS are going to guarantee that current uses of an API<br />
continue to work in the future, no matter how &#8220;incorrect&#8221; it is<br />
according to the docs, in order to support the idiots who don&#8217;t read<br />
them, why should *I* bother reading the docs? Why don&#8217;t I just make my<br />
apps depend on whatever the current behaviour is, no matter what the<br />
docs say?</p>
<p>I&#8217;m off to make my next app depend on being able to invalidate the<br />
NULL window. If MS are not going to punish anyone else for doing it, I<br />
don&#8217;t care if they have to support it for another 100 years. No skin<br />
off my nose.</p>
<div class="post">[<i>The use of the future tense was for narrative fluency.<br />
</i></p>
<p>
<i>&#8220;Go out on the porch and you&#8217;ll find a surprise.&#8221;<br />
</i></p>
<p>
<i>&#8220;Is that a promise that in the future there will always be a surprise for me when I go out on the porch?&#8221;<br />
</i></p>
<p>
<i>&#8220;Of course not. I&#8217;m saying that there is a surprise there right now.&#8221;<br />
</i></p>
<p>
<i>&#8220;Well, when you used the future tense, I assumed you were making a guarantee about future behavior.&#8221;<br />
</i></p>
<p>
<i>&#8220;Stop it already. You&#8217;re doing this on purpose just to annoy me.&#8221;<br />
</i></p>
<p>
<i>The guarantee is that if you follow the documentation, it will work. -Raymond</i>]</p>
</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-441143">
				<div id="div-comment-441143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/freeassociations/default.aspx' rel='external nofollow' class='url'>Zeke</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-441143">
			November 9, 2006 at 4:19 pm</a>		</div>

		<p>The real tax of compatibility code is not size bloat but rather cognitive bloat. &nbsp;Constraining the error codes ShellExec() returns is never very much code, but the comment blocks describing why devs need to maintain the behavior can be huge. &nbsp;I can think of many places in the code that are essentially a simple test of maybe a couple of parameters resulting in maybe half a dozen instructions. &nbsp;However the comment block explaining why the test exists and how its behavior is constrained could easily be a couple orders bigger.</p>
<p>Often those comment blocks are more like Raymond&#8217;s stories. &nbsp;To be honest I have a pride for a good comment block that often can&#8217;t be equaled by the code it is commenting. &nbsp;Being a good developer is less about writing the &quot;right&quot; code and more about making the &quot;right&quot; tradeoffs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-440933">
				<div id="div-comment-440933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">koehli</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440933">
			November 9, 2006 at 10:58 am</a>		</div>

		<p>&#8220;</p>
<p>&gt; In all of his post, Raymond never made a promise.</p>
<p>No, however, and I think this is the point others are trying to make: we know that Microsoft will bend over backwards to make existing apps not break under new versions of Windows, so if enough people read things like this and do the wrong-but-works-ok thing then even if MS wants to tighten things up, they can&#8217;t, because then they&#8217;ll break compatability. This is exactly what Elijah was saying &#8211; those of us who take time to try and do things the right way will be trampled by the hordes who have read something somewhere on a webpage that says &#8220;it works ok this way&#8221;, because MS will actually reward them for it. &#8220;</p>
<p>So let me get this straight. You are not having a problem yourself, your code keeps working as prmised. However, you are explaining, that MS does NOT break other peoples software, so your software looks better in comparison? </p>
<p>You&#8217;re such an idealistic and altruistic person, really loveable. &#8220;Mom, mom, Peter is watching television again, punish him&#8221; :-) Besides I don&#8217;t think reading the MSDN docs really slows you down. Reading complete and correct documentation usually is much faster than the trial and error way to find out what a function does. Of course you first have to realize that the *only* way to use the MSDN efficiently and not get lost in gazillions of irrelevant pages is Google :/</p>
<div class="post">[<i>Perhaps the solution is for me to stop writing &#8220;behind the scenes&#8221; articles. Less work for me. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-440953">
				<div id="div-comment-440953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Elijah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-440953">
			November 9, 2006 at 11:26 am</a>		</div>

		<p>OK, OK, sorry!</p>
<p>I&#8217;m just used to a more rigorous discussion of APIs, where &quot;Can I do X?&quot; means &quot;Does the API guarantee that I can do X?&quot;, and an unqualified reply of &quot;you can do X&quot; (*especially* where the replier is very knowledgable and well-respected, such as yourself w.r.t Win32) is taken to mean &quot;The API guarantees you can do X; any implementation (including future implementations) that does not do X is broken&quot;.</p>
<p>I like your &quot;behind the scenes&quot; articles a lot. I don&#8217;t *want* to annoy you or to get you to stop posting them. I&#8217;m just carrying over the rules of how language is used from a more similar environment than that of people giving each other surprise gifts.</p>
<p>I&#8217;ll try to leave my API-discussion preconceptions back in comp.lang.c.moderated for your next insider article. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-441203">
				<div id="div-comment-441203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-441203">
			November 9, 2006 at 8:31 pm</a>		</div>

		<p>&gt; You may be shocked to realize that the people</p>
<p>&gt; who work on the Japanese version of</p>
<p>&gt; StringCchPrintf on Windows CE are not the same</p>
<p>&gt; people who work on ShellExecute function. May</p>
<p>&gt; I suggest that you re-read this article.</p>
<p>I looked again at the linked article.</p>
<p>Thank you for not being shocked to realize that your company is a glass house.</p>
<p>I still wish that your company would give a higher priority to making APIs work correctly than to making defective programs work. &nbsp;As stated, I don&#8217;t really object to the effort of making defective programs work, I object to your glass house&#8217;s sense of priorities.</p>
<p>And you replied to Elijah:</p>
<p>&gt; The guarantee is that if you follow the</p>
<p>&gt; documentation, it will work.</p>
<p>As mentioned, my second-latest experience was a not-quite-example, but there are lots of other examples where that guarantee is still just so much shi*. &nbsp;The fact is that if you follow the documentation then 75% of it will work. &nbsp;You always have to experiment after reading an MSDN page, to see whether or not it&#8217;s in the 75% that&#8217;s reliable.</p>
<p>Thursday, November 09, 2006 8:47 AM by koehli </p>
<p>&gt; I personally am not a native speaker. You</p>
<p>&gt; probably aren&#8217;t either</p>
<p>[of English]</p>
<p>Actually I am but I&#8217;ve been away long enough to have some misunderstandings of the current version. &nbsp;Nonetheless a statement &#8220;you could do X&#8221; followed by &#8220;that&#8217;ll work&#8221; looks a lot more like a promise than a temporary empirical observation.</p>
<div class=post>[<i>Please go back and read the <a href="http://blogs.msdn.com/oldnewthing/archive/2004/02/21/77681.aspx" rel="nofollow">ground rules</a>. All postings are provided &#8220;AS IS&#8221; with no warranties and confer no rights. There are no promises in the legal sense of the word. As I already noted, the &#8220;that&#8217;ll work&#8221; was part of the conversational style. I am <u>not</u> going to switch to a formal writing style so you&#8217;ll just have to accept it. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-441223">
				<div id="div-comment-441223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-441223">
			November 9, 2006 at 9:06 pm</a>		</div>

		<p>Norman: I think you need to remember that Raymond is a person. He is not Microsoft. He is not anyone else at Microsoft. When he says something, it is NOT with the full weight of the entire company behind him.</p>
<p>It&#8217;s like if I tell you &quot;the weather will be fine tomorrow.&quot; I don&#8217;t have the power to affect the weather, but given the current conditions (it&#8217;s fine today) and past experience (when it&#8217;s fine today, it&#8217;s usually fine tomorrow as well) I can make that statement.</p>
<p>When Raymond says &quot;you can cast 32 to an HINSTANCE and compare,&quot; he ALSO doesn&#8217;t have the power to affect company policy at Microsoft, but given the current conditions (it works today) and past experience (Microsoft tries hard to make sure the things that work today will also work tomorrow), he can make that statement.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-441293">
				<div id="div-comment-441293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">required</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-441293">
			November 10, 2006 at 3:07 am</a>		</div>

		<blockquote><p>
  so your software looks better in comparison?
</p></blockquote>
<p>No, quite the contrary. My software looks /worse/ by comparison because it takes longer to develop.</p>
<blockquote><p>
  You&#8217;re such an idealistic and altruistic person, really loveable.
</p></blockquote>
<p>Aw, diddums.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-441303">
				<div id="div-comment-441303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">required</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-441303">
			November 10, 2006 at 3:12 am</a>		</div>

		<blockquote><p>
  you&#8217;ll just have to accept it
</p></blockquote>
<p>I wonder how many times you have already had this conversation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-441543">
				<div id="div-comment-441543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaron G</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-441543">
			November 10, 2006 at 1:25 pm</a>		</div>

		<p>How does anything that Raymond says on a blog constitute an explicit &quot;promise&quot; from Microsoft regarding the behaviour of some API?</p>
<p>We read these posts (or at least I do) to get an understanding of *why* some of the more bizarre aspects of the API are the way they are. &nbsp;If that understanding leads one to the additional knowledge that an API might still work correctly if used improperly, so be it; that&#8217;s still not some sort of binding contract, and Raymond has often highlighted the difference between documented (and thus supported) behaviour and undocumented hacks.</p>
<p>I&#8217;m personally grateful to have such a window into the inner workings of a monolithic (and eccentric) OS that I use virtually every day of my life. &nbsp;And I think it&#8217;s a little sad that some people can be so dismissive of compatibility issues; I suppose you would prefer the MSDN Mag types who obsolete entire frameworks after a year or two. &nbsp;And who don&#8217;t bother to maintain compatibility, for example, between different versions of WSE (a product whose sole purpose is essentially to promote compatibility between platforms).</p>
<p>As for draconian measures involving logo apps and such, Microsoft has already been involved in various anti-trust suits. &nbsp;It would be really, really awful politics (not to mention bad business) for them to try to enforce any kind of policy on Windows developers. &nbsp;I&#8217;d go so far as to call it clueless.</p>
<p>I hope you don&#8217;t decide to quit posting because of a few cranks, Raymond. &nbsp;I&#8217;m sure that the number of times someone has implemented an unsupported compatibility hack after reading about it on your blog is positively dwarfed by the number of times it&#8217;s happened on CodeProject or ExpertSexChange.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-441883">
				<div id="div-comment-441883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-441883">
			November 11, 2006 at 8:07 pm</a>		</div>

		<p>Many of us here think these articles are a lot of fun, and in some cases cool brain teasers.</p>
<p>Personnally I don&#8217;t understand the four or five people who react angrily to these articles, and I don&#8217;t think they reflect all the lurkers to this blog. &nbsp;</p>
<p>I&#8217;m guessing they&#8217;re not in the &#8216;frame of mind&#8217; of us engineer who need to maintain libraries and need to balance binary compatibility between version.</p>
<p>I totally understand that as soon are you begin to being limited in what kind of HINSTANCE values you can return due to a poor design spec of the original API &#8211; for example, nothing greater than 15 bit &#8211; you might as well just return a constant that has no specific meaning. &nbsp;It&#8217;s actually the most elegant solution in that situation.</p>
<p>About the &quot;congitive bloat&quot;, franky&#8230; the API can never really change after it&#8217;s published. &nbsp;That why you have ShellExecuteEx.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-441893">
				<div id="div-comment-441893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://levicki.blogspot.com/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-441893">
			November 11, 2006 at 8:13 pm</a>		</div>

		<p>&quot;[Again, I already explained why ShellExecute returns an HINSTANCE. If you want a function that returns a BOOL and an output pointer, use ShellExecuteEx. -Raymond]&quot;</p>
<p>See, that&#8217;s the point. Microsoft should&#8217;ve said &quot;We are doing a major cleanup for the next operating system release because customers demanded stability and security. As a result, all poorly designed APIs (list follows) will be deprecated and will no longer work. Fix your programs today to make sure it will work in the future. Vista 2 is around the corner, don&#8217;t be caught with your pants down.&quot;</p>
<p>In essence that means that ShellExecute() should return failure in future OS and only ShellExecuteEx() should work. Same goes for all other legacy junk. Throw it out already.</p>
<p>To the bloke concerned with big corporations and their compatibility issues &#8212; what happened to real world competition? Natural selection?? Evolution???</p>
<p>Why everyone expects Microsoft to jump through hoops so that some crappy company can stay in business with their crappy software?!?</p>
<p>Let them fill that bankruptcy form and get a better software solution for your business &#8212; one which works without workarounds.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-441903">
				<div id="div-comment-441903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deadnode.org/' rel='external nofollow' class='url'>James</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-441903">
			November 12, 2006 at 6:14 am</a>		</div>

		<p>Igor: If Vista 2 won&#8217;t run the applications businesses depend on, they won&#8217;t change the applications so they can use Vista 2 &#8211; they&#8217;ll stick with the previous version, which does what they actually need Windows to do for them: run their software.</p>
<p>Now, they could move deprecated APIs into &#8216;legacy.dll&#8217; and warn people when their applications are using old interfaces &#8211; but a version of Windows which can&#8217;t run them is a version of Windows which will stay on the shelf. &quot;Deprecated&quot; is one thing &#8211; &quot;will no longer work&quot; just won&#8217;t fly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-442643">
				<div id="div-comment-442643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.alternateinterior.com/2006/11/history-of-the-world-part-xiv-wherein-php-assumes-babysitting-responsibilities.html' rel='external nofollow' class='url'>History of the World Part XIV: Wherein PHP Assumes Babysitting Responsibilities &raquo; Alternate Interior: Implicit Evaluation with PHP</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-442643">
			November 14, 2006 at 9:12 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.alternateinterior.com/2006/11/history-of-the-world-part-xiv-wherein-php-assumes-babysitting-responsibilities.html" rel="nofollow">http://www.alternateinterior.com/2006/11/history-of-the-world-part-xiv-wherein-php-assumes-babysitting-responsibilities.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-525773">
				<div id="div-comment-525773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2007/07/16/3885472.aspx' rel='external nofollow' class='url'>The Old New Thing : How are window manager handles determined in 16-bit Windows and Windows 95?</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-525773">
			July 16, 2007 at 11:48 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2007/07/16/3885472.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2007/07/16/3885472.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-529123">
				<div id="div-comment-529123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2007/07/23/4003873.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-529123">
			July 23, 2007 at 12:46 pm</a>		</div>

		<p>It&#8217;s in the design.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-535493">
				<div id="div-comment-535493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2007/08/10/4315707.aspx' rel='external nofollow' class='url'>The Old New Thing : Things I've written that have amused other people, Episode 4</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061108-05/?p=29083#comment-535493">
			August 13, 2007 at 10:59 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2007/08/10/4315707.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2007/08/10/4315707.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

