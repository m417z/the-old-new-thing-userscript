<html>
<head>
<title>The ARM processor architecture: Somebody else's introduction</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The ARM processor architecture: Somebody else&#8217;s introduction</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 11, 2015 / year-entry #168</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150811-01/?p=91121</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">While you wait for me to write the Alpha AXP processor architecture overview,¹ I'd like to direct your attention to the ARM processor architecture overview written up by Marion Cole over at the NT Debugging blog. I hope that'll keep you busy for a little while longer. Understanding ARM Assembly Part 1: Processor features. Understanding...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>While you wait for me to write the Alpha AXP processor architecture
overview,&sup1; I'd like to direct your attention to the ARM processor
architecture overview written up by Marion Cole over at the NT Debugging blog.
I hope that'll keep you busy for a little while longer.</p>
<ul>
<li>
    <a href="http://blogs.msdn.com/b/ntdebugging/archive/2013/11/22/understanding-arm-assembly-part-1.aspx">
    Understanding ARM Assembly Part 1</a>:
    Processor features.
</li>
<li>
    <a href="http://blogs.msdn.com/b/ntdebugging/archive/2014/05/15/understanding-arm-assembly-part-2.aspx">
    Understanding ARM Assembly Part 2</a>:
    How Windows uses the processor.
</li>
<li>
    <a href="http://blogs.msdn.com/b/ntdebugging/archive/2014/05/29/understanding-arm-assembly-part-3.aspx">
    Understanding ARM Assembly Part 3</a>:
    Calling conventions.
</li>
</ul>
<p>&sup1; Spoiler alert: Don't hold your breath.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1209671">
				<div id="div-comment-1209671" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150811-01/?p=91121#comment-1209671">
			August 11, 2015 at 8:48 am</a>		</div>

		<p>It&#39;s interesting to compare this 3-part series with Raymond&#39;s 10-part series on the IA-64. ARM is way simpler! Simpler to understand, simpler to generate code for it, and simpler to implement in hardware (which is why it&#39;s popular as an embedded processor).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1209661">
				<div id="div-comment-1209661" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150811-01/?p=91121#comment-1209661">
			August 11, 2015 at 9:33 am</a>		</div>

		<p>Awww, the AXP thing sounds great! &nbsp;The Itanium series was far more interesting then I expected, and I learned a lot from it. &nbsp;I hope you change your mind. &nbsp;Do you have first hand experience on any other &quot;novel&quot; processor architectures?</p>
<div class="post">[<em>The AXP series is coming, but I have to write it first! -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1209651">
				<div id="div-comment-1209651" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rw</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150811-01/?p=91121#comment-1209651">
			August 11, 2015 at 9:48 am</a>		</div>

		<p>Also ARM has it&#39;s weirdness. Immediate values in opcodes are only 8 bit, which makes it hard to load registers with constants. Loading an address to a register would take (up to) 4 instructions, therefore ARM code usually loads the constants from memory. Problem still not solved, because now we need the address of the constant. As the PC is one of the general purpose registers (R15), constants are loaded from a PC relative address (Rd=[R15+offset]). This leads to blocks of constants between each function, which is disadvantageous for cache (how to prevent that constants are loaded to instruction cache) and MMU (how to ensure there are no execution rights on addresses with data). (Does not apply to ARMv8, which is a completely different beast)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1209641">
				<div id="div-comment-1209641" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">fabian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150811-01/?p=91121#comment-1209641">
			August 11, 2015 at 9:58 am</a>		</div>

		<p>@rw</p>
<p>Actually, immediates can be 12 and 16 bits as well, for instance with &quot;ldr r0, [r0, #0xfff]&quot; or &quot;movw r0, #0xdead&quot;.</p>
<p>movw/movt is used to load any 32-bit value into a register.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1209631">
				<div id="div-comment-1209631" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rw</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150811-01/?p=91121#comment-1209631">
			August 11, 2015 at 10:22 am</a>		</div>

		<p>@fabian</p>
<p>You are right, but movw/movt are relatively new opcodes. Introduced with the ARM11 in 2002, so not supported on the oh so famous ARM7. If you have to write portable code, you can&#39;t use movw/movt. I wrote a ROM monitor for ARM 10+ years ago, and haven&#39;t been in much touch with ARM since then. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1209621">
				<div id="div-comment-1209621" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150811-01/?p=91121#comment-1209621">
			August 11, 2015 at 10:41 am</a>		</div>

		<p>It&#39;s an interesting decision on ARMv7-Thumb2 Windows NT, also known as Windows RT and Windows Phone, to have the kernel force the Thumb bit to 1 in the CPSR. &nbsp;It means that runtime code generation cannot be used to generate ARM code, only Thumb2.</p>
<p>Some people I know weren&#39;t able to port Chrome to Windows RT desktop mode because of this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1209611">
				<div id="div-comment-1209611" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sense</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150811-01/?p=91121#comment-1209611">
			August 11, 2015 at 1:01 pm</a>		</div>

		<p>@rw:</p>
<p>Perhaps I&#39;m wrong, because I&#39;m not familiar with ARM, but it seems to me that loading the constants by an immediate value would NOT differ from what you describe: </p>
<p>They will be loaded from &quot;executable&quot; memory. And they will put pressure on instruction cache I presume.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1209591">
				<div id="div-comment-1209591" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150811-01/?p=91121#comment-1209591">
			August 11, 2015 at 2:20 pm</a>		</div>

		<p>I presume if you start writing the AXP series that it will debut sometime in 2017. &nbsp;(This is OK with me &#8212; while I enjoyed the Itanium series, I only care to delve at that low level every few years or so)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1209571">
				<div id="div-comment-1209571" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Z</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150811-01/?p=91121#comment-1209571">
			August 11, 2015 at 4:25 pm</a>		</div>

		<p>I think it would be cool if Raymond wrote an overview of x86 idiosyncrasies and the things the windows team had to do to deal with them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1209561">
				<div id="div-comment-1209561" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rw</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150811-01/?p=91121#comment-1209561">
			August 12, 2015 at 1:03 am</a>		</div>

		<p>@sense:</p>
<p>Immediates inside instructions reach the register through an instruction fetch, whereas PC relative constants reach the register through a load. Instruction fetch (aka execution), data load and data store usually have separate permission flags in the memory management unit. </p>
<p>Ideally you would want to have four separate address ranges: One for code with only execution permission, one for data with read/write permission, one for the stack (r/w), and one read-only for constants.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1209551">
				<div id="div-comment-1209551" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150811-01/?p=91121#comment-1209551">
			August 12, 2015 at 5:07 am</a>		</div>

		<p>@rw: Why would putting constants in the text section put pressure on the MMU w.r.t ensuring there are no execution rights on addresses with data? As these are constants, surely it would be possible to keep the text pages non-writeable, so there shouldn&#39;t be any danger of someone putting exploits there to execute?</p>
<p>Or is it to protect against the data accidentally having a useful meaning in machine code, and being used that way. (Would that be a variant of ROP?)</p>
<div class="post">[<em>It means that the constants occupy space both in the I-cache (sharing a cache line with live code) and in the D-cache (because they are accessed as data, causing other instructions to get pulled into D-cache too). -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1209481">
				<div id="div-comment-1209481" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rw</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150811-01/?p=91121#comment-1209481">
			August 12, 2015 at 8:19 am</a>		</div>

		<p>@Karellen: If an attacker finds an exploit that allows dumping memory locations, it can be used to dump the program code, if the MMU gives read permission for text pages. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1209441">
				<div id="div-comment-1209441" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150811-01/?p=91121#comment-1209441">
			August 12, 2015 at 9:22 am</a>		</div>

		<p>@Daniel Z: &quot;overview of x86 idiosyncrasies&quot;</p>
<p>Intel has this much covered at least. It&#39;s called the &quot;IntelÂ® 64 and IA-32 Architectures Software Developerâs Manuals&quot;.</p>
<p>&lt;/snark&gt; :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1209351">
				<div id="div-comment-1209351" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150811-01/?p=91121#comment-1209351">
			August 13, 2015 at 1:08 am</a>		</div>

		<p>@Daniel Z: &quot;overview of x86 idiosyncrasies&quot;</p>
<p>Raymond wrote about x86, in fact, it&#39;s the only CPU that is &quot;being too nice&quot; to the developers, forgiving what other CPUs (relevant to MSFT at the time the post was written) didn&#39;t:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2004/09/14/229387.aspx">blogs.msdn.com/&#8230;/229387.aspx</a></p>
<p>It seems that debugging is also often significantly easier with x86.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00037ffe85d3fad1 even thread-even depth-1" id="comment-1208871">
				<div id="div-comment-1208871" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/David+Solimano' rel='external nofollow' class='url'>David Solimano</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150811-01/?p=91121#comment-1208871">
			August 14, 2015 at 12:26 pm</a>		</div>

		<p>I&#39;m a bit of a lurker, but I wanted to thank you for the IA-64 series, it was great. &nbsp;For a change! &nbsp;Rimshot. &nbsp;Just kidding, this blog is pretty much all great, even the 8-part series on scrollbars.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

