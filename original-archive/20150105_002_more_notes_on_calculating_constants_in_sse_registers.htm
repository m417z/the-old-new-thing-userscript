<html>
<head>
<title>More notes on calculating constants in SSE registers</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>More notes on calculating constants in SSE registers</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 5, 2015 / year-entry #3</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150105-00/?p=43223</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A few weeks ago I noted some tricks for creating special bit patterns in all lanes, but I forgot to cover the case where you treat the 128-bit register as one giant lane: Setting all of the least significant N bits or all of the most significant N bits. This is a variation of the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A few weeks ago <a href="http://blogs.msdn.com/b/oldnewthing/archive/2014/12/15/10580665.aspx"> I noted some tricks for creating special bit patterns in all lanes</a>, but I forgot to cover the case where you treat the 128-bit register as one giant lane: Setting all of the least significant <var>N</var> bits or all of the most significant <var>N</var> bits.</p>
<p> This is a variation of the trick for setting a bit pattern in all lanes, but the catch is that the <code>pslldq</code> instruction shifts by bytes, not bits. </p>
<p> We'll assume that <var>N</var> is not a multiple of eight, because if it were a multiple of eight, then the <code>pslldq</code> or <code>psrldq</code> instruction does the trick (after using <code>pcmpeqd</code> to fill the register with ones). </p>
<p> One case is if <var>N</var> &le; 64. This is relatively easy because we can build the value by first building the desired value in both 64-bit lanes, and then finishing with a big <code>pslldq</code> or <code>psrldq</code> to clear the lane we don't like. </p>
<table border="0" style="border-collapse: collapse">
<tr>
<td colspan="11"><code>;</code> set the bottom <var>N</var> bits, where <var>N</var> &le; 64</td>
</tr>
<tr>
<td><code>pcmpeqd xmm0, xmm0</code></td>
<td><code>;</code></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td></td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td colspan="2"></td>
<td colspan="4" align="center" style="border: solid black; border-width: 0px 1px">unsigned shift right<br>64 &minus; <var>N</var> bits</td>
<td colspan="4" align="center" style="border: solid black; border-width: 0px 1px">unsigned shift right<br>64 &minus; <var>N</var> bits</td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td><code>psrlq &nbsp; xmm0, 64 - N</code></td>
<td><code>;</code>     </td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0FFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0FFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td colspan="2"></td>
<td colspan="8" align="center" style="border: solid black; border-width: 0px 1px">unsigned shift right 64 bits</td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td><code>psrldq &nbsp;xmm0, 8</code></td>
<td><code>;</code>     </td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0FFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
</tr>
<tr>
<td colspan="11">&nbsp;</td>
</tr>
<tr>
<td colspan="11"><code>;</code> set the top <var>N</var> bits, where <var>N</var> &le; 64</td>
</tr>
<tr>
<td><code>pcmpeqd xmm0, xmm0</code></td>
<td><code>;</code></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td colspan="2"></td>
<td colspan="4" align="center" style="border: solid black; border-width: 0px 1px">unsigned shift left<br>64 &minus; <var>N</var> bits</td>
<td colspan="4" align="center" style="border: solid black; border-width: 0px 1px">unsigned shift left<br>64 &minus; <var>N</var> bits</td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td><code>psllq &nbsp; xmm0, 64 - N</code></td>
<td><code>;</code></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFF0</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFF0</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td colspan="2"></td>
<td colspan="8" align="center" style="border: solid black; border-width: 0px 1px">unsigned shift left 64 bits</td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td><code>pslldq &nbsp;xmm0, 8</code></td>
<td><code>;</code></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFF0</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
</tr>
</table>
<p> If <var>N</var> &ge; 80, then we shift in zeroes into the top and bottom half, but then use a shuffle to patch up the half that needs to stay all-ones. </p>
<table border="0" style="border-collapse: collapse; text-align: center">
<tr>
<td colspan="11" align="left"><code>;</code> set the bottom <var>N</var> bits, where <var>N</var> &ge; 80</td>
</tr>
<tr>
<td align="left"><code>pcmpeqd xmm0, xmm0</code></td>
<td align="left"><code>;</code></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td></td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td colspan="2"></td>
<td colspan="4" style="border: solid black; border-width: 0px 1px">unsigned shift right<br>128 &minus; <var>N</var> bits</td>
<td colspan="4" style="border: solid black; border-width: 0px 1px">unsigned shift right<br>128 &minus; <var>N</var> bits</td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td align="left"><code>psrlq &nbsp; xmm0, 128 - N</code></td>
<td align="left"><code>;</code></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0FFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0FFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td colspan="2"></td>
<td colspan="4" style="border: solid black; border-width: 0px 1px">copy</td>
<td colspan="3">shuffle</td>
<td style="border: solid black; border-width: 0px 1px">&darr;</td>
</tr>
<tr>
<td colspan="2"></td>
<td style="border-left: solid 1px black">&darr;</td>
<td>&darr;</td>
<td>&darr;</td>
<td style="border-right: solid 1px black">&darr;</td>
<td style="border-right: solid 1px black">&#8601;</td>
<td style="border-right: solid 1px black">&#8601;</td>
<td style="border-right: solid 1px black">&#8601;</td>
<td style="border-right: solid 1px black">&darr;</td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<td align="left"><code>pshuflw xmm0, _MM_SHUFFLE(0, 0, 0, 0)</code></td>
<td align="left"><code>;</code></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0FFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<tr>
<td colspan="11">&nbsp;</td>
</tr>
<tr>
<td colspan="11" align="left"><code>;</code> set the top <var>N</var> bits, where N &ge; 80</td>
</tr>
<tr>
<td align="left"><code>pcmpeqd xmm0, xmm0</code></td>
<td align="left"><code>;</code></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td colspan="2"></td>
<td colspan="4" style="border: solid black; border-width: 0px 1px">unsigned shift left<br>128 &minus; <var>N</var> bits</td>
<td colspan="4" style="border: solid black; border-width: 0px 1px">unsigned shift left<br>128 &minus; <var>N</var> bits</td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td align="left"><code>psllq &nbsp; xmm0, 128 - N</code></td>
<td><code>;</code></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFF0</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFF0</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td colspan="2"></td>
<td style="border: solid black; border-width: 0px 1px">&darr;</td>
<td colspan="3">shuffle</td>
<td colspan="4" style="border: solid black; border-width: 0px 1px">copy</td>
</tr>
<tr>
<td colspan="2"></td>
<td style="border-left: solid 1px black">&darr;</td>
<td style="border-left: solid 1px black">&#8600;</td>
<td style="border-left: solid 1px black">&#8600;</td>
<td style="border-left: solid 1px black">&#8600;</td>
<td style="border-left: solid 1px black">&darr;</td>
<td>&darr;</td>
<td>&darr;</td>
<td style="border-right: solid 1px black">&darr;</td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td align="left"><code>pshufhw xmm0, _MM_SHUFFLE(3, 3, 3, 3)</code></td>
<td><code>;</code></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFF0</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
</tr>
</table>
<p> We have <var>N</var> &ge; 80, which means that 128 - <var>N</var> &le; 48, which means that there are at least 16 bits of ones left in low-order bits after we shift right. We then use a 4&times;16-bit shuffle to copy those known-all-ones 16 bits into the other lanes of the lower half. (A similar argument applies to setting the top bits.) </p>
<p> This leaves 64 &lt; <var>N</var> &lt; 80. That uses a different trick: </p>
<table border="0" style="border-collapse: collapse; text-align: center">
<tr>
<td colspan="11" align="left"><code>;</code> set the bottom <var>N</var> bits, where <var>N</var> &le; 120</td>
</tr>
<tr>
<td align="left"><code>pcmpeqd xmm0, xmm0</code></td>
<td><code>;</code></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td colspan="2"></td>
<td colspan="8" style="border: solid black; border-width: 0px 1px">unsigned shift right 8 bits</td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td align="left"><code>psrldq &nbsp;xmm0, 1</code></td>
<td><code>;</code></td>
<td style="border: solid 1px black"><tt>00FF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td colspan="2"></td>
<td colspan="4" style="border: solid black; border-width: 0px 1px">signed shift right<br>120 &minus; <var>N</var> bits</td>
<td colspan="4" style="border: solid black; border-width: 0px 1px">signed shift right<br>120 &minus; <var>N</var> bits</td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td align="left"><code>psrad &nbsp;xmm0, 120 - N</code></td>
<td><code>;</code></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>00FF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
</tr>
</table>
<p> The sneaky trick here is that we use a <i>signed</i> shift in order to preserve the bottom half. Unfortunately, there is no corresponding left shift that shifts in ones, so the best I can come up with is four instructions: </p>
<table border="0" style="border-collapse: collapse; text-align: center">
<tr>
<td colspan="11" align="left"><code>;</code> set the top <var>N</var> bits, where 64 &le; <var>N</var> &le; 96</td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td align="left"><code>pcmpeqd xmm0, xmm0</code></td>
<td><code>;</code></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
</tr>
<tr>
<td colspan="2"></td>
<td colspan="4" style="border: solid black; border-width: 0px 1px">unsigned shift left<br>96 &minus; <var>N</var> bits</td>
<td colspan="4" style="border: solid black; border-width: 0px 1px">unsigned shift left<br>96 &minus; <var>N</var> bits</td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td align="left"><code>psllq &nbsp; xmm0, 96 - N</code></td>
<td><code>;</code></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFF0</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFF0</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td colspan="2"></td>
<td colspan="8" style="border: solid black; border-width: 0px 1px">shuffle</td>
</tr>
<tr>
<td colspan="2"></td>
<td colspan="2" style="border: solid black; border-width: 0px 1px">&darr;</td>
<td colspan="2">&#8600;</td>
<td colspan="2" style="border-left: solid 1px black">&darr;</td>
<td colspan="2" style="border: solid black; border-width: 0px 1px">&darr;</td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td align="left"><code>pshufd &nbsp;xmm0, _MM_SHUFFLE(3, 3, 1, 0)</code></td>
<td><code>;</code></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFF0</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td colspan="2"></td>
<td colspan="8" style="border: solid black; border-width: 0px 1px">unsigned shift left 32 bits</td>
</tr>
<tr>
<td colspan="11" style="height: 5px"></td>
</tr>
<tr>
<td align="left"><code>pslldq &nbsp;xmm0, 4</code></td>
<td><code>;</code></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FFFF</tt></td>
<td style="border: solid 1px black"><tt>FF00</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
<td style="border: solid 1px black"><tt>0000</tt></td>
</tr>
</table>
<p> We view the 128-bit register as four 32-bit lanes. split the shift into two steps. First, we fill Lane&nbsp;0 with the value we ultimately want in Lane&nbsp;1, then we patch up the damage we did to Lane&nbsp;2, then we do a shift the 128-bit value left 32 places to slide the value into position and zero-fill Lane&nbsp;0. </p>
<p> Note that a lot of the ranges of <var>N</var> overlap, so you often have a choice of solutions. There are other three-instruction solutions I didn't bother presenting here. The only one I couldn't find a three-instruction solution for was setting the top <var>N</var> bits where 64 &lt; <var>N</var> &lt; 80. </p>
<p> If you find a three-instruction solution for this last case, share it in the comments. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1169813">
				<div id="div-comment-1169813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ryan Phelps</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150105-00/?p=43223#comment-1169813">
			January 5, 2015 at 10:21 am</a>		</div>

		<p>What have you been working on that this stuff is coming up? &nbsp;Or is it just a hobby?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1169853">
				<div id="div-comment-1169853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Al Go</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150105-00/?p=43223#comment-1169853">
			January 5, 2015 at 2:23 pm</a>		</div>

		<p>He got tired of counting the ways he could arrange balls into boxes. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1169863">
				<div id="div-comment-1169863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150105-00/?p=43223#comment-1169863">
			January 5, 2015 at 6:23 pm</a>		</div>

		<p>Ok so it&#39;s a bit funny that Mr. Go turned up again, but really, you know, it must be an alias for somebody here commonly. I suppose Raymond could figure it out but I don&#39;t think he cares any more than the elephant cares to smite any particular gnat.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1169873">
				<div id="div-comment-1169873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JamesNT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150105-00/?p=43223#comment-1169873">
			January 5, 2015 at 8:09 pm</a>		</div>

		<p>You guys can poke fun all you want, but I find these posts fascinating. &nbsp;It&#39;s been a lot of fun looking up more information regarding this topic.</p>
<p>JamesNT</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1169883">
				<div id="div-comment-1169883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A regular viewer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150105-00/?p=43223#comment-1169883">
			January 5, 2015 at 10:14 pm</a>		</div>

		<p>These calculations form the foundation for the transposition of algebraic first order polynomials on 2 dimensional N-planar geometry.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1169893">
				<div id="div-comment-1169893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smithers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150105-00/?p=43223#comment-1169893">
			January 6, 2015 at 4:06 am</a>		</div>

		<p>I believe I have a three-instruction solution which covers 7 of the 14 remaining cases.</p>
<p>; set the top N bits, where 72 &lt;= N &lt;= 96</p>
<p>pcmdeqd xmm0, xmm0</p>
<p>pslldq xmm0, 7</p>
<p>psrad xmm0, N-72</p>
<p>The trick here is to shift further than we need to, then use a signed shift to get some of the ones back.</p>
<p>E.g. N=77:</p>
<p>FFFF FFFF|FFFF FFFF|FFFF FFFF|FFFF FFFF</p>
<p>Unsigned shift left 56 bits</p>
<p>FFFF FFFF|FFFF FFFF|FF00 0000|0000 0000</p>
<p>Signed shift right each doubleword N-72 bits</p>
<p>FFFF FFFF|FFFF FFFF|FFF8 0000|0000 0000</p>
<p>Unfortunately, we can&#39;t do the left-shift by any more than 56 bits without clearing the bottom half completely, so we still can&#39;t do 64 &lt; N &lt; 72.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1169903">
				<div id="div-comment-1169903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150105-00/?p=43223#comment-1169903">
			January 6, 2015 at 4:41 am</a>		</div>

		<p>To set the top 72&lt;N&lt;128 bits to 1:</p>
<p>pcmpeqd xmm0, xmm0</p>
<p>pslldq &nbsp;xmm0, 7</p>
<p>psrad &nbsp; xmm0, N &#8211; 72</p>
<p>That still leaves 64&lt;N&lt;72 though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170133">
				<div id="div-comment-1170133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sintendo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150105-00/?p=43223#comment-1170133">
			January 6, 2015 at 4:02 pm</a>		</div>

		<p>I was going to suggest using the AMD-exclusive SSE4a instructions &#39;extraq&#39; and &#39;insertq&#39; somehow, but I forgot that they only operate on the lower 64 bits and leave the upper half undefined.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1170153">
				<div id="div-comment-1170153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">gr8 m8 r8 8/8</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150105-00/?p=43223#comment-1170153">
			January 6, 2015 at 5:05 pm</a>		</div>

		<p>a gr8 feature m8 im going have to rate ya 8/8</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1170233">
				<div id="div-comment-1170233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150105-00/?p=43223#comment-1170233">
			January 7, 2015 at 4:57 am</a>		</div>

		<p>I must have had the page open for quite a while before submitting my comment, which explains how Smithers was able to submit his comment without me noticing. I&#39;ll just put it down to &quot;Great minds think alike.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

