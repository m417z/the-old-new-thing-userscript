<html>
<head>
<title>Why does the debugger show me the wrong virtual function?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does the debugger show me the wrong virtual function?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 23, 2005 / year-entry #73</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>22</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Pointers to virtual functions all look basically the same and therefore, as we learned last time, all end up merged into a single function. Here's a contrived example: class Class1 { public: virtual int f1() { return 0; } virtual int f2() { return 1; } }; class Class2 { public: virtual int g1() {...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Pointers to virtual functions all look basically the same
and therefore,
<a HREF="/oldnewthing/archive/2005/03/22/400373.aspx">
as we learned last time</a>,
all end up merged
into a single function.
Here's a contrived example:
</p>
<pre>
class Class1
{
public:
 virtual int f1() { return 0; }
 virtual int f2() { return 1; }
};

class Class2
{
public:
 virtual int g1() { return 2; }
 virtual int g2() { return 3; }
};

int (Class1::*pfn1)() = Class1::f2;
int (Class2::*pfn2)() = Class2::g2;
</pre>
<p>
If you take a look at <code>pfn1</code> and <code>pfn2</code>
you'll see that the point to the same function:
</p>
<pre>
0:000&gt; dd pfn1 l1
01002000  010010c8
0:000&gt; dd pfn2 l1
01002004  010010c8
0:000&gt; u 10010c8 l2
010010c8 8b01     mov     eax,[ecx]           ; first vtable
010010ca ff6004   jmp     dword ptr [eax+0x4] ; second function
</pre>
<p>
That's because the virtual functions <code>Class1::f2</code> and
<code>Class2::g2</code> are both stored in the same location
relative to the respective object pointer:
They are the second entry in the first vtable.
Therefore, the code to call those functions is identical
and consequently has been merged by the linker.
</p>
<p>
Notice that the function pointers are not direct pointers to
the concrete implementations of <code>Class1::f2</code> and
<code>Class2::g2</code> because the function pointer might
be applied to a derived class which override the virtual
function:
</p>
<pre>
class Class3 : public Class1
{
public:
 virtual int f2() { return 9; }
};

Class3 c3;
(c3.*pfn1)(); // calls Class3::f2
</pre>
<p>
Applying the function pointer invokes the function on the derived class,
which is the whole point of declaring the function <code>Class1::f2</code>
as virtual in the first place.
</p>
<p>
Note that the C++ language explicitly states that the result of comparing
non-null pointers to virtual member functions is "unspecified",
which is language-standards speak for "the result not only depends on
the implementation, but the implementation isn't even required to
document how it arrives at the result."</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-266833">
				<div id="div-comment-266833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-266833">
			March 23, 2005 at 8:16 am</a>		</div>

		<p>Slightly off topic, but is there any reliable way to get the index of a virtual function into the vtable in MSVC? On GCC, I take a member function pointer, which then contains the information&#8230; As you stated, MSVC on the other hand, generates code that knows the vtable offset. At the moment I&#8217;m extracting the offset from the code, but that is an even worse solution than what I am doing on GCC&#8230;</p>
<p>Thanks in advance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266843">
				<div id="div-comment-266843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-266843">
			March 23, 2005 at 8:45 am</a>		</div>

		<blockquote><p>
  but is there any reliable way to get the index of a virtual function into the vtable in MSVC?</p>
<p>This is a really dangerous operation.  It&#8217;s totally compiler specific and may break in release vs debug modes.  And just when you think you&#8217;ve got it right the optimizer can step in and kill what you&#8217;re doing in one specific location.</p>
<p>I can think of several reasons you might want to do this, but I can&#8217;t think of one which can&#8217;t be replaced with an equally fast yet safe method.</p>
<p>What are you actually trying to do?  If you&#8217;re trying to fake a jump table &#8211; just use a jump table.<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266873">
				<div id="div-comment-266873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-266873">
			March 23, 2005 at 9:02 am</a>		</div>

		<p>In order to look up a virtual function in an object, not only do you need to know the vtable index, but you also need to know where the vtable pointer is. For example, in a typical 32-bit implementation:</p>
<p>class B1 {<br />
<br />    virtual void foo() = 0; // offset 0, index 0<br />
<br />};<br />
<br />class B2 {<br />
<br />    virtual void bar() = 0; // offset 0, index 0<br />
<br />};<br />
<br />class D : public B1, // offset 0<br />
<br />          public B2  // offset 4<br />
<br />{<br />
<br />    // D::foo has offset 0, index 0<br />
<br />    // D::bar has offset 4, index 0<br />
<br />};</p>
<p>Clearly the two vtable pointers &quot;inherited&quot; by D can&#8217;t be merged, so only one of them can be at offset 0.</p>
<p>Even without m.i., there are other reasons why vtable pointers might not be at the start of an object:</p>
<p>struct B {<br />
<br />    int i; // offset 0<br />
<br />};<br />
<br />class D : private B // offset 0<br />
<br />{<br />
<br />    virtual void foo() {} // offset 4, index 0<br />
<br />};<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266863">
				<div id="div-comment-266863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-266863">
			March 23, 2005 at 9:06 am</a>		</div>

		<p>Well, yes, I know that it&#8217;s dangerous, but I guess it&#8217;s neccessary. What I am doing is hooking virtual functions. Until now, the index was hardcoded&#8230; But I don&#8217;t like hardcoded stuff so I thought there might be an easier way&#8230;</p>
<p>Note that I can&#8217;t patch the function, because NX-bit / PaX would break that approach&#8230; So I am going with virtual function hooking&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266883">
				<div id="div-comment-266883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-266883">
			March 23, 2005 at 9:12 am</a>		</div>

		<p>PM: AFAIK, NX and PaX don&#8217;t prevent you from changing page permissions, though you may be prevented from enabling write and execute at the same time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266893">
				<div id="div-comment-266893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-266893">
			March 23, 2005 at 9:41 am</a>		</div>

		<p>I am aware of the problems with multiple inheritance. My code relies on the fact that MSVC seems to be always placing the vtable pointer to the beginning of the object (so the this pointer points to a pointer to the vtable). I can get the this pointer the function expects to be called with using some member function pointer hackery.</p>
<p>What PaX does is enforce that any page that ever had PROT_WRITE set may never get PROT_EXEC set anymore; So you can&#8217;t execute any code you have modified (or generated on runtime).</p>
<p><a target="_new" href="http://en.wikipedia.org/wiki/PaX_" rel="nofollow">http://en.wikipedia.org/wiki/PaX_</a>(Linux)#Enforced_non-executable_pages &lt;&#8211; Check the &quot;restricted mprotect&quot; part.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266923">
				<div id="div-comment-266923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">igor1960</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-266923">
			March 23, 2005 at 12:20 pm</a>		</div>

		<p>I maybe wrong here and kindly correct me: as I understand about PaX is that yes you can&#8217;t use PROT_EXEC|PROT_WRITE to inject and execute later code located on such page. However, your VTable points to a page that has just array of addresses to vtable functions, so it doesn&#8217;t have to be a code page and in most cases it&#8217;s not. Code of the function itself is located on the code page, no question. However,  you are not modifying that code page &#8212; what you are modifying is the page with Vtables.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266943">
				<div id="div-comment-266943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">igor1960</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-266943">
			March 23, 2005 at 12:45 pm</a>		</div>

		<p>I forgot to mention one more thing: I think you may continue to rely &quot;on the fact that MSVC seems to be always placing the vtable pointer to the beginning of the object&quot; and again somebody please correct me if I&#8217;m wrong here. The reason you should strongly continue to rely on that fact is that MSVC is the ground for COM implementation and continues to be such a ground. MSVC VTable implementation used by so many MSFTs COM related librairies (ATL, MFC, .NET nows and etc). According to COM  binary layout however that the is the only way interface is represented &quot;(so the this pointer points to a pointer to the vtable)&quot;. At least in 32bit world. I have my own reservations and doubts on what will happen in 64 bits and should COM binary layout suppose to be changed/extended, but I&#8217;m not going to speculate on this right now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266963">
				<div id="div-comment-266963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-266963">
			March 23, 2005 at 12:47 pm</a>		</div>

		<p>Preventing writable pages from ever becoming executable is, erm, quite special. It will tend to break JIT compilers, though they could write code to files and then map them back in. Windows&#8217;s execution protection is not that restrictive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266983">
				<div id="div-comment-266983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">igor1960</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-266983">
			March 23, 2005 at 1:33 pm</a>		</div>

		<p>Raymond, as I&#8217;m not going to argue with your statement about multiple inheritance and vtable placement in that case. But the only way you can put multiple inherited objects vtables in the middle of the object is due to MSFTs invented ATL_NO_VTABLE&#8230; In that case no full objects VTable is getting created.<br />
<br />However, even in such case of enclosed each object VTable &#8212; respective VTable pointer of the enclosed object could be obtained through QueryInterface&#8230;<br />
<br />As to your statement that &quot;vtable can legally be in the middle of a COM object&quot; &#8211; this is completely wrong, and I&#8217;m not going even to argue with that. Just to point you are out: presence of VTable in the middle of some object doesn&#8217;t mean that this is this objects Vtable &#8212; in fact according to COM binary layout pointer to vtable of any COM interface should be the first member if you want to implement it manually.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-267003">
				<div id="div-comment-267003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-267003">
			March 23, 2005 at 1:53 pm</a>		</div>

		<p>There is no requirement that the vtable be the first member of the C++ object. Notice for example that in the third diagram on <a target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2004/02/05/68017.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2004/02/05/68017.aspx</a> the vtable for &quot;q&quot; is in the middle of the larger object.</p>
<p>The term &quot;COM object&quot; is somewhat imprecise. From COM&#8217;s point of view, a &quot;COM object&quot; is just a pointer to a vtable. However the enclosing C++ object chooses to use the to use the memory that comes before and after that vtable pointer is not COM&#8217;s problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-267043">
				<div id="div-comment-267043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-267043">
			March 23, 2005 at 2:30 pm</a>		</div>

		<p>The standard doesn&#8217;t even say there needs to be a vtable and that code is wrong. The standard only says that static_casts (which your C style cast boils down to) to void* can only be converted back to the original pointer type (5.2.9#10) [except for NULL pointers of course].</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-267053">
				<div id="div-comment-267053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">igor1960</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-267053">
			March 23, 2005 at 3:11 pm</a>		</div>

		<p>Raymond: yes I know that &quot;There is no requirement that the vtable be the first member of the C++ object&#8230;&quot;.<br />
<br />My message was specifiucally targeted as a  reply to PM, whose meeesages I&#8217;ve interpreted that he explicitly knows type of his object and he explicitly hacking into this object VTable and therefore this object has VTable and probably this objects base class has VTable. So, my message was not just some universal case, but specific case used by PM. I hope, I&#8217;ve interpreted his situation correctly.</p>
<p>Michael Grier [MSFT]: Eventhough MSFT implements excatly what your sample shows &#8212; it&#8217;s not standard that requires such an implementation. However, consider the following:<br />
<br />assume that struct X has virtual function:<br />
<br />struct X { int i; virtual void fooX(); };<br />
<br />struct Y : public X { virtual void foo() { exit(0); } };<br />
<br />Do you agree with me that the following layout for Y would be created:<br />
<br />Y =&gt;<br />
<br />&#8212; vTableY1 pointer to Y vtable that has 2 entries [0] points to fooX and [1] points to foo;<br />
<br />&#8212; int i<br />
<br />&#8212;-vTableY2 pointer to Y vtable again that has 2 entries [0] points to fooX and [1] points to foo ;</p>
<p>So, vTableY1 == vTableY2</p>
<p>If we do the same and declare Y with ATL_NO_VTABLE then:<br />
<br />struct ATL_NO_VTABLE Y : public X </p>
<p>Then layout of Y will look liket that:</p>
<p>Y =&gt;<br />
<br />&#8212; vTableX pointer to X vtable that has just 1 entry [0] points to fooX;<br />
<br />&#8212; int i<br />
<br />&#8212;-vTableY pointer to Y vtable again that has 2 entries [0] points to fooX and [1] points to foo ;<br />
<br />Now vTableX != vTableY</p>
<p>Am I right?</p>
<p>asdf: as far as I know &#8212; you are correct.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-267063">
				<div id="div-comment-267063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M Knight</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-267063">
			March 23, 2005 at 4:42 pm</a>		</div>

		<p>Ben Hutchings, Windows&#8217;s execution protection is more comprehensive. And you can always use VirtualProtect to change the page flags after you have done stuff.</p>
<p>There is a difference between PAGE_EXECUTE, PAGE_EXECUTE_READWRITE &amp; PAGE_READWRITE. Its only been with the NX &amp; PaX bits that there is any functional difference.</p>
<p><a target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/memory/base/memory_protection.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/memory/base/memory_protection.asp</a><br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266973">
				<div id="div-comment-266973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-266973">
			March 23, 2005 at 12:57 pm</a>		</div>

		<p>The vtable can legally be in the middle of a COM object, and in fact it *must* be so in multiple inheritance scenarios (only one vtable can be first; the other has to go somewhere else).</p>
<p>The pointer to the interface is not the same as the pointer to the object. You can put the vtable anywhere you want.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-267033">
				<div id="div-comment-267033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-267033">
			March 23, 2005 at 2:15 pm</a>		</div>

		<p>consider also:</p>
<p>struct X { int i; };<br />
<br />struct Y : public X { virtual void foo() { exit(0); } };</p>
<p>I believe that the standard requires that the vtable for Y be after all the members of X.  Otherwise this would not work:</p>
<p>Y y;<br />
<br />X *px;<br />
<br />void *pv;</p>
<p>y.i = 7;<br />
<br />pv = (void *) &amp;y;<br />
<br />px = (X *) pv;<br />
<br />printf(&quot;px-&gt;i = %dn&quot;, px-&gt;i);</p>
<p>The compiler is free to move around the &quot;this&quot; pointer on transitioning from a virtual function&#8217;s caller to the implementation but for basic single derivation, casting between the base type and derived type is required to be trivial.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-267113">
				<div id="div-comment-267113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/03/24/401490.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-267113">
			March 24, 2005 at 9:03 am</a>		</div>

		<p>Two confusing features that explode when you combine them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-267203">
				<div id="div-comment-267203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">igor1960</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-267203">
			March 24, 2005 at 11:00 am</a>		</div>

		<p>Ben: You are right &#8212; I&#8217;ve made a bubu on Y, but with ATL_NO_VTABLE &#8212; everything just fine in my example. As to your previous remark on .NET and JIT compiler &#8212; I wonder if MSFT realizes the danger of having JIT generated Vtables and code itself dynamicaly generated on the heap? Do they at all consider any measures to protect from intrusion? And if they do &#8212; what exactly is considered and is it possible at all: as any measure like that in case of .NET would be conflicting with the ground of .NET architecture?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-267213">
				<div id="div-comment-267213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-267213">
			March 24, 2005 at 12:13 pm</a>		</div>

		<p>Ok, so I stopped trying to be a language lawyer about when C++ was going through the ISO process so I won&#8217;t pretend to be one.</p>
<p>Maybe I&#8217;m confusing the fact that &quot;C type&quot; derivation:</p>
<p>struct Base { int i; };<br />
<br />struct Derived { struct Base base; int x; };</p>
<p>You have to be able to cast a pointer to the base member in Derived to pvoid and that pvoid back to a pointer to a Derived.</p>
<p>Mea culpa!  I haven&#8217;t felt the need to go buy a copy of the ISO C++ standard since there are plenty of language lawyers around.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-267163">
				<div id="div-comment-267163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-267163">
			March 24, 2005 at 10:11 am</a>		</div>

		<p>igor1960: In your example, Y will only have one vtable pointer; there&#8217;s no need for more. Also the purpose of ATL_NO_VTABLE (which expands to __declspec(novtable)) is to tell the compiler that the class doesn&#8217;t need *any* vtables of its own. This is a somewhat useful space optimisation in an abstract class whose constructor and destructor don&#8217;t call virtual functions indirectly. (For any other class, it will probably result in disaster.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-267183">
				<div id="div-comment-267183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-267183">
			March 24, 2005 at 10:27 am</a>		</div>

		<p>Michael Grier wrote: &quot;The compiler is free to move around the &quot;this&quot; pointer on transitioning from a virtual function&#8217;s caller to the implementation but for basic single derivation, casting between the base type and derived type is required to be trivial.&quot;</p>
<p>That&#8217;s not required by the C++ standard, though I suspect it is implied by the COM ABI. Casting from void * to another pointer type is equivalent to a static_cast, which is defined (in 5.2.9/10) only if the destination type is exactly the type of pointer that was originally converted to void *. However it is possible to reinterpret_cast a pointer to a POD struct to a pointer to its first member and vice versa (9.2/17) which supports pseudo-inheritance in struct definitions shared with C; perhaps that&#8217;s what you remember.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379253">
				<div id="div-comment-379253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/spatdsg/archive/2005/03/23/401020.aspx' rel='external nofollow' class='url'>Spat's WebLog (Steve Patrick)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050323-00/?p=36103#comment-379253">
			May 10, 2006 at 1:08 pm</a>		</div>

		<p>Hi<br />
<br />&amp;amp;nbsp;<br />
<br />This is also a&amp;amp;nbsp;test in posting images in my blog ..&amp;amp;nbsp;<br />
<br />&amp;amp;nbsp;<br />
<br />&amp;amp;nbsp;<br />
<br />In this&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

