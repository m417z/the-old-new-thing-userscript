<html>
<head>
<title>Window message parameters do not come with metaphysical certitude</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Window message parameters do not come with metaphysical certitude</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 15, 2011 / year-entry #36</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110215-00/?p=11493</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The MSDN documentation for window messages describes what each of the parameters means, but just because it means something doesn't mean that it is that something; it merely means it. But you knew this already. If you have a window handle, you can send it whatever message you like, with whatever parameters you like, even...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The MSDN documentation for window messages describes what each of the parameters means, but just because it means something doesn't mean that it <i>is</i> that something; it merely <i>means</i> it.</p>
<p> But you knew this already. If you have a window handle, you can send it whatever message you like, with whatever parameters you like, even if those parameters contradict reality. For example, you could write some code that seeks out a target window and sends it a <code>WM_<wbr>COMMAND</wbr></code> with parameters that claim that the message was generated from a keyboard accelerator, when in fact it was generated by code contained within your custom control. But you send the message with the accelerator parameters because your goal is to <i>fool the target program into thinking that it came from a keyboard accelerator</i>. Similarly, if your control wants to simulate a menu click, you should package the parameters in the same way a menu delivers them. </p>
<p> <a href="http://blogs.msdn.com/oldnewthing/archive/2006/03/02/542115.aspx#544233"> There are some people, however, who have difficulty wrapping their brains</a> <a href="http://blogs.msdn.com/oldnewthing/archive/2006/03/02/542115.aspx#544356"> around this concept</a>, that if you are trying to simulate something, then you have to behave as the thing you are trying to simulate and not as your actual self. If the documentation says that "A control sends the message with these parameters" and you're a control but you want to pretend that you're a menu, then you need to send the message the way a menu would. That's why it's called <i>pretending</i>. </p>
<p> Message parameter documentation is written on the assumption that nobody is pretending anything. What other choice is there? There's no point discussing the possibility that the sender of the message is playing tricks and lying to you because (1)&nbsp;your program should just go along with the ruse and respond to fake menu messages as if they were real menu messages, because (2)&nbsp;there's no way to tell that you're being lied to anyway. To detect lying, you'd have to be able to read into the mindset of the programmer who sent you the message. "Gosh, this code is generating a message and claiming that it was triggered by a menu selection. Is the code is implementing <a href="http://blogs.msdn.com/oldnewthing/archive/2004/08/20/217684.aspx"> a menu-like window</a>, or is it just trying to trick me?" </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-895373">
				<div id="div-comment-895373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110215-00/?p=11493#comment-895373">
			February 15, 2011 at 7:03 am</a>		</div>

		<p>Clearly a program should look into its stack to see who&#39;s calling SendMessage to see if it&#39;s being lied to.&lt;/sarcasm&gt; (<a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2006/08/17/704232.aspx" rel="nofollow">blogs.msdn.com/&#8230;/704232.aspx</a>)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-895383">
				<div id="div-comment-895383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/benyaboy_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>benyaboy@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110215-00/?p=11493#comment-895383">
			February 15, 2011 at 8:03 am</a>		</div>

		<p>I was shocked to see how LPARAM&#39;s are blindly casted when I was first learning win32. &nbsp;I could also see an expectation that the compiler would somehow enforce some type-contract or use reflection to detect behavior from people learning .net and java before they learn C.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-895443">
				<div id="div-comment-895443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">H. Dumpty</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110215-00/?p=11493#comment-895443">
			February 15, 2011 at 9:11 am</a>		</div>

		<p>When I use a WM_COMMAND with parameters it means just what I choose it to mean â€” neither more nor less.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-895463">
				<div id="div-comment-895463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">int</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110215-00/?p=11493#comment-895463">
			February 15, 2011 at 9:49 am</a>		</div>

		<p>Along those same lines, is there a way to determine if a string is actually a sequence of binary integers? The documentation doesn&#39;t say.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-895483">
				<div id="div-comment-895483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110215-00/?p=11493#comment-895483">
			February 15, 2011 at 11:26 am</a>		</div>

		<p>To paraphrase you: When pretending to interpret documentation like a normal user / programmer, you need to pretend you are a normal user / programmer and have no internal knowledge of how Win32 works internally. :)</p>
<p>The general source of confusion for such question stems from not knowing /why/ the documentation says what it says. For someone intimate with the actual implementation, it may be obvious that when the documentation says that WM_COMMAND requires a certain value for parameters when coming from a certain type of control, that it is merely stating the convention of the API. For an ordinary user though, it may implies that the requirements is absolute. For example, maybe Win32 keeps internal state that are specific to each control type, so lying or pretending is not even an option.</p>
<p>For example, no matter how much a normal program would wish to, it cannot pretend to be a driver and call driver-level API. For someone knowledgeable in the differences between an ordinary application and a driver, the reason is obvious. Some programmer may think that there is such a &quot;magic&quot; barrier between application and win32 messaging.</p>
<p>(There may be line of reasoning that would invalidate such a supposition, but it probably requires knowledge of the real Win32 API. Most programmer, at least for the UI-related stuff, are usually programming at a higher level of abstraction though some kind of framework (MFC, ATL, .NET&#8230;) which hides detail and introduce its own kind of magic. (Think: magic message dispatching in MFC.) As is often the case, the problem often lies in knowing that you don&#39;t know.)</p>
<div class="post">[<i>I would hope that people familiar with Win32 UI programming know that you can send any message to anybody (usual disclaimers apply). (Though doing so might not be a good idea.) It&#39;s not like SendMessage is a driver-only API. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-895503">
				<div id="div-comment-895503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110215-00/?p=11493#comment-895503">
			February 15, 2011 at 1:15 pm</a>		</div>

		<p>Since nobody else mentioned this:</p>
<p>This is also the basis of the infamous shatter attack. I think this was finally fixed in Vista by preventing processes from sending messages to processes with higher privileges.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-895453">
				<div id="div-comment-895453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110215-00/?p=11493#comment-895453">
			February 15, 2011 at 9:31 am</a>		</div>

		<p>My favourite WM_CREATE cast:</p>
<p>TWindow* pWnd = ((TWindow**) lParam) [0];</p>
<p>Sweet!</p>
<p>Just one cast instead of two!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-895593">
				<div id="div-comment-895593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miral</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110215-00/?p=11493#comment-895593">
			February 15, 2011 at 10:28 pm</a>		</div>

		<p>&quot;[I would hope that people familiar with Win32 UI programming know that you can send any message to anybody (usual disclaimers apply). (Though doing so might not be a good idea.) It&#39;s not like SendMessage is a driver-only API. -Raymond]&quot;</p>
<p>I think the fear that Pierre was trying to hint at is that while the MSDN docs might say &quot;and this bit is set to 1 if it comes from a menu&quot;, there might be an undocumented extra clause that goes something like &quot;and when this is set the window manager will look up something in an internal table it populated with other data before sending the message, and will either behave incorrectly or crash if it wasn&#39;t the source of the message and didn&#39;t get to populate the table beforehand&quot;.</p>
<p>I&#39;m not aware of any such condition in this case, of course, but that doesn&#39;t dismiss some people&#39;s fears that it might happen somewhere in the API. &nbsp;(Whether there&#39;s any real examples of that, I don&#39;t know. &nbsp;But it wouldn&#39;t surprise me if this sort of thing happened when superclassing certain controls, for example.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-895553">
				<div id="div-comment-895553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110215-00/?p=11493#comment-895553">
			February 15, 2011 at 3:31 pm</a>		</div>

		<p>@AsmGuru:</p>
<p>That&#39;s simple. You can&#39;t pass to lParam what haven&#39;t been initialized yet. TWindow may not be allocated yet when CreateWindow is called (it will only be allocated in WM_NCCREATE). WM_NCCREATE handler puts TWindow* to *lParam.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-895643">
				<div id="div-comment-895643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110215-00/?p=11493#comment-895643">
			February 16, 2011 at 6:43 am</a>		</div>

		<p>&quot; [UI programmers should]&#8230; know that you can send any message to anybody (usual disclaimers apply). (Though doing so might not be a good idea.)&quot;</p>
<p>I like the progression, or rather regression, from enthusiastic &quot;you can do anything&quot; down to &quot;that wouldn&#39;t be a good idea&quot;. :)</p>
<p>Still, knowing the underpinning of why people ask certain type of questions can be interesting in itself, and help improve how to best answer them and how to write effective documentation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-895833">
				<div id="div-comment-895833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul M. Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110215-00/?p=11493#comment-895833">
			February 16, 2011 at 8:43 am</a>		</div>

		<p>@Pierre B.: It&#39;s the difference between descriptive and prescriptive. You&#39;re allowed to do anything (descriptive), but it&#39;s not in your best interest to do everything you are allowed to do (prescriptive). Raymond has pointed out in the past that MSDN docs are generally descriptive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-895973">
				<div id="div-comment-895973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110215-00/?p=11493#comment-895973">
			February 17, 2011 at 9:33 am</a>		</div>

		<p>Paul: that&#39;s a nice a concise vocabulary.</p>
<p>I don&#39;t think it&#39;s due to any choice on the part of MSDN authors, though. By definition, description is easy and prescription is hard; listing what you can do is easy, while the list of things that you can&#39;t or shouldn&#39;t do is infinite.</p>
<p>&quot;While Calling SendMessage(), one should avoid driving a heavy hatchet through the motherboard, &#8230;&quot; :)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

