<html>
<head>
<title>What's the point of passing a never-signaled event to MsgWaitForMultipleObjects?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What&#8217;s the point of passing a never-signaled event to MsgWaitForMultipleObjects?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 14, 2018 / year-entry #256</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20181114-00/?p=100215</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It's a placeholder for something that didn't need a placeholder.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In the Quake source code,
there is this variable <code>tevent</code> whose usage is rather strange.
</p>
<pre>
<a HREF="https://github.com/id-Software/Quake/blob/bf4ac424ce754894ac8f1dae6a3981954bc9852d/QW/client/sys_win.c#L49">&nbsp;49</a> static HANDLE &nbsp; tevent;
</pre>
<p>
It is initialized at program startup to a newly-created
unsignaled event.
</p>
<pre>
<a HREF="https://github.com/id-Software/Quake/blob/bf4ac424ce754894ac8f1dae6a3981954bc9852d/QW/client/sys_win.c#L660">660</a>     tevent = CreateEvent(NULL, FALSE, FALSE, NULL);
<a HREF="https://github.com/id-Software/Quake/blob/bf4ac424ce754894ac8f1dae6a3981954bc9852d/QW/client/sys_win.c#L661">661</a>
<a HREF="https://github.com/id-Software/Quake/blob/bf4ac424ce754894ac8f1dae6a3981954bc9852d/QW/client/sys_win.c#L662">662</a>     if (!tevent)
<a HREF="https://github.com/id-Software/Quake/blob/bf4ac424ce754894ac8f1dae6a3981954bc9852d/QW/client/sys_win.c#L663">663</a>         Sys_Error ("Couldn't create event");
</pre>
<p>
and it is cleaned up a program shutdown:
</p>
<pre>
<a HREF="https://github.com/id-Software/Quake/blob/bf4ac424ce754894ac8f1dae6a3981954bc9852d/QW/client/sys_win.c#L267">267</a>         if (tevent)
<a HREF="https://github.com/id-Software/Quake/blob/bf4ac424ce754894ac8f1dae6a3981954bc9852d/QW/client/sys_win.c#L268">268</a>             CloseHandle (tevent);
</pre>
<p>
and the only use of it is in this call to
<code>Msg&shy;Wait&shy;For&shy;Multiple&shy;Objects</code>:
</p>
<pre>
<a HREF="https://github.com/id-Software/Quake/blob/bf4ac424ce754894ac8f1dae6a3981954bc9852d/QW/client/sys_win.c#L535">535</a>         MsgWaitForMultipleObjects(1, &amp;tevent, FALSE, time, QS_ALLINPUT);
</pre>
<p>
In true angry developer fashion, this is in a function with
the banner
</p>
<pre>
<a HREF="https://github.com/id-Software/Quake/blob/bf4ac424ce754894ac8f1dae6a3981954bc9852d/QW/client/sys_win.c#L520">520</a> =================================================================</a>
<a HREF="https://github.com/id-Software/Quake/blob/bf4ac424ce754894ac8f1dae6a3981954bc9852d/QW/client/sys_win.c#L521">521</a>
<a HREF="https://github.com/id-Software/Quake/blob/bf4ac424ce754894ac8f1dae6a3981954bc9852d/QW/client/sys_win.c#L522">522</a> WINDOWS CRAP
<a HREF="https://github.com/id-Software/Quake/blob/bf4ac424ce754894ac8f1dae6a3981954bc9852d/QW/client/sys_win.c#L523">523</a>
<a HREF="https://github.com/id-Software/Quake/blob/bf4ac424ce754894ac8f1dae6a3981954bc9852d/QW/client/sys_win.c#L524">524</a> =================================================================</a>
</pre>
<p>
Anyway,
when the <code>bWaitAll</code> parameter is <code>FALSE</code>,
the <code>Msg&shy;Wait&shy;For&shy;Multiple&shy;Objects</code>
function waits for one of three things to happen:
</p>
<ul>
<li>One of the handles is signaled,</li>
<li>The queue is in a state specified by the filter, or</li>
<li>The timeout elapses.</li>
</ul>
<p>
Since the code never signals the event,
the first case neve occurs,
so the only things that will cause
<code>Msg&shy;Wait&shy;For&shy;Multiple&shy;Objects</code> to return
are the second or third cases.
</p>
<p>
The dummy event is not actually necessary.
</p>
<pre>
MsgWaitForMultipleObjects(0, NULL, FALSE, time, QS_ALLINPUT); 
</pre>
<p>
If <code>bWaitAll</code> is <code>TRUE</code>, then
the <code>Msg&shy;Wait&shy;For&shy;Multiple&shy;Objects</code>
function waits for one of two things to happen:
</p>
<ul>
<li>All of the handles is signaled and
    the queue is in a state specified by the filter, or</li>
<li>The timeout elapses.</li>
</ul>
<p>
If you pass no handles, then the first part of the first case
is vacuously satisfied (due to the magic properties of the empty set),
so the things that will cause the function to return are either that
the queue is in a required state or the timeout elapses.
</p>
<p>
The fact that the handle count can be any value up to
<code>MAXIMUM_</code><code>WAIT_</code><code>OBJECTS</code>
<i>minus one</i>
gives you some
<a HREF="https://blogs.msdn.microsoft.com/larryosterman/2004/06/02/things-you-shouldnt-do-part-4-msgwaitformultipleobjects-is-a-very-tricky-api/">
insight into the internal implementation of
the <code>Msg&shy;Wait&shy;For&shy;Multiple&shy;Objects</code> function</a>:
It takes the handle array you pass, and adds another handle that is signaled
when the queue is in the desired state.
It then calls
the <code>Wait&shy;For&shy;Multiple&shy;Objects</code> with the same
<code>bWaitAll</code> parameter.
That explains why passing <code>bWaitAll = TRUE</code>
requires all the handles to be signaled <i>and</i> the queue to be
in the requested state.
</p>
<p>
If you don't want to rely on the magical properties of the
empty set,
you could instead use a handle that you already know will never
be signaled:
You can use <code>Get&shy;Current&shy;Process()</code> or
<code>Get&shy;Current&shy;Thread()</code>.
The current process pseudohandle and current thread pseudohandle
will become signaled when the process or thread terminates,
but this is code running on that thread in that process.
The thread cannot outlive itself.
</p>
<p>
<b>Bonus chatter 2</b>:
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20151111-00/?p=91972">
Here's why</a>
I'm
<a HREF="https://github.com/id-Software/Quake/blob/bf4ac424ce754894ac8f1dae6a3981954bc9852d/WinQuake/data/MANUAL.TXT#L1019">
in the Quake credits</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-practicalvb even thread-even depth-1 parent" id="comment-1370695">
				<div id="div-comment-1370695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Rising' rel='external nofollow' class='url'>Rising</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181114-00/?p=100215#comment-1370695">
			November 14, 2018 at 7:38 am</a>		</div>

		<p>Raymond, in the statement<br />
MsgWaitForMultipleObjects(0, NULL, FALSE, time, QS_ALLINPUT);<br />
did you mean to pass TRUE instead of FALSE for the fWaitAll argument?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-yuffa8 odd alt depth-2" id="comment-1370745">
				<div id="div-comment-1370745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/uffa8' rel='external nofollow' class='url'>uffa8</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181114-00/?p=100215#comment-1370745">
			November 14, 2018 at 2:40 pm</a>		</div>

		<p>in this call no difference between TRUE (WaitAll) and FALSE(WaitAny), because in this case internally called `KeWaitForMultipleObjects` with single event (related to thread input). when object count (in call `KeWaitForMultipleObjects` ) is 1 &#8211; WaitAll == WaitAny by sense</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dpb even thread-odd thread-alt depth-1 parent" id="comment-1370715">
				<div id="div-comment-1370715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SpecLad' rel='external nofollow' class='url'>SpecLad</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181114-00/?p=100215#comment-1370715">
			November 14, 2018 at 11:05 am</a>		</div>

		<p>I wish there was a way to get this hidden input event handle directly. It seems very inelegant to have to use a separate function when you want to wait for both objects and window messages.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-parkrrrr odd alt depth-2" id="comment-1370755">
				<div id="div-comment-1370755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/RP+%28MSFT%29' rel='external nofollow' class='url'>RP (MSFT)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181114-00/?p=100215#comment-1370755">
			November 14, 2018 at 4:48 pm</a>		</div>

		<p>Without any special knowledge of the internals, I&#8217;d guess that the event doesn&#8217;t even exist &#8211; or if it does exist, it&#8217;s never signaled &#8211; except when MsgWaitForMultipleObjects is executing. The specific conditions that would cause it to be signaled are unknown until you specify them in the arguments to that function.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-henke even thread-even depth-1" id="comment-1370725">
				<div id="div-comment-1370725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Henke37' rel='external nofollow' class='url'>Henke37</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181114-00/?p=100215#comment-1370725">
			November 14, 2018 at 12:35 pm</a>		</div>

		<p>I take it that the special internal handle is for an object that is not part of the documented api and is subject to change at will.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-geelaw odd alt thread-odd thread-alt depth-1" id="comment-1370765">
				<div id="div-comment-1370765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Gee+Law' rel='external nofollow' class='url'>Gee Law</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181114-00/?p=100215#comment-1370765">
			November 14, 2018 at 6:02 pm</a>		</div>

		<p>I don’t really understand why people will have problem understanding the <code>bWaitAll</code> argument in <code>MsgWaitForMultipleObjects</code> (as suggested by Larry Osterman’s post). The docs clearly say true = all and input, false = one or input. The only quirk for people unfamiliar with mathematical logic would be the empty set case, where all means none (automatically qualified) and one is never satisfied, in which case the effect of passing true/false will be the same — wait for the input event.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

