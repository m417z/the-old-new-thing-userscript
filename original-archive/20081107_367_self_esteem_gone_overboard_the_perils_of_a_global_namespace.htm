<html>
<head>
<title>Self-esteem gone overboard: The perils of a global namespace</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Self-esteem gone overboard: The perils of a global namespace</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 7, 2008 / year-entry #368</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>45</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">There are items with overly generic names. HANDLE, CloseHandle, GetObject, DIFFERENCE, query.exe. But their functionality doesn't live up to their name. HANDLE refers only to kernel handles, CloseHandle can only close kernel handles, GetObject only gets information about GDI objects, DIFFERENCE applies only to the numerical difference between group resources and standalone resources, and query.exe...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>There are items with overly generic names. <code>HANDLE</code>, <code>CloseHandle</code>, <code>GetObject</code>, <code>DIFFERENCE</code>, <code>query.exe</code>. But their functionality doesn't live up to their name. <code>HANDLE</code> refers only to kernel handles, <code>CloseHandle</code> can only close kernel handles, <code>GetObject</code> only gets information about GDI objects, <code>DIFFERENCE</code> applies only to the numerical difference between group resources and standalone resources, and <code>query.exe</code> only queries information about <strike>Terminal Services</strike> <a href="http://blogs.msdn.com/ts/archive/2008/11/03/terminal-services-renamed-remote-desktop-services-at-teched-emea.aspx"> Remote Desktop Services</a>.</p>
<p> Why do functions that operate only inside a specific realm have names that suggest a broader scope? </p>
<p> Self-esteem gone bad. </p>
<p> You're on the kernel team. You have a handle manager. What should you call your handles? Well, since they're handles, just call them <code>HANDLE</code>. Because that's what they are, right? And naturally the function that closes <code>HANDLE</code>s should be called <code>CloseHandle</code>. Sure, there are other types of handles out there, but they don't exist in your world. Your world is the kernel, and in the kernel world, you can call them <code>HANDLE</code>s and everybody will know that you're talking about kernel handles because that's why you're in the kernel in the first place! Why would somebody pass a handle to a non-kernel object to a kernel function? That makes no sense! </p>
<p> Similarly, the GDI folks came up with their own object system, and naturally the way you get information about an object is to call <code>GetObject</code>. There's no confusion here, right? I mean, this is GDI, after all. What other types of objects are there? </p>
<p> The <strike>Terminal Services</strike> Remote Desktop Services folks thought the same thing when they created their <code>query.exe</code> program. Hey, this is a computer set up to run Remote Desktop Services; of course you want to query information about Remote Desktop Services. </p>
<p> Of course, when your symbol exists in a shared namespace, the context of your naming decision becomes lost, and your generic-sounding function name (which worked just great for generic operations <i>in the world in which it was created</i>) ends up carrying more meaning than you originally intended. </p>
<p> Commenter <a href="http://blogs.msdn.com/oldnewthing/archive/2006/05/01/587528.aspx#587944"> Sean W.</a> tries to explains that Unix doesn't have this problem. "A Unix-flavored close() system call can close any file descriptor." This explanation ends up being its own counter-argument. When you say that it can close any file descriptor, you're admitting that it can't close <i>anything</i>. You can't use <code>close()</code> to close the objects opened by <code>opendir()</code> or <code>dbm_open()</code> or <code>XtOpenDisplay</code>. </p>
<p> "Well, yeah, but it can close any file descriptor regardless of where it came from." And <code>CloseHandle</code> works the same way: It can close any kernel handle regardless of where it came from. </p>
<p> Sean W. later clarified that "<a href="http://blogs.msdn.com/oldnewthing/archive/2006/05/01/587528.aspx#588022">the scope of <code>close()</code> is the system kernel, so it's reasonable to expect that it applies to kernel data and no other data, whereas the scope of <code>CloseHandle</code> is all of Win32, including at least KERNEL/USER/GDI/ADVAPI</a>." Um, actually, the scope of <code>CloseHandle</code> is also the kernel. </p>
<p> And in the category of "suggesting things that are already done" goes this comment from Daniel, who suggests that <a href="http://blogs.msdn.com/oldnewthing/archive/2006/05/01/587528.aspx#589287"> the documentation explain which <code>HANDLE</code>s can be closed by <code>CloseHandle</code></a>. Actually, if you look at each function that creates a handle, it also tells you the function to use to close it. Not quite the same thing, but since you have to open something in order to close it, you'll find the information even sooner. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (45)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-681283">
				<div id="div-comment-681283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681283">
			November 7, 2008 at 10:06 am</a>		</div>

		<p>I agree completely. &nbsp;I&#8217;m not sure that it is self-esteem rather than just complete blindness to the other programming contexts that will be using your interface, and the confusion that a poor namespace can create. &nbsp; One should always review your public API design from the user&#8217;s point of view.</p>
<p>However, this is just a manifestation of the experience issue. &nbsp;IE, when you are having trouble just getting the simple everythingiscorrect case working, things like error cases and other boundary conditions are too hard to consider.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681373">
				<div id="div-comment-681373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681373">
			November 7, 2008 at 11:19 am</a>		</div>

		<p>What&#8217;s wrong with using a common differentiator in your public interface? &nbsp;I.e. KERNEL_HANDLE, Kernel_CloseHandle, GDI_OBJECT, GDI_SelectObject. &nbsp; Yes, it&#8217;s ugly. &nbsp;Yes, it&#8217;s a lot of extra typing. &nbsp;However, the scope is clear.</p>
<div class="post">[<i>You&#8217;re solving the wrong step (addressing the problem). The issue is that people are still stuck on the first step (realizing that there is a problem at all). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681393">
				<div id="div-comment-681393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681393">
			November 7, 2008 at 11:32 am</a>		</div>

		<p>@John: There&#8217;s nothing wrong with that method, but that wasn&#8217;t Raymond&#8217;s point. His point was that these naming scope-creeps exist and an explanation of the likely mindset that led to their existence.</p>
<blockquote><p>
  The Terminal Services Remote Desktop Services</p>
<p>  folks thought the same thing when they created</p>
<p>  their query.exe program. Hey, this is a</p>
<p>  computer set up to run Remote Desktop</p>
<p>  Services; of course you want to query</p>
<p>  information about Remote Desktop Services.
</p></blockquote>
<p>A related phenomenon is when developers of apps and utilities bundled with hardware assume that their hardware will be a user&#8217;s most valued possession:</p>
<p>&#8216;Hey, this user&#8217;s just bought an Acme Scanner! Clearly he&#8217;ll want to be scanning all day long, let&#8217;s write a handy system tray utility to give him easy access to the scan function. It could even load on startup!&#8217;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681413">
				<div id="div-comment-681413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SRS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681413">
			November 7, 2008 at 12:44 pm</a>		</div>

		<p>Why not make the Windows source code browsable, so we can discover all this for ourselves? We know you have great influence &#8211; have quiet word with your legal dept., I can&#8217;t see them raising any objections.</p>
<div class=post>[<i>The mental state of the developers is not recorded in the source code. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681423">
				<div id="div-comment-681423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681423">
			November 7, 2008 at 12:53 pm</a>		</div>

		<p>This is like the email subject problem. When the GDI developer emails a question to the kernel developer, it never occurs to him that &quot;question&quot; or &quot;kernel question&quot; are bad subjects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681433">
				<div id="div-comment-681433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681433">
			November 7, 2008 at 1:01 pm</a>		</div>

		<p>[The mental state of the developers is not recorded in the source code. -Raymond]</p>
<p>Not in all cases&#8230; ;)</p>
<p><a href="http://www.kottke.org/06/10/google-code-search" rel="nofollow">http://www.kottke.org/06/10/google-code-search</a><br /><a href="http://google.com/codesearch?hl=en&amp;lr=&amp;q=coding+drunk" rel="nofollow">http://google.com/codesearch?hl=en&#038;lr=&#038;q=coding+drunk</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-termserv even thread-even depth-1" id="comment-681453">
				<div id="div-comment-681453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/termserv' rel='external nofollow' class='url'>termserv</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681453">
			November 7, 2008 at 1:36 pm</a>		</div>

		<blockquote><p>
  The Terminal Services Remote Desktop</p>
<p>  Services folks thought the same thing when</p>
<p>  they created their query.exe program. Hey,</p>
<p>  this is a computer set up to run Remote</p>
<p>  Desktop Services; of course you want to</p>
<p>  query information about Remote Desktop</p>
<p>  Services.
</p></blockquote>
<p>Of course, when query.exe was created, it was part of an OS that was only used for Terminal Services:</p>
<p><a rel="nofollow" target="_new" href="http://www.microsoft.com/technet/archive/termsrv/default.mspx" rel="nofollow">http://www.microsoft.com/technet/archive/termsrv/default.mspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681463">
				<div id="div-comment-681463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681463">
			November 7, 2008 at 1:50 pm</a>		</div>

		<p>&quot;Microsoft has even tried very hard in its promotional materials (and court cases) to convince people that such components are permanently inseparable.&quot;</p>
<p>Factually incorrect. &nbsp;That argument was specific to the HTML rendering components and has to do with with their removal rendering the OS distribution useless to the end user.</p>
<p>If you want to see the capabilities and the limits of the modularity of Windows look at Embedded XP.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681483">
				<div id="div-comment-681483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681483">
			November 7, 2008 at 2:08 pm</a>		</div>

		<p>Sean W.:</p>
<p>You should probably clarify what you mean by &quot;boot&quot; when you refer to what Windows can and cannot do. &nbsp;Windows is quite capable of booting with only the Kernel (the actual Kernel and not the &quot;here&#8217;s what I&#8217;m redefining as the Kernel&quot; Kernel) in place.</p>
<p>&quot;So one can make a pretty good argument that the Windows &quot;kernel&quot; conceptually and logically includes things like USER and GDI, regardless of whether they&#8217;re separate files on disk or not, regardless of whether their respective teams consider them distinct.&quot;</p>
<p>By the same logic, I could make a pretty good argument that you&#8217;re a core component of the government of the country in which you live because you pay taxes, but I&#8217;m sure your government would disagree on many levels. &nbsp;( It&#8217;s a bad analogy but think government = Kernel, person = GDI/USER )</p>
<p>I read your older posts just today and didn&#8217;t see anything taken out of context. &nbsp;I&#8217;m also unsure from where you have gathered your information about what an &quot;average developer&quot; is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681533">
				<div id="div-comment-681533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681533">
			November 7, 2008 at 2:31 pm</a>		</div>

		<p>Your argument doesn&#8217;t really make sense:</p>
<p>A. This core operating system function returns a handle.</p>
<p>B. CloseHandle, a core operating system function, closes handles.</p>
<p>Therefore, CloseHandle should close all handles returned by core operating system functions (NT, KERNEL, USER, GDI, etc).</p>
<p>The fundamental problem with that argument is that it&#8217;s not really accurate; a handle is not the same thing as a HANDLE. &nbsp;In fact, if you replace HANDLE and CloseHandle with THINGY and CloseThingy, your entire argument ceases to exist. &nbsp;So the real problem is that they chose a generic term to represent a specific object type.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681563">
				<div id="div-comment-681563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt [C++ MVP]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681563">
			November 7, 2008 at 2:47 pm</a>		</div>

		<p>&lt;quote&gt;how can a programmer be expected to realize that an HWND is a fundamentally different kind of handle than an HFILE or an HBITMAP&lt;/quote&gt;</p>
<p>You do realize that a file handle isn&#8217;t called an HFILE, right? &nbsp;It&#8217;s a HANDLE. &nbsp;All objects that can be passed to CloseHandle are just HANDLE, whether event, mutex, file, etc.</p>
<p>There is no problem when STRICT is defined. &nbsp;(Well, a user might still try the wrong thing first, but they will end up catching the error so early it isn&#8217;t really a big deal.)</p>
<p>Appropriate RAII C++ wrapper classes make this really easy &#8212; there&#8217;s a totally consistent interface to closing all of them, the &#8216;delete&#8217; operator.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681593">
				<div id="div-comment-681593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Caliban Darklock</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681593">
			November 7, 2008 at 3:34 pm</a>		</div>

		<blockquote><p>
  In short: &nbsp;If all handles aren&#8217;t HANDLEs,</p>
<p>  then HANDLEs shouldn&#8217;t be called HANDLEs.
</p></blockquote>
<p>This is only a problem on computers.</p>
<p>The handle on a door cannot be used to pick it up, and the handle on a coffee mug cannot be used to open it.</p>
<p>Which of them is &quot;really&quot; a handle?</p>
<p>Assume it&#8217;s a door. The handles on some doors can only be pushed, not pulled. The handles on others can only be pulled, not pushed. Some door handles may be both pulled and pushed. Some doors do not have handles at all.</p>
<p>Which of them is &quot;really&quot; a door handle?</p>
<p>Is a doorknob a type of door handle?</p>
<p>Clearly, this is a very complex and difficult question. And yet, somehow, everyone on the planet over the age of four knows how to open and close just about every door they ever encounter throughout their entire lives.</p>
<p>Just because you can ask a question that is hard to answer does not mean that a large problem exists. Understanding that a handle is not necessarily a HANDLE is not a big deal to most Windows programmers, any more than it is a big deal to most *NIX programmers when they realise that not everything you can open is a file descriptor. It isn&#8217;t hard to grasp, and it isn&#8217;t hard to resolve. Suck it up, write the code, and get on with your work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681603">
				<div id="div-comment-681603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681603">
			November 7, 2008 at 3:37 pm</a>		</div>

		<p>CloseHandle specifically defines the exact types of objects it closes and even shows the exception ( and explains the possible behavior ) for closing a HANDLE returned by FindFirstFile:</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms724211" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms724211</a>(VS.85).aspx</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681633">
				<div id="div-comment-681633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nes</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681633">
			November 7, 2008 at 4:21 pm</a>		</div>

		<p>Like clothes.launder() vs money.launder(), or shape.draw() vs blood.draw(), or matrix.norm() vs hi.norm() &lt;wink&gt;? I&#8217;m afraid English thrives on puns, and the same word routinely means radically different things across application areas. Therefore, to insist that a word have &quot;one true meaning&quot; in a programming language is insisting that the language cater to one true application domain. <a rel="nofollow" target="_new" href="http://groups.google.com/group/comp.lang.python/msg/dbd738b6e1c67ef2" rel="nofollow">http://groups.google.com/group/comp.lang.python/msg/dbd738b6e1c67ef2</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681643">
				<div id="div-comment-681643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nes</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681643">
			November 7, 2008 at 4:21 pm</a>		</div>

		<p>Like clothes.launder() vs money.launder(), or shape.draw() vs blood.draw(), or matrix.norm() vs hi.norm() &lt;wink&gt;? I&#8217;m afraid English thrives on puns, and the same word routinely means radically different things across application areas. Therefore, to insist that a word have &quot;one true meaning&quot; in a programming language is insisting that the language cater to one true application domain. <a rel="nofollow" target="_new" href="http://groups.google.com/group/comp.lang.python/msg/dbd738b6e1c67ef2" rel="nofollow">http://groups.google.com/group/comp.lang.python/msg/dbd738b6e1c67ef2</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681673">
				<div id="div-comment-681673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sandman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681673">
			November 7, 2008 at 4:43 pm</a>		</div>

		<p>Sigh.</p>
<p>I do a lot of *nix programming for fun. And quite a bit of Windows programming for profit. And quite frankly I think that SeanW &#8211; you a being a bit overdefensive.</p>
<p>There a lots better places in the windows API for an unix vs windows attack. But I&#8217;m not going to look for them now.</p>
<p>I have to say this particular API point has never worried me. Do as to what I think to ICANN idea of selling of parts of the top level of the global namespace is rather different.</p>
<p>The selling and transfer of parts of this namespace is interesting as well &#8211; I&#8217;ve yet to see that cause a conflict in Java (or .NET) where the Icann namespace is used a an object namespace &#8211; but it probably only a matter of time .</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681683">
				<div id="div-comment-681683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681683">
			November 7, 2008 at 5:02 pm</a>		</div>

		<p>One of my favorites is still convert.exe. &nbsp;</p>
<p>Of COURSE it&#8217;s for converting file systems; what else would you expect it to do?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681693">
				<div id="div-comment-681693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681693">
			November 7, 2008 at 5:15 pm</a>		</div>

		<p>There&#8217;s an interesting thing about unix &quot;files&quot; though: many groups have tried very hard to make sure that many things that are not at all alike are still &quot;files&quot;.</p>
<p>For example, Unix came up with the notion that your terminal is &quot;just a file&quot;; your keyboard is also &quot;just a file&quot;. &nbsp;When networking came in, the Berkeley people made sure that networks were also &quot;just a file&quot; (so that you can use the unix &#8216;select&#8217; function on your keyboard (stdin), a file, and a network connection all at once).</p>
<p>Modern versions of Linux have extended this with the &#8216;proc&#8217; &quot;filesystem&quot;: you can actually do an open on /proc/uptime and get uptime stats. &nbsp;Similarly, /dev/mouse will give you the raw data your mouse is returning.</p>
<p>This is a far cry from Windows, where each kind of object has its own set of functions to get them, use them, and dispose of them, and where each way to get information out of Windows is very different from each other.</p>
<p>(The &#8216;inferno&#8217; follow-on to unix takes the &#8216;everything is a file&#8217; concept even further, and really does make everything a file).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681703">
				<div id="div-comment-681703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681703">
			November 7, 2008 at 5:24 pm</a>		</div>

		<p>There&#8217;s an interesting thing about unix &quot;files&quot; though: many groups have tried very hard to make sure that many things that are not at all alike are still &quot;files&quot;.</p>
<p>For example, Unix came up with the notion that your terminal is &quot;just a file&quot;; your keyboard is also &quot;just a file&quot;. &nbsp;When networking came in, the Berkeley people made sure that networks were also &quot;just a file&quot; (so that you can use the unix &#8216;select&#8217; function on your keyboard (stdin), a file, and a network connection all at once).</p>
<p>Modern versions of Linux have extended this with the &#8216;proc&#8217; &quot;filesystem&quot;: you can actually do an open on /proc/uptime and get uptime stats. &nbsp;Similarly, /dev/mouse will give you the raw data your mouse is returning.</p>
<p>This is a far cry from Windows, where each kind of object has its own set of functions to get them, use them, and dispose of them, and where each way to get information out of Windows is very different from each other.</p>
<p>(The &#8216;inferno&#8217; follow-on to unix takes the &#8216;everything is a file&#8217; concept even further, and really does make everything a file).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681313">
				<div id="div-comment-681313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681313">
			November 7, 2008 at 10:34 am</a>		</div>

		<p>&#8220;Sure, there are other types of handles out there, but they don&#8217;t exist in your world. Your world is the kernel&#8230;&#8221;</p>
<p>True.</p>
<p>&#8220;Similarly, the GDI folks came up with their own object system[&#8230;] &nbsp;What other types of objects are there?&#8221;</p>
<p>Well, Kernel objects.</p>
<p>In your world, there exists all the things in your world, *and all the things in the layers below you*.</p>
<p>If you&#8217;re in the kernel, you&#8217;re lucky because there are no layers below you. You can name stuff whatever you want.</p>
<p>If you&#8217;re in the lowest level userspace library (e.g. the C library) then you&#8217;re almost as lucky, and can name your stuff almost whatever you want, and reserve huge portions of namespaces for yourself. (e.g. str*(), mem*(), is*(), *_t, etc&#8230; &#8211; probably f*() as well)</p>
<p>If you&#8217;re anyone else, you have to be aware of the lower level libraries &#8211; you couldn&#8217;t get much done if you didn&#8217;t. And given that you want a function to close/free something, but you&#8217;re aware that close(), fclose() and free() are already taken (because these are in the layers below you) you&#8217;re pretty much forced into confronting namespace issues.</p>
<p>Hmmm&#8230;.free() and close() are already taken. We&#8217;re the GDI project. How about GDIfree() to free our resources?</p>
<p>As you point out, many other library teams have managed to work this sort of thing out for themselves, and carved out, for example, dbm_*() and Xt*() namespaces.</p>
<div class="post">[<i>When GDI was written, the kernel didn&#8217;t have objects. Kernel objects didn&#8217;t arrive until almost years later. Oh, and GDI doesn&#8217;t use the C runtime library, so close() is not part of its world either. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681443">
				<div id="div-comment-681443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.werkema.com' rel='external nofollow' class='url'>Sean W.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681443">
			November 7, 2008 at 1:21 pm</a>		</div>

		<p>Gee, there&#8217;s nothing quite like your having two-year-old quotes taken out of context in a public forum to wake you up in the morning. &nbsp;Now I know how you must feel sometimes, Raymond ;-)</p>
<p>&gt; Um, actually, the scope of CloseHandle() is also the kernel.</p>
<p>Sure, CloseHandle() is part of the *true* kernel, and is responsible for closing only *true* kernel handles, but really, that&#8217;s a pretty bad argument: &nbsp;While a Un*x system can (and does!) exist as just a &#8220;small&#8221; kernel and one process with no shared libraries running under it, no such claims can be made of Windows: &nbsp;NT and KERNEL and USER and GDI and the shell and a dozen other modules are all critical chunks of the system, and it won&#8217;t boot without all of them. &nbsp;While they may not run in ring 0, they&#8217;re all a core part of the &#8220;operating system,&#8221; and the average programmer doesn&#8217;t consider them unrelated: &nbsp;Microsoft has even tried very hard in its promotional materials (and court cases) to convince people that such components are permanently inseparable. &nbsp;So one can make a pretty good argument that the Windows &#8220;kernel&#8221; conceptually and logically includes things like USER and GDI, regardless of whether they&#8217;re separate files on disk or not, regardless of whether their respective teams consider them distinct.</p>
<p>So to 99% of the programmers out there, an HWND isn&#8217;t conceptually distinct from an HFILE or an HGDI: &nbsp;They&#8217;re all handles and all come from the &#8220;kernel,&#8221; and therefore should all be closed by the &#8220;kernel&#8221; function named CloseHandle(). &nbsp;If Microsoft wanted USER and GDI and such to be considered logically distinct and separate modules, you&#8217;ve definitely been going about it the wrong way.</p>
<p>Maybe you can blame that on the marketers, maybe on the lawyers, maybe on the documentation writers, but the upshot is that Windows has lots and lots of handles, and only about half of the ones the average programmer bumps into can be closed by CloseHandle(), which means it&#8217;s a crapshoot as to what you have to do to clean up a random HANDLE when you run into it.</p>
<p>&gt; Of course, when your symbol exists in a shared namespace, the context of your naming</p>
<p>&gt; decision becomes lost, and your generic-sounding function name (which worked just</p>
<p>&gt; great for generic operations in the world in which it was created) ends up carrying more</p>
<p>&gt; meaning than you originally intended.</p>
<p>You can&#8217;t *possibly* be trying to claim here that the kernel team thought nobody else would ever see or use *any* of their APIs? &nbsp;I&#8217;d like you to explain how the kernel team could think people would write applications that would run on their kernel without using any kernel names.</p>
<div class=post>[<i>(1) The window manager is not part of what in Windows is called &#8220;KERNEL&#8221; (which is not the same as &#8220;all ring 0 code necessary to boot the operating system&#8221;). Perhaps when Windows 1.0 was designed back in 1983, the &#8220;low-level memory management and task scheduling services&#8221; should have been called something else (&#8220;CORE&#8221;? &#8220;BASE&#8221;?) but it&#8217;s too late to fix it now. (2) It probably never occurred to the kernel folks that anybody else would want to use the word <code>HANDLE</code> to refer to non-kernel objects. After all, the window manager doesn&#8217;t use <code>HANDLE</code>s, it uses <code>HWND</code>s and <code>HMENU</code>s. GDI uses <code>HFONT</code>s and <code>HBRUSH</code>es. The name <code>HANDLE</code> was available for use, so they used it. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681713">
				<div id="div-comment-681713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leif Strand</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681713">
			November 7, 2008 at 9:29 pm</a>		</div>

		<p>I just looked at the prototype for close() on Unix:</p>
<p>int close(int fd);</p>
<p>Does this mean I can use it to dispose of integers when I am done with them? &nbsp;Forgive me if this is a dunce question &#8212; I am but an average programmer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681473">
				<div id="div-comment-681473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Timothy Fries</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681473">
			November 7, 2008 at 1:56 pm</a>		</div>

		<p>&gt; While they may not run in ring 0, they&#8217;re all a core part of the &quot;operating system,&quot; and the average programmer doesn&#8217;t consider them unrelated</p>
<p>Microsoft is responsible for the ignorance of the &#8216;average programmer&#8217;? &nbsp;Certainly they go out of their way and make heroic efforts to try to accommodate programmers who don&#8217;t quite understand the internals, but if a programmer doesn&#8217;t understand the difference between the kernel, USER, and GDI &#8212; doesn&#8217;t understand that a HANDLE and an HWND and an HFILE and an HDC &#8212; things *that are named different* are different things; renaming a few functions isn&#8217;t really going to help them understand. </p>
<p>Your explanation is a lot of hand-waving and irrelevant excuses for why, even though they&#8217;re pretty much the exact same thing, UNIX&#8217;s close() is just fine as a generic name in the global namespace, but Windows&#8217; CloseHandle() is not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681493">
				<div id="div-comment-681493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.werkema.com' rel='external nofollow' class='url'>Sean W.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681493">
			November 7, 2008 at 2:16 pm</a>		</div>

		<p>&gt; (1) The window manager is not part of what in Windows is called &quot;KERNEL&quot; (which is not the</p>
<p>&gt; same as &quot;all ring 0 code necessary to boot the operating system&quot;). Perhaps when Windows 1.0 was</p>
<p>&gt; designed back in 1983, the &quot;low-level memory management and task scheduling services&quot; should</p>
<p>&gt; have been called something else (&quot;CORE&quot;? &quot;BASE&quot;?) but it&#8217;s too late to fix it now.</p>
<p>You completely missed my point. &nbsp;The issue is that Windows is a large, monolithic design, and whether you call the thing &quot;kernel&quot; or &quot;core&quot; or &quot;base&quot; or whatever, it&#8217;s still just a big giant ball of indivisible code to most programmers. &nbsp;KERNEL and USER may be separate components to the system designers, but they aren&#8217;t to the programmers. &nbsp;You have functions like AddAtom() and Beep() and various Console() functions in KERNEL32.DLL, and those are pretty obviously user-interface functions; and then in USER32.DLL you have functions like ExitWindowsEx() that are conceptually &quot;system&quot; functions and should probably be part of KERNEL32.DLL, and FillRect() that should probably be part of GDI32.DLL, and GDI32.DLL has functions like MapWindowPoints() and ClientToScreen() that don&#8217;t belong there either. &nbsp;The whole thing&#8217;s a blurry mess: &nbsp;In GDI you have many window and system functions, in USER you have many system and graphics functions, and in KERNEL you have many graphics and UI functions. &nbsp;Is it any wonder the average programmer can&#8217;t tell where one module ends and the other begins? &nbsp;And when it all looks like one big ball of code, how can a programmer be expected to realize that an HWND is a fundamentally different kind of handle than an HFILE or an HBITMAP? &nbsp;And even if he figures all that out, what will you tell him the first time he sees an HRESULT?</p>
<p>It&#8217;s too late to fix all this now, of course, but it sure seems to me to smack of poor planning and poor communication between the original design teams.</p>
<p>&gt; After all, the window manager doesn&#8217;t use HANDLEs, it uses HWNDs and HMENUs. GDI uses</p>
<p>&gt; HFONTs and HBRUSHes.</p>
<p>Seriously, you think *none* of them would consider that the &quot;H&quot; in &quot;HWND&quot; might stand for &quot;handle&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681543">
				<div id="div-comment-681543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681543">
			November 7, 2008 at 2:37 pm</a>		</div>

		<p>&quot;how can a programmer be expected to realize that an HWND is a fundamentally different kind of handle than an HFILE or an HBITMAP?&quot;</p>
<p>The same way they can realise that an fd is different from a FILE * from fopen(), which is closed with a different function than a FILE * from popen() which is different from a DIR *, which is different from a void * from malloc(), which is different from a void * from dlopen(), which is different from a void * from mmap(), which is different from a nl_catd, which is different from an iconv_t, etc&#8230; on another system.</p>
<p>I think this is pretty basic programmer stuff, and quite distinct from the problem of not naming things well. On any system, you need to keep track what resources you own, where you got them from, and follow the appropriate procedure for each resource to release it properly. If the documentation for the place you got it from doesn&#8217;t tell you how to release it, you&#8217;re stuffed. If it does, but you don&#8217;t pay attention and use another function to try to release the resource, you&#8217;re still stuffed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681553">
				<div id="div-comment-681553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.werkema.com' rel='external nofollow' class='url'>Sean W.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681553">
			November 7, 2008 at 2:44 pm</a>		</div>

		<p>&gt; So the real problem is that they chose a generic term to represent a specific object type.</p>
<p>Quite right, they did: &nbsp;But by choosing that generic name for a specific function, they promoted the notion that the specific function could handle generic data. &nbsp;CloseHandle() says in its name that it *closes* *handles* &#8212; there&#8217;s no ifs, ands, buts, or caveats there. &nbsp;So when presented with an HWND &#8212; a window handle &#8212; CloseHandle() proves itself to be a liar: &nbsp;It doesn&#8217;t close handles; it closes *thingies*. &nbsp;Had they named it CloseKernelHandle(), at least programmers *probably* wouldn&#8217;t be trying to feed it HRESULTs (don&#8217;t laugh; I&#8217;ve seen people do that) and anything else that has &quot;handle&quot; or &quot;h&quot; in its name somewhere.</p>
<p>In short: &nbsp;If all handles aren&#8217;t HANDLEs, then HANDLEs shouldn&#8217;t be called HANDLEs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681763">
				<div id="div-comment-681763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681763">
			November 8, 2008 at 1:34 am</a>		</div>

		<p>In a sense, Unix has the inverse problem. Everything is called a &quot;file descriptor&quot;, even though it can describe things that aren&#8217;t files (like processes, mice, and sockets).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681773">
				<div id="div-comment-681773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.ozzmosis.com/' rel='external nofollow' class='url'>ozzmosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681773">
			November 8, 2008 at 1:50 am</a>		</div>

		<blockquote><p>
  One of my favorites is still convert.exe. &nbsp;</p>
<p>  Of COURSE it&#8217;s for converting file systems;</p>
<p>  what else would you expect it to do?
</p></blockquote>
<p>Then there is the vaguely-named &#8216;convert&#8217;, supplied with the ImageMagick suite of utilities, often found on UNIX systems. &nbsp;Typically it&#8217;s installed as /usr/bin/convert or /usr/local/bin/convert, so as to be in the default search path. &nbsp;It converts between graphics file formats, in case you were wondering.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681783">
				<div id="div-comment-681783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681783">
			November 8, 2008 at 3:32 am</a>		</div>

		<p>&quot;(The &#8216;inferno&#8217; follow-on to unix takes the &#8216;everything is a file&#8217; concept even further, and really does make everything a file)&quot;</p>
<p>And the Plan 9 that preceded Inferno as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681803">
				<div id="div-comment-681803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Taylor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681803">
			November 8, 2008 at 10:17 am</a>		</div>

		<p>One of the lovely things in Python&#8217;s design is the way every module (= file) has (is) its own namespace. In foo.py, you can write functions and classes with generic names like close() or List. You call them as close() and Connection(), while everyone else calls foo.close() and foo.Connection(). Cross-file name clashes are impossible unless you abuse import &#8230; as or have multiple modules with the same name.</p>
<p>I would love to see this design used in more languages; it&#8217;s the simplest and cleanest solution for the problem of namespace creep that I&#8217;ve ever seen.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681813">
				<div id="div-comment-681813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Your Blog</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681813">
			November 8, 2008 at 10:46 am</a>		</div>

		<p>Your Blog is unreadable by those enforce the use of larger fonts.</p>
<p>I use 16 Pt because I need to read my screen without strain. Sadly your CSS barfs and breaks over this constraint and your stupid menubar covers everything makes your blog unreadable.</p>
<p>I&#8217;m probably not missing much.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681823">
				<div id="div-comment-681823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681823">
			November 8, 2008 at 12:16 pm</a>		</div>

		<p>Mark Taylor: this is called object oriented programming. &nbsp;Look it up some time. &nbsp;Windows is written in C, which was created before OO became popular.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681833">
				<div id="div-comment-681833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SRS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681833">
			November 8, 2008 at 12:32 pm</a>		</div>

		<p>@Mark: No, this is called namespacing, and that&#8217;s what this article is about. The &#8216;foo&#8217; in the example is a module not a class.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681843">
				<div id="div-comment-681843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jcs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681843">
			November 8, 2008 at 12:46 pm</a>		</div>

		<p>Your Blog: I was able to increase my text size and read this page with no problems.</p>
<p>Maybe it&#8217;s just you&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681883">
				<div id="div-comment-681883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://codeka.com/blogs' rel='external nofollow' class='url'>Dean</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681883">
			November 8, 2008 at 9:15 pm</a>		</div>

		<p>Your Blog: what browser are you using? Both Firefox and IE7 handle large fonts on this blog fine for me&#8230;</p>
<p>&quot;I&#8217;m probably not missing much.&quot;</p>
<p>Then why are you even complaining?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681923">
				<div id="div-comment-681923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681923">
			November 9, 2008 at 5:42 pm</a>		</div>

		<p>SRS: fair enough, but namespacing is normally a feature of OO languages. &nbsp;There&#8217;s nothing special about Python &#8211; C++, C#, VB and Java allow the same pattern. &nbsp;OO is ultimately an exercise in reducing the global namespace&#185;.</p>
<p>There&#8217;s little difference between nested classes and module-level namespacing, and if I had to lose a feature, it would be the latter.</p>
<p>&#185; May be a lie.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681933">
				<div id="div-comment-681933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681933">
			November 9, 2008 at 6:07 pm</a>		</div>

		<p>SQL has an excellent example of this type of myopic belly-button staring which creates a technology which actually works against its intended target of business data management. For a start there&#8217;s the keyword</p>
<p>Programming languages are often pretty bad too. For instance, why is &#8216;new&#8217; such a common keyword in languages, essentially stealing it from the real-world lexicon and dedicating it to the syntax of the underlying technology only?</p>
<p>I&#8217;m drawing a blank right now, because I regularly find the need to throw up my arms at yet another basic real-world word stolen by some technology that&#8217;s in love with itself. I think it&#8217;s a major contributor to software complexity.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-681943">
				<div id="div-comment-681943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681943">
			November 9, 2008 at 8:22 pm</a>		</div>

		<p>KERNEL, USER, GDI and ADVAPI are 4 wraper library for the lower-level NTAPI libraries right? So it&#8217;s natural for me to use functions from the same library that creates it close it.</p>
<p>Of course, that&#8217;s because I&#8217;m C# programmer who used to use them in wrapper library of difference namespace so I can tell. Perheps the IDE could also have the option to display which header file the function comes from in, say, Intellisense? (I seldom program in C/C++ now so I don&#8217;t know)</p>
<div class=post>[<i>&#8220;KERNEL, USER, GDI and ADVAPI are 4 wraper library for the lower-level NTAPI libraries right?&#8221; Wrong in 1981 (NTAPI didn&#8217;t exist in 1981), and still wrong in 2008. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-681953">
				<div id="div-comment-681953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-681953">
			November 10, 2008 at 12:59 am</a>		</div>

		<p>@Cheong: Yes, Visual Studio (at least 2008) shows you the header a definition came from in intellisense.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-682113">
				<div id="div-comment-682113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-682113">
			November 10, 2008 at 10:44 am</a>		</div>

		<p>It would be nice if Microsoft provided windows.hpp. That would be a C++ wrapper for windows.h, except that</p>
<ul>
<li>HANDLE, HWND, etc would be types</li>
<li>
<p>Microsoft::Close() would be overloaded to close anything you pass in</p>
</li>
<li>
<p>Constants would be true, typed constants.</p>
</li>
</ul>
<p>Quite a bit of (correct) code would continue to compile with little more than a <code>using namespace microsoft</code>. But if well done, quite some incorrect code would stop compiling. Eg calling the wrong close function.</p>
<p>Of course, UNIX should do the same. A file descriptor is not an int; fd/3 simply makes no sense. A file descript <em>can be stored in an int</em>.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-682273">
				<div id="div-comment-682273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://eleccham.valleyhold.org' rel='external nofollow' class='url'>Gordon Schumacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-682273">
			November 10, 2008 at 11:50 am</a>		</div>

		<blockquote><p>
  One of my favorites is still convert.exe.</p>
<p>  Of COURSE it&#8217;s for converting file systems;</p>
<p>  what else would you expect it to do?
</p></blockquote>
<p>Proselytize at the user? &nbsp;:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-682303">
				<div id="div-comment-682303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-682303">
			November 10, 2008 at 12:10 pm</a>		</div>

		<p>&quot;A file descriptor is not an int; fd/3 simply makes no sense.&quot;</p>
<p>fd/3 makes no sense, but fd+1 makes sense (e.g. as first parameter of select()).</p>
<p>Using an absolute integer (0, 1, 2 and sometimes 3 or 4) as file descriptor makes sense too.</p>
<p>In UNIX systems, file descriptor VALUES aren&#8217;t implementation details. They&#8217;re well documented. Knowing them is useful for parent-child communication.</p>
<p>Whether this is good design is another matter.</p>
<p>However, not all integers are file descriptors, which indicates the need of a typedef such as &quot;typedef int fd_t;</p>
<p>@Michiel: If you want a C++ binding to Windows API, use MFC.</p>
<p>@SRS:</p>
<p>Namespacing and OO are different issues, even though OO languages, through their class members, implement some form of namespacing.</p>
<p>Modula-3 is a good example of non-OO language with namespaces.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-682403">
				<div id="div-comment-682403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-682403">
			November 10, 2008 at 2:35 pm</a>		</div>

		<p>One of the funny consequences of the global name space is that there are constants ERROR and NOERROR &#8211; and both are zero. (ERROR is used by some GDI functions, although many functions return 0 on failure, and NOERROR seems to be an alternative to S_OK)</p>
<p>And there are API functions LoadImage and ImageLoad, and only the former does what one might expect: loading images from resources. ImageLoad is contained in a strange library that probably nobody has ever used.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-682593">
				<div id="div-comment-682593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-682593">
			November 10, 2008 at 10:34 pm</a>		</div>

		<p>[&#8220;KERNEL, USER, GDI and ADVAPI are 4 wraper library for the lower-level NTAPI libraries right?&#8221; Wrong in 1981 (NTAPI didn&#8217;t exist in 1981), and still wrong in 2008. -Raymond]</p>
<p>Only KERNEL32 and some of ADVAPI32 wraps ntdll.dll.</p>
<div class="post">[<i>Only parts of KERNEL32 are wrappers. What this has to do with the original subject I&#8217;m not sure. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-683223">
				<div id="div-comment-683223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.alibrightman.com' rel='external nofollow' class='url'>Alistair Brightman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081107-00/?p=20283#comment-683223">
			November 12, 2008 at 6:18 pm</a>		</div>

		<p>My long-time favourite: main.cpl</p>
<p>Try running it from &quot;Start&#8230; Run&quot;, if you don&#8217;t know what it is!</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

