<html>
<head>
<title>Why are DLLs uninitialized in the "wrong" order?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why are DLLs uninitialized in the &quot;wrong&quot; order?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 9, 2008 / year-entry #195</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080609-00/?p=22023</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">This is really just a corollary to Why are DLLs unloaded in the "wrong" order. Exactly the same logic that explains why DLLs are unloaded in the "wrong" order also explains why they are uninitialized in the "wrong" order. Once you understand the first issue, the second comes for free; just change DLL_PROCESS_DETACH to DLL_THREAD_DETACH...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p> This is really just a corollary to <a href="http://blogs.msdn.com/oldnewthing/archive/2005/05/23/421024.aspx"> Why are DLLs unloaded in the "wrong" order</a>. Exactly the same logic that explains why DLLs are unloaded in the "wrong" order also explains why they are uninitialized in the "wrong" order. Once you understand the first issue, the second comes for free; just change <code>DLL_PROCESS_DETACH</code> to <code>DLL_THREAD_DETACH</code> in your analysis. </p>
<p> Apply the logic to <a href="http://blogs.msdn.com/oldnewthing/archive/2005/05/23/421024.aspx#422023"> the scenario posed in this comment</a> and you'll see why it too is flawed. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-637203">
				<div id="div-comment-637203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080609-00/?p=22023#comment-637203">
			June 9, 2008 at 9:12 pm</a>		</div>

		<p>I&#8217;m still not quite sure why the dependency tracking you dismissed in your earlier post wouldn&#8217;t actually work.</p>
<p>Surely if A.DLL loads MIDDLE.DLL (implicitly or explicitly) and MIDDLE.DLL loads B.DLL (implicitly or explicitly) then the dependency chain can be set such that MIDDLE.DLL won&#8217;t unload until after A.DLL does, and B.DLL won&#8217;t unload until after MIDDLE.DLL does, which preserves the expected behaviour that B.DLL will still be loaded when A.DLL unloads.</p>
<p>There are still cases where you can trip it up, of course (such as setting up a circular or reverse dependency, as you mentioned), but doing this seems safer than not doing it.</p>
<p>And yes, you can&#8217;t trust the return address, but I doubt modifying DLL dependency relationships is much of an attack vector. &nbsp;So I don&#8217;t see any harm in trusting it in this case.</p>
<p>Maybe I&#8217;m missing some vital point&#8230;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-637213">
				<div id="div-comment-637213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080609-00/?p=22023#comment-637213">
			June 9, 2008 at 9:53 pm</a>		</div>

		<p>&quot;And yes, you can&#8217;t trust the return address, but I doubt modifying DLL dependency relationships is much of an attack vector.&quot;</p>
<p>I don&#8217;t think it&#8217;s a matter of security as such. There are plenty of non-security related cases where you can&#8217;t trust the return address (for example, what about on-the-fly generated code?)</p>
<p>Besides, all of this is moot if developers just stick to the &quot;don&#8217;t call methods in other DLLs (except kernel32.dll, maybe) from your DllMain&quot; rule.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-637223">
				<div id="div-comment-637223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080609-00/?p=22023#comment-637223">
			June 9, 2008 at 11:11 pm</a>		</div>

		<p>Besides, all of this is moot if developers just stick to the &quot;don&#8217;t call methods in other DLLs (except kernel32.dll, maybe) from your DllMain&quot; rule.</p>
<p>I agree with you completely, however those who aren&#8217;t ignorant to its existance in the first place seem to find that abiding to this particular rule to be unbearably difficult. So any discussion about it surely can&#8217;t be a bad thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-637263">
				<div id="div-comment-637263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tepsif&#252;les</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080609-00/?p=22023#comment-637263">
			June 10, 2008 at 5:07 am</a>		</div>

		<p>Miral said:</p>
<p>Surely if A.DLL loads MIDDLE.DLL (implicitly or explicitly) and MIDDLE.DLL loads B.DLL (implicitly or explicitly) then the dependency chain can be set such that MIDDLE.DLL won&#8217;t unload until after A.DLL does, and B.DLL won&#8217;t unload until after MIDDLE.DLL does, which preserves the expected behaviour that B.DLL will still be loaded when A.DLL unloads.</p>
<p>The indicated context was that MIDDLE is a common wrapper, likely to be unloaded only when the lights go out. So adding a dependency on B would just stick B in the memory forever, which is not the desired outcome.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

