<html>
<head>
<title>The cursor isn't associated with a window or a window class; it's associated with a thread group</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The cursor isn&#8217;t associated with a window or a window class; it&#8217;s associated with a thread group</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 7, 2011 / year-entry #29</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In my earlier discussion of the fact that changing a class property affects all windows of that class, commenters LittleHelper and Norman Diamond wanted to know "Why is the cursor associated with class and not a window?" This is another one of those questions that start off with an invalid assumption. The cursor is not...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>In my earlier discussion of the fact that <a href="http://blogs.msdn.com/oldnewthing/archive/2006/02/27/539880.aspx"> changing a class property affects all windows of that class</a>, commenters <a href="http://blogs.msdn.com/oldnewthing/archive/2006/02/27/539880.aspx#544387"> LittleHelper</a> and <a href="http://blogs.msdn.com/oldnewthing/archive/2006/02/27/539880.aspx#544987"> Norman Diamond</a> wanted to know "Why is the cursor associated with class and not a window?"</p>
<p> This is another one of those questions that start off with an invalid assumption. The cursor is not associated with a class. The cursor is not associated with a window. The cursor is associated with an <i>input state</i>. (Initially, each thread has its own input state, but functions like <code>Attach&shy;Thread&shy;Input</code> can cause threads to share their input states.) </p>
<p> As we saw when we explored <a href="http://blogs.msdn.com/oldnewthing/archive/2006/11/21/1115695.aspx"> the process by which the cursor gets set</a>, the cursor-setting process is initiated by the <code>WM_<wbr>SETCURSOR</wbr></code> message, which is percolated up and down the window hierarchy until somebody calls <code>Set&shy;Cursor</code> and returns <code>TRUE</code> to say "Okay, I set the cursor. You can stop searching now." And that cursor remains in effect until <a href="http://blogs.msdn.com/oldnewthing/archive/2005/05/25/421707.aspx"> somebody else in the same thread group calls <code>Set&shy;Cursor</code></a>. </p>
<p> It so happens that the <code>Def&shy;Window&shy;Proc</code> function, when asked to set a cursor, will use the window's class cursor. But that's just the default in the absence of any customization to the contrary. If you want to customize the cursor when it is over a particular window, then use the customization; don't go changing the default. If you change the default, then you affect what happens to all the other windows of the class. Just handle the <code>WM_<wbr>SETCURSOR</wbr></code> message to establish your "per-window cursor". (And you can be even more specific than just per-window. For example, you might decide to show a hand cursor if the user is over a hyperlink but an arrow cursor otherwise.) </p>
<p> Many of the fields in the <code>WND&shy;CLASS</code> structure are merely defaults which are applied to windows of the class. You can still override them on a per-window basis. </p>
<table border="1" bordercolor="black" style="border-collapse: collapse" cellpadding="3">
<tbody>
<tr>
<th>Field</th>
<th>How to override</th>
</tr>
<tr>
<td><code>lpfn&shy;Wnd&shy;Proc</code></td>
<td><code>Set&shy;Window&shy;Long&shy;Ptr(GWLP_<wbr>WNDPROC)</wbr></code></td>
</tr>
<tr>
<td><code>hIcon</code></td>
<td><code>Send&shy;Message(WM_<wbr>SETICON)</wbr></code></td>
</tr>
<tr>
<td><code>hCursor</code></td>
<td>Handle the <code>WM_<wbr>SETCURSOR</wbr></code> message</td>
</tr>
<tr>
<td><code>hbrBackground</code></td>
<td>Handle the <code>WM_<wbr>ERASEBKGND</wbr></code> message</td>
</tr>
<tr>
<td><code>lpsz&shy;Menu&shy;Name</code></td>
<td><code>Set&shy;Menu()</code></td>
</tr>
</tbody>
</table>
<p> (This is the same table I wrote up <a href="http://blogs.msdn.com/oldnewthing/archive/2006/06/15/632243.aspx"> some time ago</a>, but the original table didn't have an entry for the window procedure, so this table is <i>slightly</i> more complete. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-893673">
				<div id="div-comment-893673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-893673">
			February 7, 2011 at 8:25 am</a>		</div>

		<p>Seriously, some people cannot read documentation. No wonder they have trouble.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-893683">
				<div id="div-comment-893683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-893683">
			February 7, 2011 at 12:12 pm</a>		</div>

		<p>I think, this topic is a good example why I find low-level Win32 GUI programming hard to understand, complicated and therefore too time-consuming by a large factor. I never know if I have read enough about the problem at hand, so I never know if I&#39;m finally doing the right thing. Thanks god that Delphi and .NET saves me most of the time from digging into dirt like this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-893713">
				<div id="div-comment-893713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert W.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-893713">
			February 7, 2011 at 5:02 pm</a>		</div>

		<p>When people comment on this blog they often:</p>
<p>1) Criticise Microsoft&#39;s design decisions</p>
<p>2) Criticise Microsoft&#39;s developer documentation</p>
<p>The ongoing theme of this blog is that the response to (1) is: the design decisions were taken in the past and if Microsoft changed them now it would break existing applications. The response to (2) can be summarised by this quote from Raymond:</p>
<p>&quot;And extra thanks to the people who took it as an opportunity to complain about the documentation. I mean, duh, if the documentation were perfect, I wouldn&#39;t have written this series in the first place. Though these people also neglected to read all of the documentation; they looked only at the function description page. There&#39;s more to documentation than dry function descriptions, people! The function description is a reference; you go there when you already know what&#39;s going on and you just need to fine-tune a detail. The real learning happens in the overviews and articles.&quot;</p>
<p> &nbsp;<a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2007/02/23/1747713.aspx" rel="nofollow">blogs.msdn.com/&#8230;/1747713.aspx</a></p>
<p>So let&#39;s look at where the &quot;real learning&quot; happens when it comes to cursors.</p>
<p>The Class Cursor section of the Window Class overview states:</p>
<p>&quot;A window can set the cursor shape by calling the SetCursor function whenever the window receives the WM_MOUSEMOVE message.&quot;</p>
<p> &nbsp;<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms633574(v=VS.85).aspx#class_cursor" rel="nofollow">msdn.microsoft.com/&#8230;/ms633574(v=VS.85).aspx</a></p>
<p>The WNDCLASSEX Structure description states:</p>
<p>&quot;hCursor: A handle to the class cursor. &#8230; If this member is NULL, an application must explicitly set the cursor shape whenever the mouse moves into the application&#39;s window.&quot;</p>
<p> &nbsp;<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms633577(v=VS.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms633577(v=VS.85).aspx</a></p>
<p>Only if we read the Cursors overview do we get the intended way of specifying that a window should have a cursor that differs from the class cursor:</p>
<p>&quot;To override the class cursor, process the WM_SETCURSOR message.&quot;</p>
<p> &nbsp;<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms648379(v=VS.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms648379(v=VS.85).aspx</a></p>
<p>Finally the Cursors examples section gives some example code showing SetCursor being called in a handler for WM_SETCURSOR.</p>
<p> &nbsp;<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms648380(v=VS.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms648380(v=VS.85).aspx</a></p>
<p>So the conclusion is not surprising: You must read around the subject before you launch into writing any code. (Or you will fall into the trap of calling SetCursor in response to WM_MOUSEMOVE and end up with a flickering mouse cursor.)</p>
<p>But I want to make one further point. This blog entry was inspired by comments from LittleHelper and Norman Diamond.</p>
<p>LittleHelper says: &quot;Why is cursor associated with class and not window?&quot;</p>
<p>Norman Diamond replies: &quot;Yeah when you find that out, please let me know too.&quot;</p>
<p>And Raymond criticises them for &quot;starting off with an invalid assumption&quot;.</p>
<p>No they are simply questioning Microsoft&#39;s design. An alternative design could have allowed the developer to specify the cursor for a window when calling CreateWindow and change it later by passing a window handle and a cursor handle to SetCursor. I know this is not the way it works but these commenters are simply voicing their opinion that the design would be much more intuitive if it did work that way.</p>
<p>It is not an &quot;invalid assumption&quot; to question a design where the (default) cursor is associated with a class instead of directly with a window.</p>
<div class="post">[<i>When you say &quot;Why X instead of Y?&quot; you are assuming that X is true. In this case, the implied assumption is that the cursor is associated with a class. It is not. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-893733">
				<div id="div-comment-893733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-893733">
			February 7, 2011 at 5:27 pm</a>		</div>

		<p>Actually, if you think of a Window Class as a attribute template for the window you&#39;re creating, it&#39;d make some sense.</p>
<p>By reading the documentation for RegisterClassEx(), I find it a bit amazing that &quot;whether the input text is passed as Unicode&quot; is determined by which version of RegisterClassExA/W() called, instead of some field in WNDCLASSEX or when calling CreateWindowExA/W().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-893693">
				<div id="div-comment-893693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-893693">
			February 7, 2011 at 12:18 pm</a>		</div>

		<p>Joshua: if someone had asked me what is associated with the cursor, I&#39;m pretty I&#39;d have gotten it wrong too, even if I&#39;ve been programming Win32 for 15 years. It&#39;s hard to know with foresight when your assumptions are wrong. It&#39;s hard enough to know when you *got* assumptions, as a start.</p>
<p>I really like the varied nature of how things are overridden: function call, send a message, handle a message&#8230; :) Historical (and probably practical) reasons, I suppose.</p>
<div class="post">[<i>Even though there are a lot of different ways of customizing something, be thankful that the defaults are all in one place! -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-893753">
				<div id="div-comment-893753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-893753">
			February 7, 2011 at 11:43 pm</a>		</div>

		<p>To have the application execute logic on every mouse move to set the mouse cursor is BAD design.</p>
<p>The most intuitive should of course be to associate the icon with the window, one and only one time. Everything else is BAD design.</p>
<p>@Robert W: You must read around the subject before you launch into writing any code. </p>
<p>This is BAD design.</p>
<div class="post">[<i>Under your model, how would a Web browser or word processor change the cursor depending on which part of the document you are over? Does every link, table, movable object, resizing handle, etc. become a child window? (Besides, the application is already executing logic for mouse moves: OnMouseMove.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-893783">
				<div id="div-comment-893783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-893783">
			February 8, 2011 at 6:16 am</a>		</div>

		<p>I think that if I were designing the system, I would make it so that the cursor is a property of a window. When the mouse is over a window, the cursor is set to the icon associated with that window. To implement something like a web browser where the cursor changes depending on what element it&#39;s over, you would call SetCursor(hWnd, hCursor) in the OnMouseMove handler. Otherwise you&#39;d just call SetCursor once after CreateWindow and be done with it.</p>
<p>That said, the current system isn&#39;t that bad. The overhead of setting the cursor on every mouse move is probably trivial compared to the work already done (hit testing, sending messages, dispatching messages, etc.).</p>
<div class="post">[<i>That would work, except for the flicker: The mouse enters a window, the window manager sets the cursor to the [old] window cursor, then OnMouseMove changes the cursor to the hand (because you&#39;re over a link). Windows was developed on 4.77MHz machines (that&#39;s MHz), so the flicker would be quite noticeable. I guess you could wait until OnMouseMove returns to set the cursor. Of course, if you want this behavior, you can easily implement it in your WM_SETCURSOR handler. (You also lose the &quot;parent can override child&#39;s cursor&quot; feature which static controls rely on, but you could have a special hCursor value that means &quot;Use my parent window&#39;s cursor.&quot;) It also adds 2 bytes to every window. Back then, we counted bytes since we had only 65536 of them. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-893833">
				<div id="div-comment-893833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-893833">
			February 8, 2011 at 8:07 am</a>		</div>

		<p>Are we now talkning about 16-bit windows? In 16-bit windows window icons WAS in fact associated with window class, no process/thread/task boundaries was enfored at all. Class icons was os global.</p>
<div class="post">[<i>We&#39;re talking about cursors, not icons. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-893853">
				<div id="div-comment-893853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-893853">
			February 8, 2011 at 9:05 am</a>		</div>

		<p>I think my system would have two special cursors. One would be the &quot;use parent window&#39;s cursor&quot; (probably the default for most windows) and the other would be an &quot;owner draw&quot; type of cursor where the window would get WM_SETCURSOR messages.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-893863">
				<div id="div-comment-893863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-893863">
			February 8, 2011 at 9:46 am</a>		</div>

		<p>So, calling SetCursor on every mouse move is overhead now?</p>
<p>MFC allocates a new memory block on each mouse move (in some cases)!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-893893">
				<div id="div-comment-893893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-893893">
			February 8, 2011 at 11:11 am</a>		</div>

		<p>@Gabe: &quot;That said, the current system isn&#39;t that bad. The overhead of setting the cursor on every mouse move is probably trivial compared to the work already done (hit testing, sending messages, dispatching messages, etc.).&quot;</p>
<p>The performance is not the problem, but the inherent complexity. Among other things, as far as I know, there is no straight-forward way to implement the most basic programming task: Have a single-threaded GUI application to show the hourglass cursor over all its top-level windows during the entire operation of (for example) saving a file or inserting some databass records, especially when there is a common dialog in the code path. At least for internal applications, within a larger company, you have hundreds of cases where you need just that.</p>
<p>How do you explain such concepts to co-workers who only understand VBA-like programming style, to some degree?</p>
<p>Raymond: &quot;(Besides, the application is already executing logic for mouse moves: OnMouseMove.)&quot;</p>
<p>Why? Most of the time, my applications don&#39;t handle raw mouse movements. Yes, there may be some logic in the framework, but still: What logic are you talking about?</p>
<div class="post">[<i>Per-window cursors won&#39;t solve the &quot;I want the hourglass for all windows in my process&quot; problem either. (Actually, per-window cursors make it worse, because you need to somehow tell all the other windows in your process &quot;Hey, I know your cursor is an arrow, but could you make it an hourglass for me? Thanks.&quot;) Oh, and if your application code is letting the framework handle mouse moves, then you can also let the framework handle setting the cursor. All you&#39;re doing is playing games with labels. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-893923">
				<div id="div-comment-893923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert W.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-893923">
			February 8, 2011 at 5:42 pm</a>		</div>

		<p>Of course more recently Microsoft had an opportunity to re-design this stuff from scratch. And what did they do? They allowed the developer to set the cursor on a per-window basis.</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/system.windows.forms.control.cursor.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/system.windows.forms.control.cursor.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-893933">
				<div id="div-comment-893933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-893933">
			February 8, 2011 at 6:20 pm</a>		</div>

		<p>@Robert: Aren&#39;t we talking about API level of working now? If we&#39;re talking about functionalities delivered by higher level framework, I think we can set MousePointer per window/control since VB&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-893963">
				<div id="div-comment-893963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arno</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-893963">
			February 9, 2011 at 2:40 am</a>		</div>

		<p>What is the recommended way to trigger Windows to resend WM_SETCURSOR, because my decision for a particular window about which cursor should be shown, changed?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-893973">
				<div id="div-comment-893973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-893973">
			February 9, 2011 at 6:19 am</a>		</div>

		<p>&gt; Per-window cursors won&#39;t solve the &quot;I want the hourglass for all windows in my process&quot; problem either. </p>
<p>Process object and windows should NOT be this closely coupled. It&#39;s BAD design.</p>
<p>Setting a cursor of a top level window could of course automatically set in for child controls which choose to inherit the cursor. Other windows properties are inherited in this way.</p>
<p>The application callback should not even be called in these cases if the system was properly engineered. Things as this is why windows always have been slow and complex.</p>
<div class="post">[<i>Okay, so say you&#39;re Notepad. You have a frame window, and you have a child edit control which says &quot;I want a custom cursor (the I-bar cursor).&quot; Now the frame window is about to load a file, so it wants to put up the hourglass. Oops, that doesn&#39;t put up the hourglass for the child window since the child window does not specify &quot;cursor: inherit&quot;. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-893983">
				<div id="div-comment-893983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul M. Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-893983">
			February 9, 2011 at 6:25 am</a>		</div>

		<p>@Arno: Judging from the documentation for WM_SETCURSOR, just move the mouse. The notification is &quot;[s]ent to a window if the mouse causes the cursor to move within a window and mouse input is not captured.&quot;</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms648382(VS.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms648382(VS.85).aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-894013">
				<div id="div-comment-894013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arno</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-894013">
			February 9, 2011 at 7:43 am</a>		</div>

		<blockquote><p>
  @Arno: Judging from the documentation for WM_SETCURSOR, just move the mouse. The notification is &quot;[s]ent to a window if the mouse causes &gt; the cursor to move within a window and mouse input is not captured.&quot;
</p></blockquote>
<p>What if I don&#39;t move the mouse? SendInput? PostMessage( WM_MOUSEMOVE )? To which window? Lots of questions&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-894083">
				<div id="div-comment-894083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-894083">
			February 9, 2011 at 8:18 am</a>		</div>

		<p>@Arno:</p>
<p>Whenever you want to change the mouse cursor, you can call SetCursor by yourself, no problems. WM_SETCURSOR just gives you an unified place to update your cursor if anything changed.</p>
<p>If I remember correctly, it&#39;s also sent when your window gets uncovered, even though the mouse may not move at that time. The documentation doesn&#39;t mention that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-894093">
				<div id="div-comment-894093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-894093">
			February 9, 2011 at 8:18 am</a>		</div>

		<p>@Arno:</p>
<p>Whenever you want to change the mouse cursor, you can call SetCursor by yourself, no problems. WM_SETCURSOR just gives you an unified place to update your cursor if anything changed.</p>
<p>If I remember correctly, it&#39;s also sent when your window gets uncovered, even though the mouse may not move at that time. The documentation doesn&#39;t mention that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-894513">
				<div id="div-comment-894513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drizzt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-894513">
			February 10, 2011 at 3:22 pm</a>		</div>

		<p>I&#39;m clearly a poor programmer.</p>
<p>If someone had asked me what is associated with the cursor, I&#39;d have replied &quot;Who the hell cares.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-895023">
				<div id="div-comment-895023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110207-00/?p=11563#comment-895023">
			February 12, 2011 at 11:43 am</a>		</div>

		<p>@Drizzt</p>
<p>Cursor usually changes when moved over a different window. It should obvious be associated with a window, as .net does. Instead some &quot;smart&quot; person at ms choose to invent an abstract class object which cursor is associated with. Not very smart it seems, because every program which wants to set window cursors now has to implement and execute logic at run time. Run time overhead, but more importantly, a code maintenance overhead. This should have been a declarative window property.</p>
<div class="post">[<i>16-bit Windows was designed with the philosophy of letting applications decide how they want to do things. If they want a per-window declarative property, they could implement that in their WM_SETCURSOR handler. It&#39;s easy to implement declarative if you have imperative. It&#39;s hard to go the other way. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

