<html>
<head>
<title>Randomly-generated passwords still have to be legal strings</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Randomly-generated passwords still have to be legal strings</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 16, 2016 / year-entry #58</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160316-00/?p=93163</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Well-formed strings according to the encoding.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
If you need to generate a password for programmatic use,
then you don't have to worry about generating characters
that are difficult or impossible to type on a keyboard.
Go ahead and mix Cyrillic with Vietnamese and throw
in some Linear B while you're at it.
There is no keyboard that can type all of these characters,
but it doesn't matter because nobody will be typing it.
</p>
<p>
However, you should make sure that your password is a legal string.
</p>
<blockquote CLASS="q">
<p>
We generate our password from a cryptographically secure
random number generator.
Basically, we take 256 random bits and treat them as sixteen
16-bit values.
(If one of the 16-bit values is zero, then we ask for 16 more bits.)
</p>
<p>
We found that sometimes (no predictable pattern),
we have interoperability problems between systems.
The password produced by one system is not recognized
by the other.
</p>
</blockquote>
<p>
After much investigation, the problem was traced back to the
fact that taking a bunch of non-null 16-bit values and
declaring them to be a Unicode (UTF-16LE) string does not always result
in a valid Unicode string.
</p>
<p>
UTF-16 has the concept of <i>surrogate pairs</i>,
which encode characters outside the BMP as a pair of 16-bit values.
The first entry in the pair is a <i>high surrogate</i> in the range
<code>0xD800</code>&ndash;<code>0xDBFF</code>, and the second is
a <i>low surrogate</i> in the range
<code>0xDC00</code>&ndash;<code>0xDFFF</code>.
<a HREF="https://en.wikipedia.org/wiki/UTF-16#U.2B10000_to_U.2B10FFFF">
Together, they encode a character in a supplementary plane</a>.
</p>
<p>
If your randomly-generated string contains a value in the range
<code>0xD800</code>&ndash;<code>0xDFFF</code>,
then unless you are very lucky, it will not be part of a valid surrogate
pair.
The string is therefore not well-formed,
and various parts of the system might decide to reject them with
<code>ERROR_INVALID_PARAMETER</code>,
or they might "fix" the problem by changing the illegal values
to <code>U+FFFD</code>, the
<a HREF="https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character">
Unicode Replacement Character</a>,
which is used for unknown or unrepresentable character.
For example, if the protocol specifies that the password is transmitted
in UTF-8,
then the presence of an unpaired surrogate causes the conversion from
UTF-16 to UTF-8 to fail,
and consequently, the password fails to replicate to the other machine.
</p>
<p>
If you want to generate a random password, make sure your
algorithm produces legal character sequences.
A simple solution is to generate the desired amount of entropy,
then hex-encode it.
Yes, it isn't very space-efficient, but it gets the job done.
(Assuming you don't have to meet password complexity rules.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1230501">
				<div id="div-comment-1230501" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160316-00/?p=93163#comment-1230501">
			March 16, 2016 at 7:26 am</a>		</div>

		<p>Another option if you need to meet certain password complexity rules is to pick characters randomly from a well-defined alphabet where all characters are accepted on all systems (e.g. ASCII). The amount of entropy can then be controlled by the length of the password.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1230503">
				<div id="div-comment-1230503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://texttheater.net' rel='external nofollow' class='url'>ke</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160316-00/?p=93163#comment-1230503">
			March 16, 2016 at 7:53 am</a>		</div>

		<p>You can use Base65536. :) <a href="https://github.com/ferno/base65536" rel="nofollow">https://github.com/ferno/base65536</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mzzt even thread-even depth-1 parent" id="comment-1230521">
				<div id="div-comment-1230521" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/The+MAZZTer' rel='external nofollow' class='url'>The MAZZTer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160316-00/?p=93163#comment-1230521">
			March 16, 2016 at 8:47 am</a>		</div>

		<p>Base 64 is about halfway between hexadecimal and raw byte data in terms of efficiency, and it&#8217;s valid ASCII. It&#8217;s pretty much made for exactly this type of use case.</p>
<p>Of course it doesn&#8217;t matter too much how you encode it as long as it&#8217;s encoded. Less efficient encoding schemes just become longer strings, but it&#8217;s the same amount of password complexity (more so if an attacker doesn&#8217;t know what encoding you&#8217;re using).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-bboorman odd alt depth-2" id="comment-1230583">
				<div id="div-comment-1230583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160316-00/?p=93163#comment-1230583">
			March 16, 2016 at 11:12 am</a>		</div>

		<p>The first rule of cryptography is that you assume the attacker knows your algorithm.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1230623">
				<div id="div-comment-1230623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josh B</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160316-00/?p=93163#comment-1230623">
			March 17, 2016 at 12:22 am</a>		</div>

		<p>Base64/Base85/yEnc means that unless you get phenomenally unlucky, you&#8217;re essentially guaranteed to pass high complexity tests&#8230; and fail overly restrictive ones that deny special characters or have other stupid unnecessary limitations. There is no perfect solution to password interop, just pick what works and have a fallback.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1230531">
				<div id="div-comment-1230531" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">French Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160316-00/?p=93163#comment-1230531">
			March 16, 2016 at 9:49 am</a>		</div>

		<p>You&#8217;d also need to exclude all the invalid code points: 0xFDD0-0xFDEF, 0xFFFE and 0xFFFF.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1230591">
				<div id="div-comment-1230591" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160316-00/?p=93163#comment-1230591">
			March 16, 2016 at 11:24 am</a>		</div>

		<p>Probably should exclude the private use area too.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1230594">
				<div id="div-comment-1230594" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mark72</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160316-00/?p=93163#comment-1230594">
			March 16, 2016 at 1:01 pm</a>		</div>

		<p>Why?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1230731">
				<div id="div-comment-1230731" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160316-00/?p=93163#comment-1230731">
			March 17, 2016 at 6:52 pm</a>		</div>

		<p>On general principle.  The receiving system might do something stupid with it.</p>
<p>There&#8217;s actually a lot of characters you need to exclude because the receiving system might be stupid.  For example, the receiving system might incorrectly assume it&#8217;s safe to compose or decompose all diacritical marks, which is particularly likely since the Unicode Consortium encourages this behavior (NFC/NFD).  The receiving system might also have problems with control characters, some unusual kinds of Unicode whitespace, characters which cannot be losslessly capitalized and lowercased (or vice-versa), and so on.  The receiving system might even have problems with any non-ASCII character, if it tries to do some kind of home-grown hashing algorithm and stuffs characters into chars (instead of wchar_t or whatever the Windows equivalent is called).</p>
<p>It&#8217;s probably safer to just use Base64 or some other ASCII encoding.  That way, you can mostly just ignore these issues.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com0003bffda225a672 odd alt thread-even depth-1" id="comment-1230541">
				<div id="div-comment-1230541" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/jnm236' rel='external nofollow' class='url'>jnm236</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160316-00/?p=93163#comment-1230541">
			March 16, 2016 at 9:56 am</a>		</div>

		<p>The higher-level issue that I see is that the password is being generated at the byte level but being parsed at the code-point level. If you&#8217;re supposed to be producing code points, generate random code points and not random bytes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1230543">
				<div id="div-comment-1230543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ga</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160316-00/?p=93163#comment-1230543">
			March 16, 2016 at 10:38 am</a>		</div>

		<p>Or Base64-encode it, or Base85-encode it. I personally use a manually curated list of characters so I can avoid similar looking ones like I, l, 1.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1230573">
				<div id="div-comment-1230573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan Fritz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160316-00/?p=93163#comment-1230573">
			March 16, 2016 at 11:06 am</a>		</div>

		<p>Base64 encoding works as well, and is more space efficient than hex.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1230603">
				<div id="div-comment-1230603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160316-00/?p=93163#comment-1230603">
			March 16, 2016 at 1:37 pm</a>		</div>

		<p>Thus spake the master programmer.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

