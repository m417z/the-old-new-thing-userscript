<html>
<head>
<title>WaitOnAddress lets you create a synchronization object out of any data variable, even a byte</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>WaitOnAddress lets you create a synchronization object out of any data variable, even a byte</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 23, 2016 / year-entry #177</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Pick a byte, any byte.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The
<code>Wait&shy;On&shy;Address</code>
function
is a funny little guy.
It lets you create a synchronization object out
of 1, 2, 4, or 8 bytes of memory.
And you even control the contents of the memory,
so the synchronization object costs you nothing!
</p>
<p>
Basically,
the
<code>Wait&shy;On&shy;Address</code>
function
waits for the contents of a block
of memory to change.
You give it a memory buffer
and an "undesirable value",
and the function waits until
the buffer's contents are something
different from the undesirable value.
(Of course, if the memory buffer already
contains something different from
the undesirable value, then the
function returns immediately.)
</p>
<p>
You can accomplish the same thing
with a spinloop,
but
<code>Wait&shy;On&shy;Address</code>
puts the thread into a wait state
so that it doesn't burn CPU
while waiting.
</p>
<p>
Wow, this sounds amazing.
But like they say,
there's no such thing as
a free lunch.
For one thing,
you have to give
<code>Wait&shy;On&shy;Address</code>
a little help when you actually
change the value.
After you update the value atomically,
you need to call either
<code>Wake&shy;By&shy;Address&shy;Single</code>
if you want to wake up one waiting thread,
or
<code>Wake&shy;By&shy;Address&shy;All</code>
if you want to wake up all waiting threads.
</p>
<p>
Note that everything
must stay within a single process.
You cannot wait on an address in one
process and wake it in another.
(Not that it would make much sense
anyway, seeing as processes have
separate address spaces.)
</p>
<p>
Another wrinkle is that the
<code>Wait&shy;On&shy;Address</code>
function might return spuriously;
<i>i.e.</i>,
it may return even if the address
being watched still contains
the undesirable value.
</p>
<p>
Those who are familiar with
condition variables are well
aware of the phenomenon of the
spurious wake.&sup1;
Spurious wakes are unavoidable
because the thread may be woken
due to the variable's value changing,
but before the thread gets a chance
to run, the value changes the
back to the undesirable value.
Therefore,
when
<code>Wait&shy;On&shy;Address</code>
returns,
you must check
whether the value still has
the undesirable value,
and if so, you probably want to go back and wait again.
</p>
<p>
(The spurious wake also explains
why you need to update the value atomically:
If you use a non-atomic update,
then another thread waiting on the address
may experience a spurious wake at exactly
the moment you are updating the value,
and if you use a non-atomic update,
that thread will see a torn value
when it goes to check whether the wait was spurious.)
</p>
<p>
Here are some pros and cons of
<code>Wait&shy;On&shy;Address</code>
compared to, say, an event.
</p>
<p>
Pro:
<code>Wait&shy;On&shy;Address</code>
doesn't need to be initialized
or destroyed.
You don't have to worry about
leaking memory because you forgot
to destroy the synchronization object
because there is nothing to destroy!
</p>
<p>
Pro:
Like critical sections,
<code>Wait&shy;On&shy;Address</code>
does most of its work in user mode,
so if you're lucky,
you can avoid kernel transitions.
(Though in practice, I don't think
this buys you much,
because most of the time,
you probably expect
<code>Wait&shy;On&shy;Address</code>
to actually wait,
which means that you're paying
for a kernel transition anyway.)</p>
<p>
Con:
Since there is no synchronization object,
you cannot ask the threadpool to notify
you when a
<code>Wait&shy;On&shy;Address</code>
is ready.
More generally,
you cannot perform a simultaneous
wait on an address and some other synchronization
object.
This means for example that you can't ask
<code>Msg&shy;Wait&shy;For&shy;Multiple&shy;Objects</code>
to wait for a message or on an address.
</p>
<p>
Con:
As noted earlier,
you cannot wait on an address in one process
and wake it in another.
If you need to synchronize between processes,
then you cannot use
<code>Wait&shy;On&shy;Address</code>.
</p>
<p>
Con:
Internally, all of the addresses being waited on
are kept in a hash table,
which means that the theoretical complexity
is linear in the number of pending
<code>Wait&shy;On&shy;Address</code> calls,
albeit with a low constant.
This is probably not going to be
a serious problem in practice
because (1) it's a lock-free hash table,
and (2) you won't have a huge number of
pending <code>Wait&shy;On&shy;Address</code>
calls,
since it's bounded by the number of threads
in your process.
</p>
<p>
Next time,
by way of demonstration,
we'll try implementing some existing
synchronization concepts in terms of
<code>Wait&shy;On&shy;Address</code>.
</p>
<p>
&sup1;
Those who worked with Windows 95
device drivers may also observe
a similarity between
<code>Wait&shy;On&shy;Address</code>
and Windows 95's
<code>Block&shy;On&shy;ID</code>,
which had very similar semantics,
including the phenomenon of spurious wakes.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1261785">
				<div id="div-comment-1261785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261785">
			August 23, 2016 at 8:01 am</a>		</div>

		<p>Zan Lynx&#8217;s comment on your post a couple of days ago prompted me to read about Linux&#8217;s futexes but I didn&#8217;t realise they had come to win32 in the form of WaitOnAddress, so this is timely.</p>
<p>One difference is that futexes do work cross-process.  You need to explicitly share the memory between processes and it copes with the virtual addresses differing.</p>
<p>That said, I can&#8217;t find any documentation (other than your blog) that restricts WaitOnAddress to a single process.  That might be because I can&#8217;t find an MSDN overview page for these new functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1261805">
				<div id="div-comment-1261805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261805">
			August 23, 2016 at 8:13 am</a>		</div>

		<p>&#8220;lock-free hash table&#8221;&#8230;  Is this exposed as an API so that it can be used generally (Like the SList* functions expose a lock-free list)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1261825">
				<div id="div-comment-1261825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.farnz.org.uk/' rel='external nofollow' class='url'>Simon Farnsworth</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261825">
			August 23, 2016 at 8:17 am</a>		</div>

		<p>For low level Linux geeks, this sounds similar to the futex syscall, but confined to a single process &#8211; it has the same issues with spurious wake ups.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1261855">
				<div id="div-comment-1261855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261855">
			August 23, 2016 at 10:31 am</a>		</div>

		<p>Looks like a library function that can build the locking primitive that I want (following properties):</p>
<p>* Initialize merely sets the structure to values<br />
* If you can prove that nobody is waiting, freeing the memory suffices to free the data structure<br />
* Can lock by a thread<br />
* Waits with low CPU usage until unlocked (occasional spurious wakeups handled by the library code aren&#8217;t a problem)<br />
* Can be released by a different thread that acquired it (this allows handing locked objects to other threads w/o unlocking them)</p>
<p>But the documentation has the following problems:<br />
_In_opt_ on a DWORD looks wrong but may not be; however passing a constant -1 to a DWORD argument is a bad idea. Should be INFINITE here?<br />
Not documented how to tell why the wait failed and returned false, and it appears you need to care.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1261865">
				<div id="div-comment-1261865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261865">
			August 23, 2016 at 11:27 am</a>		</div>

		<p>Yes, INFINITE would be a better name for the all-bits-set value than -1. And GetLastError() works after failure (though the only thing you would expect to see is ERROR_TIMEOUT). I&#8217;ll ask for those to be fixed.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1261875">
				<div id="div-comment-1261875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261875">
			August 23, 2016 at 2:53 pm</a>		</div>

		<p>How about &#8220;Low memory conditions&#8221;? I&#8217;ll bet there&#8217;s a specific code for that one.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1261885">
				<div id="div-comment-1261885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261885">
			August 23, 2016 at 3:02 pm</a>		</div>

		<p>You can treat that the same as a spurious wake-up. Spurious wake-ups mean that the return value of WaitOnAddress is largely meaningless.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1262135">
				<div id="div-comment-1262135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1262135">
			August 24, 2016 at 11:16 am</a>		</div>

		<p>I got used to a particular idiom; that is, decode all expected cases from GetLastError() and propagate any unexpected case. This is really hard unless all expected cases have documented return values for GetLastError() here; else an unexpected error condition on a future version of Windows can send the app into an infinite loop.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1261895">
				<div id="div-comment-1261895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261895">
			August 23, 2016 at 5:01 pm</a>		</div>

		<p>So how many bytes does a createevent call allocate anyway</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1261915">
				<div id="div-comment-1261915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pseudonym</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261915">
			August 23, 2016 at 10:00 pm</a>		</div>

		<p>Wouldn&#8217;t it be great if WaitOnAddress could use the debug registers and/or page table hackery so you never had to call Wake&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1261965">
				<div id="div-comment-1261965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1261965">
			August 24, 2016 at 5:55 am</a>		</div>

		<p>You could roll your own there by allocating a page and setting the permissions to readonly. Call WaitOnAddress on one of those pages.</p>
<p>Then you could trap writes and call Wake­By­Address­Single yourself.</p>
<p>Might as well just use an Event though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1262045">
				<div id="div-comment-1262045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1262045">
			August 24, 2016 at 8:18 am</a>		</div>

		<p>The performance of taking a page fault or a trap would be horrible. Not all processor have debug registers, and even for x86, it would mean that you could have only four active WaitOnAddress calls at a time.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1263105">
				<div id="div-comment-1263105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pseudonym</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1263105">
			September 1, 2016 at 5:56 pm</a>		</div>

		<p>Oh, I know. I was kidding. The whole point of WaitOnAddress is that it&#8217;s mostly (entirely?) in user space if there&#8217;s no contention.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1262085">
				<div id="div-comment-1262085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frodo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1262085">
			August 24, 2016 at 9:39 am</a>		</div>

		<p>Why can&#8217;t Wait­On­Address handle the spurious wake internally?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1262315">
				<div id="div-comment-1262315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mattfife.com' rel='external nofollow' class='url'>matt</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1262315">
			August 25, 2016 at 9:49 pm</a>		</div>

		<p>If you wait on a byte address, does this get triggered by writes to the same cache line? Example, most systems have cache lines of 32 or 64 bits. Lets say you wait on the low order byte, but write to the upper order byte. It dirties the whole cache line. Do you rely on hardware interrupts to trigger this function &#8211; and/or does WaitOnAddress have to mask for the correct bits? </p>
<p>I ask because it could be a performance issue.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1262415">
				<div id="div-comment-1262415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145#comment-1262415">
			August 26, 2016 at 2:25 pm</a>		</div>

		<p>As noted in <a href="https://blogs.msdn.microsoft.com/oldnewthing/20160823-00/?p=94145">part 1 if the series</a>, you must explicitly call WakeByAddressAll or WakeByAddressSingle.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

