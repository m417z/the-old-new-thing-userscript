<html>
<head>
<title>It rather involved being on the other side of this airtight hatchway: Invalid parameters from one security level crashing code at the same security level (doesn't get old)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>It rather involved being on the other side of this airtight hatchway: Invalid parameters from one security level crashing code at the same security level (doesn&#8217;t get old)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 21, 2016 / year-entry #84</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">You never crossed a security boundary.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We received a very professional security vulnerability report from
a video driver manufacturer which reported a security vulnerability in DirectX.
You can tell it's a professional operation because the vulnerability
report took the form of a neatly-formatted PowerPoint presentation
with corporate logos in every corner.
Unfortunately, you'll have to make do with my distillation into boring text.
</p>
<blockquote CLASS="q">
<p>
An attacker program can pass intentionally invalid buffers to various
DirectX functions,
resulting in a number of identified vulnerabilities,
of which
<a HREF="https://channel9.msdn.com/blogs/pdcnews/bang-exploitable-security-analyzer">
the <code>!exploitable</code> debugger extension</a>
classifies several as high severity.
</p>
<p>
The root cause of all of the vulnerabilities is that the functions
in question are passed buffers and sizes which are not validated.
The functions read from or write to these improperly-sized buffers,
which can result in memory corruption
and potential
remote code execution,
information disclosure,
data tampering,
denial of service,
and the collapse of Western civilization.
</p>
<p>
For example, the
<a HREF="https://msdn.microsoft.com/en-us/library/windows/desktop/bb205886(v=vs.85).aspx">
<code>IDirect3D&shy;Resource9::&shy;Set&shy;Private&shy;Data</code> method</code></a>
does not verify that the <code>SizeOfData</code> is correct.
If <code>SizeOfData</code> is larger than the actual size of the data,
then DirectX will perform an invalid pointer read beyond the end of the buffer.
This can be used to extract information from memory managed by DirectX,
resulting in information disclosure.
</p>
<p>
Similarly, the
<a HREF="https://msdn.microsoft.com/en-us/library/windows/desktop/bb205882(v=vs.85).aspx">
<code>IDirect3D&shy;Resource9::&shy;Get&shy;Private&shy;Data</code> method</code></a>
does not verify that the <code>*pSizeOfData</code> is correct.
If <code>*pSizeOfData</code> is larger than the actual size of the data,
then DirectX will perform an invalid pointer write beyond the end of the buffer.
This can be used to corrupt memory managed by DirectX,
leading to further exploits.
</p>
</blockquote>
<p>
There is no vulnerability here yet because there is no elevation.
I mean, sure, the attacker can pass bogus buffers and trick DirectX
but let's take a closer look at who the attacker is and who the victim is.
</p>
<p>
The attacker is a rogue program that is intentionally passing invalid
buffers to DirectX.
DirectX
runs in-process and tries to read data from or write results to those buffers.
The attacker can trick DirectX into reading or writing past the end of
the buffer by lying about the buffer size.
</p>
<pre>
void UseDirectXToReadPastEndOfBuffer()
{
  direct3dResource9-&gt;SetPrivateData(
    GUID_Attack,
    buffer,
    incorrectSize,
    0);
}

void UseDirectXToWritePastEndOfBuffer()
{
  DWORD size = incorrectSize;
  direct3dResource9-&gt;GetPrivateData(
    GUID_Attack,
    buffer,
    &amp;size);
}
</pre>
<p>
But so what?
The attacker <i>can already do that</i> without needing to trick DirectX
into doing anything.
</p>
<pre>
void JustReadPastEndOfBuffer()
{
  memcmp(buffer, buffer, incorrectSize);
}

void JustWritePastEndOfBuffer()
{
  memset(buffer, 0, incorrectSize);
}
</pre>
<p>
Using DirectX to read memory from within your process is just
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090409-00/?p=18593">
adding style points</a>.
You aren't doing you can't already do.
You're just going through a middle man and then blaming the middle man.
</p>
<p>
Of course, one must verify that corruption or exposure of data within the process
causes no damage beyond the process.
If the corrupted data crosses a security boundary
(e.g., gets passed to a kernel mode video driver),
the recipient of the data must be resilient to intentionally invalid parameters.
</p>
<p>
The <code>!exploitable</code> debugger extension classifies these
failures as high severity because it is looking at the world through
data fuzzing-colored glasses.
It's assuming that all the data upon which the program is operating
is potentially untrusted,
and it's assessing how bad it would be if an attacker could trigger
this crash by giving your application an intentionally corrupted file.
In other words, the <code>!exploitable</code> debugger
extension assumes that the program is trusted
but it is operating on untrusted data.
Any crashes are assumed to the result of the trusted program
mishandling the untrusted data.
</p>
<p>
From that standpoint,
these are indeed severe errors
if a corrupted file can trick your application into passing incorrect
buffer sizes to DirectX.
And that's the bug you need to fix in the program:
Make sure your program passes correct buffer sizes regardless of the
contents of the file being parsed.
</p>
<p>
But if the program itself is the attacker,
then we have another instance of
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20070807-00/?p=25683#comment-534063">
MS07-052: Code execution results in code execution</a>.
</p>
<p>
Previous discussion:
</p>
<ul>
<li>
    <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20101208-00/?p=12093">
    Invalid parameters from one security level crashing code at the same security level</a>.</p>
<li>
    <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20140402-00/?p=1343">
    Invalid parameters from one security level crashing code at the same security level (again)</a>.</p>
<li>
    <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183">
    Invalid parameters from one security level crashing code at the same security level (yet again)</a>.
</ul>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-archangelpip even thread-even depth-1" id="comment-1244926">
				<div id="div-comment-1244926" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1244926">
			April 21, 2016 at 7:25 am</a>		</div>

		<p>This interestingly shows how confusing all of this stuff around security can be, if even large companies can do it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1244946">
				<div id="div-comment-1244946" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1244946">
			April 21, 2016 at 8:38 am</a>		</div>

		<p>/me takes note</p>
<p>I think I just found a way out of the WinRT sandbox that the auto-analyzer can&#8217;t find.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1244977">
				<div id="div-comment-1244977" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1244977">
			April 21, 2016 at 11:46 am</a>		</div>

		<p>I don&#8217;t understand.  WinRT applications really *are* in a sandbox enforced by the NT kernel (&#8220;lowbox token&#8221;), so if you can escape the WinRT sandbox, you would be crossing a security boundary with a real exploit.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1245136">
				<div id="div-comment-1245136" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245136">
			April 22, 2016 at 11:05 am</a>		</div>

		<p>Modern UI is unusable to me. The bug filed against Windows 8 stands yet unfixed. Unless I find a solution that allows CreateWindowEx(&#8230;, HWND_DESKTOP, &#8230;) to succeed RT might as well not exist at all.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1245146">
				<div id="div-comment-1245146" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245146">
			April 22, 2016 at 12:24 pm</a>		</div>

		<p>If you want to write a desktop app, write a desktop app. If the &#8220;bug&#8221; is that you can&#8217;t escape the WinRT sandbox, that&#8217;s not a bug. That&#8217;s literally the only purpose of the sandbox.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1245156">
				<div id="div-comment-1245156" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245156">
			April 22, 2016 at 12:45 pm</a>		</div>

		<p>The bug is a font rendering flaw in Modern UI.</p>
<p>Can you write a desktop app for RT without using an exploit yet?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk even depth-4" id="comment-1245195">
				<div id="div-comment-1245195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245195">
			April 22, 2016 at 1:35 pm</a>		</div>

		<p>Your messages are confusing.  If the Modern UI is &#8220;unusable&#8221; to you, that&#8217;s fine.  Don&#8217;t use it.</p>
<p>I have no idea what you mean by &#8220;the bug filed against Windows 8 stands yet unfixed&#8221;.  Which bug?  If you mean the font rendering flaw that you mentioned later, I predict that a font rendering flaw in Windows 8 is not high on Microsoft&#8217;s list of things to fix right now, in late spring 2016.  Windows 8 likely won&#8217;t get much attention.</p>
<p>&#8220;A way out of the WinRT sandbox that the auto-analyzer can&#8217;t find&#8221; is also confusing.  If you can get out of the WinRT sandbox under running code, that&#8217;s noteworthy.  If the auto-analyzer doesn&#8217;t point it out, then that&#8217;s perhaps a problem in the auto-analyzer. </p>
<p>&#8220;Can you write a desktop app for RT without using an exploit&#8221;.  Who is &#8220;you&#8221;?  Do you mean ANYONE?   Do people generally use exploits to write desktop apps &#8220;for RT&#8221;?</p>
<p>Maybe I shouldn&#8217;t feed you&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4 parent" id="comment-1245255">
				<div id="div-comment-1245255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245255">
			April 23, 2016 at 9:53 am</a>		</div>

		<p>I see you mentioned later &#8220;font rendering&#8221; bug, but what is the nature, what is repro of it and how does it manifest.. Does it affect Windows 8.1 or not (aka Windows 8.0 only) and does it repro on Windows 10? I got few projects for WinRT, Universal Apps, so I am curious what are you talking about.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1245295">
				<div id="div-comment-1245295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245295">
			April 24, 2016 at 7:53 am</a>		</div>

		<p>Try turning off anti-aliasing altogether. It doesn&#8217;t work. But I must turn it off.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1245306">
				<div id="div-comment-1245306" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245306">
			April 24, 2016 at 2:24 pm</a>		</div>

		<p>Pretty sure not a bug. (aka by design) Second, why? You are still leaving many questions unanswered. I hope you reported design oversight far better then that.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1244986">
				<div id="div-comment-1244986" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nico</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1244986">
			April 21, 2016 at 12:27 pm</a>		</div>

		<p>Isn&#8217;t the usual concern these days about remote attacks, usually proxied by a web browser?  So for example:</p>
<p>IE^H^HEdge gets a webpage from evil.com with Javascript that creates a canvas element.  Edge uses Direct2D for canvas.  The Javascript somehow gets Edge to pass the wrong buffer size which causes DirectX to read past the array and into SekritMemoryData[].  This is returned to the browser as a bag of bytes, and returned to the server via an async call.</p>
<p>Combine this with memory pressure (<a href="http://www.theregister.co.uk/2015/04/21/cache_creeps_can_spy_on_web_histories_for_80_of_net_users/" rel="nofollow">http://www.theregister.co.uk/2015/04/21/cache_creeps_can_spy_on_web_histories_for_80_of_net_users/</a>) or something and maybe you can get the data you want.  Or execute code. Or something.</p>
<p>Or not.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1244995">
				<div id="div-comment-1244995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1244995">
			April 21, 2016 at 12:40 pm</a>		</div>

		<p>And if Edge does pass the wrong buffer to DirectX, that&#8217;s a security bug in Edge, not in DirectX.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1245055">
				<div id="div-comment-1245055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245055">
			April 21, 2016 at 10:08 pm</a>		</div>

		<p>Exactly &#8211; Edge (or its Javascript interpreter) is the one operating with untrusted data. The Javascript code presumably doesn&#8217;t even have access to the DirectX API &#8211; otherwise it wouldn&#8217;t work on platforms without DirectX.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1245025">
				<div id="div-comment-1245025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245025">
			April 21, 2016 at 5:04 pm</a>		</div>

		<p>There isn&#8217;t a tag for these posts yet?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1245045">
				<div id="div-comment-1245045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245045">
			April 21, 2016 at 10:06 pm</a>		</div>

		<p>My experience that when someone sends you an unsolicited PowerPoint deck to read, one can safely delete it unread.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1245155">
				<div id="div-comment-1245155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245155">
			April 22, 2016 at 12:26 pm</a>		</div>

		<p>If your job is to read unsolicited documents sent by customers, that&#8217;s also a great way to get fired.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1245065">
				<div id="div-comment-1245065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245065">
			April 21, 2016 at 10:10 pm</a>		</div>

		<p>Maybe they could share some wisdom with us on how to validate the size of a (void *)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1245066">
				<div id="div-comment-1245066" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245066">
			April 21, 2016 at 11:39 pm</a>		</div>

		<p>&#8220;You can tell it’s a professional operation because the vulnerability report took the form of a neatly-formatted PowerPoint presentation with corporate logos in every corner. Unfortunately, you’ll have to make do with my distillation into boring text.&#8221;</p>
<p>But you&#8217;re so good with the HTML fake images and such! Couldn&#8217;t you have rigged up at least a few pretend logos? I really feel like I&#8217;m missing out now. </p>
<p>Not even bullet points on the list? C&#8217;mon, throw us a bone here.</p>
<p>(no, not really)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1245085">
				<div id="div-comment-1245085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245085">
			April 22, 2016 at 7:03 am</a>		</div>

		<p>So basically you&#8217;re saying that vulnerabilities that don&#8217;t involve privilege escalation aren&#8217;t real vulnerabilities?</p>
<p>Out of curiosity, have you seen <a href="http://www.xkcd.com/1200/" rel="nofollow">http://www.xkcd.com/1200/</a> ?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1245096">
				<div id="div-comment-1245096" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kemp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245096">
			April 22, 2016 at 8:12 am</a>		</div>

		<p>Bad program behaviour != security vulnerability. In general, without elevation all you&#8217;re doing is finding a novel way to do something that your program could already do anyway. Remember, &#8220;security vulnerability&#8221; doesn&#8217;t mean the program gives out your gmail password, it means that the program allows your machine to be compromised in a way that your user account permissions should prevent.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1245116">
				<div id="div-comment-1245116" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChDF T</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245116">
			April 22, 2016 at 10:33 am</a>		</div>

		<p>I think Raymonds point is, that the caller of the DirectX API can do the same things directly, without calling DirectX APIs at all. Therefore this behavior isn&#8217;t a vulnerability *in DirectX*. The post isn&#8217;t about whether this is a security vulnerability, but where the vulnerability is.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1245316">
				<div id="div-comment-1245316" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245316">
			April 25, 2016 at 12:09 am</a>		</div>

		<p>I&#8217;m not sure this even counts as a security vulnerability, they are passing the wrong size for a buffer. It&#8217;s only a vulnerability if a user of the software has control over the size of the buffer, this is just a bug.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1245226">
				<div id="div-comment-1245226" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aurora</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245226">
			April 22, 2016 at 11:55 pm</a>		</div>

		<p>Basically, yeah. Raymond is saying that trusted code causing a crash in the same &#8220;security context&#8221; is not a security issue, because that doesn&#8217;t cross any security boundaries. </p>
<p>That xkcd is completely irrelevant. Privilege escalation isn&#8217;t only from a user account to an admin account. Something like Javascript code in a browser getting the full permissions of the user account also counts would be an actual exploit, because then the Javascript code can do something it&#8217;s not supposed to be able to do. In this case, the program is using an &#8220;exploit&#8221; to do something it was already supposed to be able to do (read/write to its own process&#8217; memory), something which is not very interesting at all.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1245125">
				<div id="div-comment-1245125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joop</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245125">
			April 22, 2016 at 10:40 am</a>		</div>

		<p>&#8220;MS07-052: Code execution results in code execution&#8221; is such a great and funny summary! :D And nice that you linked to the original author&#8217;s comment.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1245435">
				<div id="div-comment-1245435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160421-00/?p=93326#comment-1245435">
			April 25, 2016 at 1:57 pm</a>		</div>

		<p>And as the original author of that comment (nine years ago!) I still get a chuckle when I read Raymond&#8217;s deconstruction of these dubious vulnerabilities&#8230; doubly so when he drops the MS07-052 on them.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

