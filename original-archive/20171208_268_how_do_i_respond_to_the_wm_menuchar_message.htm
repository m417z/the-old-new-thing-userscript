<html>
<head>
<title>How do I respond to the WM_MENUCHAR message?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I respond to the WM_MENUCHAR message?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 8, 2017 / year-entry #269</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171208-00/?p=97545</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">You identify the menu item that corresponds to the character.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today, for no particular reason, I'll demonstrate how to handle
the <code>WM_</code><code>MENU&shy;CHAR</code> message.
</p>
<p>
The system sends you the message
<a HREF="https://msdn.microsoft.com/en-us/library/windows/desktop/ms646349(v=vs.85).aspx">
when a menu is active and the user presses a key that does not
correspond to any mnemonic or accelerator key</a>.
The typical case for needing to handle this message is when
you have a bitmap menu item and want to provide a mnemonic for it.
</p>
<p>
Let's take our
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20030723-00/?p=43073">
scratch program</a>
and make these changes:
</p>
<pre>
BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
 <font COLOR="blue">HICON hico = LoadIcon(nullptr, IDI_INFORMATION);
 ICONINFO ii;
 GetIconInfo(hico, &amp;ii);
 DeleteBitmap(ii.hbmMask);
 ModifyMenu(GetMenu(hwnd), 103, MF_BYCOMMAND | MF_BITMAP,
            103, (LPCTSTR)ii.hbmColor);</font>
 return TRUE;
}

BOOL
InitApp(void)
{
 ...
 wc.lpszMenuName = <font COLOR="blue">MAKEINTRESOURCE(1)</font>;
 ...
}

// resource file
<font COLOR="blue">1 MENU
BEGIN
  POPUP "&amp;File"
  BEGIN
    MENUITEM "&amp;Something", 101
    MENUITEM "&amp;Blah", 102
    MENUITEM "", 103
    MENUITEM "E&amp;xit", 104
  END
END</font>
</pre>
<p>
We added a simple menu to our scratch program
consisting of four options.
Three are textual menu options:
"Something", "Blah", and "Exit".
One is a bitmap,
which we initialize in the <code>OnCreate</code> method
to be the informational icon.
</p>
<p>
Note that we leak the bitmap.
This is just a demonstration.
</p>
<p>
Note also that we don't work particularly hard at
scaling the bitmap to match the user's screen DPI.
This is just a demonstration.
</p>
<p>
Note further that we don't do anything with the mask,
so the transparent parts of the icon will show up as black.
This is just a demonstration.
</p>
<p>
The program doesn't do anything in response to the
menu items.
That's not the point of the demonstration.
</p>
<p>
When you open the File menu, observe that you can use
the keyboard shortcuts <kbd>S</kbd>,
<kbd>B</kbd>,
and
<kbd>X</kbd>
to invoke the corresponding menu items.
The system recognizes the <tt>&amp;</tt> prefix as
indicating which character you want to treat as the mnemonic
for that menu item.
</p>
<p>
But there is no keyboard shortcut for the information icon.
It's just a bitmap.
The system has no insight into the contents of the bitmap
and come up with some sort of suitable mnemonic.
</p>
<p>
Let's fix that.
Let's say that the mnemonic for the information icon
should be <kbd>I</kbd>.
</p>
<pre>
<font COLOR="blue">int GetMenuItemPos(HMENU hmenu, UINT id)
{
 int pos;
 for (pos = GetMenuItemCount(hmenu) - 1; pos &gt;= 0; pos--) {
  if (GetMenuItemID(hmenu, pos) == id) break;
 }
 return pos;
}

DWORD OnMenuChar(HWND hwnd, UINT ch, UINT flags, HMENU hmenu)
{
 if ((flags &amp; MF_POPUP) &amp;&amp;
     (hmenu == GetSubMenu(GetMenu(hwnd), 0))) {
  switch (ch) {
  case 'I':
   return MAKELONG(GetMenuItemPos(hmenu, 104), MNC_SELECT);
  }
 }
 return MAKELONG(0, MNC_IGNORE);
}

    HANDLE_MSG(hwnd, WM_MENUCHAR, OnMenuChar);</font>
</pre>
<p>
When we get the <code>WM_</code><code>MENU&shy;CHAR</code>
message,
we verify that the current menu is the File menu by
comparing the menu handles.
(In a real program, we probably would cache the popup menu
handle so we didn't have to digging for it each time.)
If so, then we say that we want to select the information icon
by returning a value that is a combination of
</p>
<ul>
<li>The value <code>MNC_</code><code>SELECT</code>,
    indicating that we want the item to be selected, and</li>
<li>The index of the menu item to select.</li>
</ul>
<p>
To get the index of the menu item,
we use a helper function <code>Get&shy;Menu&shy;Item&shy;Pos</code>
which looks up the position of a menu item given its ID.
</p>
<p>
With this change, you can how press <kbd>I</kbd> to select
the information icon.
It doesn't execute the item, though; it merely selects it.
You could do this if, say, there were two information icons
and you wanted to let the user cycle between them,
the same way the selection cycles among multiple textual
menu items with the same mnemonic.
</p>
<p>
If you want pressing <kbd>I</kbd>
to invoke the menu item,
then just make this change:
</p>
<pre>
   return MAKELONG(GetMenuItemPos(hmenu, 104), <font COLOR="blue">MNC_EXECUTE</font>);
</pre>
<p>
Note that the <code>WM_</code><code>MENU&shy;CHAR</code>
message is sent only if the user presses a key that matches
no textual menu item.
If we change the last menu item to
</p>
<pre>
    MENUITEM "Ex&amp;it", 104
</pre>
<p>
so that its accelerator is also <kbd>I</kbd>,
then pressing the <kbd>I</kbd> goes straight to that menu item,
and there is no
<code>WM_</code><code>MENU&shy;CHAR</code> message.
Your information icon bitmap menu item is a
second-class citizen.
</p>
<p>
Sorry.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1317666">
				<div id="div-comment-1317666" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171208-00/?p=97545#comment-1317666">
			December 8, 2017 at 7:04 am</a>		</div>

		<p>Typo? &#8220;With this change, you can how&#8221; â†’ &#8220;With this change, you can now&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1317685">
				<div id="div-comment-1317685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deleted' rel='external nofollow' class='url'>Pierre B.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171208-00/?p=97545#comment-1317685">
			December 8, 2017 at 11:14 am</a>		</div>

		<p>In all the menu item lookups, you entered 104 instead of 103, so you&#8217;re fetching the exit menu item instead of the intended bitmap-only item.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1317715">
				<div id="div-comment-1317715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171208-00/?p=97545#comment-1317715">
			December 10, 2017 at 1:36 am</a>		</div>

		<p>Are there any notable uses of WM_MENUCHAR in practice?  Just like how mnemonics to non-visible dialog box controls are still active, I don&#8217;t really understand when anyone would actually want such a mnemonic when it is basically non-discoverable.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-2" id="comment-1317717">
				<div id="div-comment-1317717" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171208-00/?p=97545#comment-1317717">
			December 10, 2017 at 7:59 am</a>		</div>

		<p>A common example is owner draw items that look like normal items (so you can display full color icons etc).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

