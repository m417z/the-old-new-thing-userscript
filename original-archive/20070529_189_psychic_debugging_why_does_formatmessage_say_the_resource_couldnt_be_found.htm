<html>
<head>
<title>Psychic debugging: Why does FormatMessage say the resource couldn't be found?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Psychic debugging: Why does FormatMessage say the resource couldn&#8217;t be found?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 29, 2007 / year-entry #190</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Solving this next problem should be a snap with your nascent psychic powers: I'm trying use FormatMessage to load a resource string with one insertion in it, and this doesn't work for some reason. The string is "Blah blah blah %1. Blah blah blah." The call to FormatMessage fails, and GetLastError() returns ERROR_RESOURCE_TYPE_NOT_FOUND. What am...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Solving this next problem should be a snap with your
nascent psychic powers:
</p>
<blockquote CLASS=q><p>
I'm trying use <code>FormatMessage</code>
to load a resource string with one insertion in it,
and this doesn't work for some reason.
The string is
"Blah blah blah %1. Blah blah blah."
The call to <code>FormatMessage</code> fails,
and <code>GetLastError()</code> returns
<code>ERROR_RESOURCE_TYPE_NOT_FOUND</code>.
What am I doing wrong?</p>
<pre>
LPTSTR pszInsertion = TEXT("Sample");
LPTSTR pszResult;
FormatMessage(
        FORMAT_MESSAGE_ALLOCATE_BUFFER |
        FORMAT_MESSAGE_FROM_HMODULE |
        FORMAT_MESSAGE_ARGUMENT_ARRAY,
        //I also tried an instance handle and NULL.
        GetModuleHandle(NULL),
        IDS_MY_CUSTOM_MESSAGE,
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // default language
        (LPTSTR) &pszResult,
        0,
        (va_list*) &pszInsertion); 
</pre>
</blockquote>
<p>
Hint: Take a closer look at the parameter
<code>IDS_MY_CUSTOM_MESSAGE</code>.
</p>
<p>
Hint&nbsp;2: What does "<code>IDS_</code>" tell you?
</p>
<p>
Resource identifiers that begin with "<code>IDS_</code>"
are typically string resource identifiers, not message resource
identifiers.
There is no strong consensus on the naming convention for
message resource identifiers,
although I've seen "<code>MSG_</code>".
Part of the reason why there is no strong consensus on the naming
convention for message resource identifiers is that almost nobody
uses message resources!
I don't understand why they were added to Win32, since there
was already a way of embedding strings in resources,
namely, string resources.
</p>
<p>
That's why you're getting <code>ERROR_RESOURCE_TYPE_NOT_FOUND</code>.
There is no message resource in your module.
If you're not going to use a message resource, you'll have to
use the <code>FORMAT_MESSAGE_FROM_STRING</code> flag and
pass the format string explicitly.
</p>
<pre>
DWORD_PTR rgdwInsertions[1] = { (DWORD_PTR)TEXT("Sample") };
TCHAR szFormat[256];
LoadString(hInstance, IDS_MY_CUSTOM_MESSAGE, szFormat, 256);
LPTSTR pszResult;
FormatMessage(
        FORMAT_MESSAGE_ALLOCATE_BUFFER |
        FORMAT_MESSAGE_FROM_STRING |
        FORMAT_MESSAGE_ARGUMENT_ARRAY,
        szFormat,
        0,
        0,
        (LPTSTR) &pszResult,
        0,
        (va_list*) &rgdwInsertions); 
</pre>
<p>
I also made a slight change to the final parameter.
When you use <code>FORMAT_MESSAGE_ARGUMENT_ARRAY</code>,
the last parameter must be an array of <code>DWORD_PTR</code>s.
(The parameter must be cast to <code>va_list*</code> to keep
the compiler happy.)
It so happens that the original code got away with this mistake
since <code>sizeof(DWORD_PTR) == sizeof(LPTSTR)</code> and they
both have the same alignment requirements.
On the other hand, if the insertion were a <code>DWORD</code>,
passing <code>(va_list*)&dwValue</code> is definitely wrong
and can crash if you're sufficiently unlucky.
(Determining the conditions under which your luck runs out
is left as an exercise.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-508833">
				<div id="div-comment-508833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-508833">
			May 29, 2007 at 10:25 am</a>		</div>

		<blockquote><p>
  I don&#8217;t understand why they were added to</p>
<p>  Win32, since there was already a way of</p>
<p>  embedding strings in resources, namely,</p>
<p>  string resources.
</p></blockquote>
<p>The kernel guys use structured 32-bit values for all status codes, and there is a strong need for a (localizable) message for every status code.</p>
<p>&quot;Win32 resources&quot; are not an exact fit this requirement, for a number of reasons. A more natural (IMO) approach is to have a single source file that defines the numeric codes and the message strings associated with same.</p>
<p>I suspect that the best reasons for this, though, are</p>
<p>1) They kernel guys came from the VMS culture where use of a message source file/message compiler was the system norm.</p>
<p>2) The kernel, and subsystem, use of same was in existence long before there was a Win32, i.e. back when the OS was &quot;NT OS/2&quot;.</p>
<p>This doesn&#8217;t of course give any direct reason why Win32 had to adopt the same convention as the kernel.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-508853">
				<div id="div-comment-508853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-508853">
			May 29, 2007 at 10:34 am</a>		</div>

		<p>Yeah&#8230;What dave said.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-508903">
				<div id="div-comment-508903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-508903">
			May 29, 2007 at 11:36 am</a>		</div>

		<p>Why is the last arg explicitly typed versus the old &#8220;&#8230;&#8221; indicator for a variable argument list ?</p>
<p>Is it a code-safety related change (so you don&#8217;t pass garbage, or forget a few params that cause garbage to be read off the stack, giving a potential attack vector), a MS preferred implementation manner, a language standard change or __ ?</p>
<div class="post">[<i>Because if it did that, you would be complaining &#8220;Why does it take a &#8230; instead of a va_list?&#8221; It would be impossible to write wrapper functions. Better inconvenient than impossible. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-508923">
				<div id="div-comment-508923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-508923">
			May 29, 2007 at 11:50 am</a>		</div>

		<p>Strings in message tables are assumed to be in the &quot;current ANSI codepage&quot;, whatever that means, and for me that alone is almost incentive enough to never use them.</p>
<p>Strings in string tables are UTF-16, but they are, curiously, packed in bundles of 16 per resource, they are not NUL-terminated and have, instead, a prefix USHORT with the character count (basically making them wide-character Pascal strings). Whoever was responsible for that design sure had to be very proud of it.</p>
<p>Win32 doesn&#8217;t have a standard counted string type, so they cannot be used directly from memory and need to be copied instead. Word on the street is LoadString lets you access the original pointer+size in the resource section as an undocumented feature &#8211; figure it out by yourself. Personally, I prefer a combination of FindResource/LoadResource/LockResource and manually parsing the string bundle.</p>
<p>For some other curious reason, LoadString and wvsprintf are implemented in user32.dll rather than kernel32.dll, pulling in user32.dll (and gdi32.dll, and related kernel mode overhead) unnecessarily from many otherwise minimalistic libraries.</p>
<p>Raymond: I believe DWORD_PTRs are supposed to be equivalent to pointers in everything (size, alignment) but semantics.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-508963">
				<div id="div-comment-508963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-508963">
			May 29, 2007 at 1:20 pm</a>		</div>

		<p>&lt;&lt;Strings in message tables are assumed to be in the &quot;current ANSI codepage&quot;&gt;&gt;</p>
<p>No, they are not.</p>
<p>Just compile a .mc file (using mc.exe) and take a look inside the resulting .bin file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-508973">
				<div id="div-comment-508973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-508973">
			May 29, 2007 at 1:49 pm</a>		</div>

		<p>&gt; Better inconvenient than impossible. -Raymond</p>
<p>The &#8220;standard&#8221; solution to that is to provide two functions, one that takes a &#8230; and another that takes a va_list. &nbsp;See, for instance, fprintf and vfprintf.</p>
<p>(But since the &#8230; version merely forwards to the va_list version, with some va_start/va_end wrapping, it&#8217;s not like it&#8217;d be hard for users to write their own wrapper for FormatMessage. &nbsp;It might be nice if there was a standard wrapper, but oh well.)</p>
<div class=post>[<i>No matter what you do, people will complain that you didn&#8217;t do more. Sometimes you have to accept meeting halfway. Inconvenient is better than impossible. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-508993">
				<div id="div-comment-508993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-508993">
			May 29, 2007 at 2:20 pm</a>		</div>

		<p>Re:</p>
<blockquote><p>
  &gt;Strings in message tables are assumed to be in the &quot;current ANSI codepage&quot;</p>
<p>  No, they are not.
</p></blockquote>
<hr />
<p>Maybe he meant that, by default, the .mc source file is assumed to be in the current ANSI code page. &nbsp;Indeed it is.</p>
<p>But, actually, mc gives you &quot;Unicode or ANSI&quot; control over both input (-a/-u) and output (-A/-U), with -a -U being the default.</p>
<p>Possibly such control is a relatively new feature; I dunno.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-509033">
				<div id="div-comment-509033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jasonhaley.com/blog/archive/2007/05/29/139398.aspx' rel='external nofollow' class='url'>Jason Haley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-509033">
			May 29, 2007 at 3:35 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-509043">
				<div id="div-comment-509043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexei Lebedev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-509043">
			May 29, 2007 at 3:36 pm</a>		</div>

		<p>I think the question is valid.</p>
<p>Given that the function name is FormatMessage, you kind of expect the word MESSAGE to be in some of the flags that are passed to it. In particular, FORMAT_MESSAGE_FROM_HMODULE sounds like a request to load the &quot;message to be formatted&quot; from a resource. The person who asked the question probably didn&#8217;t know about the existence of &quot;message resources&quot;. Similarly, FORMAT_MESSAGE_FROM_STRING, when compared to FORMAT_MESSAGE_FROM_HMODULE, sounds like the function takes a pointer instead of a resource ID.</p>
<p>Better names would be</p>
<p>FORMAT_MESSAGE_FROM_STRING_RESOURCE and</p>
<p>FORMAT_MESSAGE_FROM_MESSAGE_RESOURCE</p>
<p>The bigger problem with FormatMessage is that it takes too many options. In the number of lines the guy spent calling FormatMessage, he could open a text file, scan down to the line containing his message ID, and rip out the string in question. Localizing the file in question would then be a job for the installer, which seems like the right level at which solve the problem. Such text files can also be worked on by the less technically inclined localization guys (as compared to .rc files, which can break the build).</p>
<p>And again, in order to make life easier for the programmer, why deal with these IDs at all? String IDs just tend to repeat, in a mangled form, the contents of the message. A solution I&#8217;ve seen successfully used involved simply wrapping each string in the source that&#8217;s supposed to be localized with a function call:</p>
<p>LocalizeString(&quot;some text&quot;)</p>
<p>A command-line tool then scanned the entire source tree for occurences of the pattern LocalizeString(c++ string). All these strings were saved to the messages file, to which the localization engineer would add translations:</p>
<p>en: some text</p>
<p>ru: рыба</p>
<p>LocalizeString then looked things up in this file. The engineers got readability out of this, and saved one identifier per message.</p>
<p>Orphan messages were also eliminated. Isn&#8217;t this a big problem? Any given Windows program that uses string resources probably has 20% of &quot;garbage&quot; strings (strings that are no longer used).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-509053">
				<div id="div-comment-509053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-509053">
			May 29, 2007 at 3:56 pm</a>		</div>

		<p>&quot;I think the question is valid.&quot;</p>
<p>Who said it wasn&#8217;t?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-509083">
				<div id="div-comment-509083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexei Lebedev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-509083">
			May 29, 2007 at 4:18 pm</a>		</div>

		<p>&#8220;Who said it wasn&#8217;t?&#8221;</p>
<p>The sarcastic mention of psychic powers required to solve the problem is another way of saying &#8220;it doesn&#8217;t take a wizard to figure this out&#8221;. So the person asking the question must be step below plebeian. </p>
<p>If you asked me a question and I offered you to engage your &#8220;nascent psychic powers&#8221;, wouldn&#8217;t you feel put down?</p>
<div class=post>[<i>No, that&#8217;s not what &#8220;psychic powers&#8221; means. &#8220;Psychic powers&#8221; = &#8220;debugging with incomplete information&#8221;. &#8220;Nascent psychic powers&#8221; = &#8220;another trick to add to your arsenal&#8221;. &#8220;Don&#8217;t be helpless&#8221; = &#8220;It doesn&#8217;t take a wizard to figure this out.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-509093">
				<div id="div-comment-509093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexei Lebedev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-509093">
			May 29, 2007 at 4:26 pm</a>		</div>

		<p>&quot;As indeed it does&quot;</p>
<p>Right&#8230; So basically FormatMessage can&#8217;t access string resources, for which LoadString should be used instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kjkhyperion even thread-even depth-1" id="comment-509123">
				<div id="div-comment-509123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-509123">
			May 29, 2007 at 6:03 pm</a>		</div>

		<p>Mihai: turns out we are both right. Some tables contain ANSI strings (see: ntoskrnl.exe) but most have UTF-16 strings. It makes sense that the symbolic names for bugcheck codes (which is what ntoskrnl.exe&#8217;s message table contains) would be ANSI, since the kernel debugging API doesn&#8217;t support Unicode. I guess there&#8217;s a flag for it in the resource format</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-509063">
				<div id="div-comment-509063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-509063">
			May 29, 2007 at 4:09 pm</a>		</div>

		<p>&gt;Similarly, FORMAT_MESSAGE_FROM_STRING, </p>
<p>&gt;when compared to FORMAT_MESSAGE_FROM_HMODULE, </p>
<p>&gt;sounds like the function takes a pointer </p>
<p>&gt;instead of a resource ID.</p>
<p>As indeed it does.</p>
<p>The doc:</p>
<p>The lpSource parameter is a pointer to a null-terminated message definition. The message definition may contain insert sequences, just as the message text in a message table resource may. </p>
<p>/* Here, &quot;message definition&quot; means &quot;array of characters&quot;. &nbsp;*/</p>
<p>and:</p>
<p>dwMessageId </p>
<p>[in] Message identifier for the requested message. This parameter is ignored if dwFlags includes FORMAT_MESSAGE_FROM_STRING. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-509223">
				<div id="div-comment-509223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SvenGroot</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-509223">
			May 30, 2007 at 3:57 am</a>		</div>

		<p>Alexei: in my experience psychic debugging involves someone making a mistake which you are able to guess because it&#8217;s a common mistake, and maybe a mistake you&#8217;ve made yourself in the past.</p>
<p>It doesn&#8217;t mean that the person asking the question is an idiot for not knowing the answer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-509263">
				<div id="div-comment-509263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.shugye.com/2007/05/formatmessage-34.html' rel='external nofollow' class='url'>????:???FormatMessage??????? &laquo; Cloudsun&#8217;s Daily Review</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-509263">
			May 30, 2007 at 6:38 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.shugye.com/2007/05/formatmessage-34.html" rel="nofollow">http://www.shugye.com/2007/05/formatmessage-34.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-509303">
				<div id="div-comment-509303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-509303">
			May 30, 2007 at 9:08 am</a>		</div>

		<blockquote><p>
  That sure looks like lpSource should point to a</p>
<p>  message resource. &nbsp;Even though a message is a</p>
<p>  string, MSDN calls for a message definition.</p>
<p>  If someone didn&#8217;t guess the difference between</p>
<p>  FORMAT_MESSAGE_FROM_HMODULE and</p>
<p>  FORMAT_MESSAGE_FROM_STRING, your blog is</p>
<p>  the only way they can find out.
</p></blockquote>
<p>Well, there&#8217;s always &quot;try it and see&quot;. &nbsp;But that&#8217;s perhaps too difficult?</p>
<p>I don&#8217;t understand why you think this is such a big complicated deal. It&#8217;s obvious to me that &quot;FROM_STRING&quot; means &quot;from a string&quot;. Perhaps I&#8217;m way too literal-minded.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-509203">
				<div id="div-comment-509203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-509203">
			May 30, 2007 at 2:20 am</a>		</div>

		<p>&gt; If you&#8217;re not going to use a message resource,</p>
<p>&gt; you&#8217;ll have to use the FORMAT_MESSAGE_FROM_STRING</p>
<p>&gt; flag and pass the format string explicitly.</p>
<p>I believe you, but look at this:</p>
<p>* &nbsp;FORMAT_MESSAGE_FROM_STRING</p>
<p>* &nbsp;The lpSource parameter is a pointer to a</p>
<p>* &nbsp;null-terminated message definition.</p>
<p>That sure looks like lpSource should point to a message resource. &nbsp;Even though a message is a string, MSDN calls for a message definition. &nbsp;If someone didn&#8217;t guess the difference between FORMAT_MESSAGE_FROM_HMODULE and FORMAT_MESSAGE_FROM_STRING, your blog is the only way they can find out.</p>
<p>Tuesday, May 29, 2007 3:36 PM by Alexei Lebedev</p>
<p>&gt; In the number of lines the guy spent calling</p>
<p>&gt; FormatMessage, he could open a text file, scan</p>
<p>&gt; down to the line containing his message ID,</p>
<p>&gt; and rip out the string in question.</p>
<p>Thereby making execution very inefficient on every target machine every time it gets executed, instead of once while trying to figure out how to code the function call. &nbsp;If all the lines of parameters were understandable then it would be better to accept the number of parameters.</p>
<p>&gt; String IDs just tend to repeat, in a mangled</p>
<p>&gt; form, the contents of the message.</p>
<p>Not always. &nbsp;Thank you for helping provide a counterexample.</p>
<p>Contents of the message: &nbsp;рыба</p>
<p>ID: &nbsp;Not &nbsp;ID_рыба</p>
<p>&gt; LocalizeString then looked things up in this file.</p>
<p>And that&#8217;s why, for example, a vendor&#8217;s web page shows a list of products, in which the left hand column (except for the top row) is an integer starting at 1 and counting up, and the left hand column&#8217;s header (top row) is a word which means the opposite of &quot;Yes&quot;. &nbsp;The vendor started with a word that means the opposite of &quot;Yes&quot; in one or two languages, and localization took that meaning, instead of finding localizations of a different meaning of that word.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-509313">
				<div id="div-comment-509313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-509313">
			May 30, 2007 at 10:00 am</a>		</div>

		<p>Norman Diamond: it&#8217;s called a &quot;message definition&quot; and not a &quot;message&quot; because you pass a formatting string with argument placeholders. The input string is a &quot;message definition&quot;, the &quot;message&quot; is the final output</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-509513">
				<div id="div-comment-509513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JustMe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-509513">
			May 30, 2007 at 2:40 pm</a>		</div>

		<p>At KJK::Hyperion:</p>
<p>You wrote:</p>
<p>&quot;Win32 doesn&#8217;t have a standard counted string type,&quot;</p>
<p>Yes, that is right. But the kernel does have it: As ANSI_STRING as well as UNICODE_STRING. In fact, these are most often used for strings there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-509673">
				<div id="div-comment-509673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ac</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-509673">
			May 30, 2007 at 10:22 pm</a>		</div>

		<p>BSTR&#8217;s are a part of win32 and they are counted</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-509753">
				<div id="div-comment-509753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-509753">
			May 31, 2007 at 6:04 am</a>		</div>

		<p>ac: see what JustMe said. BSTRs have their own Very Special allocator (requiring, in this case, to copy the string anyway), you can&#8217;t use them to refer to a string in an arbitrary range of memory</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-509773">
				<div id="div-comment-509773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-509773">
			May 31, 2007 at 8:17 am</a>		</div>

		<p>&gt; almost nobody uses message resources</p>
<p>Except for those who write to the event log.</p>
<div class="post">[<i>That&#8217;s what the word <u>almost</u> means. Sigh. Do you want a medal? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-510123">
				<div id="div-comment-510123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-510123">
			May 31, 2007 at 9:59 pm</a>		</div>

		<p>Thursday, May 31, 2007 8:17 AM by Jonathan</p>
<blockquote><p>
  &gt; almost nobody uses message resources</p>
<p>  Except for those who write to the event log.
</p></blockquote>
<p>Either that, or including those who write to the event log ^_^</p>
<p>For a few years I was confused by a ton of event log messages talking about not having resources for remote computers. &nbsp;Then one day I wanted to add some debugging traces to a program, but didn&#8217;t want to spend a few days figuring out how to obey MSDN&#8217;s rules just to record debugging traces, so I recorded strings the same way I used to do with printk. &nbsp;Oh, so that&#8217;s where all those log messages came from, talking about not having resources for remote computers. &nbsp;When a very small software company made &lt;deleted&gt; around 7 years ago, they were as lazy as I was.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-556803">
				<div id="div-comment-556803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.itsatrap.info/the-perils-of-translating-words-blindly-without-verifying-them-in-context-2/' rel='external nofollow' class='url'>Its A Trap &raquo; The perils of translating words blindly without verifying them in context</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070529-00/?p=26663#comment-556803">
			October 4, 2007 at 10:21 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.itsatrap.info/the-perils-of-translating-words-blindly-without-verifying-them-in-context-2/" rel="nofollow">http://www.itsatrap.info/the-perils-of-translating-words-blindly-without-verifying-them-in-context-2/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

