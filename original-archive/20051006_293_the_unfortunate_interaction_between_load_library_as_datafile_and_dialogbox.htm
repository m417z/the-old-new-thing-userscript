<html>
<head>
<title>The unfortunate interaction between LOAD_LIBRARY_AS_DATAFILE and DialogBox</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The unfortunate interaction between LOAD_LIBRARY_AS_DATAFILE and DialogBox</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 6, 2005 / year-entry #294</td></tr>
<tr><td><b>Tags:</b></td><td>code;history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20051006-09/?p=33883</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Some people have noticed that if you load a DLL with the LOAD_LIBRARY_AS_DATAFILE flag, you sometimes get strange behavior if you then pass that HINSTANCE to a dialog box function. The problem here is that since the bottom 16 bits of a proper HINSTANCE are always zero, different components have "borrowed" those bits for different...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Some people have noticed that if you load a DLL with the <code>LOAD_LIBRARY_AS_DATAFILE</code> flag, you sometimes get strange behavior if you then pass that <code>HINSTANCE</code> to a dialog box function.</p>
<p> The problem here is that since the bottom 16 bits of a proper <code>HINSTANCE</code> are always zero, different components have "borrowed" those bits for different purposes. The kernel uses the bottom bit to distinguish modules loaded by having been mapped into memory as sections (i.e., loaded normally) from those who have been mapped as one giant block (loaded as a datafile). It needs to know this so that the various resource-management functions such as <a href="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/resources/introductiontoresources/resourcereference/resourcefunctions/findresource.asp"> the <code>FindResource</code> function</a> know how to interpret the data in order to locate the resource in question. Although everybody now knows that the <code>HINSTANCE</code> is the base address of the DLL, in principle, it is an opaque value (and in the 16-bit world, the value was indeed opaque). </p>
<p> Meanwhile, the window manager has its own problems. In order to support 16-bit applications running seamlessly on the desktop (<a href="http://blogs.msdn.com/oldnewthing/archive/2005/10/05/477317.aspx">not in a virtual machine, as discussed earlier</a>), as well as thunking between 16-bit and 32-bit code, it needs to accept both 32-bit <code>HINSTANCE</code> values as well as 16-bit <code>HINSTANCE</code> values. Since <a href="http://blogs.msdn.com/oldnewthing/archive/2003/10/08/55239.aspx"> memory allocation granularity is 64KB</a>, the window manager knows that valid 32-bit <code>HINSTANCE</code>s have zero in the bottom 16 bits, whereas 16-bit <code>HINSTANCE</code> values are nonzero there. </p>
<p> Perhaps you see the conflict now. </p>
<p> If you pass the instance handle of a DLL loaded as a datafile, the kernel will set the bottom bit as a signal to itself to locate its resources in the flat datafile manner rather than in the mapped DLL manner. But the window manager sees that the bottom 16 bits are not all zero and assumes that it has been given a 16-bit <code>HINSTANCE</code> value. </p>
<p> Amazingly, this doesn't cause a problem most of the time because the things that need to be handled differently between 32-bit and 16-bit <code>HINSTANCE</code>s are relatively minor. The one that is most likely to bite you is the dialog instance data segment. </p>
<p> In 16-bit Windows, a dialog box came with its own data segment, which was used as the local data segment for controls hosted by that dialog box. Most controls didn't need a lot of storage in the local data segment, so the issue of where it came from wasn't really important. The big exception was edit controls, since they can contain multiple kilobytes of text. a dozen kilobytes of text may very well not fit in the application's data segment. Therefore, creating a new data segment gave the edit controls on the dialog a new 64KB block of memory to store their data in. Programs were expected to extract the data from the edit control via mechanisms such as <a href="http://blogs.msdn.com/oldnewthing/archive/2003/08/21/54675.aspx"> the <code>GetWindowText</code> function</a> and store the result someplace that had the capacity to handle it (outside the cramped local data segment). </p>
<p> In order to maintain compatibility with 16-bit programs who are expecting this behavior to continue, the window manager, when it sees a 16-bit <code>HINSTANCE</code>, dutifully creates a 16-bit data segment in which to store the data for the edit controls, using a helper function provided by the 16-bit emulation layer. But if you aren't really a 16-bit program, then the 16-bit emulation layer is not active, and consequently  it never got a chance to tell the window manager how to create one of these compatibility segments. Result: Crash. </p>
<p> The solution is to add the <code>DS_LOCALEDIT</code> style to your dialog box styles. This flag means "Do not create a dialog box data segment; just keep using the data segment of the caller." Therefore, when your <code>LOAD_LIBRARY_AS_DATAFILE</code> <code>HINSTANCE</code> is mistaken for a 16-bit dialog template, the dialog manager won't try to create a dialog box data segment and therefore won't call that function that doesn't exist. </p>
<p> I believe this issue has been resolved in Windows XP&nbsp;SP&nbsp;2. The window manager uses a different mechanism to detect that it is being asked to create a dialog box on behalf of a 16-bit program and is no longer faked out by the faux-<code>HINSTANCE</code>s produced by <a href="http://msdn.microsoft.com/library/en-us/dllproc/base/loadlibraryex.asp"> the <code>LoadLibraryEx</code> function</a>. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-311523">
				<div id="div-comment-311523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Heston Holtmann</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051006-09/?p=33883#comment-311523">
			October 6, 2005 at 2:12 pm</a>		</div>

		<ol>
<li>When did this bug come into existence; i.e; When Win95 was developed?<br />
<br />2. When did Microsoft become <em>aware</em> of this bug?<br />
<br />3. Why did it take so long to finaly ship the fix?</p>
<p>Just curious?</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-311573">
				<div id="div-comment-311573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051006-09/?p=33883#comment-311573">
			October 7, 2005 at 4:00 am</a>		</div>

		<p>Craig:</p>
<p>I&#8217;d strongly recommend &quot;Windows System Programming&quot; (Third Edition) by Johnson M. Hart.  It&#8217;s a clear, professional study of Win32 for experienced Unix and VMS programmers.</p>
<p>The issue with malloc &amp; free between different DLLs is this:  if you choose to build each DLL statically linked and bound to its own copy of the C run-time library, then each DLL will maintain its own heap, its own streams and file handles, its own errno, etc.</p>
<p>Instead, link your C programs and DLLs against the &quot;multithreaded DLL&quot; version of the library (using the /MD compiler flag), which makes them all share a single copy of the MSVCRT.DLL library.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-311553">
				<div id="div-comment-311553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mailto:craig@postnewspapers.com.au' rel='external nofollow' class='url'>Craig Ringer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051006-09/?p=33883#comment-311553">
			October 6, 2005 at 11:40 pm</a>		</div>

		<p>This sort of thing is pretty amazing. I don&#8217;t envy the Windows team their job of maintaining source and binary compatibility for 15-year-old applications while trying to produce a secure, reliable OS for users who don&#8217;t want to sacrifice anything for security or reliability.</p>
<p>Eek.</p>
<p>In fairness, this sort of scary quirk is why I avoid win32 programming like the plague. On the other hand, if I had a large body of existing win32 code to maintain I imagine I&#8217;d be very thankful indeed for this sort of compatibility hack.</p>
<p>On a side note, is there any MSDN coverage of safe memory handling in DLLs and safe pointer use between DLLs? I found very little, and most information I&#8217;ve seen has been from other (perhaps outdated) sources. As a UNIX guy who&#8217;s dabbling with Windows, this is immensely frustrating &#8211; on UNIX, shared libraries seem *WAY* simpler. It&#8217;s very hard to find out what you can and can not safely do with/in DLLs on win32. I mean things like &quot;allocate memory in DLL 1 and free it in DLL 2&quot;. It&#8217;s even harder to find out what limitations are due to the inherent architecture of DLLs on win32, and what is due to binary compatibility problems caused by the need to support runtime linking DLLs built by three different compilers into an executable built by a fourth.</p>
<p>Maybe MSDN could use a section with references for people coming from UNIX/Linux platforms &#8211; they&#8217;ll understand C and C++, but not the win32 API, process model, threading model, shared library handling, etc. A section with links, and where possible explanations of the win32 systems in terms of the UNIX/Linux approach to each problem, would be really handy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-311593">
				<div id="div-comment-311593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas Haeber</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051006-09/?p=33883#comment-311593">
			October 7, 2005 at 8:06 am</a>		</div>

		<p>Maybe a bit late to post a comment here now.</p>
<p>Craig, if you ever read this page again: Look at <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnucmg/html/UCMGch09.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnucmg/html/UCMGch09.asp</a> for a comparison of Win32 and UNIX.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-311563">
				<div id="div-comment-311563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051006-09/?p=33883#comment-311563">
			October 7, 2005 at 2:01 am</a>		</div>

		<p>If you&#8217;re going straight to Win32 API for your memory management, it doesn&#8217;t care whether you do stuff in a DLL, the EXE, separate DLLs, whatever.  It&#8217;s all a single process.</p>
<p>If you link two pieces of code against different *instances* of some runtime library and use it to manage memory, you could have problems.  The C and C++ runtime libraries have a significant amount of internal state, including their own private heaps (apparently&#8230;).  The rule is, any time state is created in the runtime in one DLL, don&#8217;t expect that state to exist in another.</p>
<p>However, if you link all DLLs against the same version of the multithreaded dll version of the runtime, they&#8217;ll share a single instance and the problem goes away.  That&#8217;s the proper solution.</p>
<p>Or at least, that&#8217;s how I remember it&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-311583">
				<div id="div-comment-311583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051006-09/?p=33883#comment-311583">
			October 7, 2005 at 7:16 am</a>		</div>

		<p>&gt; the window manager knows that valid 32-bit HINSTANCEs have zero in the bottom 16 bits, whereas 16-bit HINSTANCE values are nonzero there.</p>
<p>Presumably 16-bit HINSTANCE values are zero in the *top* 16 bits, whereas 32-bit HINSTANCEs are nonzero there.</p>
<p>Or am I overlooking the obvious?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

