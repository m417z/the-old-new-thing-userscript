<html>
<head>
<title>If you wonder why a function can't be found, one thing to check is whether the function exists in the first place</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If you wonder why a function can&#8217;t be found, one thing to check is whether the function exists in the first place</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 4, 2015 / year-entry #26</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150204-00/?p=44753</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">One of my colleagues was frustrated trying to get some code to build. "Is there something strange about linking variadic functions? Because I keep getting an unresolved external error for the function, but if I move the function definition to the declaration point, then everything works fine." // blahblah.h ... other declarations ... void LogWidget(Widget*...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
One of my colleagues was frustrated trying to get some code to build.
"Is there something strange about linking variadic functions?
Because I keep getting an unresolved external error for the function,
but if I move the function definition to the declaration point,
then everything works fine."
</p>
<pre>
// blahblah.h

... other declarations ...

void LogWidget(Widget* widget, const char* format, ...);

...

// widgetstuff.cpp
...
#include "blahblah.h"
...

// some code that calls LogWidget
void foo(Widget* widget)
{
 LogWidget(widget, "starting foo");
 ...
}

// and then near the end of the file

void LogWidget(Widget* widget, const char* format, ...)
{
    ... implementation ...
}

...
</pre>
<p>
"With the above code, the linker complains that
<code>Log&shy;Widget</code> cannot be found.
But if I move the implementation of
<code>Log&shy;Widget</code> to the top of the file,
then everything builds fine."
</p>
<pre>
// widgetstuff.cpp
...
#include "blahblah.h"
...

// move the code up here
void LogWidget(Widget* widget, const char* format, ...)
{
    ... implementation ...
}

// some code that calls LogWidget
void foo(Widget* widget)
{
 LogWidget(widget, "starting foo");
 ...
}

...
</pre>
</p>
<p>"I tried putting an explicit calling convention in the
declaration,
I tried using <code>extern "C"</code>,
nothing seems to help."
</p>
<p>
We looked at the resulting object file and observed that
in the case where the error occurred,
there was an external reference to
<code>Log&shy;Widget</code> but no definition.
I asked,
"Is the definition of the function
<code>#ifdef</code>'d out by mistake?
You can use
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2008/04/10/8370479.aspx">
this technique</a>
to find out."
</p>
<p>
That was indeed the problem.
The definition of the function was inside some sort of
<code>#ifdef</code> that prevented it from being compiled.
</p>
<p>
Sometimes, the reason a function cannot be found is that it doesn't
exist in the first place.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1174393">
				<div id="div-comment-1174393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">George</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150204-00/?p=44753#comment-1174393">
			February 4, 2015 at 8:56 am</a>		</div>

		<p>I think that this code, as written, would cause a compile error first, and not get to the link phase? &nbsp;At least that has been my experience in such situations.</p>
<div class="post">[<em>I don&#39;t see what the error would be. The prototype is in the header file, and the cpp file includes the header file. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1174413">
				<div id="div-comment-1174413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150204-00/?p=44753#comment-1174413">
			February 4, 2015 at 9:47 am</a>		</div>

		<p>@George: Some compilers (at least the embedded one I use) have a setting to automatically generate prototype declarations for functions. So what happens is you get the compiler&#39;s best guess at what type the parameters are. If you then have the function defined later in the unit, with a different parameter list, it doesn&#39;t match, and the linker finds that. Raymond also specifically mentioned that the definition was a variadac function and the use only used the first two parameters.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1174423">
				<div id="div-comment-1174423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">George</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150204-00/?p=44753#comment-1174423">
			February 4, 2015 at 10:04 am</a>		</div>

		<p>@Brian EE: Point well taken about some non-Windows environments and toolsets.</p>
<p>However, if you were to take this in the context of Windows programming (this is Raymond&#39;s blog, after all), and make a small Win32 console app (C++, in VS2013) that does basically what Raymond outlined, You get &quot;error C3861: &#39;Log Widget&#39;: identifier not found&quot; as a compiler error, and no linking occurs. &nbsp;Perhaps I should have been more clear about what I was attempting to put onto the bit-page.</p>
<div class="post">[<em>Worked for me, once I added a <code>class Widget;</code> to the top of blahblah.h. Did you remember the <code>#include &quot;blahblah.h&quot;</code> at the top of widgetstuff.cpp? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1174433">
				<div id="div-comment-1174433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150204-00/?p=44753#comment-1174433">
			February 4, 2015 at 10:07 am</a>		</div>

		<p>It&#39;s hard to find a black cat in a dark room, especially if it&#39;s not there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1174443">
				<div id="div-comment-1174443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">George</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150204-00/?p=44753#comment-1174443">
			February 4, 2015 at 10:10 am</a>		</div>

		<p>@Raymond: I guess I misunderstood what was in the exclusionary ifdef. &nbsp;Despite decades, I can&#39;t always keep a definition separate from a declaration. &nbsp;If you attempt to refer to LogWidget before it is known what the function definition or declaration is, the compile error does seem to occur.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1174463">
				<div id="div-comment-1174463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150204-00/?p=44753#comment-1174463">
			February 4, 2015 at 12:18 pm</a>		</div>

		<p>&#8230;and this is why we use syntax highlighting in Visual Studio, so that we can see that LogWidget is greyed-out, and therefore #ifdef&#39;ed out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1174453">
				<div id="div-comment-1174453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150204-00/?p=44753#comment-1174453">
			February 4, 2015 at 11:06 am</a>		</div>

		<p>@George: Raymond is talking about an exclusionary ifdef in the *source implementation file*, NOT the header file, i.e. this:</p>
<p>// widgetstuff.cpp</p>
<p>#include &quot;blahblah.h&quot; &nbsp;// This includes the declaration of the LogWidget prototype</p>
<p>// some code that calls LogWidget</p>
<p>void foo(Widget* widget)</p>
<p>{</p>
<p> LogWidget(widget, &quot;starting foo&quot;);</p>
<p> &#8230;</p>
<p>}</p>
<p>&#8230;</p>
<p>#ifdef SOME_MACRO_WHICH_IS_NOT_ACTUALLY_DEFINED</p>
<p>void LogWidget(Widget* widget, const char* format, &#8230;)</p>
<p>{</p>
<p> &nbsp; &nbsp;&#8230; implementation &#8230;</p>
<p>}</p>
<p>#endif</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1174633">
				<div id="div-comment-1174633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150204-00/?p=44753#comment-1174633">
			February 5, 2015 at 12:22 pm</a>		</div>

		<p>@mh, that&#39;s assuming Visual Studio is right. &nbsp;It&#39;s not always.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1174643">
				<div id="div-comment-1174643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150204-00/?p=44753#comment-1174643">
			February 5, 2015 at 2:33 pm</a>		</div>

		<p>Depending on your build environment/compiler, asking for the post-preprocessor spew may also be an option &#8211; that way you see what the compiler sees instead of trying to infer what it sees.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1174703">
				<div id="div-comment-1174703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@mh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150204-00/?p=44753#comment-1174703">
			February 6, 2015 at 5:55 am</a>		</div>

		<p>&gt;&#8230;why we use syntax highlighting in Visual Stud</p>
<p>Yea. It works if you account for _DEBUG (hehe) and if the highlighted project in the solution tree is the one you know it is. At any rate, you&#39;re lame.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

