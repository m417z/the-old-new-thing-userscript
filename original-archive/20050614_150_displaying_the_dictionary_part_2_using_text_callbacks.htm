<html>
<head>
<title>Displaying the dictionary, part 2:  Using text callbacks</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Displaying the dictionary, part 2:  Using text callbacks</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 14, 2005 / year-entry #151</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050614-18/?p=35323</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">As we noted last time, adding items to the listview takes an absurd amount of time. Today, we'll make a failed attempt at improving this because it lets me illustrate a listview technique and it lays the groundwork for the real fix next time. Instead of creating the items in their entirety, let's set their...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/06/13/428534.aspx">
As we noted last time</a>,
adding items to the listview takes an absurd amount of time.
Today, we'll make a failed attempt at improving this
because it lets me illustrate a listview technique
and it lays the groundwork for the real fix next time.
</p>
<p>
Instead of creating the items in their entirety,
let's set their text to <code>LPSTR_TEXTCALLBACK</code>.
This is a placeholder value which indicates
"I'm not going to tell you what the string is.
If you need it, call me back."
</p>
<pre>
class RootWindow : public Window
{
 ...
 LRESULT OnCreate();
 <font COLOR=blue>LRESULT OnNotify(NMHDR* pnm);
 void OnGetDispInfo(NMLVDISPINFO* pnmv);</font>
 ...
};

LRESULT RootWindow::OnCreate()
{
 ...
 <font COLOR=blue><strike>// item.pszText = const_cast&lt;LPWSTR&gt;(de.m_pszTrad);</strike>
 item.pszText = LPSTR_TEXTCALLBACK;</font>
 ...
   <font COLOR=blue><strike>// item.pszText = const_cast&lt;LPWSTR&gt;(de.m_pszPinyin);</strike>
   item.pszText = LPSTR_TEXTCALLBACK;</font>
 ...
   <font COLOR=blue><strike>// item.pszText = const_cast&lt;LPWSTR&gt;(de.m_pszEnglish);</strike>
   item.pszText = LPSTR_TEXTCALLBACK;</font>
 ...
}

<font COLOR=blue>LRESULT RootWindow::OnNotify(NMHDR *pnm)
{
 switch (pnm-&gt;code) {
 case LVN_GETDISPINFO:
  OnGetDispInfo(CONTAINING_RECORD(pnm, NMLVDISPINFO, hdr));
  break;
 }
 return 0;
}

void RootWindow::OnGetDispInfo(NMLVDISPINFO* pnmv)
{
 if (pnmv-&gt;item.iItem &lt; 0 || // typo fixed 11am
     pnmv-&gt;item.iItem &gt;= Length()) {
  return;         // requesting invalid item
 }

 if (pnmv-&gt;item.mask &amp; LVIF_TEXT) {
  const DictionaryEntry&amp; de = Item(pnmv-&gt;item.iItem);
  LPCWSTR pszResult = L"";
  switch (pnmv-&gt;item.iSubItem) {
   case COL_TRAD:    pszResult = de.m_pszTrad;    break;
   case COL_PINYIN:  pszResult = de.m_pszPinyin;  break;
   case COL_ENGLISH: pszResult = de.m_pszEnglish; break;
  }
  pnmv-&gt;item.pszText = const_cast&lt;LPWSTR&gt;(pszResult);
 }

 if (pnmv-&gt;item.mask &amp; LVIF_IMAGE) {
  pnmv-&gt;item.iImage = -1;
 }

 if (pnmv-&gt;item.mask &amp; LVIF_STATE) {
     pnmv-&gt;item.state = 0;
 }

}</font>

LRESULT RootWindow::HandleMessage(
                          UINT uMsg, WPARAM wParam, LPARAM lParam)
{
 ...
  <font COLOR=blue>case WM_NOTIFY:
   return OnNotify(reinterpret_cast&lt;NMHDR*&gt;(lParam));</font>
 ...
}
</pre>
<p>
Instead of setting the strings when we create the listview items,
we set their texts to <code>LPSTR_TEXTCALLBACK</code>.
When the listview needs the text, it sends us a
<code>LVN_GETDISPINFO</code> notification, which we handle
by returning the data that the listview requested.
</p>
<p>
<strong>Sidebar</strong>:
In our case, obtaining the missing data is very fast.
If it were slow, we could have optimized the function further by
adding the line</p>
<pre>
 pnmv-&gt;item.mask |= LVIF_DI_SETITEM;
</pre>
<p>to the end.  This tells the listview, "Please cache these results
and don't ask me for them again."
That way, we do the slow computation only once.
</p>
<p>
After making these changes (though not the <code>LVIF_DI_SETITEM</code>
change; that was just a sidebar),
notice that the it didn't really help much.
On my machine, the startup time dropped from eleven to ten seconds,
but ten seconds is still way too long.
This optimization turns out to have been a washout.
</p>
<p>
(Note also that our program is now relying heavily on the fact
that a vector is a fast random-access data structure.)
</p>
<p>
We'll do better next time.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-282663">
				<div id="div-comment-282663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">gnobal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050614-18/?p=35323#comment-282663">
			June 14, 2005 at 9:25 am</a>		</div>

		<p>A little typo in:<br />
<br />&quot;if (pnmv-&gt;item.iItem &lt;; 0 ||&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-282703">
				<div id="div-comment-282703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">macbirdie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050614-18/?p=35323#comment-282703">
			June 14, 2005 at 6:18 pm</a>		</div>

		<p>I&#8217;m pretty new to Win32 programming (a little bit late but what the heck) and I&#8217;m surprised with amounts of possibilities of making Windows GUI software blazingly fast with a little bit of work and knowledge. What I&#8217;m not surprised with is that there aren&#8217;t many software developers who can or want to take advantage of these nice toys &#8211; I think it&#8217;s worth it anyway.</p>
<p>I&#8217;d love to see some examples of all those callbacks list views, tree views etc. used The Truly Right Way (TM). Any good sites maybe? Thanks in advance!</p>
<p>And thank you Raymond for your really great, informative blog.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-282713">
				<div id="div-comment-282713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sriram</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050614-18/?p=35323#comment-282713">
			June 14, 2005 at 7:46 pm</a>		</div>

		<p>We are still looping through all ~20,000 entries, and instead of inserting the actual text, just inserting item.pszText = LPSTR_TEXTCALLBACK, which is why we don&#8217;t see a significant speed-up I assume?  I would have thought this might even be slower than the first method, with the added overhead of callbacks etc&#8230;</p>
<p>I&#8217;m curious as to whether the source of the delay is overhead due to sending 20,000 messages, or whether the slowdown is caused by adding an item to the listview.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-282723">
				<div id="div-comment-282723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.luminance.org/' rel='external nofollow' class='url'>Janus</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050614-18/?p=35323#comment-282723">
			June 14, 2005 at 8:03 pm</a>		</div>

		<p>snram: The delay is probably a bit of both, but I imagine most of the delay is from adding the items.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-282743">
				<div id="div-comment-282743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.acelogix.com' rel='external nofollow' class='url'>Hari</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050614-18/?p=35323#comment-282743">
			June 14, 2005 at 10:19 pm</a>		</div>

		<p>This is not a virtual list yet ; when virtual list view is used, there is no need to insert any items, and it will be lightning fast. I guess thats what RC is upto.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-282753">
				<div id="div-comment-282753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin Idzi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050614-18/?p=35323#comment-282753">
			June 14, 2005 at 10:57 pm</a>		</div>

		<p>I&#8217;ve worked with this a lot at my prior company. simply adding the item kills performance. And removing the items is just as bad.  The way that I hacked it, and this was using VB6, so it was a bit uglier.. was to add items as needed. </p>
<p>I ended up faking out the scrollbar so that I&#8217;d add a few pages at a time to the listview with their data, and then I&#8217;d adjust the scrollbar so that the scrollbar sizing was correct.  Then you adjust if the user clicks pagedown, down, etc. and when they click on the scrollbar.  Then if a different dataset is bound to the listview, I would prune the &#8216;extra&#8217; list items if there were too many, or else I&#8217;d leave it as is and grow the listview as the data is paged down.</p>
<p>If a user clicks on a column to sort, then I go ahead and load all of the data as normal (it&#8217;s automatically cached) and do the sorting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-282693">
				<div id="div-comment-282693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">B. Y.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050614-18/?p=35323#comment-282693">
			June 14, 2005 at 4:26 pm</a>		</div>

		<p>Looks like it starts to free from the 2nd most recently allocated block:</p>
<p>  StringPool::~StringPool()<br />
<br />  {<br />
<br />   HEADER* phdr = m_phdrCur;<br />
<br />   while (phdr) {<br />
<br />    HEADER hdr = *phdr;<br />
<br />    VirtualFree(hdr.m_phdrPrev, hdr.m_cb, MEM_RELEASE);<br />
<br />    phdr = hdr.m_phdrPrev;<br />
<br />   }<br />
<br />  }</p>
<p>how about:</p>
<p>  StringPool::~StringPool()<br />
<br />  {<br />
<br />   while (m_phdrCur) {<br />
<br />    HEADER*prev = phdr-&gt;m_phdrPrev;<br />
<br />    VirtualFree(m_phdrCur, m_phdrCur-&gt;m_cb, MEM_RELEASE);<br />
<br />    m_phdrCur=prev;<br />
<br />   }<br />
<br />  }</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-282763">
				<div id="div-comment-282763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://chuchuva.com/' rel='external nofollow' class='url'>Pavel Chuchuva</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050614-18/?p=35323#comment-282763">
			June 14, 2005 at 11:37 pm</a>		</div>

		<p>Probably LVS_OWNERDATA style is needed. You set number of items first but do not insert them. This should improve performance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-282783">
				<div id="div-comment-282783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050614-18/?p=35323#comment-282783">
			June 15, 2005 at 2:52 am</a>		</div>

		<p>Off-topic: &quot;We&#8217;ll do better next time.&quot; seems to be the mantra of Windows in particular and of (all) software makers in general :) Sorry for being a dirty bastard, I just couldn&#8217;t hold it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-282793">
				<div id="div-comment-282793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/06/15/429338.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050614-18/?p=35323#comment-282793">
			June 15, 2005 at 9:02 am</a>		</div>

		<p>Owner-data listviews let you take over data management from the listview.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-283013">
				<div id="div-comment-283013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mfink</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050614-18/?p=35323#comment-283013">
			June 16, 2005 at 1:48 am</a>		</div>

		<p>Hi,<br />
<br />I used to call</p>
<p>  ::SendMessage(m_hwndLV, WM_SETREDRAW, (WPARAM)FALSE, 0);</p>
<p>before inserting all the items, and the same call but with TRUE as wParam parameter, followed by a call</p>
<p>  ::RedrawWindow(m_hwndLV, NULL, NULL, RDW_INVALIDATE);</p>
<p>to redraw the window. Inserting items then dropped from ~10 seconds to about 1 second. But if that would have used, it would make not that much difference, would it? Or are there any problems using WM_SETREDRAW?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-283033">
				<div id="div-comment-283033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin Idzi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050614-18/?p=35323#comment-283033">
			June 16, 2005 at 8:54 am</a>		</div>

		<p>It is true that the ownerdata is the best, but when using VB, to keep it simple and pluggable, sometimes it is best to use the listview as-is and just &#8216;attach&#8217; the functionality to an existing listview, instead of having to actually create it. </p>
<p>As far as the redraw function, that does not fix the loading speed issue, and it causes horrible refreshing in some cases.  The listview does a much &#8216;better&#8217; job at refreshing itself by using the dirty areas, you just have to work with it to make it be efficient.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

