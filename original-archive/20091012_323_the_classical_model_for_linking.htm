<html>
<head>
<title>The classical model for linking</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The classical model for linking</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 12, 2009 / year-entry #324</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20091012-00/?p=16413</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Commenter Adam wonders why we need import libraries anyway. Why can't all the type information be encoded in the export table? This goes back to the classical model for linking. This model existed for decades before Microsoft was even founded, so at least this time you don't have Bill Gates to kick around. (Though I'm...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Commenter Adam wonders
<a HREF="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#670698">
why we need import libraries anyway</a>.
Why can't all the type information be encoded in the export table?
</p>
<p>
This goes back to the classical model for linking.
This model existed for decades before Microsoft was even founded,
so at least this time you don't have Bill Gates to kick around.
(Though I'm sure you'll find a way anyway.)
</p>
<p>
Back in the days when computer programs fit into a single
source file, there was only one step in producing an executable
file:
You compile it.
The compiler takes the source code, parses it according to the rules
of the applicable language, generates machine code,
and writes it to a file,
ready to be executed.
</p>
<p>
This model had quite a following,
in large part because
<a HREF="http://dn.codegear.com/article/20693">
it was ridiculously fast
if you had a so-called <i>one-pass</i> compiler</a>.
</p>
<p>
When programs got complicated enough that you couldn't
fit them all into a single source file,
the job was split into two parts.
The compiler still did all the heavy lifting:
It parsed the source code and generated machine code,
but if the source code referenced a symbol that was
defined in another source file, the compiler doesn't know
what memory address to generate for that reference.
The compiler instead generated a placeholder address
and included some metadata that said,
"Hey, there is a placeholder address at offset XYZ
for symbol ABC."
And for each symbol in the file, it also generated some
metadata that said,
"Hey, in case anybody asks, I have a symbol called BCD
at offset WXY."
These "99%-compiled" files were called <i>object modules</i>.
</p>
<p>
The job of the linker was to finish that last 1%.
It took all the object module and glued the dangling bits together.
If one object module said
"I have a placeholder for symbol ABC,"
it went and looked for any other object module that said
"I have a symbol called ABC,"
and it filled in the placeholder with the information
about ABC, known as <i>resolving the external reference</i>.
</p>
<p>
When all the placeholders got filled in, the linker could
then write out the finished executable module.
And if there were any placeholders left over,
you got the dreaded
<i>unresolved external</i> error.
</p>
<p>
Notice that the only information about symbols
that is provided in the object module is the symbol name.
Older languages trusted the programmer to get everything else right.
If your FORTRAN program
defined a common block with two integers and a real,
and you referenced it from another source file,
it was simply a language requirement that when you access the
common block, you must treat it as having two integers and a real.
The compiler was not under any obligation to verify that your
uses of the common block were consistent.
Similar, if
<a HREF="http://geeks.netindonesia.net/blogs/lontong/archive/2008/08/04/calling-convention-mismatch.aspx">
your C program took a function returning <i>long</i>
and redeclared it as a function returning <i>int</i></a>,
the compiler merely agreed to your little subterfuge,
and you were on the hook for the consequences.
</p>
<p>
Given the classical model for linking, that's pretty much
all the language specification could do.
All that was shared between object modules was symbol names.
And back in the old days,
symbol names were restricted to a maximum of eight characters
consisting of uppercase letters or digits.
</p>
<p>
The C++ language came up with a workaround:
They encoded the type information in the symbol name,
a technique known as <i>decoration</i>.
Your function which is named <code>Resolve</code> in the source code
ends up with the name
<nobr><code>?Resolve@@YG_NPAGI_N@Z</code></nobr>
in the object module,
so that it can be matched up against the placeholders which ask
for a function named
<nobr><code>?Resolve@@YG_NPAGI_N@Z</code></nobr>.
The C++ language folks could get away with this because
by the time the C++ language rolled around, the maximum length for a symbol
was far greater than 8, and the repertoire of valid characters
had grown significantly.
And if you were one of the dinosaurs using an older system with the
8-character uppercase-only limitation, then you were just out of luck.
</p>
<p>
But even the greater symbol name length doesn't solve all type mismatches.
For example, symbols for structures and unions are not decorated with
the members of the structure or union.
You can have one C++ file declare a structure called <code>S</code>
as
</p>
<pre>
struct S {
 int i;
 float f;
};
</pre>
<p>
and have another C++ file declare it as
</p>
<pre>
struct S {
 float f;
 int i;
};
</pre>
<p>
and most compilers won't catch the mismatch.
</p>
<p>
With that historical background, we can begin addressing
Adam's question next time.
</p>
<p>
<b>Sidebar</b>:
For those interested in nonclassical linking, there's this article on
<a HREF="http://blogs.msdn.com/vcblog/archive/2009/09/10/linker-throughput.aspx">
changes to linker scalability in Visual C++ 2010</a>.
<?P></p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-776943">
				<div id="div-comment-776943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091012-00/?p=16413#comment-776943">
			October 12, 2009 at 9:28 am</a>		</div>

		<p>There&#8217;s something very screwy going on with your autoposter (in case you hadn&#8217;t noticed).</p>
<div class=post>[<i>This is all fallout from the systems upgrade last Friday. Hopefully the dust will settle soon. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776963">
				<div id="div-comment-776963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091012-00/?p=16413#comment-776963">
			October 12, 2009 at 10:31 am</a>		</div>

		<p>The answer &quot;why you need import libraries&quot;:</p>
<ol>
<li>
<p>You can combine multiple import libraries into one LIB, along with &quot;real&quot; OBJs.</p>
</li>
<li>
<p>You can make an import library from a DEF file, even if you don&#8217;t have a real DLL at hand.</p>
</li>
<li>
<p>You could provide only public exports in a LIB, leaving private exports out.</p>
</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776973">
				<div id="div-comment-776973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091012-00/?p=16413#comment-776973">
			October 12, 2009 at 10:33 am</a>		</div>

		<ol>
<li>You can make 2 DLLs cross-link each other, without trying to solve egg-chicken dilemma.</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776983">
				<div id="div-comment-776983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091012-00/?p=16413#comment-776983">
			October 12, 2009 at 10:36 am</a>		</div>

		<p>&quot;This goes back to the classical model for linking. This model existed for decades before Microsoft was even founded, so at least this time you don&#8217;t have Bill Gates to kick around. &quot;</p>
<p>And thus is not even unique to Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776993">
				<div id="div-comment-776993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091012-00/?p=16413#comment-776993">
			October 12, 2009 at 1:56 pm</a>		</div>

		<p>C++ compilers use name decoration to avoid name collisions of overloaded functions. That&#8217;s the main reason.</p>
<p>Some compilers (e.g. Borland C++) don&#8217;t include the return type in the decored named, because functions cannot be overloaded on their return types.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-777003">
				<div id="div-comment-777003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.embarcadero.com/pawelglowacki' rel='external nofollow' class='url'>Paweł Głowacki</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091012-00/?p=16413#comment-777003">
			October 12, 2009 at 2:45 pm</a>		</div>

		<p>I love your mentioning one-pass compiler &#8211; yeah: it is Delphi Programming for ever and ever (now with Win7 and multitouch in the VCL):-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-777013">
				<div id="div-comment-777013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David M</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091012-00/?p=16413#comment-777013">
			October 12, 2009 at 4:10 pm</a>		</div>

		<p>Delphi still has a one-pass compiler, and is still blazingly fast. &nbsp;It now includes a linker step, but the object files (DCUs) are smarter than OBJs (pretty much raw compiler output, the format changes with every compiler revision, and the linker can load them straight in) and so the performance there is good too. &nbsp;It&#8217;s still not uncommon for a large program to build in a few seconds.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-777023">
				<div id="div-comment-777023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091012-00/?p=16413#comment-777023">
			October 12, 2009 at 4:26 pm</a>		</div>

		<p>Good post.</p>
<p>External used to be limited to SIX characters (at least when C was first standardized by ANSI), which is why strncpy wasn&#8217;t called strcpyn.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-777033">
				<div id="div-comment-777033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://henning.makholm.net/' rel='external nofollow' class='url'>Henning Makholm</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091012-00/?p=16413#comment-777033">
			October 12, 2009 at 6:24 pm</a>		</div>

		<p>And even C decorates names these days, for functions with stdcall (aka WINAPI) calling convention,</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-777043">
				<div id="div-comment-777043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091012-00/?p=16413#comment-777043">
			October 12, 2009 at 10:09 pm</a>		</div>

		<p>Actually, C name decoration is a x86 artifact. Other architectures let you get away without WINAPI and other stuff like PASCAL or cdecl because they have a calling convention. (I&#8217;ve had code that compiles fine on ARM and MIPS but dies on x86 because of a missed WINAPI). x86 doesn&#8217;t, which leaves us with a million ways of calling a function.</p>
<p>Anyhow, a peculiarity of Win32 is that all executables (DLL&#8217;s, EXE&#8217;s and others of the sort) must have symbols resolved, even if the symbol is in another file. ELF doesn&#8217;t, and lets you do wierd things like have unresolved symbols in dynamic libraries. (Executables can&#8217;t, for obvious reasons, but the linker just needs proof that there&#8217;s something somewhere during linking that will provide it). Fun things happen when you link with one library, but provide another during runtime (cross-compiling &#8211; you need a &quot;proof&quot; library during linking, but the actual one used during execution can be different).</p>
<p>But since an ELF shared object can have dangling references, you don&#8217;t find out until you run and load&#8230; (this way stuff like C libraries are linked on load).</p>
<p>It does have a fun aspect. I wrote a utility that built in a library of functions client libraries had to use. Those libraries linked fine, and they linked back to the executable when the executable loaded them. When someone ported it to win32, they had to break out those functions as a DLL on its own linked by both.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-777063">
				<div id="div-comment-777063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nitpicker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091012-00/?p=16413#comment-777063">
			October 13, 2009 at 5:29 am</a>		</div>

		<p>&gt; the compiler merely agreed </p>
<p>&#8230; &#8220;merrily agreed&#8221;?</p>
<div class=post>[<i>Not a typo, but now that you mention it, I wish I had written &#8220;merrily.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-777793">
				<div id="div-comment-777793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jared</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091012-00/?p=16413#comment-777793">
			October 14, 2009 at 10:40 am</a>		</div>

		<p>Just for the record, the major mainframe architecture had no limitations on character set, and there were products which took advantage of that fact to encode limited information into external names in the early 1970s, if not before.</p>
<p>(FWIW, I was one of the owners of the IEWLxxx code.)</p>
<p>Virtually everything I&#8217;ve seen in the PC world has an analogue in early computing. &nbsp;Today&#8217;s problems were recognized and addressed and the solutions &quot;lost&quot; to the newer generation who have re-invented the wheel. &nbsp;</p>
<p>Pioneers recognized the consequences of some choices and deliberately avoided them (c.f. null terminated strings discussion) not because of resource restrictions, but because of foresight.</p>
<p>Many, many &quot;software patents&quot; have granted since the internet took off which are not &quot;new art&quot; &#8212; pioneers already used the idea in systems long forgotten by history and now reinvented for the PC.</p>
<p>If Google can&#8217;t find it, it must not exist, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

