<html>
<head>
<title>Answers to a customer's questions about memory and DLLs</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Answers to a customer&#8217;s questions about memory and DLLs</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 9, 2016 / year-entry #260</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Simple questions and hopefully simple answers.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer had a few questions about memory and DLLs.
</p>
<blockquote CLASS=q>
<p>
We have some questions that no one here can answer.
</p>
<ol>
<li>When are DLLs actually loaded (mapped) into memory?
    Does it happen when the calling program starts,
    or does it happen when the DLL is actually called?
</li>
<li>Do DLLs have their own heap and code memory,
    or do they use those of the calling program?
</li>
</blockquote>
<p>
Okay, let's see if we can take these questions apart.
</p>
<p>
First: When are DLLs actually loaded into memory?
</p>
<p>
Well, it depends on how you linked to them.
If you didn't do anything special,
then a module that links to another DLL will
list the target DLL in its import table,
and the target DLL will be loaded at the same time
the module itself is loaded.
If that module is the main module, then the target
DLL will be loaded at process startup.
</p>
<p>
On the other hand, if you listed the DLL in your
<code>/DELAYLOAD</code> option,
then the DLL will be loaded the first time any
code in your module calls a function in the target DLL.
</p>
<p>
Next question: Do DLLs have their own heap,
or do they use those of the calling program?
</p>
<p>
It is up to the DLL whether it wants to create its own heap,
or whether it wants to use an existing heap.
In fact, a DLL doesn't need to be consistent in its decision.
It could use its own heap for some things and an existing
heap for other things.
</p>
<p>
If a DLL wants to interoperate with other DLLs,
and it wants to be able to
allocate and free memory across DLL boundaries,
then the two DLLs need to agree on which heap the
memory should be allocated from and freed to.
One way of doing this is to choose an existing external
heap and have both parties agree to use that.
You see this, for example, with COM interfaces,
which all agree to use the COM task allocator to allocate
and free memory across COM object boundaries.
Memory returned by a COM method must be allocated from
the COM task allocator (usually by calling
<code>Co&shy;Task&shy;Mem&shy;Alloc</code>),
and that memory must then be freed to the COM task
allocator
(usually by calling
<code>Co&shy;Task&shy;Mem&shy;Free</code>).&sup1;
</p>
<p>
Another pattern that is often used is for a DLL to
allocate memory, and then provide a custom free function
that the other DLL must call in order to free the memory.
The most commonly encountered example of this is the function
<a HREF="https://msdn.microsoft.com/en-us/library/windows/desktop/aa370304(v=vs.85).aspx">
<code>Net&shy;Api&shy;Buffer&shy;Free</code></a>
</p>
<p>
Note that the above rules about agreeing on a heap
to use apply only in the case where the memory is allocated
by one DLL and freed by another.
If the allocation and free happens both in the same DLL,
then that DLL can use any policy it likes, as long as
every allocation is matched with a compatible free.
Internal objects could be allocated with <code>malloc</code>,
as long as they are freed by <code>free</code>.
</p>
<p>
Note that the <code>malloc</code>/<code>free</code> pairing
must be to the same instance of the C runtime library.
If one DLL calls <code>malloc</code> and passes it to another
DLL, and that other DLL calls <code>free</code>,
then the two sides of the equation must be using the same C
runtime library.
</p>
<p>
Next part of the question:
Do DLLs have their own code memory,
or do they use those of the calling program?
</p>
<p>
I'm not sure what this question is trying to ask.
Certainly the code for a DLL comes from the DLL.
What would be the point of a DLL that just used code
from the calling program?
The calling program wouldn't need the DLL at all.
It already has the code!
</p>
<p>
So I'll assume that the question really is
"Are DLLs loaded into the same address space as the
calling program?"
And the answer is yes, all the DLLs loaded by a process
share the same address space.
</p>
<p>
There's another question the customer didn't ask,
but which is closely related:
Which C runtime does the DLL use?
</p>
<p>
The answer to this question is a bit circular.
The DLL uses the C runtime that it chooses.
When you create the DLL, you specify somewhere which
C runtime you want to use, and how you want to use it.
(You may not be aware that you even made this choice,
because most project templates will make a default choice for you.)
</p>
<p>
One choice is to link the C runtime statically into your module.
This means that the code in the C runtime is incorporated into
your module.
This becomes your private C runtime, and it will not be shared
with anyone.
This private C runtime initializes when your module is loaded.
</p>
<p>
Another choice is to link the C runtime dynamically into your module.
This means that the code in the C runtime remains in a DLL
which will be loaded either when your module is loaded
(if linked statically) or when the first function in it is called
(if linked with <code>/DELAYLOAD</code>).
</p>
<p>
In practice, nobody delay-loads the C runtime library.
</p>
<p>
If you choose this route, then the C runtime library will be shared
with any other modules that use the same version of the same
C runtime library.
The C runtime DLL will be loaded when the first module that uses
it is loaded.
</p>
<p>
If you use <code>malloc</code> or <code>new</code>, then you
are calling the corresponding function in the C runtime library
that your module has chosen.
In the case where you statically linked the C runtime, this is
definitely not the same instance of the C runtime that anybody
else is using, so that memory can be freed only by your module.
In the case where you dynamically linked the C runtime,
then this might or might not be the same instance of the C runtime
that another module is using.
Only if the other module is indeed using the same version of the
same C runtime library will it be able to free the memory with
the corresponding <code>free</code> or <code>delete</code> function.
</p>
<p>
The last detail is something people often overlook.
They will create two modules which do not share the same instance
of the C runtime, either because one or both linked the C runtime
statically,
or because the two both linked to different versions of the C runtime.
If you are in either of these cases,
then you cannot share C runtime data structures between the two
modules because the two modules are using different C runtimes.
This means that you cannot pass a <code>FILE*</code> between modules,
you cannot pass a <code>std::string</code> between modules,
and you cannot even pass a file descriptor between modules,
because even though file descriptors are integers,
they are integers that are managed by the corresponding C runtime library.
</p>
<p>
This is why most coding guidelines specify that each module
is responsible for allocating, managing, and freeing its own objects,
rather than handing objects to other modules expecting the other module
to be able to free them properly.
The things you have to line up in order to get cross-module object
memory management to work
can be easily thrown out of alignment.&sup2;
</p>
<p>
<b>Bonus chatter</b>:
Note that there is is a confusing overload of the word "static"
when applied to DLL linkage.
You can choose to link a library statically or dynamically,
and if you choose dynamic linking, then your next choice is
whether the target DLL is loaded statically or delayed
(also called "dynamically").
Let me draw a table, because people like tables.
</p>
<table BORDER=1 BORDERCOLOR=1
    CELLPADDING=3 STYLE="border-collapse: collapse">
<tr>
<th>How was the library linked?</th>
<th>How is the DLL loaded?</th>
<th>When is the code loaded?</th>
</tr>
<tr>
<td>Statically</td>
<td>N/A (there is no other DLL)</td>
<td>When the module loads</td>
</tr>
<tr>
<td ROWSPAN=2>Dynamically</td>
<td>Statically</td>
<td>When the module loads</td>
</tr>
<tr>
<td>Delayed/dynamic</td>
<td>When the first function is called</td>
</tr>
</table>
<p>
&sup1; There are a few old interfaces that use <code>HGLOBAL</code>
to share memory (such as
<code>STGMEDIUM</code>), but those exist for historical reasons,
not because they're a good idea.
</p>
<p>
&sup2; For example, you might decide to upgrade one module
to a newer version of the compiler, in order to take advantage
of a new feature,
but choose to leave another module with an older version of
the compiler because you haven't made any changes to it and don't
want to take any risk that the new compiler will expose an issue.
(Or because you're building a patch for your program, and you
want to minimize the size of your patch by omitting files which
didn't change.)
Once you do that, you have a C runtime mismatch, and then
scary things will happen if the two modules are not in
agreement on how memory will be allocated and freed.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1276485">
				<div id="div-comment-1276485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276485">
			December 9, 2016 at 8:56 am</a>		</div>

		<p>I once solved the cross-DLL memory alloc/free problem with an amusing solution. The policy was all such allocations are made using HeapAlloc(GetProcessHeap(), &#8230;) and are freed with HeapFree(GetProcessHeap(), &#8230;).</p>
<p>There was a rumor that you could in fact call malloc in one C library and free the resulting memory block in a matching C library. The scary thing is I encountered two C libraries for which this was in fact true. One did malloc -&gt; HeapAlloc(GetProcessHeap(), &#8230;) and the other had this weird artifact where free() located the heap by pointer arithmetic on the pointer being freed. You could easily depend on this behavior by accident and years later wonder why it doesn&#8217;t work anymore.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude odd alt depth-2" id="comment-1276495">
				<div id="div-comment-1276495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276495">
			December 9, 2016 at 9:05 am</a>		</div>

		<p>glib does that, particularly for files (g_open but no g_close), this has caused me innumerable problems because the GTK-WIN project doesn&#8217;t always keep up with the latest VC++. Fortunately there are other options for opening files with UTF-8 paths (boost.filesystem). But it is a very serious issue when dealing with libraries imported from *nix which assume a system wide allocator and syscalls in the C library.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even depth-2" id="comment-1276555">
				<div id="div-comment-1276555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276555">
			December 9, 2016 at 2:58 pm</a>		</div>

		<p>In a debug build, this might not be a straight HeapAlloc anymore.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1276505">
				<div id="div-comment-1276505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276505">
			December 9, 2016 at 10:31 am</a>		</div>

		<p>&gt; The DLL uses the C runtime that it chooses. </p>
<p>there isn&#8217;t any choice if the dependent modules have to be abi compatible, no?</p>
<p>[<i>That was the DLL&#8217;s choice, to take a dependency on other DLLs that constrain its choice of C runtime. -Raymond</i>]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1276535">
				<div id="div-comment-1276535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276535">
			December 9, 2016 at 12:44 pm</a>		</div>

		<p>&gt; The last detail is something people often overlook.</p>
<p>Probably because on other systems, there is only one C runtime library.</p>
<p>&gt; and you cannot even pass a file descriptor between modules, because even though file descriptors are integers, they are integers that are managed by the corresponding C runtime library.</p>
<p>This one is even worse: on Unix-based systems (nowadays, basically every system except Windows), file descriptors are managed by the kernel (they are more like handles), so you can pass them between modules even if you somehow are using more than one C runtime library in the same process. It&#8217;s easy to forget that, on Windows, they are not managed by the kernel.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1276545">
				<div id="div-comment-1276545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276545">
			December 9, 2016 at 1:28 pm</a>		</div>

		<p>[Posst flickered in and out of existence as I tried to reply to it]</p>
<p>1: The hacked descriptors in the windows C runtime library have essentially no use. The NET Core wisely avoids them and just uses handles outright. The Linux port of NET Core stuffs the descriptor in the handle variables because they are the true equivalent.</p>
<p>2: My Linux system has I believe 5 C libraries (or 6 if libc5 is still installed but I don&#8217;t think it is). It is quite impossible to compile any program that crosslinks them however. What would happen if you tried is the linker would yelp as they are utterly incompatible no matter how many layers of indirection you went through. In effect they are different executable file formats.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1276625">
				<div id="div-comment-1276625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NTAuthority</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276625">
			December 12, 2016 at 3:17 am</a>		</div>

		<p>The latter, of course, merely because the dynamic linker on Linux is part of the C runtime library, and has its own executable parser.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1276685">
				<div id="div-comment-1276685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Beldantazar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276685">
			December 12, 2016 at 10:55 am</a>		</div>

		<p>So what would happen on linux if someone replaced a .so file with a version compiled with a different libc?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1276705">
				<div id="div-comment-1276705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276705">
			December 12, 2016 at 5:45 pm</a>		</div>

		<p>The loader would try to load the second libc and fail because the libc references symbols in another loader.</p>
<p>You might succeed if you statically linked the .so file against the target libc&#8217;s .so file (this is a weird case with no analog in Windows; the full path to the .so file and its load address are specified in the binary), but if you went through all that work and figured out how to keep ASLR from hosing you you deserve what you get.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1277155">
				<div id="div-comment-1277155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1277155">
			December 16, 2016 at 1:40 am</a>		</div>

		<p>Many Linux developers seem to be surprised that on Windows, the C runtime is not built into the system. I remember reading somewhat recently a blogpost that started basically with &#8220;Hey, we used jemalloc for out new hot library, and when we tried to build and use it on Windows, terrible things happened when free() was called&#8221;. Then it proceeded to discuss possible solutins — and it was clear from the text that it was a new and exciting problem for the author, which left a kind of strange impression on a Windows developer: after all, the problem (and all the discussed solutions) was already old when Delphi 3.0 was new.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1276565">
				<div id="div-comment-1276565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Wilson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276565">
			December 9, 2016 at 3:36 pm</a>		</div>

		<p>I deal with this in one project I work on (a game engine) by having a common dll that provides a memory manager (and all the other bits link to it). In this case this is done not just because it ensures cross-boundary memory allocation works but it has other advantages (performance, memory leak detection, things like that)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-martin-baschnegger odd alt thread-even depth-1" id="comment-1276875">
				<div id="div-comment-1276875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Martin+Ba.+_' rel='external nofollow' class='url'>Martin Ba. _</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161209-00/?p=94905#comment-1276875">
			December 14, 2016 at 2:52 am</a>		</div>

		<p>ad footnote (2): &#8220;&#8230;decide to upgrade one module to a newer version of the compiler &#8230; Once you do that, you have a C runtime mismatch&#8221;</p>
<p>Except when the new compiler is VC++2017 and the old one is VC++2015, because here MS kept binary compatibility. And of course within the update timeframe of one VS version, the runtime library also stays the same.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

