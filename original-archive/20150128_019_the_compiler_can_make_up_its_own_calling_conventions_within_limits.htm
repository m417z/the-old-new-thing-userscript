<html>
<head>
<title>The compiler can make up its own calling conventions, within limits</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The compiler can make up its own calling conventions, within limits</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 28, 2015 / year-entry #20</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer was confused by what they were seeing when debugging. It is our understanding that the Windows x86-64 calling convention passes the first four parameters in registers rcx, rdx, r8, and r9. But we're seeing the parameters being passed some other way. Given the function prototype int LogFile::Open(wchar_t *path, LogFileInfo *info, bool verbose); we...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer was confused by what they were seeing when debugging.
</p>
<blockquote CLASS=q>
<p>
It is our understanding that the Windows x86-64 calling convention
passes the first four parameters in registers
<code>rcx</code>,
<code>rdx</code>,
<code>r8</code>,
and
<code>r9</code>.
But we're seeing the parameters being passed some other way.
Given the function prototype
</p>
<pre>
int LogFile::Open(wchar_t *path, LogFileInfo *info, bool verbose);
</pre>
<p>
we would expect to see the parameters passed as
</p>
<ul>
<li><code>rcx</code> = <code>this</code>
<li><code>rdx</code> = <code>path</code>
<li><code>r8</code> = <code>info</code>
<li><code>r9</code> = <code>verbose</code>
</ul>
<p>
but instead we're seeing this:
</p>
<pre>
rax=0000000001399020 rbx=0000000003baf238 rcx=00000000013c3260
rdx=0000000003baf158 rsi=000000000139abf0 rdi=00000000013c3260
rip=00007ffd69b71724 rsp=0000000003baf038 rbp=0000000003baf0d1
r8=0000000001377870  r9=0000000000000000 r10=000000007fffffb9
r11=00007ffd69af08e8 r12=00000000013a3b80 r13=0000000000000000
r14=0000000001399010 r15=00000000013a3b90
contoso!LogFile::Open:
00007ffd`69b71724 fff3        push rbx
0:001&gt; du @rdx          // path should be in rdx
00000000`03baf158  "`"
0:001&gt; du @r8           // but instead it's in r8
00000000`01377870  "C:\Logs\Contoso.txt"
</pre>
<p>
Is our understanding of the calling convention incomplete?
</p>
</blockquote>
<p>
There are three parties to a calling convention.
</p>
<ol>
<li>The function doing the calling.
<li>The function being called.
<li>The operating system.
</ol>
<p>
The operating system needs to get involved if something unusual
occurs, like an exception,
and it needs to go walking up the stack looking for a handler.
</p>
<p>
The catch is that if a compiler knows that it controls all the
callers of a function,
then it can modify the calling convention as long as the
modified convention still observes the operating system rules.
After all, the operating system doesn't see your source code.
As long as the object code satisfies the calling convention rules,
everything is fine.
(This typically means that the modification needs to respect
unwind codes and stack usage.)
</p>
<p>
For example, suppose you had code like this:
</p>
<pre>
extern void bar(int b, int a);

static void foo(int a, int b)
{
  return bar(b + 1, a);
}

int __cdecl main(int argc, char **argv)
{
 foo(10, 20);
 foo(30, 40);
 return 0;
}
</pre>
<p>
A clever compiler could make the following analysis:
Since <code>foo</code> is a static function,
it can be called only from this file.
And in this file, the address of the function is never taken,
so the compiler knows that it controls all the callers.
Therefore, it optimizes the function <code>foo</code>
by
rewriting it as
</p>
<pre>
static void foo(<font COLOR=blue>int b, int a</font>)
{
  return bar(b + 1, a);
}
</pre>
<p>
It makes corresponding changes to main:
</p>
<pre>
int __cdecl main(int argc, char *argv)
{
 <font COLOR=blue>foo(20, 10); // flip the parameters
 foo(40, 30); // flip the parameters</font>
 return 0;
}
</pre>
<p>
By doing this, the compiler can generate the code
for <code>foo</code> like this:
</p>
<pre>
foo:
        inc     ecx
        jmp     bar
</pre>
<p>
rather than the more conventional
</p>
<pre>
foo:
        mov     eax, edx
        inc     eax
        mov     ecx, edx
        mov     edx, eax
        jmp     bar
</pre>
<p>
You can look at this transformation in one of two ways.
You can say,
"The compiler rewrote my function prototype to be more efficient."
Or you can say,
"The compiler is using a custom calling convention for <code>foo</code>
which passes the parameters in reverse order."
</p>
<p>
Both interpretations are just two ways of viewing the same thing.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1173063">
				<div id="div-comment-1173063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173063">
			January 28, 2015 at 7:08 am</a>		</div>

		<p>I think the conventional example should read &quot;mov edx, ecx; mov ecx, eax&quot;. I do love these compiler optimisation examples, I would never have thought of this one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173083">
				<div id="div-comment-1173083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173083">
			January 28, 2015 at 7:19 am</a>		</div>

		<p>Now that we are finally back on calling conventions, I noticed the calling convention requires __chkstk to be called, but it does not seem to be exported from system DLLs.</p>
<p>It is exported from the C standard library, but if you&#39;re not linking against it anymore&#8230;</p>
<div class="post">[<em>Why would a system DLL export __chkstk? Then you would have people linking to the wrong __chkstk. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1173093">
				<div id="div-comment-1173093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173093">
			January 28, 2015 at 7:23 am</a>		</div>

		<p>Was the different calling convention causing a problem, or just confusion as they debugged through the assembly and registers?</p>
<p>Presumably compilers always use the standing convention when compiling a function for use by an external module.</p>
<p>Do compilers ever do something weird for a function marked as callable from an external module, where the external uses get one address which uses the standard convention, and internal uses go to a different address which uses an optimized convention? Kind of like inlining?</p>
<p>Actually, I would expect a clever compiler to optimize the &quot;foo&quot; function out completely and just inline it.</p>
<div class="post">[<em>This was obviously a simplified example. The real foo was not inlined because it was large, or it had multiple callers, or something. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt thread-odd thread-alt depth-1" id="comment-1173113">
				<div id="div-comment-1173113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173113">
			January 28, 2015 at 8:07 am</a>		</div>

		<p>Call target?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1173133">
				<div id="div-comment-1173133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173133">
			January 28, 2015 at 8:53 am</a>		</div>

		<p>And of course the extreme example of this is when compilers inline functions calls &#8211; sometimes even for functions that are not explicitly marked as inline in the source file. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173143">
				<div id="div-comment-1173143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173143">
			January 28, 2015 at 9:08 am</a>		</div>

		<p>@pc I believe that when PGO is used it&#39;s possible for the compiler to compile a single source function into several different binary forms depending on the caller. &nbsp;It&#39;s definitely possible to get inline and out of line versions of a function even without PGO.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1173173">
				<div id="div-comment-1173173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173173">
			January 28, 2015 at 11:50 am</a>		</div>

		<p>[Why would a system DLL export __chkstk? Then you would have people linking to the wrong __chkstk. -Raymond]</p>
<p>How can there be a wrong __chkstk if it&#39;s effect is specified in the ABI?</p>
<div class="post">[<em>Why would you link to some random system DLL&#39;s __chkstk (that isn&#39;t part of that system DLL&#39;s contract) when you could link to the one in the C runtime (which is part of the C runtime&#39;s contract)? Maybe a future version of the OS gets rid of that system DLL. Should system DLLs also export malloc? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173193">
				<div id="div-comment-1173193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173193">
			January 28, 2015 at 12:49 pm</a>		</div>

		<p>The x86-64 unwind information in .pdata allocates 4 bits for specifying which registers are saved on the stack and which register is the frame pointer. &nbsp;Since this can specify the full range of register numbers, does this mean that it is legal to use what is normally a volatile register as a frame pointer in a function that doesn&#39;t call any other functions? &nbsp;(This in theory could be useful for a leaf function that calls _alloca/__chkstk).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1173203">
				<div id="div-comment-1173203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173203">
			January 28, 2015 at 12:58 pm</a>		</div>

		<p>@Raymond: (Regarding reply to Joshua) How does the stack unwind system recognize __chkstk itself? &nbsp;Does it look for __chkstk&#39;s binary pattern, or does __chkstk itself follow the standard x86-64 ABI rules? &nbsp;If its binary pattern is recognized specifically by RtlVirtualUnwind, that would make it impossible to properly implement alloca in a third-party compiler without infringing Microsoft&#39;s copyright, since msvcrt.dll does not export it.</p>
<div class="post">[<em>It doesn&#39;t need to do anything special to recognize __chkstk. On x64, __chkstk is a normal function with standard stack usage, unlike x86. On x64, the caller does the &quot;sub rsp, n&quot;.&nbsp;Therefore, the existing unwind codes describe it adequately. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173213">
				<div id="div-comment-1173213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173213">
			January 28, 2015 at 2:30 pm</a>		</div>

		<p>@Myria: __chkstk violates the /normal/ ABI pretty hard by being called inside the function prolog.</p>
<p>[Maybe a future version of the OS gets rid of that system DLL]</p>
<p>Can&#39;t get rid of kernel32.dll. Interesting that it is currently exported from 64 bit kernel32.dll (but not 32 bit kernel32.dll) and not documented that it is so. I suppose this means the export is allowed to disappear in the future. IE8 was discovered to be linked against it, but that won&#39;t pose a problem for future Windows versions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-harry-johnston even thread-even depth-1" id="comment-1173223">
				<div id="div-comment-1173223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Harry+Johnston' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173223">
			January 28, 2015 at 4:12 pm</a>		</div>

		<p>So &#8230; can we implement our own __chkstk if we aren&#39;t using Visual Studio&#39;s C runtime?</p>
<div class="post">[<em>You&#39;re asking the wrong person. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173233">
				<div id="div-comment-1173233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">philiplu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173233">
			January 28, 2015 at 4:26 pm</a>		</div>

		<p>__chkstk should be a statically linked even when linking to the DLL version of the CRT. &nbsp;You can always just extract the chkstk.obj object from the library and link against that.</p>
<p>In general, you can&#39;t completely avoid the C runtime when it&#39;s used to provide compiler support, like __chkstk or the structured exception handler support.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-harry-johnston even thread-even depth-1" id="comment-1173243">
				<div id="div-comment-1173243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Harry+Johnston' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173243">
			January 28, 2015 at 6:01 pm</a>		</div>

		<p>@Raymond: oh, I wasn&#39;t expecting you to answer; just thought someone might know. &nbsp;And as it turns out I was confusing __chkstk with the /GS (buffer security check) functions anyway. :-)</p>
<p>@philiplu: thanks, that sounds sensible &#8211; and I wonder if I can do the same for the cookie functions? &nbsp;So far I&#39;ve been able to avoid needing __chkstk by virtue of using mainly static variables, and I just turn the /GS option off, but it is always good to have options. &nbsp;(These are small-to-trivial applications, which don&#39;t take untrusted input, so the risk is minimal.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173153">
				<div id="div-comment-1173153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173153">
			January 28, 2015 at 10:01 am</a>		</div>

		<p>@mikeb: &quot;sometimes even for functions that are not explicitly marked as inline in the source file&quot;? I should *hope* my compiler isn&#39;t so dense as to require me to sprinkle &quot;inline&quot; around. &quot;inline&quot; is a relic from more innocent times &#8212; if you need to tweak inlining at all these days it&#39;s typically to explicitly mark a function as *not* to be inlined.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1173283">
				<div id="div-comment-1173283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">philiplu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173283">
			January 28, 2015 at 11:50 pm</a>		</div>

		<p>You can probably get the /GS support working without the rest of the CRT, but it&#39;s more involved than, say, __chkstk. &nbsp;I wrote most of that support code about a decade ago, but left Microsoft 7 years ago, so I&#39;m not sure how much it&#39;s changed since my time there. &nbsp;The good news is it appears that the CRT source code now includes the necessary source files (gs_*.c and a few others, probably). &nbsp;We didn&#39;t use to ship all the support files, especially for things like SEH and C++ EH support.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173293">
				<div id="div-comment-1173293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173293">
			January 29, 2015 at 2:27 am</a>		</div>

		<p>So, as optimised code becomes ever harder to debug, and unoptimised code becomes ever slower (it&#39;s all very well using templates instead of macros but in full debug builds they become out-of-line function calls), is there a happy medium?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1173303">
				<div id="div-comment-1173303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">not an anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173303">
			January 29, 2015 at 6:24 am</a>		</div>

		<p>@Neil &#8212; yes there is. &nbsp;Modern compilers are developing the ability for their optimizer to emit special debug data that tells the debugger what the optimizer did to variables; this, along with improvements to unwinding (in particular, the ability to unwind without an explicit frame pointer), helps when debugging optimized code.</p>
<p>(If you want to know more, look up the GCC -fvar-tracking and -fvar-tracking-assignments options.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173423">
				<div id="div-comment-1173423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173423">
			January 29, 2015 at 9:15 am</a>		</div>

		<p>&quot;[You&#39;re asking the wrong person. -Raymond]&quot;</p>
<p>Nah. &nbsp;You are able to tell him he CAN implement it himself: &nbsp;the answer, trivially, is &quot;yes&quot;. &nbsp;Whether it&#39;s an ill-advised idea is another matter. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-1173823">
				<div id="div-comment-1173823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173823">
			January 30, 2015 at 10:32 am</a>		</div>

		<p>@JM one justified usage of `inline` with Microsoft compiler is to avoid &quot;duplicate symbol&quot; linker error.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173913">
				<div id="div-comment-1173913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">inliner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1173913">
			January 30, 2015 at 11:19 pm</a>		</div>

		<p>To discussion about inline keyword: It has very little to do with inlining optimization. It means, there are several copies of this function (usually because function was defined in header file), but that&#39;s ok.</p>
<p>It is related to inlining this way: to inline a function in a compilation unit, the function code needs to be available, usually achieved by defining it in a header file, so inline keyword is needed to avoid build errors.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1174183">
				<div id="div-comment-1174183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150128-00/?p=44813#comment-1174183">
			February 3, 2015 at 7:32 am</a>		</div>

		<p>Could (or, rather, does) the compiler ever do both? That is, make an &quot;optimized&quot; entry point that does this, and a &quot;standard&quot; entry point that you get for external usage of the function or if you take the address?</p>
<div class="post">[<em>I don&#39;t see why not. You could call it &quot;shared inlining.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

