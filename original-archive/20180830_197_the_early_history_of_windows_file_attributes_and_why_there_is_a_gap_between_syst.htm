<html>
<head>
<title>The early history of Windows file attributes, and why there is a gap between System and Directory</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The early history of Windows file attributes, and why there is a gap between System and Directory</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 30, 2018 / year-entry #197</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>24</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">One, two, four, sixteen.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Let's look at the values for the basic
<a HREF="https://msdn.microsoft.com/en-us/library/windows/desktop/gg258117(v=vs.85).aspx">
Windows file attributes</a>.
There's a gap where 8 should be.
</p>
<table BORDER=1 CLASS="cp3" CELLPADDING=3
    STYLE="border-collapse: collapse">
<tr>
<th><code>FILE_ATTRIBUTE_...</code></th>
<th>Value</th>
</tr>
<tr>
<td><code>READONLY</code></td>
<td><code>0x00000001</code></td>
</tr>
<tr>
<td><code>HIDDEN</code></td>
<td><code>0x00000002</code></td>
</tr>
<tr>
<td><code>SYSTEM</code></td>
<td><code>0x00000004</code></td>
</tr>
<tr>
<td>&nbsp;</td>
<td><code>0x00000008</code></td>
</tr>
<tr>
<td><code>DIRECTORY</code></td>
<td><code>0x00000010</code></td>
</tr>
<tr>
<td><code>ARCHIVE</code></td>
<td><code>0x00000020</code></td>
</tr>
</table>
<p>
Rewind to CP/M.
</p>
<p>
<a HREF="http://seasip.info/Cpm/fcb.html">
CP/M supported eleven attributes</a>:
</p>
<table BORDER=1 CLASS="cp3" CELLPADDING=3
    STYLE="border-collapse: collapse">
<tr>
<th>Name</th>
<th>Meaning</th>
</tr>
<tr>
<td>F1, F2, F3, F4</td>
<td>User-defined</td>
</tr>
<tr>
<td>F5, F6, F7, F8</td>
<td>Interface-defined</td>
</tr>
<tr>
<td>T1</td>
<td>Read-only</td>
</tr>
<tr>
<td>T2</td>
<td>System</td>
</tr>
<tr>
<td>T3</td>
<td>Archive</td>
</tr>
</table>
<p>
The operating system imposed no semantics for user-defined attributes.
You can use them for whatever you want.
</p>
<p>
The meanings of the
interface-defined attributes were defined by each operating system
interface.
Think of them as four bonus flag parameters for each syscall
that takes a file control block.
You could set interface-defined attributes before calling
a function, and that passed four additional flags in.
Or the function could manipulate those attributes before returning,
allowing it to return four flags out.
Interface-defined attributes are always clear on disk.
</p>
<p>
The read-only bit marked a file as read-only.
</p>
<p>
The system bit had two effects:
First, it hid the file from directory listings.
Second, if the file belonged to user 0,&sup1; then the file was
available to all users.
(This was handy for program files.)
</p>
<p>
The archive bit reported whether the file has been backed up.
</p>
<p>
These attributes were retrofitted onto the existing directory
structure by taking over the high bits of the eleven filename
characters!
That's why they are named F1 through F8
(high bits of the eight-character file base name)
and T1 through T3
(high bits of the three-character extension, also known as the file type).
</p>
<p>
You can infer from this that CP/M file names were limited to 7-bit ASCII.
</p>
<p>
Anyway,
<a HREF="http://www.computerhistory.org/atchm/microsoft-ms-dos-early-source-code/">
MS-DOS 1.0</a>
split the dual meaning of the
system attribute into two attribute
(hidden and system),
and even though it didn't implement the read-only attribute,
it reserved space for it.
</p>
<p>
That explains why the first three attributes are read-only (1),
hidden (2), and system (4).
</p>
<p>
MS-DOS 2.0 most notably added support for subdirectories,
but another feature that came along was volume labels.
Since there was no space for the volume label in the
disk header, the volume label was added as a directory
entry in the root directory, with a special attribute
that says "This is a volume label, not a file."&sup2;
</p>
<p>The next attributes became volume label (8),
directory (16), and archive (32).
</p>
<p>
Win32 adopted the same file attribute values as MS-DOS
and 16-bit Windows, presumably in an effort to minimize
surprises when porting code from 16-bit to 32-bit.
The volume label attribute disappeared from Win32,
but the bits for directory and archive were left at their
original values to avoid problems with programs that
operated with file attributes.
Those programs contained
<a HREF="http://docs.embarcadero.com/products/rad_studio/delphiAndcpp2009/HelpUpdate2/EN/html/devwin32/fa_all_xml.html">
their own definitions for the
file attributes</a>
because 16-bit Windows didn't provide any.
</p>
<p>
&sup1;
CP/M supported up to 16 users, numbered 0 through 15.
When you started the computer, you were user 0,
but you could change users by saying
<code>USER n</code>.
Files belonging to other users were inaccessible,
except that system files belong to user 0 were
available to everyone.
Anybody could change to any user at any time,
so this was a file organization feature, not a security feature.
In practice, nobody really used it because floppy discs
were so small that it was
easier to organize your files by putting them on different
floppies
than by trying to remember which user you used for each file.
</p>
<p>
&sup2;
Windows 95 later repurposed the volume label attribute
to mark directory entries as being used for long file names.
Disk utilities often parsed directory entries directly,
so any change in the disk format was a compatibility risk.
The choice to use the volume label attribute for this
purpose came after a lot of experimentation to find the
least disruptive file format for long file names.
It turns out that most low-level disk utility
programs ignored anything marked with the
volume label attribute.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1358615">
				<div id="div-comment-1358615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1358615">
			August 30, 2018 at 7:34 am</a>		</div>

		<p>Back in the day (around 1997 or so), I used DOS 6 and NT 4, with all partitions in FAT16 for ease of use (the computer had two hard drives of 420 MB and 1 GB, so cluster size wasn&#8217;t a big issue). One day I tried a third-party DOS defrag utility which offered an option to sort the directories. The next time I booted NT, it refused to log on, because it couldn&#8217;t find my user profile. Booting from a DOS 7 floppy, I discovered the utility had trashed every single long filename! That&#8217;s when I learned that VFAT stored the long filenames in &#8220;invalid&#8221; directory entries, which the defrag utility had tried &#8220;helpfully&#8221; to sort &#8211; detaching them from the original file entries. Of course, I had to reinstall NT.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1358955">
				<div id="div-comment-1358955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Swanson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1358955">
			August 31, 2018 at 3:17 pm</a>		</div>

		<p>Windows 95 included a &#8220;LFNBACK&#8221; utility on the CD-ROM, to be run from pure DOS mode, that would backup long file names and what short names they are associated with, so that you might be able to use DOS defraggers or backup/restore utilities that did such things. Probably would have worked for Windows NT too (afaik the VFAT structures are identical, though NT and 95 had different short-name generation rules).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1358625">
				<div id="div-comment-1358625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Elliott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1358625">
			August 30, 2018 at 7:36 am</a>		</div>

		<p>Amusingly, when MSDOS introduced the archive bit, it did it with the opposite meaning of how it was done in CP/M. In CP/M the archive bit would be cleared when the file was touched, and the backup program would set it. In MSDOS touching the file sets the archive bit, and the backup program clears it. Doubtless there was a good reason.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1358865">
				<div id="div-comment-1358865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">morlamweb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1358865">
			August 31, 2018 at 8:24 am</a>		</div>

		<p>It&#8217;s in the semantics attached to the Archive flag.  The way that I&#8217;ve always understood it in Windows is that a file with the Archive flag raised means &#8220;this file is ready to be archived&#8221;.  Backup programs &#8211; and I&#8217;ve known quite a few &#8211; generally use that file to determine which ones should be backed up and lower the flag when the backup is performed.  The opposite semantics &#8211; archive flag raised = &#8220;file has been archived/backed up&#8221; also work.  I have no idea why CP/M went one way and DOS/Windows went the other.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1359765">
				<div id="div-comment-1359765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1359765">
			September 7, 2018 at 11:08 am</a>		</div>

		<p>Because there were two ways to do it, and two development teams. Murphy strikes again!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1358655">
				<div id="div-comment-1358655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1358655">
			August 30, 2018 at 9:11 am</a>		</div>

		<p>To be fair, every Windows program provides its own copy of the file attributes list due to the magic of constant folding at compile time.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1359705">
				<div id="div-comment-1359705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1359705">
			September 7, 2018 at 7:37 am</a>		</div>

		<p>Win32 strove for source code compatibility with Win16. Binary compatibility was not the issue. If the constants had names, then they could be renumbered by changing the <code>#define</code>. But these constants didn&#8217;t have names in Win16, so no <code>#define</code> to modify.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1358665">
				<div id="div-comment-1358665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1358665">
			August 30, 2018 at 9:21 am</a>		</div>

		<p>There were extended CP/M systems that were multi-user, kinda-sorta.  My first employer used have a somewhat complex multi-user client/server system that was CP/M based (though the file system was extended to allow for hard disks).  It was *very* fragile.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1358735">
				<div id="div-comment-1358735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ismo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1358735">
			August 30, 2018 at 9:17 pm</a>		</div>

		<p>If I remember correctly the multiuser CP/M was called MP/M. Never saw one myself.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1358945">
				<div id="div-comment-1358945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard Wells</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1358945">
			August 31, 2018 at 1:38 pm</a>		</div>

		<p>MP/M was the first version of CP/M intended for multiple users. It was followed by Concurrent CP/M which became Concurrent DOS which stripped of multi-user and CP/M functionality became the basis of DR-DOS. Other companies did their own modifications to CP/M to meet the nascent multi-user market making full use of the USER information. Some early hard drive setups also used USER. When the file system only permits 8 MBs and the hard drives are larger, something has to give.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1358675">
				<div id="div-comment-1358675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1358675">
			August 30, 2018 at 10:31 am</a>		</div>

		<p>Since you said that MS-Dos 1.0 provided a bit for the read-only attribute, but did not implement it, when did the read-only attribute get implemented?</p>
<p>Since Windows 95 repurposed the &#8220;08&#8221; bit to mark long file names, isn&#8217;t that bit still used for that purpose?  I don&#8217;t see the &#8220;08&#8221; bit in the linked article.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fjeldse odd alt depth-2" id="comment-1358725">
				<div id="div-comment-1358725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Erik+F' rel='external nofollow' class='url'>Erik F</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1358725">
			August 30, 2018 at 8:03 pm</a>		</div>

		<p>It&#8217;s an implementation detail of the FAT LFN mechanism, so it makes sense that it&#8217;s not exposed to user programs. NTFS and UDF don&#8217;t store LFNs that way, and volume labels are managed using SetVolumeLabel.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1358745">
				<div id="div-comment-1358745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1358745">
			August 30, 2018 at 9:26 pm</a>		</div>

		<p>It may be an implementation detail, but it is widely known. It is documented in Wikipedia, and IIRC even Raymond has talked about it in this blog. The &#8220;magical&#8221; combination is label, system, hidden and read only flags (attribute byte 0x0f), which is something illogical that you won&#8217;t see in the wild. The volume flag only has a meaning in the root directory, and most (all?) implementations of FAT scan sequentially for it, so Microsoft&#8217;s VFAT implementations go as far as creating a blank volume label in the root directory if none exists before writing the first long filename.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1358835">
				<div id="div-comment-1358835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1358835">
			August 31, 2018 at 6:24 am</a>		</div>

		<p>Filesystem on-disk formats aren&#8217;t implementation details.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1358785">
				<div id="div-comment-1358785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1358785">
			August 31, 2018 at 3:20 am</a>		</div>

		<p>I&#8217;ve recently noticed that the Hidden attribute is also documented to make a file read-only. I found out the hard way when troubleshooting an application which was unable to update one of its data files because something had marked it hidden (though I have no idea what, why or how).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1358855">
				<div id="div-comment-1358855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1358855">
			August 31, 2018 at 7:47 am</a>		</div>

		<p>Then there&#8217;s also this quirk with CreateFile when opening hidden or system files (<a href="https://docs.microsoft.com/en-us/windows/desktop/api/fileapi/nf-fileapi-createfilea" rel="nofollow">https://docs.microsoft.com/en-us/windows/desktop/api/fileapi/nf-fileapi-createfilea</a>):</p>
<p>&gt; If CREATE_ALWAYS and FILE_ATTRIBUTE_NORMAL are specified, CreateFile fails and sets the last error to ERROR_ACCESS_DENIED if the file exists and has the FILE_ATTRIBUTE_HIDDEN or FILE_ATTRIBUTE_SYSTEM attribute. To avoid the error, specify the same attributes as the existing file.</p>
<p>As a result, any software that tries to open a hidden or system file like fopen(filename, &#8220;w&#8221;) will get ERROR_ACCESS_DENIED, even if the user *does* have permission to write to the file.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1358985">
				<div id="div-comment-1358985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1358985">
			August 31, 2018 at 7:28 pm</a>		</div>

		<p>The 08 (attribute) bit is still used on FAT12, FAT16, and FAT32 File Systems to denote &#8220;Volume Label&#8221;.  I just used the LABEL command on a FAT32 File System with Windows 10 v1803.  A low-level disk editor indeed shows the 08 attribute bit set for the Volume Label in the root directory.</p>
<p>My guess as to why the flag was removed from the Win32 API:  the 08 flag has no meaning on NTFS (and later exFAT and ReFS).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-3 parent" id="comment-1358995">
				<div id="div-comment-1358995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1358995">
			August 31, 2018 at 10:29 pm</a>		</div>

		<p>It doesn&#8217;t even have meaning on FAT. You can&#8217;t CreateFile a volume label.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1359015">
				<div id="div-comment-1359015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1359015">
			September 1, 2018 at 12:47 am</a>		</div>

		<p>You also can&#8217;t CreateFile a directory, but there&#8217;s an attribute bit for a directory.  I always assumed the flags are there for the on-disk representation.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-5" id="comment-1359055">
				<div id="div-comment-1359055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1359055">
			September 1, 2018 at 6:58 am</a>		</div>

		<p>You can too CreateFile directory (use backup semantics). You also can see them in FindFirstFile. But volume labels don&#8217;t show up in FindFirstFile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1360005">
				<div id="div-comment-1360005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eryk Sun</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1360005">
			September 10, 2018 at 4:37 pm</a>		</div>

		<p>&gt; You also can‚Äôt CreateFile a directory</p>
<p>It&#8217;s undocumented, but you can create a new directory via CreateFile (as opposed to CreateDirectory) by combining CREATE_NEW disposition with the attributes/flags FILE_ATTRIBUTE_DIRECTORY | FILE_FLAG_POSIX_SEMANTICS | FILE_FLAG_BACKUP_SEMANTICS. In the NT API we just need the create option FILE_DIRECTORY_FILE.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt depth-4 parent" id="comment-1359305">
				<div id="div-comment-1359305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1359305">
			September 4, 2018 at 1:08 am</a>		</div>

		<p>It was used in DOS when using the FCB calls to create a volume label.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-5" id="comment-1359365">
				<div id="div-comment-1359365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1359365">
			September 4, 2018 at 8:05 am</a>		</div>

		<p>Yes, but we&#8217;re talking about Windows here.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-1358965">
				<div id="div-comment-1358965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180830-00/?p=99615#comment-1358965">
			August 31, 2018 at 3:21 pm</a>		</div>

		<p>Worth mentioning: <a href="http://www.os2museum.com/files/comments.txt" rel="nofollow">http://www.os2museum.com/files/comments.txt</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

