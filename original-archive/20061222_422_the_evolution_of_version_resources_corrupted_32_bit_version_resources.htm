<html>
<head>
<title>The evolution of version resources - corrupted 32-bit version resources</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The evolution of version resources &#8211; corrupted 32-bit version resources</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 22, 2006 / year-entry #423</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20061222-00/?p=28623</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time we looked at the format of 32-bit version resources, but I ended with the remark that what you saw purported to be the resources of shell32.dll but actually weren't. What's going on here? The resources I presented last time were what the resources of shell32.dll should have been, but in fact they aren't....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/12/21/1340571.aspx">
Last time we looked at the format of 32-bit version resources</a>,
but I ended with the remark that what you saw purported to be
the resources of <code>shell32.dll</code> but actually weren't.
What's going on here?
</p>
<p>
The resources I presented last time were what the resources
of <code>shell32.dll</code> <strong>should have been</strong>,
but in fact they aren't.
</p>
<p>
A common mistake in generating 32-bit resources is to mistreat
the <code>cbData</code> field of the structure I called a
<code>VERSIONNODE</code> as a count of <strong>characters</strong>
rather than a count of bytes if the type is Unicode text.
Even Microsoft's own Resource Compiler has fallen into this trap!
For example, consider this <code>VERSIONNODE</code> I presented last time:
</p>
<pre>
0098  4C 00         // cbNode (node ends at 0x0088 + 0x004C = 0x00D40)
009A  2C 00         // cbData
009C  01 00         // wType = 1 (string data)
009E  43 00 6F 00 6D 00 70 00 61 00 6E 00 79 00 4E 00
      61 00 6D 00 65 00 00 00
                    // L"CompanyName" + null terminator
00B6  00 00         // padding to restore alignment
00B8  4D 00 69 00 63 00 72 00 6F 00 73 00 6F 00 66 00
      74 00 20 00 43 00 6F 00 72 00 70 00 6F 00 72 00
      61 00 74 00 69 00 6F 00 6E 00 00 00
                    // L"Microsoft Corporation" + null terminator
00E4                // no padding needed
</pre>
<p>
In real life, the data take the following form:
</p>
<pre>
0098  4C 00         // cbNode (node ends at 0x0088 + 0x004C = 0x00D40)
009A  <font COLOR=blue>16</font> 00         // <font COLOR=blue>cchData (!)</font>
009C  01 00         // wType = 1 (string data)
...
</pre>
<p>
These malformed version resources manage to get away without
crashing too horribly because the standard format of version resources
uses string data only in leaf nodes.
Therefore, the incorrect <code>cbData</code> affects only the
node itself and doesn't cause the child nodes to be parsed
incorrectly (since there are no child nodes).
</p>
<p>
Until somebody tries to read, say,
<nobr><code>\StringFileInfo\<wbr>040904B0\<wbr>CompanyName\<wbr>oops</code></nobr>.
After the <code>VerQueryValue</code> function locates
the <code>VERSIONNODE</code> corresponding to <code>CompanyName</code>,
it tries to locate the first child node and, due to the incorrect
<code>cbData</code>, ends up misinterpreting the middle of the
string as if it were the start of a child <code>VERSIONNODE</code>.
Things only go downhill from there.
</p>
<p>
They're just lucky that nobody actually asks for that.
</p>
<p>
But wait, there's more.
Somebody who calls
the <code>VerQueryValueA</code> function expects to have the
version string returned as ANSI, so <code>VerQueryValueA</code>
needs to know how many characters to convert from Unicode to ANSI.
If <code>VerQueryValue</code> trusted the erroneous <code>cbData</code>
value, then ANSI callers would get only half the data they were expecting.
</p>
<p>
As a result of this mess, the <code>VerQueryValue</code> function
keeps its eyes open and anticipates that the version resource it
was given to parse may have been generated by one of these buggy
version resource compilers and goes to some extra effort to accommodate
those bugs.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-455743">
				<div id="div-comment-455743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061222-00/?p=28623#comment-455743">
			December 22, 2006 at 10:10 am</a>		</div>

		<p>Are you saying that rc.exe has had this bug for 15 years?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-455763">
				<div id="div-comment-455763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061222-00/?p=28623#comment-455763">
			December 22, 2006 at 11:41 am</a>		</div>

		<p>Now that&#8217;s bad-memory lane, I tripped over this problem several times. In the Win98 era before VerQueryValue was fixed, there used to be a KB article about the problem. I never knew what the core problem was, though. At the time, there must not have been a lot of Unicode resources on files.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-455803">
				<div id="div-comment-455803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061222-00/?p=28623#comment-455803">
			December 22, 2006 at 10:21 pm</a>		</div>

		<p>No resource compiler today could get away with writing a byte count because VerQueryValueW returns this count directly in its puLen parameter. puLen is &#8212; you guessed it &#8212; documented as *character* count, and has been for at least a decade.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-455863">
				<div id="div-comment-455863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://smallcode.weblogs.us' rel='external nofollow' class='url'>Peter</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061222-00/?p=28623#comment-455863">
			December 25, 2006 at 7:02 am</a>		</div>

		<p>If you try to call GetFileVersionInfo for UPX-compressed executable, it will cause a crash in krnl386.exe under Windows 98 (the bug is corrected in Windows XP). So, if you want your application to work under all versions of Windows, you may want to parse the resources yourself without relying on (those buggy) Win 32 API functions.</p>
<div class="post">[<i>Sounds like a bug in UPX to me &#8211; it&#8217;s generating corrupted binaries. Remember, the Windows 3.1 series assumes that you are doing the right thing. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-455913">
				<div id="div-comment-455913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061222-00/?p=28623#comment-455913">
			December 26, 2006 at 12:38 am</a>		</div>

		<blockquote><p>
  Um, I&#8217;m not seeing where VerQueryValueW has</p>
<p>  to copy any data at all.
</p></blockquote>
<p>Sorry you&#8217;re right, it&#8217;s the program that has to do the copying. &nbsp;VerQueryValueW tells the program how many characters to copy.</p>
<p>Does VerQueryValueW figure out the correct number of characters even when cbData isn&#8217;t a byte count? &nbsp;(OK, I should experiment instead of asking. &nbsp;So far I&#8217;ve only needed this on Windows CE where it works well enough. &nbsp;VerQueryValueW reports the correct number of characters there (after the .rc file has been hand edited). &nbsp;I didn&#8217;t look at the cbData field in the binary.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-455893">
				<div id="div-comment-455893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061222-00/?p=28623#comment-455893">
			December 25, 2006 at 7:27 pm</a>		</div>

		<p>&gt; But wait, there&#8217;s more. Somebody who calls the</p>
<p>&gt; VerQueryValueA function expects to have the</p>
<p>&gt; version string returned as ANSI, so</p>
<p>&gt; VerQueryValueA needs to know how many</p>
<p>&gt; characters to convert from Unicode to ANSI.</p>
<p>&gt; If VerQueryValue trusted the erroneous cbData</p>
<p>&gt; value, then ANSI callers would get only half</p>
<p>&gt; the data they were expecting.</p>
<p>I think there&#8217;s more.</p>
<p>(1) Somebody who calls the VerQueryValueW function expects to have the version string returned as Unicode, so VerQueryValueW needs to know how many characters to copy. &nbsp;If VerQueryValue trusted the erroneous cbData value, then Unicode callers would get only half the data they were expecting.[*]</p>
<p>(2) &nbsp;Somebody who calls the VerQueryValueA function expects to have the version string returned as ANSI, so VerQueryValueA needs to know how many characters to convert from Unicode to ANSI. If VerQueryValue trusted the erroneous cbData value, then ANSI callers would get some random fraction of the data they were expecting. &nbsp;When a Unicode character converts to a two-byte ANSI character, the caller might get both bytes. &nbsp;Though this is just hypothetical because we can&#8217;t really test it &#8212; VerQueryValue knows not to trust cbData so a test would only find out what VerQueryValue actually does.</p>
<p>[* If the data include surrogate pairs then the fraction might be random.]</p>
<div class=post>[<i>Um, I&#8217;m not seeing where VerQueryValueW has to copy any data at all. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-456033">
				<div id="div-comment-456033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">redundant length?</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061222-00/?p=28623#comment-456033">
			December 27, 2006 at 1:27 pm</a>		</div>

		<p>Why is the length embedded at all? Redundant information.</p>
<div class=post>[<i>It&#8217;s not redundant for binary data or strings with embedded nulls. (I can&#8217;t believe I had to write that.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-456233">
				<div id="div-comment-456233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">redundant length?</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061222-00/?p=28623#comment-456233">
			December 28, 2006 at 7:25 am</a>		</div>

		<p>Are arbitrary binary data allowed in string fields? How can a null<br />
terminated string have embedded nulls? A terminating NIL char could<br />
have been used to terminate the string instead of a byte count integer.</p>
<div class="post">[<i>It&#8217;s a string field, not a null-terminated string<br />
field. You can see embedded NULs in the 16-bit version resources a few<br />
days ago. (More evidence that people don&#8217;t actually read my entries.)<br />
-Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-457763">
				<div id="div-comment-457763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061222-00/?p=28623#comment-457763">
			December 31, 2006 at 5:49 pm</a>		</div>

		<p>&gt; You can see embedded NULs in the 16-bit</p>
<p>&gt; version resources a few days ago.</p>
<p>The ones I noticed were intended to be terminators. &nbsp;I didn&#8217;t notice any that weren&#8217;t intended to be terminators.</p>
<p>Since ordinary string resources don&#8217;t automatically get NUL terminators appended, programmers have to code the terminators themselves[*], and some programmers didn&#8217;t notice that version string resources are different. &nbsp;Some of those programmers produced some versions of Visual C++, so a lot of executables have redundant NUL terminators. &nbsp;I never complained about this very minor bug, a very slight waste of memory with no other consequences. &nbsp;Had I been involved, I would have given priority to fixing more serious bugs than to this one. &nbsp;Though I don&#8217;t have any complaint about its having been fixed either.</p>
<p>Anyway, do you know of cases where NULs were intended to be embedded rather than intended to be terminators?</p>
<p>Putting binary data in fields that are labelled as non-binary sometimes causes bugs. &nbsp;For example BSTRs sometimes get converted to ANSI without the programmer noticing because the programmer&#8217;s code page is different from the customer&#8217;s code page.</p>
<div class="post">[<i>I&#8217;m sure you&#8217;ve used strings with embedded nulls. No need to ask me for examples. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-458483">
				<div id="div-comment-458483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061222-00/?p=28623#comment-458483">
			January 2, 2007 at 7:52 pm</a>		</div>

		<blockquote><p>
  I&#8217;m sure you&#8217;ve used strings with embedded</p>
<p>  nulls.
</p></blockquote>
<p>Yes and no. &nbsp;I coded stuff using string syntax with embedded nulls in RCDATA resources, i.e. binary resources. &nbsp;I did not do so in STRING resources.</p>
<p>In a setting having nothing to do with resources, my discovery that sometimes BSTRs get converted to ANSI did come the hard way, but I luckily discovered it before the product shipped and I&#8217;ve never repeated that mistake. &nbsp;I learned belatedly that the MSDN section that I had read included an invisible restriction (visible in some other pages that I belatedly discovered) so it didn&#8217;t apply to the particular code I had written.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-644293">
				<div id="div-comment-644293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/michkap/archive/2008/07/03/8682763.aspx' rel='external nofollow' class='url'>Sorting it all Out</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061222-00/?p=28623#comment-644293">
			July 3, 2008 at 10:05 am</a>		</div>

		<p>Previous blogs in this series: 0: A long journey begins with the zeroeth step One of the first things</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

