<html>
<head>
<title>The redirection can come anywhere on the line, and you can use that to get rid of the spaces</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The redirection can come anywhere on the line, and you can use that to get rid of the spaces</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 1, 2017 / year-entry #174</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>28</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Up front and personal.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We saw last time that
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715">
the redirection can come anywhere on the line</a>,
and we saw that unquoted paths with embedded spaces
can seem to work, but in fact doesn't.
And you don't notice because the command processor
is not parsing the command the way you think.
</p>
<p>
Another problem with redirection is the unwanted trailing spaces.
If you say
</p>
<pre>
echo foo &gt;result.txt
</pre>
<p>
then the file <code>result.txt</code> consists of six characters:
</p>
<table BORDER="1" CELLSPACING="0" CELLPADDING="3">
<tr>
<td><code>f</code></td>
<td><code>o</code></td>
<td><code>o</code></td>
<td><code>&nbsp;</code></td>
<td><code>\r</code></td>
<td><code>\n</code></td>
</tr>
</table>
<p>
Notice that there's a space before the
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20040318-00/?p=40193">
CR+LF</a>.
You probably didn't want that space,
but it's there because you put a space
before the redirection operator.
The parser takes out the redirection operator and the file name,
but the space before the redirection operator is still there.
</p>
<p>
You can remove the space by squishing the redirection operator
right against the string you want to print.
</p>
<pre>
echo foo&gt;result.txt
</pre>
<p>
Now the resulting file is
</p>
<table BORDER="1" CELLSPACING="0" CELLPADDING="3">
<tr>
<td><code>f</code></td>
<td><code>o</code></td>
<td><code>o</code></td>
<td><code>\r</code></td>
<td><code>\n</code></td>
</tr>
</table>
<p>
Cool. No stray space.
</p>
<p>
And then later you get a bug because this string didn't get
saved to the file properly:
</p>
<pre>
set MESSAGE=2 for 1
echo %MESSAGE%&gt;result.txt
</pre>
<p>
The resulting file is
</p>
<table BORDER="1" CELLSPACING="0" CELLPADDING="3">
<tr>
<td><code>2</code></td>
<td><code>&nbsp;</code></td>
<td><code>f</code></td>
<td><code>o</code></td>
<td><code>r</code></td>
<td><code>&nbsp;</code></td>
<td><code>\r</code></td>
<td><code>\n</code></td>
</tr>
</table>
<p>
Where did the <code>1</code> go?
</p>
<p>
Another part of the syntax for redirection is that if you put
a number in front of the redirection operator,
it specifies which file descriptor you want to redirect.
In practice, this number is nearly always 2 (stderr),
because 1 (stdout) is the default,
and 0 is stdin, which nobody writes to.
But it means that the expansion of the command line becomes
</p>
<pre>
echo 2 for 1&gt;result.txt
</pre>
<p>
and you are now performing an explicit
redirection of stdout.
The <code>1</code> is redundant because the default is stdout,
but hey, you asked for it.
</p>
<p>
To get rid of this space, you can take advantage of the principle
in the subject of today's post.
Put the redirection operator somewhere else.
I like to put it at the front.
</p>
<pre>
&gt;result.txt echo %MESSAGE%
</pre>
<p>
Putting the redirection at the front also makes building
a multi-line document easier to read.
</p>
<pre>
rem old way
echo first line&gt;result.txt
echo second line&gt;&gt;result.txt
echo third line&gt;&gt;result.txt

rem new way
 &gt;result.txt echo first line
&gt;&gt;result.txt echo second line
&gt;&gt;result.txt echo third line
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (28)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-mzzt even thread-even depth-1 parent" id="comment-1304586">
				<div id="div-comment-1304586" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/The+MAZZTer' rel='external nofollow' class='url'>The MAZZTer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304586">
			August 1, 2017 at 8:59 am</a>		</div>

		<p>It&#8217;s worth mentioning I tried this to see if it would work:</p>
<p>echo %MESSAGE%1&gt;result.txt</p>
<p>No dice. cmd.exe takes the full number before the &gt; even if it&#8217;s multiple digits. Since it doesn&#8217;t know what 11 is supposed to be it ignores it outright, and you&#8217;ve just bought 2 for 11, which is quite a bad deal.</p>
<p>Because of legacy compatibility oddities like this, I personally would advise against using batch for anything except simple scripts*, and powershell or a full compiled program for anything complex. The only reason you might want to use batch for something more complex and really be justified would be if the target machine is old enough to lack powershell (and MS does not support any versions of Windows in this configuration anymore so this is increasingly unlikely) and you are working on someone else&#8217;s (eg a workplace) PC with no access to any sort of real development tools (or, maybe you don&#8217;t know powershell or any full development languages. In which case I encourage you to learn powershell. You managed batch, so I know you can do it).</p>
<p>* &#8211; Such as, for example, launching powershell with permissive ExecutionPolicy to run your powershell script I suggested you write.</p>
<p>Free batch redirection tip if you&#8217;ve chosen to ignore all the above:</p>
<p>2&amp;&gt;1 will redirect stderr to stdout, so they both end up in the same stream. Likewise you can simply do 2&gt;file.ext to capture stderr to a file. You could potentially use the for command to figure out if any text was logged there, and thus determine if an error occurred. But that&#8217;s only necessary if the command does not set %ERRORLEVEL% on error.</p>
<p>(Of course, it&#8217;s a lot easier if you use a language that has error handling built in.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1304695">
				<div id="div-comment-1304695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304695">
			August 1, 2017 at 12:23 pm</a>		</div>

		<p>Wouldn&#8217;t the redirection be 2&gt;&amp;1 (instead of 2&amp;&gt;1)?</p>
<p>About redirection: this link explains how to pipe multiple lines to another program, and this is my most frequently used method to invoke SQL commands:</p>
<p><a href="http://web.archive.org/web/20160101134129/http://www.misanthropicgeek.net/?p=469" rel="nofollow">http://web.archive.org/web/20160101134129/http://www.misanthropicgeek.net/?p=469</a></p>
<p>What was that PowerShell thing everybody is talking about?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1304715">
				<div id="div-comment-1304715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">morlamweb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304715">
			August 1, 2017 at 12:51 pm</a>		</div>

		<p>@Mazzter: I continue to use batch files for &#8220;complex&#8221; scripts that have already been written as batch files, are well-tested, and converting them to The New Thing(TM) would require far more time than I&#8217;d gain from running the &#8220;improved&#8221; versions.  New scripts, perhaps should be written for The New Thing(TM), but inertia tends towards batch files.</p>
<p>&#8220;(Of course, it&#8217;s a lot easier if you use a language that has error handling built in.)&#8221;<br />
&#8220;Batch&#8221; is not a language.  It&#8217;s a set of commands, in a command processor, with a few rudimentary flow-control options.  Let&#8217;s try to keep that in mind.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1304596">
				<div id="div-comment-1304596" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304596">
			August 1, 2017 at 9:04 am</a>		</div>

		<p>I feel bad asking, because I know I&#8217;ve written bash-script code like &#8220;if [ $var1 -eq 1 ];&#8221; type stuff to see if $var is empty (so it is evaluated like  &#8220;1 -eq 1&#8221;).. but ..   Would quotes/quoting fix the spaces and numbers problem ?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1304615">
				<div id="div-comment-1304615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304615">
			August 1, 2017 at 9:12 am</a>		</div>

		<p>Tokens, dear boy.  Tokens.</p>
<p>Naturally, one has to be able to process the tokens within some sort of semantic domain.  Which is where a proper scripting language comes in. (See <b>Mazzter</b>, above.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-2" id="comment-1304655">
				<div id="div-comment-1304655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304655">
			August 1, 2017 at 9:55 am</a>		</div>

		<p>This obvious solution works:<br />
if [ &#8220;$var1&#8221; == &#8220;&#8221; ]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1304685">
				<div id="div-comment-1304685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304685">
			August 1, 2017 at 12:00 pm</a>		</div>

		<p>Of course, it also works in batch files. I use the following to show help when no parameter is given:</p>
<p>if &#8220;%1&#8243;==&#8221;&#8221; goto help</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1304765">
				<div id="div-comment-1304765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304765">
			August 1, 2017 at 1:59 pm</a>		</div>

		<p>Some really old shells (we&#8217;re talking /bin/sh, not /bin/bash) don&#8217;t support certain fancy modern features like testing for equality with the empty string or testing for non-emptiness.  It&#8217;s for compatibility with these ancient shells that the configure scripts that GNU Autotools spits out have all these crazy tests like:</p>
<p>if test &#8220;x${FOO}&#8221; == &#8220;x&#8221;; then &#8230;</p>
<p>But if you&#8217;re writing shell code for any shell released in the last decade or two, that&#8217;s completely unnecessary.  Just go with:</p>
<p>if [ -z &#8220;$FOO&#8221; ]; then &#8230;</p>
<p>or</p>
<p>if [ &#8220;$FOO&#8221; == &#8220;&#8221; ]; then &#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1305025">
				<div id="div-comment-1305025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">heto</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1305025">
			August 2, 2017 at 1:24 pm</a>		</div>

		<p>test -z and testing against the empty string are mandated by POSIX, so they should work on any /bin/sh even if it&#8217;s not bash. Then again, a relatively popular UNIX implementation ships with a /bin/sh with poor POSIX compatibility; for some reason, a more compatible sh is available under another path (leaving the path out so as not to identify which product and thus vendor this is). However, even that /bin/sh supports empty strings with [; what I noticed it lacks support for is $(command).</p>
<p>However, using the == operator with test is a bash extension. With POSIX and most (all?) other shells than bash, only one equals sign is accepted.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1304605">
				<div id="div-comment-1304605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304605">
			August 1, 2017 at 9:07 am</a>		</div>

		<p>I hate to bang on about this. (No, I lie.)  But the first rule of parsing is -don&#8217;t talk about parsing- ignore the &#8220;fluff&#8221; between tokens.  And when I say, &#8220;fluff,&#8221; I mean &#8220;white space.&#8221;<br />
But, of course, this example turns that around by 180 degrees.  Because the <b>set</b> string is implemented as a macro substitution, rather than as a token in its own right, you get this nonsensical case where the lucky [0..2] digit slurves into a random following token to produce an unexpected redirection.<br />
This sort of thing is <i>very</i> difficult to reason about.  I&#8217;ve given up on DOS batch scriptinging and *nix shell scripting (which is actually far, far, worse) in favor of something that actually does the job properly &#8212; a decent scripting language.  Python, Perl, even PowerShell.  I&#8217;d prefer something cross-platform, but then again, the main criterion is that <b>it was not built in the Stone Age.</b></p>
<p>Having said which, I appreciate the fact that my view is in the minority when hiring new IT guys: a good 80% or more of effort is devoted to supporting this nonsense.  And given that, I for one, support Batch File Week!</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1304625">
				<div id="div-comment-1304625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304625">
			August 1, 2017 at 9:19 am</a>		</div>

		<p>I&#8217;m a little paranoid about being accused of going off-topic, so &#8230; Here&#8217;s the thing about Raymond&#8217;s post here.</p>
<p>I can pretty much guarantee that anything you have learned, either at college or at work, would suggest that you don&#8217;t really need to watch out for trailing spaces.</p>
<p>And you are wrong.  Weird, but interesting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1304705">
				<div id="div-comment-1304705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304705">
			August 1, 2017 at 12:24 pm</a>		</div>

		<p>Batch files are a lot simpler once you stop thinking in terms of regular parsed-and-compiled languages, and forget about tokens, grammars and preprocessors.</p>
<p>Empty your mind. And take these simple facts:</p>
<p>1) Command interpreters interpret lines. Batch files/shell scripts are just a collection of lines, executed in order.<br />
2) A line is a string of space-separated, optionally quoted, parameters, which end in a line delimiter.<br />
3) Before executing a line, the command interpreter will substitute all its variables for their values, and then it will take note of and remove redirections. Without inserting or removing extra spaces.<br />
4) The first parameter in a line is the command. The remainder are passed as a single string to the command (including trailing spaces), which is in charge of parsing it and extracting the parameters. Thus, for the command interpreter, the only &#8220;special&#8221; parameter is the first one (%0 in cmd.exe&#8217;s notation).</p>
<p>That&#8217;s all. There are some wrinkles, mainly in the flow control commands (if, for, case, while&#8230;), but with those four rules and a bit of logic you can work almost everything. If you follow these rules, you will see that there isn&#8217;t anything special about the set command, either &#8211; all the magic happens in rule 3, during expansion.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1304735">
				<div id="div-comment-1304735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Muzer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304735">
			August 1, 2017 at 1:27 pm</a>		</div>

		<p>*nix shell scripting far worse? In that people&#8217;s expectations are higher than for batch, maybe, but could you tell me how it&#8217;s actually worse? The problem listed here (trailing spaces) most definitely doesn&#8217;t occur in Bourne-like shells.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1304785">
				<div id="div-comment-1304785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304785">
			August 1, 2017 at 3:42 pm</a>		</div>

		<p>Unix shell scripts are years ahead of batch files. When Microsoft/IBM came with DOS 1.0 in 1981, the Bourne Shell already was a mature tool. In the NT/2000/XP years, Microsoft worked hard to close the distance (and did a good work, because Unix shells didn&#8217;t have much improvements left). But sadly all this ended with the launch of PowerShell. Now, there is no hope that CMD.exe will ever reach parity with bash.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1304676">
				<div id="div-comment-1304676" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304676">
			August 1, 2017 at 11:58 am</a>		</div>

		<p>&gt; You managed batch, so I know you can do it.</p>
<p>Yes, I can do it. Of course I can. I have lost count on how many languages I know (probably over a dozen, including two or three developed by myself), so learning a new one should be no problem.</p>
<p>Except that it would take time to master. Even more if you account for the effort that would take to translate into PowerShell the batches I have written over the years (more than a hundred, some of which include calls to GNUWin32 commands). In my case, learning, for example, the sub-commands of sed or grep makes more sense than learning to do the same with PowerShell, because I can use them in Unix too, when doing web administration.</p>
<p>Batch files may not be as elegant as PowerShell scripts (you may say they are ugly, and I won&#8217;t disagree). But they do work, and they take no time away from my (paid) work. I guess many people will be in my shoes.</p>
<p>That&#8217;s why I love Batch File Week (will it be a week-and-a-half this year? Please? With a cherry on top? O:-) ).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1304725">
				<div id="div-comment-1304725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304725">
			August 1, 2017 at 1:20 pm</a>		</div>

		<p>Also, cmd/command is *still* the least common denominator if you have to maintain Windows installations that don&#8217;t have PowerShell on them, or where you are stuck with PS that is in restricted execution mode. Unix is in a similiar spot, where the Bourne Shell still reigns supreme even though some people wish it would die a quick death.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1304795">
				<div id="div-comment-1304795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304795">
			August 1, 2017 at 3:57 pm</a>		</div>

		<p>If you&#8217;re still supporting systems that don&#8217;t come with PowerShell pre-installed, you have much, much bigger problem than the choice of your scripting language. Not even Microsoft is supporting an OS that doesn&#8217;t any more, so it may just be time to move on yourself. </p>
<p>And no there&#8217;s no problem at all with restricted mode. A simple &#8220;PowerShell.exe -ExecutionPolicy Bypass -File &#8221; will do the trick. </p>
<p>That&#8217;s also a handy way to provide PowerShell scripts that can easily be executed from Explorer independent of how the system is set up &#8211;<br />
 put the above into a batch script (such a wrapper is probably the only sane reason for writing a new batch file these days).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1304815">
				<div id="div-comment-1304815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304815">
			August 1, 2017 at 5:17 pm</a>		</div>

		<p>You instead could use WSH (i.e., cscript) with VBscript or JScript.  I think that&#8217;s been installed with Windows since Windows 98.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1304845">
				<div id="div-comment-1304845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304845">
			August 2, 2017 at 12:45 am</a>		</div>

		<p>I prefer batch or PowerShell over VBScript/JScript&#8230;.</p>
<p>Besides I block WSH on every installation since the Windows XP days. :p</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1304745">
				<div id="div-comment-1304745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304745">
			August 1, 2017 at 1:52 pm</a>		</div>

		<p>This is kind of a repeat: <a href="https://blogs.msdn.microsoft.com/oldnewthing/20060518-07/?p=31153/" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20060518-07/?p=31153/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-the-wench even thread-odd thread-alt depth-1" id="comment-1304826">
				<div id="div-comment-1304826" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Monochrome+Wench' rel='external nofollow' class='url'>Monochrome Wench</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304826">
			August 1, 2017 at 11:28 pm</a>		</div>

		<p>Putting it at the start works?!? Having used batch files for like 30 years i can&#8217;t believe i haven&#8217;t seen it before</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1304875">
				<div id="div-comment-1304875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304875">
			August 2, 2017 at 3:21 am</a>		</div>

		<p>In case anyone reading yesterday&#8217;s comments wonders what happened to my timeout/t 1&gt;nul, it became timeout/t&gt;nul 1.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1304935">
				<div id="div-comment-1304935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BZ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304935">
			August 2, 2017 at 7:36 am</a>		</div>

		<p>Regarding environment variable expansion with redirection operator, I have a feeling that this is the type of thing that can be changed now without worrying about backward compatibility because nobody would ever have written code that did this except by mistake. I can&#8217;t imagine someone using a variable to decide what they want to redirect to a file, or interacting with the redirection operator in some other way.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1304995">
				<div id="div-comment-1304995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1304995">
			August 2, 2017 at 10:59 am</a>		</div>

		<p>set OUTPUT=2<br />
if save-normal-output set OUTPUT=1<br />
some-command %OUTPUT%&gt;output</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1305137">
				<div id="div-comment-1305137" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BZ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1305137">
			August 3, 2017 at 11:11 am</a>		</div>

		<p>That is a contrived example because it can only redirect one thing at a time. How often do you want to redirect EITHER stdout OR stderr? I&#8217;d imagine either none, one, or both.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1305416">
				<div id="div-comment-1305416" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1305416">
			August 6, 2017 at 8:04 am</a>		</div>

		<p>How often?  Not often, but there are a LOT of Windows installations out there.  Somebody, somewhere, *would* be broken by this change.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1305166">
				<div id="div-comment-1305166" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1305166">
			August 3, 2017 at 10:03 pm</a>		</div>

		<p>&gt;result.txt (<br />
echo first line<br />
echo second line<br />
echo third line<br />
)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1306345">
				<div id="div-comment-1306345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.passingtheknowledge.net' rel='external nofollow' class='url'>Elias Bachaalany</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170801-00/?p=96725#comment-1306345">
			August 13, 2017 at 12:21 pm</a>		</div>

		<p>I would like to take the opportunity to mention the &#8220;Batchography&#8221; explaining all there is to be explained about Batch files programming. It is written in 2016 and one of the most complete reference book with more than 100 Batch recipes and troubleshooting tips.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

