<html>
<head>
<title>Under what conditions could a commit of reserved memory fail?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Under what conditions could a commit of reserved memory fail?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 19, 2017 / year-entry #96</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170419-00/?p=95995</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Usually because you are out of memory, but really it's when you're out of commit.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<!-- Tom Meschter (tomescht) win32prg 2011/08/26 "Circumstances under which VirtualAlloc can fail to commit reserved memory" Pavel calls out the commit limit -->
<p>
A customer's program reserves a large chunk of address space
(<code>Virtual&shy;Alloc</code> with <code>MEM_<wbr>RESERVE</code>)
and commits memory into it as necessary
(<code>Virtual&shy;Alloc</code> with <code>MEM_<wbr>COMMIT</code>).
They received crash reports that indicated that the
commit was failing, which leads to the program reporting
a fatal error.
Unfortunately,
in between the failed
<code>Virtual&shy;Alloc</code>
and the code that generated the fatal error,
the error code set by
<code>Virtual&shy;Alloc</code>
was lost.
(The customer sheepishly acknowledged that this was
due to "poor code".)
</p>
<p>
The customer wanted to know what situations could result in
the failure to commit memory that had previous been
successfully reserved.
</p>
<p>
The obvious reason is that you are out of memory.
The system will satisfy commit either from physical memory
or from the page file.&sup1;
The page file will not extend indefinitely, so you will
eventually run out of memory if you keep committing.
</p>
<p>
A less obvious reason is that the process may be running
inside a job that has a commit limit.
</p>
<p>
Once the customer knew what to look for,
they were able to verify that the program running into
the problem was indeed running inside a job.
Furthermore, the job memory limit was set to
155MB, which is low for the type of work the program
normally performs.
</p>
<p>
Mystery solved.
Of course, the next mystery is why the program is running
in a job with a low commit limit,
but the customer at least knew what direction to proceed
next.
</p>
<p>
&sup1;
It's not quite that way.
The system does not assign a physical page or a page file page
to you when you commit.&sup2;
The system merely does enough bookkeeping to ensure that
if you write data to the pages that you committed,
then the system will have a place to hold this data
and produce it upon demand.
That place might be physical memory,
or it might be the page file,
but the system doesn't know at commit time which it will be
(and it may end up being both at different times).
</p>
<p>
&sup2;
This delay-assignment of committed pages
means that reserving address space and then committing
it as needed doesn't save you any physical memory.
The commit doesn't require physical memory.
The physical memory doesn't get assigned until you
try to access the memory.
All you're saving is system commit, which is just a number
(although as noted in the previous footnote,
the number does have a maximum value).
Unless you are doing this to save large amounts of memory
(dozens of megabytes or more),
committing on demand is usually not worth the effort.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1293236">
				<div id="div-comment-1293236" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170419-00/?p=95995#comment-1293236">
			April 20, 2017 at 5:02 am</a>		</div>

		<p>My understanding was always that reserving memory was intended to be used by custom <code>malloc</code> implementations as a way of keeping a contiguous heap; or for (potentially) large dynamic allocations where continuity in the address space was needed. Basically a way of telling the loader to not load anything there because you&#8217;re going to potentially need it as one big block later. In fact based on MSDN and this blog I&#8217;ve always assumed that the memory manager could care less about reservations for the most part until you committed.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1294485">
				<div id="div-comment-1294485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JDG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170419-00/?p=95995#comment-1294485">
			April 28, 2017 at 11:56 am</a>		</div>

		<p>*could not</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1293436">
				<div id="div-comment-1293436" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170419-00/?p=95995#comment-1293436">
			April 21, 2017 at 2:09 am</a>		</div>

		<p>&#8221; was intended to be used by custom malloc &#8221; ?</p>
<p>Why only *custom* mallocs? The use of Memory Mapped Files as also loading&amp;unloading of additional DLLs after initial startup can fragment the address space at any time. So every implementation of heap memory should reserve &#8220;some&#8221; address space (at least on 32bit systems). But its tricky to leave enough space for other heaps and mapped files&#8230;.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude odd alt depth-2" id="comment-1293455">
				<div id="div-comment-1293455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170419-00/?p=95995#comment-1293455">
			April 21, 2017 at 5:40 am</a>		</div>

		<p>I assumed <code>HeapAlloc</code> already does this, as far as I know all the <code>*Alloc</code> allocators on windows are implemented in terms of <code>VirtualAlloc</code> at the lowest level as it is the WIN32 closest equivalent of <code>mmap</code>.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

