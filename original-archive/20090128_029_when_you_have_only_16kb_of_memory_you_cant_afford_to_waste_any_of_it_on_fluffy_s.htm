<html>
<head>
<title>When you have only 16KB of memory, you can't afford to waste any of it on fluffy stuff</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When you have only 16KB of memory, you can&#8217;t afford to waste any of it on fluffy stuff</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 28, 2009 / year-entry #30</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090128-00/?p=19353</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The original IBM PC came with 16KB of memory. That's not a lot of space in which to squeeze an operating system, especially since you had to leave enough memory for the user to actually get work done. A product of its time, the MS-DOS kernel is written entirely in assembly language, pretty much standard...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The original IBM PC came with 16KB of memory.
</p>
<p>
That's not a lot of space in which to squeeze an operating system,
especially since you had to leave enough memory for the user
to actually <i>get work done</i>.
A product of its time,
the MS-DOS kernel is written entirely in assembly language,
pretty much standard procedure for programs of the era.
It also meant that the code takes all sorts of crazy shortcuts
to shave a few bytes here, a few bytes there,
in order to squeeze into as little memory as possible.
For example, one very common trick was to have jump into
the middle of an instruction,
knowing that the second half of the instruction,
when reinterpreted as the start of an instruction,
performs the operation you wanted.
</p>
<p>
Anyway, this subject arose in response to my discussion of
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/01/30/519388.aspx">
why a corrupted program sometimes results in a "Program too big to fit
in memory" error</a>,
which prompted the question from commenter 8 wondering
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/01/30/519388.aspx#519467">
why the kernel didn't simply reject .COM files bigger
than 64KB</a>?
</p>
<p>
Well, yeah, and that's what it did: By complaining that it was too big
to fit into memory.
There's no point adding a redundant test.
(It appears that some people like to call these redundant tests
<i>
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/01/30/519388.aspx#519626">
basic sanity checking</a></i>, but I consider sanity checking to be
protecting against unreasonable values before they cause trouble.
But in this case, they don't cause trouble&mdash;the error is
detected and reported even without the so-called sanity check.)
</p>
<p>
Consider:
</p>
<pre>
bool SomeFunction(...)
{
 ...
 if (x == 3) return false;
 if (x &lt; 10) return false;
 ...
}
</pre>
<p>
The first test is redundant, because if <code>x</code> is three,
then even without the test, the function will still fail
because <code>x</code> is also less than ten.
</p>
<p>
And when you're trying to squeeze your kernel into a few bytes as possible,
you're certainly not going to waste your time coding up a redundant test.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-704033">
				<div id="div-comment-704033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090128-00/?p=19353#comment-704033">
			January 28, 2009 at 7:05 pm</a>		</div>

		<p>Redundant checks like that are more useful when you can give more specific error messages (which of course you can&#8217;t in the context of a must-be-as-small-as-possible DOS kernel).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704063">
				<div id="div-comment-704063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090128-00/?p=19353#comment-704063">
			January 28, 2009 at 8:02 pm</a>		</div>

		<blockquote><p>
  &gt; Redundant checks like that are more useful</p>
<p>  &gt; when you can give more specific error</p>
<p>  &gt; messages
</p></blockquote>
<p>Such as &quot;try again, 3 is still less than 10&quot;</p>
<p>When you only have 16Kb on a PC you realise you should have got a CP/M machine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-704083">
				<div id="div-comment-704083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sorry :)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090128-00/?p=19353#comment-704083">
			January 28, 2009 at 9:01 pm</a>		</div>

		<p>Contemporary IBM PC clones come with 2GB of memory.</p>
<p>That&#8217;s not a lot of space in which to squeeze an operating system, especially since you had to leave enough memory for the user to actually get work done. A product of its time, the Vista userspace components are written entirely in high level languages, pretty much standard procedure for programs of the era. It also means that the code takes all sorts of crazy abstractions to waste a few bytes here, a few bytes there, in order to be in accordance with modern development practices as much as possible. For example, one very common change is to replace data stores that used to be plain text files or compact binary files with XML files and databases, respectively, knowing that they perform the operation you wanted, just at a higher performance cost.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704103">
				<div id="div-comment-704103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.powertuneplus.com' rel='external nofollow' class='url'>Josh Straub</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090128-00/?p=19353#comment-704103">
			January 28, 2009 at 11:11 pm</a>		</div>

		<p>Well played, Mr. &quot;sorry :)&quot; on January 28, 2009 9:01 PM!!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-704133">
				<div id="div-comment-704133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090128-00/?p=19353#comment-704133">
			January 29, 2009 at 3:44 am</a>		</div>

		<p>Sorry :-) has a point. XML was a mistake. And they had enough experience at the time to know it, that&#8217;s the sad thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704163">
				<div id="div-comment-704163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">enjpm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090128-00/?p=19353#comment-704163">
			January 29, 2009 at 6:26 am</a>		</div>

		<p>This post is related to a discussion I just had (actually, it is related to the original post but comments are off there)(and it&#8217;s only really tenuously related to that, so I&#8217;m sorry)(though not sorry enough to not actually post, just a bit less than that). On the original post, Raymond says to save your work before trying some random file as an .exe, and people ask what might happen.</p>
<p>I&#8217;ve never programmed to the windows API directly, but have written lots of image processing code in C++ &#8211; and today we managed to white-screen XP reproducibly, the first time I&#8217;ve seen XP die so spectacularly. The question we discussed was:- is the white screen a result of an event within the deep dark bowels of windows that is raised after some particular bit of memory is accessed, which prompts that section of windows to do a quick check that things are still ok, then find that they’re not and goes to panic stations? We assumed that windows can&#8217;t differentiate between a process directly accessing memory it owns and memory it doesn’t, ie. checking each time that the user/process has the right credentials, as how could you possibly do this without it being unearthly slow?</p>
<p>In that case then, we are manipulating pointers to image buffers directly all the time, and we could just get the line pitch wrong one day, jump out of the memory for our process and just dive straight into the windows kernel. Sure, it would die very soon afterwards but when exactly? And the damage could be pretty bad – what is the worst that could happen? Or am I just missing something fundamental?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-704183">
				<div id="div-comment-704183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">peterchen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090128-00/?p=19353#comment-704183">
			January 29, 2009 at 7:45 am</a>		</div>

		<p>I am no stranger to blaming XML, but how does that relate to the part that executes MS-DOS style .COM programs?</p>
<p>Why touch a part that is working, just to give a different error message? It&#8217;s not that windows was exactly designed for renaming arbitrary files to .com and running them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704203">
				<div id="div-comment-704203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.tapuchim.com' rel='external nofollow' class='url'>configurator</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090128-00/?p=19353#comment-704203">
			January 29, 2009 at 8:12 am</a>		</div>

		<p>@enjpm: The processor has ways to check what memory is and isn&#8217;t owned by the current process, though I&#8217;m not sure about the terminology.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-704213">
				<div id="div-comment-704213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dog</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090128-00/?p=19353#comment-704213">
			January 29, 2009 at 8:55 am</a>		</div>

		<p>Thanks for the history lession, Raymond, but that still doesn&#8217;t explain why (the) MS-DOS (emulator) doesn&#8217;t do the check in 2009.</p>
<p>That&#8217;s the thing about hardware limitations, you can&#8217;t continue using them as an excuse when they no longer exist. Now in this particular case it&#8217;s probably not worth it, but Windows is filled with these sorts of things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704233">
				<div id="div-comment-704233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">enjpm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090128-00/?p=19353#comment-704233">
			January 29, 2009 at 9:59 am</a>		</div>

		<p>Ah, so the cpu is in charge of such matters. Ok, thanks for the reply, that all makes sense. I knew there was something fundamental I was missing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-704243">
				<div id="div-comment-704243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RobertWrayUK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090128-00/?p=19353#comment-704243">
			January 29, 2009 at 10:09 am</a>		</div>

		<p>Dog &#8211; backwards compatibility probably!</p>
<p>There&#8217;s probably some program, somewhere (undoubtedly a LOB application run by a Fortune 500, or similar) that does something crazy that expects that specific error message.</p>
<p>Stranger things have happened!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704193">
				<div id="div-comment-704193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090128-00/?p=19353#comment-704193">
			January 29, 2009 at 8:09 am</a>		</div>

		<p>&quot;We assumed that windows can&#8217;t differentiate between a process directly accessing memory it owns and memory it doesn’t, ie. checking each time that the user/process has the right credentials, as how could you possibly do this without it being unearthly slow?&quot;</p>
<p>Windows, and all modern OSs, *can* do this, and do it with the help of the CPU. Read up on paging[0], page tables[1], page faults[2], the translation lookaside buffer[3], memory management[4] and the MMU[5]. Because the OS and the CPU need to maintain the process-virtual-memory to physical-memory mapping and translate between them on memory accesses, checking that the memory being accessed even *has* an entry in the mapping is a free side effect.</p>
<p>The mapping also includes things like whether a page can be written to, whether it can be treated like code and executed, whether it is shared and needs copy-on-write semantics, and a whole bunch of other stuff.</p>
<p>Because the CPU does nearly all of the work for the common case (process memory is paged in, and the TLB is up-to-date) and it&#8217;s just part of what the CPU does to access memory, there&#8217;s almost no slow-down at all compared to not using virtual memory. If you&#8217;re reading and writing large amounts of memory, the page checks are probably dwarfed by the time it takes to read the data across the memory bus.</p>
<p>[0] <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Paging" rel="nofollow">http://en.wikipedia.org/wiki/Paging</a></p>
<p>[1] <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Page_table" rel="nofollow">http://en.wikipedia.org/wiki/Page_table</a></p>
<p>[2] <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Page_fault" rel="nofollow">http://en.wikipedia.org/wiki/Page_fault</a></p>
<p>[3] <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Translation_Lookaside_Buffer" rel="nofollow">http://en.wikipedia.org/wiki/Translation_Lookaside_Buffer</a></p>
<p>[4] <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Memory_management" rel="nofollow">http://en.wikipedia.org/wiki/Memory_management</a></p>
<p>[5] <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Memory_management" rel="nofollow">http://en.wikipedia.org/wiki/Memory_management</a>_unit</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-704593">
				<div id="div-comment-704593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090128-00/?p=19353#comment-704593">
			January 30, 2009 at 8:52 am</a>		</div>

		<blockquote><p>
  but that still doesn&#8217;t explain why (the)</p>
<p>  MS-DOS (emulator) doesn&#8217;t do the check in 2009.
</p></blockquote>
<p>Because there&#8217;s no need to change working code? &nbsp;</p>
<p>Especially obsolete working code like a compatibility layer for a 1980s operating system.</p>
<p>The system reliably detects images whose size word is corrupted. What more is needed?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704913">
				<div id="div-comment-704913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dog</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090128-00/?p=19353#comment-704913">
			January 30, 2009 at 7:18 pm</a>		</div>

		<p>dave: Like I said, in this case it&#8217;s probably not worth it.</p>
<p>The thing is, this is far from the only case where historical hardware limitations stiff affect Windows&#8217; performance and usability (at both the UI and API levels).</p>
<p>Seriously, a good 90%* of Raymond&#8217;s posts start with &quot;In 16-bit Windows&#8230;&quot; or &quot;In Windows 95&#8230;&quot;. My point is that you can&#8217;t use history to explain why something is the way it is *now*. You can use history to explain why it was that way originally, but then you&#8217;ve got to fill in the gap (probably with &quot;and we never bothered to change it&quot;).</p>
<p>* Source: Made up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-705053">
				<div id="div-comment-705053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://ww.com/' rel='external nofollow' class='url'>Jacques Mattheij</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090128-00/?p=19353#comment-705053">
			February 1, 2009 at 7:17 pm</a>		</div>

		<p>For anybody that was born after say 1980 it would do wonders to go back for a while and program some old box you buy on ebay for $50 and make it do something useful. Or do something with an Atmel or PIC chip. You&#8217;re certain to pick up a few tricks that you&#8217;ll use in your &#8216;regular&#8217; programming.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-705493">
				<div id="div-comment-705493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gregory Kong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090128-00/?p=19353#comment-705493">
			February 2, 2009 at 9:50 pm</a>		</div>

		<p>Dog:</p>
<p>&quot;Seriously, a good 90%* of Raymond&#8217;s posts start with &quot;In 16-bit Windows&#8230;&quot; or &quot;In Windows 95&#8230;&quot;. My point is that you can&#8217;t use history to explain why something is the way it is *now*. You can use history to explain why it was that way originally, but then you&#8217;ve got to fill in the gap (probably with &quot;and we never bothered to change it&quot;).&quot;</p>
<p>Er, yes, that&#8217;s what Raymond&#8217;s blog is all about. The past. Backwards compatibility. The whole megillah. Why is something the way it is now? Because of the past, yes, but more importantly, it would *break* stuff &#8211; *very expensive and important* stuff &#8211; if they changed it. It&#8217;s not that they didn&#8217;t bother, it&#8217;s that they couldn&#8217;t.</p>
<p>Consider the HUGE library of applications written for DOS, Extended DOS, Win16, Win32, and now .NET and Win64. Consider that MSFT&#8217;s core goal is to make money by selling software, most notably its cash cows Windows and Office. Consider that we have very obvious evidence showing us that making changes to the way apps work virtually guarantees the failure of a particular OS release.</p>
<p>And then consider that the original C&amp;C had better work under Windows Vista pretty much the same way as under DOS 6.xx &#8211; warts and all &#8211; or else some segment of the population (including me) would not upgrade to it.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

