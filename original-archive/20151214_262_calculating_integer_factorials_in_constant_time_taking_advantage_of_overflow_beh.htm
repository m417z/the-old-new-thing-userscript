<html>
<head>
<title>Calculating integer factorials in constant time, taking advantage of overflow behavior</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Calculating integer factorials in constant time, taking advantage of overflow behavior</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 14, 2015 / year-entry #263</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>26</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Too high! Too high!</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
For some reason, people on StackOverflow calculate factorials a lot.
(Nevermind that it's
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/05/08/10416823.aspx">
not necessarily the best way to evaluate a formula</a>.)
And you will see factorial functions like this:
</p>
<pre>
int factorial(int n)
{
 if (n &lt; 0) return -1; // EDOM
 int result = 1;
 for (int i = 2; i &lt;= n; i++) result *= i;
 return result;
}
</pre>
<p>
But you can do better than this
by
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/06/27/10537746.aspx">
taking advantage of undefined behavior</a>.
</p>
<p>
Since signed integer overflow results in undefined behavior
in C/C++,
you can assume that the result of the factorial does not
exceed <code>INT_MAX</code>,
which is 2147483647 for 32-bit signed integers.
This means that <var>n</var> cannot be greater than 12.
</p>
<p>
So use a lookup table.
</p>
<pre>
int factorial(int n)
{
 static const int results[] = {
    1,
    1,
    1 * 2,
    1 * 2 * 3,
    1 * 2 * 3 * 4,
    1 * 2 * 3 * 4 * 5,
    1 * 2 * 3 * 4 * 5 * 6,
    1 * 2 * 3 * 4 * 5 * 6 * 7,
    1 * 2 * 3 * 4 * 5 * 6 * 7 * 8,
    1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9,
    1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10,
    1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11,
    1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12,
 };
 if (n &lt; 0) return -1; // EDOM
 return results[n]; // undefined behavior if n &gt; 12
}
</pre>
<p>
(If you have 64-bit signed integers,
then the table needs to go up to 20.)
</p>
<p>
The fact that you have undefined behavior if <var>n</var> &gt; 12
is hardly notable,
because the original code also had undefined behavior if
<var>n</var> &gt; 12.
You just replaced one undefined behavior with another.
</p>
<p>
If you want to simulate two's complement overflow,
for example, to preserve bug-for-bug compatibility,
or because the function was defined to compute unsigned
instead of signed factorial,&sup1;
then you can do that by extending the table just a little bit more.
You will need only entries up to 33! because
because 34! is
<a HREF="http://en.wikipedia.org/wiki/De_Polignac%27s_formula">
an exact multiple of 2&sup3;&sup2;</a>.
The result of <code>factorial(n)</code> is zero
for <var>n</var> &ge; 34,
assuming 32-bit integers.
</p>
<pre>
int factorial(int n)
{
 static const int results[] = {
          1, // 0!
          1, // 1!
          2, // 2!
          6, // 3!
         24, // 4!
        120, // 5!
        720, // 6!
       5040, // 7!
      40320, // 8!
     362880, // 9!
    3628800, // 10!
   39916800, // 11!
  479001600, // 12!
 1932053504, // 13!
 1278945280, // 14!
 2004310016, // 15!
 2004189184, // 16!
 4006445056, // 17!
 3396534272, // 18!
  109641728, // 19!
 2192834560, // 20!
 3099852800, // 21!
 3772252160, // 22!
  862453760, // 23!
 3519021056, // 24!
 2076180480, // 25!
 2441084928, // 26!
 1484783616, // 27!
 2919235584, // 28!
 3053453312, // 29!
 1409286144, // 30!
  738197504, // 31!
 2147483648, // 32!
 2147483648, // 33!
 };
 if (n &lt; 0) return -1; // EDOM
 if (n &gt; 33) return 0; // overflowed to zero
 return results[n];
</pre>
<p>
I didn't calculate all those numbers myself.
I wrote a program to do it.
</p>
<pre>
class Program
{
 public static void Main() {
  uint result = 1;
  uint n = 0;
  while (result != 0) {
   System.Console.WriteLine(" {0,10}, // {1}!", result, n);
   result *= ++n;
  }
 }
}
</pre>
<p>
Extending the above algorithm to 64-bit integers is left as an exercise.
</p>
<p>
&sup1; Unsigned arithmetic is defined by the C/C++ standards to be
modulo 2<var>&#x207F;</var> for some <var>n</var>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (26)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1218771">
				<div id="div-comment-1218771" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Vine [MSFT]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218771">
			December 14, 2015 at 7:52 am</a>		</div>

		<p>Ahhh the grotty corners of C++. I personally love to delve into undefined, implementation defines and unspecified behavior. Infact, one of my favorite small interview questions is getting the candidate to think about these things &#8211; given the definitions of them give or analyse examples of each of them and think about the dangers they may pose to your program.</p>
<p>It even gets better when you realize undefined behavior goes &#8220;back in time&#8221;&#8230; things that should&#8217;ve happened before the &#8216;undefined&#8217; behavior hit may never actually happen&#8230; it logically follows on if you think about compiler optimizations.</p>
<p>And remember Vines Law of Undefined Behavior: Any non-trivial C++ program has undefined behavior. Seriously though, having been in the industry for many years I&#8217;ve never seen any reasonably sized project not include some undefined behavior if you look hard enough and are pedantic enough. Scary if you thiink about it too hard.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1218832">
				<div id="div-comment-1218832" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218832">
			December 14, 2015 at 10:34 am</a>		</div>

		<p>For those scratching their heads, Raymond showed how undefined behavior can go back in time last year: <a href="https://blogs.msdn.microsoft.com/oldnewthing/20140627-00/?p=633/" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20140627-00/?p=633/</a> .</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1218781">
				<div id="div-comment-1218781" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218781">
			December 14, 2015 at 8:23 am</a>		</div>

		<p>I wrote that code 14 years ago in class to prove an apparently preposterous statement about Big-O. There&#8217;s no way you were in that class that day. How did you get it?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-matthew-manelahotmail-com odd alt depth-2 parent" id="comment-1218791">
				<div id="div-comment-1218791" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matthew+Manela' rel='external nofollow' class='url'>Matthew Manela</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218791">
			December 14, 2015 at 8:35 am</a>		</div>

		<p>What was the apparently preposterous statement?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1218861">
				<div id="div-comment-1218861" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218861">
			December 14, 2015 at 12:12 pm</a>		</div>

		<p>I&#8217;m not quite sure but I think I outright claimed factorial was constant time.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-2" id="comment-1218831">
				<div id="div-comment-1218831" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218831">
			December 14, 2015 at 9:45 am</a>		</div>

		<p>That&#8217;s where Raymond inadvertently lets us in on his time machine.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1218801">
				<div id="div-comment-1218801" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218801">
			December 14, 2015 at 9:13 am</a>		</div>

		<p>I wonder if any existing sufficiently-optimising compilers already perform transformation #1, by unrolling sufficiently many initial iterations (i.e. more than 12) to spot the undefined behaviour and just exit there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1218811">
				<div id="div-comment-1218811" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218811">
			December 14, 2015 at 9:27 am</a>		</div>

		<p>Your table contains values that exceed the range of &#8220;int&#8221;.  It&#8217;d be better to have the table be of unsigned numbers, then return static_cast&lt;int&gt;(results[n]).</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1219101">
				<div id="div-comment-1219101" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://programmerman.net' rel='external nofollow' class='url'>Nick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219101">
			December 15, 2015 at 12:26 pm</a>		</div>

		<p>Undefined behavior is undefined. He put in a value that exceeds Int.MaxValue specifically to get the same undefined behavior that the factorial() function had doing the math itself.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-3" id="comment-1219151">
				<div id="div-comment-1219151" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219151">
			December 15, 2015 at 5:09 pm</a>		</div>

		<p>No, it&#8217;s a genuine bug. I was hoping nobody would notice.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1218842">
				<div id="div-comment-1218842" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andre</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218842">
			December 14, 2015 at 11:13 am</a>		</div>

		<p>You could get really pedantic and say that you can do this for any kind of algorithm.<br />
A real computer is not a Turing machine but always finite, more like a linear bounded automaton.<br />
The halting problem is decidable for that. For a fixed input size you can say the algorithm runs in constant time, with the constant being the maximum required time for any input. Of course, in general that &#8220;constant&#8221; will be ridiculously large.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1218851">
				<div id="div-comment-1218851" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218851">
			December 14, 2015 at 12:02 pm</a>		</div>

		<p>True, but for factorial, the number of inputs for which a defined output exists is extremely low, which makes the problem interesting.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-3 parent" id="comment-1218921">
				<div id="div-comment-1218921" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218921">
			December 14, 2015 at 6:06 pm</a>		</div>

		<p>Yup. One can write a program to output value of Pi up to 300 decimal places instantaneously in similar way too.</p>
<p>3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong odd alt depth-4 parent" id="comment-1218931">
				<div id="div-comment-1218931" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218931">
			December 14, 2015 at 6:09 pm</a>		</div>

		<p>Oh, look. We have a much wider screen space here. :)</p>
<p>Maybe we need word-break: break-all for .comment-body class.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-5" id="comment-1218941">
				<div id="div-comment-1218941" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218941">
			December 14, 2015 at 6:21 pm</a>		</div>

		<p>Unfortunately, word-break: break-all breaks too aggressively. It will happily split a medium-length word if it happens to come close to the end of a line. Maybe break-word will work.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1219092">
				<div id="div-comment-1219092" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dmytro Dziuma</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219092">
			December 15, 2015 at 12:00 pm</a>		</div>

		<p>For such problems with fixed input size you can use memoization in most cases.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1218951">
				<div id="div-comment-1218951" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.excastle.com/' rel='external nofollow' class='url'>Joe White</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218951">
			December 14, 2015 at 7:10 pm</a>		</div>

		<p>I may be missing something obvious, but what does &#8220;EDOM&#8221; mean?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1219021">
				<div id="div-comment-1219021" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Christopher Harrison</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219021">
			December 15, 2015 at 8:00 am</a>		</div>

		<p>Domain error: the argument is out of the domain of the function (modulo machine precision, in this case)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1219041">
				<div id="div-comment-1219041" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219041">
			December 15, 2015 at 8:53 am</a>		</div>

		<p>Domain error: <a href="http://en.cppreference.com/w/c/error/errno_macros" rel="nofollow">http://en.cppreference.com/w/c/error/errno_macros</a></p>
<p>Standard library functions in math.h set errno to EDOM if you call them with input parameters outside of the function&#8217;s domains (but only if you&#8217;ve enabled it by setting the flag MATH_ERRNO in the math_errhandling global).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1218971">
				<div id="div-comment-1218971" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">me</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218971">
			December 15, 2015 at 12:49 am</a>		</div>

		<p>The overflow case is not really undefined behavior. I don&#8217;t think anyone sane would take advantage of overflowing factorial calculations, but the overflow of multiplications is actually defined behavior. The assembly instruction MUL with 32-bit operands, actually does the multiplication and stores the result in the 64-bit register pair eax:edx, but C++&#8217;s * operator takes only the lower 32-bits from eax and discards edx. The MulDiv function uses this (defined) functionality.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1219011">
				<div id="div-comment-1219011" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219011">
			December 15, 2015 at 7:46 am</a>		</div>

		<p>It may be defined by the CPU, but it is undefined by the C/C++ language specification. Other CPUs may behave differently. (For example, the Alpha AXP does not have an edx register.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1218981">
				<div id="div-comment-1218981" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1218981">
			December 15, 2015 at 2:33 am</a>		</div>

		<p>I find it easier to notice that 2ⁿ! ends in 2ⁿ-1 zero bits (in other prime bases pⁿ! would end in (pⁿ-1)/(p-1) zeros).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1219022">
				<div id="div-comment-1219022" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jrb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219022">
			December 15, 2015 at 8:21 am</a>		</div>

		<p>Here is a better way to do it with C++14. This works in Visual Studio 2015. This will work with any integer type.</p>
<p>#include </p>
<p>template<br />
constexpr T cfact(unsigned f) {<br />
	return f?cfact(f &#8211; 1)*f : 1;<br />
}</p>
<p>template<br />
constexpr T factorial_max_helper(T value_so_far, unsigned f) {<br />
	return std::numeric_limits::max() / value_so_far &lt; f ? f &#8211; 1 : factorial_max_helper(value_so_far*f, f + 1);<br />
}</p>
<p>template<br />
T factorial_helper(unsigned f, std::index_sequence indices) {<br />
	static constexpr T ar[] = { cfact(Indices)&#8230; };<br />
	return ar[f];<br />
}</p>
<p>template<br />
T factorial(unsigned f) {<br />
	return factorial_helper(f, std::make_index_sequence&lt;factorial_max_helper(1, 1) + 1&gt;{});<br />
}</p>
<p>You use it like this</p>
<p>#include<br />
int main() {</p>
<p>	unsigned i = 1;<br />
	std::cout &lt;&gt; i;<br />
	volatile auto r = factorial(i);<br />
	std::cout &lt;&lt; r &lt;&lt; &quot;\n&quot;;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1219032">
				<div id="div-comment-1219032" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jrb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219032">
			December 15, 2015 at 8:28 am</a>		</div>

		<p>Sorry, formatting got messed up. You can see the code at <a href="https://gist.github.com/jbandela/7fab41efe7cc37d7aef4" rel="nofollow">https://gist.github.com/jbandela/7fab41efe7cc37d7aef4</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1219581">
				<div id="div-comment-1219581" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">FrankHB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219581">
			December 16, 2015 at 10:24 pm</a>		</div>

		<p>It would be better to have explicit overflow behavior by need of users, since many people are still not aware of this &#8230;</p>
<p><a href="https://groups.google.com/a/isocpp.org/forum/?fromgroups#!topic/std-proposals/oQUOtYX4R3o" rel="nofollow">https://groups.google.com/a/isocpp.org/forum/?fromgroups#!topic/std-proposals/oQUOtYX4R3o</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1219861">
				<div id="div-comment-1219861" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Patrick Star</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151214-00/?p=92621#comment-1219861">
			December 18, 2015 at 5:31 am</a>		</div>

		<p>If this code was part of a network service, or say, exposed to content in a web browser with some API, it would let an attacker read memory past the end of the array. Which, depending on what&#8217;s there, could very well be used to defeat ASLR.<br />
So, bad practice.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

