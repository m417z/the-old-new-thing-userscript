<html>
<head>
<title>When does an object become available for garbage collection?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When does an object become available for garbage collection?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 10, 2010 / year-entry #226</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">As we saw last time, garbage collection is a method for simulating an infinite amount of memory in a finite amount of memory. This simulation is performed by reclaiming memory once the environment can determine that the program wouldn't notice that the memory was reclaimed. There are a variety of mechanism for determining this. In...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
As we saw last time,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/08/09/10047586.aspx">
garbage collection is a method for
simulating an infinite amount of memory
in a finite amount of memory</a>.
This simulation is performed by reclaiming memory once the environment
can determine that the program wouldn't notice that the memory was
reclaimed.
There are a variety of mechanism for determining this.
In a basic tracing collector,
this determination is made by taking the objects which the
program has definite references to, then tracing references from those
objects, contining transitively until all accessible objects are found.
But what looks like a definite reference in your code may not actually
be a definite reference in the virtual machine:
Just because a variable is in scope doesn't mean that it is live.
</p>
<pre>
class SomeClass {
 ...
 string SomeMethod(string s, bool reformulate)
 {
  OtherClass o = new OtherClass(s);
  string result = Frob(o);
  if (reformulate) Reformulate();
  return result;
 }
}
</pre>
<p>
For the purpose of this discussion,
assume that the <code>Frob</code> method does not retain a reference
to the object&nbsp;<code>o</code> passed as a parameter.
When does the <code>OtherClass</code> object&nbsp;<code>o</code>
become eligible for collection?
A na&iuml;ve answer would be that it becomes eligible for collection
at the closing-brace of the <code>SomeMethod</code> method,
since that's when the last reference (in the variable <code>o</code>)
goes out of scope.
</p>
<p>
A less na&iuml;ve answer would be that it become eligible for collection
after the return value from <code>Frob</code> is stored to the local
variable <code>result</code>, because that's the last line of code which
uses the variable&nbsp;<code>o</code>.
</p>
<p>
A closer study would show that it becomes eligible for collection
even sooner:
Once the call to <code>Frob</code> returns,
the variable&nbsp;<code>o</code> is no longer accessed,
so the object could be collected even before the result of the call
to <code>Frob</code> is stored into the local variable <code>result</code>.
Optimizing compilers have known this for quite some time,
and there is a strong likelihood that the variables
<code>o</code>&nbsp;and&nbsp;<code>result</code>
will occupy the same memory since their lifetimes do not overlap.
Under such conditions,
the code generation for the statement could very well be something
like this:
</p>
<pre>
  mov ecx, esi        ; load "this" pointer into ecx register
  mov edx, [ebp-8]    ; load parameter ("o") into edx register
  call SomeClass.Frob ; call method
  mov [ebp-8], eax    ; re-use memory for "o" as "result"
</pre>
<p>
But this closer study wasn't close enough.
The <code>OtherClass</code> object&nbsp;<code>o</code>
becomes eligible for collection even before the call to <code>Frob</code>
returns!
It is certainly eligible for collection at the point of the <code>ret</code>
instruction which ends the <code>Frob</code> function:
At that point,
the <code>Frob</code> has finished using the object and won't access
it again.
Although somewhat of a technicality, it does illustrate that
</p>
<blockquote CLASS=m><p>
An object in a block of code
can become eligible for collection <i>during execution of a function
it called</i>.
</p>
</blockquote>
<p>
But let's dig deeper.
Suppose that <code>Frob</code> looked like this:
</p>
<pre>
string Frob(OtherClass o)
{
 string result = FrobColor(o.GetEffectiveColor());
}
</pre>
<p>
When does the <code>OtherClass</code> object become eligible for
collection?
We saw above that it is certainly eligible for collection as soon as
<code>FrobColor</code> returns, because the <code>Frob</code>
method doesn't use <code>o</code> any more after that point.
But in fact it is eligible for collection when the call
to <code>GetEffectiveColor</code> returns&mdash;even before the
<code>FrobColor</code> method is called&mdash;because the <code>Frob</code>
method doesn't use it once it gets the effective color.
This illustrates that
</p>
<blockquote CLASS=m><p>
A parameter to a method can become eligible for collection
<i>while the method is still executing</i>.
</p>
</blockquote>
<p>
But wait, is that the earliest the <code>OtherClass</code> object
becomes eligible for collection?
Suppose that the <code>OtherClass.GetEffectiveColor</code> method
went like this:
</p>
<pre>
Color GetEffectiveColor()
{
 Color color = this.Color;
 for (OtherClass o = this.Parent; o != null; o = o.Parent) {
  color = BlendColors(color, o.Color);
 }
 return color;
}
</pre>
<p>
Notice that the method doesn't access any members from its <code>this</code>
pointer after the assignment <code>o = this.Parent</code>.
As soon as the method retrieves the object's parent,
the object isn't used any more.
</p>
<pre>
  push ebp                    ; establish stack frame
  mov ebp, esp
  push esi
  push edi
  mov esi, ecx                ; enregister "this"
  mov edi, [ecx].color        ; color = this.Color // inlined
  jmp looptest
loop:
  mov ecx, edi                ; load first parameter ("color")
  mov edx, [esi].color        ; load second parameter ("o.Color")
  call OtherClass.BlendColors ; BlendColors(color, o.Color)
  mov edi, eax
looptest:
  mov esi, [esi].parent       ; o = this.Parent (or o.Parent) // inlined
  // "this" is now eligible for collection
  test esi, esi               ; if o == null
  jnz loop                    ; then rsetart loop
  mov eax, edi                ; return value
  pop edi
  pop esi
  pop ebp
  ret
</pre>
<p>
The last thing we ever do with the <code>Other&shy;Class</code>
object (presented in the <code>Get&shy;Effective&shy;Color</code>
function by the keyword <code>this</code>)
is fetch its parent.
As soon that's done
(indicated at the point of the comment, when the line is reached
for the first time),
the object becomes eligible for collection.
This illustrates the perhaps-surprising result that
</p>
<blockquote CLASS=m><p>
An object can become eligible for collection
<i>during execution of a method on that very object</i>.
</p>
</blockquote>
<p>
In other words, it is possible for a method to have its
<code>this</code> object collected out from under it!
</p>
<p>
A crazy way of thinking of when an object becomes eligible for
collection is that it happens once
memory corruption in the object
would have no effect on the program.
(Or, if the object has a finalizer, that memory corruption would
affect only the finalizer.)
Because if memory corruption would have no effect,
then that means you never use the values any more,
which means that the memory may as well have been
reclaimed out from under you for all you know.
</p>
<p>
A weird real-world analogy:
The garbage collector can collect your diving board as soon as the
diver touches it for the last time&mdash;even if the diver is still
in the air!
</p>
<p>
A customer encountered the
<code>Call&shy;GC&shy;Keep&shy;Alive&shy;When&shy;Using&shy;Native&shy;Resources</code>
FxCop rule
and didn't understand how it was possible for the GC to
collect an object while one of its methods was still running.
"Isn't <code>this</code> part of the root set?"
</p>
<p>
Asking whether any particular value is or is not part of the root
set is confusing the definition of garbage collection with its
implementation.
"Don't think of GC as tracing roots.
Think of GC as removing things you aren't using any more."
</p>
<p>
The customer responded,
"Yes, I understand conceptually that it becomes eligible for
collection, but how does the garbage collector know that?
How does it know that the <code>this</code> object is not used
any more?
Isn't that determined by tracing from the root set?"
</p>
<p>
Remember, the GC is in cahoots with the JIT.
The JIT might decide to "help out" the GC by
reusing the stack slot which previously held an object
reference,
leaving no reference on the stack and therefore no reference
in the root set.
Even if the reference is left on the stack, the JIT can leave
some metadata behind that tells the GC, "If you see the instruction
pointer in this range, then ignore the reference in this slot
since it's a dead variable,"
similar to how in unmanaged code on non-x86 platforms, metadata
is used to guide structured exception handling.
(And besides, the <code>this</code> parameter isn't even passed
on the stack in the first place.)
</p>
<p>
The customer replied, "Gotcha. Very cool."
</p>
<p>
Another customer asked,
"Is there a way to get a reference to the instance being called
for each frame in the stack? (Static methods excepted, of course.)"
A different customer asked roughly the same question, but in
a different context:
"I want my method to walk up the stack, and if its caller is
<code>OtherClass.Foo</code>, I want to get the <code>this</code>
object for <code>OtherClass.Foo</code> so I can query additional
properties from it."
You now know enough to answer these questions yourself.
</p>
<p>
Bonus:
A different customer asked,
"The <code>Stack&shy;Frame</code> object lets me get the method that
is executing in the stack frame,
but how do I get the parameters passed to that method?"</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-852373">
				<div id="div-comment-852373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852373">
			August 10, 2010 at 7:23 am</a>		</div>

		<p>Does that mean that if Frob were implemented as</p>
<p>string Frob(OtherClass o)</p>
<p>{</p>
<p>string result = &quot;thefrob&quot;;</p>
<p>}</p>
<p>and the compiler did some optimizations, the object o could be gone even before</p>
<p>new OtherClass(s); returned?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852383">
				<div id="div-comment-852383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.henke37.cjb.net/' rel='external nofollow' class='url'>Henke37</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852383">
			August 10, 2010 at 7:24 am</a>		</div>

		<p>The answer to the bonus question is &quot;Who said that the parameters where saved?&quot; Only keeping track of stuff that you care about and so on. Same as the command line arguments. And it&#39;s not unheard of that people change the values passed in during processing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852413">
				<div id="div-comment-852413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852413">
			August 10, 2010 at 7:32 am</a>		</div>

		<p>@rs</p>
<p>Depending on what the constructor does (and the runtime of course), it may never be created.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852513">
				<div id="div-comment-852513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">gibwar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852513">
			August 10, 2010 at 8:32 am</a>		</div>

		<p>Thanks for the explanation of the directives. I&#39;ve heard those before but never fully understood how they happened. Granted, I&#39;ve never had a case where I had to worry about that or walk up the stack for something (untrustworthy anyway as you&#39;ve previously pointed out) but the real icing on the cake was the examples in assembly. Once I saw the assembly examples it all made sense.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852543">
				<div id="div-comment-852543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Barry Kelly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852543">
			August 10, 2010 at 8:57 am</a>		</div>

		<p>It&#39;s great that the knowledge about this is spreading inside MS :) I wrote a post 4 years ago on this topic &#8211; <a rel="nofollow" target="_new" href="http://blog.barrkel.com/2006/07/not-so-lazy-garbage-collector.html" rel="nofollow">blog.barrkel.com/&#8230;/not-so-lazy-garbage-collector.html</a> &#8211; relating to an access violation bug that occurred with the Ping class in .NET on AMD processors because of this exact problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-nathan_works odd alt thread-odd thread-alt depth-1" id="comment-852583">
				<div id="div-comment-852583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/nathan_works' rel='external nofollow' class='url'>nathan_works</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852583">
			August 10, 2010 at 9:09 am</a>		</div>

		<p>If you need to walk the stack in your C# application, odds are you&#39;re doing something very, very, wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852673">
				<div id="div-comment-852673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tobi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852673">
			August 10, 2010 at 10:41 am</a>		</div>

		<p>Answer: It is not possible to always return the parameters as they may have been collected before the method started executing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852693">
				<div id="div-comment-852693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852693">
			August 10, 2010 at 10:44 am</a>		</div>

		<p>This garbage collection behavior has caught some people using timers &#8211; they&#39;d store a reference to a new timer instance in a local, do some work that relied on the timer, and expect the timer to live until the method returned (or even longer). &nbsp;The notes and example for the System.Timers.Timer class now explicitly discuss this problem: <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/system.timers.timer.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/system.timers.timer.aspx</a></p>
<p>However, some timers manage to keep themselves referenced or otherwise ineligible for collection when they&#39;re active (System.Windows.Form.Timer documents this as part of the Enabled property) &#8211; so there can be a bit of confusion about what you might need to do to make sure timers stick around (or get collected).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852723">
				<div id="div-comment-852723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852723">
			August 10, 2010 at 11:13 am</a>		</div>

		<p>@rs: yes, it&#39;s possible for an object to be collected while its constructor is still running.</p>
<p>That can make for a funny debugging session when the finalizer releases an unmanaged object that&#39;s still being initialized.</p>
<p>Remember kids: if you have unmanaged resources, always put them into their own class, and make that as simple as possible: use SafeHandle. The Microsoft-suggested way to mix managed and unmanaged resources in a single class (void Dispose(bool disposing)) is a sure way to introduce race conditions between your code and the finalizer thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-852783">
				<div id="div-comment-852783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Curt Nichols</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852783">
			August 10, 2010 at 2:24 pm</a>		</div>

		<p>There&#39;s an interesting variation on the subject of when an object is available for collection: if you&#39;ve compiled with /debug the JITter will, in essence, hold references through the end of the current method; this makes for easier debugging. If I recall correctly this behavior also holds if a method is first jitted while runder under a debugger. This is markedly different that the normal /release behavior. If you run off to write some sample code to see what Raymond has described in action just don&#39;t use debug code, you won&#39;t be successful.</p>
<p><a rel="nofollow" target="_new" href="http://www.codeneverwritten.com/2007/12/04/where-did-my-object-go-part-1/" rel="nofollow">http://www.codeneverwritten.com/&#8230;/where-did-my-object-go-part-1</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-852803">
				<div id="div-comment-852803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-852803">
			August 10, 2010 at 4:22 pm</a>		</div>

		<p>Ah, getting object and methods from stack.</p>
<p>I wrote code to do that in an unmanaged world once. It wasn&#39;t always right as the stack slots are just local variables and can be clobbered by the function.</p>
<p>It got really fun when I was compiled with frame pointers and assumed everybody in between was (they weren&#39;t).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853173">
				<div id="div-comment-853173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-853173">
			August 11, 2010 at 1:27 pm</a>		</div>

		<p>I seem to recall hearing that some JavaScript engine (probably any one that tries to optimize) had to run really slow in the event that it detected any part of the program using the stack-walking functionality.</p>
<p>Although if you&#39;re walking the stack in a C# application, I imagine that either you&#39;re implementing a debugger (in which case you&#39;d want all the parameter information and such) or coroutines (in which case you wouldn&#39;t).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853703">
				<div id="div-comment-853703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100810-00/?p=13193#comment-853703">
			August 13, 2010 at 9:29 am</a>		</div>

		<p>Seems to me this is due to dubious language specification. A reference declared in a given scope should live as long as the scope, even in the face of optimizations. The optimizations should only kick in if it can prove that there are other references to the object.</p>
<p>You cannot claim that it doesn&#39;t matter because the program cannot tell the difference. Obviously, it can when finalizers enter the picture.</p>
<p>Other messages in this thread have convinced me that the dubious feature of optimizing when a reference vanish is not worth the hassles and obscure bugs related to it. The worst part is that you cannot fix the bug simply by adding yet more references to the object, as the optimizer can be as powerful as it wishes in the face of a free-for-all language spec.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

