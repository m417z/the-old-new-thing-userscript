<html>
<head>
<title>Investigating an app compat problem: Part 1: The initial plunge</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Investigating an app compat problem: Part 1: The initial plunge</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 8, 2016 / year-entry #120</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160608-00/?p=93615</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Seeing the proximate cause.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<div id="appCompatPart1" STYLE="position: relative">
<p>
Today we're going to look at an application compatiblity problem.
Actually, today, we'll just look at the crash that is the reason why
we have an application compatibility problem.
We'll then spend the next few days trying to figure out what went wrong.
Today's installment will be rather long because I want to go through
the entire process of making the initial diagnosis,
so that we won't have to spend each day re-establishing context.
</p>
<p>
I also want to point out that even though this is presented
as a straightforward narrative, the actual analysis involved
a good number of dead ends and sitting around thinking,
"Great, what am I supposed to do now?"
</p>
<p>
We start with the actual crash.
</p>
<pre>
eax=00000001 ebx=31410000 ecx=<span id="r1ecx" STYLE="border: solid 1px black">00000000</span> edx=40000000 esi=001345a8 edi=1fee0a9c
eip=314259d3 esp=0013443c ebp=0013444c iopl=0         nv up ei pl nz na pe nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206
contoso!ContosoInitialize+0x4d73:
314259d3 mov     eax,dword ptr [<span id="r1r" STYLE="border: solid 1px black" data-to="r1ecx:L:N:S">ecx</span>+eax*4]            ds:0023:<span id="r1R" STYLE="border: solid 1px black" data-to="r1r:C:2SW:E">00000004</span>=????????
</pre>
<p>
(<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/11/15/10468136.aspx"
>Obviously, the symbols are wrong</a>.
Which makes sense because we don't have symbols for
<code>contoso.dll</code>.)
</p>
<p>
What we have here is an array index operation into an array,
but the array is a null pointer.
Let's see where that null pointer came from.
</p>
<pre>
contoso!ContosoInitialize+0x4d40:
314259a0 push    ebp
314259a1 mov     ebp, esp
314259a3 sub     esp, 10h
314259a6 mov     dword ptr <span id="L314259a6" STYLE="border: solid 1px black" data-to="R314259a6:L:E:W">[ebp-10h]</span>, <span id="R314259a6" STYLE="border: solid 1px black">ecx</span>
314259a9 mov     eax, dword ptr [ebp+8]
314259ac mov     dword ptr [ebp-8], eax
314259af lea     ecx, [ebp-0Ch]
314259b2 push    ecx
314259b3 lea     edx, [ebp-4]
314259b6 push    edx
314259b7 mov     eax, dword ptr [ebp-8]
314259ba push    eax
314259bb call    contoso!ContosoInitialize+0x4db0 (31425a10)
314259c0 add     esp, 0Ch
314259c3 mov     edx, 1
314259c8 mov     ecx, dword ptr [ebp-0Ch]
314259cb shl     edx, cl
314259cd mov     eax, dword ptr [ebp-4]
314259d0 mov     <span id="L314259d0" STYLE="border: solid 1px black" data-to="R314259d0:L:E:W">ecx</span>, dword ptr <span id="R314259d0" STYLE="border: solid 1px black" data-to="L314259a6:L:N:S">[ebp-10h]</span>
314259d3 mov     eax, dword ptr [<span STYLE="border: solid 1px black" data-to="L314259d0:C:4S:4S">ecx</span>+eax*4]
</pre>
<p>
Ah, it came from the <code>this</code> pointer.
the object itself has an array as its first member,
and we're trying to index into it,
but the <code>this</code> pointer is null,
so there is nothing to index into.
Where did that null pointer come from?
We'll have to go up the stack to see
what the caller is passing as <code>this</code>.
</p>
<p>
Here's the stack trace, or at least part of it.
</p>
<pre>
ChildEBP RetAddr
0013444c <span STYLE="border: solid 1px black">31426201</span> contoso!ContosoInitialize+0x4d73
<span id="L00134478" STYLE="border: solid 1px black">00134478</span> 31427401 contoso!ContosoInitialize+0x55a1
00134484 3142b030 contoso!ContosoInitialize+0x67a1
00134494 3142afdd contoso!ContosoInitialize+0xa3d0
001344c4 314279e0 contoso!ContosoInitialize+0xa37d
001344dc 31427e86 contoso!ContosoInitialize+0x6d80
001344f8 31427c2f contoso!ContosoInitialize+0x7226
00134504 31427bd3 contoso!ContosoInitialize+0x6fcf
00134530 314332b8 contoso!ContosoInitialize+0x6f73
00134554 31432278 contoso!ContosoInitialize+0x12658
00134578 3142dd7a contoso!ContosoInitialize+0x11618
001345a8 3142e326 contoso!ContosoInitialize+0xd11a
00134668 3142e4b5 contoso!ContosoInitialize+0xd6c6
0013468c 3142e5b6 contoso!ContosoInitialize+0xd855
001346b0 31424766 contoso!ContosoInitialize+0xd956
001346bc 31421c0d contoso!ContosoInitialize+0x3b06
001346e0 314c8cba contoso!ContosoInitialize+0xfad
00134790 314b5e08 contoso!ContosoInitialize+0xa805a
001347b0 77c60c6e contoso!ContosoInitialize+0x951a8
001347d0 77c12f17 ntdll!RtlAddAuditAccessAceEx+0x5e
00134820 77c09331 ntdll!RtlActivateActivationContextUnsafeFast+0xd7
001348a0 77c091b4 ntdll!RtlLoadString+0x3c1
001348c4 77c07d68 ntdll!RtlLoadString+0x244
001348e0 77c0bd21 ntdll!LdrGetDllHandleByMapping+0xe8
00134928 77c0b941 ntdll!RtlAcquirePebLock+0x391
00134a74 77c0b615 ntdll!LdrLoadDll+0x3a1
00134af8 751a7f94 ntdll!LdrLoadDll+0x75
00134b3c 751aad06 KERNELBASE!LoadLibraryExW+0x124
00134b64 018aa533 KERNELBASE!LoadLibraryExA+0x26
00134c18 018aa410 setup+0x3a533
</pre>
<p>
At this point, you might choose to shudder in horror,
because you can see that this DLL is running a ton of
code during <code>DLL_<wbr>PROCESS_<wbr>ATTACH</code>
</p>
<p>
Once you overcome your initial shock, you can pick off the caller
(highlighted in the stack trace as the return address)
and take a look at the enclosing function.
</p>
<pre>
contoso!ContosoInitialize+0x5570:
314261d0 push    ebp
314261d1 mov     ebp, esp
314261d3 push    0FFFFFFFFh
314261d5 push    offset contoso!ContosoInitialize+0xa5798 (314c63f8)
314261da mov     eax, dword ptr fs:[00000000h]
314261e0 push    eax
314261e1 mov     dword ptr fs:[0], esp
314261e8 sub     esp, 14h
314261eb mov     dword ptr <span id="L314261eb" STYLE="border: solid 1px black" data-to="R314261eb:L:E:W">[ebp-20h]</span>, <span id="R314261eb" STYLE="border: solid 1px black">ecx</span> // "this"
314261ee mov     eax, dword ptr [ebp+8]
314261f1 push    eax
314261f2 mov     ecx, dword ptr <span STYLE="border: solid 1px black" data-to="L314261eb:L:N:S">[ebp-<span id="R314261f2" STYLE="border: solid 1px black">20h</span>]</span> // "this"
314261f5 <span id="L314261f5" STYLE="border: solid 1px black">call</span>    contoso!ContosoInitialize+0x5620 (31426280)
314261fa mov     <span id="L314261fa" STYLE="border: solid 1px black" data-to="R314261fa:L:E:W">ecx</span> <span id="R314261fa" STYLE="border: solid 1px black" data-to="L314261f5:C:N:E">eax</span>
314261fc <span STYLE="border: solid 1px black" data-to="L314261fa:C:N:W">call</span>    contoso!ContosoInitialize+0x4d40 (314259a0)
</pre>
<p>
The null pointer came from the call to mystery member function <code>31426280</code>.
Let's see how that function calculated its return value.
Since the function is long and contains branches,
we'll follow the code forward.
This is not guaranteed to be accurate, because the contents of memory
at the time of the crash may not match the contents of memory at the time
the code was executed, but we'll take that chance for now.
(Remember, debugging is an exercise in optimism.)
</p>
<pre>
contoso!ContosoInitialize+0x5620:
31426280 push    ebp
31426281 mov     ebp, esp
31426283 push    0FFFFFFFFh
31426285 push    offset contoso!ContosoInitialize+0xa57c3 (314c6423)
3142628a mov     eax, dword ptr fs:[00000000h]
31426290 push    eax
31426291 mov     dword ptr fs:[0], esp
31426298 sub     esp, 24h
3142629b mov     dword ptr [ebp-2Ch], ecx // "this"
3142629e mov     eax, dword ptr [ebp-2Ch] // "this"
314262a1 mov     ecx, dword ptr [eax+<span id="L314262a1" STYLE="border: solid 1px black">400h</span>] // read member at offset 0x400
314262a7 cmp     ecx, dword ptr [contoso!ContosoInitialize+0xe5d3c (<span id="R1cf462a7" STYLE="border: solid 1px black">3150699c</span>)]
314262ad jne     contoso!ContosoInitialize+0x56c0 (31426320)
</pre>
<p>
Was this jump taken? Let's find out.
First, extract the <code>this</code> pointer passed to the mystery member
function 31426280, then look at the member at offset <code>0x400</code>,
then compare it to the value at <code>3150699c</code>.
</p>
<pre>
0:000&gt; dd <span STYLE="border: solid 1px black" data-to="L00134478:L:N:S">00134478</span>-<span STYLE="border: solid 1px black" data-to="R314261f2:L:N:S">20</span> L1
00134458 1fee50f8
0:000&gt; dd 1fee50f8+<span STYLE="border: solid 1px black" data-to="L314262a1:L:N:S">400</span> L1
1fee54f8  00000041
0:000&gt; dd <span STYLE="border: solid 1px black" data-to="R1cf462a7:L:E:SW">3150699c</span> L1
3150699c  00000000
</pre>
<p>
        The values do not match, so let's assume the jump was taken.
</p>
<pre>
31426320 mov     dword ptr [ebp-10h], 0
31426327 lea     eax, [ebp-10h]             // bonus parameter
3142632a push    eax
3142632b mov     ecx, dword ptr [ebp-2Ch]   // "this"
3142632e mov     edx, dword ptr [ecx+400h]  // the value is 0x41
31426334 push    edx
31426335 call    contoso!ContosoInitialize+0x50b0 (31425d10)
</pre>
<p>
Let's follow the money into mystery
<a HREF="http://stackoverflow.com/questions/4861914/what-is-the-meaning-of-the-term-free-function-in-c">
free function</a>
<code>31425d10</code>.
</p>
<pre>
contoso!ContosoInitialize+0x50b0:
31425d10 push    ebp
31425d11 mov     ebp, esp
31425d13 push    0FFFFFFFFh
31425d15 push    offset contoso!ContosoInitialize+0xa5738 (314c6398)
31425d1a mov     eax, dword ptr fs:[00000000h]
31425d20 push    eax
31425d21 mov     dword ptr fs:[0], esp
31425d28 sub     esp, 10h
31425d2b call    contoso!ContosoInitialize+0x952f3 (314b5f53)
31425d30 push    eax
31425d31 lea     ecx, [ebp-14h]
31425d34 call    contoso!ContosoInitialize+0xfe0 (31421c40)
31425d39 mov     dword ptr [ebp-4], 0
31425d40 mov     eax, dword ptr [ebp+8]
31425d43 push    eax
31425d44 call    dword ptr [contoso!ContosoInitialize+0xa8590 (314c91f0)] // TlsGetValue -> goes into the variable
31425d4a mov     ecx, dword ptr [ebp+0Ch]
31425d4d mov     dword ptr [ecx], eax
31425d4f mov     edx, dword ptr [ebp+0Ch]
31425d52 cmp     dword ptr [edx], 0
31425d55 jne     contoso!ContosoInitialize+0x5125 (31425d85)
31425d57 call    dword ptr [contoso!ContosoInitialize+0xa840c (314c906c)] // GetLastError
31425d5d push    eax
31425d5e lea     ecx, [ebp-14h]
31425d61 call    contoso!ContosoInitialize+0x5150 (31425db0)
31425d66 test    eax, eax
31425d68 je      contoso!ContosoInitialize+0x5125 (31425d85)
31425d6a mov     dword ptr <span id="L31425d6a" STYLE="border: solid 1px black" data-to="R31425d6a:L:E:W">[ebp-18h]</span>, <span id="R31425d6a" STYLE="border: solid 1px black">0FFFFFFFFh</span>
31425d71 mov     dword ptr [ebp-4], 0FFFFFFFFh
31425d78 lea     ecx, [ebp-14h]
31425d7b call    contoso!ContosoInitialize+0xff0 (31421c50)
31425d80 mov     <span id="L31425d80" STYLE="border: solid 1px black" data-to="R31425d80:L:E:W">eax</span>, dword ptr <span id="R31425d80" STYLE="border: solid 1px black" data-to="L31425d6a:L:N:S">[ebp-18h]</span>
31425d83 jmp     contoso!ContosoInitialize+0x513e (31425d9e)
31425d85 mov     dword ptr <span id="L31425d85" STYLE="border: solid 1px black" data-to="R31425d85:L:E:W">[ebp-1Ch]</span>, <span id="R31425d85" STYLE="border: solid 1px black">0</span>
31425d8c mov     dword ptr [ebp-4], 0FFFFFFFFh
31425d93 lea     ecx, [ebp-14h]
31425d96 call    contoso!ContosoInitialize+0xff0 (31421c50)
31425d9b mov     <span id="L31425d9b" STYLE="border: solid 1px black" data-to="R31425d9b:L:E:W">eax</span>, dword ptr <span id="R31425d9b" STYLE="border: solid 1px black" data-to="L31425d85:L:N:S">[ebp-1Ch]</span>
31425d9e mov     ecx, dword ptr [ebp-0Ch]
31425da1 mov     dword ptr fs:[0], ecx
31425da8 mov     esp, ebp
31425daa pop     ebp
31425dab <span STYLE="border: solid 1px black" data-to="L31425d9b:L:N:S L31425d80:L:N:S">ret</span>
</pre>
<p>
There are two exit paths for this function; one returns <code>-1</code> and the other
returns <code>0</code>. Let's see if we can figure out which path got executed.
The execution is straight-line until we reach this decision:
</p>
<pre>
31425d39 mov     dword ptr [ebp-4], 0
31425d40 mov     eax, dword ptr [ebp+8]     // Parameter 0 = 0x00000041
31425d43 push    eax
31425d44 call    dword ptr [contoso!ContosoInitialize+0xa8590 (314c91f0)] // TlsGetValue
31425d4a mov     ecx, dword ptr [ebp+0Ch]   // Parameter 1 (the bonus parameter)
31425d4d mov     dword ptr [ecx], eax       // Save the TLS value into parameter 1
31425d4f mov     edx, dword ptr [ebp+0Ch]   // Parameter 1
31425d52 cmp     dword ptr [edx], 0         // Was the TLS value zero?
31425d55 jne     contoso!ContosoInitialize+0x5125 (31425d85)
</pre>
<p>
I was able to figure out that the called function was
<code>TlsGetValue</code> by looking at the value in the dump file.
    </p>
<pre>
0:000&gt; ln poi 314c91f0
kernel32!TlsGetValue:
7603a1f0 mov     edi,edi
</pre>
<p>
The branch is taken if the value in the TLS slot is nonzero.
So is it?
Let's manually re-execute the call to
<code>TlsGetValue</code>.
</p>
<pre>
KERNELBASE!TlsGetValue:
751b6ed0 mov     edi, edi
751b6ed2 push    ebp
751b6ed3 mov     ebp, esp
751b6ed5 mov     ecx, dword ptr fs:[18h] // get the TEB
751b6edc mov     eax, dword ptr [ebp+8] // tlsIndex (0x00000041)
751b6edf mov     dword ptr [ecx+34h], 0 // SetLastError(NOERROR);
751b6ee6 cmp     eax, 40h
751b6ee9 jae     KERNELBASE!TlsGetValue+0x26 (751b6ef6) // Jump taken
...
751b6ef6 cmp     eax,440h
751b6efb jae     KERNELBASE!TlsGetValue+0x42 (751b6f12) // Jump not taken
751b6efd mov     ecx,dword ptr [ecx+0F94h]
751b6f03 test    ecx,ecx
751b6f05 je      KERNELBASE!TlsGetValue+0x4c (751b6f1c)

0:000&gt; dd @$teb+f94 L1
7ffdff94  <span id="R7ffdff94" STYLE="border: solid 1px black">05f5bf30</span>
</pre>
<p>
The value is nonzero, so the jump is not taken.
</p>
<pre>
751b6f07 mov     eax,dword ptr [ecx+eax*4-100h]
751b6f0e pop     ebp
751b6f0f ret     4
0:000&gt; dd <span STYLE="border: solid 1px black" data-to="R7ffdff94:L:N:S">05f5bf30</span>+41*4-100 L1
05f5bf34  00000000
</pre>
<p>
The TLS value is zero.
</p>
<p>
Okay, let's go back to the function that called
<code>TlsGetValue</code> and see what it does when the TLS value is zero.
</p>
<pre>
31425d52 cmp     dword ptr [edx], 0         // Was the TLS value zero?
31425d55 jne     contoso!ContosoInitialize+0x5125 (31425d85) // Jump not taken
31425d57 call    dword ptr [contoso!ContosoInitialize+0xa840c (314c906c)] // GetLastError
31425d5d push    eax                        // NOERROR
31425d5e lea     ecx,[ebp-14h]
31425d61 call    contoso!ContosoInitialize+0x5150 (31425db0)
31425d66 test    eax,eax
31425d68 je      contoso!ContosoInitialize+0x5125 (31425d85)
</pre>
<p>
We don't pay attention to <code>Get&shy;Last&shy;Error</code>
because it doesn't
affect flow control. The thing that does affect flow control is
function <code>31425db0</code>, so let's see what it does.
</p>
<pre>
contoso!ContosoInitialize+0x5150:
31425db0 push    ebp
31425db1 mov     ebp,esp
31425db3 push    ecx
31425db4 mov     dword ptr [ebp-4],ecx
31425db7 mov     eax,dword ptr [ebp-4]
31425dba mov     ecx,dword ptr [ebp+8]
31425dbd mov     dword ptr [eax+4],ecx
31425dc0 mov     <span id="L31425dc0" STYLE="border: solid 1px black" data-to="R31425dc0:L:E:W">eax</span>, dword ptr <span id="R31425dc0" STYLE="border: solid 1px black">[ebp+8]</span>
31425dc3 mov     esp, ebp
31425dc5 pop     ebp
31425dc6 <span STYLE="border: solid 1px black" data-to="L31425dc0:L:N:S">ret     4</span>
</pre>
<p>
The function returns its input parameter.
(It does other stuff, but we aren't interested in that part yet.)
Therefore, since we passed <code>NOERROR</code> as the error code,
it also returns <code>NOERROR</code>, which is zero.
We also saw that the TLS value zero is stored into the bonus parameter,
which was <code>[ebp-10h]</code>.
Armed with this information, we can continue our analysis back to the caller:
</p>
<pre>
31425d66 test    eax,eax
31425d68 je      contoso!ContosoInitialize+0x5125 (31425d85) // jump taken
</pre>
<p>
And we saw from the analysis earlier that once you hit the code path
at <code>31425d85</code>, the function will return zero.
</p>
<p>
Now we can unwind back to the caller and see what happens when
function <code>31425d10</code> returns zero.
</p>
<pre>
31426335 call    contoso!ContosoInitialize+0x50b0 (31425d10) // Returns zero
3142633a add     esp, 8
3142633d cmp     eax, 0FFFFFFFFh
31426340 jne     contoso!ContosoInitialize+0x56e9 (31426349) // jump not taken
31426342 xor     eax, eax                           // return zero
31426344 jmp     contoso!ContosoInitialize+0x5783 (314263e3)

314263e3 mov     ecx, dword ptr [ebp-0Ch]
314263e6 mov     dword ptr fs:[0], ecx
314263ed mov     esp, ebp
314263ef pop     ebp
314263f0 ret
</pre>
<p>
Okay, so now we know where the null pointer came from:
The null pointer was stored in the TLS slot,
and this function returns whatever is in the TLS slot.
</p>
<p>
That is a superficial analysis of why the program crashed.
It doesn't really tell us what happened in the operating system
that induced the crash; we'll have to dig in deeper.
</p>
<p>
The story continues next time.
</p>
<p><canvas STYLE="position: absolute; top: 0px; pointer-events: none"></canvas>
</div>
<script>
(function () {
    var arrowAngle = Math.PI / 12;
    var arrowLength = 10;

    function vec2(x, y) {
        this.x = x;
        this.y = y;
    }

    vec2.prototype.add = function (v) {
        return new vec2(this.x + v.x, this.y + v.y);
    };

    vec2.prototype.sub = function (v) {
        return new vec2(this.x - v.x, this.y - v.y);
    }

    vec2.prototype.magnitude = function () {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    };

    vec2.prototype.scale = function (scale) {
        return new vec2(this.x * scale, this.y * scale);
    };

    vec2.prototype.rotate = function (theta) {
        var sth = Math.sin(theta);
        var cth = Math.cos(theta);
        return new vec2(this.x * cth - this.y * sth, this.x * sth + this.y * cth);
    };

    function directionVector(v0, v1, l) {
        var d = v1.sub(v0);
        return d.scale((l || 1) / (d.magnitude() || 1));
    }

    function drawArrowHead(ctx, v0, v1) {
        var u = directionVector(v1, v0, arrowLength);
        ctx.beginPath();
        ctx.moveTo(v1.x, v1.y);
        var v = v1.add(u.rotate(arrowAngle));
        ctx.lineTo(v.x, v.y);
        v = v1.add(u.rotate(-arrowAngle));
        ctx.lineTo(v.x, v.y);
        ctx.lineTo(ctx, v1.x, v1.y);
        ctx.fill();
    }

    function getAttachment(ctx, element, attach) {
        var v = new vec2(element.offsetLeft - ctx.canvas.offsetLeft, element.offsetTop - ctx.canvas.offsetTop);
        var mag = parseInt(attach) * 10;
        if (isNaN(mag)) mag = 10;
        var dv = new vec2(-mag, -mag);
        if (attach.indexOf("S") >= 0) {
            v.y += element.offsetHeight;
            dv.y = mag;
        } else if (attach.indexOf("N") < 0) {
            v.y += element.offsetHeight / 2;
            dv.y = 0;
        }
        if (attach.indexOf("E") >= 0) {
            v.x += element.offsetWidth;
            dv.x = mag;
        } else if (attach.indexOf("W") < 0) {
            v.x += element.offsetWidth / 2;
            dv.x = 0;
        }
        return [v, v.add(dv)];
    }

    function onresize() {
        var thisPost = document.getElementById("appCompatPart1");
        var canvas = thisPost.getElementsByTagName("canvas")[0];
        if (!canvas.getContext) return;
        canvas.width = thisPost.offsetWidth;
        canvas.height = thisPost.offsetHeight;
        var ctx = canvas.getContext("2d");
        ctx.fillStyle = "#404040";
        Array.prototype.forEach.call(thisPost.querySelectorAll("[data-to]"), function (source) {
            var ids = source.getAttribute("data-to");
            ids.split(" ").forEach(function (id) {
                var opt = id.split(":"); // target:connector:attachStart:attachEnd
                var target = thisPost.querySelector("#" + opt[0]);
                var vStart = getAttachment(ctx, source, opt[2]);
                var vEnd = getAttachment(ctx, target, opt[3]);

                var v0 = vStart[0];
                var v1 = vStart[1];
                var v2 = vEnd[1];
                var v3 = vEnd[0];

                ctx.beginPath();
                ctx.moveTo(v0.x, v0.y);
                switch (opt[1]) {
                    case "L":
                        ctx.lineTo(v3.x, v3.y);
                        v2 = v0;
                        break;
                    case "C":
                        ctx.bezierCurveTo(v1.x, v1.y, v2.x, v2.y, v3.x, v3.y);
                        break;
                }
                ctx.stroke();
                drawArrowHead(ctx, v2, v3);
            });
        });
    }

    if (window.addEventListener) {
        window.addEventListener("resize", onresize);
        onresize();
    }
})();
</script>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1251845">
				<div id="div-comment-1251845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160608-00/?p=93615#comment-1251845">
			June 8, 2016 at 8:19 am</a>		</div>

		<p>Fhtagn, Raymond, what’s up with your blog‽ It’s covered in canvas!</p>
<p>Good news: the arrows drawn on the canvas align with the text correctly. Which is no small feat.</p>
<p>Bad news: the canvas is opaque with respect to clicking (incl. clicking on the hyperlinks) and text selection (incl. [selection reading][1]). And it blocks the horizontal scroll bar on the widest listing (the one about TlsGetValue -&gt; g… the rest did not fit my half-screen window).</p>
<p>[1]: <a href="https://blogs.msdn.microsoft.com/oldnewthing/20150528-00/?p=45014" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20150528-00/?p=45014</a></p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1251866">
				<div id="div-comment-1251866" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160608-00/?p=93615#comment-1251866">
			June 8, 2016 at 8:28 am</a>		</div>

		<p>It worked fine in staging, but when published, the canvas vanished! I hacked it by raising the canvas, but yeah, it messes with clicks. I&#8217;ll see what I can do, but I don&#8217;t have time right now. Probably some bad interaction with the site&#8217;s style sheet.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-dwalker-wk even depth-3 parent" id="comment-1251895">
				<div id="div-comment-1251895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160608-00/?p=93615#comment-1251895">
			June 8, 2016 at 9:38 am</a>		</div>

		<p>Raymond, you used to say &#8220;I don&#8217;t control the blog software&#8221;.  Now you have been sucked into maintaining something approximating the blog software.  :-)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1251936">
				<div id="div-comment-1251936" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160608-00/?p=93615#comment-1251936">
			June 8, 2016 at 12:31 pm</a>		</div>

		<p>Nope; he&#8217;s just maintaining his own HTML.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-chd1 even depth-3 parent" id="comment-1251915">
				<div id="div-comment-1251915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ChDF+T' rel='external nofollow' class='url'>ChDF T</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160608-00/?p=93615#comment-1251915">
			June 8, 2016 at 10:25 am</a>		</div>

		<p>You could use the css rule pointer-events: none;. According to <a href="http://caniuse.com/#search=pointer-events" rel="nofollow">http://caniuse.com/#search=pointer-events</a> this should work in all major desktop browsers.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4" id="comment-1251925">
				<div id="div-comment-1251925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160608-00/?p=93615#comment-1251925">
			June 8, 2016 at 10:42 am</a>		</div>

		<p>Yay! Thanks for the tip.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1251865">
				<div id="div-comment-1251865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan McDougall</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160608-00/?p=93615#comment-1251865">
			June 8, 2016 at 8:27 am</a>		</div>

		<p>That canvas overlay is broken for font sizes that are not 100% by the way, and kills text selection.</p>
<p>Apart from that, very interesting read. I&#8217;m looking forward to next episode.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk odd alt thread-even depth-1" id="comment-1251885">
				<div id="div-comment-1251885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160608-00/?p=93615#comment-1251885">
			June 8, 2016 at 9:37 am</a>		</div>

		<p>Small nit:  The crash isn&#8217;t the reason we have an appcompat problem; the crash is the notification that we have the problem!  The appcompat problem is the cause of the crash.</p>
<p>But, still, very interesting post.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-d_yerrick even thread-odd thread-alt depth-1 parent" id="comment-1251935">
				<div id="div-comment-1251935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Damian+Yerrick' rel='external nofollow' class='url'>Damian Yerrick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160608-00/?p=93615#comment-1251935">
			June 8, 2016 at 12:14 pm</a>		</div>

		<p>I&#8217;m curious: How does one obtain the rights to do something like this? I thought the standard Microsoft EULA banned reverse engineering.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1251945">
				<div id="div-comment-1251945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Iverson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160608-00/?p=93615#comment-1251945">
			June 8, 2016 at 1:14 pm</a>		</div>

		<p>One, I suppose it depends on how far you take the definition of &#8220;reverse engineering&#8221;.  I would consider creating source code from binary code to be reverse engineering, but not debugging executable code.</p>
<p>Two, he mentions dump files a couple times.  I&#8217;m guessing this is a crash dump from one of the &#8220;send crash info to Microsoft&#8221; notifications that you can enroll your programs into.  I don&#8217;t know the agreement for enrollment like that, but I would imagine something in it states Microsoft can examine your crash dumps to improve Windows compatibility.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1251955">
				<div id="div-comment-1251955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160608-00/?p=93615#comment-1251955">
			June 8, 2016 at 1:34 pm</a>		</div>

		<p>One, I wonder[0] what Microsoft&#8217;s own position is on other people debugging their executable code with respect to the anti-reverse-engineering provisions in their EULAs. </p>
<p>Two, the person sending the crash dump is likely *not* the author of the program, but a user of it, and therefore won&#8217;t have the right to authorise Microsoft to reverse-engineer a 3rd-party program.</p>
<p>[0] &#8217;tis but an idle wonder &#8211; am not trying to put OGH on the spot.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1251965">
				<div id="div-comment-1251965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160608-00/?p=93615#comment-1251965">
			June 8, 2016 at 2:41 pm</a>		</div>

		<p>Lots of folks in the Microsoft support organization (and in other Microsoft groups) do post-mortem crash-dump debugging.  For the most part, it is done on customer code, using the standard support agreements.  Crash-dump debugging is a well known art at Microsoft, and everything is above board legally (as far as I know &#8211; the closest to lawyering I ever get is watching one on TV).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-4" id="comment-1252745">
				<div id="div-comment-1252745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Iverson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160608-00/?p=93615#comment-1252745">
			June 15, 2016 at 6:35 am</a>		</div>

		<p>&#8220;Two, the person sending the crash dump is likely *not* the author of the program, but a user of it, and therefore won’t have the right to authorise Microsoft to reverse-engineer a 3rd-party program.&#8221;</p>
<p>Except the &#8220;send crash data to Microsoft&#8221; option only appears if the software vendor has enrolled in Microsoft&#8217;s crash labs(can&#8217;t remember what the actual service is called) and already granted permission to MS to gather the data.</p>
<p>At least, I&#8217;m fairly certain that&#8217;s the case&#8230;that&#8217;s why it doesn&#8217;t appear on all applications when they crash.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1252025">
				<div id="div-comment-1252025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160608-00/?p=93615#comment-1252025">
			June 9, 2016 at 8:32 am</a>		</div>

		<p>Debugging and reverse-engineering are only tangentially related. You might need a debugger to do reverse-engineering, but they have nothing to do with each other beyond that.</p>
<p>If &#8220;debugging&#8221; was &#8220;reverse-engineering,&#8221; then editing configuration files by hand would be as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even depth-2" id="comment-1252165">
				<div id="div-comment-1252165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160608-00/?p=93615#comment-1252165">
			June 11, 2016 at 9:49 pm</a>		</div>

		<p>Yea, it should be removed. Fun quote from Volume Licensing Product Terms:<br />
&#8220;Licensed User may reverse engineer, decompile or disassemble the Advanced Threat Analytics software, or otherwise attempt to derive the source code for the Advanced Threat Analytics Server software solely to the extent required to debug changes to any libraries licensed under the GNU Lesser General Public License that may be included with and linked to by the software.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1252175">
				<div id="div-comment-1252175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160608-00/?p=93615#comment-1252175">
			June 12, 2016 at 10:52 pm</a>		</div>

		<p>I would greatly appreciate it if you didn&#8217;t bring up legal issues in the comments. I don&#8217;t want my blog shut down. (Do you post questions like this whenever Mark Russinovich debugs a program?)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

