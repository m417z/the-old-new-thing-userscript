<html>
<head>
<title>Why not use weak linking to solve the retargetable library problem?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why not use weak linking to solve the retargetable library problem?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 17, 2016 / year-entry #59</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>33</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A discussion.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>In response to the
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/09/04/10639576.aspx">
problem of creating a retargetable library</a>,
there was disbelief that
<a HREF="https://twitter.com/rosyna/status/640237331476189184">
the Windows linker doesn't support weak symbols</a>.
(I'm assuming they meant "loader", not "linker".)
</p>
<p>
Back in the days of 16-bit Windows, the loader used weak linking.
If you imported a function and it didn't exist,
you got a null pointer.
You were then on the hook not to call the function unless you first
checked that it was there.
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/09/16/54938.aspx">
And it was a disaster</a>.
Programs crashed left and right because they didn't check
whether the function actually existed before calling it.
The designers of Win32 decided that if you wanted weak linking,
you had to do it explicitly via
<code>Load&shy;Library</code> and
<code>Get&shy;Proc&shy;Address</code>.
</p>
<p>
Okay, but now we've come full circle,
because
<code>Load&shy;Library</code> and
<code>Get&shy;Proc&shy;Address</code>
of system DLLs is not permitted in universal Windows apps.
Why not let universal Windows apps link to nonexistent functions,
and put the burden on them to check the pointer before calling it?
</p>
<p>
Well, first of all, that's sort of taking a step backward.
"Hey, here's a new programming platform.
It's harder to use than the old one."
</p>
<p>
Second, how would you enforce this policy?
The
<a HREF="https://dev.windows.com/en-us/develop/app-certification-kit">
Windows App Certification Kit</a>
acceptance test would see that
there is an attempt to import the
<code>Initialize&shy;Critical&shy;Section</code>
function.
Now it needs to reverse-engineer the code
to verify that the program never calls
<code>Initialize&shy;Critical&shy;Section</code>.
This eventually turns into the Halting Program,
which is unsolvable.
</p>
<p>
Furthermore, the issue isn't that the
<code>Initialize&shy;Critical&shy;Section</code>
function doesn't exist.
The function exists just fine.
It's just that universal Windows apps in the Windows Store
are not allowed to call it.
This means that you have to come up with a way for the
operating system to decide at run time
whether the import table entry for
<code>Initialize&shy;Critical&shy;Section</code>
should be null or not.
This means that the loader must now be aware of
Windows Store policies,
and whenever the Windows Store
<a HREF="https://msdn.microsoft.com/en-us/library/windows/apps/dn764944.aspx">
changes its policy</a>,
a system update needs to be delivered in order to implement
that policy.
</p>
<p>
And even if you somehow got the loader to enforce Windows
Store policies,
you have to tell the loader,
"Oh wait, this program didn't get installed via the Windows Store."
If a program gets installed by means other than the Windows Store,
then Windows Store policies don't apply.
The loader would have to check somehow whether Windows Store
policies are in effect for the app.
</p>
<p>
Therefore, the answer to the original question is twofold.
First of all, no, we don't have weak symbols, on purpose;
if you want weak symbols, you can do it yourself with
<code>Load&shy;Library</code> and
<code>Get&shy;Proc&shy;Address</code>.
Second, weak symbols don't actually solve the problem,
because it leads to making low-level components enforce
a high-level policy.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (33)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1230631">
				<div id="div-comment-1230631" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230631">
			March 17, 2016 at 7:21 am</a>		</div>

		<p>&gt; (I’m assuming they meant “loader”, not “linker”.)</p>
<p>They probably meant &#8220;dynamic linker&#8221;. As in, the thing in Unix which links the dynamic libraries into your process when it&#8217;s executed (or when you call dlsym()).</p>
<p>Yes, this is probably yet another case of a developer coming from the Unix world. In this case, the Unix-based MacOS world, as shown by the next tweet in that link.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1230651">
				<div id="div-comment-1230651" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230651">
			March 17, 2016 at 8:16 am</a>		</div>

		<p>I at least really did mean linker. My interpretation was the windows phone environment was running a stripped-down version of the windows OS libraries where the function didn&#8217;t exist.</p>
<p>So it is a policy problem, not a technical one. Well in that case, the answer should have been mass outcry that the policy is not wanted. And in fact that&#8217;s what happened. Windows RT died, and the reason it died was lack of apps, and the lack of apps was due to the important ones not being ported. I could elaborate but there&#8217;s no point. fin.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1230721">
				<div id="div-comment-1230721" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://paradisefacade.com' rel='external nofollow' class='url'>Rosyna</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230721">
			March 17, 2016 at 6:50 pm</a>		</div>

		<p>Yes, I did indeed mean linker in the sense of &#8220;dynamic linked&#8221; as dyld is responsible for dynamically linking binaries and hooking up symbols at runtime, if needed.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1230634">
				<div id="div-comment-1230634" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230634">
			March 17, 2016 at 7:41 am</a>		</div>

		<p>Games want to save different gamers high-score and progress in different file. Obviously, NTFS cannot support having multiple files, that would be a low-level component enforcing a high-level requirement!</p>
<p>It only is because of how the issue is framed. Having a manifest in an executable that specify which loader restriction it wish to conform to makes the design all low-level. That some of these &#8216;loader-set&#8217; be designed and supplied by the Windows Store doesn&#8217;t make a difference. Making it generic allows different behaviour to be designed (a set for drivers, a set for shell component, a set for untrusted app, a set for browser plugins&#8230;)</p>
<p>Furthermore, you can easily design them to be revocable, with the revocation containing localisable user-level explanation and remediation steps. For the Windows Store, something like: &#8220;This application is obsolete. You will need to install a more recent version, if available, from the Windows Store.&#8221;</p>
<p>(Also, the Win16 fiasco, as I understand it, was due to the fact that the loader provided a NULL pointer for any and every function it failed to find. Any function pointer could suddenly be NULL. By having a known set of functions be weak-loaded and have the set be defined, enforced and aggred upon using manifests, makes the application squarely responsible. Furthermore, the Windows Store cannot possibly be accountable for every possible bugs a app can have?)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1230681">
				<div id="div-comment-1230681" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230681">
			March 17, 2016 at 9:28 am</a>		</div>

		<p>Suppose the Store policy changes. Now a new policy file needs to be deployed to the device before any apps that take advantage of the new policy can be acquired from the Store. But Phone updates are notoriously slow. &#8220;Yes, Flappy Candy Mafia Farm with Friends is now available for Windows Phone, but you have to wait until the next update in order to get the new policy file that lets it run. There&#8217;s nothing technically preventing it from running on the phone you currently have. Just needs an updated policy file.&#8221; Hooray for non-agility.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1230692">
				<div id="div-comment-1230692" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://harryjohnston.wordpress.com' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230692">
			March 17, 2016 at 2:50 pm</a>		</div>

		<p>I think you *could* in principle solve that by having the Store sign the executables (if it doesn&#8217;t do so already) and include relevant policy information, i.e., &#8220;this application references InitializeCriticalSection but is not permitted to use it&#8221;.  Or the Windows Store could ship the policy update itself rather than waiting on the usual update process.</p>
<p>But that sounds to me like a lot more trouble than it would be worth, at least for this use case.</p>
<p>(Now if the application could actually run inside a real sandbox, one with a robust runtime security boundary, that might be a different story.  But I assume it was just too complicated to retrofit such a boundary into Windows.)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1230693">
				<div id="div-comment-1230693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230693">
			March 17, 2016 at 3:16 pm</a>		</div>

		<p>Store apps do run at low IL, so there is an actual security boundary around the process. The issue is with in-process APIs like InitializeCriticalSection. There is no security boundary being crossed here, but the function is blocked from Store apps for policy reasons. (In this case, because we want to deprecate the old API in favor of the new one. Other reasons could be &#8220;Because this API can hang the UI if used incorrectly&#8221; or &#8220;Because this API is not available on Phone or Xbox&#8221;.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1230701">
				<div id="div-comment-1230701" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://harryjohnston.wordpress.com' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230701">
			March 17, 2016 at 3:43 pm</a>		</div>

		<p>Huh.  I guess I had taken for granted that the policy was entirely motivated by security.  That makes more sense, then, though I note my first not-quite-serious technical proposal would still work.  (The second one wouldn&#8217;t, because updating the policy could improperly invalidate old apps if they were released before a particular API was disallowed.)</p>
<p>I&#8217;ve never been quite sure whether IL was officially a security boundary or not.  On the one hand, I&#8217;ve seen reports that known UAC bypasses (which must presumably also be bypassing IL) have been rejected by MS security as won&#8217;t-fix.  On the other, I seem to recall at least one security update released to address an IL bypass.  Perhaps it depends whether the problem is visible through kernel-coloured glasses or not?  :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1230711">
				<div id="div-comment-1230711" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230711">
			March 17, 2016 at 3:57 pm</a>		</div>

		<p>@Harry Johnson [apparently we have a nest limit]</p>
<p>I&#8217;ve seen them too. They are for things like website server code with less than full trust or silverlight apps busting out of the sandbox.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1230712">
				<div id="div-comment-1230712" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://harryjohnston.wordpress.com' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230712">
			March 17, 2016 at 5:06 pm</a>		</div>

		<p>@Joshua, I&#8217;m thinking more of the &#8220;get from an restricted command line to an elevated one&#8221; scenarios.  Not sure if we can post links here, but see for example the article &#8220;Bypassing UAC with PowerShell&#8221; from &#8220;Lab of a Penetration Tester&#8221;, easily found in Google.</p>
<p>Basically it&#8217;s just a matter of abusing auto-elevating COM objects and executables.  From a kernel perspective, everything is working as designed, but the upshot is that UAC, in the default configuration, is insecure by design.  </p>
<p>  &#8230; as far as I know, though, all such attacks can be blocked by setting UAC to &#8220;Always Notify&#8221;.  And I assume Windows Store policy prevents Store apps from taking advantage of them.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-3 parent" id="comment-1230813">
				<div id="div-comment-1230813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230813">
			March 18, 2016 at 7:48 am</a>		</div>

		<p>That&#8217;s a Windows Store problem: does it support multiple version of an app, are app download based on the version of the Windows Phone running, are policies changed willy-nilly. There is also no fundamental reason why the policies need to be tied to the OS and not updatable directly from the store. I mean, I expect Microsoft to trust its store can securely msnage the signing of its policies and their distribution? I&#8217;d expect policies changes to be rare anyway.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4" id="comment-1230823">
				<div id="div-comment-1230823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230823">
			March 18, 2016 at 8:58 am</a>		</div>

		<p>That&#8217;s sort of the whole point. The Store is in charge of its policies. The operating system doesn&#8217;t care how the app got onto your device.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-exchange-development-blog-team even depth-2 parent" id="comment-1230741">
				<div id="div-comment-1230741" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">exchange development blog team</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230741">
			March 17, 2016 at 8:29 pm</a>		</div>

		<p>So why did the Win16 loader provide a NULL pointer?  The app has asked for a pointer to X, the loader knows it can&#8217;t satisfy the request (meaning that the app will crash if it tries to use it), but instead of not loading the app it returns a pretend pointer that&#8217;ll cause a crash if dereferenced.  It&#8217;s like going into a restaurant and ordering a nice piece of fish and the waiter brings you a flaming phone book instead.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1230764">
				<div id="div-comment-1230764" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230764">
			March 17, 2016 at 11:19 pm</a>		</div>

		<p>@Dave: possiblybecause you could be using a newer version of a DLL (say win 98 vs win 95) and you could then take advantage of new functions in said DLL. In the Win95 version you could check for NULL on such a new function and call your own slower workaround function instead.</p>
<p>At least that&#8217;s what I think it would be for.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1230781">
				<div id="div-comment-1230781" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230781">
			March 18, 2016 at 3:32 am</a>		</div>

		<p>Actually the loader didn&#8217;t; as per <a href="https://blogs.msdn.microsoft.com/oldnewthing/20060717-13/?p=30503" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20060717-13/?p=30503</a> it wrote the address of a function that displayed the &#8220;Call to Undefined Dynalink&#8221; fatal error dialog.</p>
<p>The above function itself was actually exported, so you could in theory compare your function pointer to it to see if it was defined or not.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-markkeyb odd alt depth-2 parent" id="comment-1231204">
				<div id="div-comment-1231204" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MarkKB' rel='external nofollow' class='url'>MarkKB</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1231204">
			March 23, 2016 at 2:09 pm</a>		</div>

		<p>&#8220;Games want to save different gamers high-score and progress in different file. Obviously, NTFS cannot support having multiple files, that would be a low-level component enforcing a high-level requirement!&#8221;</p>
<p>Perhaps I&#8217;m a bit daft (always a possibility) but this argument makes no sense to me. A game is well within its rights to store its data however it likes. It can, for example, store its high scores and progress in the same file in shell:savedgames. It doesn&#8217;t even have to do that &#8211; it could append its data to the end of its executable, much like how self-extracting packages work. Or it could store the data in a binary blob in the registry. Or store it as a hidden stream.</p>
<p>From my point of view, this is the very definition of a high-level component enforcing a high-level requirement &#8211; by choosing which APIs it calls in which manner, the program (or reliant library) has enforced upon itself the requirement of multiple files (or not, as the case may be.) The existence of multiple files in no way necessitates the usage of it. </p>
<p>(Besides, the feature of files in a general-purpose operating system is, by my understanding, the very model of a low-level feature &#8211; programs need some way of determining what libraries or data to load in order for them to operate correctly &#8211; some sort of sectioning is needed to determine where to start loading and where to stop. &#8220;Files&#8221; was the chosen metaphor to describe and represent this sectioning, and the NTFS file system format determines the method of sectioning for Windows computers, but you could use different names and different formats and still get the same results. Files only exist in software which interprets the binary blob contained in the hardware and then exposes the results to other programs so that they may query for the appropriate data &#8211; which they must be able to do in some manner, otherwise it would be impossible for them to function.)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-markkeyb even depth-3" id="comment-1231213">
				<div id="div-comment-1231213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MarkKB' rel='external nofollow' class='url'>MarkKB</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1231213">
			March 23, 2016 at 3:12 pm</a>		</div>

		<p>Urgh, I don&#8217;t think I actually summarised my point there. What I&#8217;m trying to say, simply put, is</p>
<p>a) you&#8217;re using a situation where a developer has a choice at the high level in the matter to contrast one where that decision is subsumed into the low-level, and</p>
<p>b) file systems are essential for general-purpose operating systems, whereas weak-linking is not.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt thread-even depth-1 parent" id="comment-1230641">
				<div id="div-comment-1230641" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230641">
			March 17, 2016 at 7:53 am</a>		</div>

		<p>—&#8217;&#8230; you have to tell the loader, “Oh wait, this program didn’t get installed via the Windows Store.” &#8230;&#8217;</p>
<p>I was under the impression that the forbidden API is forbidden for all Metro-style apps (both universal and non-universal ones) regardless of whether they come from Windows Store or are sideloaded. Was I wrong?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-jeremytais even depth-2 parent" id="comment-1230661">
				<div id="div-comment-1230661" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SimonRev' rel='external nofollow' class='url'>SimonRev</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230661">
			March 17, 2016 at 8:52 am</a>		</div>

		<p>I haven&#8217;t looked into it much since Windows 8 first came out, but at the time, I am fairly sure most of the API restrictions were policy based.  Basically if you hacked your header files you could use the forbidden APIs, (although the store would validate your application and reject it if it did indeed use forbidden APIs).  From that it follows that sideloaded applications could bypass those restrictions.  Under Windows 8 sideloading wasn&#8217;t very easy so there weren&#8217;t a lot of apps that chose to go that route.  </p>
<p>I suppose this actually opens up some interesting possibilities.  I always wanted a live tile that showed the battery status of my laptop, but no one made such a Windows 8 app (at least a good one, there were some bad ones) since the battery query API was forbidden for some reason.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1230702">
				<div id="div-comment-1230702" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230702">
			March 17, 2016 at 3:48 pm</a>		</div>

		<p>It seems to me that I remember someone explaining the reason for the lack of a &#8220;check the battery level&#8221; api.  There was a fear that programmers would poll that API incessantly, causing excessive battery drain (if you remember, the original WinPhone 7 platform only showed the battery level on demand &#8211; I believe for that very reason).<br />
I believe that API is forbidden in an effort to inhibit irony.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-jeremytais even depth-4" id="comment-1230814">
				<div id="div-comment-1230814" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SimonRev' rel='external nofollow' class='url'>SimonRev</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230814">
			March 18, 2016 at 7:59 am</a>		</div>

		<p>Ironic perhaps, but I found it incredibly aggravating on my 8&#8243; Windows 8 tablet that the only way to see the battery percentage was to go to the desktop and try to tap the little battery icon to get the tool tip to appear.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1230683">
				<div id="div-comment-1230683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230683">
			March 17, 2016 at 11:18 am</a>		</div>

		<p>Our solution is to not use the Windows Store.  Our application uses runtime code generation, which is fundamentally not allowed by the Windows Store.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1230742">
				<div id="div-comment-1230742" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pseudonym</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230742">
			March 17, 2016 at 8:36 pm</a>		</div>

		<p>Now <i>there&#8217;s</i> an excellent example of low-level components enforcing a high-level policy!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip odd alt depth-2" id="comment-1230752">
				<div id="div-comment-1230752" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230752">
			March 17, 2016 at 8:49 pm</a>		</div>

		<p>Except it is.<br />
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/mt169845(v=vs.85)" rel="nofollow">https://msdn.microsoft.com/en-us/library/windows/desktop/mt169845(v=vs.85)</a>.aspx for example and it makes reference to the codeGeneration capability. This was added with Windows 10.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1230732">
				<div id="div-comment-1230732" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://paradisefacade.com' rel='external nofollow' class='url'>Rosyna</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230732">
			March 17, 2016 at 6:59 pm</a>		</div>

		<p>&#8220;Second, how would you enforce this policy? The Windows App Certification Kit acceptance test would see that there is an attempt to import the Initialize­Critical­Section function&#8221;</p>
<p>This appears to be creating a problem that doesn&#8217;t exist? The initial issue was Initialize­Critical­SectionEx existed on newer platforms but not older ones. Weak linking would address that issue as it&#8217;s exactly how it&#8217;s addressed in other platforms.</p>
<p>&#8220;Furthermore, the issue isn’t that the Initialize­Critical­Section function doesn’t exist. The function exists just fine. It’s just that universal Windows apps in the Windows Store are not allowed to call it&#8221;</p>
<p>Doesn&#8217;t the Windows Store check the functions imported by an app submitted to the store? That&#8217;s the way forbidden APIs are usually prevented from being used in other app stores. This usually uses the same App Store infrastructure that runs basic heuristics on submitted apps as a front line to make sure malware is not submitted.</p>
<p>If this kind of submission checking is used, then if a currently permitted or forbidden API changes status, the only thing that needs to change is the server-side list the Windows Store uses to validate submissions.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1230761">
				<div id="div-comment-1230761" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230761">
			March 17, 2016 at 9:36 pm</a>		</div>

		<p>This problem exists: The InitializeCriticalSection function exists in Windows 10 (hence would be a strong link), but it is disallowed in Store apps. Therefore, a Store app that links to it will be rejected by Store validation.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1230773">
				<div id="div-comment-1230773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://paradisefacade.com' rel='external nofollow' class='url'>Rosyna</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230773">
			March 18, 2016 at 12:16 am</a>		</div>

		<p>I&#8217;m not sure I understand.</p>
<p>Weak linking isn&#8217;t designed to be used in the case of InitializeCriticalSection, since that function is guaranteed to be available at runtime on all versions of Windows concerned. Weak linking is designed to solve the problem of InitializeCriticalSectionEx not being available on Windows XP when an executable declares (this is important) it can run on Windows XP. Without weak linking, you&#8217;d need shim libraries or dynamic runtime loading use GetProcAddress (as you state).</p>
<p>Weak linking isn&#8217;t suitable to be used in a situation of an API being banned (by policy) if the API actually exists. GetProcAddress isn&#8217;t suitable for that use either.</p>
<p>If an executable declares it can run only on versions of an OS that are guaranteed to have a certain API, then that API is never weak linked, only extremely strong linking is used (for lack of a better term). This is to prevent the issue of function addresses randomly being NULL due to configuration errors/problems that I believe you were referring to in the Win16 days.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1230783">
				<div id="div-comment-1230783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://harryjohnston.wordpress.com' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230783">
			March 18, 2016 at 3:45 am</a>		</div>

		<p>If your DLL is running on Windows XP, then you can&#8217;t use InitializeCriticalSectionEx, and if it has to also run on Windows Store, you can&#8217;t use InitializeCriticalSection either.  So how are you going to initialize your critical section?  (And if you don&#8217;t need one, then you don&#8217;t have a problem in the first place.)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1230801">
				<div id="div-comment-1230801" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230801">
			March 18, 2016 at 7:40 am</a>		</div>

		<p>Conditional compilation and ship two dll&#8217;s is probably the only solution.</p>
<p>dllimport in .net ironically does allow weak linking. You can even link to different named functions in different dll&#8217;s using delegates, so the same dll can be used on windows &amp; windows ce.</p>
<p>When your use case doesn&#8217;t fit in with Microsoft&#8217;s idea of software development then you may find yourself swimming against the current.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4" id="comment-1230831">
				<div id="div-comment-1230831" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230831">
			March 18, 2016 at 9:00 am</a>		</div>

		<p>&gt; Weak linking isn’t designed to be used in the case of InitializeCriticalSection<br />
Then why did you suggest it as a possible solution?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1230891">
				<div id="div-comment-1230891" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://harryjohnston.wordpress.com' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230891">
			March 18, 2016 at 4:27 pm</a>		</div>

		<p>Note that you don&#8217;t need a shim DLL for every Windows version.  You need one for a desktop app and one for a universal app, and that&#8217;s all.  If you&#8217;re building an application, you don&#8217;t even need that, because you already know whether you&#8217;re a desktop app or a universal app &#8211; this is only an issue for people building libraries.  It needn&#8217;t really be a shim DLL either, you could simply build two different versions of your library.  I&#8217;m not sure why the original customer didn&#8217;t want to do that.</p>
<p>The correct Mac analogy here, I think, is the shift from PPC to x86, or from MacOS 9 to MacOS X, rather than simply supporting multiple versions of MacOS X.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1230901">
				<div id="div-comment-1230901" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://harryjohnston.wordpress.com' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230901">
			March 18, 2016 at 4:36 pm</a>		</div>

		<p>&#8230; or, more to the point, the shift from MacOS X to iOS.  D&#8217;oh.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1230863">
				<div id="div-comment-1230863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160317-00/?p=93173#comment-1230863">
			March 18, 2016 at 10:47 am</a>		</div>

		<p>For the record, Visual Studio lets you pretend that static linking is the same as using LoadLibrary+GetProcAddress. It will do the job for you by the use of generates stubs. It&#8217;s your responsibility to either not call functions that doesn&#8217;t exist or provide an error handler (yeah, right).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

