<html>
<head>
<title>The history of calling conventions, part 4: ia64</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The history of calling conventions, part 4: ia64</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 13, 2004 / year-entry #16</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>35</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The ia-64 architecture (Itanium) and the AMD64 architecture (AMD64) are comparatively new, so it is unlikely that many of you have had to deal with their calling conventions, but I include them in this series because, who knows, you may end up buying one someday. Intel provides the Intel® Itanium® Architecture Software Developer's Manual which...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The ia-64 architecture (Itanium) and the AMD64 architecture (AMD64) are comparatively new, so it is unlikely that many of you have had to deal with their calling conventions, but I include them in this series because, who knows, you may end up buying one someday.</p>
<p> Intel provides the <a href="http://developer.intel.com/design/itanium/manuals/iiasdmanual.htm"> Intel&reg; Itanium&reg; Architecture Software Developer's Manual</a> which you can read to get extraordinarily detailed information on the instruction set and processor architecture. I'm going to describe just enough to explain the calling convention. </p>
<p> The Itanium has 128 integer registers, 32 of which (r0 through r31) are global and do not participate in function calls. The function declares to the processor how many registers of the remaining 96 it wants to use for purely local use ("local region"), the first few of which are used for parameter passing, and how many are used to pass parameters to other functions ("output registers"). </p>
<p> For example, suppose a function takes two parameters, requires four registers for local variables, and calls a function that takes three parameters.  (If it calls more than one function, take the maximum number of parameters used by any called function.) It would then declare at function entry that it wants six registers in its local region (numbered r32 through r37) and three output registers (numbered r38, r39 and r40). Registers r41 through r127 are off-limits. </p>
<p> Note to pedants: This isn't actually how it works, I know. But it's much easier to explain this way. </p>
<p> When the function wants to call that child function, it puts the first parameter in r38, the second in r39, the third in r40, then calls the function.  The processor shifts the caller's output registers so they can act as the input registers for the called function.  In this case r38 moves to r32, r39 moves to r33 and r40 moves to r34. The old registers r32 through r38 are saved in a separated register stack, different from the "stack" pointed to by the sp register. (In reality, of course, these "spills" are deferred, in the same way that SPARC register windows don't spill until needed. Actually, you can look at the whole ia64 parameter passing convention as the same as SPARC register windows, just with variable-sized windows!) </p>
<p> When the called function returns, the register then move back to their previous position and the original values of r32 through r38 are restored from the register stack. </p>
<p> This creates some surprising answers to the traditional questions about calling conventions. </p>
<p> What registers are preserved across calls? Everything in your local region (since it is automatically pushed and popped by the processor). </p>
<p> What registers contain parameters? Well, they go into the output registers of the caller, which vary depending on how many registers the caller needs in its local region, but the callee always sees them as r32, r33, etc. </p>
<p> Who cleans the parameters from the stack? Nobody. The parameters aren't on the stack to begin with. </p>
<p> What register contains the return value? Well that's kind of tricky. Since the caller's registers aren't accessible from the called function, you'd think that it would be impossible to pass a value back! That's where the 32 global registers come in. One of the global registers (r8, as I recall) is nominated as the "return value register". Since global registers don't participate in the register window magic, a value stored there stays there across the function call transition and the function return transition. </p>
<p> The return address is typically stored in one of the registers in the local region. This has the neat side-effect that <b>a buffer overflow of a stack variable cannot overwrite a return address</b> since the return address isn't kept on the stack in the first place.  It's kept in the local region, which gets spilled onto the register stack, a chunk of memory separate from the stack. </p>
<p> A function is free to subtract from the sp register to create temporary stack space (for string buffers, for example), which it of course must clean up before returning. </p>
<p> One curious detail of the stack convention is that the first 16 bytes on the stack (the first two quadwords) are always scratch. (Peter Lund calls it a "<a href="http://weblogs.asp.net/oldnewthing/archive/2004/01/02/47184.aspx#47262">red zone</a>".) So if you need some memory for a short time, you can just use the memory at the top of the stack without asking for permission. But remember that if you call out to another function, then that memory becomes scratch for the function you called! So if you need the value of this "free scratchpad" preserved across a call, you need to subtract from sp to reserve it officially. </p>
<p> One more curious detail about the ia64: A function pointer on the ia64 does not point to the first byte of code. Intsead, it points to a structure that describes the function.  The first quadword in the structure is the address of the first byte of code, and the second quadword contains the value of the so-called "gp" register.  We'll learn more about the gp register in a later blog entry. </p>
<p> (This "function pointer actually points to a structure" trick is not new to the ia64. It's common on RISC machines. I believe the PPC used it, too.) </p>
<p> Okay, this was a really boring entry, I admit. But believe it or not, I'm going to come back to a few points in this entry, so it won't have been for naught. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (35)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-135923">
				<div id="div-comment-135923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-135923">
			January 13, 2004 at 11:20 am</a>		</div>

		<p>What is the size of the &#8216;red zone&#8217; under Win32? I&#8217;ve often used this in assembly functions without even considering that it might be illegal.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-135933">
				<div id="div-comment-135933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-135933">
			January 13, 2004 at 11:24 am</a>		</div>

		<p>The &quot;red zone&quot; exists only on ia64. Don&#8217;t try it on any other platform or you&#8217;ll corrupt the stack!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-135953">
				<div id="div-comment-135953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-135953">
			January 13, 2004 at 11:55 am</a>		</div>

		<p>What is the &quot;red zone?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-135963">
				<div id="div-comment-135963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-135963">
			January 13, 2004 at 12:08 pm</a>		</div>

		<p>&quot;One curious detail of the stack convention is that the first 16 bytes on the stack (the first two quadwords) are always scratch. (Peter Lund calls it a &quot;red zone&quot;.)&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-135873">
				<div id="div-comment-135873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://baby.homeip.net/patrick/archives/000142.php' rel='external nofollow' class='url'>Simply Patrick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-135873">
			January 13, 2004 at 1:19 pm</a>		</div>

		<p>??????,??????????? ?????????? calling convention: The history of calling conventions, part 1 The history of calling conventions, part 2 The history of calling conventions, part 3 The history of calling conventions, part 4: ia64 Why do member functions need to be&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-135993">
				<div id="div-comment-135993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-135993">
			January 13, 2004 at 1:52 pm</a>		</div>

		<p>Raymond, just to make sure we&#8217;re talking about the same thing. Is this illegal:</p>
<p>function entry:<br />
<br />push ebx<br />
<br />push esi<br />
<br />mov [esp-4], eax  ; save eax temporarily<br />
<br />; do some stuff<br />
<br />mov eax, [esp-4]<br />
<br />; do some more stuff<br />
<br />pop esi<br />
<br />pop ebx</p>
<p>I believe that this should work as long as Windows saves more of the stack than just up to and including the stack pointer when doing context switches. Am I wrong?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-136003">
				<div id="div-comment-136003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-136003">
			January 13, 2004 at 1:56 pm</a>		</div>

		<p>Accessing memory at negative offsets from ESP is illegal.  (The &quot;red zone&quot; for ia64 lives at positive offsets relative to ESP.)</p>
<p>If an exception is raised in &quot;do some stuff&quot;, you will likely find that your secret hiding place for EAX got overwritten by the exception handler.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-136013">
				<div id="div-comment-136013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-136013">
			January 13, 2004 at 2:23 pm</a>		</div>

		<p>I see. Of course I wouldn&#8217;t expect an exception handler (or any function call for that matter) to preserve this space, but neither would I set up an exception handler in an assembly function like this, so that hardly matters.</p>
<p>But, before I rush off to rewrite all my assembler stuff ;-), does Windows currently preserve an area below the stack pointer when doing context switches (which is the only problem I can think of)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-136023">
				<div id="div-comment-136023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-136023">
			January 13, 2004 at 2:34 pm</a>		</div>

		<p>Perhaps you won&#8217;t set up an exception handler, but your caller might have one, and the caller might decide to fix the exception and then return EXCEPTION_CONTINUE_EXECUTION. (For example, accessing [esp-4] might trigger a guard page exception, which is handled by kernel.)  Execution then resumes and your stack is corrupted.</p>
<p>Context is processor state (registers, memory map), not memory values. A context switch changes the processor&#8217;s view of the world, but the world doesn&#8217;t change.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-136033">
				<div id="div-comment-136033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-136033">
			January 13, 2004 at 2:46 pm</a>		</div>

		<p>If a function has a float parameter, is that one still passed via the integer registers too? (yeah I know I really should read the itanium manual)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-136043">
				<div id="div-comment-136043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Dunham</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-136043">
			January 13, 2004 at 2:53 pm</a>		</div>

		<p>I didn&#8217;t think it was boring. (BTW, the PPC, assuming you mean PowerPC, *is* a RISC machine.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-136053">
				<div id="div-comment-136053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-136053">
			January 13, 2004 at 2:55 pm</a>		</div>

		<p>All architectures have separate rules for floats, which I have been ignoring throughout this series since they aren&#8217;t really relevant to my point. (I have a point?)</p>
<p>When I said, &quot;It&#8217;s common on RISC machines. I believe the PPC used it, too.&quot; I meant &quot;It&#8217;s common on RISC machines. For example, the PPC is a RISC machine and it uses this method too.&quot; Sorry about that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-136083">
				<div id="div-comment-136083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.virtualdub.org/' rel='external nofollow' class='url'>Phaeron</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-136083">
			January 13, 2004 at 10:39 pm</a>		</div>

		<p>If you&#8217;re really crazy you can write Win32 x86 assembly code with a &quot;4GB red zone,&quot; by temporarily recycling ESP as an eighth general purpose register for an inner loop that doesn&#8217;t trip exceptions or access the stack.  You can even stash ESP in the structured exception handling chain to make the routine reentrant.  Uh, not that I&#8217;ve ever written code that did this&#8230;.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-136093">
				<div id="div-comment-136093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-136093">
			January 13, 2004 at 10:47 pm</a>		</div>

		<p>Yup, I&#8217;ve seen people do this (use ESP as a general purpose register) &#8211; you&#8217;re playing with fire with this trick, since (as noted) the slightest mis-step and you&#8217;re toast. I&#8217;ve only seen it in intense graphics code which is trying to squeak that last cycle out of an image processing algorithm. Not for the faint of heart!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-136133">
				<div id="div-comment-136133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-136133">
			January 14, 2004 at 2:34 am</a>		</div>

		<p>Thanks for your comments, Raymond. I&#8217;ve used the [esp-x] trick in an arbitrary precision floating-point library that I&#8217;ve developed that needed to be as fast as possible. So using EBP as a general purpose register was important here.</p>
<p>When I get around to it, I will correct the code to adjust ESP before storing temp variables so they&#8217;re stored in a &#8216;safe&#8217; area.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-136153">
				<div id="div-comment-136153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://htp://www.whirlingdervishes.com' rel='external nofollow' class='url'>Henk Devos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-136153">
			January 14, 2004 at 10:08 am</a>		</div>

		<p>&quot;This has the neat side-effect that a buffer overflow of a stack variable cannot overwrite a return address since the return address isn&#8217;t kept on the stack in the first place.&quot;<br />
<br />So this means the end of buffer overflow attacks?<br />
<br />I have wondered for a long time while the stack is still upside down nowadays. In the olden days this made sense: the data area and the stack area grow towards each other. But with today&#8217;s virtual memory i don&#8217;t see any sense in this anymore.<br />
<br />If i remember it correctly, the intel processers now have a flag to indicate the direction of the stack.<br />
<br />Why has this not been changed yet?<br />
<br />I know this would cause some compatibility issues, but wouldn&#8217;t it be possible to reverse the stack direction only for new programs?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-136163">
				<div id="div-comment-136163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-136163">
			January 14, 2004 at 10:31 am</a>		</div>

		<p>&quot;some compatibility issues&quot; is quite an understatement.</p>
<p>Stack reversal requires that ALL code in the program (including DLLs that may be outside your control) be aware of the reversal.  Changing the stack direction is a fundamental change to the ABI, since parameters are now at positive offsets, the &quot;sub esp, nn&quot; needs to change to &quot;add esp, nn&quot; etc.</p>
<p>This means among other things that</p>
<p>1. there would need to be two copies of every DLL in the OS, one compiled with stack-up (for stack-up programs to use) and one with stack-down (for stack-down programs to use).</p>
<p>2. you couldn&#8217;t inject a stack-up DLL into a stack-down process or vice versa</p>
<p>3. a program that hosts plug-ins (like Explorer or IE) would have to choose between being stack-up (new style &#8211; but old shell extensions will no longer work) or stack-down (old style &#8211; new shell extensions will not work), and once it chose it would be restricted to shell extensions that were compiled with a compatible stack direction.</p>
<p>4. I can&#8217;t actually find this &quot;stack-up&quot; bit in my Intel docs.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-136233">
				<div id="div-comment-136233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.whirlingdervishes.com' rel='external nofollow' class='url'>Henk Devos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-136233">
			January 14, 2004 at 4:42 pm</a>		</div>

		<p>These problems could be easily overcome.<br />
<br />I&#8217;m sure you know how intel code is executed on Alpha machines by converting on the fly, and then caching the resulting code.<br />
<br />It would be easy to do the same.<br />
<br />However, the real problem is: Is it worth the effort? The answer to that is probably &quot;no&quot;.<br />
<br />I just looked it up, the bit i remembered from long ago is the &quot;expansion direction&quot; bit in a segment descriptor (bit 2). This also means that a solution could be switching to a different stack when changing between stack up and stack down. This could be implemented in the memory manager by putting them in a different segment and generating a page fault that triggers a switch.<br />
<br />Just an idea, i know it will never happen. But this could have solved the buffer overflow problem long ago.<br />
<br />But it&#8217;s also very well possible that i misunderstood the meaning of this bit completely.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-136243">
				<div id="div-comment-136243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-136243">
			January 14, 2004 at 4:52 pm</a>		</div>

		<p>Um, expand-down and expand-up selectors are irrelevant here since Win32 is flat model, not segmented.  They do not affect the meaning of the &quot;push&quot; instruction. They indicate whether the limit value is treated as a lower limit or an upper limit.</p>
<p>E.g., if you specify that selector 013F has a limit of 0x10000 and it is expand-up, then valid addresses are 013F:00000000 through 013F:00010000.  Whereas if you mark it as expand-down, valid addresses are 013f:00010000 through 013F:FFFFFFFF.</p>
<p>But the &quot;push&quot; instruction always decrements ESP regardless of whether SS is an expand-up or expand-down selector.</p>
<p>Recompiling code on the fly doesn&#8217;t help. The actual stack layout changed. Consider the following code fragment:</p>
<p>  push eax<br />
<br />  mov eax, esp<br />
<br />  mov eax, [eax+4]<br />
<br />  mov eax, [eax+4]</p>
<p>this would have to be translated into</p>
<p>  add esp, 4 ! mov [esp], eax<br />
<br />  mov eax, esp<br />
<br />  mov eax, [eax-4]<br />
<br />  mov eax, [eax+4]</p>
<p>Notice that the last two instructions &#8211; even though completely identical &#8211; had to be translated differently, because in the first case, eax points into the stack in an attempt to walk &quot;up&quot; it, but in the second case, eax is now a pointer to a structure (not a stack walk) so no inversion occurs.</p>
<p>So any converter would have to figure out whether any particular memory reference was an attempt to walk up the stack or whether it is just a structure member access. This is semantic information that is not available in raw binaries.</p>
<p>And all this to accomplish what?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-136253">
				<div id="div-comment-136253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.whirlingdervishes.com' rel='external nofollow' class='url'>Henk Devos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-136253">
			January 15, 2004 at 12:10 am</a>		</div>

		<p>Ok you&#8217;re right i got this all wrong. Sorry for that. I had noticed this bit long ago when ni was more involved in low level programming, and the assumption that it would actually influence  instructions like push and ret was most likely wishful thinking.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-136753">
				<div id="div-comment-136753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-136753">
			January 15, 2004 at 9:53 pm</a>		</div>

		<p>How does this calling convention treat variadic functions?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-136793">
				<div id="div-comment-136793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-136793">
			January 15, 2004 at 11:42 pm</a>		</div>

		<p>I didn&#8217;t mention that the Win32 calling convention for ia64 passes only the first eight parameters in registers; the rest go on the stack.  If a function is variadic, you call it like a normal function, but the function itself spills the first eight input registers (r32 through r39) onto the stack next to any possible parameters 9 and upwards, and then it treats the parameters as one giant array. This spilling needs to be done carefully to avoid a problem that I will discuss on Monday.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-138433">
				<div id="div-comment-138433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thiago</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-138433">
			January 23, 2004 at 9:32 am</a>		</div>

		<p>As for floating point parameters, you should go read the Itanium manuals. They explain a lot better than I can.</p>
<p>Basically, when you have a floating-point parameter, the calling convention specifies that you should use registers f8, f9, &#8230; till f16, in order. At the same time, a &quot;hole&quot; is left in the integer registers.</p>
<p>So, if you have a function with 4 parameters, in which the third is a floating-point one, parameters 1, 2 and 4 will be in registers out0, out1 and out3, whereas the third parameter will be in f8. out2 will be left with garbage.</p>
<p>However, if the compiler cannot be completely sure that the called function expects a floating-point parameter (see the other article on misdeclaring symbols), it&#8217;s supposed to pass the parameter in BOTH registers.</p>
<p>If, however, the 8-integer-register limit has been reached, then even floating points will go through the stack, even if there are free floating point registers.</p>
<p>PS: there are worse things possible, like having an 80-bit extended floating point have to be passed in integer registers, because it would require 2 of them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-140263">
				<div id="div-comment-140263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-140263">
			January 31, 2004 at 6:19 pm</a>		</div>

		<p>Making the stack go the other direction wouldn&#8217;t eliminate buffer overflow attacks anyway.  When you call something like strcpy to fill a buffer on the stack, there&#8217;s a return address on either side of it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-140273">
				<div id="div-comment-140273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-140273">
			January 31, 2004 at 6:26 pm</a>		</div>

		<p>Excellent point, Josh. It isn&#8217;t the fact that the return address stack grows in the opposite direction that protects the ia64 from stack overflow return address smashing attacks. It&#8217;s the fact that the return addresses aren&#8217;t kept on the stack in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-140593">
				<div id="div-comment-140593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Lund</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-140593">
			February 2, 2004 at 9:14 am</a>		</div>

		<p>Who says you need to stick to just one stack?</p>
<p>return addresses could go on one stack, small parameters/local variables (bools, chars, ints, pointers) could go on another, and big parameters/local variables (buffers/structs) could go on a third or be heap allocated.</p>
<p>(okay, this is sort of what the IA64 does with the hardware register stack &#8211; but you don&#8217;t need the IA64 to implement something like this)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-140783">
				<div id="div-comment-140783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-140783">
			February 2, 2004 at 9:44 pm</a>		</div>

		<p>Peter: Yes, you could use multiple stacks but there are some serious problems with this.</p>
<p>1. Having to recompile ALL code to conform to this new stack scheme. You couldn&#8217;t mix an &quot;oldstyle stack&quot; caller with a &quot;newstyle stack&quot; callee. It would probably be unreasonable to ship a version of Windows that was 100% incompatible with the previous version of Windows&#8230; (See previous discussion with Henk.)</p>
<p>2. The paucity of registers on the x86 makes it a hard sell to lose one of its precious few registers as an &quot;alternate stack register&quot;, much less TWO of them!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-153113">
				<div id="div-comment-153113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/joshwil/archive/2004/03/10/87656.aspx' rel='external nofollow' class='url'>Josh Williams</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-153113">
			March 10, 2004 at 9:40 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-191933">
				<div id="div-comment-191933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.cnblogs.com/flier/archive/2004/07/08/22346.aspx' rel='external nofollow' class='url'>Flier's Sky</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-191933">
			July 7, 2004 at 11:03 pm</a>		</div>

		<p>The history of calling conventions</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-203263">
				<div id="div-comment-203263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/paul_fallon/archive/0001/01/01/215015.aspx' rel='external nofollow' class='url'>Paul Fallon's WebLog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-203263">
			August 16, 2004 at 6:52 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-210643">
				<div id="div-comment-210643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/09/15/229905.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-210643">
			September 15, 2004 at 9:42 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-210803">
				<div id="div-comment-210803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/09/15/230088.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-210803">
			September 15, 2004 at 3:37 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-271953">
				<div id="div-comment-271953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/04/21/410397.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-271953">
			April 21, 2005 at 9:00 am</a>		</div>

		<p>The Itanium has two stacks, so don&#8217;t assume that there&#8217;s only one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-381533">
				<div id="div-comment-381533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.escoria.org/PermaLink,guid,a5ab12d7-a40d-4f47-b07d-f38ef05e903a.aspx' rel='external nofollow' class='url'>Anuncie Aqui!</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-381533">
			May 17, 2006 at 8:44 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-503163">
				<div id="div-comment-503163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.not-a-kernel-guy.com/2007/05/10/183' rel='external nofollow' class='url'>Not a kernel guy : Blog Archive : ?????????????? ???????? ???? Itanium (IA-64).</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040113-00/?p=41073#comment-503163">
			May 11, 2007 at 2:17 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blog.not-a-kernel-guy.com/2007/05/10/183" rel="nofollow">http://blog.not-a-kernel-guy.com/2007/05/10/183</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

