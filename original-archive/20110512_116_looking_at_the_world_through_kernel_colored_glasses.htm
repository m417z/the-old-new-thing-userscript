<html>
<head>
<title>Looking at the world through kernel-colored glasses</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Looking at the world through kernel-colored glasses</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 12, 2011 / year-entry #117</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110512-00/?p=10683</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">During a discussion of the proper way of cancelling I/O, the question was raised as to whether it was safe to free the I/O buffer, close the event handle, and free the OVERLAPPED structure immediately after the call to CancelIo. The response from the kernel developer was telling. That's fine. We write back to the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>During a discussion of <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/02/02/10123392.aspx"> the proper way of cancelling I/O</a>, the question was raised as to whether it was safe to free the I/O buffer, close the event handle, and free the <code>OVERLAPPED</code> structure immediately after the call to <code>CancelIo</code>. The response from the kernel developer was telling.</p>
<blockquote class="q"><p> That's fine. We write back to the buffer under a try/except, so if the memory is freed, we'll just ignore it. And we take a reference to the handle, so closing it does no harm. </p>
</blockquote>
<p> These may be the right answers from a kernel-mode point of view (where the focus is on ensuring that consistency in kernel mode is not compromised), but they are horrible answers from an application point of view: Kernel mode will write back to the buffer and the <code>OVERLAPPED</code> when the I/O completes, thereby corrupting user-mode memory if user-mode had re-used the memory for some other purpose. And if the handle in the <code>OVERLAPPED</code> structure is closed, then user mode has lost its only way of determining when it's safe to continue! You had to look beyond the literal answer to see what the consequences were for application correctness.  </p>
<p> (You can also spot the kernel-mode point of view in the clause "if the memory is freed." The developer is talking about freed from kernel mode's point of view, meaning that it has been freed back to the operating system and is no longer committed in the process address space. But memory that is logically freed from the application's point of view may not be freed back to the kernel. It's usually just freed back into the heap's free pool.) </p>
<p> The correct answer is that you have to wait for the I/O to complete before you free the buffer, close the event handle, or free the <code>OVERLAPPED</code> structure. </p>
<p> Don't fall into this trap. The kernel developer was looking at the world through kernel-colored glasses. But you need to look at the situation from the perspective of your customers. When the kernel developer wrote "That's fine", he meant "That's fine <i>for me</i>." Sucks to be you, though. </p>
<p> It's like programming an autopilot to land an airplane, but sending it through aerobatics that kill all the passengers. If you ask the autopilot team, they would say that they accomplished their mission: Technically, the autopilot did land the airplane. </p>
<p> Here's <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/01/31/10122197.aspx#10123404"> another example of kernel-colored glasses</a>. <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/03/11/10139574.aspx#10140245"> And another</a>. </p>
<p> <b>Epilogue</b>: To be fair, after I pointed out the kernel-mode bias in the response, the kernel developer admitted, "You're right, sorry. I was too focused on the kernel-mode perspective and wasn't looking at the bigger picture." </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-912973">
				<div id="div-comment-912973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdbsd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110512-00/?p=10683#comment-912973">
			May 12, 2011 at 7:13 am</a>		</div>

		<p>Raymond, bullying kernel-mode developers since 1993.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-912983">
				<div id="div-comment-912983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdbsd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110512-00/?p=10683#comment-912983">
			May 12, 2011 at 7:13 am</a>		</div>

		<p>Raymond, bullying kernel developers since 1993.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-913003">
				<div id="div-comment-913003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110512-00/?p=10683#comment-913003">
			May 12, 2011 at 8:21 am</a>		</div>

		<p>As to whether or not that&#39;s fine, the kernel must protect itself from user mode corrupting it no matter what (documented or otherwise) the user mode process does.</p>
<p>If a series of API calls crashes the kernel or wedges IO to the point where task manager cannot kill the process that&#39;s a kernel bug whether or not the caller&#39;s contract of the API calls was filled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-913013">
				<div id="div-comment-913013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110512-00/?p=10683#comment-913013">
			May 12, 2011 at 8:25 am</a>		</div>

		<p>From a kernel developer perspective, applications only exist to provide test cases for the OS.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-913023">
				<div id="div-comment-913023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110512-00/?p=10683#comment-913023">
			May 12, 2011 at 8:46 am</a>		</div>

		<p>Glad to hear that the kernel developer saw his mistake.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-913033">
				<div id="div-comment-913033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110512-00/?p=10683#comment-913033">
			May 12, 2011 at 9:17 am</a>		</div>

		<p>The kernel wins as long as it does not crash, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joshuaganes even thread-even depth-1" id="comment-913043">
				<div id="div-comment-913043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110512-00/?p=10683#comment-913043">
			May 12, 2011 at 9:36 am</a>		</div>

		<p>I love the autopilot landing analogy. It illustrates exactly how dangerous this one-minded thinking could be. I must admit to getting caught thinking this way in other situations from time to time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-913053">
				<div id="div-comment-913053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110512-00/?p=10683#comment-913053">
			May 12, 2011 at 11:15 am</a>		</div>

		<p>It&#39;s better to kill everyone on the plane and land safely than to crash into a populated area.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-913073">
				<div id="div-comment-913073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110512-00/?p=10683#comment-913073">
			May 12, 2011 at 4:37 pm</a>		</div>

		<p>@John:</p>
<p>Linux overcommit behavior: &quot;We&#39;ve got too many passengers in the air and need to send more. Let&#39;s randomly shoot a plane&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-913083">
				<div id="div-comment-913083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110512-00/?p=10683#comment-913083">
			May 12, 2011 at 4:40 pm</a>		</div>

		<p>Or another variant: &quot;We&#39;re out of cargo containers. Let&#39;s shoot a plane and reuse some of its&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-913093">
				<div id="div-comment-913093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110512-00/?p=10683#comment-913093">
			May 12, 2011 at 11:02 pm</a>		</div>

		<p>Hm, I thought it was: &quot;Let&#39;s eject some of the passengers&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-913193">
				<div id="div-comment-913193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110512-00/?p=10683#comment-913193">
			May 15, 2011 at 4:20 pm</a>		</div>

		<p>SourceInfo si = krnlGetCallerSourceFile();</p>
<p>if (si.QueryCheckInHistory(&quot;rchen&quot;).Count() &gt; 0)</p>
<p>{</p>
<p>&nbsp; &nbsp;if (Rand(1000)==23)</p>
<p>&nbsp; &nbsp;{</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; krnlCrash(&quot;Take that, Raymond!&quot;);</p>
<p>&nbsp; &nbsp;}</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-913243">
				<div id="div-comment-913243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110512-00/?p=10683#comment-913243">
			May 16, 2011 at 9:03 am</a>		</div>

		<p>Don&#39;t mention &quot;Rand&quot;, or you&#39;ll make me restate my favorite method of sorting an array: &nbsp;Step 1: Permute the array randomly. &nbsp;Step 2: Check to see if it&#39;s now sorted. &nbsp;Step 3: If it&#39;s sorted, you&#39;re done; if not, repeat from step 1.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-913743">
				<div id="div-comment-913743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Quantum Bogosort</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110512-00/?p=10683#comment-913743">
			May 18, 2011 at 11:44 am</a>		</div>

		<p>Eh, I never liked that implementation, it&#39;s got an O(n!) run-time. A better step 3 is: If it&#39;s sorted, you&#39;re done; if not, destroy the universe. Sure, you lose n! universes every time you sort, but there&#39;s an infinite amount of those. And it&#39;s O(n) in the survivors!</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

