<html>
<head>
<title>The dialog manager, part 2: Creating the frame window</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The dialog manager, part 2: Creating the frame window</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 30, 2005 / year-entry #81</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050330-00/?p=36023</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The dialog template describes what the dialog box should look like, so the dialog manager walks the template and follows the instructions therein. It's pretty straightforward; there isn't much room for decision-making. You just do what the template says. For simplicity, I'm going to assume that the dialog template is an extended dialog template. This...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The dialog template describes what the dialog box should look like,
so the dialog manager walks the template and follows the
instructions therein.  It's pretty straightforward; there isn't
much room for decision-making. You just do what the template says.</p>
<p>
For simplicity, I'm going to assume that the dialog template
is an
<a HREF=http://msdn.microsoft.com/library/en-us/winui/WinUI/WindowsUserInterface/Windowing/DialogBoxes/DialogBoxReference/DialogBoxStructures/DLGTEMPLATEEX.asp>
extended dialog template</a>.  This is a superset of the
classic
<a HREF=http://msdn.microsoft.com/library/en-us/winui/WinUI/WindowsUserInterface/Windowing/DialogBoxes/DialogBoxReference/DialogBoxStructures/DLGTEMPLATE.asp>
DLGTEMPLATE</a>, so there is no loss of generality.</p>
<p>
Furthermore, I will skip over some of the esoterica
(like the
<a HREF=http://msdn.microsoft.com/library/en-us/winui/WinUI/WindowsUserInterface/Windowing/DialogBoxes/DialogBoxReference/DialogBoxMessages/WM_ENTERIDLE.asp>
WM_ENTERIDLE</a> message)
because that would just
be distracting from the main point.
</p>
<p>
<strong>I am also going to ignore error-checking for the same reason</strong>.
</p>
<p>
Finally, I'm going to assume you already understand the structure of
the various dialog templates and ignore the parsing issues.
(If you've forgotten, you can go back and re-read my series from
last June.
Most important are parts
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/06/21/161375.aspx">2</a>
and
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/06/21/163596.aspx">4</a>,
and the
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/06/24/164737.aspx">summary table</a>
is a handy quick-reference.)
</p>
<p>Okay, here we go.
</p>
<p>
The first order of business is to study the dialog styles and
translate the <code>DS_*</code> styles into <code>WS_*</code> and
<code>WS_EX_*</code> styles.
</p>
<table BORDERCOLOR=black BORDER=1 CELLPADDING=3 CELLSPACING=0
    STYLE="border: 0pt; border-collapse: collapse">
<tr>
<th>Dialog style</th>
<th>Window style</th>
<th>Extended window style</th>
</tr>
<tr>
<td VALIGN=top><code>DS_MODALFRAME</code></td>
<td>&nbsp;</td>
<td VALIGN=top>add <code>WS_EX_DLGMODALFRAME</code><br>
        add <code>WS_EX_WINDOWEDGE</code></td>
</tr>
<tr>
<td VALIGN=top><code><code>DS_CONTEXTHELP</code></code></td>
<td>&nbsp;</td>
<td VALIGN=top>add <code>WS_EX_CONTEXTHELP</code></td>
</tr>
<tr>
<td VALIGN=top><code>DS_CONTROL</code></td>
<td VALIGN=top>remove <code>WS_CAPTION</code><br>
        remove <code>WS_SYSMENU</code></td>
<td VALIGN=top>add <code>WS_EX_CONTROLPARENT</code></td>
</tr>
</table>
<p>
<b>Question</b>: Why does the <code>DS_CONTROL</code> style remove the
<code>WS_CAPTION</code> and <code>WS_SYSMENU</code> styles?
</p>
<p>
<b>Answer</b>: To make it easier for people to convert an
existing dialog into a <code>DS_CONTROL</code> sub-dialog
by simply adding a single style flag.
</p>
<p>
If the template includes a menu, the menu is loaded from
the instance handle passed as part of the creation parameters.
</p>
<pre>
  hmenu = LoadMenu(hinst, &lt;resource identifier in template&gt;);
</pre>
<p>
This is a common theme in dialog creation:  The instance handle
you pass to the dialog creation function is used for all resource-related
activities during dialog creation.
</p>
<p>
The algorithm for getting the dialog font goes like this:
</p>
<pre>
  if (DS_SETFONT) {
    use font specified in template
  } else if (DS_FIXEDSYS) {
    use GetStockFont(SYSTEM_FIXED_FONT);
  } else {
    use GetStockFont(SYSTEM_FONT);
  }
</pre>
<p>
Notice that <code>DS_SETFONT</code> takes priority over
<code>DS_FIXEDFONT</code>.
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/02/07/368423.aspx">
We saw the reason for this a few weeks ago</a>.
</p>
<p>
Once the dialog manager has the font, it is measured so
that its dimensions can be used to convert
dialog units (DLUs) to pixels.
Everything in dialog box layout is done in DLUs.
<a HREF="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/dialogboxes/dialogboxreference/dialogboxfunctions/mapdialogrect.asp">
Here's a reminder if you've forgotten the formula that converts
DLUs to pixels</a>.  In explicit terms:
</p>
<pre>
// 4 xdlu = 1 average character width
// 8 ydlu = 1 average character height
#define XDLU2Pix(xdlu) MulDiv(xdlu, AveCharWidth, 4)
#define YDLU2Pix(ydlu) MulDiv(ydlu, AveCharHeight, 8)
</pre>
<p>
The dialog box size come from the template.
</p>
<pre>
cxDlg = XDLU2Pix(DialogTemplate.cx);
cyDlg = YDLU2Pix(DialogTemplate.cy);
</pre>
<p>
The dialog size in the template is the size of the
<em>client area</em>, so we need to add in the nonclient
area too.
</p>
<pre>
  RECT rcAdjust = { 0, 0, cxDlg, cyDlg };
  AdjustWindowRectEx(&amp;rcAdjust, dwStyle, hmenu != NULL, dwExStyle);
  int cxDlg = rcAdjust.right - rcAdjust.left;
  int cyDlg = rcAdjust.bottom - rcAdjust.top;
</pre>
<p>
How do I know that it's the client area instead of the full
window including nonclient area?  Because if it were the
full window rectangle, then it would be impossible to design
a dialog!
The template designer doesn't know what nonclient
metrics the end-user's system will be set to and therefore
cannot take it into account at design time.
</p>
<p>
(This is a special case of a more general rule:
If you're not sure whether something is true, ask yourself,
"What would the world be like if it were true?"
If you find a logical consequence
that is obviously wrong, then you have
just proven [by contradiction]
that the thing you're considering is indeed not true.
This is an important logical
principle that I will come back to again
and again.
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/02/15/372995.aspx">
In fact, you saw it just a few days ago</a>.
)
</p>
<p>
Assuming the <code>DS_ABSALIGN</code> style is not set,
the coordinates given in the dialog template are
relative to the dialog's parent.
</p>
<pre>
  POINT pt = { XDLU2Pix(DialogTemplate.x),
               YDLU2Pix(DialogTemplate.y) };
  ClientToScreen(hwndParent, &amp;pt);
</pre>
<p>
But what if the caller passed <code>hwndParent = NULL</code>?
In that case, the dialog position is relative to the upper left
corner of the primary monitor.
But <strong>don't do this</strong>.
</p>
<ul>
<li>On a multiple-monitor system, it puts the dialog box on
    the primary monitor, even if your program is running on
    a secondary monitor.</p>
<li>The user may have docked their taskbar at the top or left
    edge of the screen, which will cover your dialog.</p>
<li>Even on a single-monitor system, your program might be running  
    in the lower-right corner of the screen.  Putting your dialog
    at the upper left corner doesn't create a meaningful connection
    between the two.</p>
<li>If two copies of your program are running, their dialog boxes
    will cover each other precisely.
    <a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/03/14/395271.aspx">
    We saw the dangers of this in a previous entry</a>.
</ul>
<p>
Moral of the story: Always pass a <code>hwndParent</code> window
so that the dialog appears in a meaningful location relative to
the rest of your program.
(And
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/02/24/79212.aspx">
don't just grab <code>GetDesktopWindow</code> either</a>!)
</p>
<p>
Okay, we are now all ready to create the dialog:
We have its class, its font, its menu, its size
and position...
</p>
<p>
Oh wait, we have to deal with that subtlety
of dialog box creation discussed earlier:
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/03/11/87941.aspx">
The dialog box is always created initially hidden</a>.
</p>
<pre>
  BOOL fWasVisible = dwStyle &amp; WS_VISIBLE;
  dwStyle &amp;= ~WS_VISIBLE;
</pre>
<p>
<p>
The dialog class and title come from the template.
Pretty much everyone just uses the default dialog class,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/11/13/55662.aspx">
although I explained in an earlier article how
you might use a custom dialog class</a>.
</p>
<p>Okay, now we have the information necessary to create the window.
</p>
<pre>
 HWND hdlg = CreateWindowEx(dwExStyle, pszClass,
      pszCaption, dwStyle &amp; 0xFFFF0000, pt.x, pt.y,
      cxDlg, cyDlg, hwndParent, hmenu, hinst, NULL);
</pre>
<p>
Notice that we filter
out all the low style bits (per-class) since we already
translated the <code>DS_*</code> styles into "real" styles.
</p>
<p>
This is why your dialog procedure doesn't get
the window creation messages like <code>WM_CREATE</code>.
At the time the frame is created, the dialog procedure
hasn't yet entered the picture.
Only after the frame is created can the dialog manager
attach the dialog procedure.
</p>
<pre>
 // Set the dialog procedure
 SetWindowLongPtr(hdlg, DWLP_DLGPROC, (LPARAM)lpDlgProc);
</pre>
<p>
The dialog manager does some more fiddling at
this point, based on the dialog template styles.
The template may have asked for a window context help ID.
And if the template did not specify window styles that
permit resizing, maximizing or minimizing, the associated
menu items are removed from the dialog box's system menu.
</p>
<p>
And it sets the font.</p>
<pre>
  SetWindowFont(hdlg, hf, FALSE);
</pre>
<p>
This is why the first message your dialog procedure
receives happens to be <code>WM_SETFONT</code>: It is the first
message sent after the <code>DWLP_DLGPROC</code> has been set.
Of course, this
behavior can change in the future; you shouldn't
rely on message ordering.
</p>
<p>
Okay, the dialog frame is now open for business.
Next up: Creating the controls.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-268503">
				<div id="div-comment-268503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BradC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050330-00/?p=36023#comment-268503">
			March 30, 2005 at 7:42 am</a>		</div>

		<p>Good God.</p>
<p>I think I&#8217;ll stick with my plain old msgbox(), thank you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-268513">
				<div id="div-comment-268513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050330-00/?p=36023#comment-268513">
			March 30, 2005 at 8:22 am</a>		</div>

		<p>What hwndParent do you choose if the dialog is the main window (first created window) of your application?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-268523">
				<div id="div-comment-268523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050330-00/?p=36023#comment-268523">
			March 30, 2005 at 8:49 am</a>		</div>

		<p>Read the article again. Notice that the hwndParent is passed to CreateWindow. What hwndParent do you choose if you call CreateWindow for your main window?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-268553">
				<div id="div-comment-268553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050330-00/?p=36023#comment-268553">
			March 30, 2005 at 11:47 am</a>		</div>

		<p>GetDesktopWindow() ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-268573">
				<div id="div-comment-268573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CW User</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050330-00/?p=36023#comment-268573">
			March 30, 2005 at 1:34 pm</a>		</div>

		<p>No, yoy can&#8217;t pass GetDesktopWindow(), you need to pass what malloc(0xFFFFFFFF) returns, see in &quot;Writing Secure Code, 2nd ed&quot;, page 196.</p>
<p>Anyway, thank you Raymond for the articles. I&#8217;ve built my own Dialog Manager and I hope your current series can help me make it somewhat better.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-268593">
				<div id="div-comment-268593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050330-00/?p=36023#comment-268593">
			March 30, 2005 at 2:24 pm</a>		</div>

		<p>BradC:  A message box is a specialized dialog box, so it goes through all of the same stuff.  However, all of this is implemented by Windows for you&#8211;I don&#8217;t see what the issue is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-268603">
				<div id="div-comment-268603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.lionsky.com' rel='external nofollow' class='url'>KenZero</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050330-00/?p=36023#comment-268603">
			March 30, 2005 at 2:33 pm</a>		</div>

		<p>I am trying to control features in the Parent Window from my Dialog Box.  Do I have to set a variable or can I send a command.  I am just trying to change colors and some text values in a Flight Simulation Trainer.  I was not sure if I should just set a global variable and then refresh the Parent after the focus was off of the Dialog Window.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-268613">
				<div id="div-comment-268613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tolaris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050330-00/?p=36023#comment-268613">
			March 30, 2005 at 3:35 pm</a>		</div>

		<p>Really hoping this series of articles sheds some light on problem i currently have&#8230;</p>
<p>am adding dialog boxes as child windows to a CWnd-based window. Yet, there&#8217;s a problem with Tab- and arrow-keys navigation. Instead of stepping through all controls in the main window and included child dialog windows in a loop (like it happens when i add the child dialogs to &#8216;regular&#8217; dialog) the keyboard focus becomes trapped in first child dialog window it encounters, looping then just through the controls of this child dialog and never getting out of it.</p>
<p>the main CWnd has WS_EX_CONTROLPARENT style, the child dialogs have the WS_CHILD, DS_CONTROL and the WS_EX_CONTROLPARENT styles as well&#8230; can&#8217;t figure out what should be added/ removed/ altered to get the focus behave just like for dialogs-in-dialog case, and what&#8217;s causing the current, odd behaviour in the first place. :/</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-268623">
				<div id="div-comment-268623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050330-00/?p=36023#comment-268623">
			March 30, 2005 at 3:37 pm</a>		</div>

		<p>Sorry, tolaris, that won&#8217;t be covered in this series. That&#8217;s going to have to wait until I feel like going in depth into IsDialogMessage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-268643">
				<div id="div-comment-268643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tolaris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050330-00/?p=36023#comment-268643">
			March 30, 2005 at 4:01 pm</a>		</div>

		<p>Gah, just my luck =)</p>
<p>a call to PreTranslateInput() in the parent CWnd&#8217;s overriden PreTranslateMessage() was one of the things i tried, but given MSDN left me with very vague understanding of how the whole navigation thing is done, obviously that didn&#8217;t result in anything useful. Oh well, will just put this off &#8217;till better times and work on other parts of functionality meantime&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-268663">
				<div id="div-comment-268663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rabbit</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050330-00/?p=36023#comment-268663">
			March 30, 2005 at 7:55 pm</a>		</div>

		<p>I&#8217;m curious too:<br />
<br />What hwndParent do you choose if you call CreateWindow for your main window? </p>
<p>If I&#8217;m a new app, I don&#8217;t have an invocation point, so unless I sniff where the mouse is, wouldnt&#8217; I always show up on the primary desktop?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-268673">
				<div id="div-comment-268673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050330-00/?p=36023#comment-268673">
			March 30, 2005 at 9:35 pm</a>		</div>

		<p>For my main window, I&#8217;ve always just used NULL as the parent, and it seems to work just fine&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-268683">
				<div id="div-comment-268683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.apptranslator.com' rel='external nofollow' class='url'>Serge Wautier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050330-00/?p=36023#comment-268683">
			March 30, 2005 at 11:39 pm</a>		</div>

		<p>Aha !! Some time in 1992, while learning PM programming in Petzold for OS/2, I just wondered why dialogs don&#8217;t receive a WM_CREATE.<br />
<br />Today, 13 years later, I learned why&#8230;</p>
<p>Thanks Raymond!<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-268693">
				<div id="div-comment-268693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hmmmmm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050330-00/?p=36023#comment-268693">
			March 31, 2005 at 1:38 am</a>		</div>

		<p>but couldn&#8217;t they put the SetWindowLongPtr(hdlg, DWLP_DLGPROC, (LPARAM)lpDlgProc); in the WM_CREATE handler (or before) and call lpDlgProc  directly for this message?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-268993">
				<div id="div-comment-268993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Seth McCarus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050330-00/?p=36023#comment-268993">
			April 1, 2005 at 7:36 am</a>		</div>

		<p>tolaris, this thread may help you out:</p>
<p><a target="_new" href="http://groups-beta.google.com/group/comp.os.ms-windows.programmer.controls/browse_frm/thread/476870c9fe039ab2/c7a54e1fca16eb94#c7a54e1fca16eb94" rel="nofollow">http://groups-beta.google.com/group/comp.os.ms-windows.programmer.controls/browse_frm/thread/476870c9fe039ab2/c7a54e1fca16eb94#c7a54e1fca16eb94</a><br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-271203">
				<div id="div-comment-271203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/04/18/409205.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050330-00/?p=36023#comment-271203">
			April 18, 2005 at 9:03 am</a>		</div>

		<p>It specifies where the class name should be looked up.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

