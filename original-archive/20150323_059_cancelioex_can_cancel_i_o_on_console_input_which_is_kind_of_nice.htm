<html>
<head>
<title>CancelIoEx can cancel I/O on console input, which is kind of nice</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>CancelIoEx can cancel I/O on console input, which is kind of nice</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 23, 2015 / year-entry #60</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>24</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's Little Program asks you to type something, but gives you only two seconds to do it. This is not interesting in and of itself, but it shows you how to cancel console I/O. There is no motivation for this exercise because Little Programs come with little to no motivation. Okay, fine, here's the motivation....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program asks you to type something,
but gives you only two seconds to do it.
This is not interesting in and of itself,
but it shows you how to cancel console I/O.
There is no motivation for this exercise
because Little Programs come with little to no motivation.
</p>
<p>
Okay, fine, here's the motivation.
</p>
<blockquote CLASS=q><p>
We have a GUI application that has a debug console.
When the user exits the application, we cannot shut down cleanly
because the debug console is stuck on a read from <code>stdin</code>.
We want to unstick the thread gently.
We don't want to use
<code>Generate&shy;Console&shy;Ctrl&shy;Event</code>
with <code>CTRL_<wbr>C_<wbr>EVENT</code> because that will send the
event to all processes using the same console,
but we don't want other processes to be affected.
</p>
</blockquote>
<p>
Okay, now our Little Program.
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;stdio.h&gt; // horrors! mixing C and C++!

DWORD CALLBACK ThreadProc(void *)
{
 Sleep(2000);
 CancelIoEx(GetStdHandle(STD_INPUT_HANDLE), nullptr);
 return 0;
}

int __cdecl wmain(int, wchar_t **)
{
 DWORD scratch;
 HANDLE h = CreateThread(nullptr, 0, ThreadProc,
                         nullptr, 0, &amp;scratch);
 if (h) {
  printf("type something\n");
  char buffer[80];
  if (fgets(buffer, 80, stdin) != nullptr) {
   printf("you typed %s", buffer);
  } else if (feof(stdin)) {
   printf("end-of-file reached\n");
  } else if (ferror(stdin)) {
   printf("error occurred\n");
  }
 }
 return 0;
}
</pre>
<p>
If you type something within two seconds, it is reported
back to you,
but if you take too long, then the
<code>Cancel&shy;Io&shy;Ex</code> cancels the console read,
and you get an error back.
</p>
<p>
If you want to continue, you'll have to
<code>clearerr(stdin)</code>,
but if you just want to unstick the code that is
performing the read (so that you can get the program to
exit cleanly), then leaving <code>stdin</code>
in an error state is probably better.
</p>
<p>
(If you had used <code>Read&shy;File</code> instead
of <code>fgets</code>, the read would have failed
with error code
<code>ERROR_<wbr>OPERATION_<wbr>ABORTED</code>,
as documented by <code>Cancel&shy;Io&shy;Ex</code>.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1180953">
				<div id="div-comment-1180953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1180953">
			March 23, 2015 at 7:51 am</a>		</div>

		<p>Thanks! This will allow me to get rid of my ugly hack of working on a duplicated handle and closing it from a thread.</p>
<p>Yuhong Bao mode: This wouldn&#39;t be a problem if console handles with ENABLE_LINE_INPUT would wait for a full line before becoming signaled!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1180963">
				<div id="div-comment-1180963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Boris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1180963">
			March 23, 2015 at 8:24 am</a>		</div>

		<p>I&#39;m not getting any interruptions. However long I take, the result is &quot;you typed &lt;whatever I typed&gt;&quot;.</p>
<p>(I&#39;ve never done professional Win32 programming, but I used VS 2012 to open a Win32 Console Application project, pasted your code as-is with the additional include of &quot;stdafx.h&quot; at the top, compiled the app without any issues and ran it from cmd.exe.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1180973">
				<div id="div-comment-1180973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1180973">
			March 23, 2015 at 9:27 am</a>		</div>

		<p>Is CancelIO guaranteed to work on console handles or is this an implementation detail? What kernel handle type are console handles anyway? And has this changed over time?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1180983">
				<div id="div-comment-1180983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1180983">
			March 23, 2015 at 9:36 am</a>		</div>

		<p>If &quot;Little Programs&quot; don&#39;t need motivation, then you don&#39;t need to supply motivation! &nbsp;:-) &nbsp;Programming techniques are often interesting in themselves, of course, or none of us would be here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1180993">
				<div id="div-comment-1180993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1180993">
			March 23, 2015 at 9:43 am</a>		</div>

		<p>The REAL horror is but mixing the Win32 API with the C runtime!</p>
<p>Is the equivalence of the stream handle &quot;stdin&quot; provided by the C runtime and the handle returned from GetStdHandle(STD_INPUT_HANDLE) part of the contract?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181013">
				<div id="div-comment-1181013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1181013">
			March 23, 2015 at 9:47 am</a>		</div>

		<p>@Medinoc: Good hack to get rid of. Having tried it, I can say it can hang if you have the single processor NTOSKRNL.EXE.</p>
<p>@Stefan Kanthak: Yes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00037ffe86ae4929 even thread-even depth-1" id="comment-1181023">
				<div id="div-comment-1181023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Vadim+Zeitlin' rel='external nofollow' class='url'>Vadim Zeitlin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1181023">
			March 23, 2015 at 11:58 am</a>		</div>

		<p>This doesn&#39;t work when using MSVC 12 to compile the program under Windows 7, the call to CancelIoEx() seems to be just ignored. Interestingly, it does work if input is redirected and doesn&#39;t really come from console.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181033">
				<div id="div-comment-1181033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1181033">
			March 23, 2015 at 12:07 pm</a>		</div>

		<p>@mark: Console handles are file handles. &nbsp;<a rel="nofollow" target="_new" href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms724485(v=vs.85).aspx">msdn.microsoft.com/&#8230;/ms724485(v=vs.85).aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181043">
				<div id="div-comment-1181043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1181043">
			March 23, 2015 at 1:50 pm</a>		</div>

		<p>@Rob: They&#39;re not. &nbsp;They&#39;re values that are recognized by kernel32.dll APIs and special-cased. &nbsp;Consoles are actually implemented using LPCs over NT port objects.</p>
<p>Raymond, did this change in more-recent Windows versions than Windows 7?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181053">
				<div id="div-comment-1181053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1181053">
			March 23, 2015 at 6:08 pm</a>		</div>

		<p>@Joshua: Really? Where?</p>
<p>&lt;<a rel="nofollow" target="_new" href="https://msdn.microsoft.com/en-us/library/c565h7xx.aspx&gt;" rel="nofollow">msdn.microsoft.com/&#8230;/c565h7xx.aspx&gt;</a> only says &quot;These streams are directed to the console (keyboard and screen) by default.&quot;: what does &quot;directed to&quot; mean is but left open.</p>
<p>There is NO explicit statement that (the implementation of) FILE* stdin etc. use the handle returned from GetStdHandle(STD_INPUT_HANDLE) etc.</p>
<p>FILE *stdin etc. might as well use handles returned from CreateFile(TEXT(&quot;CONIN$&quot;), &#8230;) etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181073">
				<div id="div-comment-1181073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">qb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1181073">
			March 24, 2015 at 1:23 am</a>		</div>

		<p>I think Stefan Kanthak is right and some versions of MSVC runtime could open their std handles directly instead of using GetStdHandle, and as a consequence this trick doesn&#39;t work. Same for MinGW runtime that comes with 32-bit GCC 4.8.1.</p>
<p>Replacing GetStdHandle(STD_INPUT_HANDLE) with _get_osfhandle(stdin) should probably work, but I cannot test it at the moment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181093">
				<div id="div-comment-1181093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">curious</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1181093">
			March 24, 2015 at 6:33 am</a>		</div>

		<p>@boris. So assuming you&#39;ve decided to debug the program, &nbsp;What did your error checking code tell you?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181183">
				<div id="div-comment-1181183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wizou</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1181183">
			March 24, 2015 at 8:31 am</a>		</div>

		<p>Yup, it doesn&#39;t seem to work under Windows 7 SP1, unfortunately :(</p>
<p>I&#39;m using VS2010 right now, and I tried using ReadFile as well (so it is not related to MSVC runtime)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181243">
				<div id="div-comment-1181243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1181243">
			March 24, 2015 at 10:14 am</a>		</div>

		<p>Odd, because it worked fine for me, Win 8.1. &nbsp;But I didn&#39;t make a project, I just pasted it into a Notepad window, saved it as a .cpp file, and then ran cl from the command line.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle even thread-even depth-1" id="comment-1181263">
				<div id="div-comment-1181263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1181263">
			March 24, 2015 at 12:31 pm</a>		</div>

		<p>I&#39;m wondering if the people who are saying it isn&#39;t working are running the program via Visual Studio&#39;s built-in console window as opposed to an actual command shell. &nbsp;There may be a semantical difference in the kind of input handle being passed into the program from Visual Studio.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181103">
				<div id="div-comment-1181103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JamesJohnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1181103">
			March 24, 2015 at 7:00 am</a>		</div>

		<p>The C runtime&#39;s stdin/stdout files are just wrappers around GetStdHandle. &nbsp;I&#39;ve observed this myself in the past using an API tracing tool. &nbsp;Why the big controversy? &nbsp;What other stdin could the C runtime possibly be using if not the one from GetStdHandle? &nbsp;(&quot;MSVC runtime could open their std handles directly instead of using GetStdHandle&quot; &#8212;&gt; what does &quot;directly&quot; mean, in Win32 API terms?)</p>
<p>That said, if I remember from my tracing, the handles are often duplicated using DuplicateHandle. &nbsp;But&#8230; &quot;The duplicate handle refers to the same object as the original handle. Therefore, any changes to the object are reflected through both handles.&quot;</p>
<p>Of course one should not assume &quot;stdin == GetStdHandle(STD_INPUT_HANDLE)&quot; i.e. that the returned pointers/handles compare identical. &nbsp;stdin is a &quot;FILE*&quot; and GetStdHandle is a HANDLE. &nbsp;Presumably, the &quot;stdin&quot; could be the return value from GetStdHandle but with additional runtime-specific information attached to it. &nbsp;But, both values ultimately refer to the same object&#8230; &nbsp;Raymond didn&#39;t mix anything up&#8230; the HANDLE is passed to Win32 API and the FILE* is passed to the CRT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1181203">
				<div id="div-comment-1181203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1181203">
			March 24, 2015 at 9:30 am</a>		</div>

		<p>The thing that *should* compare identical (assuming you don&#39;t fiddle with the handles first would be this test:</p>
<p>_get_osfhandle(_fileno(stdin)) == GetStdHandle(STD_INPUT_HANDLE)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181313">
				<div id="div-comment-1181313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1181313">
			March 24, 2015 at 6:33 pm</a>		</div>

		<p>Once again, Raymond&#39;s blog serves as a proper extension of MSDN. &nbsp;Nowhere could you figure out that CancelIoEx works on consoles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181363">
				<div id="div-comment-1181363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wizou</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1181363">
			March 25, 2015 at 3:30 am</a>		</div>

		<p>@MNGoldenEagle: I tested under W7 SP1 with gets &amp; ReadFile, in Debug &amp; Release, inside &amp; outside Visual Studio 2010, and even with a simple &quot;cl&quot; command line build.</p>
<p>That&#39;s too bad because Raymond&#39;s trick would have been a neat solution to the problem I have with the project I&#39;m currently working on.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181413">
				<div id="div-comment-1181413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1181413">
			March 25, 2015 at 11:53 am</a>		</div>

		<p>Yeah, it looks like Raymond&#39;s information is specific to Windows 8 (or 8.1?) and later. &nbsp;As I said earlier, console handles, at least apparently in Windows 7 and older, are fake handles that are special-cased by various APIs in kernel32.dll. &nbsp;WriteFile, etc. recognize console handles and translate them to NT port (LPC) calls. &nbsp;They&#39;re not true kernel handles. &nbsp;It looks like that changed in Windows 8.</p>
<p>@Someone: For technical correctness, use %lu instead of %u for GetLastError(), since DWORD is a typedef for &quot;unsigned long&quot;. &nbsp;It&#39;s technically undefined behavior to use %u&#8230;not that it would ever fail with Visual C++.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181373">
				<div id="div-comment-1181373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1181373">
			March 25, 2015 at 4:59 am</a>		</div>

		<p>Under Win7, CancelIoEx() fails with ERROR_INVALID_HANDLE. (Even Little Programs should at least check the return code of every function call.)</p>
<p>I tried with this (and cl.exe at command line):</p>
<p>#include &lt;windows.h&gt;</p>
<p>#include &lt;stdio.h&gt;</p>
<p>DWORD CALLBACK ThreadProc(void *)</p>
<p>{</p>
<p> &nbsp;Sleep(2000);</p>
<p> &nbsp;if (GetStdHandle(STD_INPUT_HANDLE) == INVALID_HANDLE_VALUE) {</p>
<p>	fprintf(stderr, &quot;GetStdHandle =&gt; %un&quot;, GetLastError());</p>
<p>	return 1;</p>
<p> &nbsp;}</p>
<p> &nbsp;if (!CancelIoEx(GetStdHandle(STD_INPUT_HANDLE), NULL)) {</p>
<p>	fprintf(stderr, &quot;CancelioEx =&gt; %un&quot;, GetLastError());</p>
<p>	return 1;</p>
<p> &nbsp;}</p>
<p> &nbsp;return 0;</p>
<p>}</p>
<p>int __cdecl wmain(int, wchar_t **)</p>
<p>{</p>
<p> &nbsp;DWORD scratch;</p>
<p> &nbsp;HANDLE h = CreateThread(NULL, 0, ThreadProc, NULL, 0, &amp;scratch);</p>
<p> &nbsp;if (!h) {</p>
<p>	fprintf(stderr, &quot;CreateThread =&gt; %un&quot;, GetLastError());</p>
<p>	return 1;</p>
<p> &nbsp;}</p>
<p> &nbsp;DWORD bytes;</p>
<p> &nbsp;char buffer[80];</p>
<p> &nbsp;if (ReadFile(GetStdHandle(STD_INPUT_HANDLE), buffer, 80, &amp;bytes, NULL)) {</p>
<p> &nbsp; &nbsp;buffer[bytes] = &#39; &#39;;</p>
<p> &nbsp; &nbsp;printf(&quot;you typed %sn&quot;, buffer);</p>
<p> &nbsp;} else {</p>
<p> &nbsp; &nbsp;printf(&quot;ReadFile =&gt; %un&quot;, GetLastError());</p>
<p> &nbsp;}</p>
<p> &nbsp;return 0;</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1181473">
				<div id="div-comment-1181473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dirk.gently</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1181473">
			March 26, 2015 at 4:32 am</a>		</div>

		<p>Could you write a Little Program that implements blocking keyboard reads (say, like Console.ReadKey()) but on a Windows Form?</p>
<div class="post">[<em>I can&#39;t make any sense of that question. Windows Forms are not console apps. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181493">
				<div id="div-comment-1181493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JamesJohnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1181493">
			March 26, 2015 at 4:58 am</a>		</div>

		<p>@Someone: &nbsp;Well, that&#39;s too bad. &nbsp;I tried your program and got the same result of CancelIoEx returning ERROR_INVALID_HANDLE. &nbsp;I also tried calling DuplicateHandle to duplicate the console input handle (i.e. so I wasn&#39;t using the constant value returned by GetStdHandle). &nbsp;DuplicateHandle succeeds but still I get the same error result from CancelIoEx. &nbsp;I&#39;m on Win 7 SP1.</p>
<p>Must be an improvement in Windows 8 or 8.1&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1182033">
				<div id="div-comment-1182033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">You Did It Again</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150323-00/?p=44413#comment-1182033">
			March 27, 2015 at 6:48 pm</a>		</div>

		<p>I knew if I waited long enough, you would get around to solving this problem for me. &nbsp;I was so tired of having to type at least one char and pressing ENTER before it would get out of reading stdin. &nbsp;Thanks!! </p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

