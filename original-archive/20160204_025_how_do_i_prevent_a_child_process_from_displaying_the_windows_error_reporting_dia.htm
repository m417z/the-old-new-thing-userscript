<html>
<head>
<title>How do I prevent a child process from displaying the Windows Error Reporting dialog?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I prevent a child process from displaying the Windows Error Reporting dialog?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 4, 2016 / year-entry #26</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Take advantage of the fact that SetErrorMode is inherited.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer wanted to know if there was a way to disable Windows
Error Reporting for a child process.
Their scenario was that they had a main program which runs a child
program that is expected to crash (because it's a unit test).
Normally, this would result in the Windows Error Report dialog appearing,
offering to send a crash report to Microsoft.
This dialog is unwanted, since it makes it difficult to run the
unit test as part of an automated script,
plus there's no point sending crash reports for a unit test that
is expected to crash.
</p>
<p>
One person suggested using the
<a HREF="https://msdn.microsoft.com/en-us/library/windows/desktop/bb513617(v=vs.85).aspx">
<code>Wer&shy;Add&shy;Excluded&shy;Application</code> function</a>
to add the program to the list of programs to be excluded
from error reporting, and then call
the
<code>Wer&shy;Remove&shy;Excluded&shy;Application</code>
function when the test completes.
There are some problems with this approach:
</p>
<ul>
<li>
The name of your unit test application may happen to match that
of a legitimate application, and
the <code>Wer&shy;Add&shy;Excluded&shy;Application</code> function
takes only the file name, not a full path.
You can try to arrange for your
unit test name to be sufficiently unique that this sort of collision
is unlikely.</p>
<li>
If the test harness crashes, then 
<code>Wer&shy;Remove&shy;Excluded&shy;Application</code>
will never get called,
and then the unit test ends up excluded permanently.</p>
<li>
Suppose two copies of the unit test are running.
Given that you're doing automated testing, there's a decent chance
that this will happen;
for example, the automated system may be running unit tests as part
of a gated check-in system, and multiple check-ins could be undergoing
validation at once.
In that case,
both test harnesses will call
<code>Wer&shy;Add&shy;Excluded&shy;Application</code>
when they start up,
and the first one to finish will call
<code>Wer&shy;Remove&shy;Excluded&shy;Application</code>.
This rips the registration out from under the second instance,
which is still running,
and the crash dialog will appear.
</ul>
<p>
Basically, we are applying a global solution to a local problem.
</p>
<p>
Better to apply a local solution:
Since the error mode is inherited by child processes,
you can have the test harness call
<code>Set&shy;Error&shy;Mode</code> with the
<code>SEM_NO&shy;GP&shy;FAULT&shy;ERROR&shy;BOX</code> flag
to disable the error reporting dialog for itself and its children.
</p>
<p>
Here's a Little Program to illustrate.
Remember that Little Programs do little to no error checking.
In this case, the Little Program also leaks handles!</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;

int main(int argc, char**argv)
{
    printf("Error mode is %d\n", GetErrorMode());
    if (argc == 1) {
        TCHAR buf[256];
        GetModuleFileName(nullptr, buf, 256);
        STARTUPINFO si = { sizeof(si) };
        PROCESS_INFORMATION pi;
        SetErrorMode(SEM_NOGPFAULTERRORBOX);
        printf("Spwaning child, error mode is %d\n", GetErrorMode());
        CreateProcess(buf, TEXT("a b c d"), nullptr, nullptr, FALSE,
            0, nullptr, nullptr, &amp;si, &amp;pi);
        WaitForSingleObject(pi.hProcess, INFINITE);
        printf("Done\n");
    } else {
        DebugBreak();
    }
    return 0;
}
</pre>
<p>
If you run this program,
it will start by reporting that its error mode is zero,
and then it changes to 2 (which is the value of the
<code>SEM_NO&shy;GP&shy;FAULT&shy;ERROR&shy;BOX</code> flag),
and then the child process will report that its error mode is 2
(inherited), and then it will crash by invoking a nonexistent
debugger.
Since error dialogs are disabled, the child process will exit
silently.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1225791">
				<div id="div-comment-1225791" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225791">
			February 4, 2016 at 7:47 am</a>		</div>

		<p>What I&#8217;ve never understood is, why is that there by default anyway?  If I have a bug in my code, and I publish it, and someone uses it and it crashes on their system, what can *Microsoft* do with the debug information from my crashed program?</p>
<p>If they could forward it on to me, that would be useful, but then again, pretty much any developer with the skills to know what to do with a crash report is going to build an automated crash reporting feature into their own program anyway, one that&#8217;s going to gather more domain-specific information than a generic Windows crash dump, so what good does it do me to register with Microsoft for something like that?  And if I don&#8217;t register with Microsoft, why is this feature that does me no good pestering my users?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1225792">
				<div id="div-comment-1225792" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225792">
			February 4, 2016 at 8:10 am</a>		</div>

		<p>Just because the crash is in your app doesn&#8217;t mean the bug is in your app. Often, apps expose bugs in Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1225811">
				<div id="div-comment-1225811" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BZ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225811">
			February 4, 2016 at 8:24 am</a>		</div>

		<p>I think they *do* forward crash reports to developers. Isn&#8217;t there some sort of program you can opt in to for this?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fleet-command odd alt depth-3" id="comment-1225854">
				<div id="div-comment-1225854" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225854">
			February 4, 2016 at 8:59 am</a>		</div>

		<p>Was. No more. Microsoft said &#8220;shoo, developers!&#8221; after Windows 8.</p>
<p>I don&#8217;t know about Metro-style apps though. There could be a program for them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-tautvydas-zilys even depth-3" id="comment-1225891">
				<div id="div-comment-1225891" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Tautvydas+Zilys' rel='external nofollow' class='url'>Tautvydas Zilys</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225891">
			February 4, 2016 at 9:46 am</a>		</div>

		<p>They do. If you sign your binary, you can get all WER crash reports related to it right to you. That&#8217;s how we catch and fix many issues, which would normally go unreported.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1225861">
				<div id="div-comment-1225861" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225861">
			February 4, 2016 at 9:11 am</a>		</div>

		<p>There are drawbacks to embedding your own crash reporting into your program.  The main one is that it&#8217;s the crash reporting is best done from an external process.  Having a process try to report its own crashes can be problematic because the state of the process is uncertain; it may fail to send a report for some kinds of crashes.</p>
<p>So, to do your own crash reporting, you should install a service or otherwise spin up a watchdog process.</p>
<p>But, as a user, I&#8217;d much prefer it if all of the apps I run could share such a single crash-reporting service rather than having one per application (or, if you&#8217;re lucky, one per vendor).  WER makes that possible.  Software vendors can get access to dumps of their collected by WER if they register with Microsoft and meet certain quality bars.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fleet-command even depth-3 parent" id="comment-1225902">
				<div id="div-comment-1225902" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225902">
			February 4, 2016 at 11:15 am</a>		</div>

		<p>Firefox and Chrome report their own crashes without installing a service or having a watchdog process. crashreporter.exe runs every time after the crash. AVG products do the same thing.</p>
<p>My people have been pressuring me to avoid sending any crash data to Microsoft after this whole privacy sensation surrounding Microsoft, although I did nothing about it.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1225981">
				<div id="div-comment-1225981" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225981">
			February 4, 2016 at 4:08 pm</a>		</div>

		<p>Google Chrome relies on GoogleCrashHandler.exe, of which there are 32-bit and 64-bit versions.  On my machine, they are set to run all the time unless you turn off the telemetry option in Chrome.  The processes are small and lightweight, so it&#8217;s not a big deal.</p>
<p>But if every application or vendor required and extra process or two, it could add up.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fleet-command even depth-5" id="comment-1225983">
				<div id="div-comment-1225983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225983">
			February 5, 2016 at 12:51 am</a>		</div>

		<p>Because it sends usage statistics too, not because crash handling needs it running all the times.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1225931">
				<div id="div-comment-1225931" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225931">
			February 4, 2016 at 2:08 pm</a>		</div>

		<p>Last time I tried to get useful data from WER (through the winqual site) the processing queue was at least a week long.  A week is too long to wait.  Then you have to actively get on the winqual site to browse the results.  Rolling your own allows for immediate feedback, notification, and customized bucketing.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-hankhein even depth-4 parent" id="comment-1225951">
				<div id="div-comment-1225951" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Henri+Hein' rel='external nofollow' class='url'>Henri Hein</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225951">
			February 4, 2016 at 2:58 pm</a>		</div>

		<p>Interesting.  The only case when I would have wanted crash reports within a week is if I&#8217;m sharing an alpha release in-house or to a particularly close partner or customer.  In those cases, if the users see any crashes, I can get the DMP files directly from them.  </p>
<p>The WER program is useful to get data from the full corpus of your user-base.  For instance, how many users are still using an old version known to be unstable?  Or, say the program becomes unstable only after weeks of continuous usage on a system used for other many things.  In those cases, a week is not really a useful timeframe.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1225971">
				<div id="div-comment-1225971" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225971">
			February 4, 2016 at 3:22 pm</a>		</div>

		<p>This was for a small MMOG: a highly complex codebase with relatively frequent updates and a test team insufficient to cover all possible user scenarios and edge cases.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hankhein even depth-2" id="comment-1225942">
				<div id="div-comment-1225942" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Henri+Hein' rel='external nofollow' class='url'>Henri Hein</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225942">
			February 4, 2016 at 2:49 pm</a>		</div>

		<p>Microsoft does indeed make crash reports available to developers, and it&#8217;s an outstanding program.  It&#8217;s really easy to set it up, and it gives me visibility into what crashes users are seeing.  It tells me how often my program crashes &#8216;in the wild,&#8217; what the biggest source of crashes are, and where exactly in the code those crashes occur.  (It&#8217;s also a great feeling when I see that pretty much all the crashes are in third-party code&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1225823">
				<div id="div-comment-1225823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BZ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225823">
			February 4, 2016 at 8:33 am</a>		</div>

		<p>What I want to know is when would a crash be an expected outcome in a unit test? Unit tests are modeling real life situations. Is crashing in a real life scenario ever the right thing to do (yes, I know you shouldn&#8217;t attempt to stop a crash in progress, but that&#8217;s when it&#8217;s already in progress)? And if you don&#8217;t control the child process and it crashes under certain circumstances, why would you want to test for this? Would something be wrong if the child process unexpectedly *didn&#8217;t* crash?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1225832">
				<div id="div-comment-1225832" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225832">
			February 4, 2016 at 8:40 am</a>		</div>

		<p>To test the crash handlers of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1225841">
				<div id="div-comment-1225841" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225841">
			February 4, 2016 at 8:48 am</a>		</div>

		<p>I think you are confusing expectation with something that happens every time.</p>
<p>9 times out of 10 the test units expose bugs, but hopefully most of the time it will actually function correctly. But in cases it doesn&#8217;t you do not want to clutter the screen with lots of useless dialogs</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1225864">
				<div id="div-comment-1225864" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225864">
			February 4, 2016 at 9:24 am</a>		</div>

		<p>You might want to verify that the component correctly detects an invalid condition (e.g., buffer overrun), and the component is designed so that invalid conditions crash the process.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1225851">
				<div id="div-comment-1225851" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DoomMuffins</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225851">
			February 4, 2016 at 8:58 am</a>		</div>

		<p>This is still a global solution to a local problem, only it&#8217;s global to the parent process rather than the entire system. A different thread in the parent process may suffer the side effects, just as it would if you were modifying your own environment variables so that a child process you&#8217;re going to create might inherit them. In the case of the environment variables there&#8217;s a correct solution in the form of the relevant parameter to CreateProcess. In the case of the error mode, there isn&#8217;t (as far as I know).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1225871">
				<div id="div-comment-1225871" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225871">
			February 4, 2016 at 9:25 am</a>		</div>

		<p>True, but it&#8217;s less global than the machine-global solution. The purely local solution would be for the unit test itself to make the SetErrorMode call.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1225882">
				<div id="div-comment-1225882" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DoomMuffins</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225882">
			February 4, 2016 at 9:37 am</a>		</div>

		<p>That assumes you have control over the code of the executable you&#8217;re running (or at least some part of it), otherwise the only robust solution would be having a sacrificial process do your bidding.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even depth-2" id="comment-1225911">
				<div id="div-comment-1225911" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225911">
			February 4, 2016 at 1:04 pm</a>		</div>

		<p>Win7 added SetThreadErrorMode but I assume CreateProcess inherits the process value?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1225881">
				<div id="div-comment-1225881" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zack</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225881">
			February 4, 2016 at 9:29 am</a>		</div>

		<p>I&#8217;m wondering if there is any way to turn off error dialogs _but_ also cause the information that would have appeared in the error dialog to get logged somewhere a monitoring program can pick it up.  For example, again in the context of a test suite: you don&#8217;t want the program being tested to pop up a dialog box if it can&#8217;t find all of its required DLLs, but you probably _do_ want to log the name of the missing DLL.  SEM_FAILCRITICALERRORS turns off the dialog box in this case, but as far as I can tell, the dialog box is the only place the missing DLL&#8217;s name is reported&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1225921">
				<div id="div-comment-1225921" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225921">
			February 4, 2016 at 1:09 pm</a>		</div>

		<p>For anyone actually doing this in their own program that is more complex than this example, it is important to call SetErrorMode twice like Raymond does in a previous post about this topic: <a href="https://blogs.msdn.microsoft.com/oldnewthing/20040727-00/?p=38323/" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20040727-00/?p=38323/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1225993">
				<div id="div-comment-1225993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian Nixon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1225993">
			February 5, 2016 at 4:58 am</a>		</div>

		<p>Is there a way to prevent WER being triggered by exceptions raised in TLS callbacks? In Windows 7 these are silently swallowed by the operating system but in Windows 8.1 and Windows 10 they trigger WER (even though the process is allowed to continue running). Setting the error mode can prevent WER from saving crash dumps and writing event log entries, but it doesn’t avoid a service host process and WerFault.exe being started each time. When this happens for each of the 30+ threads the app creates, it leads to a noticeable slow-down in the running of the program.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1226082">
				<div id="div-comment-1226082" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160204-00/?p=92972#comment-1226082">
			February 5, 2016 at 2:51 pm</a>		</div>

		<p>Now if only VisualStudio were so smart to disable Windows crash and compatibility assist dialogs for the processes being debugged.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

