<html>
<head>
<title>Stupid JavaScript debugging tricks: Abusing the conditional breakpoint</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Stupid JavaScript debugging tricks: Abusing the conditional breakpoint</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 19, 2015 / year-entry #245</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>22</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Your favorite JavaScript debugger may very well have a conditional breakpoint facility, and if it does, you can abuse it to do things unrelated to conditional breakpoints. Since conditional breakpoints are based on evaluating an expression, you can use an expression with side effects, like, say, logging. Breakpoint Condition When the breakpoint location is reached,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Your favorite JavaScript debugger may very well have a
conditional breakpoint facility,
and if it does,
you can abuse it to do things unrelated to conditional breakpoints.
</p>
<p>
Since conditional breakpoints are based on evaluating an expression,
you can use an expression with side effects,
like, say, logging.
</p>
<table BORDER=0 CELLSPACING=0 CELLPADDING=0
    STYLE="border: solid 3px #ebebeb; font-family: Segoe UI, sans-serif;
           width: 30em;
           color: black; background-color: #f0f0f0">
<tr>
<td ALIGN=center STYLE="background-color: white;
    padding: 5px">Breakpoint Condition</td>
</tr>
<tr>
<td STYLE="border: solid 1px #dadada; padding: 10px">
<p>When the breakpoint location is reached,
    the expression is evaluated and the breakpoint
    is hit only if the expression is true or has changed.
    </p>
<table BORDER=0 CELLSPACING=0 CELLPADDING=2>
<tr>
<td>&#x2612;</td>
<td>Condition:</td>
</tr>
<tr>
<td></td>
<td STYLE="border: solid 1px gray; background-color: white; width: 30em">
    console.log("click received")</td>
</tr>
<tr>
<td></td>
<td>&#x2d59; Is true</td>
</tr>
<tr>
<td></td>
<td>&#x2d54; Has changed</td>
</tr>
</table>
<p ALIGN=right>
<table BORDER=0 CELLSPACING=5 CELLPADDING=2
    STYLE="text-align: center">
<tr>
<td STYLE="border: solid 2px black; width: 9em">OK</td>
<td STYLE="border: solid 1px black; width: 9em">Cancel</td>
</tr>
</table>
</td>
</tr>
</table>
<p>
The
<code>console.log</code> function returns <code>undefined</code>,
so the condition is never true,
but that's okay, because we're executing the expression for its side
effect of printing a string to the console.
</p>
<p>
Here, we just logged a hard-coded string, but you can log any expression
you want.
For example, you could use
</p>
<pre>
console.log("current selection is " + this.currentSelection)
</pre>
<p>
Or even more fun:
</p>
<pre>
console.log(getStack())
</pre>
<p>
where you've defined
</p>
<pre>
function getStack() { try { throw new Error(); } catch (e) { return e.stack; } }
</pre>
<p>
What, you didn't define that function?
No problem.
Just evaluate it in your immediate window and boom, now it's defined.
</p>
<p>
Now, printing an entire stack trace may be excessive.
So store it in your object for future inspection.
For example, you might do this in a constructor so that
you have a stack trace of how your object got created.
That way, when you have a transaction that failed to complete,
you can look at the cached stack trace to see how the transaction
got started.
</p>
<pre>
(this._stack = getStack()) === 42
</pre>
<p>
The extra <code>=== 42</code> at the end is to ensure that the
value of the expression is falsy.
</p>
<p>
Anyway, just a few quick tips for JavaScript debugging.
I didn't come up with these ideas, but I'm sharing them.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1213331">
				<div id="div-comment-1213331" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mr Cranky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213331">
			November 19, 2015 at 7:25 am</a>		</div>

		<p>Well, not being a Javascripter, I falsely assumed &quot;falsy&quot; was a possible typo or coinage. &nbsp;The truthiness of that turned out to be falsy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-john-ludlow odd alt thread-odd thread-alt depth-1" id="comment-1213321">
				<div id="div-comment-1213321" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/John+Ludlow' rel='external nofollow' class='url'>John Ludlow</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213321">
			November 19, 2015 at 7:35 am</a>		</div>

		<p>@Mr Cranky the idea of values being falsy exists outside JavaScript. C++, for example, has nulls that can (kinda, sorta) be considered false.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1213311">
				<div id="div-comment-1213311" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213311">
			November 19, 2015 at 7:40 am</a>		</div>

		<p>Chrome allows you to edit JavaScript inline, so in some cases you may find you can just add code inline.</p>
<p>If you map urls to local disk files properly in the Dev Tools settings you can even Ctrl+S to save your changes back to disk.</p>
<p>I think there are cases where inline edit doesn&#39;t take effect on existing running code, so good trick still!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1213301">
				<div id="div-comment-1213301" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213301">
			November 19, 2015 at 8:17 am</a>		</div>

		<p>My computer doesn&#39;t have a font with Tifinagh glyphs in it, so I just see boxes for those TIFINAGH LETTER YAS and TIFINAGH LETTER YAR. &nbsp;Why not use ◉ (FISHEYE) and ◯ (LARGE CIRCLE) or similar instead? &nbsp;Or, just raw HTML input elements, as you have in the past?</p>
<div class="post">[<em>I stopped using raw HTML elements because they interfered with forms on the page. Will investigate the alternate glyphs. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1213281">
				<div id="div-comment-1213281" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GrumpyOldMan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213281">
			November 19, 2015 at 8:47 am</a>		</div>

		<p>@Adam Rosenfield: Why not write your own blog that out of the goodness of your heart shares incredibly useful information to a wide audience?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1213271">
				<div id="div-comment-1213271" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bzakharin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213271">
			November 19, 2015 at 9:11 am</a>		</div>

		<p>I assume a lot of this can be useful in other debuggers too. Not declaring new functions, but logging results or changing random values</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1213261">
				<div id="div-comment-1213261" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213261">
			November 19, 2015 at 10:10 am</a>		</div>

		<p>@GrumpyOldMan: My tone there probably came across there as too harsh. &nbsp;I like to nitpick about Unicode (as Raymond may or may not have noticed over the years).</p>
<p>@Raymond: Thanks as always for your non-stop blog posts. &nbsp;I&#39;m always amazed at your ability to construct faithful representations of windows, dialog boxes, etc. out of HTML+CSS, even when there&#39;s the occasional glitch like using characters not contained in some system default fonts. &nbsp;I&#39;ve always wondered how much time you spend making those, since I know if I tried to make those, I&#39;d spend a lot of time agonizing over every pixel. &nbsp;(Then again, I&#39;ve had a lot less practice than you&#39;ve had.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1213251">
				<div id="div-comment-1213251" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Torkell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213251">
			November 19, 2015 at 10:28 am</a>		</div>

		<p>Executing code in breakpoint conditions is a useful little trick. I&#39;ve often ended up using that with Java to log object state, particularly when the traditional method of an unconditional breakpoint would break things (by making other parts of the program &#8211; or indeed other programs on the far end of a network connection &#8211; complain about timeouts).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1213241">
				<div id="div-comment-1213241" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stuart Langridge</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213241">
			November 19, 2015 at 10:51 am</a>		</div>

		<p>Raymond, thank you for this rather neat trick; I&#39;d never thought of this, and shall put it to use. Would that I could offer Win32 tips that you don&#39;t know in return!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1213231">
				<div id="div-comment-1213231" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213231">
			November 19, 2015 at 11:04 am</a>		</div>

		<p>Tiny additional trick for the stacktrace &#8211; there&#39;s also &quot;console.trace()&quot; method in modern browsers, which prints out a neatly formatted stack trace. It might not be useful for including in end-user code due to browser compatibility issues, but on your own development machine it&#39;s a lot easier to type (and remember) than the &quot;new Error()&quot; thing. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1213221">
				<div id="div-comment-1213221" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213221">
			November 19, 2015 at 2:11 pm</a>		</div>

		<p>I was intrigued to discover some years back that the remote debugging APIs built into the Java runtime were well documented public interfaces. And while they&#39;re obviously intended for building debugger apps, IDE integration, etc, it&#39;s actually a pretty useful mechanism for logging code that doesn&#39;t contain logging, or which would produce too much of it to be useful. I had a little program that set up one breakpoint at the top of a complex block of code, which when triggered, activated several other breakpoints which did nothing but log the internal state. Obscure, but surprisingly useful˙</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1213191">
				<div id="div-comment-1213191" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213191">
			November 19, 2015 at 6:20 pm</a>		</div>

		<p>[I stopped using raw HTML elements because they interfered with forms on the page. Will investigate the alternate glyphs. -Raymond]</p>
<p>Maybe adding:</p>
<p>&nbsp; jQuery(document).ready(function() { jQuery(&quot;INPUT[type=radio]&quot;).appendTo(jQuery(&quot;BODY&quot;); })</p>
<p>will do the trick to move these radio buttons out of the forms and prevent it interfere with submission.</p>
<p>I see jQuery-1.5.2 here. Use full form instead of &quot;dollar sign&quot; because I&#39;m not sure if it&#39;ll interfere with other library.</p>
<div class="post">[<em>That doesn&#39;t work with my workflow because I don&#39;t write these articles directly on the Web site. <a href="http://notepadconf.com/">My authoring system</a> doesn&#39;t run script and doesn&#39;t come with jQuery. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1213181">
				<div id="div-comment-1213181" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213181">
			November 19, 2015 at 6:24 pm</a>		</div>

		<p>Oops, one missing &quot;)&quot; after the &quot;BODY&quot;, and the line should end with semicolon.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1213171">
				<div id="div-comment-1213171" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213171">
			November 19, 2015 at 7:40 pm</a>		</div>

		<p>One more thing, to make it stay into place while viewing, maybe it&#39;s better to move to out on handler of jQuery(&quot;#aspnetForm&quot;).submit()</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1213151">
				<div id="div-comment-1213151" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213151">
			November 20, 2015 at 2:32 am</a>		</div>

		<p>Surely that&#39;s a solved problem, otherwise the search and translate widgets wouldn&#39;t work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1213141">
				<div id="div-comment-1213141" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213141">
			November 20, 2015 at 2:33 am</a>		</div>

		<p>Oh, and why not use the `void` operator to make any expression falsy?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1213131">
				<div id="div-comment-1213131" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Petr Kadlec</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213131">
			November 20, 2015 at 5:23 am</a>		</div>

		<p>I (mis)used conditional breakpoints in the same way when debugging C# code. However, new Visual Studio does not allow that anymore it seems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1213121">
				<div id="div-comment-1213121" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrey Roenko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213121">
			November 20, 2015 at 6:56 am</a>		</div>

		<p>&gt; (this._stack = getStack()) === 42</p>
<p>I believe comma or void operators would be better.</p>
<p>this._stack = getStack(), false</p>
<p>void (this._stack = getStack())</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1213051">
				<div id="div-comment-1213051" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213051">
			November 20, 2015 at 10:41 am</a>		</div>

		<p>FYI there&#39;s no need for the try/throw/catch in getStack.</p>
<p> &nbsp; &nbsp;return new Error().stack;</p>
<p>Will suffice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1213031">
				<div id="div-comment-1213031" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213031">
			November 20, 2015 at 10:56 am</a>		</div>

		<p>I wish the Visual Studio C++ debugger could do that! (Though edit and continue is just as good I guess.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1213021">
				<div id="div-comment-1213021" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1213021">
			November 20, 2015 at 10:57 am</a>		</div>

		<p>Did notepadconf actually take place?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1212971">
				<div id="div-comment-1212971" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151119-00/?p=92051#comment-1212971">
			November 20, 2015 at 3:36 pm</a>		</div>

		<p>&quot;Oh, and why not use the `void` operator to make any expression falsy?&quot;</p>
<p>Came here to say this. Most people who use JavaScript don&#39;t know about the void operator.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

