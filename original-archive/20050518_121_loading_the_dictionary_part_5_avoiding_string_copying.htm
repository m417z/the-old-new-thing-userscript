<html>
<head>
<title>Loading the dictionary, part 5:  Avoiding string copying</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Loading the dictionary, part 5:  Avoiding string copying</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 18, 2005 / year-entry #122</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>28</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Looking at the profile for our program so far, 35% of the CPU time is spent copying strings around. Let's see if we can improve that. The best way to speed up copying strings is not to copy them in the first place. Using a wstring in our DictionaryEntry structure forces the vector class to...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Looking at the profile for our program so far,
35% of the CPU time is spent copying strings around.
Let's see if we can improve that.
</p>
<p>
The best way to speed up copying strings is not to copy them in
the first place.  Using a <code>wstring</code> in our
<code>DictionaryEntry</code> structure forces the <code>vector</code>
class to copy the string data, when all we really need to copy
is the pointer and size information.  The actual characters can stay
put.  C++ has a copy constructor but not a "move" constructor.
</p>
<p>
Let's use plain string pointers rather than <code>wstring</code>
objects.  The "copy constructor" for a string pointer is just to
copy the pointer&mdash;exactly what we want here.
</p>
<pre>
struct DictionaryEntry
{
 bool Parse(<font COLOR=blue>const WCHAR* begin, const WCHAR* end</font>);
 <font COLOR=blue>void Destruct() {
  delete[] m_pszTrad;
  delete[] m_pszSimp;
  delete[] m_pszPinyin;
  delete[] m_pszEnglish;
 }
 LPWSTR m_pszTrad;
 LPWSTR m_pszSimp;
 LPWSTR m_pszPinyin;
 LPWSTR m_pszEnglish;</font>
};
</pre>
<p>
The <code>DictionaryEntry</code> is no longer a structure of
<code>wstring</code>s but rather is just a structure of
<code>LPWSTR</code>s, which copy much faster.
The cost for this, however, is having to free all the strings
manually in the dictionary destructor (which we will see below).
</p>
<p>
Since we aren't using <code>wstring</code>s any more, we need
to allocate the memory for the strings and copy them the old fashioned way.
</p>
<pre>
<font COLOR=blue>LPWSTR AllocString(const WCHAR* begin, const WCHAR* end)
{
 int cch = end - begin + 1;
 LPWSTR psz = new WCHAR[cch];
 lstrcpynW(psz, begin, cch);
 return psz;
}</font>

bool DictionaryEntry::Parse(
       <font COLOR=blue>const WCHAR* begin, const WCHAR* end</font>)
{
 <font COLOR=blue>const WCHAR* pch = std::find(begin, end, L' ');
 if (pch &gt;= end) return false;
 m_pszTrad = AllocString(begin, pch);
 begin = std::find(pch, end, L'[') + 1;
 if (begin &gt;= end) return false;
 pch = std::find(begin, end, L']');
 if (pch &gt;= end) return false;
 m_pszPinyin = AllocString(begin, pch);
 begin = std::find(pch, end, L'/') + 1;
 if (begin &gt;= end) return false;
 for (pch = end; *--pch != L'/'; ) { }
 if (begin &gt;= pch) return false;
 m_pszEnglish = AllocString(begin, pch);</font>
 return true;
}
</pre>
<p>
There isn't a <code>std::rfind</code> function, so I coded
up a backwards-search-for-slash loop inline.
<strong>Exercise</strong>: Why don't I have to check that
<code>pch</code> hasn't underflowed beyond the beginning of the
string?
</p>
<pre>
class Dictionary
{
public:
 Dictionary();
 <font COLOR=blue>~Dictionary();</font>
 int Length() { return v.size(); }
 const DictionaryEntry&amp; Item(int i) { return v[i]; }
private:
 vector&lt;DictionaryEntry&gt; v;
};

Dictionary::Dictionary()
{
 ...
   if (cchResult){
    <font COLOR=blue><strike>// wstring line(buf, cchResult);</strike></font>
    DictionaryEntry de;
    if (de.Parse(<font COLOR=blue>buf, buf + cchResult</font>)) {
     ...
}

<font COLOR=blue>Dictionary::~Dictionary()
{
 for (vector&lt;DictionaryEntry&gt;::iterator i = v.begin();
      i != v.end(); i++) {
  i-&gt;Destruct();
 }
}</font>
</pre>
<p>
The last bits of the change are to get rid of the
temporary <code>wstring</code> we parsed from, since we don't
need it any more, and to free all the strings in the
<code>Dictionary</code>'s destructor.
</p>
<p>
This new program clocks in at 120ms
(or 290ms if you include the time it takes to destroy the
dictionary).
Again, we're twice as fast as the previous version, but still
haven't quite crossed the 100ms barrier.
And the time to destroy the dictionary isn't starting to be a
more significant factor.
But I have another trick up my sleeve.
</p>
<p>
[Raymond is currently on vacation; this message was pre-recorded.]</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (28)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-276603">
				<div id="div-comment-276603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276603">
			May 18, 2005 at 9:19 am</a>		</div>

		<p>What is amusing is we are slowly stripping out all the object oriented ease-of-use features, and getting down to some hard, optimized code.  I suspect by the time this is done, the OO code will be pretty small&#8230;  :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276613">
				<div id="div-comment-276613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dotnetjunkies.com/weblog/sriram' rel='external nofollow' class='url'>Sriram</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276613">
			May 18, 2005 at 9:49 am</a>		</div>

		<p>I remember Larry Osterman making a comment about the standard libraries disappearing from this sample :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276623">
				<div id="div-comment-276623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anthony Wieser</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276623">
			May 18, 2005 at 10:03 am</a>		</div>

		<p>I hope I don&#8217;t spoil the fun, but as we&#8217;ve arrived where we are now, I get the slight feeling of I wouldn&#8217;t want to get there from here.</p>
<p>Wouldn&#8217;t it have been better to open the file as memory mapped, then convert the whole thing to unicode with a single call on the length of the whole buffer, having allocated another buffer double the size, and then walk through the converted data in place, marking end of strings with 00 00 pairs, and setting up the pointers in the dictionary?</p>
<p>Then the whole thing can be destroyed with a single delete, as there is nothing extra to clean up, no individual allocations from the heap, etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276663">
				<div id="div-comment-276663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nksingh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276663">
			May 18, 2005 at 10:15 am</a>		</div>

		<p>What&#8217;s the point of destroying anything while you&#8217;re quitting the program?  I suppose that&#8217;s one way of getting rid of all of the destruction time.</p>
<p>I bet allocation time can be improved by grabbing a large chunk of memory at the beginning and then parcelling it out in the AllocString function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276633">
				<div id="div-comment-276633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tito</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276633">
			May 18, 2005 at 10:17 am</a>		</div>

		<p>Why not use smart pointers?</p>
<p>boost::shared_array&lt;wchat_t&gt;?</p>
<p>or perhaps boost::shared_ptr&lt;std::wstring&gt;?</p>
<p>it might be a little slower, but you&#8217;d have <em>much</em> cleaner code.</p>
<p>(www.boost.org for those who don&#8217;t know)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276673">
				<div id="div-comment-276673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276673">
			May 18, 2005 at 10:19 am</a>		</div>

		<p>Copying the strings wouldn&#8217;t be a problem in VC++ 6 since its std::basic_string implementation uses shared reference-counted buffers. VC++ 7.1 (maybe 7.0 as well?) doesn&#8217;t do that, which is good for thread-safety but sometimes bad for memory and processor efficiency. It does have the &quot;small string optimisation&quot;, avoiding the need for (de)allocation when copying short strings, but that unfortunately bloats the string objects (to 32 bytes each, I think) and the DictionaryEntry objects (128 bytes?!).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276653">
				<div id="div-comment-276653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stewart Tootill</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276653">
			May 18, 2005 at 10:21 am</a>		</div>

		<p>Hopefully C++0x is going to address the &quot;move&quot; constructor issue with the new r-value references. The STL will then be changed to use this when resizing vectors and you&#8217;ll be able to get performance like this without losing the nice stl syntax.</p>
<p>Shame we&#8217;ll all have retired by the time we get C++0x though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276683">
				<div id="div-comment-276683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276683">
			May 18, 2005 at 10:31 am</a>		</div>

		<p>Stewart: Move constructors are a great idea but they probably wouldn&#8217;t help here as most of the strings are short enough to benefit from the &quot;small string&quot; optimisation anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cornedbee even thread-even depth-1" id="comment-276693">
				<div id="div-comment-276693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CornedBee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276693">
			May 18, 2005 at 11:33 am</a>		</div>

		<blockquote><p>
  There isn&#8217;t a std::rfind function</p>
<p>And what&#8217;s wrong with wcsrwc or whatever the wide-character version of strrchr is called?
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276703">
				<div id="div-comment-276703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276703">
			May 18, 2005 at 11:40 am</a>		</div>

		<p>a couple of minor nits: first, m_pszSimp is uninitialized, which causes the delete[] to choke.</p>
<p>second, if you fail to parse a DirectoryEntry, Destruct() is never called and any partially-parsed info will be leaked.</p>
<p>otherwise, though, great series so far, and i&#8217;m looking forward to the rest.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276713">
				<div id="div-comment-276713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aleko Petkov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276713">
			May 18, 2005 at 11:45 am</a>		</div>

		<p>I notice a general consensus among the commenters that people are not entirely happy with the direction that this code is moving in. As the code gains speed, it loses readability. We seem to be moving closer and closer to writing plain C. I wouldn&#8217;t be surprised to see this program grow a customized memory allocator, or string class.</p>
<p>As a C++ programmer I recognize this pattern. It seems writing in C++ often comes down to (re)writing things yourself. While there is nothing wrong with this, and it can be fun to do, it is certainly not productive. Think how much more features could have been added to this program in the time spent optimizing.</p>
<p>As a comparison, look at Rico Mariani&#8217;s blog, which has had an equivalent program in C# for more than a week now, and even in its original incarnation it&#8217;s still faster than the C++ version, and significantly easier to brain-parse.</p>
<p>I don&#8217;t mean to put down Raymond&#8217;s efforts. I myself love reading (and writing) this low-level stuff. This series &#8211; indeed the whole blog &#8211; is a hacker&#8217;s delight. If the purpose of this series is to teach program optimization techniques, it definately succeeds.</p>
<p>But if your objective is to write functional, maintainable software in a reasonable amount of time, C++ is looking increasingly less attractive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276723">
				<div id="div-comment-276723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">indranil banerjee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276723">
			May 18, 2005 at 11:48 am</a>		</div>

		<p>But, but, but&#8230; If the vector was large enough you wouldnt have had all that copying of DictionaryEntrys in the first place.</p>
<p>The best optimisation here would have been to reserve a decent sized vector. And replace wstring with a class like flex_string using the small string optimisation</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ricom even thread-even depth-1" id="comment-276733">
				<div id="div-comment-276733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ricom' rel='external nofollow' class='url'>ricom</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276733">
			May 18, 2005 at 1:04 pm</a>		</div>

		<p>I dunno&#8230; the vector stuff didn&#8217;t seem to be what was killing us in the profile.  Sure there&#8217;s a cost there but it wasn&#8217;t at the top of the list.</p>
<p>Would we really want to bake in assumptions about how big the dictionary is?  The final growth of the vector is the most costly.</p>
<p>If that were the source of problems I would be switching to an alternate data structure because the vector semantics aren&#8217;t especially needed to make the dictionary work.  A linked list of dictionary chunks for instance would probably be good.  Maybe with an index in front of that.</p>
<p>I&#8217;ll be posting my analysis of this version later today.  Hope you&#8217;re all having fun with this exercise.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-banerjeeindranil odd alt thread-odd thread-alt depth-1" id="comment-276753">
				<div id="div-comment-276753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/IndranilBanerjee' rel='external nofollow' class='url'>IndranilBanerjee</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276753">
			May 18, 2005 at 1:38 pm</a>		</div>

		<p>But, but, but&#8230;why dont you reserve enough space in your vector up front? That way you wouldnt have had all the string copies in the first place!</p>
<p>Now the code is seriously messy and will leak a vast amount of memory if there is an exception.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276763">
				<div id="div-comment-276763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://Ken@Alverson.net' rel='external nofollow' class='url'>Ken</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276763">
			May 18, 2005 at 2:40 pm</a>		</div>

		<p>Denis &#8211; STL is used in many high performance products.  STL must be used with care, but that is no different than any other framework.  It won&#8217;t automatically make your code fast, no.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276773">
				<div id="div-comment-276773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick c</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276773">
			May 18, 2005 at 4:03 pm</a>		</div>

		<p>Tito,</p>
<p>Switching a smart pointer class that runs slower would kind of defeat the purpose of speed-optimizing, wouldn&#8217;t you agree?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276783">
				<div id="div-comment-276783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276783">
			May 18, 2005 at 4:11 pm</a>		</div>

		<p>Switching to a smart pointer class that runs slower would kind of defeat the purpose of speed-optimizing, wouldn&#8217;t you agree?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276643">
				<div id="div-comment-276643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://Ken@Alverson.net' rel='external nofollow' class='url'>Ken</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276643">
			May 18, 2005 at 10:14 am</a>		</div>

		<p>What I don&#8217;t understand is why, if the goal was simply to avoid copying the wstrings, you jump directly from wstring to WCHAR*, when a much smaller jump from wstring to wstring* would net you the same lack-of-copying benefit without the requirement of rewriting your code.  A few extra *&#8217;s, -&gt;&#8217;s, news and deletes would have enabled you to use the existing code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276793">
				<div id="div-comment-276793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Pryhodko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276793">
			May 18, 2005 at 6:25 pm</a>		</div>

		<p>This is an example of how wrong approach to C++ programming could make C looks better :)</p>
<p>crap, no wonder that C is still so popular in MS.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276743">
				<div id="div-comment-276743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ASeverin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276743">
			May 18, 2005 at 1:20 pm</a>		</div>

		<p>This is pretty funny, but all you have demonstrated so far is that you should *never* use STL in products that should run in reasonable timeframe.</p>
<p>IMHO next step will be &#8216;get rid of AllocString() &amp; Destruct()&#8217; since we have delimiter characters to place &#8216; &#8217; and can use just pointers to already converted unicode buffer</p>
<p>/denis</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276803">
				<div id="div-comment-276803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276803">
			May 18, 2005 at 9:07 pm</a>		</div>

		<p>shared_ptr isn&#8217;t just in boost anymore. It&#8217;s in C++TR1 due out any time now (see <a rel="nofollow" target="_new" href="http://aristeia.com/EC3E/TR1_info_frames.html" rel="nofollow">http://aristeia.com/EC3E/TR1_info_frames.html</a>).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276813">
				<div id="div-comment-276813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://Ken@Alverson.net' rel='external nofollow' class='url'>Ken</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276813">
			May 18, 2005 at 9:14 pm</a>		</div>

		<p>Rico &#8211; the data structure you describe (almost) is called std::deque.</p>
<p>deque (pronounced &quot;deck&quot;) is basically a vector of pointers to fixed size chunks.  A linked list of pointers wouldn&#8217;t allow random access into the container, but a vector of pointers is easy (and fast) to resize &#8211; the actual items don&#8217;t need to be copied when the container expands, it just has to allocate a new chunk.  With large containers, this also eliminates the need for enormous blocks of contiguous memory.</p>
<p>Using a deque would eliminate all the vector resizing related string copying.</p>
<p>If the compiler is smart enough, replacing DictionaryEntry::Parse with a constructor that did the same thing and passing in an unnamed DictionaryEntry to the push_back method could eliminate the rest of the string copying.  However, that approach would necessitate relying on exceptions to handle unparsable lines, since constructors have to result in a valid object or an exception.  Or, have failed parsing result in a sentinel valued DictionaryEntry and pop_back if the most recently inserted DictionaryEntry was a failed parsing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276823">
				<div id="div-comment-276823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anders Dalvander</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276823">
			May 19, 2005 at 2:05 am</a>		</div>

		<blockquote><p>
  There isn&#8217;t a std::rfind function</p>
<p>No, and there is no direct need for it either, use std::find with std::reverse_iterator instead.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276833">
				<div id="div-comment-276833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://Ken@Alverson.net' rel='external nofollow' class='url'>Ken</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276833">
			May 19, 2005 at 8:29 am</a>		</div>

		<p>Rick C &#8211; that depends if the smart pointer is doing more work than you would be otherwise doing yourself.</p>
<p>shared_ptr does reference counting, which might add a little bit of unnecessary overhead on pointer copies, but I doubt it would hurt a lot.  It would certainly be less than the previous cost of copying strings.</p>
<p>The correct answer, of course, is to profile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276843">
				<div id="div-comment-276843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-276843">
			May 19, 2005 at 9:02 am</a>		</div>

		<p>I&#8217;m still wondering what is the point of this series.  As others have pointed out, there are some bad and silly things STL does, but many of the optimizations are from what might be a limited understanding of STL.  We seem to go from one extreme to another.</p>
<p>I have been using STL for many years now.  I really like it but I understand many of the limitations.  Far to many people act like all you have to do is start using technique X and all your problems will be solved.  You see this with such things as STL and exceptions.  One of the reasons I love reading Herb Sutter&#8217;s books is because he doesn&#8217;t gloss over the failings of C++ and STL.  Often he goes out of his way to tell you why something is the &quot;right thing&quot; to do while telling you the ramifications of doing such things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278363">
				<div id="div-comment-278363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-278363">
			May 27, 2005 at 1:15 pm</a>		</div>

		<p>I see this series as an exercise in showing that there&#8217;s much to be said for transparent code.  In the final version, you can see exactly what&#8217;s happening.  In the original version, you can see what the code is supposed to do, but you don&#8217;t know what&#8217;s going on when it executes, and that&#8217;s where the trouble comes from.  I&#8217;d call the final version of the code simpler and more robust as a result.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-351493">
				<div id="div-comment-351493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/03/03/542924.aspx' rel='external nofollow' class='url'>The Old New Thing : Very late remarks on the original Chinese dictionary series</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-351493">
			March 3, 2006 at 10:00 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2006/03/03/542924.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2006/03/03/542924.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-464433">
				<div id="div-comment-464433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ricom/archive/2005/05/18/performance-quiz-6-the-fifth-cut-goes-foul.aspx' rel='external nofollow' class='url'>Rico Mariani's Performance Tidbits</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050518-42/?p=35613#comment-464433">
			January 23, 2007 at 9:29 pm</a>		</div>

		<p>Well today Raymond hits a snag in version 5 of the program. I started by profiling the code as provided</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

