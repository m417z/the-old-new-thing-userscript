<html>
<head>
<title>A process shutdown puzzle: Answers</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A process shutdown puzzle: Answers</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 6, 2009 / year-entry #42</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last week, I posed a process shutdown puzzle in honor of National Puzzle Day. Let's see how we did. Part One asked us to explain why the ThreadFunction thread no longer exists. That's easy. One of the things that happen inside ExitProcess is that all threads (other than the one calling ExitProcess) are forcibly terminated...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Last week, I posed <a href="http://blogs.msdn.com/oldnewthing/archive/2009/01/29/9382123.aspx"> a process shutdown puzzle</a> in honor of National Puzzle Day. Let's see how we did.</p>
<p> Part One asked us to explain why the <code>ThreadFunction</code> thread no longer exists. That's easy. One of the things that happen inside <code>ExitProcess</code> is that all threads (other than the one calling <code>ExitProcess</code>) are forcibly terminated in the nastiest way possible. This happens before the <code>DLL_PROCESS_DETACH</code> notification is sent. Therefore, the code in <code>StopWorkerThread</code> that waits for the thread completion event waits forever because the <code>ThreadFunction</code> is no longer running. There is nobody around to see the shutdown event and respond by setting the completion event. </p>
<p> Okay, that was the easy part. Part Two asked us to criticize the replacement solution which replaced the completion event with a call to <code>FreeLibraryAndExitThread</code> and changed the <code>StopWorkerThread</code> function to wait for the thread handle to become signaled. This solution is also flawed. </p>
<p> Consider the case that the DLL is receiving its <code>DLL_PROCESS_DETACH</code> notification because the DLL is being unloaded by a call to <code>FreeLibrary</code>, rather than due to process termination. In that case, <code>StopWorkerThread</code> sets the shutdown event, and the <code>ThreadFunction</code> proceeds to clean up and call <code>FreeLibraryAndExitThread</code>. But one of the steps in thread shutdown is sending <code>DLL_THREAD_DETACH</code> notifications, which will not happen until the <code>DLL_PROCESS_DETACH</code> notifications are complete. The <code>WaitForSingleObject</code> waits indefinitely because it won't complete until the thread exits, but the thread won't exit until <code>StopWorkerThread</code> returns. Deadlock. </p>
<p> Finally, Part Three asks us to explain why the code doesn't cause a problem in practice even though the code is flawed. The call to <code>FreeLibraryAndExitThread</code> implies that the code follows the "Worker thread retains its own reference on the DLL" model. After all, that's why the last thing the thread does is free the library. But if that's the case, then a call to <code>FreeLibrary</code> coming from the application won't actually unload the DLL, because the DLL reference count is still nonzero: There is one reference still being held by the worker thread. Therefore, the DLL will never actually unload outside of process termination. All the flaws in the dynamic unload case are masked by the fact that the code never executes. </p>
<p> Led astray: Some of us mentioned that waiting on <code>ThreadHandle</code> returned immediately because the handle to a thread is automatically closed when the thread exits. This is wrong. Handles do not self-close. You have to call <code>CloseHandle</code> to close them. This is "obvious" if you apply the "imagine if the world actually worked this way" rule: Suppose thread handles were invalidated (and eligible for re-use) when a thread exited. Then how could you use a thread handle <i>at all</i>? Any time you use a thread handle, there would be an unavoidable race condition where the thread might have exited just before you used the handle. And it would be impossible to call <code>GetExitCodeThread</code> at all! (Since it only does anything interesting if you pass the handle to a thread that has exited.) </p>
<p> A handle to a thread remains valid until you close it. If the thread has exited, then a wait on the thread handle completes, but the handle is still valid <i>because if it went invalid, programming would become impossible</i>. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-706733">
				<div id="div-comment-706733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706733">
			February 6, 2009 at 10:53 am</a>		</div>

		<p>They were being profligate with HMODULE, so who&#8217;s to say they hadn&#8217;t already closed the thread handle?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706763">
				<div id="div-comment-706763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706763">
			February 6, 2009 at 11:31 am</a>		</div>

		<p>The fun is making Thread/DLL code that survives both process shutdown and VB DLL unload when VB unloads an OCX&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706833">
				<div id="div-comment-706833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706833">
			February 6, 2009 at 1:08 pm</a>		</div>

		<blockquote><p>
  because if it went invalid, programming</p>
<p>  would become impossible.
</p></blockquote>
<p>From what I recall, that didn&#8217;t stop the implementers of the C RTL function _beginthread from trying to do the impossible.</p>
<p>(The _beginthread function return the thread handle; the C RTL obligingly closed the handle when the thread main function returned. Hence one reason for the addition of the _beginthreadex function).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706873">
				<div id="div-comment-706873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706873">
			February 6, 2009 at 1:56 pm</a>		</div>

		<blockquote><p>
  &gt; From what I recall, that didn&#8217;t stop the implementers of the C RTL function _beginthread from trying to do the impossible.
</p></blockquote>
<p>There is no problem closing a thread&#8217;s handle if you don&#8217;t want to either wait for it or find it&#8217;s exit code. Compare with pthread_detach.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706883">
				<div id="div-comment-706883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706883">
			February 6, 2009 at 5:32 pm</a>		</div>

		<p>re: porter</p>
<p>Sure &#8211; but there&#8217;s a logical disjunction between (a) returning the handle to the caller, and then (b) arranging so that caller&#8217;s use of the handle is subject to uncertainty about whether it is still valid.</p>
<p>Either give the caller the handle and let him dispose of it, or don&#8217;t give the caller the handle at all because he can&#8217;t trust it to be valid.</p>
<p>_beginthreadex takes the former approach, in recognition that _beginthread had a flawed design.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706903">
				<div id="div-comment-706903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706903">
			February 6, 2009 at 10:51 pm</a>		</div>

		<blockquote><p>
  &gt; _beginthreadex takes the former approach, in recognition that _beginthread had a flawed design.
</p></blockquote>
<p>Or rather an interesting heritage, it came from OS/2 where it would have returned a thread id.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706943">
				<div id="div-comment-706943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706943">
			February 7, 2009 at 7:52 am</a>		</div>

		<p>Programming is impossible, let&#8217;s go shopping!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706963">
				<div id="div-comment-706963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706963">
			February 7, 2009 at 4:52 pm</a>		</div>

		<p>The concept of associating a thread with a handle value are flawed. This is why windows leaks handles all over the place. How fast are handles reused anyway?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706983">
				<div id="div-comment-706983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706983">
			February 7, 2009 at 7:14 pm</a>		</div>

		<blockquote><p>
  &gt; The concept of associating a thread with a handle value are flawed.
</p></blockquote>
<p>Always a problem when GetCurrentThread() &nbsp;returns -2.</p>
<p>Try TIDs and TlsGetValue()&#8230;</p>
<p>However handles are the only way to wait for a thread termination, so they have their place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706993">
				<div id="div-comment-706993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-706993">
			February 8, 2009 at 2:32 am</a>		</div>

		<p>I think the people who said the handle was closed really meant the handle is signaled (which afaik is true in this case).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-707063">
				<div id="div-comment-707063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveshe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-707063">
			February 8, 2009 at 10:50 pm</a>		</div>

		<p>@ 640k &#8211; OK, I&#8217;ll bite, what are you talking about when you say &quot;This is why windows leaks handles all over the place&quot;? I have boxes that run for months and don&#8217;t leak any noticeable number of handles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-707073">
				<div id="div-comment-707073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-707073">
			February 8, 2009 at 11:52 pm</a>		</div>

		<p>Won&#8217;t a handle / id remain valid until all references to the underlying object have been released? &nbsp;I&#8217;m pretty sure that&#8217;s the way it works, so as long as you track your references properly you should be fine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-707093">
				<div id="div-comment-707093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-707093">
			February 9, 2009 at 9:37 am</a>		</div>

		<p>Thank you Raymond for your puzzles: they&#8217;re always illuminating.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-707203">
				<div id="div-comment-707203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-707203">
			February 9, 2009 at 2:46 pm</a>		</div>

		<blockquote><p>
  &gt; Won&#8217;t a handle / id remain valid until all references to the underlying object have been released? &nbsp;I&#8217;m pretty sure that&#8217;s the way it works, so as long as you track your references properly you should be fine.
</p></blockquote>
<p>I would not have thought so, DuplicateHandle() returns a new handle, not the same handle with bumped up reference count.</p>
<p>Try&#8230; open file, duplicate handle, close original file, try original handle, close duplicate handle</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-707243">
				<div id="div-comment-707243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-707243">
			February 9, 2009 at 3:23 pm</a>		</div>

		<p>@porter:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2007/08/29/4620336.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2007/08/29/4620336.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-707253">
				<div id="div-comment-707253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090206-00/?p=19233#comment-707253">
			February 9, 2009 at 3:27 pm</a>		</div>

		<p>John, porter</p>
<p>A kernel object can have multiple handles associated with it, and also other references (each handle holds a reference, as well). An object stays alive until there are references to it. When the last reference is released (this does not mean a last handle is closed), the object is gone.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

