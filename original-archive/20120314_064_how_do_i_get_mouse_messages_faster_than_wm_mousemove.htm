<html>
<head>
<title>How do I get mouse messages faster than WM_MOUSEMOVE?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I get mouse messages faster than WM_MOUSEMOVE?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 14, 2012 / year-entry #65</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120314-00/?p=8103</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">We saw some time ago that the rate at which you receive WM_MOUSE­MOVE messages is entirely up to how fast your program calls Get­Message. But what if your program is calling Get­Message as fast as it can, and it's still not fast enough? You can use the Get­Mouse­Move­Points­Ex function to ask the window manager, "Hey,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>We saw some time ago that
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/10/01/55108.aspx">
the rate at which you receive
<code>WM_<wbr>MOUSE&shy;MOVE</code> messages
is entirely up to how fast your program calls
<code>Get&shy;Message</code></a>.
But what if your program is calling
<code>Get&shy;Message</code> as fast as it can,
and it's still not fast enough?
</p>
<p>
You can use
<a HREF="http://msdn.microsoft.com/en-us/library/ms646259(VS.85).aspx">
the <code>Get&shy;Mouse&shy;Move&shy;Points&shy;Ex</code> function</a>
to ask the window manager,
"Hey, can you tell me about the mouse messages I missed?"
I can think of two cases where you might want to do this:
</p>
<ul>
<li>You are a program like Paint, where the user is drawing with the
    mouse and you want to capture every nuance of the mouse motion.</p>
<li>You are a program that supports something like mouse gestures,
    so you want the full mouse curve information so you can do your
    gesture recognition on it.
</ul>
<p>
Here's a program that I wrote for a relative of mine who is a radiologist.
One part of his job consists of sitting in a dark room
studying medical images.
He has to use his years of medical training to identify the tumor
(<a HREF="https://www.youtube.com/watch?v=OaTO8_KNcuo">if there is one</a>),
and then determine what percentage of the organ is afflicted.
To use this program, run it and position the circle so that
it matches the location and size of the organ under study.
Once you have the circle positioned properly,
use the mouse to draw an outline of the tumor.
When you let go of the mouse, the title bar will tell you the
size of the tumor relative to the entire organ.
</p>
<p>
(Oh great, now I'm telling people to practice medicine without
a license.)
</p>
<p>
First, we'll do a version of the program that just calls
<code>Get&shy;Message</code> as fast as it can.
Start with the
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2005/04/22/410773.aspx">
new scratch program</a>
and make the following changes:
</p>
<pre>
class RootWindow : public Window
{
public:
 virtual LPCTSTR ClassName() { return TEXT("Scratch"); }
 static RootWindow *Create();
protected:
 LRESULT HandleMessage(UINT uMsg, WPARAM wParam, LPARAM lParam);
 <font COLOR=blue>void PaintContent(PAINTSTRUCT *pps);
 BOOL WinRegisterClass(WNDCLASS *pwc);

private:
 RootWindow();
 ~RootWindow();
 void OnCreate();
 void UpdateTitle();
 void OnSizeChanged(int cx, int cy);
 void AlwaysAddPoint(POINT pt);
 void AddPoint(POINT pt);
 void OnMouseMove(LPARAM lParam);
 void OnButtonDown(LPARAM lParam);
 void OnButtonUp(LPARAM lParam);

 // arbitrary limit (this is just a demo!)
 static const int cptMax = 1000;
private:
 POINT  m_ptCenter;
 int    m_radius;
 BOOL   m_fDrawing;
 HPEN   m_hpenInside;
 HPEN   m_hpenDot;
 POINT  m_ptLast;
 int    m_cpt;
 POINT  m_rgpt[cptMax];
};

RootWindow::RootWindow()
 : m_fDrawing(FALSE)
 , m_hpenInside(CreatePen(PS_INSIDEFRAME, 3,
                                  GetSysColor(COLOR_WINDOWTEXT)))
 , m_hpenDot(CreatePen(PS_DOT, 1, GetSysColor(COLOR_WINDOWTEXT)))
{
}

RootWindow::~RootWindow()
{
 if (m_hpenInside) DeleteObject(m_hpenInside);
 if (m_hpenDot) DeleteObject(m_hpenDot);
}

BOOL RootWindow::WinRegisterClass(WNDCLASS *pwc)
{
 pwc-&gt;style |= CS_VREDRAW | CS_HREDRAW;
 return __super::WinRegisterClass(pwc);
}

void RootWindow::OnCreate()
{
 SetLayeredWindowAttributes(m_hwnd, 0, 0xA0, LWA_ALPHA);
}

void RootWindow::UpdateTitle()
{
 TCHAR szBuf[256];

 // Compute the area of the circle using a surprisingly good
 // rational approximation to <a HREF="http://www.piday.org/">pi</a>.
 int circleArea = m_radius * m_radius * 355 / 113;

 // Compute the area of the region, if we have one
 if (m_cpt &gt; 0 &amp;&amp; !m_fDrawing) {
  int polyArea = 0;
  for (int i = 1; i &lt; m_cpt; i++) {
   polyArea += m_rgpt[i-1].x * m_rgpt[i  ].y -
               m_rgpt[i  ].x * m_rgpt[i-1].y;
  }
  if (polyArea &lt; 0) polyArea = -polyArea; // ignore orientation
  polyArea /= 2;
  wnsprintf(szBuf, 256,
           TEXT("circle area is %d, poly area is %d = %d%%"),
           circleArea, polyArea,
           MulDiv(polyArea, 100, circleArea));
 } else {
  wnsprintf(szBuf, 256, TEXT("circle area is %d"), circleArea);
 }
 SetWindowText(m_hwnd, szBuf);
}

void RootWindow::OnSizeChanged(int cx, int cy)
{
 m_ptCenter.x = cx / 2;
 m_ptCenter.y = cy / 2;
 m_radius = min(m_ptCenter.x, m_ptCenter.y) - 6;
 if (m_radius &lt; 0) m_radius = 0;
 UpdateTitle();
}

void RootWindow::PaintContent(PAINTSTRUCT *pps)
{
 HBRUSH hbrPrev = SelectBrush(pps-&gt;hdc,
                                    GetStockBrush(<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/01/26/62991.aspx">HOLLOW_BRUSH</a>));
 HPEN hpenPrev = SelectPen(pps-&gt;hdc, m_hpenInside);
 Ellipse(pps-&gt;hdc, m_ptCenter.x - m_radius,
                   m_ptCenter.y - m_radius,
                   m_ptCenter.x + m_radius,
                   m_ptCenter.y + m_radius);
 SelectPen(pps-&gt;hdc, m_hpenDot);
 Polyline(pps-&gt;hdc, m_rgpt, m_cpt);
 SelectPen(pps-&gt;hdc, hpenPrev);
 SelectBrush(pps-&gt;hdc, hbrPrev);
}

void RootWindow::AddPoint(POINT pt)
{
 // Ignore duplicates
 if (pt.x == m_ptLast.x &amp;&amp; pt.y == m_ptLast.y) return;

 // Stop if no room for more
 if (m_cpt &gt;= cptMax) return;

 AlwaysAddPoint(pt);
}

void RootWindow::AlwaysAddPoint(POINT pt)
{
 // Overwrite the last point if we can't add a new one
 if (m_cpt >= cptMax) m_cpt = cptMax - 1;

 // Invalidate the rectangle connecting this point
 // to the last point
 RECT rc = { pt.x, pt.y, pt.x+1, pt.y+1 };
 if (m_cpt &gt; 0) {
  RECT rcLast = { m_ptLast.x,   m_ptLast.y,
                  m_ptLast.x+1, m_ptLast.y+1 };
  UnionRect(&amp;rc, &amp;rc, &amp;rcLast);
 }
 InvalidateRect(m_hwnd, &amp;rc, FALSE);

 // Add the point
 m_rgpt[m_cpt++] = pt;
 m_ptLast = pt;
}

void RootWindow::OnMouseMove(LPARAM lParam)
{
 if (m_fDrawing) {
  POINT pt = { GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam) };
  AddPoint(pt);
 }
}

void RootWindow::OnButtonDown(LPARAM lParam)
{
 // Erase any previous polygon
 InvalidateRect(m_hwnd, NULL, TRUE);

 m_cpt = 0;
 POINT pt = { GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam) };
 AlwaysAddPoint(pt);
 m_fDrawing = TRUE;
}

void RootWindow::OnButtonUp(LPARAM lParam)
{
 if (!m_fDrawing) return;

 OnMouseMove(lParam);

 // Close the loop, eating the last point if necessary
 AlwaysAddPoint(m_rgpt[0]);
 m_fDrawing = FALSE;
 UpdateTitle();
}</font>

LRESULT RootWindow::HandleMessage(
                          UINT uMsg, WPARAM wParam, LPARAM lParam)
{
 switch (uMsg) {
  case WM_CREATE:
   <font COLOR=blue>OnCreate();  
   break;</font>

  case WM_NCDESTROY:
   // Death of the root window ends the thread
   PostQuitMessage(0);
   break;

  case WM_SIZE:
   <font COLOR=blue>if (wParam == SIZE_MAXIMIZED || wParam == SIZE_RESTORED) {
    OnSizeChanged(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam));
   }
   break;

  case WM_MOUSEMOVE:
   OnMouseMove(lParam);
   break;

  case WM_LBUTTONDOWN:
   OnButtonDown(lParam);
   break;

  case WM_LBUTTONUP:
   OnButtonUp(lParam);
   break;</font>
 }

 return __super::HandleMessage(uMsg, wParam, lParam);
}

RootWindow *RootWindow::Create()
{
 RootWindow *self = new(std::nothrow) RootWindow();
 if (self && self->WinCreateWindow(<font COLOR=blue>WS_EX_LAYERED</font>,
       TEXT("Scratch"), WS_OVERLAPPEDWINDOW,
       CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,
       NULL, NULL)) {
      return self;
  }
 delete self;
 return NULL;
}
</pre>
<p>
This program records every mouse movement while the button
is down and replays them in the form of a dotted polygon.
When the mouse button goes up, it calculates the area both
in terms of pixels and in terms of a percentage of the circle.
</p>
<p>
This program works well.
My relative's hand moves slowly enough (after all, it has
to trace a tumor) that the <code>Get&shy;Message</code> loop
is plenty fast enough to keep up.
But just for the sake of illustration, suppose it isn't.
To make the effect easier to see, let's add some artificial
delays:
</p>
<pre>
void RootWindow::OnMouseMove(LPARAM lParam)
{
 if (m_fDrawing) {
  POINT pt = { GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam) };
  AddPoint(pt);
  <font COLOR=blue>UpdateWindow(m_hwnd);
  Sleep(100);</font>
 }
}
</pre>
<p>
Now, if you try to draw with the mouse, you see all sorts of
jagged edges because our program can't keep up.
(The <code>Update&shy;Window</code> is just to make the most recent
line visible while we are sleeping.)
</p>
<p>
Enter
<code>Get&shy;Mouse&shy;Move&shy;Points&shy;Ex</code>.
This gives you all the mouse activity that led up to a specific
point in time,
allowing you to fill in the data that you missed because you weren't
pumping messages fast enough.
Let's teach our program how to take advantage of this:
</p>
<pre>
class RootWindow : public Window
{
...
 void AlwaysAddPoint(POINT pt);
 <font COLOR=blue>void AddMissingPoints(POINT pt, DWORD tm);</font>
 void AddPoint(POINT pt);
...
 POINT m_ptLast;
 <font COLOR=blue>DWORD m_tmLast;</font>
 int   m_cpt;
};

<font COLOR=blue>void RootWindow::AddMissingPoints(POINT pt, DWORD tm)
{
 // See discussion for why this code is wrong
 <i>ClientToScreen(m_hwnd, &amp;pt);</i>
 MOUSEMOVEPOINT mmpt = { pt.x, pt.y, tm };
 MOUSEMOVEPOINT rgmmpt[64];
 int cmmpt = GetMouseMovePointsEx(sizeof(mmpt), &amp;mmpt,
                            rgmmpt, 64, GMMP_USE_DISPLAY_POINTS);

 POINT ptLastScreen = m_ptLast;
 <i>ClientToScreen(m_hwnd, &amp;ptLastScreen);</i>
 int i;
 for (i = 0; i &lt; cmmpt; i++) {
  if (rgmmpt[i].time &lt; m_tmLast) break;
  if (rgmmpt[i].time == m_tmLast &amp;&amp;
      rgmmpt[i].x == ptLastScreen.x &amp;&amp;
      rgmmpt[i].y == ptLastScreen.y) break;
 }
 while (--i >= 0) {
   POINT ptClient = { rgmmpt[i].x, rgmmpt[i].y };
   <i>ScreenToClient(m_hwnd, &amp;ptClient);</i>
   AddPoint(ptClient);
 }
}</font>

void RootWindow::AlwaysAddPoint(POINT pt)
{
...
 // Add the point
 m_rgpt[m_cpt++] = pt;
 m_ptLast = pt;
 <font COLOR=blue>m_tmLast = GetMessageTime();</font>
}

void RootWindow::OnMouseMove(LPARAM lParam)
{
 if (m_fDrawing) {
  POINT pt = { GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam) };
  <font COLOR=blue>AddMissingPoints(pt, GetMessageTime());</font>
  AddPoint(pt);
  UpdateWindow(m_hwnd);
  Sleep(100); // artificial delay to simulate unresponsive app
 }
}
</pre>
<p>
Before updating the the current mouse position,
we check to see if there were other mouse motions
that occurred while we weren't paying attention.
We tell <code>Get&shy;Mouse&shy;Move&shy;Points&shy;Ex</code>,
"Hey, here is a mouse message that I have right now.
Please tell me about the stuff that I missed."
It fills in an array with recent mouse history,
most recent events first.
We go through that array looking for the previous point,
and give up either when we find it, or when the timestamps
on the events we received take us too far backward in time.
Once we find all the points that we missed,
we play them into the <code>Add&shy;Point</code> function.
</p>
<p>
<b>Notes to people who like to copy code without understanding it</b>:
The code fragment above works only for
single-monitor systems.
To work correctly on multiple-monitor systems,
you need to include the crazy coordinate-shifting
code provided in the documentation for
<code>Get&shy;Mouse&shy;Move&shy;Points&shy;Ex</code>.
(I omitted that code because it would just be distracting.)
Also, the management of <code>m_tmLast</code> is now
rather confusing, but I did it this way to minimize the
amount of change to the original program.
It would probably be better to have added a
<code>DWORD tm</code> parameter to <code>Add&shy;Point</code>
instead of trying to infer it from the current message time.
</p>
<p>
The
<code>Get&shy;Mouse&shy;Move&shy;Points&shy;Ex</code>
technique is also
handy if you need to refer back to the historical record.
For example, if the user dragged the mouse out of your window
and you want to calculate the velocity with which the mouse exited,
you can use
<code>Get&shy;Mouse&shy;Move&shy;Points&shy;Ex</code>
to get the most
recent mouse activity and calculate the velocity.
This saves you from having to record all the mouse activity yourself
on the off chance that the mouse might leave the window.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-972413">
				<div id="div-comment-972413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Douglas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120314-00/?p=8103#comment-972413">
			March 14, 2012 at 8:37 am</a>		</div>

		<p>&quot;This saves you from having to record all the mouse activity yourself on the off chance that the mouse might leave the window.&quot;</p>
<p>Or capture the mouse in button down and release capture in button up so that you get all mouse messages, even if they leave the window.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-972443">
				<div id="div-comment-972443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120314-00/?p=8103#comment-972443">
			March 14, 2012 at 10:08 am</a>		</div>

		<p>Isn&#39;t the multimonitor adjustment equivalent to casting to signed short? Just kind of strange that the conversion for input points and output points is not symmetrical.</p>
<div class="post">[<i>I didn&#39;t spend any time studying it. I just made a note and moved on, since it&#39;s not the point of the article. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-972453">
				<div id="div-comment-972453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120314-00/?p=8103#comment-972453">
			March 14, 2012 at 10:56 am</a>		</div>

		<p>If you want your paint application to work over remote desktop, now you know how.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-972463">
				<div id="div-comment-972463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120314-00/?p=8103#comment-972463">
			March 14, 2012 at 12:41 pm</a>		</div>

		<p>Why does GetMouseMovePointsEx require the x and y coords, isn&#39;t the timestamp enough?</p>
<div class="post">[<i>That assumes that there can be at most one mouse event per millisecond. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-972493">
				<div id="div-comment-972493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120314-00/?p=8103#comment-972493">
			March 14, 2012 at 2:18 pm</a>		</div>

		<p>&gt; That assumes that there can be at most one mouse event per millisecond</p>
<p>Okay, so what measures does GetMouseMovePointsEx take to handle the ABA problem then? I assume windows is coded to make sure that 2 equal timestamps can&#39;t share the same x,y coords?</p>
<div class="post">[<i>Yes, there is an ABA race here, but it&#39;s better than nothing. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-972523">
				<div id="div-comment-972523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120314-00/?p=8103#comment-972523">
			March 14, 2012 at 2:58 pm</a>		</div>

		<p>I like the polygon area algorithm: it&#39;s very simple and it copes with overflows in its accumulator. &nbsp;The only downside is daft results if the curve isn&#39;t simple (like a figure-eight).</p>
<p>I guess it&#39;s very standard but I&#39;ve not seen it before.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-972533">
				<div id="div-comment-972533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jas71_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>jas71@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120314-00/?p=8103#comment-972533">
			March 14, 2012 at 3:47 pm</a>		</div>

		<p>&quot;Oh great, now I&#39;m telling people to practice medicine without a license.&quot;</p>
<p>Funny &#8230; when I read that, my first thought was remembering some years ago when my vacation job included setting up web servers &#8211; one of which happened to be a medical one (a European mirror site for Yale medical school&#39;s &#39;GASNet&#39;, the Global Anesthesiology Server Network; the server hardware was stolen in 1999, though the DNS entry is still there today!) We didn&#39;t have rsync in those days, and even universities didn&#39;t have the bandwidth to spare to tar and copy the whole site each night, so I had to hack a Perl script to do the job. (It *almost* worked, but not quite.) The site admin thanked me on the front page, complete with email address (spam not being widespread that far back!)</p>
<p>At which point, I started getting email asking medical advice: &quot;I have a stabbing pain in &#8230; what should I do?&quot;. &quot;Er, try a doctor, not a student moonlighting as sysadmin?&quot;</p>
<p>My second thought was &quot;hm, that might be useful in the endoscopy project I&#39;m working on now&quot;. (Measurement is rather more difficult there than with X-ray or MRI images because of the angles, though.)</p>
<p>On the ABA problem: the default USB mouse polling rate is 125 Hz, which would put each coordinate 8 ms apart &#8211; and since neither the radiologist&#39;s monitor nor his hand-eye coordination will be operating even that fast; if you&#39;re getting more than one mouse position per millisecond, the vast majority won&#39;t relate to actual movements by the operator anyway!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-asklar odd alt thread-odd thread-alt depth-1" id="comment-972543">
				<div id="div-comment-972543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alexander+Sklar' rel='external nofollow' class='url'>Alexander Sklar</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120314-00/?p=8103#comment-972543">
			March 14, 2012 at 10:31 pm</a>		</div>

		<p>[I know, unrelated to the API being discussed but I couldn&#39;t help myself :)]</p>
<p>Don&#39;t you need to add a term to the sum to account for x[n]*y[0] &#8211; x[0]*y[n]?</p>
<div class="post">[<i>x[n] == x[0] and y[n] == y[0], so the missing term is zero. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-972583">
				<div id="div-comment-972583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120314-00/?p=8103#comment-972583">
			March 15, 2012 at 7:53 am</a>		</div>

		<p>@jas88: Aren&#39;t there higher-performance mice out there that use high-speed USB 2.0 to achieve a faster sample rate (i.e. &lt; 1 ms)? &nbsp;Seems like I remember seeing a review of one awhile back.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-972593">
				<div id="div-comment-972593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120314-00/?p=8103#comment-972593">
			March 15, 2012 at 8:16 am</a>		</div>

		<p>[Yes, there is an ABA race here, but it&#39;s better than nothing. -Raymond]</p>
<p>I would assume the results are returned in collection order so there is no ABA race.</p>
<div class="post">[<em>Suppose the mouse move from x,y to z,w, then back to x,y all within a single millisecond. Which x,y is the one you are looking for? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-972943">
				<div id="div-comment-972943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120314-00/?p=8103#comment-972943">
			March 17, 2012 at 12:41 am</a>		</div>

		<p>@JamesJohnston: Unfortunately, that&#39;s not possible. USB is a host-polled bus, so the host decides how fast a given device wants to be polled. If the Windows HID driver polls for reports at 125Hz, it only gets reports at 125Hz. There&#39;s no way for the mouse to push HID reports any faster than that &#8211; it can only do it when the host asks for the report.</p>
<p>Now, USB allows for polling rates up to 1kHz, but almost no OS implements it that fast &#8211; usually it&#39;s around 4ms per transaction or so.</p>
<p>A high resolution mouse simply reports larger delta X/Y values every report.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

