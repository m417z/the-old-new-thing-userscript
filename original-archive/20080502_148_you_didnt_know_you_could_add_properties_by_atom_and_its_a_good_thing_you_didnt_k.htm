<html>
<head>
<title>You didn't know you could add properties by atom, and it's a good thing you didn't know</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>You didn&#8217;t know you could add properties by atom, and it&#8217;s a good thing you didn&#8217;t know</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 2, 2008 / year-entry #149</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080502-00/?p=22483</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">As I noted a few days ago, there is weirdness associated with properties added by atom. This weirdness stems from the fact that adding properties by atom is really a hole in the original implementation rather than something designed on purpose. The original 16-bit code for adding and removing properties went roughly like this: BOOL...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
As I noted a few days ago,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/04/30/8440201.aspx">
there is weirdness associated with properties added by atom</a>.
This weirdness stems from the fact that adding properties by atom
is really a hole in the original implementation
rather than something designed on purpose.
</p>
<p>
The original 16-bit code for adding and removing properties went
roughly like this:
</p>
<pre>
BOOL SetProp(HWND hwnd, LPSTR pszName, HANDLE hValue)
{
    ... let's look only at the part that adds a new property ...

    ATOM atm = HIWORD(pszName) ? GlobalAddAtom(pszName) : LOWORD(pszName);
    if (atm == 0) return FALSE;

    ... add the atom "atm" to the property list ...
}

HANDLE RemoveProp(HWND hwnd, LPSTR pszName)
{
    ATOM atm = HIWORD(pszName) ? GlobalFindAtom(pszName) : LOWORD(pszName);
    if (atm == 0) return NULL;

    ... look for the atom "atm" in the property list and remove it ...
    if (!found) return NULL;

    // clean up the atom
    if (HIWORD(pszName)) GlobalDeleteAtom(atm);
}

void CleanPropertiesWhenWindowIsDestroyed(HWND hwnd)
{
    for (each property on the window) {
        if (atm >= MAXINTATOM) GlobalDeleteAtom(atm);
    }
    .. delete memory used for recording properties ...
}
</pre>
<p>
First, let's look at properties set and removed via integer atoms.
These are simple:
When setting the property, we just add it to the property list,
and when removing the property, we remove it.
Nothing fancy going on here.
</p>
<p>
Similarly, there's nothing particularly exciting going on if a property
is set and removed by name.
When setting the property, we use <code>GlobalAddAtom</code> to convert
the string to an atom (incrementing the reference count),
and when removing it, we use <code>GlobalDeleteAtom</code>
to clean it up (decrementing the reference count and removing the atom
if the reference count goes to zero).
</p>
<p>
Finally, when a window is destroyed with outstanding properties,
we clean them up by calling <code>GlobalDeleteAtom</code> on all
the string atoms, counteracting the <code>GlobalAddAtom</code> we
performed when we added the property.
</p>
<p>
So what's the big deal? Looks great, right?
</p>
<p>
See if you can find the hole in this implementation.
</p>
<p>
Hint&nbsp;1:
There are actually <i>three</i> ways of adding and removing properties
from a window,
not the two I led you to believe.
<!--
You can use an integer atom (one whose numerical value is less than
<code>MAXINTATOM</code>),
you can use a string atom (an atom whose numerical value is between
<code>MAXINTATOM</code> and <code>0xFFFF</code>),
or you can use a string.
-->
</p>
<p>
Hint&nbsp;2:
What happens if you mix and match these three methods?
</p>
<p>
Hint&nbsp;3:
What happens to each of the three types of properties when the
window manager is forced to clean them up?
</p>
<p>
These problems with properties were fixed a long time ago,
but old-timers remain wary of adding named properties by string atom.
It's one of those
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2007/10/23/5612082.aspx">
superstitions</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-625913">
				<div id="div-comment-625913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080502-00/?p=22483#comment-625913">
			May 2, 2008 at 1:29 pm</a>		</div>

		<p>&quot;See if you can find the hole in this implementation.&quot;</p>
<p>Looks like CleanPropertiesWhenWindowIsDestroyed() destroys all string atoms, not just the ones that were created internally by SetProp(&quot;string&quot;) calls.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-625923">
				<div id="div-comment-625923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080502-00/?p=22483#comment-625923">
			May 2, 2008 at 1:34 pm</a>		</div>

		<p>Hmm, local atom?</p>
<p>Docs says it should be global, but can SetProp() tell the difference?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-madq42 even thread-even depth-1" id="comment-625953">
				<div id="div-comment-625953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MadQ1' rel='external nofollow' class='url'>MadQ1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080502-00/?p=22483#comment-625953">
			May 2, 2008 at 4:13 pm</a>		</div>

		<p>I&#8217;m assuming that an ATOM&#8217;s reference count really is global, meaning that one process could GlobalAddAtom, and another process could GlobalDeleteAtom it out of existence. The documentation isn&#8217;t specific about this (and I don&#8217;t think it needs to be, but I&#8217;m too lazy right now to write a program to find out.)</p>
<p>That being the case, using window properties as implemented above, it&#8217;s possible that an application or the window manager could accidentally delete a registered clipboard format or window message.</p>
<p>This could lead to two applications trying to communicate, but they could each have a different ATOM value for a registered window message or clipboard format. Ouch!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-625973">
				<div id="div-comment-625973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://zeroflag.wordpress.com' rel='external nofollow' class='url'>Yoni</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080502-00/?p=22483#comment-625973">
			May 2, 2008 at 6:22 pm</a>		</div>

		<p>Two guesses:</p>
<ol>
<li>Suppose you write</li>
</ol>
<p>hwnd1 = CreateWindow(..);</p>
<p>hwnd2 = CreateWindow(..);</p>
<p>SetProp(hwnd1, &quot;evil_prop&quot;, 0);</p>
<p>evil_prop_atom = GlobalFindAtom(&quot;evil_prop&quot;);</p>
<p>SetProp(hwnd2, evil_prop_atom, 0);</p>
<p>DestroyWindow(hwnd1);</p>
<p>DestroyWindow(hwnd2);</p>
<p>Unless I&#8217;m mistaken, this will double-free the property.</p>
<ol>
<li>If I&#8217;m reading your pseudocode correctly, you can use integer atoms as properties (i.e. pass &quot;#32770&quot; as the property name). This fits in with your first hint better than my previous guess, but I don&#8217;t see how it leads to a hole.</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-625993">
				<div id="div-comment-625993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Unknown</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080502-00/?p=22483#comment-625993">
			May 3, 2008 at 7:45 am</a>		</div>

		<p>You say &quot;the fact that adding properties by atom is really a hole in the original implementation&quot;. So the intended implementation was just to allow normal strings and MAKEINTATOM(integer_atom) as pszName argument.</p>
<p>Now, why is the first line like:</p>
<p>ATOM atm = HIWORD(pszName) ? GlobalAddAtom(pszName) : LOWORD(pszName);</p>
<p>and not just like:</p>
<p>ATOM atm = GlobalAddAtom(pszName);</p>
<p>?</p>
<p>This way pszName is still allowed to be MAKEINTATOM(integer_atom) and no hole would have existed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-626003">
				<div id="div-comment-626003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Unknown</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080502-00/?p=22483#comment-626003">
			May 3, 2008 at 8:41 am</a>		</div>

		<p>May it be the source of the &quot;hole in the original implementation&quot; was actually in GlobalAddAtom/AddAtom?</p>
<p>Maybe the original implementation always returned pszName directly when pszName was specified as MAKEINTATOM() without checking if the value specified was actually &lt; MAXINTATOM?</p>
<p>Am I right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-626023">
				<div id="div-comment-626023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080502-00/?p=22483#comment-626023">
			May 3, 2008 at 4:44 pm</a>		</div>

		<p>I&#8217;ve never had use for SetProp(), it&#8217;s something that can be done, or is already being done, other ways. &nbsp; But some code of our application has used it.</p>
<p>Is the code above suposed to be pseudo code of the implementation of SetProp/RemoveProp in Windows 3.x? &nbsp;It has been my understanding from MSDN (and Bounds Checker &#8211; god bless its soul) that the properties added to a HWND leak if you don&#8217;t remove them before destruction. &nbsp;So what&#8217;s this CleanPropertiesWhenWindowIsDestroyed ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-626033">
				<div id="div-comment-626033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080502-00/?p=22483#comment-626033">
			May 4, 2008 at 6:06 am</a>		</div>

		<p>When you say the problems were long solved does that mean it&#8217;s safe to call SetProp with atoms on modern (NT-based) versions of Windows, or is there still a gotcha which means it&#8217;s better to stick to string property names even now?</p>
<p>MSDN says you can pass an atom for the lpString argument so it&#8217;s no secret. I do this when subclassing windows (storing the original winproc in a property) as I assumed it would be faster to convert the string to an atom once myself instead of making the OS do it twice for every subclassed control.</p>
<p>If there&#8217;s a risk that something will go wrong then I&#8217;ll switch to using strings as robustness is is more important than speeding up window opening by a fraction of a millisecond.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

