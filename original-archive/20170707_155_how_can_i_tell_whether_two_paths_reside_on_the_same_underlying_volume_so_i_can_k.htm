<html>
<head>
<title>How can I tell whether two paths reside on the same underlying volume, so I can know whether they can be hard-linked?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I tell whether two paths reside on the same underlying volume, so I can know whether they can be hard-linked?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 7, 2017 / year-entry #156</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>24</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Don't try to guess. Just do it.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer wanted to know whether there was a way to determine
whether two paths reside on the same underlying volume.
They were concerned that due to tricks like
<code>SUBST</code> and volume mount points,
the na&iuml;ve algorithm of comparing drive letters
may prove inadequate.
</p>
<p>
You can use
<code>Get&shy;File&shy;Information&shy;By&shy;Handle</code>
to get the volume serial number and the file index.
Even better is to call
<code>Get&shy;File&shy;Information&shy;By&shy;Handle&shy;Ex</code>
with the <code>File&shy;Id&shy;Info</code> information code,
because ReFS use a 64-bit volume identifier and a 128-bit file identifier
(double the size of NTFS).
</p>
<p>
There is a small chance that two volumes might happen to have the
same volume identifier, seeing as a 32-bit value (or a 64-bit
value in the case of ReFS) is not quite enough to guarantee
global uniqueness.
You can try to filter out that case by using
<code>Open&shy;File&shy;By&shy;Id</code>
and passing the first file's file handle and the second file's ID.
The
<code>Open&shy;File&shy;By&shy;Id</code> uses the file handle
to decide what volume to use,
so passing the first file's file handle means
"Open the new file from the same volume that the old file is on."
You can then compare the newly-opened file's
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20110228-00/?p=11363">
object GUID</a>
against the object GUID of the intended second file and see if they match.
</p>
<p>
Actually, I guess you could have gone straight for the object GUID
from the outset:
Obtain the object GUID for the second file,
then try to open the file by its GUID (relative to the first file).
</p>
<p>
But wait,
we're so distracted by answering the customer's question
that we don't understand the customer's <i>problem</i>.
</p>
<p>
The customer explained that they want to
create a content-addressable database,
but if they find that there's already a database on the same volume,
then they can
just hard-link the contents together and save disk space.
</p>
<p>
Oh,
so the problem isn't "Determine whether two files are on the same volume
(so I can hard-link them)."
The problem is "Determine whether two files can be hard-linked."
</p>
<p>
That problem is much easier to solve.
The way to determine whether two files can be hard-linked is to
try hard-linking them and seeing if it works.
As
<a HREF="https://blogs.msdn.microsoft.com/jaredpar/">
Jared Parsons</a>
noted,
<a HREF="https://blogs.msdn.microsoft.com/jaredpar/2009/12/10/the-file-system-is-unpredictable/">
the file system is unpredictable</a>.
</p>
<blockquote CLASS="q"><p>
Do the operations you want
and deal with the consequences of failure [...].
To do anything else involves an unreliable prediction
in which you still must handle the resulting [failure].
</p>
</blockquote>
<p>
(Jared's article is written for a C# audience, so he talks
about exceptions, because that's the C# paradigm for error handling.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1301525">
				<div id="div-comment-1301525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301525">
			July 7, 2017 at 7:35 am</a>		</div>

		<p>It&#8217;s amazing how much simpler things become when you think about them in the right way.</p>
<p>Even if you write the code to determine if the paths reside on the same volume, you&#8217;ll still have code to try to hard-link the files.  And you should handle any exception or failure form that hard-link attempt anyway.  Just try the hard-linking!</p>
<p>And there may be other reasons, now or in the future, why two files can&#8217;t be hard linked.  Even if you knew all of the reasons, you don&#8217;t want to have to code for all of them.  </p>
<p>Thanks for a great article.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1301645">
				<div id="div-comment-1301645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zenith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301645">
			July 7, 2017 at 11:59 am</a>		</div>

		<p>One reason that you would want to know if files can be hard linked without actually trying to do it is a case where you have a collection of files to hard link and don&#8217;t want to be left in an aborted state when something fails in the middle.  Not thinking defensively like this is why so much software is practically unusable and God help you if you ever have a problem that support&#8217;s only answer, if they answer at all, in a reboot/reinstall.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1301646">
				<div id="div-comment-1301646" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301646">
			July 7, 2017 at 12:16 pm</a>		</div>

		<p>If you have a bunch of files to hard link, you can check all of them, and STILL some of the attempts to hard-link the files can fail.  </p>
<p>I am not sure you read the article!  Checking certain conditions only tells you the &#8220;recent&#8221; state of things; File.Exists means &#8220;File existed recently&#8221;, not &#8220;File Exists Now&#8221;. </p>
<p>You STILL may have to check for error codes, and as I mentioned, do you know all of the current and FUTURE reasons why hard-linking two files might fail?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fredericmagnyf odd alt depth-4" id="comment-1301765">
				<div id="div-comment-1301765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301765">
			July 11, 2017 at 2:22 am</a>		</div>

		<p>It still reduces the window for failure in a state the program(mer) doesn&#8217;t know how to recover.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-torrin-jones even thread-odd thread-alt depth-1" id="comment-1301535">
				<div id="div-comment-1301535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/torrinj' rel='external nofollow' class='url'>torrinj</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301535">
			July 7, 2017 at 7:38 am</a>		</div>

		<p>Ah yes, in python and probably other languages this is referred to as EAFP (Easier to ask forgiveness that permission) vs LBYL (look before you leap).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1301545">
				<div id="div-comment-1301545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301545">
			July 7, 2017 at 7:47 am</a>		</div>

		<p>So let&#8217;s try to write a shell extension for Windows^WFile Explorer to create hardlinks, for example via extending the drag&amp;drop context menu of the right mouse button with an entry &#8220;Create hardlink(s) here&#8221;.<br />
According to the well-known UX guidelines (context) menu entries which can&#8217;t be executed should not be shown to the user.<br />
If the shell extension always presents &#8220;Create hardlink(s) here&#8221; due to &#8220;try to hard-link them and see if it works&#8221; this would violate the UX guidelines.<br />
So: how should a proper implemented shell extension handle it?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1301565">
				<div id="div-comment-1301565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301565">
			July 7, 2017 at 8:13 am</a>		</div>

		<p>Well, it&#8217;s because Raymond has misstated the task.  The one in the post really is &#8220;Hardlink two files, if possible&#8221;.  The UX one really is &#8220;Determine whether two files can be hard-linked&#8221; and as you note, using the create-hardlink action to test this has undesirable side effects in the case when the answer is &#8220;it is possible&#8221;.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1301656">
				<div id="div-comment-1301656" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301656">
			July 7, 2017 at 12:20 pm</a>		</div>

		<p>The task to &#8220;determine whether two files can be hard linked&#8221; should be left to the file system, not user code.  There might not be a good way to test this.  </p>
<p>And yes, this is confusing because a hardlink is not really between two existing files&#8230;.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1302157">
				<div id="div-comment-1302157" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1302157">
			July 16, 2017 at 5:26 am</a>		</div>

		<p>Then you risk running into the user hostile UX that are all too common:<br />
1. Do you really want to perform action X?<br />
yes<br />
2. Haha, you&#8217;re not allowed to do that!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1301685">
				<div id="div-comment-1301685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ja</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301685">
			July 7, 2017 at 9:48 pm</a>		</div>

		<p>It is a guideline, not all options can follow this guideline &#8220;menu entries which can’t be executed should not be shown to the user&#8221;. For example an Open File Menu. Even if the program check the extension to ensure the file is the corrected type, it doesn&#8217;t mean the file can be opened, it might be corrupted, has wrong format with the same extension, heck it might even be on a network drive that was unplugged after the Open File Dialog was launched.</p>
<p>In fact even with hard-linking, suppose you wrote a super hardlink checker that has a 100% success rate to check if it can be hard linked. That still doesn&#8217;t stop the target file from being moved after running the super hardlink checker, which means your hardlink operation still fail when the user trigger it.</p>
<p>In my opinion, I think the guideline were meant to display operations that are allowed in the UI for a given state and hidden when not permissible in the program state. I don&#8217;t think it was meant for operations that are allowed but might possibly fail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1301695">
				<div id="div-comment-1301695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">djhayman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301695">
			July 8, 2017 at 1:19 am</a>		</div>

		<p>That context menu will still show &#8220;Copy here&#8221;, &#8220;More here&#8221;, and &#8220;Create shortcuts here&#8221;, even if you do not have write permission in the target folder, or if the target volume is full. It will also show &#8220;Move Here&#8221; even if you don&#8217;t have permission to delete the original file. It will attempt to execute each action, knowing full well that it might fail.</p>
<p>So in this case, it&#8217;s less &#8220;don&#8217;t show context menu items that can&#8217;t be executed right now&#8221; and more &#8220;don&#8217;t show context menu items that can never be executed&#8221;.</p>
<p>For example, if you have 7-Zip installed, a right-click-and-drag on a folder will add &#8220;Add to archive&#8221;, while a right-click-and-drag on a file will add &#8220;Add to archive&#8221; and &#8220;Extract files here&#8221;. It doesn&#8217;t add &#8220;Extract files here&#8221; when you right-click-and-drag a folder, because that can never possibly work. But either way, &#8220;Add to archive&#8221; might still fail at any time because you might not have write permission to create a new file in the target folder.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1301706">
				<div id="div-comment-1301706" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://geelaw.blog/' rel='external nofollow' class='url'>GL</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301706">
			July 9, 2017 at 7:25 am</a>		</div>

		<p>It is okay to fail a context drag &amp; drop menu because Explorer often fails one. For example, if you are unelevated and you go to C:\Windows, hold the context button, drag and drop <code>write.exe</code> in-place and click Create shortcuts here, you are notified that Windows cannot create a shortcut here (because the permission was denied).</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1301715">
				<div id="div-comment-1301715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301715">
			July 9, 2017 at 9:47 am</a>		</div>

		<p>This is not OK, but a violation of one of the basic UX principles <a href="https://msdn.microsoft.com/en-us/library/dn742392.aspx#guidelines" rel="nofollow">https://msdn.microsoft.com/en-us/library/dn742392.aspx#guidelines</a> <b>remove rather than disable context menu items that don&#8217;t apply to the current context.</b></p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-chd1 odd alt depth-4 parent" id="comment-1301716">
				<div id="div-comment-1301716" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ChDF+T' rel='external nofollow' class='url'>ChDF T</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301716">
			July 9, 2017 at 5:25 pm</a>		</div>

		<p>I think &#8220;not applicable in this context&#8221; and &#8220;not possible to execute&#8221; have two different meanings in this context.<br />
Consider the &#8220;execute as Administrator&#8221; context menu item. It doesn&#8217;t make sense to show it on anything that isn&#8217;t executable (like a .txt file), because it is not applicable in that context. However it is relevant for all executable files (like .exe files), even if the user does not have the required permissions to actually start an elevated process.<br />
This also exposes valuable information to the user, in case they <i>want</i> to start an elevated process but <i>can&#8217;t</i>, because they don&#8217;t have the required permissions.</p>
<p>Additionally, it is important to keep the UI consistent. Even if you can check the feature for availability on NTFS, FAT16, FAT32 and all other file systems you know, you can&#8217;t reliably do that on a file system you don&#8217;t know (for example because it wasn&#8217;t invented at the time of writing). So I would argue, that unless there is a documented way to check feature availability in all cases, you shouldn&#8217;t check at all and deal with the consequences.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1301845">
				<div id="div-comment-1301845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301845">
			July 11, 2017 at 3:34 pm</a>		</div>

		<p>One meaning (or interpretation) of &#8220;dont apply in the current context&#8221; is &#8220;to know (or evaluate) the preconditions for an operation to succeed&#8221;.<br />
Try to copy a file to a &#8220;shell folder&#8221; like &#8220;printers&#8221;&#8230;<br />
Open an elevated command prompt and try to drag&amp;drop a filesystem object from an unelevated Explorer window into it&#8230;</p>
<p>A context menu entry &#8220;Open as administrator&#8221; for text files like C:\Windows\*.ini or C:\Windows\System32\Drivers\etc\hosts would of course &#8220;make sense&#8221;, if you intend to actually write changes back to these files.</p>
<p>To display the context menu entry &#8220;Execute as administrator&#8221; is but <b>nonsense</b> if<br />
* the user can&#8217;t get elevated rights, for example when the administrator set<br />
[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System]<br />
&#8220;ConsentPromptBehaviorUser&#8221;=dword:0<br />
* when the current user is already administrator^Welevated,<br />
* when the application does not support it (try to run Explorer.exe elevated!)<br />
JFTR: Windows property system allows to enable/disable menu items depending on the current context; set<br />
[HKEY_CLASSES_ROOT\exefile\Shell\RunAs]<br />
&#8220;AppliesTo&#8221;=&#8221;System.FileName:&lt;&gt;Explorer.Exe&#8221;<br />
[HKEY_CLASSES_ROOT\exefile\Shell\RunAsUser]<br />
&#8220;AppliesTo&#8221;=&#8221;System.FileName:&lt;&gt;Explorer.Exe&#8221;</p>
<p>For consistent behaviour see the first paragraph.<br />
Regarding consistent behaviour and filesystems: see <a href="https://msdn.microsoft.com/en-us/library/aa364993.aspx" rel="nofollow">https://msdn.microsoft.com/en-us/library/aa364993.aspx</a> for the documented way to check whether a filesystem supports features like hardlinks, reparse points etc.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1301575">
				<div id="div-comment-1301575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301575">
			July 7, 2017 at 8:21 am</a>		</div>

		<p>I agree with the &#8220;deal with the consequences&#8221; approach in general, but MSDN makes this quite difficult.  The documentation for CreateHardLink says nothing about the possible error codes for this function&#8211;just the usual &#8220;call GetLastError for more info.&#8221;  So there&#8217;s no way I can detect and react to lack of hard link support without taking a dependency on Windows&#8217; internal implementation details.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1301585">
				<div id="div-comment-1301585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301585">
			July 7, 2017 at 9:08 am</a>		</div>

		<p>Expect ERROR_INVALID_FUNCTION if the volume does not support hardlinks and ERROR_NOT_SAME_DEVICE if you try to create a hardlink on another volume.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1301605">
				<div id="div-comment-1301605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301605">
			July 7, 2017 at 9:55 am</a>		</div>

		<p>Correct. To find out what it was I had to probe for it. My interpretation of the resulting text was &#8220;that system call doesn&#8217;t exist&#8221;. Nevertheless, that&#8217;s what it is.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even depth-2 parent" id="comment-1301595">
				<div id="div-comment-1301595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301595">
			July 7, 2017 at 9:53 am</a>		</div>

		<p>It seems in the instant case that the BOOL return value is enough. Either the hardlink created or it didn&#8217;t. Not sure what different actions you would take on failure.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-3" id="comment-1301676">
				<div id="div-comment-1301676" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301676">
			July 7, 2017 at 6:38 pm</a>		</div>

		<p>Elevate on access denied.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1301625">
				<div id="div-comment-1301625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301625">
			July 7, 2017 at 10:45 am</a>		</div>

		<p>I&#8217;m just curious how do you hard link two files while they still exists?<br />
I was under the impression, that you&#8217;ll have to delete one of them and make it point to the other one.<br />
At this point realizing that you cannot hard-link them might be a nasty surprise.<br />
Yes, I realize you still may run into a problem but you can work around that but this can be time-consuming, so it would be better to try this only if one already knows that it would worth it.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong odd alt depth-2" id="comment-1301726">
				<div id="div-comment-1301726" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301726">
			July 10, 2017 at 12:14 am</a>		</div>

		<p>You create another hardlink pointed to the first file in &#8220;second file&#8217;s folder&#8221;.</p>
<p>If it can be created, you could create hardlink with second file name on that folder after you deleted it. (Of course, this assume you have right to delete it)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1301666">
				<div id="div-comment-1301666" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1301666">
			July 7, 2017 at 2:02 pm</a>		</div>

		<p>Customer&#8217;s problem be damned, this is still an excellent piece on nitty-gritty ways of working with hardlinks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-santosh-sampath odd alt thread-even depth-1" id="comment-1302225">
				<div id="div-comment-1302225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/santoshsa' rel='external nofollow' class='url'>santoshsa</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170707-00/?p=96555#comment-1302225">
			July 17, 2017 at 10:26 am</a>		</div>

		<p>What happens in this somewhat related case?<br />
Using remote desktop from a client which has C: and subst V: pointing to C:\folder.<br />
Inside session we map drives. For e.g. net use Z: \\tsclient\C and net use Y: \\tsclient\Y</p>
<p>If an app inside remote desktop accesses Z:\folder\test.txt and Y:\test.txt which are same file really.<br />
Copying file via explorer from above src to destination throws access denied because of incompatible file share access.<br />
But I imagine an application which doesn&#8217;t know both are referring to same file (if it opens with file_shared_read|file_shared_write) corrupting the file(s).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

