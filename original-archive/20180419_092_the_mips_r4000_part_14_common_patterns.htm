<html>
<head>
<title>The MIPS R4000, part 14: Common patterns</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The MIPS R4000, part 14: Common patterns</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 19, 2018 / year-entry #92</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180419-00/?p=98555</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">How to recognize different kinds of jumps and calls.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Okay, now that we see how function calls work, we can demonstrate
some common code sequences.
If you are debugging through MIPS code,
you'll need to be able to recognize these different types of
calling sequences in order to keep your bearings.
</p>
<p>
Non-virtual calls generally look like this:
</p>
<pre>
    ; Put the parameters in a0 through a3,
    ; and additional parameters go on the stack
    ; after the home space.
    sw      t0, 20(sp)  ; parameter 5 passed on the stack
    move    a3, s1      ; parameter 4 copied from another register
    addiu   a2, sp, 32  ; parameter 3 is address of local variable
    addiu   a1, t1, 1   ; parameter 2 is calculated in place
    jal     destination ; call the function
    move    a0, s1      ; parameter 1 copied from another register
</pre>
<p>
The parameters could be set up in any order,
and there's a good chance you'll find one of the parameters
being set up in the branch delay slot.
Note also that the <code>JAL</code> instruction might end up
jumping to an import stub if this turns out to have been a
na&iuml;vely-imported function.
</p>
<p>
Virtual calls load the destination from the target's vtable:
</p>
<pre>
    ; "this" passed in a0. Other parameters go
    ; into a1 through a3, with additional parameters
    ; on the stack after the home space.
    sw      t0, 20(sp)  ; parameter 5 passed on the stack
    move    a3, s1      ; parameter 4 copied from another register
    addiu   a2, sp, 32  ; parameter 3 is address of local variable
    <font COLOR="blue">lw      t6, 0(a0)   ; t6 -&gt; vtable of target
    lw      t7, n(t6)   ; t7 = function pointer from vtable
    jalr    t7          ; call the function</font>
    addiu   a1, t1, 1   ; parameter 2 is calculated in place
</pre>
<p>
I put all of the virtual dispatch code in one block
of contiguous instructions,
but in practice the compiler may choose to interleave it
with the preparation of the function arguments to avoid
data load stalls.
The above example uses <var>t6</var> and <var>t7</var>
as temporary registers for preparing the call,
but in practice, the compiler will use any volatile register that is
not being used to pass parameters.
</p>
<p>
Calls to imported functions indirect through the entry in the
import address table.
</p>
<pre>
    ; Put the parameters in a0 through a3,
    ; and additional parameters go on the stack
    ; after the home space.
    sw      t0, 20(sp)  ; parameter 5 passed on the stack
    move    a3, s1      ; parameter 4 copied from another register
    addiu   a2, sp, 32  ; parameter 3 is address of local variable
    addiu   a1, t1, 1   ; parameter 2 is calculated in place
    <font COLOR="blue">lui     t6, XXXX    ; t6 -&gt; 64KB block containing import address table entry
    lw      t6, YYYY(t6); t6 = function pointer from import address table entry
    jalr    t6          ; call the function</font>
    move    a0, s1      ; parameter 1 copied from another register
</pre>
<p>
Again, I put all of the relevant instructions together.
In practice, the compiler tends to front-load the fetching
of the function pointer.
</p>
<p>
The last interesting calling pattern for today is the jump table,
commonly used for dense <code>switch</code> statements.
Suppose we have this:
</p>
<pre>
    switch (n) {
    case 1: ...; break;
    case 2: ...; break;
    case 3: ...; break;
    case 4: ...; break;
    }
</pre>
<p>
The resulting code would look like this:</p>
<pre>
    ; jump to address based on value in v0
    addiu   v0,v0,-1    ; subtract 1
    sltiu   at,v0,4     ; in range of the jump table?
    beqz    at,default  ; nope - go to default
    sll     v0,v0,2     ; convert to byte offset
    <font COLOR="blue">lui     at,XXXX     ; load high part of jump table address
    addu    at,at,v0    ; add in the byte offset
    lw      v0,YYYY(at) ; add in the low part and load jump table entry</font>
    jr      v0          ; and jump there
    nop                 ; branch delay slot
</pre>
<p>
The jump table pattern first performs a single-comparison
range check by the standard trick of
offseting the control value by the lowest
value in the range and using an unsigned comparison against
the length of the range.
Asssuming the range check passes, we load the word at
</p>
<pre>
    address of start of jump table + 4 * index
</pre>
<p>
The <code>lui</code> + <code>addu</code> + <code>lw</code>
sequence is a pattern we saw earlier when we studied
memory access:
It's the expansion of the pseudo-instruction
</p>
<pre>
    lw      v0, XXXXYYYY(v0) ; load jump table entry
</pre>
<p>
Once we load the jump target, we perform a register indirect
jump to the intended target,
and put a <code>nop</code> in the branch delay slot because
we don't have anything useful to put in there.
(In practice, there might be something useful in there.)
</p>
<p>
Okay, now that we've seen some patterns,
next time we'll try to understand
an entire function.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1333705">
				<div id="div-comment-1333705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180419-00/?p=98555#comment-1333705">
			April 19, 2018 at 10:58 am</a>		</div>

		<p>And here I was expecting to find things like preserve temporary register in the branch delay slot.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1333775">
				<div id="div-comment-1333775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180419-00/?p=98555#comment-1333775">
			April 20, 2018 at 6:59 am</a>		</div>

		<p>That can happen too, but as I noted in the article, these examples were simplified for expository purposes.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle even thread-odd thread-alt depth-1 parent" id="comment-1333715">
				<div id="div-comment-1333715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180419-00/?p=98555#comment-1333715">
			April 19, 2018 at 1:32 pm</a>		</div>

		<p>I do wonder why that pseudoinstruction put YYYY as the offset of the LW instruction instead of just adding it in ADDU and then moving v0 to the LW offset.  That would&#8217;ve made visual interpretation of the assembly a lot easier in my opinion.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1333745">
				<div id="div-comment-1333745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">R P (MSFT)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180419-00/?p=98555#comment-1333745">
			April 19, 2018 at 3:44 pm</a>		</div>

		<p>My guess is that it&#8217;s too much work for too little benefit for the compiler to make sure that YYYY+v0 &lt;= 0xffff</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1333755">
				<div id="div-comment-1333755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180419-00/?p=98555#comment-1333755">
			April 19, 2018 at 3:52 pm</a>		</div>

		<p>That would require a register+register addressing mode (v0+at, since at is still needed because it&#8217;s a 32-bit immediate), which MIPS doesn&#8217;t have. MIPS only has register+(16-bit) displacement.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

