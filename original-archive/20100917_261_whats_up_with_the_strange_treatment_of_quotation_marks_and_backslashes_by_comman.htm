<html>
<head>
<title>What's up with the strange treatment of quotation marks and backslashes by CommandLineToArgvW</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What&#8217;s up with the strange treatment of quotation marks and backslashes by CommandLineToArgvW</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 17, 2010 / year-entry #262</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>28</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The way the CommandLineToArgvW function treats quotation marks and backslashes has raised eyebrows at times. Let's look at the problem space, and then see what algorithm would work. Here are some sample command lines and what you presumably want them to be parsed as: Command line Result program.exe "hello there.txt" program.exe hello there.txt program.exe "C:\Hello...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The way the <code>CommandLineToArgvW</code> function treats quotation marks and backslashes has raised eyebrows at times. Let's look at the problem space, and then see what algorithm would work.</p>
<p> Here are some sample command lines and what you presumably want them to be parsed as: </p>
<table border="1" bordercolor="black" rules="all" style="border-collapse: collapse">
<tbody>
<tr>
<th>Command line</th>
<th>Result</th>
</tr>
<tr>
<td valign="baseline"><code>program.exe "hello there.txt"</code></td>
<td valign="baseline"><code>program.exe<br>                               hello there.txt</code></td>
</tr>
<tr>
<td valign="baseline"><code>program.exe "C:\Hello there.txt"</code></td>
<td valign="baseline"><code>program.exe<br>                               C:\Hello there.txt</code></td>
</tr>
</tbody>
</table>
<p> In the first example, we want quotation marks to protect spaces. </p>
<p> In the second example, we want to be able to enclose a path in quotation marks to protect the spaces. Backslashes inside the path have no special meaning; they are copied as any other normal character. </p>
<p> So far, the rule is simple: Inside quotation marks, just copy until you see the matching quotation marks. Now here's another wrinkle: </p>
<table border="1" bordercolor="black" rules="all" style="border-collapse: collapse">
<tbody>
<tr>
<th>Command line</th>
<th>Result</th>
</tr>
<tr>
<td valign="baseline"><code>program.exe "hello\"there"</code></td>
<td valign="baseline"><code>program.exe<br>                               hello"there</code></td>
</tr>
</tbody>
</table>
<p> In the third example, we want to embed a quotation mark inside a quotated string by protecting it with a backslash. </p>
<p> Okay, to handle this case, we say that a backslash which precedes a quotation mark protects the quotation mark. The backslash itself should disappear; its job is to protect the quotation mark and not to be part of the string itself. (If we kept the backslash, then it would not be possible to put a quotation mark into the command line parameter without a preceding backslash.) </p>
<p> But what if you wanted a backslash at the end of the string? Then you protect the backslash with a backslash, leaving the quotation mark unprotected. </p>
<table border="1" bordercolor="black" rules="all" style="border-collapse: collapse">
<tbody>
<tr>
<th>Command line</th>
<th>Result</th>
</tr>
<tr>
<td valign="baseline"><code>program.exe "hello\\"</code></td>
<td valign="baseline"><code>program.exe<br>                               hello\</code></td>
</tr>
</tbody>
</table>
<p> Okay, so what did we come up with? </p>
<p> We want a backslash before a quotation mark to protect the quotation mark, and we want a backslash before a backslash to protect the backslash (so you can end a string with a backslash). Otherwise, we want the backslash to be given no special treatment. </p>
<p> The <code>CommandLineToArgvW</code> function therefore works like this: </p>
<ul>
<li>A string of backslashes not followed by a quotation mark     has no special meaning. </li>
<li>An even number of backslashes followed by a quotation mark     is treated as pairs of protected backslashes, followed by     a word terminator. </li>
<li>An odd number of backslashes followed by a quotation mark     is treated as pairs of protected backslashes, followed by     a protected quotation mark. </li>
</ul>
<p> The backslash rule is confusing, but it's necessary to permit the very important second example, where you can just put quotation marks around a path without having to go in and double all the internal path separators. </p>
<p> Personally, I would have chosen a different backslash rule: </p>
<blockquote class="m"><p>  <b>Warning - these are not the actual backslash rules. These are Raymond's hypothetical "If I ran the world" backslash rules.</b> </p>
<ul>
<li>A backslash followed by another backslash produces a backslash. </li>
<li>A backslash followed by a quotation mark produces a quotation mark. </li>
<li>A backslash followed by anything else is just a backslash followed     by that other character. </li>
</ul>
</blockquote>
<p> I prefer these rules because they can be implemented by a state machine. On the other hand, it makes quoting regular expressions a total nightmare. It also breaks <code>"\\server\share\path with spaces"</code>, which is pretty much a deal-breaker. Hm, perhaps a better set of rules would be </p>
<blockquote class="m"><p>  <b>Warning - these are not the actual backslash rules. These are Raymond's second attempt at hypothetical "If I ran the world" backslash rules.</b> </p>
<ul>
<li>Backslashes have no special meaning at all. </li>
<li>If you are outside quotation marks, then a     <tt>"</tt> takes you inside quotation marks but generates no output. </li>
<li>If you are inside quotation marks, then     a sequence of 2N quotation marks represents N quotation marks in     the output. </li>
<li>If you are inside quotation marks, then     a sequence of 2N+1 quotation marks represents N quotation marks in     the output, and then you exit quotation marks. </li>
</ul>
</blockquote>
<p> This can also be implemented by a state machine, and quoting an existing string is very simple: Stick a quotation mark in front, a quotation mark at the end, and double all the internal quotation marks. </p>
<p> But what's done is done, and the first set of backslash rules is what <code>CommandLineToArgvW</code> implements. And since the behavior has been shipped and documented, it can't change. </p>
<p> If you don't like these parsing rules, then feel free to write your own parser that follows whatever rules you like. </p>
<p> <b>Bonus chatter</b>: Quotation marks are even more screwed up. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (28)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-861423">
				<div id="div-comment-861423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861423">
			September 17, 2010 at 7:37 am</a>		</div>

		<p>Quotation marks certainly are odd:</p>
<p>foo&quot;bar -&gt; foobar</p>
<p>foo&quot;&quot;bar -&gt; foobar</p>
<p>foo&quot;&quot;&quot;bar -&gt; foo&quot;bar</p>
<p>foo&quot;x&quot;&quot;bar -&gt; foox&quot;bar</p>
<p>It keeps track of opening and closing quotes and removes all quotes except for any quote immediately following a closing quote (and these retained quotes aren&#39;t treated as opening quotes). &nbsp;Surely this isn&#39;t deliberate.</p>
<div class="post">[<i>No idea if it was deliberate, but at least in the examples you gave, it seems to match my second set of rules&#8230; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861433">
				<div id="div-comment-861433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861433">
			September 17, 2010 at 7:45 am</a>		</div>

		<p>I find it interesting how Raymond&#39;s second attempt matches Visual Basic&#39;s rules. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861453">
				<div id="div-comment-861453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">fahadsadah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861453">
			September 17, 2010 at 8:23 am</a>		</div>

		<p>CommandLineToArgvW doesn&#39;t sound weird. That sounds like typical behaviour in any UNIX scripting language.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-861463">
				<div id="div-comment-861463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861463">
			September 17, 2010 at 8:25 am</a>		</div>

		<p>&quot;If you don&#39;t like these parsing rules, then feel free to write your own parser that follows whatever rules you like.&quot;</p>
<p>But then you&#39;d create an app that behaves inconsistently with others. (Not that there is total consistency, I guess; maybe that horse has already bolted.)</p>
<p>The DOS parsing rules, like most aspects of DOS, are awful and demonstrate the designers&#39; lack of thought, but they&#39;re also unavoidable if you use cmdline tools on Windows (since you cannot change the parsing rules used in 3rd party apps) so I think we just have to live with them, including in our own programs.</p>
<p>Maybe it&#39;d work if someone with influence (i.e. control over the OS or developer tools/libraries) provided and encourage use of a single new, good parser. But if the only alternative to the DOS one is everyone knocking together their own, I think I&#39;d rather the devil I know.</p>
<p>Using the command-line seems to be a dying art (the number of people I talk to who are clueless about putting paths with spaces inside quotes&#8230;) and, after PowerShell solved all the wrong problems, I&#39;ve given up hope of seeing any real focus on renovations to that aspect of the OS. It is what it is, changing it is a compatibility nightmare and not enough people use it to justify the effort, I guess. Time machine needed, stat!</p>
<div class="post">[<i>Looks like the .NET Framework folks took up your challenge. All .NET programs use a common command line parser. (No idea if it counts as &quot;good&quot; though.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861473">
				<div id="div-comment-861473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861473">
			September 17, 2010 at 8:38 am</a>		</div>

		<p>@fahadsadah:</p>
<p>Read closer. The rules that Raymond originally said he would want match the typical scripting language. However, in the actual rules,  only escapes  if the sequence of backslashes ends with a &quot;. In other words, in Unix, &#39;foo\bar&#39; encodes &#39;foobar&#39;, but here, &#39;foo\bar&#39; just encodes &#39;foo\bar&#39;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861493">
				<div id="div-comment-861493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861493">
			September 17, 2010 at 9:01 am</a>		</div>

		<p>Poor choice of examples on my part. &nbsp;My examples do match your second set of rules, but the rule is actually as I described. &nbsp;For example:</p>
<p>foo&quot;&quot;&quot;&quot;&quot;&quot;bar -&gt; foo&quot;&quot;bar</p>
<p>(i.e. six quotes go to two whereas quote doubling would produce three).</p>
<div class="post">[<i>Hm, that still matches my rules. First quotation mark enters quotation mode. Next five quotation marks invoke the 2N+1 rule, resulting in two quotation marks + exiting quotation mode. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861503">
				<div id="div-comment-861503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861503">
			September 17, 2010 at 9:11 am</a>		</div>

		<p>It is unfortuanate that the way the CRT parses a command line is different from the way this API parses the command line. &nbsp;If you need to quote a complicated string with quotes and backslashes you have to know if the application used [w]main or [w]WinMain. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861513">
				<div id="div-comment-861513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861513">
			September 17, 2010 at 9:21 am</a>		</div>

		<p>Sorry, you must be getting bored of this. &nbsp;Anyway, twelve go to four so it&#39;s definitely not a doubling rule:</p>
<p>foo&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;bar -&gt; foo&quot;&quot;&quot;&quot;bar</p>
<div class="post">[<i>Twelve go to four? Okay, that&#39;s pretty weird. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861533">
				<div id="div-comment-861533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Koro</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861533">
			September 17, 2010 at 10:10 am</a>		</div>

		<p>I always thought the manner of Unix doing it, this is, handing the OS an argv[] array of arguments to the process to start, and the process retrieving that same array, much cleaner. The shell is the one actually doing the splitting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861543">
				<div id="div-comment-861543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861543">
			September 17, 2010 at 11:07 am</a>		</div>

		<p>It&#39;d be nice if some future version of Windows either:</p>
<p>A. Added a function that converts an argv array back into a properly quoted and escaped command-line. (i.e., something that undoes CommandLineToArgvW) Maybe this isn&#39;t even possible if what asdf said is true.</p>
<p>B. Added a version of CreateProcess that does away with the confusing module-name/command-line business and that instead takes an argv array.</p>
<p>Right now if I want to write a program that forwards command-line arguments to some other program (e.g., sudo- or DropMyRights-like programs would be prime candidates), it&#39;s really hard to invoke the other process exactly right. &nbsp;I&#39;d need to tokenize the command-line to process my own options, but then I&#39;d need to rebuild the rest of the command-line to feed to CreateProcess.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861553">
				<div id="div-comment-861553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hims</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861553">
			September 17, 2010 at 1:21 pm</a>		</div>

		<p>/dir &quot;c:a dir&quot;</p>
<p>results in the directory parameter being parsed with a double-quote at the end:</p>
<p>c:a dir&quot;</p>
<p>So be careful when passing in the output from say ::GetTempPath() directly to CommandLineToArgvW().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861603">
				<div id="div-comment-861603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">configurator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861603">
			September 17, 2010 at 2:58 pm</a>		</div>

		<p>Yes, I keep running into that problem when I run</p>
<p>junction &quot;dir name&quot; &quot;C:Storagedir name&quot;</p>
<p>Because I copy the full path from total commander, and that includes a slash&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861613">
				<div id="div-comment-861613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861613">
			September 17, 2010 at 3:24 pm</a>		</div>

		<p>@James: Unfortunately if A is impossible than B is impossible unless you burn bridges as old programs will choke.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861673">
				<div id="div-comment-861673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">gpb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861673">
			September 18, 2010 at 6:25 am</a>		</div>

		<p>The problem in many examples above seems to be that there&#39;s no error thrown for unmatched &quot;&quot; pairs.</p>
<p>In sh at least the followig happens:</p>
<p>$&gt; echo &quot;test 1&quot;</p>
<p>></p>
<p>(i.e. a continuation of the previous command line because the &quot; is not finished yet)</p>
<p>$&gt; echo &quot;test 1&quot;2&quot;</p>
<p>test 1&quot;2</p>
<p>$&gt; echo &quot;test&#92;&#92;&quot;</p>
<p>test&#92;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861683">
				<div id="div-comment-861683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861683">
			September 18, 2010 at 5:12 pm</a>		</div>

		<p>The timing on this posting is actually quite serendipitous. &nbsp;In my operating systems class, the project I&#39;m currently working on requires us to write a routine to parse the command line into argc and argv[]. I was debating on how to best handing quoting (we weren&#39;t given specifics) and then I come across your blog post while taking a break working on the project.</p>
<p>The simplicity of your ideal quoting rules broke the tie in my mind between using backslash and doing VB-style double quotes. &nbsp;Thanks! :)</p>
<p>That said, it seems like there are still some corner cases which you might want to define if you were really going to do something like this. &nbsp;For example, given your ideal rules, what do you do with dangling/mismatched quotes? &nbsp;It seems like you have three choices; have the null terminator be an implicit ending quote, treat the quote as a literal character, or return some kind of error (which is lame):</p>
<p>&quot;this is a string -&gt; argv[1] == this is a string</p>
<p>&quot;this is a string -&gt; argv[1] == &quot;this</p>
<p>&quot;this is a string -&gt; *error*</p>
<p>Anyway, great post.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861723">
				<div id="div-comment-861723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jason</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861723">
			September 18, 2010 at 9:15 pm</a>		</div>

		<p>@Nick</p>
<p>I believe you should go with your second option, because if you use option #1, then option #2 is not possible, and I think it *should* be possible, IMO.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861753">
				<div id="div-comment-861753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">configurator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861753">
			September 19, 2010 at 9:35 am</a>		</div>

		<p>@Jason: Of course it&#39;s possible &#8211; you just have to quote it</p>
<p>&quot;&quot;&quot;this&quot; is a string</p>
<p>And option #1 is how cmd works.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861763">
				<div id="div-comment-861763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miral</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861763">
			September 19, 2010 at 4:08 pm</a>		</div>

		<p>I second James&#39; sentiment that it&#39;d be nice to have a standard &quot;un-split&quot; option for forwarding programs. &nbsp;Though it&#39;s not too hard to define your own rules for doing so.</p>
<p>My favourite quirky behaviour with quotes is with the &quot;start&quot; command:</p>
<p>&nbsp;start C:foobar.exe -&gt; starts the named file, as expected</p>
<p>&nbsp;start C:foo -&gt; opens a shell window to the named folder, as expected</p>
<p>&nbsp;start &quot;C:foo&quot; -&gt; opens a new console window with the caption &quot;C:foo&quot; (surprise!)</p>
<p>&nbsp;start &quot;&quot; &quot;C:foo&quot; -&gt; opens a shell window to the named folder</p>
<p>It&#39;s documented, and it&#39;s probably the fault of some backwards-compatibility issue, but it&#39;s a lovely little trap for the unwary.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861783">
				<div id="div-comment-861783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ender</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861783">
			September 20, 2010 at 1:11 am</a>		</div>

		<p>Oh the joys of Windows&#39; command line parsing. I once had to implement a command-line parser in Delphi (because it&#39;s built-in one sucks and pretty much just eats all quotes), and since I didn&#39;t know about CommandLineToArgvW then (the MSDN has a description on how it works regarding to quotes and backslashes; the function itself wouldn&#39;t have helped me, since I had to have the program work on Win98), I just wrote a small C program and fed it various quoted strings until I figured out the behaviour &#8211; well, at lest most of it (I still don&#39;t know how exactly it parses multiple quotes, but at least as I later found out, this isn&#39;t documented in MSDN either).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861813">
				<div id="div-comment-861813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861813">
			September 20, 2010 at 8:53 am</a>		</div>

		<p>And the primary issue? Using the  for both escaping mechanism AND path delimiter. If we were using that new-fangled web-notation, there wouldn&#39;t be that many issues. Whoever had that idea a few decades ago certainly messed up. Not that there wouldn&#39;t be enough issues left, such as regExp inside any other programming language&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861843">
				<div id="div-comment-861843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861843">
			September 20, 2010 at 11:56 am</a>		</div>

		<p>@K: I believe that the backslash-as-path-delimiter was forced by design decisions from CP/M, which didn&#39;t have directories but which did use forward-slashes for command-line options.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861863">
				<div id="div-comment-861863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861863">
			September 20, 2010 at 12:04 pm</a>		</div>

		<p>@Joshua: Hm, maybe. &nbsp;Possibly a hypothetical argv version of CreateProcess could set internal compatibility flags that could affect the behavior of a subsequent CommandLineToArgvW call? (I haven&#39;t thought this through.) IMO it also might be acceptable to give up and ignore quoting differences between the different parsing APIs. &nbsp;Just pick a horse and let it become the standard method going forward. &nbsp;If what asdf said is true, then it&#39;s already impossible to forward command-line options reliably to an arbitrary program anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861883">
				<div id="div-comment-861883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miral</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861883">
			September 20, 2010 at 4:59 pm</a>		</div>

		<p>@James: Yes, that&#39;s true, but there were other alternatives that would have been better in the long run.</p>
<p>After all, there&#39;s no ambiguity using / as both switch and path-delimiter except in the single case of &quot;path relative to the root folder of the current drive&quot; &#8212; which could have been expressed differently, eg. &quot;.:/foo/bar&quot; instead of &quot;foobar&quot;.</p>
<p>Still, hindsight isn&#39;t much use without a time machine. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861903">
				<div id="div-comment-861903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ender</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861903">
			September 21, 2010 at 1:23 am</a>		</div>

		<p>@James: AFAIK, it was IBM that forced  as path delimiter. CP/M and DOS 1.0 didn&#39;t have directories, but their programs used / as of command-line parameter separator. From what I&#39;ve read, Microsoft actually wanted to use / as path separator (and switch to something else for command-line parameters), but IBM was against it (so instead the people who worked on DOS made it possible to use both  and / as path separator, and added an undocumented function to change the parameter separator to any other character).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861893">
				<div id="div-comment-861893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-861893">
			September 20, 2010 at 10:46 pm</a>		</div>

		<p>@laonianren </p>
<p>Looks like your example show that you can create a quote by quoting it &quot;&quot;&quot; -&gt; &quot;, four of these (12 &quot;) would then become 4 &quot; which your example shows. I like the way you said the quote *behind* the closing quote was displayed while I took it that the quote *before* the closing quote was shown (sort of like []a-z] in regexps).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-862413">
				<div id="div-comment-862413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-862413">
			September 22, 2010 at 10:30 pm</a>		</div>

		<p>Evil IBM forced ms to implement sub directories. Pure evil.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-862663">
				<div id="div-comment-862663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joacim Andersson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-862663">
			September 23, 2010 at 11:26 am</a>		</div>

		<p>I find it logical that 12 quotes turn out to be 4, assume the following:</p>
<p>Foo&quot;X&quot;&quot;X&quot;&quot;X&quot;&quot;X&quot;bar =&gt; FooXXXXbar</p>
<p>Now replace the X&#39;s with quotes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-862733">
				<div id="div-comment-862733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">It gets weirder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100917-00/?p=12833#comment-862733">
			September 23, 2010 at 1:53 pm</a>		</div>

		<p>What do you think this command, when run in cmd, outputs?</p>
<p>echo &quot;hello&quot;world&quot; &gt;nul</p>
<p>Now try to run it.</p>
<p>Did you answer &quot;nothing&quot;? Do you know why you&#39;re wrong?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

