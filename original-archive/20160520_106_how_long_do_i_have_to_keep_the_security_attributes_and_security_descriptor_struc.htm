<html>
<head>
<title>How long do I have to keep the SECURITY_ATTRIBUTES and SECURITY_DESCRIPTOR structures valid after using them to create a file?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How long do I have to keep the SECURITY_ATTRIBUTES and SECURITY_DESCRIPTOR structures valid after using them to create a file?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 20, 2016 / year-entry #107</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160520-00/?p=93497</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Once CreateFile returns, they aren't needed any more.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer passed a
<code>SECURITY_<wbr>ATTRIBUTES</code> when creating a file
and wanted to know how long that structure (and the structures
it points to) need to remain valid.
"Do I have to keep them around as long as the handle that
references the
<code>SECURITY_<wbr>ATTRIBUTES</code> remains open?"
</p>
<p>
No.
Once <code>Create&shy;File</code> returns,
the
<code>SECURITY_<wbr>ATTRIBUTES</code> you passed in
is no longer used.
Everything the system needs was copied to a safe place
as part of the <code>Create&shy;File</code> operation.
You are welcome to free the memory
or to modify and reuse it in a future call to
<code>Create&shy;File</code>.
</p>
<p>
If you think about it, this is really the only way it could be.
The file handle could be duplicated into another process,
and then the original process might terminate.
At that point, the memory for the
<code>SECURITY_<wbr>ATTRIBUTES</code> no longer exists,
but there's still an open handle.
</p>
<p>
And there doesn't seem to be any benefit in relying on the copy
of the
security descriptor in the application's memory,
because even if the kernel did that,
the information would need to be copied from the application's
memory into kernel space when the handle is closed.
You may as well just copy it now.
(And if the process crashes, the address space is destroyed,
so the last known copy of the security descriptor is lost!)
</p>
<p>
File handles are kernel objects,
and the kernel as a rule does not retain references to memory
in user-mode.
(With the obvious exception of output buffers,
such as the buffer passed to <code>Read&shy;File</code>
or
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20110512-00/?p=10683">
the <code>OVERLAPPED</code> structure passed to overlapped I/O</a>.)
</p>
<p>
The customer confirmed that they didn't think it was necessary
to keep the
<code>SECURITY_<wbr>ATTRIBUTES</code> valid,
but they aer trying to figure out a bug and that was
one of the crazy theories they had for why the problem
might be occurring.
They thanked us for confirming their understanding
and went back to debugging their program,
but now with one possible root cause ruled out.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1 parent" id="comment-1249765">
				<div id="div-comment-1249765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160520-00/?p=93497#comment-1249765">
			May 20, 2016 at 7:30 am</a>		</div>

		<p>A more interesting question is; when can you free the memory backing the HSTRING you created with WindowsCreateStringReference? </p>
<p>MSDN gives you a clue: &#8220;When passing a string reference into the Windows Runtime, it is the caller’s responsibility to ensure that the string’s contents are unchanging and NUL terminated for the duration of the call. The Windows Runtime releases all references to the string reference when the call returns.&#8221; It sounds pretty simple but all it takes is one bug somewhere in all of WinRT where someone forgets to duplicate a input string if they need said string later after the function has returned&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fjeldse odd alt depth-2" id="comment-1249795">
				<div id="div-comment-1249795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Erik+F' rel='external nofollow' class='url'>Erik F</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160520-00/?p=93497#comment-1249795">
			May 20, 2016 at 9:00 am</a>		</div>

		<p>Reading between the lines, I think that this statement means that string references aren&#8217;t thread-safe. The recommended behaviour for creating a string reference appears to be to create the string on the stack, make a reference, use it, and then delete the reference before going out of scope. The implied rule for callees then is to make deep copies of passed-in HSTRINGs with WindowsDuplicateString (notice what happens if you give that function a reference.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-iboyd even thread-odd thread-alt depth-1" id="comment-1249805">
				<div id="div-comment-1249805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/IanBoyd' rel='external nofollow' class='url'>IanBoyd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160520-00/?p=93497#comment-1249805">
			May 20, 2016 at 9:32 am</a>		</div>

		<p>It&#8217;s always nice to see the reasons *why* something the way it is. It makes it easier to reason about things probably work in future situations.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

