<html>
<head>
<title>If the shell is written in C++, why not just export its base classes?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If the shell is written in C++, why not just export its base classes?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 24, 2011 / year-entry #255</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>22</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">ton suggested that since the shell is written in C++, IShell­Folder should have been an abstract class, and then it could have used techniques like exceptions and Inversion of Control. Okay, first of all, I'm not sure how Inversion of Control is something that requires C++, so I'm going to leave that aside. Second of...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
ton suggested that
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/11/24/9137795.aspx#9138730">
since the shell is written in C++,
<code>IShell&shy;Folder</code> should have been an abstract class,
and then it could have used techniques like
exceptions and Inversion of Control</a>.
</p>
<p>
Okay, first of all, I'm not sure how Inversion of Control is
something that requires C++,
so I'm going to leave that aside.
</p>
<p>
Second of all, who says the shell is written in C++?
As it happens, when <code>IShell&shy;Folder</code> was introduced
in Windows&nbsp;95,
the entire shell was written in plain C.
That's right, plain C.
Vtables were built up by hand,
method inheritance was implemented by direct replacement in the
vtable,
method overrides were implemented by function chaining,
multiple inheritance was implemented by manually moving the pointer
around.
</p>
<pre>
const IShellFolderVtbl c_vtblMyComputerSF =
{
 MyComputer_QueryInterfaceSF,
 MyComputer_AddRefSF,
 MyComputer_ReleaseSF,
 MyComputer_ParseDisplayName,
 ... you get the idea ...
};

const IPersistFolderVtbl c_vtblMyComputerPF =
{
 MyComputer_QueryInterfacePF,
 MyComputer_AddRefPF,
 MyComputer_ReleasePF,
 MyComputer_Initialize,
};

struct MyComputer {
 IShellFolder sf;
 IShellFolder pf;
 ULONG cRef;
 ... other member variables go here ...
}

MyComputer *MyComputer_New()
{
 MyComputer *self = malloc(sizeof(MyComputer));
 if (self) {
  self-&gt;sf.lpVtbl = &amp;c_vtblMyComputerSF;
  self-&gt;pf.lpVtbl = &amp;c_vtblMyComputerPF;
  self-&gt;cRef = 1;
  ... other "constructor" operations go here ...
 }
 return self;
}

// sample cast
MyComputer *pThis;
IPersistFolder *ppf =  &amp;pThis-&gt;pf;

// sample method call
hr = IShellFolder_CompareIDs(psf, lParam, pidl1, pidl2);
// which expands to
hr = psf-&gt;lpVtbl-&gt;CompareIDs(psf, lParam, pidl1, pidl2);

// sample forwarder for multiply-derived method
HRESULT STDCALL MyComputer_QueryInterfacePF(
    IPersistFolder *selfPF, REFIID riid, void **ppv)
{
 MyComputer *self = CONTAINING_RECORD(selfPF, MyComputer, pf);
 return MyComputer_QueryInterfaceSF(&amp;self-&gt;sf, riid, ppv);
}
</pre>
<p>
So one good reason why the shell didn't export its C++ base classes
was that <i>it didn't have any C++ base classes</i>.
</p>
<p>
Why choose C over C++?
Well, at the time the Windows&nbsp;95 project started,
C++ was still a relatively new language for systems programming.
While there were certainly people on the shell team capable of
writing code in C++,
the old-timers grew up with C as their native language,
and the newcomers weren't taught C++ in their computer science classes.
(Computer science departments still taught primarily C or Pascal,
with maybe some Lisp if you took an AI class.)
Also, the C++ compilers of the day did not provide fine control
over automatic code generation,&sup1; and since
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/10/10/55256.aspx">
even saving 4KB of memory had a perceptible impact on overall
system performance</a>,
manually grouping rarely-used functions into the same region of memory
of memory (so they could all remain paged out)
was still a common practice.
</p>
<p>
But even if the shell was originally written in C++,
exporting the base classes wouldn't have been a good idea.
COM is a language-neutral platform.
People have written COM objects in C, C++,
Visual Basic, C#, Delphi, you-name-it.
If <code>IShell&shy;Folder</code> were an exported C++ base class,
then you have effectively said,
"Sorry, only C++ code can implement <code>IShell&shy;Folder</code>.
Screw off, all you other languages!"
</p>
<p>
But wait, it's worse than just that.
Exporting a C++ base class ties you to a specific compiler vendor,
because
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2006/07/27/679634.aspx">
name decoration is not standardized</a>.
So it's not just "To implement <code>IShell&shy;Folder</code> you must
use C++"
but
"To implement <code>IShell&shy;Folder</code> you must use
the Microsoft Visual Studio C++ compiler."
</p>
<p>
But wait, it's worse than just that.
The name decoration algorithm can even change between compiler
versions.
Furthermore,
the mechanism by which exceptions are thrown and caught is not merely
compiler-specific but compiler-<i>version</i> specific.
If an exception is thrown by code compiled by one version of the
C++ compiler and reaches code compiled by a different version of
the C++ compiler, the results are undefined.
(For example, the older version of the C++ compiler may not have
supported RTTI.)
So it's not just "To implement <code>IShell&shy;Folder</code> you must
use C++"
but
"To implement <code>IShell&shy;Folder</code> you must use
Microsoft Visual C++ 2.0."
(So maybe
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/06/07/10020654.aspx">
Bjarne was right after all</a>.)
</p>
<p>
But wait, it's worse than just that.
Exporting a C++ base class means that the base class
<i>can never change</i>,
because various properties of the base class become hard-coded
into the derived classes.
The list of interfaces implemented by the base class becomes fixed.
The size of the base class is fixed.
Any inline methods are fixed.
The precise layout of member variables is fixed.
Exporting a C++ base class for <code>IShell&shy;Folder</code> would have
meant that the base class could never change.
You want support for <code>IShell&shy;Folder2</code>?
Sorry, we can't add that without breaking everybody who compiled
with the old header file.
</p>
<p>
<b>Exercise</b>: If exporting base classes is so horrible,
why does the CLR do it all over the place?
</p>
<p>
<b>Footnote</b>
</p>
<p>
&sup1; Actually, I don't think even the C++ compilers of <i>today</i>
give you fine control over automatic code generation,
which is why
<a HREF="http://www.microsoft.com/whdc/driver/kernel/KMcode.mspx">
Microsoft takes a conservative position on use of C++ in kernel mode</a>,
where the consequences of a poorly-timed page fault are much worse
than simply poor performance.
It will bluescreen your machine.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-942213">
				<div id="div-comment-942213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mathieu Garstecki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942213">
			October 24, 2011 at 7:29 am</a>		</div>

		<p>The CLR can export base classes as it wants because C# classes are implemented differently. I think the IL code doesn&#39;t contain method addresses but symbol references (or something close enough), and the JIT computes the actual adresses. The base class implementation can change, because the JIT will always generate the right method calls at execute time, based on the actual metadata of the base class.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942223">
				<div id="div-comment-942223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942223">
			October 24, 2011 at 7:47 am</a>		</div>

		<p>The latest version of Objective-C solves the fragile base class problem by adding an extra level of indirection: all instance variable accesses in a derived class are performed by taking the base object pointer, adding the base class size, adding the derived member offset, and performing the load or store. &nbsp;This lets the base class size be determined at runtime, but it introduces a potential small performance penalty (one extra add instruction). &nbsp;So, base class layouts can change without breaking binary compatibility.</p>
<p>Method calls in Objective-C have always been resilient to fragile base classes, since method names are always looked up dynamically at runtime (with some heavy optimization by the dynamic linker) instead of using vtable offsets that are burned in at compile time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-942243">
				<div id="div-comment-942243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942243">
			October 24, 2011 at 8:08 am</a>		</div>

		<p>For what it&#39;s worth, the whole KMDF (Kernel Mode Driver Framework) is written internally in C++, even though it only exposes C API.</p>
<p>Also, in Win8, MS added official (though limited) C++ support to DDK.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942253">
				<div id="div-comment-942253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942253">
			October 24, 2011 at 8:51 am</a>		</div>

		<p>Short version: Because C++ does not have a stable ABI.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-942273">
				<div id="div-comment-942273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942273">
			October 24, 2011 at 9:54 am</a>		</div>

		<p>The answer isn&#39;t some object-oriented buzzword mumbo-jumbo, it&#39;s to design the interface to support this feature in the first place! It seems like the current options are &quot;silently fail&quot; (by passing NULL for hwndOwner in the call to EnumObjects) and &quot;show dialog&quot;. They could have created a means to return an error from enumeration as a third option. For example, one of the flags might mean &quot;return a special error item in the event of an error while enumerating&quot; or &quot;verify media and return an error from EnumObjects if there is none&quot;. Or there could be a function you call at the end of enumeration to return a list of errors.</p>
<p>Obviously hindsight is 20/20, but this problem shouldn&#39;t have been hard to foresee back in 1994 when every Windows computer had a floppy or CD-ROM drive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942283">
				<div id="div-comment-942283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942283">
			October 24, 2011 at 9:58 am</a>		</div>

		<p>&quot;The latest version of Objective-C solves the fragile base class problemâ¦&quot;</p>
<p>Now if Objective-C would solve the fragile constructor problem. &nbsp;I&#39;m sick and tired of having to worry that I&#39;m actually initializing the base class correctly, just because the language doesn&#39;t enforce initializing through the immediate base class rather than some other ancestor class.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-942303">
				<div id="div-comment-942303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942303">
			October 24, 2011 at 11:17 am</a>		</div>

		<p>My first thought after just reading the headline:</p>
<p>&quot;Because C++ has no standard ABI and Windows is not tied to any specific C++ compiler. &nbsp;Everything has to be C compatible. &nbsp;End of discussion.&quot;</p>
<p>(And who says the consumer of the shell API is written in C++? &nbsp;What about Delphi? &nbsp;VB? &nbsp;Java? &nbsp;.NET languages?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942313">
				<div id="div-comment-942313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Former BE Programer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942313">
			October 24, 2011 at 12:32 pm</a>		</div>

		<p>BE did this, all the APIs were written and exposed as C++ classes&#8230; it turned out to be a disaster to maintain and program for. lat out one of the worst API I ever had to work with.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-942333">
				<div id="div-comment-942333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942333">
			October 24, 2011 at 1:34 pm</a>		</div>

		<p>&quot;Okay, first of all, I&#39;m not sure how Inversion of Control is something that requires C++, so I&#39;m going to leave that aside.&quot; &nbsp;</p>
<p>No its not necessarily required but C++ has better idiomatic support for OOP design techniques over C.</p>
<p>Anyway my whole post boils down to the fact that I hate error codes and would rather deal with exceptions instead. Lack of stability in the ABI of C++ not withstanding it would have been nice if C++ didn&#39;t have that design flaw and nice descriptive exception objects could be used instead of opaque error codes. At least speaking from a modern operating system API design point of view.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942343">
				<div id="div-comment-942343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942343">
			October 24, 2011 at 1:53 pm</a>		</div>

		<p>Well, there&#39;s another problem, ton. I hate exceptions and would rather deal with error codes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-942353">
				<div id="div-comment-942353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaron.E</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942353">
			October 24, 2011 at 2:29 pm</a>		</div>

		<p>I hate exceptions and error codes and would rather nothing ever went wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942363">
				<div id="div-comment-942363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942363">
			October 24, 2011 at 3:01 pm</a>		</div>

		<p>@Aaron.E: I hate nothing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-942373">
				<div id="div-comment-942373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942373">
			October 24, 2011 at 6:17 pm</a>		</div>

		<blockquote><p>
  &gt; Exercise: If exporting base classes is so horrible, why does the CLR do it all over the place?
</p></blockquote>
<p>All hail MSIL?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942393">
				<div id="div-comment-942393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942393">
			October 24, 2011 at 6:31 pm</a>		</div>

		<p>From the article:</p>
<p>&quot;method inheritance was implemented by direct replacement in the vtable, method overrides were implemented by function chaining&#8230;&quot;</p>
<p>Probably, &quot;method overrides were implemented by direct replacement in the vtable&quot; ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-942413">
				<div id="div-comment-942413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942413">
			October 24, 2011 at 8:16 pm</a>		</div>

		<p>@steveg:</p>
<p>Most people don&#39;t like Nothing very much.</p>
<p><a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/The_Neverending_Story" rel="nofollow">en.wikipedia.org/&#8230;/The_Neverending_Story</a></p>
<p>:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942443">
				<div id="div-comment-942443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942443">
			October 24, 2011 at 11:53 pm</a>		</div>

		<p>Related: I&#39;m really sad WinRT is being restricted to Metro apps (along with Windows Store and ARM support, what the heck?) &#8211; A native object oriented ABI on par with MSIL would be intensely useful, especially if it were publicly specced and (not just C++!) compiler writers were encouraged to adapt it. Heck, I&#39;m thinking of adapting it if I ever get round to finishing my compiler. (presumably that&#39;s legal?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-942463">
				<div id="div-comment-942463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ooh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942463">
			October 25, 2011 at 1:46 am</a>		</div>

		<p>@Simon Buchan: WinRT isn&#39;t restricted to Metro apps, it just doesn&#39;t make sense to force non-Metro apps to a new ABI due to compatibility issues.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942653">
				<div id="div-comment-942653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ILoveCPP</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942653">
			October 25, 2011 at 9:08 am</a>		</div>

		<p>I wonder if these new Windows 8 WinRT-based IInspecatble metadata-rich API&#39;s are more inefficient than pre-WinRT classical lean-and-mean COM API&#39;s.</p>
<p>&#8230;If so, is this a price payed to make it easier for the .NET managed guys to call into Windows?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-942473">
				<div id="div-comment-942473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942473">
			October 25, 2011 at 3:31 am</a>		</div>

		<p>@Ooh: Well, MSDN only has Reference for the APIs *for* WinRT so far, which doesn&#39;t list any execution environment restrictions: <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/br224646.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/br224646.aspx</a>, so unless they just haven&#39;t documented it yet, it looks like you *might* be able to RoActivateInstance() a &#8211; for example &#8211; Windows.Media.Transcoding.MediaTranscoder outside of a Metro package, which is nice &#8211; however, it definitely seems like that is something Microsoft would consider unintended usage.</p>
<p>I&#39;m not asking that there&#39;s a full WinRT alternative for every method in the Platform SDK, but at least the idea that you could write a &quot;WinRT desktop app&quot; in the same way you write a &quot;.NET app&quot; would be nice. With a .NET comparible ABI and API, the &quot;lego block&quot; development approach .NET is approaching now could be replicated for native code, and that&#39;s something I&#39;d love to see. Presumably, Microsoft would too?</p>
<p>Don&#39;t get me wrong, though: the progress showen on Win8 so far is already impressive to me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-942733">
				<div id="div-comment-942733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">WndSks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942733">
			October 25, 2011 at 12:09 pm</a>		</div>

		<p>@ILoveCPP: Yes there is a little bit of overhead, both with how MSVC calls the methods and the implementation of the &quot;COM&quot; objects, see <a rel="nofollow" target="_new" href="http://www.interact-sw.co.uk/iangblog/2011/09/" rel="nofollow">http://www.interact-sw.co.uk/&#8230;/09</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-942883">
				<div id="div-comment-942883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-942883">
			October 25, 2011 at 10:10 pm</a>		</div>

		<p>short answer: windows isn&#39;t c++ compatible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-943123">
				<div id="div-comment-943123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111024-00/?p=9303#comment-943123">
			October 26, 2011 at 1:46 pm</a>		</div>

		<p>@640k: So wrong, it&#39;s not even funny (If that was joke, you are missing whole smiley as it is similar as your past postings, so can&#39;t tell if serious or not)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

