<html>
<head>
<title>The Alpha AXP, part 2: Integer calculations</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The Alpha AXP, part 2: Integer calculations</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 8, 2017 / year-entry #179</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It's all fun and games until somebody does sign extension.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Here are some of the integer computational operations available on the
Alpha AXP.
I'm going to cover only the instructions used in general-purpose
programming,
since that's the sort of thing you're most likely to encounter
when debugging everyday application code.
In particular, I'm not going to cover the various multimedia instructions.
</p>
<p>
Integer arithmetic operations come in two flavors,
one that operates on the full 64-bit register,
and another that operates on the least significant 32 bits of the value.
As I noted earlier, the general rule in the Alpha AXP is that
if the result of an operation is a 32-bit value and the destination
is a register,
then the value is sign-extended to a 64-bit value.
This means that if you use the 32-bit versions of these instructions,
the results will be sign-extended to 64-bit values.
</p>
<p>
The general notation for calculations is to provide the source
operands first, and the destination operand last.
</p>
<pre>
    ADDQ    Ra, Rb, Rc  ; Rc = Ra + Rb
    ADDQ    Ra, #b, Rc  ; Rc = Ra + b

    ADDL    Ra, Rb, Rc  ; Rc = (int64_t)((int32_t)Ra + (int32_t)Rb)
    ADDL    Ra, #b, Rc  ; Rc = (int64_t)((int32_t)Ra +           b)
</pre>
<p>
The <code>ADD</code> instruction has four variants.
The 64-bit versions add the two source values and puts the
result in the destination <var>Rc</var> register.
The 32-bit versions add the least significant 32-bit values
in the source registers,
calculates a 32-bit result,
and then sign extends that result to a 64-bit value,
putting the final result in the <var>Rc</var> register.
You can add two registers, or you can add a register and a small constant
in the range 0 to 255.
</p>
<p>
In the future, I'm going to write <code><u>x</u></code>
to mean "<code>L</code> or <code>Q</code>",
and <code>Rb/#b</code> to mean "a register (<var>Rb</var>)
or a small constant in the range 0 to 255."
</p>
<pre>
    SUB<u>x</u>    Ra, Rb/#b, Rc  ; Rc = Ra - Rb
    MUL<u>x</u>    Ra, Rb/#b, Rc  ; Rc = Ra * Rb
    UMULH   Ra, Rb/#b, Rc  ; Rc = (Ra *U Rb) &gt;&gt; 64
</pre>
<p>
The <code>SUB</code> instructions perform subtraction,
and the <code>MUL</code> instructions perform multiplication.
The <code>UMULH</code> instruction performs a 64&times;64
unsigned multiplication,
and stores the high 64 bits of the 128-bit intermediate result.
(If you want the low 64 bits, then use the regular <code>MULQ</code>
instruction.)
</p>
<p>
Note that there is no integer division operation.
There are three common workarounds:
</p>
<ul>
<li>Use a helper function.</li>
<li>If dividing by a constant <var>n</var>,
    you may be able to use the <code>UMULH</code> instruction
    to multiply by (2&#x2076;&#x2074;&divide;<var>n</var>)
    and then extract the high 64 bits (which means to divide by
    2&#x2076;&#x2074;).
</li>
<li>Convert both values to floating point,
    perform a floating point division,
    and then convert the result back to an integer.
</li>
</ul>
<p>
So hopefully you don't do a lot of integer division.
</p>
<pre>
    S4ADD<u>x</u>  Ra, Rb/#b, Rc  ; Rc = Ra * 4 + Rb/#b
    S8ADD<u>x</u>  Ra, Rb/#b, Rc  ; Rc = Ra * 8 + Rb/#b

    S4SUB<u>x</u>  Ra, Rb/#b, Rc  ; Rc = Ra * 4 - Rb/#b
    S8SUB<u>x</u>  Ra, Rb/#b, Rc  ; Rc = Ra * 8 - Rb/#b
</pre>
<p>
The scaled addition and subtraction instructions multiply
<var>Ra</var> by 4 or 8 before adding or subtracting <var>Rb</var>/#b.
These are commonly used to calculate effective addresses
as part of an array indexing operation.
</p>
<p>
Next come the bit-twiddling instructions.
Note that these instructions always operate on full 64-bit registers.
(But if both inputs are in canonical form, then so too will the result.)
</p>
<pre>
    AND     Ra, Rb/#b, Rc  ; Rc = Ra &amp;  Rb/#b
    BIS     Ra, Rb/#b, Rc  ; Rc = Ra |  Rb/#b "bit set"
    XOR     Ra, Rb/#b, Rc  ; Rc = Ra ^  Rb/#b
    BIC     Ra, Rb/#b, Rc  ; Rc = Ra &amp; ~Rb/#b "bit clear"
    ORNOT   Ra, Rb/#b, Rc  ; Rc = Ra | ~Rb/#b
    EQV     Ra, Rb/#b, Rc  ; Rc = Ra ^ ~Rb/#b "bit equivalence"
</pre>
<p>
Officially, the <code>C</code> in <code>BIC</code>
stands for "complement",
but I find it easier to remember if I pretend that it stands for
"clear",
because it
clears the bits in <code>Ra</code>
as selected by <code>Rb/#b</code>.
For example,</p>
<pre>
    BIC     t0, #3, t2     ; clear bottom two bits of t0
</pre>
<p>
This takes the value in <var>t0</var>,
clears the bottom two bits (#3),
and puts the result into <var>t2</var>.
</p>
<p>
The <code>EQV</code> and <code>ORNOT</code> instructions are not
widely used, but I included them for completeness.
</p>
<p>
There are three bit-shifting instructions.
</p>
<pre>
    SLL     Ra, Rb/#b, Rc  ; Rc =           Ra &lt;&lt; (Rb/#b % 64)
    SRL     Ra, Rb/#b, Rc  ; Rc = (uint64_t)Ra &gt;&gt; (Rb/#b % 64)
    SRA     Ra, Rb/#b, Rc  ; Rc = ( int64_t)Ra &gt;&gt; (Rb/#b % 64)
</pre>
<p>
The right-shift has two variants, depending on whether you want
the shifted value to be zero-filled (unsigned, or logical shift)
or sign-filled (signed, or arithmetic shift).
Note that there are no 32-bit versions of the bit shifting instructions.
They always operate on the full 64-bit register.
</p>
<p>
There are some rarely-used computation
instructions that I'm not going to
go into,
like "count number of leading zero bits"
and all the multimedia instructions.
There are also some other computation instructions that
are closely related to other functions of the processor,
so I'll defer those to the appropriate section.
Next time, we'll look at memory access,
including the computation instructions tailored to support
memory operations.
</p>
<p>
<b>Bonus chatter</b>:
There are a number of idioms that let you express other
concepts in terms of the instructions above.
</p>
<pre>
    BIS     zero, zero, zero    ; NOP (writes to zero are ignored)
    BIS     zero, zero, Rc      ; Set Rc to zero
    ADDL    zero, #b, Rc        ; Set Rc to a small constant
    SUBL    zero, #b, Rc        ; Set Rc to a small negative constant
    BIS     Ra, Ra, Rc          ; Copy Ra to Rc
    BIS     zero, Ra, Rc        ; Copy Ra to Rc
    BIS     Ra, zero, Rc        ; Copy Ra to Rc
    SUB<u>x</u>    zero, Ra, Rc        ; Rc = -Ra
    ORNOT<u>x</u>  zero, Ra, Rc        ; Rc = ~Ra
    ADDL    zero, Rb, Rc        ; Rc = (int64_t)(int32_t)Rb
</pre>
<p>
Note that I gave three ways to copy one register to another.
The first is the one recommended by DEC.
The second is the one the Microsoft compiler generates.
Windows NT requires that copying registers in function
prologues and epilogues must be performed
with one of the three given formats in order for the instruction
to be unwindable.
</p>
<p>
I showed idioms for loading small positive and negative constants,
but we'll see next time that there's something that works for
medium-sized constants.
</p>
<p>
The last idiom is an important one
because it forces a 32-bit value into canonical form.
This is useful when there isn't a 32-bit version of the
instruction you want,
such as a shift instruction.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1" id="comment-1305726">
				<div id="div-comment-1305726" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1305726">
			August 8, 2017 at 8:54 am</a>		</div>

		<p>odd that the compiler generates a form that DEC didn&#8217;t recommend. I know they go out of their way to do that sort of optimization on x86</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1305735">
				<div id="div-comment-1305735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Bremner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1305735">
			August 8, 2017 at 10:19 am</a>		</div>

		<p>Integer division by a constant can be converted to a reciprocal multiplication and a correction step (usually a shift or add). <a href="https://gmplib.org/~tege/divcnst-pldi94.pdf" rel="nofollow">Division by Invariant Integers using Multiplication</a> is a widely cited paper on this topic.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1305815">
				<div id="div-comment-1305815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1305815">
			August 8, 2017 at 9:17 pm</a>		</div>

		<p>Presumably that would be the part in the article where he says:<br />
• If dividing by a constant n, you may be able to use the UMULH instruction to multiply by (2⁶⁴÷n) and then extract the high 64 bits (which means to divide by 2⁶⁴).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1305745">
				<div id="div-comment-1305745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matteo Italia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1305745">
			August 8, 2017 at 10:41 am</a>		</div>

		<p>Ouch, the destination operand on the right!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1305746">
				<div id="div-comment-1305746" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1305746">
			August 8, 2017 at 11:43 am</a>		</div>

		<p>If it weren&#8217;t for the fact I can&#8217;t get a modern HTTPS stack I would consider running NT4 on Alpha for a web server and laugh as memory corruption exploits that should yield SYSTEM don&#8217;t because their shellcode is for the wrong processor.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1305756">
				<div id="div-comment-1305756" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Clarkstone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1305756">
			August 8, 2017 at 12:19 pm</a>		</div>

		<p>Those logical operations look rather like a bitwise-logic unit that can switch between AND, OR, and XOR, plus an optional inversion on the right operand. That plus the choice of which way round the operands are gives you all of the bitwise operations except nand and nor.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1305775">
				<div id="div-comment-1305775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1305775">
			August 8, 2017 at 1:31 pm</a>		</div>

		<p>I like your observation so much I reordered the table to reflect it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1305785">
				<div id="div-comment-1305785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1305785">
			August 8, 2017 at 3:20 pm</a>		</div>

		<p>The instruction encoding supports this.  The function codes (using Raymond&#8217;s ordering) are:</p>
<p>0x00 AND<br />
0x20 BIS<br />
0x40 XOR<br />
0x08 BIC<br />
0x28 ORNOT<br />
0x48 EQV</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-odd thread-alt depth-1" id="comment-1305825">
				<div id="div-comment-1305825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1305825">
			August 8, 2017 at 11:15 pm</a>		</div>

		<p>I wonder that since all registers are 64 bit, will there be exception/interrupt thrown when you add 2 32-bit values with ADDL and result in carry/overflow.</p>
<p>If not, I think the &#8220;count number of leading zero bits&#8221; may in fact have some use.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1306456">
				<div id="div-comment-1306456" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thiago Macieira</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1306456">
			August 14, 2017 at 10:59 pm</a>		</div>

		<p>How does the compiler produce 32-bit logical right shifts? If loading 32-bit value from memory will sign extend the value to 64-bit, the upper half might contain 1 bits. Then, using SRL would shift in 1s instead of zeroes.</p>
<p>To perform that, the compiler would need to zero out the upper half first. How does it do that optimally?</p>
<p>I can think only of a very inefficient way with the instructions presented so far (zero a register, shift logically left 32, then AND with the actual value).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1306535">
				<div id="div-comment-1306535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775#comment-1306535">
			August 15, 2017 at 9:42 am</a>		</div>

		<p>Stay tuned!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

