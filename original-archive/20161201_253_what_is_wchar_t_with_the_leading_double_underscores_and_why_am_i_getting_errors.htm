<html>
<head>
<title>What is __wchar_t (with the leading double underscores) and why am I getting errors about it?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What is __wchar_t (with the leading double underscores) and why am I getting errors about it?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 1, 2016 / year-entry #254</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161201-00/?p=94836</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It's the internal wchar_t.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The Microsoft Visual C++ compiler
has a compiler option called <code>/Zc:wchar_t</code> which lets
you control what the symbol <code>wchar_t</code> means.
</p>
<p>
According to the C++ standard,
<code>wchar_t</code> is a distinct native type,
and that's what the Visual C++ compiler defaults to.
However, you can set
<code>/Zc:wchar_t-</code>,
and that suppresses the intrinsic definition of
<code>wchar_t</code>,
allowing you to define it to whatever you like.
And for Windows, this historically means
</p>
<pre>
typedef unsigned short wchar_t;
</pre>
<p>
because Windows predates the versions of the C and C++ standards
that introduced
<code>wchar_t</code> as a native type.
</p>
<p>
So now you have a problem if you are writing a library
that will be consumed both by
old-school code written with <code>wchar_t</code>
defined as an alias for <code>unsigned short</code>
and by new-school code written with <code>wchar_t</code>
as an intrinsic type.
What data type do you use for your string parameters?
</p>
<p>
Well, if your library uses C linkage, then you're
in luck.
Since the intrinsic <code>wchar_t</code> is a
16-bit unsigned integer in Visual C++,
it is binary-compatible with <code>unsigned short</code>,
so you can declare your function as accepting
<code>wchar_t</code> in the header file,
and each client will interpret it through their own
<code>wchar_t</code>-colored glasses:
Code that is wearing the <code>/Zc:wchar_t</code> glasses
will see the native <code>wchar_t</code> Type.
Code that is wearing the <code>/Zc:wchar_t-</code> glasses
will see an <code>unsigned short</code>.
And since C linkage is not decorated, you can export
one function that accepts a <code>wchar_t</code>,
and it will interoperate with either definition.
</p>
<p>
That works for undecorated functions, but what about
languages like C++ that use decoration to encode
the types of the parameters?
Which decoration do you use?
</p>
<p>
<a HREF="http://dilbert.com/strip/1996-01-27">
Let's do both</a>.
</p>
<p>
What you do is write two versions of your function,
one that takes an <code>unsigned short</code>
and one that takes a <code>__wchar_t</code>.
That double-underscore version represents
"The native type for <code>wchar_t</code> that
is used by <code>/Zc:wchar_t</code>."
</p>
<p>
In other words,
<code>/Zc:wchar_t</code> results in the compiler
internally doing the equivalent of
</p>
<pre>
typedef __wchar_t wchar_t;
</pre>
<p>
It makes the symbol <code>wchar_t</code>
an alias for the internal <code>__wchar_t</code> type.
</p>
<p>
So let's say you have a function called <code>DoSomething</code>
that takes a wide string,
and you want to accept clients compiled with either
setting for
<code>/Zc:wchar_t</code>.
</p>
<pre>
// Something.h

bool DoSomething(const __wchar_t* s);
bool DoSomething(const unsigned short* s);
</pre>
<p>
This declares two versions of the function.
The first will be matched by code compiled with
<code>/Zc:wchar_t</code>.
The second will be matched by code compiled with
<code>/Zc:wchar_t-</code>.
</p>
<p>
Your implementation goes like this:
</p>
<pre>
// Something.cpp
#include &lt;Something.h&gt;

bool DoSomethingWorker(const wchar_t* s)
{
 ... implementation ...
}

bool DoSomething(const __wchar_t* s)
{
    return DoSomethingWorker(reinterpret_cast&lt;const wchar_t*&gt;(s));
}

bool DoSomething(const unsigned short* s)
{
    return DoSomethingWorker(reinterpret_cast&lt;const wchar_t*&gt;(s));
}
</pre>
<p>
As noted earlier, callers who compile with
<code>/Zc:wchar_t</code> will match the first
version of <code>Do&shy;Something</code>;
callers who compile with
<code>/Zc:wchar_t-</code> will match the second.
But both of them funnel into a common implementation,
which we declare with <code>wchar_t</code>,
so that it matches the <code>/Zc:wchar_t</code>
setting used by the library itself.
</p>
<p>
Okay, so to answer the opening question:
<code>__wchar_t</code> is the name for the intrinsic
data type for wide strings.
If you compile with
<code>/Zc:wchar_t</code>,
then that's the data type that <code>wchar_t</code>
maps to.
The funny name exists so that code compiled with
<code>/Zc:wchar_t-</code> can access it too,
and so that code which wants to be
<code>/Zc:wchar_t</code>-agnostic
can explicitly refer to the internal native type.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1275415">
				<div id="div-comment-1275415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pietro Gagliardi (andlabs)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161201-00/?p=94836#comment-1275415">
			December 1, 2016 at 7:23 am</a>		</div>

		<p>&#8230;I needed to do this just yesterday. Freaky o_O</p>
<p>My code, however, is intended to run on more than just Windows, so it can&#8217;t use the name wchar_t except on Windows. (It also must work on both C and C++.) Instead, my base functions use uint16_t, and my code looks like</p>
<p>#ifdef __cplusplus<br />
} // close the extern &#8220;C&#8221;<br />
#if defined(_MSC_VER) &amp;&amp; defined(_WCHAR_T_DEFINED) &amp;&amp; defined(_NATIVE_WCHAR_T_DEFINED)<br />
inline T func(&#8230;, wchar_t *arg, &#8230;)<br />
{<br />
	return func(&#8230;, reinterpret_cast(arg), &#8230;);<br />
}</p>
<p>I wonder if using __wchar_t directly has any advantages, or if what I&#8217;m doing has any gotchas that I don&#8217;t know about. __wchar_t works regardless of the setting of /Zc:wchar_t (as you said), so one advantage would be only needing to check for _MSC_VER&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1275425">
				<div id="div-comment-1275425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161201-00/?p=94836#comment-1275425">
			December 1, 2016 at 8:53 am</a>		</div>

		<p>C has had wchar_t since C90, i.e. since it was first standardised, 26 years ago. What C compiler are you using that doesn&#8217;t support wchar_t?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1275435">
				<div id="div-comment-1275435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pietro Gagliardi (andlabs)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161201-00/?p=94836#comment-1275435">
			December 1, 2016 at 9:33 am</a>		</div>

		<p>The size of wchar_t is implementation defined; there is no guarantee that wchar_t is 16-bit unsigned, and there is no guarantee that it represents UTF-16.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4 parent" id="comment-1275445">
				<div id="div-comment-1275445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161201-00/?p=94836#comment-1275445">
			December 1, 2016 at 9:47 am</a>		</div>

		<p>The Windows ABI says that Unicode is represented as UTF-16LE. How you choose to express that to the compiler of your choice is a matter between you and your compiler.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1275455">
				<div id="div-comment-1275455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pietro Gagliardi (andlabs)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161201-00/?p=94836#comment-1275455">
			December 1, 2016 at 10:20 am</a>		</div>

		<p>And of course, as a consequence, most compilers use 16-bit integers on Windows for wchar_t, so you should be able to take a Windows program written for one compiler and compile it for another. Therefore, I can safely use this on Windows. My point was that I needed to do more than just Windows, and then the C standard rules of wchar_t kick in.</p>
<p>As another example, OS X is another system that uses UTF-16 for its internal string representation in both the Core Foundation and Cocoa APIs and its wchar_t is 4 bytes long. In fact, there is no function in either API that takes wchar_t or wchar_t* values! (Their names for the UTF-16 type are UniChar and unichar, respectively.)</p>
<p>My original question though still stands: is there anything wrong with the code I wrote yesterday that would make switching to Raymond&#8217;s code in the post a better option?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1275525">
				<div id="div-comment-1275525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161201-00/?p=94836#comment-1275525">
			December 1, 2016 at 9:34 pm</a>		</div>

		<p>&#8220;The Windows ABI says that Unicode is represented as UTF-16LE.&#8221;<br />
I think we both (hopefully we all) know that&#8217;s untrue history revisionism.<br />
Windows Unicode is, has always been, and can never become anything but UTC-2.<br />
Citation needed? NTFS $UpCase.<br />
Maybe _some_ API&#8217;s (GDI glyps?) can handle UTF-16 properly, but the filesystem most certainly can not, and since NTFS is _integral_ to Windows (it can&#8217;t even function nowadays without it &#8211; or so MS claims), that&#8217;s the defining part.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1275725">
				<div id="div-comment-1275725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161201-00/?p=94836#comment-1275725">
			December 2, 2016 at 7:54 pm</a>		</div>

		<p>@Mike<br />
Windows was UCS-2 originally, yes. It converted to UTF-16LE in Windows 2000. That was about 17 years ago, it might be time to re-examine a few of your long-cherished beliefs at this point.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1276845">
				<div id="div-comment-1276845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161201-00/?p=94836#comment-1276845">
			December 13, 2016 at 3:56 pm</a>		</div>

		<p>@Joshua Bowman: Would you like some filenames with malformed UTF-16 surrogates to chew on?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-4" id="comment-1275565">
				<div id="div-comment-1275565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161201-00/?p=94836#comment-1275565">
			December 2, 2016 at 2:04 am</a>		</div>

		<p>Ah, you&#8217;re specifically dealing with UTF-16 code units, rather than unencoded unicode code points.</p>
<p>Yeah, uint16_t is a much better portable cross-platform fit for that than wchar_t. Sorry I misunderstood what you meant about not being able to use wchar_t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1275735">
				<div id="div-comment-1275735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161201-00/?p=94836#comment-1275735">
			December 2, 2016 at 8:17 pm</a>		</div>

		<p>wchar_t is an internal text-encoding. uint16_t is a binary encoding. You don&#8217;t write text to files, you write binary bits in a specified encoding, and you convert to the system&#8217;s or your library&#8217;s native text encoding (utf8, utf16le, wchar_t, etc) upon reading.</p>
<p>Passing any non-specific C type between compilers, programs, or computers should be considered harmful. All real-time interfacing must be done with binary types (which is why COM is all binary types). Only compile-time interfacing can be guaranteed.</p>
<p>Meanwhile, any internal function can work just as well with wchar_t as with uint16_t even if the host defines it as uint32_t, as long as you already dealt with the correct decoding during read, instead of just reinterpreting it later. (This is why Raymond&#8217;s post specifically deals with Visual Studio, and doesn&#8217;t claim to be applicable to any other compilers. It shouldn&#8217;t even be considered gospel for all Windows compilers.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1275475">
				<div id="div-comment-1275475" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MV</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161201-00/?p=94836#comment-1275475">
			December 1, 2016 at 11:58 am</a>		</div>

		<p>It seems wasteful to have two versions of the DoSomething() function, but isn&#8217;t it also the case that the compiler (or maybe it&#8217;s the linker) will notice that the two functions are bit-for-bit equivalent once they&#8217;re compiled, and fold them back together anyway?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1275495">
				<div id="div-comment-1275495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Seis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161201-00/?p=94836#comment-1275495">
			December 1, 2016 at 1:15 pm</a>		</div>

		<p>If you copy and paste the implementation, VC++&#8217;s /OPT:ICF will merge the two functions. If you make one a wrapper for the other then no merging is needed of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-the-wench even depth-2" id="comment-1275505">
				<div id="div-comment-1275505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Monochrome+Wench' rel='external nofollow' class='url'>Monochrome Wench</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161201-00/?p=94836#comment-1275505">
			December 1, 2016 at 2:31 pm</a>		</div>

		<p>Yep the compiler and linker should be smart enough to optimise away the functions entirely and you get left with 1 function with three exported names in the dll</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1275545">
				<div id="div-comment-1275545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161201-00/?p=94836#comment-1275545">
			December 1, 2016 at 11:14 pm</a>		</div>

		<p>My approach would actually be implement DoSomething(const __wchar_t*) in the library, and then have the header contain:</p>
<p>    inline bool DoSomething(const short* arg) { return DoSomething(reinterpret_castarg)); }</p>
<p>The compiler will optimize that inline function away to nothing.  (Note that Raymond&#8217;s implementation only had one real function, and a couple of short forwarding functions, so the overhead of that is not going to be high.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

