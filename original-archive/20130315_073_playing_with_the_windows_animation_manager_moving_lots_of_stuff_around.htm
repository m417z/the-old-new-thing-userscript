<html>
<head>
<title>Playing with the Windows Animation Manager: Moving lots of stuff around</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Playing with the Windows Animation Manager: Moving lots of stuff around</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 15, 2013 / year-entry #74</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130315-00/?p=4943</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">We saw last time a sample program that moved a circle around. Today I'll try to build the classic demo of animating a lot of objects in a list. This isn't the prettiest code, but I wanted to make as few changes as possible. Start with the Timer-Driven Animation, and make these changes to the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/03/14/10399699.aspx">
We saw last time</a>
a sample program that moved a circle around.
Today I'll try to build the classic demo of animating a lot of
objects in a list.
</p>
<p>
This isn't the prettiest code, but I wanted to make as few changes
as possible.
Start with the
<a HREF="http://archive.msdn.microsoft.com/animationmanager">
Timer-Driven Animation</a>,
and make these changes to the
<code>Main&shy;Window.h</code> header file.
</p>
<pre>
<font COLOR=blue>struct Item
{
    IUIAnimationVariable *m_pAnimationVariableX;
    IUIAnimationVariable *m_pAnimationVariableY;
    Gdiplus::Color m_color;
};</font>

class MainWindow
{
    ...

    <font COLOR=red>// <strike>HRESULT ChangeColor(</strike></font>
    <font COLOR=red>//     <strike>DOUBLE red,</strike></font>
    <font COLOR=red>//     <strike>DOUBLE green,</strike></font>
    <font COLOR=red>//     <strike>DOUBLE blue</strike></font>
    <font COLOR=red>//     <strike>);</strike></font>
    <font COLOR=blue>HRESULT ChangePos();</font>

    ...
private:

    <font COLOR=blue>static const int ItemCount = 100;
    static const int ItemWidth = 40;
    static const int ItemHeight = 40;
    static int XFromIndex(int index)
    {
        return (index % 10) * 50;
    }
    static int YFromIndex(int index)
    {
        return (index / 10) * 50;
    }</font>

    ...

    <font COLOR=red>// <strike>IUIAnimationVariable *m_pAnimationVariableRed;</strike></font>
    <font COLOR=red>// <strike>IUIAnimationVariable *m_pAnimationVariableGreen;</strike></font>
    <font COLOR=red>// <strike>IUIAnimationVariable *m_pAnimationVariableBlue;</strike></font>
    <font COLOR=blue>Item m_Items[ItemCount];</font>
};
</pre>
<p>
From the changes in the header file,
I think you see where this is going.
Instead of just having one item on the screen,
I'm going to put a hundred.
</p>
<p>
Here are the changes to
<code>Main&shy;Window.cpp</code>.
First, we need to null out our pointers at construction
and clean them up at destruction.
(This sample program does not use smart pointers,
so I won't either.)
</p>
<pre>
CMainWindow::CMainWindow() :
    m_hwnd(NULL),
    m_pAnimationManager(NULL),
    m_pAnimationTimer(NULL),
    m_pTransitionLibrary(NULL)<font COLOR=red>// <strike>,</strike></font>
    <font COLOR=red>// <strike>m_pAnimationVariableRed(NULL),</strike></font>
    <font COLOR=red>// <strike>m_pAnimationVariableGreen(NULL),</strike></font>
    <font COLOR=red>// <strike>m_pAnimationVariableBlue(NULL)</strike></font>
{
    <font COLOR=blue>for (int i = 0; i &lt; ItemCount; i++)
    {
        m_Items[i].m_pAnimationVariableX = NULL;
        m_Items[i].m_pAnimationVariableY = NULL;
    }</font>
}

CMainWindow::~CMainWindow()
{
    // Animated Variables
    <font COLOR=red>// <strike>SafeRelease(&amp;m_pAnimationVariableRed);</strike></font>
    <font COLOR=red>// <strike>SafeRelease(&amp;m_pAnimationVariableGreen);</strike></font>
    <font COLOR=red>// <strike>SafeRelease(&amp;m_pAnimationVariableBlue);</strike></font>
    <font COLOR=blue>for (int i = 0; i &lt; ItemCount; i++)
    {
        SafeRelease(&amp;m_Items[i].m_pAnimationVariableX);
        SafeRelease(&amp;m_Items[i].m_pAnimationVariableY);
    }</font>

    ...
}

</pre>
<p>
Next we get rid of the initial animation.
</p>
<pre>
HRESULT CMainWindow::Initialize(
    HINSTANCE hInstance                            
    )
{
    ...
                <font COLOR=red>// <strike>Fade in with Red</strike></font>
                <font COLOR=red>// <strike>hr = ChangeColor(COLOR_MAX, COLOR_MIN, COLOR_MIN);</strike></font>
    ...
}
</pre>
<p>
As you might expect, the <code>Create&shy;Animation&shy;Variables</code>
method changed completely, since it now has to create the variables
for each item.
But the basic idea is the same:
Create each variable with the appropriate initial value.
(It's also a lot shorter!)
</p>
<pre>
HRESULT CMainWindow::CreateAnimationVariables()
{
    <font COLOR=blue>HRESULT hr = S_OK;

    for (int i = 0; SUCCEEDED(hr) &amp;&amp; i &lt; ItemCount; i++)
    {
        m_Items[i].m_color = Color(
            static_cast&lt;BYTE&gt;(RandomFromRange(COLOR_MIN, COLOR_MAX)),
            static_cast&lt;BYTE&gt;(RandomFromRange(COLOR_MIN, COLOR_MAX)),
            static_cast&lt;BYTE&gt;(RandomFromRange(COLOR_MIN, COLOR_MAX))
        );
        hr = m_pAnimationManager-&gt;CreateAnimationVariable(
            XFromIndex(i),
            &amp;m_Items[i].m_pAnimationVariableX
        );
        if (SUCCEEDED(hr))
        {
            hr = m_pAnimationManager-&gt;CreateAnimationVariable(
            YFromIndex(i),
                &amp;m_Items[i].m_pAnimationVariableY
                );
        }
    }</font>

    return hr;
}
</pre>
<p>
The <code>Draw&shy;Background</code> method is becoming
increasingly inaccurately-named,
since in addition to drawing the background, we also draw
the foreground!
</p>
<pre>
HRESULT CMainWindow::DrawBackground(
    Graphics &amp;graphics,
    const RectF &amp;rectPaint
    )
{
    <font COLOR=blue>SolidBrush brushBackground(Color(255, 255, 255));
    HRESULT</font> hr = HrFromStatus(graphics.FillRectangle(
            &amp;brushBackground,
            rectPaint
            ));

    <font COLOR=blue>for (int i = 0; SUCCEEDED(hr) &amp;&amp; i &lt; ItemCount; i++)
    {
        INT32 x;
        hr = m_Items[i].m_pAnimationVariableX-&gt;GetIntegerValue(
            &amp;x
            );
        if (SUCCEEDED(hr))
        {
            INT32 y;
            hr = m_Items[i].m_pAnimationVariableY-&gt;GetIntegerValue(
                &amp;y
                );
            if (SUCCEEDED(hr))
            {
                SolidBrush brush(m_Items[i].m_color);
                RectF rectItem(
                    static_cast&lt;REAL&gt;(x),
                    static_cast&lt;REAL&gt;(y),
                    static_cast&lt;REAL&gt;(ItemWidth),
                    static_cast&lt;REAL&gt;(ItemHeight));
                hr = HrFromStatus(graphics.FillRectangle(
                    &amp;brush,
                    rectItem
                    ));
            }
        }
    }</font>
    
    return hr;
}
</pre>
<p>
We change what happens when you click the left mouse button.
Instead of changing the color, we shuffle the items randomly.
</p>
<pre>
HRESULT CMainWindow::OnLButtonDown()
{
    HRESULT hr = <font COLOR=blue>ChangePos();</font>

    return hr; 
}
</pre>
<p>
And now the money function:
Shuffling the items and animating them to their new locations.
</p>
<pre>
HRESULT CMainWindow::<font COLOR=blue>ChangePos()</font>
{
    const UI_ANIMATION_SECONDS DURATION = 0.5;
    const DOUBLE ACCELERATION_RATIO = 0.5;
    const DOUBLE DECELERATION_RATIO = 0.5;

    <font COLOR=blue>// Assign final locations randomly
    int Destination[ItemCount];
    Destination[0] = 0;
    for (int i = 1; i &lt; ItemCount; i++)
    {
        int j = rand() % (i + 1);
        Destination[i] = Destination[j];
        Destination[j] = i;
    }</font>

    // Create a storyboard

    IUIAnimationStoryboard *pStoryboard = NULL;
    HRESULT hr = m_pAnimationManager-&gt;CreateStoryboard(
        &amp;pStoryboard
        );
    if (SUCCEEDED(hr))
    {
        <font COLOR=blue>for (int i = 0; SUCCEEDED(hr) &amp;&amp; i < ItemCount; i++)
        {</font>
            // Create transitions for the <font COLOR=blue>position</font> animation variables

            IUIAnimationTransition *pTransition<font COLOR=blue>X</font>;
            hr = m_pTransitionLibrary-&gt;CreateAccelerateDecelerateTransition(
                DURATION,
                <font COLOR=blue>XFromIndex(Destination[i])</font>,
                ACCELERATION_RATIO,
                DECELERATION_RATIO,
                &amp;pTransition<font COLOR=blue>X</font>
                );

            if (SUCCEEDED(hr))
            {
                IUIAnimationTransition *pTransition<font COLOR=blue>Y</font>;
                hr = m_pTransitionLibrary-&gt;CreateAccelerateDecelerateTransition(
                    DURATION,
                    <font COLOR=blue>YFromIndex(Destination[i])</font>,
                    ACCELERATION_RATIO,
                    DECELERATION_RATIO,
                    &amp;pTransition<font COLOR=blue>Y</font>
                );

                // <font COLOR=red>Delete "blue" transition</font>

                if (SUCCEEDED(hr))
                {
                    // Add transitions to the storyboard
    
                    hr = pStoryboard-&gt;AddTransition(
                        <font COLOR=blue>m_Items[i].</font>m_pAnimationVariable<font COLOR=blue>X</font>,
                        pTransition<font COLOR=blue>X</font>
                        );
                    if (SUCCEEDED(hr))
                    {
                        hr = pStoryboard-&gt;AddTransition(
                            <font COLOR=blue>m_Items[i].</font>m_pAnimationVariable<font COLOR=blue>Y</font>,
                            pTransition<font COLOR=blue>Y</font>
                            );
                        // <font COLOR=red>Delete "blue" transition</font>
                        // <font COLOR=red>Move "Schedule" out of the loop</font>
                    }

                    pTransition<font COLOR=blue>Y</font>-&gt;Release();
                }
    
                pTransition<font COLOR=blue>X</font>-&gt;Release();
            }
        }

        <font COLOR=blue>// Scheduling code moved outside the loop</font>
        if (SUCCEEDED(hr))
        {
            // Get the current time and schedule the storyboard for play

            UI_ANIMATION_SECONDS secondsNow;
            hr = m_pAnimationTimer-&gt;GetTime(
                &amp;secondsNow
                );
            if (SUCCEEDED(hr))
            {
                hr = pStoryboard-&gt;Schedule(
                    secondsNow
                    );
            }
        }

        pStoryboard-&gt;Release();
    }

    return hr;
}
</pre>
<p>
It looked like a lot of code, but really wasn't.
The only real change was to add the shuffling code
and to put a loop around the code that generates
the transitions and adds them to the storyboard.
</p>
<p>
And there you have it,
a program that smoothly animates 100 items
each time you click on the window.
For me, the fun thing to do is to
just click repeatedly on the window and
watch the items swirl around like a swarm of insects.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1045443">
				<div id="div-comment-1045443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130315-00/?p=4943#comment-1045443">
			March 16, 2013 at 2:38 am</a>		</div>

		<p>Exercise left to the reader: Create &quot;Conway Universe Life&quot; app using Ray&#39;s given code (hint: only 8 lines need to be added and 3 existing modified).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1045463">
				<div id="div-comment-1045463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130315-00/?p=4943#comment-1045463">
			March 18, 2013 at 2:56 am</a>		</div>

		<p>Wow&#8230; I will continue clicking for at least one hour. Too bad it&#39;s no longer smooth with 400 items, but that might be because of my slow graphics card.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1045473">
				<div id="div-comment-1045473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130315-00/?p=4943#comment-1045473">
			March 18, 2013 at 5:36 am</a>		</div>

		<p>Exercise left to the reader: Create &quot;Sim City&quot; app using Ray&#39;s given code (hint: only 18 lines need to be added and 9 existing modified).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1045483">
				<div id="div-comment-1045483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130315-00/?p=4943#comment-1045483">
			March 18, 2013 at 6:48 am</a>		</div>

		<p>I managed to do it by adding 2 lines, add to beginning of WinMain: (error checking not included)</p>
<p>ShellExecute(NULL, &quot;open&quot;, &quot;C:\Program Files\Maxis\SimCity 4 Deluxe\Apps\SimCity 4.exe&quot;, NULL, NULL, SW_SHOWNORMAL);</p>
<p>return 0;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1045503">
				<div id="div-comment-1045503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130315-00/?p=4943#comment-1045503">
			March 18, 2013 at 7:21 am</a>		</div>

		<p>Now there&#39;s a version of SimCity still worth playing.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

