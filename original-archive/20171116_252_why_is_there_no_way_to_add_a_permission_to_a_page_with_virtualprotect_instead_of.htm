<html>
<head>
<title>Why is there no way to add a permission to a page with VirtualProtect instead of replacing it?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why is there no way to add a permission to a page with VirtualProtect instead of replacing it?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 16, 2017 / year-entry #253</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171116-00/?p=97406</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Who's in charge here?</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The <code>Virtual&shy;Protect</code> function lets you change
the protection of a page,
but all it can do is replace the current protections with the
protections you specify,
returning the old protections.
There is no way to add a protection to a page.
In other words,
there is an <code>Interlocked&shy;Exchange</code>
for page protections,
but no
<code>Interlocked&shy;Or</code>.
Why not?
</p>
<p>
The theory behind page protections is that you should be
modifying protections of pages that you have control over,
and not messing with protections of pages that are not yours.
If you stick to that theory, then if you have to synchronize
access to the protections for a page,
you can impose your own locking policy to avoid thread races.
</p>
<p>
In other words, the code that allocated the pages can also set
up a policy that any time you want to change the protection of the
page, you have to take a particular critical section so you
can change the protection <i>and</i> update whatever auxiliary
data structures are necessary to keep track of the state of the page.
Anybody who changes the protection of the page without taking the
lock is violating the principle that you should not be modifying
protections of pages that are not yours.
</p>
<p>
This principle of "Don't mess with it if it's not yours" means
that if you want to have pages whose protections you want to manipulate,
you should allocate them yourselves so that you are the one in
control of their protections.
</p>
<p>
One might argue whether this principle is still valid,
but that's the principle that went into the original design,
so
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20160329-00/?p=93214">
you'll just have to deal with it</a>.
</p>
<p>
Even if there were some sort of <code>Interlocked&shy;Or</code>-like
function that added a permission to a page,
you still have a problem if the various pieces of code that update
the protections of a page are not co&ouml;rdinating with each other.
</p>
<p>
Consider a page that starts out with
<code>PAGE_</code><code>READ&shy;ONLY</code>
permission.
Function&nbsp;1 uses this imaginary <code>Virtual&shy;Protect&shy;Or</code>
function to add write permssion, bringing the permission to
<code>PAGE_</code><code>READ&shy;WRITE</code>.
Function&nbsp;2 does the same thing,
but since the page already has write permission,
the request to add write permission is a nop.
</p>
<p>
Next, function&nbsp;1 is finished writing to the page,
so it uses the imaginary
<code>Virtual&shy;Protect&shy;And</code>
function to remove write permission.
Oops, function&nbsp;2 just lost write permission to the page
even though it had added it just moments ago.
</p>
<p>
In order for this to work, somebody somewhere would have to keep
track of how many times somebody wanted to add write permission to the page
and remove write permission only when the count drops to zero.
And even then, that might not be the right thing.
Maybe function&nbsp;1 is removing write permission for some
security purpose.
If function&nbsp;2 still had an outstanding "add write permission"
and the page remained write-enabled,
well, that's good for function&nbsp;2,
but it leaves function&nbsp;1 vulnerable.
</p>
<p>
Since it's not clear what the correct behavior is,
there's not much point in the kernel keeping
a history of all the protection changes for every page
in the system.
If you want to have a policy for what should happen if two
pieces of code change the protections of the same page,
then you are welcome to write code that enforces that policy
and make everybody go through you when they want to change
the protection.
</p>
<p>
<b>Bonus chatter</b>:
Note also that page permissions cannot be arbitrarily
mixed and matched.
For example, there are no write-only pages.
This makes reconciling multiple page protections even more
difficult when the result is something that doesn't exist.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1315946">
				<div id="div-comment-1315946" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Koro</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171116-00/?p=97406#comment-1315946">
			November 16, 2017 at 7:42 am</a>		</div>

		<p>The only obvious use for such complex machinery would be for hot-patching code, which is not recommended anyway.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1315955">
				<div id="div-comment-1315955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171116-00/?p=97406#comment-1315955">
			November 16, 2017 at 9:18 am</a>		</div>

		<p>AFAIK, there is no safe way to patch code in a running process from user mode anyway, so you still have other issues.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1315995">
				<div id="div-comment-1315995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171116-00/?p=97406#comment-1315995">
			November 17, 2017 at 2:19 am</a>		</div>

		<p>Why would the code be running? (I assume here you would want to act like a debugger.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1316035">
				<div id="div-comment-1316035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zak Larue-Buckley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171116-00/?p=97406#comment-1316035">
			November 17, 2017 at 6:48 am</a>		</div>

		<p>If no code is running in the process then you can fiddle with page protections as you wish because you know nobody else is.</p>
<p>You can use VirtualQuery to get the current protection, then restore the page protection after you are done. The whole discussion is moot.</p>
<p>The scenario I was thinking of was an injected dll detouring functions on the fly.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1315975">
				<div id="div-comment-1315975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171116-00/?p=97406#comment-1315975">
			November 16, 2017 at 4:48 pm</a>		</div>

		<p>In the old days&#8230;</p>
<p>Well, in the old days, there was no memory protection, and if you wrote to the wrong address, the computer crashed.  But in the semi-old days, you allocated the memory, then you set the protection on it (if desired), then you used it, then you deallocated it.  At no point did you need to fiddle with protection from multiple threads, mess with anyone else&#8217;s memory, or do any other &#8220;clever&#8221; stuff that would require atomically adding or removing permissions.</p>
<p>I am rather curious about what has changed since then.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1315985">
				<div id="div-comment-1315985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171116-00/?p=97406#comment-1315985">
			November 16, 2017 at 5:09 pm</a>		</div>

		<p>ASLR</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1315986">
				<div id="div-comment-1315986" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171116-00/?p=97406#comment-1315986">
			November 16, 2017 at 11:53 pm</a>		</div>

		<p>and?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1316275">
				<div id="div-comment-1316275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171116-00/?p=97406#comment-1316275">
			November 17, 2017 at 6:00 pm</a>		</div>

		<p>And I remember having to set dynamic library load addresses at compile time so there weren&#8217;t any fixups.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1316055">
				<div id="div-comment-1316055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171116-00/?p=97406#comment-1316055">
			November 17, 2017 at 7:23 am</a>		</div>

		<p>Any kind of dynamic compilation will want to use read-write while generating code and then set it to read-execute.</p>
<p>Why you&#8217;d want multiple threads to fight over the correct setting is anyone&#8217;s guess though</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1316225">
				<div id="div-comment-1316225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171116-00/?p=97406#comment-1316225">
			November 17, 2017 at 12:55 pm</a>		</div>

		<p>Of course, less careful implementations just ask for RWE pages and don&#8217;t bother changing the permissions after generating the code. It works but&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1316315">
				<div id="div-comment-1316315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171116-00/?p=97406#comment-1316315">
			November 18, 2017 at 5:55 am</a>		</div>

		<p>You might have heard of a little thing called the Java runtime. Hotspot allocates pages as read-write, then has to mark pages read-execute afterward.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1316065">
				<div id="div-comment-1316065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171116-00/?p=97406#comment-1316065">
			November 17, 2017 at 7:37 am</a>		</div>

		<p>So co-ör-or-dinate is the new microspeak to perform a bitwise-inclusive-OR operation that keeps blocking until undone?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

