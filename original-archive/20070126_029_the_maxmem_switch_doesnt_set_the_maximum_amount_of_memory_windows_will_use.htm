<html>
<head>
<title>The /MAXMEM switch doesn't set the maximum amount of memory Windows will use</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The /MAXMEM switch doesn&#8217;t set the maximum amount of memory Windows will use</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 26, 2007 / year-entry #30</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20070126-03/?p=28253</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The Windows boot.ini file has a /MAXMEM switch whose name would lead you to believe that it sets the maximum amount of memory that Windows will use. But that's not what it does; the name is misleading. What the /MAXMEM flag really does is set the maximum physical address that Windows will scan in search...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The Windows <code>boot.ini</code> file has a <code>/MAXMEM</code> switch whose name would lead you to believe that it sets the maximum amount of memory that Windows will use. But that's not what it does; the name is misleading.</p>
<p> What the <code>/MAXMEM</code> flag really does is set the maximum physical address that Windows will scan in search of RAM. If your physical memory map contains discontiguous chunks of RAM, such as the one at the 3.5GB boundary <a href="http://blogs.msdn.com/oldnewthing/archive/2006/08/14/699521.aspx"> in the sample diagram I drew a few months ago</a>, then the amount of RAM Windows finds will be less than the <code>/MAXMEM</code> value you specified. For example, if there were a gap between 128MB and 256MB (said gap used by some hardware device, say), then setting /MAXMEM to 512MB would only give you 384MB of RAM. You lost 128MB of physical address space to the gap. </p>
<p> What's more, <a href="http://support.microsoft.com/kb/108393/"> Knowledge Base article Q108393</a> says </p>
<blockquote class="q"><p> Microsoft has not committed to keeping the switch in any future releases of Windows. </p>
</blockquote>
<p> In fact, Windows&nbsp;Vista carries through that threat. The <code>/MAXMEM</code> switch has no effect in Windows&nbsp;Vista. To try to avoid the confusion surrounding the meaning of <code>MAXMEM</code>, the kernel folks changed its name to <code>TRUNCATEMEMORY</code>. (It also specifies the physical address limit in bytes rather than megabytes.) I'm not sure the name change will really help much to dispel the confusion, though, since it still says "memory". I think they should've called it something like <code>MAXPHYSADDR</code>. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-465603">
				<div id="div-comment-465603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070126-03/?p=28253#comment-465603">
			January 26, 2007 at 11:47 am</a>		</div>

		<p>Does Windows always &quot;scan for RAM&quot;, or are there cases where it trusts the e820 map provided by the BIOS? &nbsp;Come to think of it, is that e820 map what you&#8217;re talking about when you refer to scanning?</p>
<p>(When I heard the term &quot;scan for RAM&quot;, I had pictured the kernel going through some kind of loop, trying to do something with each physical address up to some limit, to figure out if there was RAM there. &nbsp;Perhaps that isn&#8217;t at all what happens, though?)</p>
<p>Actually, this seems to be a very low level kernel question, so I have a feeling you may not even know. &nbsp;Still, if you do, the information may be helpful &#8212; I&#8217;m not sure for what, but oh well. &nbsp;;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-465613">
				<div id="div-comment-465613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070126-03/?p=28253#comment-465613">
			January 26, 2007 at 11:55 am</a>		</div>

		<p>I actually had to use the /MAXMEM switch. &nbsp;We had an Exchange Server that was running NT 4.0; then we updgraded it to Windows 2000; then (much later) we added RAM to take it from 2GB to 4GB.</p>
<p>Two days later it froze.</p>
<p>After all kinds of troubleshooting we figured out that whenever the Exchange Store process hit 2GB, it froze.</p>
<p>We used the /MAXMEM switch to limit the server to an amount of RAM that would stop the freezing.</p>
<p>Then I had a flash of insight and upgraded the network card drivers. &nbsp;It never froze again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-465623">
				<div id="div-comment-465623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vladimir</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070126-03/?p=28253#comment-465623">
			January 26, 2007 at 11:58 am</a>		</div>

		<p>TRUNCATEMEMORY is better, to my opinion, cause it accents the fact of truncation, instead of assuming that the user knows much about physical memory mapping, like MAXPHYSADDR does.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-465633">
				<div id="div-comment-465633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070126-03/?p=28253#comment-465633">
			January 26, 2007 at 12:00 pm</a>		</div>

		<p>Maurits: it&#8217;s still recommended to use /MAXMEM on Exchange servers if you fit more than 4GB. The reasons are complex &#8211; you&#8217;re recommended to use the /3GB and /USERVA switches to allow the store process to use (nearly) 3GB of virtual address space, but this reduces the kernel address space to (a little over) 1GB. If you fit more than 4GB of memory, to address it all you need to go into Physical Address Extensions mode (/PAE switch). This doubles the size of the page tables. Also, the page frame database is bigger due to having more physical memory pages to describe.</p>
<p>The net result of all this is that there&#8217;s not enough kernel address space left to support a lot of connections, so overall your Exchange server&#8217;s performance is worse with 8GB than with 4GB. Either use /MAXMEM or remove 4GB of memory!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-465683">
				<div id="div-comment-465683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jason Seba</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070126-03/?p=28253#comment-465683">
			January 26, 2007 at 3:34 pm</a>		</div>

		<p>It might be worth noting that if your goal is to actually reduce the amount of physical memory available to Windows by a set amount, the /BURNMEMORY switch is your friend.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-465573">
				<div id="div-comment-465573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070126-03/?p=28253#comment-465573">
			January 26, 2007 at 10:42 am</a>		</div>

		<p>If Microsoft *really* cared about compatibility and consistency they would use MaxPhysPage. :)</p>
<p><a rel="nofollow" target="_new" href="http://support.microsoft.com/kb/83436" rel="nofollow">http://support.microsoft.com/kb/83436</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-465733">
				<div id="div-comment-465733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Good Point</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070126-03/?p=28253#comment-465733">
			January 26, 2007 at 5:27 pm</a>		</div>

		<p>&quot;If Microsoft *really* cared about compatibility and consistency they would use MaxPhysPage.&quot;</p>
<p>And continue support for MaxBPs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-465933">
				<div id="div-comment-465933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070126-03/?p=28253#comment-465933">
			January 28, 2007 at 4:06 am</a>		</div>

		<p>TRUNCATEMEMORY?</p>
<p>Are they sure there wasn&#8217;t any longer word?</p>
<p>Again, contradictory info from M$ as usual:</p>
<p><a rel="nofollow" target="_new" href="http://www.microsoft.com/technet/sysinternals/information/bootini.mspx" rel="nofollow">http://www.microsoft.com/technet/sysinternals/information/bootini.mspx</a></p>
<p>/MAXMEM=</p>
<p>Limits Windows to ignore (not use) physical memory beyond the amount indicated. The number is interpreted in megabytes. Example: /MAXMEM=32 would limit the system to using the first 32 MB of physical memory even if more were present.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-466023">
				<div id="div-comment-466023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070126-03/?p=28253#comment-466023">
			January 28, 2007 at 8:37 pm</a>		</div>

		<p>A Hofstadter fan slipped this into the documentation too:</p>
<ul>
<li>&nbsp;This switch is undocumented because [&#8230;]</li>
</ul>
<p>Like BryanK, I&#8217;m also wondering if Windows really duplicates the scan that the BIOS did.</p>
<p>Actually I also wonder if the memory tester in Vista really scans all of memory. &nbsp;After it boots you can see that Vista x64 is using all of the installed memory including discontiguous chunks, but it doesn&#8217;t tell you if the tester really scanned it all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-466073">
				<div id="div-comment-466073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070126-03/?p=28253#comment-466073">
			January 29, 2007 at 10:02 am</a>		</div>

		<p>So, looking at what the documentation says, it looks like what really happened was the following:</p>
<p>1. /MAXMEM was implemented using a simple algorithm that does not account for memory &#8220;holes&#8221;.</p>
<p>2. Now that we fairly routinely have large amounts of memory that include these &#8220;holes&#8221;, /MAXMEM no longer works correctly.</p>
<p>3. Instead of fixing it, Microsoft simply renamed the switch to hide the problem.</p>
<div class="post">[<i>The bug wasn&#8217;t that the flag didn&#8217;t do what its name suggested. The bug was that the name was wrong. That bug is fixed. If there were a flag called CURECANCER that set the maximum COM port number, and it was fixed by renaming it to MAXCOMPORTNUMBER, would you be upset that the bug was not fixed? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-466143">
				<div id="div-comment-466143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Vert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070126-03/?p=28253#comment-466143">
			January 29, 2007 at 1:52 pm</a>		</div>

		<p>I implemented the /MAXMEM switch. And perhaps it should have been named /IGNOREALLPHYSICALMEMORYABOVETHISBOUNDARY or something similar, but it wasn&#8217;t. This was implemented back in the day when 16MB was a LOT of memory. Some PC manufacturers took a few shortcuts. Since nobody would ever put more than 16MB of memory in a PC, they did nasty things like</p>
<ul>
<li>don&#8217;t cache any memory above 16MB, causing everything that touched memory in this area to run pig slow</li>
<li>
<p>don&#8217;t bother even connecting memory above 16MB, causing everything above 16MB to be an alias for the memory below 16MB</p>
</li>
<li>
<p>Locate ROM in a window above 16MB, causing small chunks of memory to actually appear to be readable and writable, except when you went to read back what you wrote, it wasn&#8217;t there anymore.</p>
</li>
</ul>
<p>To work around all these flavors of brokenness, /MAXMEM was created specifically to ignore all memory above 16MB regardless of whether the BIOS claimed it worked or not.</p>
<p>Later, /MAXMEM was repurposed (perhaps inappropriately) to do quick &amp; dirty performance testing of the OS with different amounts of memory.</p>
<p>Even later, /MAXMEM was repurposed to work around buggy drivers that choked on physical memory addresses &gt; 16MB, 1GB, 2GB, 4GB, etc.</p>
<p>Then people figured out that /MAXMEM didn&#8217;t really do what they wanted (because it was never intended to) and /BURNMEMORY was added instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-466163">
				<div id="div-comment-466163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Will</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070126-03/?p=28253#comment-466163">
			January 29, 2007 at 2:51 pm</a>		</div>

		<p>Nice one John &#8211; that pretty much explains it all. &nbsp;ANy other similar war stories?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

