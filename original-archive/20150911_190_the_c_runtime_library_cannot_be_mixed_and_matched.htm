<html>
<head>
<title>The C runtime library cannot be mixed and matched</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The C runtime library cannot be mixed and matched</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 11, 2015 / year-entry #191</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>29</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In 2011, a customer had an application written in C++ with Visual Studio 2003 that consumes a static library provided by a third party, let's call it contoso.lib. Now, contoso.lib is a static library compiled with Visual C++ 6. The customer is migrating from Visual Studio 2003 to Visual Studio 2008, but they are still using...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In 2011,
a customer had an application written in C++ with
Visual Studio 2003
that consumes a static library provided by a third party,
let's call it
<code>contoso.lib</code>.
Now,
<code>contoso.lib</code> is a static library
<a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/06/07/10020654.aspx">
compiled with Visual C++&nbsp;6</a>.
The customer is migrating from Visual Studio 2003 to
Visual Studio 2008,
but they are still using that old <code>contoso.lib</code>
library that was compiled with
Visual C++&nbsp;6.
They were afraid that they would encounter some unresolved
externals due to name mangling issues,
but they were pleasantly surprised when there were no such issues.</p>
<p>
Now the questions.
</p>
<ol>
<li>Is it correct to link a VC6 static library into a VS2008 project?
</li>
<li>Even if the linking is successful,
    do you see any issues or disadvantages with this approach?
</li>
</ol>
<p>
The customer liaison's opinion was
"Due to missing security features like
<a href="http://msdn.microsoft.com/en-us/library/9a89h429.aspx">
<code>SAFESEH</code></a>,
<a href="http://msdn.microsoft.com/en-us/library/8dbf701c.aspx">
<code>GS</code></a>,
<a href="http://msdn.microsoft.com/en-us/library/bb384887.aspx">
<code>DYNAMICBASE</code></a>,
and
<a href="http://msdn.microsoft.com/en-us/library/ms235442.aspx">
<code>NXCOMPAT</code></a>,
there may be a lot of drawbacks to using VC6 libraries
in a VS2008 project.
What do you think?"
</p>
<p>
It's nice that you're thinking about the security features
added in recent versions of Visual Studio,
using a generous definition of <i>recent</i> to mean
<i>less than nine years old</i>.
But the issue is more fundamental than just security.
The issue is correctness.
</p>
<p>
You cannot mix libraries across compiler versions.
That you're trying to mix libraries with compiler versions
that are <i>nineteen years apart in age</i>
is mind-boggling.
The Win32 ABI does not extend into compiler-specific behavior,
like its internal
lookup tables for exception dispatching,
private helper functions for RTTI,
<a href="http://randomascii.wordpress.com/2013/12/01/vc-2013-class-layout-change-and-wasted-space/">
class member layout</a>,
<a href="http://blogs.msdn.com/b/oldnewthing/archive/2003/12/23/45481.aspx">
the order of base classes</a>,
<a href="http://blogs.msdn.com/b/vcblog/archive/2014/06/06/c-14-stl-features-fixes-and-breaking-changes-in-visual-studio-14-ctp1.aspx">
the implementations of STL classes</a>,
the
<a href="http://blogs.msdn.com/b/oldnewthing/archive/2014/04/11/10516280.aspx">
layout of various internal structures</a>,
or
<a href="http://blogs.msdn.com/b/oldnewthing/archive/2008/08/08/8841951.aspx">
what happens if you return <code>FALSE</code>
from <code>Dll&shy;Main</code></a>.
</p>
<p>
Name mangling will not catch any of these issues.
If you modify a class, say by adding a new member variable or base class,
the mangled name does not change,
even though the new class is probably incompatible with the old one.
</p>
<p>
Assuming you manage to dodge all the link errors,
what will happen is that these discrepancies will manifest themselves
as random failures or memory corruption <i>at run time</i>.
</p>
<p>
You will have to go back to Contoso and ask them for a version
of the library that is compatible with Visual Studio 2008.
</p>
<p>
(Then again, since this question was asked in 2011,
they may want to go straight to Visual Studio 2010,
which was the most recent version of Visual Studio
available at the time.)
</p>
<p>
<b>Bonus chatter</b>:
Another solution is to create a project in Visual Studio 2003
whose sole job is to wrap the static library in a DLL.
The rest of your program can be developed in Visual Studio 2008,
using the DLL interface to access the static library.
</p></p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1204791">
				<div id="div-comment-1204791" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204791">
			September 11, 2015 at 7:06 am</a>		</div>

		<p>The bonus chatter is the right way to do it. Now if it had used only C functions (and you can check this) you might have a chance. The only ones likely to break are getc and putc, but you can check this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1204781">
				<div id="div-comment-1204781" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204781">
			September 11, 2015 at 7:09 am</a>		</div>

		<p>If, on the other hand, Contoso already supplies you a DLL which dynamically links to the old CRT, you&#39;re in a world of pain too. Loading several DLLs (from different 3rd party providers) which depend on different MSVCRT versions doesn&#39;t really work. Or it does, until you look at something funny.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1204771">
				<div id="div-comment-1204771" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Long</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204771">
			September 11, 2015 at 7:57 am</a>		</div>

		<p>I had these symptoms (random failures, stack corruption, etc) in a piece of code when it was loaded and executed as a shell extension, but not when the same code ran as a stand-alone EXE. Both the DLL and the EXE were statically linked to the runtime so I suspected some sort of incompatibility when the code was running in Explorer&#39;s process, but various things I tried at the time didn&#39;t seem to work. What is the correct way to compile/link a shell extension DLL to avoid issues?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1204741">
				<div id="div-comment-1204741" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Cowherd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204741">
			September 11, 2015 at 8:39 am</a>		</div>

		<p>This bit Flexera (authors of license enforcement software FlexNet Publisher) hard with VS 2015. &nbsp;We had a bit of schadenfreude where I work, though unfortunately it means we can&#39;t use VS 2015 in production until they get their act together.</p>
<p><a rel="nofollow" target="_new" href="https://connect.microsoft.com/VisualStudio/feedback/details/1144980">connect.microsoft.com/&#8230;/1144980</a></p>
<p>[Note the bug submitter is FNP-ENG]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1204731">
				<div id="div-comment-1204731" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204731">
			September 11, 2015 at 8:51 am</a>		</div>

		<p>Can anyone please tell</p>
<p>1) Does VS 2003 with VC 6 compiler give the same problem (like using VS 2008 with VC 6 together)?</p>
<p>2)How a Dll in VS 2003 solves the problem?</p>
<p>Thanks</p>
<p>joe</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1204721">
				<div id="div-comment-1204721" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random User 36183755</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204721">
			September 11, 2015 at 9:14 am</a>		</div>

		<p>Semi-rhetorical question:</p>
<p>Would it be reasonable to be a bit worried about a product that, via its many DLLs of varying ages, eventually links to the msvcr/p DLLs for nearly every version of 6.0 through 12.0?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1204701">
				<div id="div-comment-1204701" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204701">
			September 11, 2015 at 9:57 am</a>		</div>

		<p>C 6.0 was released in 1989 (19 years before 2008). &nbsp;Visual C++ 6.0 was released in 1998, which is only 10 years apart from VS2008. &nbsp;Still a long way, but not 19 years long.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1204691">
				<div id="div-comment-1204691" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dimkaz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204691">
			September 11, 2015 at 11:20 am</a>		</div>

		<p>@joe</p>
<p>1. VS2003 with VC 6 library is likely (unless for some reason MSFT explicitly worked hard on keeping them compat) to have the same issues as VS2008 &amp; VC6.</p>
<p>2. static lib is missing all the code from VC 6 (in this case) that it&#39;s linked with. Common but not limited to new/malloc/exceptions/static initialization/structures one used from c/c++ lib etc&#8230;</p>
<p>By creating a dll in VC6 you are telling the linker to merge into that into this dll all those dependencies. (or link against older vc runtime dll)</p>
<p>The project in VS2008 will have it&#39;s own copy of c runtime (or links to a different dll version of such)</p>
<p>You can still run into trouble. Common issues: memory allocation/deallocation across boundary, C++ exceptions across boundary</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1204681">
				<div id="div-comment-1204681" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204681">
			September 11, 2015 at 11:26 am</a>		</div>

		<p>@joe:</p>
<p>It will always be a problem. Compiler features often need support from the CRT, for example, C++ exception handling uses a function in the MS CRT to handle them. This is one prime example because not only has the implementation changed, but the name has changed over the years. IIRC, this changed between VC6 and VC.net. What&#39;s more, VC.net was the first version that started work towards standard C++ behaviour.</p>
<p>For how the DLL solves the problem, the DLL is a separate executable module to the EXE file. This means the .exe file can be linked to one version of the CRT and the .dll can be linked to another. This allows you to link all objects to the correct versions without mixing them, and if you have a C ABI for the DLL, then you can call functions in the DLL from the executable without issue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1204671">
				<div id="div-comment-1204671" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204671">
			September 11, 2015 at 11:48 am</a>		</div>

		<p>Windows is somewhat unique in the modern native-code programming world in that the C runtime library is provided by the application, not the operating system. &nbsp;In the UNIX world, there is a standard C library that comes with the operating system. &nbsp;Changes are handled by newer compilers and headers linking to different internal symbol names.</p>
<p>Then&#8230;there&#39;s C++ in the UNIX world. &nbsp;That&#39;s pretty much the same as the Windows world.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1204661">
				<div id="div-comment-1204661" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rob green</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204661">
			September 11, 2015 at 11:53 am</a>		</div>

		<p>I think the bigger problem is mixing the memory models between the components. &nbsp;For example if the library function allocates memory it will come off of the vc6 heap, but if the contract is for the caller to free the buffer then it will free some random memory in the application heap.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1204641">
				<div id="div-comment-1204641" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204641">
			September 11, 2015 at 2:25 pm</a>		</div>

		<p>@Myria:</p>
<p>That is changing though, Microsoft introduced the UCRT with Windows 10 and VC2015. The plan for this is to have an OS supplied CRT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1204631">
				<div id="div-comment-1204631" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204631">
			September 11, 2015 at 3:42 pm</a>		</div>

		<p>@Myria: &quot;Then&#8230;there&#39;s C++ in the UNIX world. &nbsp;That&#39;s pretty much the same as the Windows world.&quot;</p>
<p>Not really nowadays, at least in the modern Linux world. Everything links to GCC&#39;s standard C++ library, even when you compile with another compiler (like LLVM&#39;s clang). It does the same kinds of things as the C library (different internal symbol names, etc), plus it can use namespaces. The name mangling and exception handling is a standard (Intel&#39;s IA-64 C++ ABI).</p>
<p>As a recent example, the C++ standard changed to mandate that the linked list&#39;s size() be constant-time. So now GCC&#39;s standard C++ library has two linked list implementations, in separate namespaces.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1204621">
				<div id="div-comment-1204621" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204621">
			September 11, 2015 at 5:35 pm</a>		</div>

		<p>@Myria, @Cesar, last time I heard, people are launching stock virtual machines (say, in Azure or a book store&#39;s leftover CPU power) with a stock OS (say, Linus&#39; pet project) and *statically-linked* compiled binaries living on a cloud storage (say, SkyDrive or 3 Ss).</p>
<p>It&#39;s still common practice to do this. &nbsp;The problems are just about the same as in Windows.</p>
<p>As long as you don&#39;t have to actually share the CRT, you&#39;re fine. &nbsp;Things to look out for: having one library fopen and its consumer fclose, same for malloc/realloc/free, etc.</p>
<p>Here&#39;s another solution, if you have the source code: export proper functions that call the CRT from the originating library, e.g. foo* create_foo() and void release_foo(foo*) (error checking elided for simplicity). &nbsp;Or have the caller allocate and free memory. &nbsp;As for files, the same goes, either export your file handling functions or have the caller implement an interface (struct with function pointers).</p>
<p>In fact, this is good advice for your own libraries, so all of you just go now and do this. &nbsp;Fast.</p>
<p>Boy, this reminds the very basics of in-process COM a lot!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1204591">
				<div id="div-comment-1204591" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dmitry_vk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204591">
			September 12, 2015 at 12:17 am</a>		</div>

		<p>&gt;if the library function allocates memory it will come off of the vc6 heap, but if the contract is for the caller to free the buffer then it will free some random memory in the application heap.</p>
<p>That&#39;s why libraries should export their own resource management functions (which would simply wrap malloc/free/etc but guarantee that their implementation comes from the same library) or be able to use user-supplied resource management functions (via function pointers; like a vtable).</p>
<p>That&#39;s pretty much a standard practice for libraries.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1204581">
				<div id="div-comment-1204581" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204581">
			September 12, 2015 at 12:41 am</a>		</div>

		<p>@ AC &amp; Random User 36183755:</p>
<p>I&#39;ve had very little trouble mixing DLLs that use VC2005, VC2008, VC2010, VC2012 &amp; VC2013 all in the same address space. They all did resource management properly (ie: they provide functions to free whatever they allocate).</p>
<p>The only gotcha I&#39;ve seen is the handling of environment variables. At least for the older versions, the CRT maintains its own cache of the environment, so if you putenv() in one version and getenv() in another then the latter does not see the change you just made. Passing global context through environment variables is, thankfully, rare and so I only had to work around this once. (I used runtime dynamic linking to call the putenv() of both versions, and also SetEnvironmentVariable since I didn&#39;t want to be guilty of the same error.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1204571">
				<div id="div-comment-1204571" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204571">
			September 12, 2015 at 7:28 am</a>		</div>

		<p>And few days ago I have finally thrown out a static .lib that was compiled back in 1997. (so it must have been older than VC6, which shipped in 1998)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1204531">
				<div id="div-comment-1204531" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizza</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204531">
			September 13, 2015 at 3:05 pm</a>		</div>

		<p>&gt; Not really nowadays, at least in the modern Linux world. Everything links to GCC&#39;s standard C++ library, even when you compile with another compiler (like LLVM&#39;s clang).</p>
<p>Unless you care about keeping pace with the latest standard, in which case you use LLVM&#39;s libc++ instead of gcc&#39;s libstdc++. And of course, in so doing you have incompatible binary representations of most objects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1204521">
				<div id="div-comment-1204521" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204521">
			September 13, 2015 at 3:45 pm</a>		</div>

		<p>@Myria And that makes it very hard to compile software which has to run on older versions of Linux. Basically if your executable has to work on eg. Ubuntu 10.04, then your build machine has to run Ubuntu 10.04 or older. While for Windows you can use your Windows 10 build machine to build an executable which will still run on Windows XP (and probably older if you want).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1204511">
				<div id="div-comment-1204511" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204511">
			September 13, 2015 at 5:25 pm</a>		</div>

		<p>@Ken: Don&#39;t forget to test all service packs also. There&#39;s no guarantees that the ABI wont change between service packs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1204501">
				<div id="div-comment-1204501" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204501">
			September 13, 2015 at 6:46 pm</a>		</div>

		<p>@640k: I thought that the compiler should be able to handle the binaries generated by one or two previous versions.</p>
<p>Afterall, those component vendors seems have no problem in releasing library packages for one or two versions of Visual Studio.</p>
<p>So I think even if the ABI can change across service packs, if you&#39;re using the latest SP level of VS to compile it, it should work fine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-1204491">
				<div id="div-comment-1204491" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204491">
			September 13, 2015 at 7:19 pm</a>		</div>

		<p>@Darran Rowe: I have an entire blog article on the history of the CRT. I hasn&#39;t updated it for final VC2015 yet though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1204441">
				<div id="div-comment-1204441" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204441">
			September 14, 2015 at 8:13 am</a>		</div>

		<p>@RS</p>
<p>Why are you building for Ubuntu 10.04? Ubuntu 10.04 has been unsupported for 4+ months.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-themann odd alt thread-odd thread-alt depth-1" id="comment-1204421">
				<div id="div-comment-1204421" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zhila' rel='external nofollow' class='url'>Zhila</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204421">
			September 14, 2015 at 8:48 am</a>		</div>

		<p>Maybe he is developing for Yahoo! Connected TV, which only supports development specifically on Ubuntu 10.04 (though they do provide a compressed VMWare image).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1204321">
				<div id="div-comment-1204321" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204321">
			September 14, 2015 at 2:48 pm</a>		</div>

		<p>@anon Ubuntu is one example, and half a year ago it was almost 5 years old and still supported. There are other systems with a much longer life span. CentOs 5 was released in 2007 and will still be supported for half a year.</p>
<p>So what if you for some reason need to support CentOs 5? Then you&#39;ll only be able to use the compiler toolchain from around 2007. That&#39;s before even the first bit of C++11 was supported. If you&#39;re lucky you may be able to install a somewhat more recent version, but the tight coupling between the OS, the C library and the specific compiler version makes this a very tricky exercise.</p>
<p>I would consider the system used on Windows a big advantage. Even if you still need to support Windows XP, you can use the most recent Visual Studio version on the most recent Windows system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1204311">
				<div id="div-comment-1204311" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204311">
			September 14, 2015 at 3:27 pm</a>		</div>

		<p>@Cesar: That was true six years ago. &nbsp;About five years ago, C++0x made copy-on-write string illegal, and ever since, treating G++&#39;s libstdc++ as if it were &quot;The One True C++ Runtime (TM)&quot; has been a losing proposition.</p>
<p>Oh the irony, that the Linux crowd who&#39;d been lecturing Windows developers that &quot;C++ has an ABI, sharing standard library objects across modules is perfectly ok&quot;&#8230; no longer did, while Windows continues to have a highly compatible ABI for a fairly large subset of C++ features (the ones used by COM).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1204281">
				<div id="div-comment-1204281" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204281">
			September 14, 2015 at 3:48 pm</a>		</div>

		<p>@@Anon: Can&#39;t you just compile a new gcc on CentOS 5? There&#39;s no tight coupling between the C compiler and the C library or the kernel; you can compile a newer C compiler using the older C library and it should just work (I&#39;ve done it before more than once, though not on CentOS). The only difficulty you might face is that newer versions of gcc are written in C++, so you might need to compile an intermediate version of gcc if it depends on newer C++ features; other than that, there&#39;s no reason it shouldn&#39;t work.</p>
<p>I agree that not being able to specify the minimum ABI on the command line like you can on MacOS (-mmacosx-version-min=10.X) is a bit of a pain, though nowadays with Docker and similar it&#39;s gotten much simpler.</p>
<p>@Ben Voigt: Well, the subset of C++ features used by COM doesn&#39;t include std::string or std::list (the two main pain points). If you used the same subset, the ABI would also be highly compatible on Linux, and it has been unchanged since they moved to the IA-64 ABI (which dictates things like the layout of vtables and the name mangling) a long time ago.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zlynx odd alt thread-odd thread-alt depth-1" id="comment-1204271">
				<div id="div-comment-1204271" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1204271">
			September 14, 2015 at 4:05 pm</a>		</div>

		<p>@Cesar: If you have to provide and support a shared object built for RHEL 5 and intended for use by developers compiling with the RHEL 5 toolchain, then you have to limit yourself to C++03 because you cannot require your customers to hack up their officially supported RHEL 5 installs. Plus code updates and bug fixes need to be drop-in replacements that don&#39;t require rebuilding the applications that use the library.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1203541">
				<div id="div-comment-1203541" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rich Skorski</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150911-00/?p=91611#comment-1203541">
			September 17, 2015 at 9:49 am</a>		</div>

		<p>The DLL wouldn&#39;t protect you from changes in class member layout if a class or class pointer is passed to the DLL though, right? Or am I missing something?</p>
<div class="post">[<em>Right. If that&#39;s a problem, you will have to make the DLL deal with it. Everything that is dependent on class layout or sizeof(class) needs to stay inside the DLL. The interface to the DLL needs to be compiler-independent, which probably means a flat C-like interface. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

