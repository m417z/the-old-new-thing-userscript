<html>
<head>
<title>If you pass enough random numbers, eventually one of them will look valid</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If you pass enough random numbers, eventually one of them will look valid</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 26, 2007 / year-entry #388</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20071026-00/?p=24683</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">One customer traced a problem they were having to the way they were calling a function similar in spirit to this one: HGLOBAL CopyClipboardData(UINT cf) { HGLOBAL hglob = NULL; HANDLE h = GetClipboardData(cf); if (h) { void *p = GlobalLock(h); if (p) { SIZE_T size = GlobalSize(h); hglob = GlobalAlloc(GMEM_FIXED, size); if (hglob) {...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
One customer traced a problem they were having to the way they
were calling a function similar in spirit to this one:
</p>
<pre>
HGLOBAL CopyClipboardData(UINT cf)
{
 HGLOBAL hglob = NULL;
 HANDLE h = GetClipboardData(cf);
 if (h) {
  void *p = GlobalLock(h);
  if (p) {
   SIZE_T size = GlobalSize(h);
   hglob = GlobalAlloc(GMEM_FIXED, size);
   if (hglob) {
    CopyMemory(hglob, p, size);
   }
   GlobalUnlock(h);
  }
 }
 return hglob;
}
</pre>
<p>
This function takes a clipboard format and
looks for it on the clipboard.
If found, it returns a copy of the data.
</p>
<p>
Looks great, huh?
</p>
<p>
The problem is that the customer would sometimes call the function as
<code>CopyClipboardData(CF_BITMAP)</code>.
The <code>CF_BITMAP</code> clipboard format stores its contents in
the form of a <code>HBITMAP</code>,
not an <code>HGLOBAL</code>.
</p>
<p>
The question from the customer:
</p>
<blockquote CLASS=q><p>
This code was written in 2002, and we are wondering why it works
"most" of the time and crashes sporadically.
We expected that the call to <code>GlobalLock</code> would fail
with an invalid parameter error, but sometimes it succeeds,
and then when we call
<code>GlobalSize</code> we crash.
Why does it crash sometimes?
</p>
</blockquote>
<p>
You already know the answer to this.
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/11/09/254441.aspx">
<code>GlobalAlloc</code> works closely with
<code>GlobalLock</code> so that <code>GlobalLock</code> can be fast</a>.
The bitmap handle returned by <code>GetClipboardData</code>
usually fails the quick tests performed by <code>GlobalLock</code>
to see whether the parameter is a fixed memory block,
in which case the <code>GlobalLock</code> must go down its slow code path,
and it is in this slow code path that the function recognizes that the
the handle is downright invalid.
</p>
<p>
But once in a rare while, the bitmap handle happens to smell just
enough like a fixed global handle that it passes the tests,
and <code>GlobalLock</code> uses its highly optimized code path
where it says,
"Okay, this is one of those fixed global handles that
<code>GlobalAlloc</code> created for me.
I can just return the pointer back."
Result:
The call to <code>GlobalLock</code> succeeds
(garbage in, garbage out),
and then you crash in the <code>GlobalSize</code> function
where it tries to use the <code>HBITMAP</code> as if it were
a <code>HGLOBAL</code> and access some of the memory block metadata,
which isn't there since the handle isn't valid after all.
</p>
<p>
The bitmap handle is basically a random number from the global
heap's point of view, since it's just some number that some other
component made up.
It's not a global handle.
If you generate enough random numbers,
eventually one of them will look like a valid parameter.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-562773">
				<div id="div-comment-562773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wesha</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071026-00/?p=24683#comment-562773">
			October 26, 2007 at 11:11 am</a>		</div>

		<p>&gt; We expected that the call to GlobalLock would fail with an invalid parameter error,</p>
<p>So excuse me, if they EXPECTED it to [always] fail, why bothering writing the then-branch??? *mortally confused*</p>
<div class="post">[<i>Remember, you have to read sentences in context. &#8220;<u>While debugging</u>, we were surprised that the call to GlobalLock was succeeding instead of failing with an invalid parameter error.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-562903">
				<div id="div-comment-562903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071026-00/?p=24683#comment-562903">
			October 26, 2007 at 8:31 pm</a>		</div>

		<p>Was there some special bitmap size and format involved which made HBITMAP look like HGLOBAL or it was truly random?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-562943">
				<div id="div-comment-562943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bw</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071026-00/?p=24683#comment-562943">
			October 27, 2007 at 7:50 am</a>		</div>

		<p>what should ordinary man do to get support like this from you Raymond (be a friend with Bill Gates maybe)? :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563003">
				<div id="div-comment-563003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IgorD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071026-00/?p=24683#comment-563003">
			October 28, 2007 at 1:13 pm</a>		</div>

		<p>OMG!</p>
<p>What a scary sentence: &quot;&#8230; usually fails the quick tests performed by GlobalLock &#8230;&quot;!?</p>
<p>I have code that looks like this:</p>
<p>void &nbsp;somefunction (HANDLE theHandle)</p>
<p>{</p>
<p>&nbsp; UINT &nbsp;retVal = GlobalFlags (theHandle);</p>
<p>&nbsp; if (retVal == GMEM_INVALID_HANDLE)</p>
<p>&nbsp; &nbsp; &nbsp;return;</p>
<p>&nbsp; &#8230;</p>
<p>}</p>
<p>Is this something I can count on? Or does it fall under &quot;quick, but unreliable&quot; tests?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563013">
				<div id="div-comment-563013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071026-00/?p=24683#comment-563013">
			October 28, 2007 at 5:25 pm</a>		</div>

		<p>IgorD: I might not be Raymond, but I&#8217;m certainly highly suspicious of your code. &nbsp;Even without the problem that Raymond is talking about here (e.g. if all the handles you&#8217;re testing for validity originally came from the global heap), I don&#8217;t think your code can possibly work reliably. &nbsp;Consider what happens, for example, when a handle that you were previously using is reallocated to some other purpose.</p>
<p>I&#8217;d definitely suggest restructuring so an invalid handle can never get this far.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563023">
				<div id="div-comment-563023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071026-00/?p=24683#comment-563023">
			October 28, 2007 at 7:48 pm</a>		</div>

		<p>In this article Raymond Chen, the creator of Windows NT, talks about&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563043">
				<div id="div-comment-563043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IgorD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071026-00/?p=24683#comment-563043">
			October 29, 2007 at 6:01 am</a>		</div>

		<p>Jules, maybe you&#8217;re right but I cant follow.</p>
<p>Most of my functions perform checks at the beginning &#8211; if pointer is not NULL or if index is within a range. Here I try to check if passed handle was really a global handle, one created with GlobalAlloc() so I can pass it few lines later to GlobalLock().</p>
<p>And that was my question &#8211; is GlobalFlags() reliable to recognize such handles and will it ALWAYS return GMEM_INVALID_HANDLE for handles that were not created with GlobalAlloc()?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563053">
				<div id="div-comment-563053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071026-00/?p=24683#comment-563053">
			October 29, 2007 at 8:45 am</a>		</div>

		<p>IgorD: The MSDN documentation is fairly explicit on what it does and what parameters it assumes: &quot;The GlobalFlags function returns information about the specified global memory object.&quot; And then in the Parameters paragraph: &quot;Handle to the global memory object. This handle is returned by either the GlobalAlloc or GlobalReAlloc function.&quot;</p>
<p>Besides being provided only for compatibility with 16-bit versions of Windows, GlobalFlags() is most definately NOT meant to be used to verify the integrity of random input. If you don&#8217;t know what you&#8217;re passing into your function it is essentially random data.</p>
<p>.t</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563063">
				<div id="div-comment-563063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071026-00/?p=24683#comment-563063">
			October 29, 2007 at 10:25 am</a>		</div>

		<p>IgorD said: &quot;Here I try to check if passed handle was really a global handle, one created with GlobalAlloc() so I can pass it few lines later to GlobalLock().&quot;</p>
<p>Let me restate what others (including Raymond) have already said.</p>
<p>You cannot check if passed handle is really a global handle. You either know it is (because <em>you</em> called the function with a handle you got from GlobalAlloc()) or you don&#8217;t. There is no way to be sure, because handle is after all just a number.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563263">
				<div id="div-comment-563263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IgorD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071026-00/?p=24683#comment-563263">
			October 29, 2007 at 2:55 pm</a>		</div>

		<p>OK, I see the message!</p>
<p>In my case, I receive a HGLOBAL handle either from GlobalAlloc() or GetClipboardData() and if it&#8217;s OK then it is OK. If it turns out to be a dud, then there&#8217;s nothing I could do about it.</p>
<p>I&#8217;ll comment out GlobalFlags() call (and leave just the NULL test) and see what happens. I suppose, nothing remarkable should happen anyway ;)</p>
<p>Thanks everybody for your patience!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-563463">
				<div id="div-comment-563463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071026-00/?p=24683#comment-563463">
			October 29, 2007 at 11:44 pm</a>		</div>

		<p>IgorD said : &quot;In my case, I receive a HGLOBAL handle either from GlobalAlloc() or GetClipboardData()&quot;</p>
<p>No you don&#8217;t.</p>
<p>You receive HGLOBAL from GlobalAlloc(), but you receive random number from GetClipboardData() (since depending on the format asked it can return HBITMAP or something else). That was the point of Raymond&#8217;s article.</p>
<p>Just blindly attempting GlobalLock() won&#8217;t save you either, because it may succeed even if you passed a value which is not HGLOBAL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-563503">
				<div id="div-comment-563503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IgorD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071026-00/?p=24683#comment-563503">
			October 30, 2007 at 9:02 am</a>		</div>

		<p>Maybe I wasn&#8217;t clear in my forst post, but I do not have one generic &nbsp;function responsible for all kinds of clipboard types, so I do not have anything like Raymond&#8217;s example.</p>
<p>In other words, since I call GetClipboardData() only with my own types recieved from RegisterClipboardFormat() and all I send to SetClipboardData() are global handles I think I&#8217;m safe.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

