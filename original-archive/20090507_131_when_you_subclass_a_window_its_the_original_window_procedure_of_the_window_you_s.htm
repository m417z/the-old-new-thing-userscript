<html>
<head>
<title>When you subclass a window, it's the original window procedure of the window you subclass you have to call when you want to call the original window procedure</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When you subclass a window, it&#8217;s the original window procedure of the window you subclass you have to call when you want to call the original window procedure</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 7, 2009 / year-entry #132</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>23</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">When you subclass a window, you set the window procedure to a function of your choosing, and you remember the original window procedure so you can pass it to the CallWindowProc function when your subclass function wants to pass the message to the original window procedure. For example, if you subclass a window like this:...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
When you subclass a window, you set the window procedure
to a function of your choosing, and you remember the original
window procedure so you can pass it to the <code>CallWindowProc</code>
function when your subclass function wants to pass the message to the
original window procedure.
For example, if you subclass a window like this:
</p>
<pre>
SubclassWidgetDialog(HWND hdlgWidget)
{
  HWND hwndButton = GetDlgItem(hdlgWidget, ...);
  wndProcOrig = (WNDPROC)
     SetWindowLongPtr(hwndButton, GWLP_WNDPROC, (LONG_PTR)SubclassWndProc);
  // -or-
  // wndprocOrig = SubclassWindow(hwndButton, SubclassWndProc);
  ...
}
</pre>
<p>
then your subclass function should go something like this:
</p>
<pre>
LRESULT CALLBACK SubclassWndProc(
    HWND hwnd, UINT wm, WPARAM wParam, LPARAM lParam)
{
  switch (wm) {
  ...
  default:
    return CallWindowProc(<font COLOR=blue>wndprocOrig</font>, hwnd, wm, wParam, lParam);
  }
}
</pre>
<p>
The window procedure you pass to <code>CallWindowProc</code>
is the one which was the window procedure of that window
before you subclassed it,
not the window procedure from some other window.
In the same way that when you create a derived C++ class,
you pass method calls along to your base class,
not to somebody else's base class:
</p>
<pre>
class DerivedClass : public BaseClass {
 ...
 // override base class: do some extra stuff
 int Method(int param)
 {
  ExtraDerivedStuff();
  return <font COLOR=blue>BaseClass::Method(param)</font>;
 }
};
</pre>
<p>
When you are finished with your customization in
<code>DerivedClass::Method</code>, you let the base class
do what normally would have happened if you hadn't overridden
the method in the first place by calling
<code>BaseClass::Method</code> and not by calling
<code>SomeOtherClass:Method</code>.
</p>
<p>
This sounds blatantly obvious, but you'd be surprised how often
people mess this up.
For example,
if you subclass multiple widget dialogs,
you have to save the old window procedure in a different place
for each one,
because each button may have had a different window procedure
by the time you got around to subclassing it.
For example, one of them might be a plain button, whereas another
of them was subclassed in order to provide a tooltip.
If you make <code>wndprocOrig</code> a global or static variable,
then you're assuming that every widget button has the same
window procedure.
You are subclassing a window and forgetting to handle the case
where the window is already subclassed!
You forgot that somebody else could have done exactly what you're doing.
</p>
<p>
There is a popular commercial program that comes preinstalled
on many computers which creates a
common file open dialog box and subclasses both the file name combo box
and the file type combo box,
and figures that, well, since they're both combo boxes,
they must have the same window procedure, right?
Unfortunately, there's no guarantee that they do,
because the common file dialog is free to subclass them in order to
provide custom behavior like autocomplete.
It so happens that the program grabs the window procedure from
the subclassed combo box window and uses it for all combo boxes.
(These are probably the same folks who would have called the
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/10/15/55296.aspx">
<code>BOZOSLIVEHERE</code> function</a>
if given the chance.)
</p>
<p>
This makes for very exciting crashes when they take the original
window procedure from the subclassed combo box
and use it for the other, unsubclassed, combo box.
The subclass window procedure
finds itself handed a window <i>that it never subclassed</i>.
As a result, it not only can't perform its own subclass behavior,
but can't even just fall back and say "Well, I can't do my custom stuff,
so I'll just forward to the original window procedure"
since it can't figure out what the original window procedure was either.
It's the window manager version of writing this strange C++ code:
</p>
<pre>
class SiblingClass : public BaseClass { ... };
class DerivedClass : public BaseClass {
 ...
 // override base class: do some extra stuff
 // then pass method to the WRONG base class
 int Method(int param)
 {
  ExtraDerivedStuff();
  <i>return <font COLOR=blue>((SiblingClass*)this)-&gt;Method(param)</font></i>;
 }
};
</pre>
<p>
When you subclass a window, and you want to call the original window
procedure, make sure you call the correct original window procedure:
The one that was the window procedure of that window
before you subclassed it.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-733593">
				<div id="div-comment-733593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Criffer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-733593">
			May 7, 2009 at 10:13 am</a>		</div>

		<p>&gt; SetWindowLongPtr(hwndButton, (LONG_PTR)SubclassWndProc);</p>
<p>Should be</p>
<p>SetWindowLongPtr(hwndButton, GWLP_WNDPROC, (LONG_PTR)SubclassWndProc);</p>
<div class="post">[<i>Fixed, thanks. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-733623">
				<div id="div-comment-733623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bahbar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-733623">
			May 7, 2009 at 10:36 am</a>		</div>

		<p>That&#8217;s why you don&#8217;t do C casts in c++.</p>
<p>C++ makes it harder (here) to do the wrong thing (not quite that hard in a lot of cases). the WIN32 API doesn&#8217;t. There&#8217;s nothing telling me that I screwed up which method I called.</p>
<p>Yes, users should know better. But then again, they don&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-733683">
				<div id="div-comment-733683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.henke37.cjb.net/' rel='external nofollow' class='url'>Henrik Andersson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-733683">
			May 7, 2009 at 12:21 pm</a>		</div>

		<p>Of course, it&#8217;s extra fun with runtime manipulation of the inheritance chain of anything.</p>
<p>It&#8217;s possible to do similar stuff in PHP with the runkit extension that happens to be described as &quot;For all those things you&#8230;. probably shouldn&#8217;t have been doing anyway&#8230;.&quot;.</p>
<p>I am not saying that it&#8217;s bad to be able to subclass windows. Just that it&#8217;s the kind of stuff that takes a certain amount of insanity to pull of properly.</p>
<p>Also, there is the fun when people screw up the chain in other ways, such as pulling out the middle link without updating the other links. If the window procedure have been resubclassed, you can no longer unsubclass the window. But you where not going to do that anyway, right? Right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-733703">
				<div id="div-comment-733703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-733703">
			May 7, 2009 at 1:02 pm</a>		</div>

		<p>MS lawyers made you too shy. It&#8217;s time to drag those bogosity champions to the hall of shame. World would be a better place if Windows had an automatically updated database of buggy or just plain bad software and drivers, and when it sees one, it would shout to the user: &quot;Hey! You don&#8217;t want to run this crap. If you want to know, here is why: &quot;blablbabla&quot;. Contact the vendor for a fix.&quot; That would keep ISVs in line. And shift the blame!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-733723">
				<div id="div-comment-733723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-733723">
			May 7, 2009 at 2:01 pm</a>		</div>

		<p>Except when 80% (or more) of the programs users use annoy the user with that prompt. That&#8217;s a great way to lose a customer base. Operating systems just need to deal somehow, in the interest of the user, and Windows does a pretty good job.</p>
<p>Pre-emptive snarky response: UAC prompts are a great way to lose a customer base.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-733773">
				<div id="div-comment-733773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-733773">
			May 7, 2009 at 2:58 pm</a>		</div>

		<p>John,</p>
<p>Or a greate way to support the Windows customers. Suppose he starts his obscure (or not) software, and gets the prompt: Hey, there is an updated version on the ISV website now, update it or you can get hit by JScript exploit in a well known document reader.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-733853">
				<div id="div-comment-733853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-733853">
			May 7, 2009 at 5:07 pm</a>		</div>

		<p>Btw &#8211; why do you have to call CallWindowProc() to call the previous function? Why can&#8217;t you just call it directly? Last I checked, function pointers worked just fine in C and C++.</p>
<div class=post>[<i>Because <a href="http://blogs.msdn.com/oldnewthing/archive/2003/12/01/55900.aspx" rel="nofollow">it&#8217;s not actually a function pointer</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-733883">
				<div id="div-comment-733883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-733883">
			May 7, 2009 at 5:35 pm</a>		</div>

		<p>Vilx,</p>
<p>Take a look at the MSDN article: CallWindowProc deals with various WndProc-related issues that would be tricky or tedious to do yourself. &nbsp;For instance, it will convert message arguments between Unicode and OEM for you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-733913">
				<div id="div-comment-733913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">blah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-733913">
			May 7, 2009 at 7:47 pm</a>		</div>

		<p>It&#8217;s sad that the &#8216;official&#8217; subclassing mechanism is nothing more than hooking into it the h4x0r way. If it&#8217;s not done in stack order, all bets are off.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-733933">
				<div id="div-comment-733933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Liam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-733933">
			May 7, 2009 at 8:23 pm</a>		</div>

		<p>Criffer</p>
<p>&quot;&gt; SetWindowLongPtr(hwndButton, (LONG_PTR)SubclassWndProc);</p>
<p>Should be</p>
<p>SetWindowLongPtr(hwndButton, GWLP_WNDPROC, (LONG_PTR)SubclassWndProc);&quot;</p>
<p>Unfortunately that will cause a warning on a 32 bit build</p>
<p>&quot;warning C4244: &#8216;argument&#8217; : conversion from &#8216;LONG_PTR&#8217; to &#8216;LONG&#8217;, possible loss of data&quot;</p>
<p>Instead it requires a little hack on 32 bit builds of (LONG)(LONG_PTR)ptr.</p>
<p>Also when subclassing a window and using teh WM_NCCREATE message there is another error you should avoid. <a rel="nofollow" target="_new" href="http://www.liamdevine.co.uk/blog/2009/03/win32-window-title/" rel="nofollow">http://www.liamdevine.co.uk/blog/2009/03/win32-window-title/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-madq42 even thread-even depth-1" id="comment-733753">
				<div id="div-comment-733753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MadQ1' rel='external nofollow' class='url'>MadQ1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-733753">
			May 7, 2009 at 2:40 pm</a>		</div>

		<p>Bah, subclassing is way too complicated. Just set up a trampoline at InternalCallWinProc, which will give you the correct window procedure to call. *grinning, ducking, and running like hell!*</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-733793">
				<div id="div-comment-733793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-733793">
			May 7, 2009 at 3:33 pm</a>		</div>

		<p>I&#8217;m guessing that&#8217;s the same popular, commercial software that&#8217;s preinstalled on a lot of PCs which ignores the results of QueryInterface calls to its container and blindly calls whatever (null) pointer it gets back. (Because IE is the only ActiveX host in the world and future versions of IE will never change which interfaces they offers, so why should any ActiveX control waste time and bytes checking an HRESULT!?)</p>
<p>The one that&#8217;s made by a company that, when you tell them about this bug in their software (which you&#8217;ve already worked around yourself but figure they might want to fix for other people), tells you to pay for a support contract before they&#8217;ll lift a finger.</p>
<p>Sometimes I wonder if there&#8217;s anything this app *doesn&#8217;t* do wrong at some point in its miserable existence in the memory of our machines. :-D</p>
<p>Still, it&#8217;s gotta be difficult for them to devote much time to getting these things right when they are still desperately, day after day, month after month, trying to find the &quot;64-bit&quot; switch in whichever IDE/compiler they use. </p>
<p>Ahem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-734013">
				<div id="div-comment-734013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Naveen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-734013">
			May 8, 2009 at 1:21 am</a>		</div>

		<p>I think every one should use the SetWindowSubclass() function instead of the above technique.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-734023">
				<div id="div-comment-734023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-734023">
			May 8, 2009 at 4:07 am</a>		</div>

		<p>@Naveen:</p>
<p>That only works if you&#8217;re targeting XP or above. &nbsp;Some of us still try to let programs run on older versions of Windows (they&#8217;re not totally dead yet!).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson even thread-even depth-1" id="comment-734043">
				<div id="div-comment-734043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-734043">
			May 8, 2009 at 4:30 am</a>		</div>

		<p>@Liam:</p>
<p>Doing it that way removes the warning but breaks 64-bit builds, or requires you to have a load of #ifdefs and separate code for 32-bit and 64-bit. I think it&#8217;s better to put something on the previous line to suppress the warning (for the next line only). e.g.</p>
<p>#pragma warning(suppress:4244) // spurious warning due to stupid Win32 SDK header definition.</p>
<p>SetWindowLongPtr(hwndDlg, DWLP_USER, reinterpret_cast&lt;LONG_PTR&gt;(pcd));</p>
<p>Alternatively, you could include a header in all files which (in one place only) uses an #ifdef to redefine SetWindowLongPtrW/A on Win32 to something that doesn&#8217;t cause the error. I don&#8217;t have the proper code to hand but it should be easy to find in a search if you don&#8217;t like the #pragma method above. I think this came up in a previous ONT comments thread, or maybe even a post by Raymond.</p>
<p>(I&#8217;m surprised the SDK still hasn&#8217;t been updated to fix the problem. Or maybe it has as my SDK is still an early Vista version.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-733983">
				<div id="div-comment-733983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.shog9.com/' rel='external nofollow' class='url'>Shog9</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-733983">
			May 7, 2009 at 9:30 pm</a>		</div>

		<p>Liam: I&#8217;d wager that it&#8217;s a bad plan to eat (fail to forward) *any* messages when you&#8217;re subclassing a window, UNLESS you know for certain that your handling of the message should completely override the default.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-734053">
				<div id="div-comment-734053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Liam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-734053">
			May 8, 2009 at 6:00 am</a>		</div>

		<p>Leo I was not aware suppress worked for this warning number, as it does not work for all less than six thousand. Yes it would brake a 64 bit build but I use a macro to cast which looks something like</p>
<p>#ifdef _WIN64</p>
<p>#  define CAST_TYPE (LONG_PTR)</p>
<p>#else</p>
<p>#  define CAST_TYPE (LONG)(LONG_PTR)</p>
<p>#endif</p>
<p>I think it also comes with a comment not to dissimilar to your example :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-734063">
				<div id="div-comment-734063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-734063">
			May 8, 2009 at 6:42 am</a>		</div>

		<blockquote><p>
  Btw &#8211; why do you have to call CallWindowProc() to call the previous function? Why can&#8217;t you just call it directly? Last I checked, function pointers worked just fine in C and C++.
</p></blockquote>
<p>[Because it&#8217;s not actually a function pointer. -Raymond]</p>
<p>Although it used to be ;-) I had some code that called the class window proc as a function pointer. (I had previously ensured that the windows that I subclassed had not already been subclassed.) To port my code to run under Windows 95 it was only necessary to correct my function pointer into a call to CallWindowProc, although it would still occasionally crash in some common dialogs for no apparent reason.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-734103">
				<div id="div-comment-734103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.csh.rit.edu/~ryanw' rel='external nofollow' class='url'>Ryan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-734103">
			May 8, 2009 at 9:52 am</a>		</div>

		<p>What about SetWindowSubclass and DefSubclassProc?</p>
<p>I call this to subclass an EDIT control:</p>
<p>SetWindowSubclass(hWndStatus, StatusEdit, 0, 0);</p>
<p>And then call this at the end of my subclass proc:</p>
<p>return DefSubclassProc(hWnd, message, wParam, lParam);</p>
<p>I am specifically using Common Controls 6, is this ok? I got the info from MSDN section on Subclassing Controls:</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/bb773183" rel="nofollow">http://msdn.microsoft.com/en-us/library/bb773183</a>(VS.85).aspx</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-734233">
				<div id="div-comment-734233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.starkeith.net/coredump/' rel='external nofollow' class='url'>Keithius</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-734233">
			May 8, 2009 at 1:02 pm</a>		</div>

		<p>&gt; This sounds blatantly obvious, but you&#8217;d be surprised how often people mess this up.</p>
<p>No, sadly I wouldn&#8217;t. I&#8217;ve been reading your blog for too long now &#8211; now I *expect* people to mess up the blatantly obvious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-734403">
				<div id="div-comment-734403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clovis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-734403">
			May 9, 2009 at 5:41 am</a>		</div>

		<p>Did someone have to write some sort of nasty compatibility shim for Popular Commercial Program, or does it still crash to this day?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-734503">
				<div id="div-comment-734503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-734503">
			May 10, 2009 at 1:44 am</a>		</div>

		<p>hum.. I thought that SetWindowLongPtr warning was fixed in a newer platform SDK.</p>
<p>It&#8217;s simply an error in that&#8217;s macro definition that triggers a false w64 compatibility warning, you should redefine that macro rather than sprinkle casts or #ifdef all over your code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-734583">
				<div id="div-comment-734583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090507-00/?p=18333#comment-734583">
			May 10, 2009 at 5:21 pm</a>		</div>

		<p>Ryan: You don&#8217;t have to worry about this if you use SetWindowSubclass.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

