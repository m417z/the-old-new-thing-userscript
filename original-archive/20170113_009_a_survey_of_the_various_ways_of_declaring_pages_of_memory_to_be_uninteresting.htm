<html>
<head>
<title>A survey of the various ways of declaring pages of memory to be uninteresting</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A survey of the various ways of declaring pages of memory to be uninteresting</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 13, 2017 / year-entry #10</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170113-00/?p=95185</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Let me tell you how much I don't care.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The list of ways a program can declare pages of memory to be uninteresting
seems to be growing steadily.
Let's look at what we have so far today.
</p>
<p>
The most old-fashioned way of declaring a page to be uninteresting
is to free it.
The catch with that is that freeing the memory with
the <code>Virtual&shy;Free</code> function
and the
<code>MEM_RELEASE</code> flag
frees the entire allocation, not individual pages.
If you allocated a
64<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090611-00/?p=17933">KB</a>
chunk of memory,
then you have to release the whole thing.
You can't release half of it.
</p>
<p>
But all is not lost.
Because while you cannot free a single page from a
larger allocation,
you <i>can</i> decommit it,
which is almost as good.
Decommitting page is like freeing it, except that the address
space is still reserved.
To decommit a page,
call
<code>Virtual&shy;Free</code> with the
<code>MEM_DECOMMIT</code> flag.
</p>
<p>
For quite some time, those were the only tools you had available.
Around the Windows NT&nbsp;4 era,
a new trick arrived on the scene:
You could
<code>Virtual&shy;Unlock</code> memory that was already unlocked
in order to remove it from your working set.
This was a trick, because it took what used to be a programming
error and gave it additional meaning,
but in a way that didn't break backward compatibility
because the contractual behavior of the memory did not change:
The contents of the memory remain valid and the program is still
free to access it at any time.
The new behavior is that unlocking unlocked memory also takes it out
of the process's working set,
so that it becomes a prime candidate for being paged out
and used to satisfy another memory allocation.
</p>
<p>
The fact that it preserved contractual behavior means that
you could scatter
<code>Virtual&shy;Unlock</code> calls randomly throughout the
program and have no effect on correctness.
It might run slower (or faster), but it will still run.
</p>
<p>
Around the Windows 2000 era,
the
<code>MEM_RESET</code>
flag was added to
<code>Virtual&shy;Alloc</code>.
If you pass this flag, this tells the memory manager
that the memory in question is no longer interesting
to your program, and the memory manager is free to discard
it without saving the contents.
The memory itself remains accessible to the program,
and doing so before the memory gets discarded will read
the old values.
On the other hand, if the memory manager decides that it needs
to evict the memory (in order to satisfy a memory request
elsewhere),
it will throw away the contents without saving it,
and then turn the page into a demand-zero-initialized page.
Later, if your program tries to access the memory,
it will see a page full of zeroes.
</p>
<p>
Windows&nbsp;8 added the
<code>MEM_RESET_UNDO</code> flag
which says,
"Hey, um, I changed my mind. I don't want you to discard
the contents of the memory after all."
If the memory hasn't yet been discarded, then it is "rescued"
and behaves like normal memory again.
But if the memory has already been discarded,
then the memory manager will say,
"Sorry, too late."
</p>
<p>
And then at some point, I don't know exactly when,
my colleague Adrian added code to check if a page of memory
is all zeroes before paging it out,
and turning it into a demand-zero-initialized page if so.
So another way to say that you are not interested in a page
of memory is to explicitly zero it.
That causes it to turn into a demand-zero-initialized page
at page-out time,
which avoids the I/O of writing a page full of zeroes to disk.
This is another one of those things that has no effect on the
programming model; it's just an optimization.
If you are running on a system that doesn't perform this
optimization, everything still behaves the same as before,
just a little slower.
</p>
<p>
Note that writing the zeroes to the page does have its own
side effects.
(Well, aside from the obvious side effect of, y'know,
<i>filling the page with zeroes</i>.)
Writing to the page will set both the Dirty and Accessed
bits in the page table,
which will bring it into the process's working set,
and therefore will reduce its likelihood of being selected
for eviction.
In other words, zeroing out the page "resets the clock"
on the eviction calendar.
Therefore, if you're going to do this, do it as soon as you're
done with the memory.
</p>
<p>
In Windows 8.1 we got the function
<code>Offer&shy;Virtual&shy;Memory</code>
which mixes in a few new wrinkles.
First of all, when you call
<code>Offer&shy;Virtual&shy;Memory</code>,
you pass a flag that says how much you don't care about
this memory:
You can say that you totally don't care,
you mostly don't care,
you sort of don't care,
or you have no opinion on the concept of caring.
</p>
<p>
Okay, formally, what you're doing is saying how
to prioritize the memory for discarding.
At one extreme,
you can make it a prime candidate for discarding.
At the other extreme, you can say,
"No special priority here.
Just prioritize it according to the standard rules,
as if it were plain old regular process memory."
</p>
<p>
The other wrinkle to the
<code>Offer&shy;Virtual&shy;Memory</code>
function is that once you offer the memory,
it is no longer accessible to your program.
Trying to access memory that has been offered will take
an access violation.
</p>
<p>
If you later decide that you want the memory back,
you can call 
<code>Reclaim&shy;Virtual&shy;Memory</code>,
which will try to bring the memory back into your process.
If it fails, then the contents are garbage.
</p>
<p>
There's also a companion function
<code>Discard&shy;Virtual&shy;Memory</code>
which forces an immediate discard
and leaves the page contents undefined.
It's the equivalent of
<code>Offer&shy;Virtual&shy;Memory</code>,
and then calling
<code>Reclaim&shy;Virtual&shy;Memory</code>,
and forcing the reclaim to fail.
</p>
<p>
Okay, so here we go with the table.
</p>
<table BORDER="1" STYLE="border-collapse: collapse" CELLPADDING="3">
<tr>
<th></th>
<th>Virtual&shy;Free +<br>MEM_RELEASE</th>
<th>Virtual&shy;Free +<br>MEM_DECOMMIT</th>
<th>Virtual&shy;Unlock</th>
<th>Virtual&shy;Alloc +<br>MEM_RESET</th>
<th>Zero&shy;Memory</th>
<th>Discard&shy;Virtual&shy;Memory</th>
<th>Offer&shy;Virtual&shy;Memory</th>
</tr>
<tr>
<th>Is address space still reserved?</th>
<td ALIGN="center">N</td>
<td ALIGN="center">Y</td>
<td ALIGN="center">Y</td>
<td ALIGN="center">Y</td>
<td ALIGN="center">Y</td>
<td ALIGN="center">Y</td>
<td ALIGN="center">Y</td>
</tr>
<tr>
<th>Is memory accessible?</th>
<td ALIGN="center">N</td>
<td ALIGN="center">N</td>
<td ALIGN="center">Y</td>
<td ALIGN="center">Y</td>
<td ALIGN="center">Y</td>
<td ALIGN="center">Y</td>
<td ALIGN="center">N</td>
</tr>
<tr>
<th>Is memory removed from working set?</th>
<td ALIGN="center">Y</td>
<td ALIGN="center">Y</td>
<td ALIGN="center">Y</td>
<td ALIGN="center">N<span><span>&sup1;</span></span></td>
<td ALIGN="center">N</td>
<td ALIGN="center">Y</td>
<td ALIGN="center">Y</td>
</tr>
<tr>
<th>Can control eviction priority?</th>
<td ALIGN="center">N</td>
<td ALIGN="center">N</td>
<td ALIGN="center">N</td>
<td ALIGN="center">N</td>
<td ALIGN="center">N</td>
<td ALIGN="center">N</td>
<td ALIGN="center">Y</td>
</tr>
<tr>
<th>Are previous contents recoverable?</th>
<td ALIGN="center">N</td>
<td ALIGN="center">N</td>
<td ALIGN="center">Y</td>
<td ALIGN="center">Y until eviction</td>
<td ALIGN="center">N</td>
<td ALIGN="center">N</td>
<td ALIGN="center">Y until eviction</td>
</tr>
<tr>
<th>Contents if recovery failed</th>
<td ALIGN="center">N/A</td>
<td ALIGN="center">N/A</td>
<td ALIGN="center">N/A</td>
<td ALIGN="center">Zeroes</td>
<td ALIGN="center">Zeroes</td>
<td ALIGN="center">Garbage</td>
<td ALIGN="center">Garbage</td>
</tr>
</table>
<p>
<b>Bonus chatter</b>:
The flip side of discarding memory is prefetching it.
I've
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20160225-00/?p=93091">
discussed
the
<code>Prefetch&shy;Virtual&shy;Memory</code>
before</a>,
so I'll leave it at a mention this time.
(And here's a
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20120601-00/?p=7483">
non-mention</a>.)
</p>
<p>
&sup1;
The fact that
<code>MEM_RESET</code> does not remove the page
from the working set is not actually mentioned
in the documentation for the
<code>MEM_RESET</code> flag.
Instead, it's mentioned in the documentation
for the
<code>Offer&shy;Virtual&shy;Memory</code>
function,
and in a sort of backhanded way:
</p>
<blockquote CLASS="q"><p>
Note that offering and reclaiming virtual memory is similar to
using the MEM_RESET and MEM_RESET_UNDO memory allocation flags,
except that
<b>Offer&shy;Virtual&shy;Memory</b>
removes the memory from the process working set
and restricts access to the offered pages until they are reclaimed.
</p>
</blockquote>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1279985">
				<div id="div-comment-1279985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonimoose</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170113-00/?p=95185#comment-1279985">
			January 13, 2017 at 9:25 am</a>		</div>

		<p>What is unclear to me about all this is why you would want to use most of these options. 99% of the time I would think you either want the memory or you don&#8217;t. I can see a few cases where  you could use the old pages as a cache for data you can recreate and are unsure if you are going to want again.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1280105">
				<div id="div-comment-1280105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pseudonym</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170113-00/?p=95185#comment-1280105">
			January 14, 2017 at 3:54 am</a>		</div>

		<p>I think that&#8217;s precisely it. Some data is inherently cache-like, in the sense that it can be recreated. Some programs, if they want to be good citizens, would like to indicate that cache-like data can be dumped if the OS really needs to free up memory. Most Windows programs are not good citizens, of course&#8230;</p>
<p>Having said that, I&#8217;d bet that whoever asked for OfferVirtualMemory to be added wasn&#8217;t an application. More likely a service or a driver.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1279995">
				<div id="div-comment-1279995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170113-00/?p=95185#comment-1279995">
			January 13, 2017 at 9:26 am</a>		</div>

		<p>So I&#8217;m a bit slow, but I read the pre-fetch for memory mapped files .. What would the use for some of the other functionality be ? (ie why tell the OS you don&#8217;t want this page or that page of memory any more ? If you&#8217;re writing your own memory manager/cache/pool ? )</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mngoldeneagle odd alt depth-2 parent" id="comment-1280015">
				<div id="div-comment-1280015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170113-00/?p=95185#comment-1280015">
			January 13, 2017 at 11:31 am</a>		</div>

		<p>I imagine this would be useful for garbage collectors and other applications that do advanced heap management.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1280055">
				<div id="div-comment-1280055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170113-00/?p=95185#comment-1280055">
			January 13, 2017 at 2:39 pm</a>		</div>

		<p>*ding*ding*ding* We have a winner!</p>
<p>Garbage collection + paging -&gt; thrashing unless the GC can tell the memory manager to not care anymore.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1280025">
				<div id="div-comment-1280025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170113-00/?p=95185#comment-1280025">
			January 13, 2017 at 12:26 pm</a>		</div>

		<p>Where does the gargbage come from in those cases? Hopefully not from some other process&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1280065">
				<div id="div-comment-1280065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170113-00/?p=95185#comment-1280065">
			January 13, 2017 at 2:45 pm</a>		</div>

		<p>I believe that by &#8220;garbage&#8221; he means &#8220;gone to the great ramdisk in the sky&#8221;.<br />
 Whatever you&#8217;d put there before has been destroyed, and you get back a demand-zero&#8217;d page.</p>
<p>Though even on a modern machine some memory is insecure &#8211; many (possibly most) GPU drivers don&#8217;t zero memory on allocation, so it&#8217;s relatively easy to accidentally get a texture memory that contains private data like emails from Outlook!<br />
With tecture data the original format and layout are rather simple to work out as well because there are so few possibilities.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1280075">
				<div id="div-comment-1280075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170113-00/?p=95185#comment-1280075">
			January 13, 2017 at 3:33 pm</a>		</div>

		<p>I think the only guarantee is that the page you get back won&#8217;t contain data from other processes.  That doesn&#8217;t rule out random data taken from your own process.  (I have no idea whether Windows actually does that, I&#8217;m just saying I don&#8217;t think it would violate the contract.)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1280115">
				<div id="div-comment-1280115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170113-00/?p=95185#comment-1280115">
			January 14, 2017 at 4:03 am</a>		</div>

		<p>I doubt there&#8217;s even that guarantee. If it doesn&#8217;t say it&#8217;ll give you your own garbage, there&#8217;s no reason to assume it will; just assume it&#8217;s like an uninitialized stack variable and can contain anything at all. One of the features of the new APIs is that they maximize performance; you can zero or not zero as you need to, or try to read whatever was there. Your choice.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1280125">
				<div id="div-comment-1280125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170113-00/?p=95185#comment-1280125">
			January 15, 2017 at 8:10 pm</a>		</div>

		<p>If it gave you pages from a process you&#8217;re not entitled to have access to, that would violate the security model.  I guess that&#8217;s not technically the same thing as a violation of the API contract, though.  From the programmer&#8217;s point of view it doesn&#8217;t make any difference, garbage is garbage and if your program&#8217;s behaviour varies depending on what content you&#8217;re given, that&#8217;s a bug.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even depth-4 parent" id="comment-1280135">
				<div id="div-comment-1280135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170113-00/?p=95185#comment-1280135">
			January 16, 2017 at 2:50 am</a>		</div>

		<p>Well technically I guess it could also give you memory from other processes of the same user (and integrity level) without it being a breach of security, couldn&#8217;t it?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1280285">
				<div id="div-comment-1280285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170113-00/?p=95185#comment-1280285">
			January 17, 2017 at 2:06 pm</a>		</div>

		<p>True.  Although I suspect that would be a layering violation, because it means the memory manager would have to know about the security model.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1280145">
				<div id="div-comment-1280145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Austin Donnelly (MSFT)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170113-00/?p=95185#comment-1280145">
			January 16, 2017 at 6:33 am</a>		</div>

		<p>Yukkuri&#8217;s questions is still a good one: in practice, where does the garbage come from?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1280165">
				<div id="div-comment-1280165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170113-00/?p=95185#comment-1280165">
			January 16, 2017 at 5:33 pm</a>		</div>

		<p>The Unix counterpart is called posix_madvise(2) (unless you just use free(3)).  It does a number of things in this vein, including both eviction and prefectching, as well as advising on random vs. sequential access (i.e. turning cache read ahead off or increasing it).  However, it has no impact on program semantics (i.e. any implementation must be semantically equivalent to the null implementation).  Not all implementations actually bother with all of the functionality POSIX specifies, which has no effect on correctness and is therefore explicitly allowed.  Linux in particular ignores (via the glibc wrapper) the &#8220;please evict this memory&#8221; signal because the underlying syscall has different semantics (see below).</p>
<p>Unix also has madvise(2), but there are a lot of different implementations with varying semantics, and some systems don&#8217;t have it at all, so the POSIX people just threw their hands up and invented a new system call with &#8220;posix&#8221; in front of it as a distinguishing mark.  madvise(2) still exists on Linux (and probably other systems) with semantics that do affect correctness.  It can also be used to do a variety of surprisingly weird things to your memory such as case-by-case vfork(2)-like semantics.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1280455">
				<div id="div-comment-1280455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">felixb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170113-00/?p=95185#comment-1280455">
			January 18, 2017 at 3:24 pm</a>		</div>

		<p>&gt; Windows 8 added the MEM_RESET_UNDO flag which says, &#8220;Hey, um, I changed my mind. I don&#8217;t want you to discard the contents of the memory after all.&#8221; If the memory hasn&#8217;t yet been discarded, then it is &#8220;rescued&#8221; and behaves like normal memory again. But if the memory has already been discarded, then the memory manager will say, &#8220;Sorry, too late.&#8221; </p>
<p>What inspired this?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1280595">
				<div id="div-comment-1280595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170113-00/?p=95185#comment-1280595">
			January 19, 2017 at 9:06 am</a>		</div>

		<p>If the cache is still valid, why not use it?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

