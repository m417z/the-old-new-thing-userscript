<html>
<head>
<title>The forgotten common controls: The ShowHideMenuCtl function</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The forgotten common controls: The ShowHideMenuCtl function</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 10, 2007 / year-entry #248</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20070710-00/?p=26083</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>17</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The ShowHideMenuCtl function is one of those functions everybody tries to pretend doesn't exist. You thought MenuHelp was bad; ShowHideMenuCtl is even worse. The idea behind ShowHideMenuCtl was that you had a window with a menu as well as controls, and some of the menu items were checkable, indicating whether the corresponding control should be...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The <code>ShowHideMenuCtl</code> function is one of those
functions everybody tries to pretend doesn't exist.
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/06/08/622194.aspx">
You thought <code>MenuHelp</code> was bad</a>;
<code>ShowHideMenuCtl</code> is even worse.
</p>
<p>
The idea behind <code>ShowHideMenuCtl</code> was that you
had a window with a menu as well as controls,
and some of the menu items were checkable,
indicating whether the corresponding control should be shown.
For example, on your View menu you might have options
named Toolbar or Status Bar.
If the user checks Toolbar, then the toolbar is shown in the main window;
if the user unchecks Toolbar, then the toolbar is hidden.
</p>
<p>
The parameters to the <code>ShowHideMenuCtl</code> function are
a window (the window on which you want to operate),
a menu identifier (the menu item you wish to toggle),
and a mysterious array of integers.
Everything hangs on that mysterious array of integers,
which takes the following form (expressed in pseudo-C):
</p>
<pre>
struct MENUCONTROLINTS {
 int idMenu;
 int idControl;
};

struct SHOWHIDEMENUCONTROLINTS {
 int idMainMenu;
 HMENU hmenuMain;
 MENUCONTROLINTS rgwMenuControl[];
};
</pre>
<p>
The <code>MENUCONTROLINTS</code> structure is easier to describe.
It merely establishes the correspondence between a menu item and
the control that will be shown or hidden.
(Exercise: Why do we need two integers?
Why can't we just give the menu item and the control the same ID?)
The array of <code>MENUCONTROLINTS</code> structures is terminated
by a pair whose <code>idMenu</code> is zero.
</p>
<p>
The tricky bit is the first two entries,
<code>idMainMenu</code> and <code>hmenuMain</code>.
The <code>hmenuMain</code> is the handle to the main menu for
the window, and
the <code>idMainMenu</code> is the item on the menu corresponding
to the "Hide menu" entry on the main menu.
(That's why <code>hmenuMain</code> need to be passed explicitly.
We would normally use <code>GetMenu(hwnd)</code> to get the handle
to the main menu, but if we've removed it, then <code>GetMenu(hwnd)</code>
will return <code>NULL</code>.)
If you don't want to have a "Hide menu" option,
you can just put a dummy value in the <code>idMainMenu</code> slot
that doesn't correspond to any menu item.
(The value <code>-1</code> is probably most convenient for this.
Don't use zero since it terminates the list!)
</p>
<p>
When you call the <code>ShowHideMenuCtl</code> function,
it searches for the menu item you specified and toggles the
check mark next to that item.
What happens next depends on what type of item was found.
</p>
<ul>
<li>If the item is <code>idMainMenu</code>, then the main menu is
attached to or removed from the window (by using the
<code>SetMenu</code> function, of course),
corresponding to the check box.</p>
<li>If the item is <code>idMenu</code>, then the corresponding
control is shown or hidden (by using the <code>ShowWindow</code>
function, of course),
corresponding to the check box.
</ul>
<p>
That's all there is to it.
The rest is up to you.
For example, when a control is shown or hidden,
it's still up to your program to relayout the visible controls
to account for the new window visibility state.
For example, if the user shows the toolbar,
then the other controls need to move out of the way to make room
for the toolbar.
The <code>ShowHideMenuCtl</code> function can't do this for you
since it has no idea what your window layout is.
</p>
<p>
Let's put this information into practice.
Start with our
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/07/23/54576.aspx">
scratch program</a>
and make the following changes;
</p>
<pre>
HMENU g_hmenuMain;
INT rgiMenu[] = {
    100, 0,
    101, 200,
    0, 0,
};

BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
    /* We'll talk about this line more later */
    rgiMenu[1] = (INT)GetMenu(hwnd);

    CreateWindow(TEXT("Button"), TEXT("Sample"),
                 WS_CHILD | BS_PUSHBUTTON, 0, 0, 100, 100,
                 hwnd, IntToPtr_(HMENU, 200), g_hinst, 0);
    return TRUE;
}

void
OnDestroy(HWND hwnd)
{
    if (!GetMenu(hwnd))
        DestroyMenu(IntToPtr_(HMENU, rgiMenu[1]));
    PostQuitMessage(0);
}


void OnCommand(HWND hwnd, int id, HWND hwndCtl, UINT codeNotify)
{
    switch (id) {
    case 100:
    case 101: ShowHideMenuCtl(hwnd, id, rgiMenu); break;
    }
}

HANDLE_MSG(hwnd, WM_COMMAND, OnCommand);

BOOL
InitApp(void)
{
    ....
    wc.lpszMenuName = <font COLOR=blue>MAKEINTRESOURCE(1)</font>;
    ....
}

/* add to resource file */
1 MENU PRELOAD
BEGIN
    POPUP "&amp;View"
    BEGIN
        MENUITEM "&amp;Menu Bar", 100, CHECKED
        MENUITEM "&amp;Button", 101
    END
END
</pre>
<p>
Most of the changes are just setting up.
We attach a menu to our window with two options,
one to hide and show the menu bar,
and one to hide and show our custom button.
Since our window starts out with the menu bar visible
and the button hidden, our menu template checks the
"Menu Bar" item but not the "Button" one.
</p>
<p>
The <code>OnCreate</code> function finishes setting up up the
<code>rgiMenu</code> array
by putting the main menu's handle into index&nbsp;1 in the
array of integers,
which corresponds to <code>hmenuMain</code> in our pseudo-structure.
The <code>OnDestroy</code> function destroys the menu if it isn't
attached to the window,
since
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/12/30/46594.aspx">
menus attached to a window are destroyed automatically when the
window is destroyed</a>.
The magic happens in the <code>OnCommand</code> handler.
If the user picked one of our two menu items, then we ask
<code>ShowHideMenuCtl</code> to hide and show the button or menu.
</p>
<p>
The tricky bit is setting up our <code>rgiMenu</code>.
Let's break down those integers.
</p>
<table BORDER=1>
<tr>
<td>100</td>
<td>Menu identifier for hiding and showing the menu bar</td>
</tr>
<tr>
<td>0</td>
<td>Placeholder
        (receives main menu handle in <code>OnCreate</code> handler)</td>
</tr>
<tr>
<td>101</td>
<td>Menu identifier for hiding and showing the menu bar</td>
</tr>
<tr>
<td>200</td>
<td>Control ID for the button that is shown and hidden
        (passed to the <code>CreateWindow</code> function)</td>
</tr>
<tr>
<td>0, 0</td>
<td>List terminator</td>
</tr>
</table>
<p>
When you run this program,
you can use the "Button" menu option to hide and show the button,
and you can use the "Menu Bar" menu option to hide and show the window's
main menu.
Erm, no wait, you can't use it to show
the main menu, because the main menu is hidden!
Naturally, if your program uses the ability to hide the main menu,
you need to provide some alternate mechanism for bringing the
main menu back,
say via a hotkey or by adding an option to the System menu.
</p>
<p>
Okay, now back to that line in the <code>OnCreate</code> function
that I promised to talk about.
If you have been paying attention, alarm bells should have gone off
in your head at the line
<code>rgiMenu[1] = (INT)GetMenu(hwnd);</code>
because we are casting an <code>HMENU</code> to an integer.
On 64-bit machines, a <code>HMENU</code> is a 64-bit value,
but integers are only 32-bit.
This cast truncates the handle value and consequently is not
64-bit safe.
Since the <code>ShowHideMenuCtl</code> function requires an
array of integers, you're stuck.
You can't shove a 64-bit menu handle into a 32-bit integer.
The <code>ShowHideMenuCtl</code> function is fundamentally flawed;
it is not 64-bit compatible.
</p>
<p>
Fortunately, nobody uses the <code>ShowHideMenuCtl</code>
function anyway.
Its functionality is so simple, most programs have already
written a function that does roughly the same thing,
and since you have to write the layout code anyway,
the <code>ShowHideMenuCtl</code> function doesn't really
save you very much effort anyway.
Like <code>MenuHelp</code>,
the function is entirely vestigial and isn't something
you should be tempted to use in any modern program.
It's a leftover from the days of 16-bit Windows.
</p>
<p>
Why does such a confusing function exist at all?
Well, the shell team thought they were doing you a favor
by providing this function back in the 16-bit days.
This was originally an internal function used by
(I think it was) File Manager,
but since it solved a more general problem,
the function was exported and documented.
In the intervening years,
the problem it addressed has been solved in other ways,
and the introduction of 64-bit Windows rendered the original
solution unworkable anyway,
but the function and the code behind it must still linger
in the system for backwards compatibility purposes.
</p>
<p>
The shell team learned its lesson.
It no longer exports every little helper function and custom control
for third parties to use.
If a future version of Windows no longer needs the helper function,
or if a redesign of Windows Explorer removes the need for that
custom control (or worse, changes the behavior of that custom control),
the shell would still have to carry all the code around for the
unused function or control
because a function, once documented, becomes a continuing support burden.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-523613">
				<div id="div-comment-523613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070710-00/?p=26083#comment-523613">
			July 10, 2007 at 12:14 pm</a>		</div>

		<p>Useless&#8230; and that integer array is simply dangerously designed. &nbsp;I&#8217;ve found also GetEffectiveClientRect in the doc while looking this one up. &nbsp;Baffling API design style, even for early 1990s. &nbsp; That one is passing two integer for each control, just to be able to know where the array ends! Or perhaps to match some kind of internal data structure while it was written. &nbsp;Doesn&#8217;t like this was meant to be published. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-523633">
				<div id="div-comment-523633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jeffabraham/archive/2007/07/10/raymond-on-helper-functions.aspx' rel='external nofollow' class='url'>Jeff Abraham's WebLog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070710-00/?p=26083#comment-523633">
			July 10, 2007 at 12:25 pm</a>		</div>

		<p>Working on the Visual Studio Tool Platform team, we do a lot of work on making VS extensible and providing</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-523653">
				<div id="div-comment-523653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070710-00/?p=26083#comment-523653">
			July 10, 2007 at 1:13 pm</a>		</div>

		<p>Sorry for posting here, but new comments to that post are disabled, although it&#8217;s still linked to prominently&#8230;</p>
<p>And speaking of disabling comments to posts, do you know if they&#8217;ve started timing out earlier? I always thought I used to be able to comment on all the posts on the front page.</p>
<div class=post>[<i>As explained in the suggestion box, the suggestion box backlog extends into 2010. If your suggestion is that awesome, then I&#8217;m sure you&#8217;ll remember to submit it when the box reopens in&nbsp;two years. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-523663">
				<div id="div-comment-523663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Koro</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070710-00/?p=26083#comment-523663">
			July 10, 2007 at 1:16 pm</a>		</div>

		<p>&#8220;It no longer exports every little helper function and custom control for third parties to use.&#8221;</p>
<p>Then every developper will develop their own sligthly different control that mimics the one the Shell uses (like the preview pane in XP folders), so you end up with another problem instead.</p>
<p>For example, why isn&#8217;t DirectUI documented? It&#8217;s used in a lots of places (LogonUI, MSN Messenger, etc&#8230;). Instead we&#8217;re stuck with WPF which only works with .NET&#8230;</p>
<div class=post>[<i>Do people complain to Lotus, &#8220;You need to document your internal UI library so I can write my program that mimics Lotus 1-2-3&#8221;? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-523683">
				<div id="div-comment-523683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070710-00/?p=26083#comment-523683">
			July 10, 2007 at 1:50 pm</a>		</div>

		<p>&#8220;Do people complain to Lotus&#8221;&#8230;</p>
<p>Isn&#8217;t the mentioned &#8220;MSN Messenger&#8221; simply an application? If so, it better not make use of non-documented functions in Windows, as I&#8217;m sure all know.</p>
<p>Or is &#8220;MSN Messenger&#8221; now considered by Microsoft to be a part of the operating system?</p>
<div class=post>[<i>As far as I&#8217;m aware, the version of the DirectUI library in MSN Messenger does not use any undocumented functions in Windows. I don&#8217;t know why I&#8217;m bothering to respond to this; it&#8217;s a lose-lose for me. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-523703">
				<div id="div-comment-523703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070710-00/?p=26083#comment-523703">
			July 10, 2007 at 2:18 pm</a>		</div>

		<p>So just how many programs would break if this function was deleted ?</p>
<p>(Just so I can put things in perspective)</p>
<div class=post>[<i>It&#8217;s impossible to say. I could write a program tonight, and that would increment the number by 1. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-523753">
				<div id="div-comment-523753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CGomez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070710-00/?p=26083#comment-523753">
			July 10, 2007 at 3:09 pm</a>		</div>

		<p>Yeah, this brings up a good example of where law and software engineering meet.</p>
<p>Before software research ever brought up contract programming, the Windows API was already a contract. &nbsp;It became one just by virtue of being born and then by Windows growth and popularity.</p>
<p>So it is prudent for these API developers to not just export everything (which adds it to the contract), but to release things in different ways.</p>
<p>Sometimes, you&#8217;ll have no choice but to expose some functionality.</p>
<p>Sometimes, you aren&#8217;t sure if people need this functionality. &nbsp;Maybe you try it yourself in a few projects (like MSN Messenger or Office) and see if it&#8217;s working out. &nbsp;Maybe there is a need for the functionality to be exported, but it could be improved upon first, before casting it in the everlasting mold of backward compatibility.</p>
<p>The problem is some stupid people went crying to the DOJ and convinced non-engineers that MSFT perfectly designs everything on the first try and if they don&#8217;t export and document everything, then they are a ruthless monopoly.</p>
<p>It&#8217;s a no-win situation for MSFT. &nbsp;I&#8217;m impressed with the quality of people who work there under those conditions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-523793">
				<div id="div-comment-523793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bikedude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070710-00/?p=26083#comment-523793">
			July 10, 2007 at 5:22 pm</a>		</div>

		<p>I remember reading that window handles just use 16-bit under 32-bit Windows in order to better support Win16 apps. 64-bit Windows dropped support for Win16 apps, so now window handles use 32-bit in order to support Win32 apps better. (a huge overkill given a window manager that starts sweating bullets at 20000 windows)</p>
<p>Which brings me to my question: Is a 64-bit HMENU value really 64-bit? (Given 64-bit Windows &#8212; I understand Win128 will probably change things)</p>
<p>&#8212;</p>
<p>Rune</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-523803">
				<div id="div-comment-523803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bikedude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070710-00/?p=26083#comment-523803">
			July 10, 2007 at 5:40 pm</a>		</div>

		<p>Oh, I forgot to add (I&#8217;m under a contract): Buy m0re v1agr4!</p>
<p>&#8212;</p>
<p>Rune</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-523893">
				<div id="div-comment-523893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070710-00/?p=26083#comment-523893">
			July 10, 2007 at 9:55 pm</a>		</div>

		<p>&quot;The problem is some stupid people went crying to the DOJ&#8230;&quot;</p>
<p>Not stupid people but rather people coming from a background of open source, operating system ending in ux and programming language ending in va. For them backward compatibility and not breaking existing clients are (or at least used to be) not a big priority as evidenced by their own products. Coming from such background any attempt on the part of MS to not document something is viewed as simply malicious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-523943">
				<div id="div-comment-523943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070710-00/?p=26083#comment-523943">
			July 10, 2007 at 11:24 pm</a>		</div>

		<p>&#8220;Do people complain to Lotus&#8230;&#8221;</p>
<p>Raymond, Lotus doesn&#8217;t make an operating system with undocumented dynamic libraries which only their own programs can use, so your comparison is not valid.</p>
<div class="post">[<i>Neither is Windows, so your comparison is not valid either. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-523993">
				<div id="div-comment-523993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DX</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070710-00/?p=26083#comment-523993">
			July 11, 2007 at 1:24 am</a>		</div>

		<p>His comparison is valid Raymond, You known it but I do not expect you to accept it.. ;-)</p>
<p>Cheers Mate!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-524033">
				<div id="div-comment-524033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://w2k.fz.se/blog' rel='external nofollow' class='url'>Wilhelm Svenselius</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070710-00/?p=26083#comment-524033">
			July 11, 2007 at 2:06 am</a>		</div>

		<p>Would the trolls go back to Slashdot please? The whole &quot;undocumented dynamic libraries which only [Microsoft&#8217;s] own programs can use&quot; thing is misinformed FUD to begin with.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-patriotb odd alt thread-odd thread-alt depth-1" id="comment-524013">
				<div id="div-comment-524013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PatriotB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070710-00/?p=26083#comment-524013">
			July 11, 2007 at 1:33 am</a>		</div>

		<p>Re: the 64-bit issue with this function&#8230; couldn&#8217;t it have been changed to operate on an array of INT_PTRs? &nbsp;It would have no effect when compiling for x86, and would enable the function to work correctly in 64-bit. &nbsp;I imagine the time to convert INT to INT_PTR would have been trivial.</p>
<p>Re: DirectUI&#8230; I&#8217;ve mentioned it before on this blog. &nbsp;There&#8217;s two sides to the coin: 1: Someone at Microsoft has developed some technology, and since it is property of Microsoft, any product in Microsoft should have the right to incorporate that source code. &nbsp;2: Microsoft doesn&#8217;t want to commit to a publicly-available (and supported forever) implementation of the technology, so to sidestep around antitrust requirements, it doesn&#8217;t implement it as an exposed API but simply duplicates all the code in each relevant product.</p>
<p>My personal view? I&#8217;d love to see DirectUI documented, because it seems like cool technology (for those who don&#8217;t want to use WPF for the same reasons that Windows itself doesn&#8217;t want to use WPF). &nbsp;But I think they have the right to keep it private; as Raymond said it doesn&#8217;t use any undocumented Windows APIs so in theory any ISV could have, with the right skills and knowledge, created the same thing.</p>
<p>That said, just because you *can* keep it private, doesn&#8217;t mean you should. &nbsp;And that leads to&#8230;</p>
<p>Re: APIs and helper functions/controls. &nbsp;I&#8217;m one who loves APIs because they allow me to 1) minimize the cost of developing my own apps, and 2) be most consistent with the OS.</p>
<p>It&#8217;s a balance between ISV usefulness, platform longevity, and affect on cost (for both the ISV and Microsoft).</p>
<p>With XP, I was definitely seeing a trend about reducing helper functions and exposed controls (especially compared to the ComCtl32 updates brought by IE3/4). &nbsp;However with Vista, I was pleasantly surprised by what I perceived as an excellent set of new Shell APIs (not quite as much with comctl32 since there isn&#8217;t much new there). &nbsp;There are hundreds of new shell/property system functions/interfaces, ranging from large pieces like ExplorerBrowser and NamespaceTreeControl, to simple helper functions like SHCreateItemXXX. &nbsp;There&#8217;s also some good SDK samples. &nbsp;(However, the SDK documentation itself is still quite sparse.)</p>
<p>That said there are still pieces missing&#8211;we waited for years for SHCreateShellFolderView/Ex (and company) to be officially documented. &nbsp;It took the DOJ to bring it about, but it finally happened in 2002. &nbsp;Now there&#8217;s deprecation warnings on nearly all of these &quot;settlement&quot; APIs, which disappoints, but doesn&#8217;t surprise, me.</p>
<p>Anyways, overall it&#8217;s a balance to find which APIs are the correct ones to expose. &nbsp;Generally Microsoft does a pretty good job in determining this balance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-524603">
				<div id="div-comment-524603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Int19</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070710-00/?p=26083#comment-524603">
			July 12, 2007 at 1:47 am</a>		</div>

		<p>“Misinformed FUD?”</p>
<p>Well just take a peak on the loaded DLLs of “MS-Windows XP<br />
Add/Remove Programs” applet on the Control Panel, if you do so (with<br />
the help of Process Explorer for example) you will see that the<br />
software (which starts with the help of &nbsp;the well known<br />
“rundll.exe”) uses the “duser.dll”. </p>
<p>Now if you check “duser.dll” exports you&#8217;ll see that it&#8217;s a much<br />
useful and quiet undocumented system oriented DLL (titled in it’s<br />
version info as “Windows DirectUser Engine” wow!!) that only MS<br />
software can use and benefit from ;-)</p>
<p>Now, if Raymond can explain us this, then ok… </p>
<div class="post">[<i>This is a lose-lose discussion for me.<br />
People just keep making false statements and my choices are either to<br />
let them stand and make people think they&#8217;re right, or correct them,<br />
and that just leads to a new false statement. So I&#8217;ll try to quit the<br />
game: Your statement is incorrect but I will not correct it. End of<br />
discussion. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-524613">
				<div id="div-comment-524613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Int19</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070710-00/?p=26083#comment-524613">
			July 12, 2007 at 3:28 am</a>		</div>

		<p>It is not a &quot;lose-lose discussion&quot;, if you want to explain this&#8230;</p>
<p>Believe me, I would be glad to read your opinion on this matter and so help me correct my misunderstanding about this DLL (there is much hype on the net about it), as your book helped correct some of my mistakes on Windows API programming (by the way it’s a nice book :-)).</p>
<p>But since you do not feel this way, “End of Discussion” from me also, I am sorry for pointing about “DUSER.DLL” in the first place, I will not trouble you again.</p>
<p>Bye.. :-(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-727413">
				<div id="div-comment-727413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codedstyle.com/why-is-the-animation-common-control-limited-to-rle8-compressed-animations-15/' rel='external nofollow' class='url'>Why is the animation common control limited to RLE8-compressed animations? | Coded Style</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070710-00/?p=26083#comment-727413">
			April 17, 2009 at 11:37 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.codedstyle.com/why-is-the-animation-common-control-limited-to-rle8-compressed-animations-15/" rel="nofollow">http://www.codedstyle.com/why-is-the-animation-common-control-limited-to-rle8-compressed-animations-15/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

