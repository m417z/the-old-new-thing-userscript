<html>
<head>
<title>How can dereferencing the first character of a string take longer when the string is longer? I'm looking only at the first character, which should be constant time</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can dereferencing the first character of a string take longer when the string is longer? I&#8217;m looking only at the first character, which should be constant time</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 5, 2018 / year-entry #275</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20181205-00/?p=100405</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">There's a lot hiding in that <VAR>O</VAR>.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Consider this program.
</p>
<pre>
char* malloc_random_string_length(int length)
{
 char* s = (char*)malloc(length + 1);
 for (int i = 0; i &lt; length; i++) {
  s[i] = '\0' + (rand() % 10);
 }
 s[length] = '\0';
 return s;
}

int test()
{
 char* array1[NUMBER_OF_STRINGS];
 char* array2[NUMBER_OF_STRINGS];
 int i;
 int matches = 0;

 for (i = 0; i &lt; NUMBER_OF_STRINGS; i++) {
  array1[i] = malloc_random_string_length(STRING_LENGTH);
  array2[i] = malloc_random_string_length(STRING_LENGTH);
 }

 // Okay, now time this loop
 start_stopwatch();
 matches = 0;
 for (i = 0; i &lt; NUMBER_OF_STRINGS; i++) {
  if (compare_in_some_way(array1[i], array2[i])) {
   matches++;
  }
 }
 stop_stopwatch();

 // Return this value so the compiler won't optimize it out
 return matches;
}
</pre>
<p>
This code creates two arrays,
each with <code>NUMBER_<code></code>OF_<code></code>STRINGS</code>
random strings,
each of length <code>STRING_<code></code>LENGTH</code>.
It then calls
<code>compare_<code></code>in_<code></code>some_<code></code>way</code>
on each pair of strings tallies how many of them pass the test.
</p>
<p>
Consider this comparison function:
</p>
<pre>
int compare_in_some_way(char* a, char* b)
{
 return a == b; // just compare the raw pointers
}
</pre>
<p>
When run with various values for
each with <code>NUMBER_<code></code>OF_<code></code>STRINGS</code>
and
<code>STRING_<code></code>LENGTH</code>,
this code's running time is proportional to
<code>NUMBER_<code></code>OF_<code></code>STRINGS</code>,
and the
<code>STRING_<code></code>LENGTH</code>
doesn't play a role.
</p>
<p>
On the other hand, consider this alternate comparison function:
</p>
<pre>
int compare_in_some_way(char* a, char* b)
{
 return *a == *b; // compare the first characters
}
</pre>
<p>
This compares the first characters of the strings.
With this version,
it naturally runs slower as
<code>NUMBER_<code></code>OF_<code></code>STRINGS</code>
increases,
but surprisingly, it also runs slower as
<code>STRING_<code></code>LENGTH</code> increases.
</p>
<p>
How can the length of the string play a factor in how long
it takes to compare the first character?
The function doesn't even know what the length of the string is!
</p>
<p>
What we're seeing is the effect of data locality.
</p>
<p>
In the first version that compares only pointer values,
the only memory accesses are to the memory for the arrays
themselves.
The data in those arrays are tightly packed,
so the cache is used efficiently.
Since you don't dereference the pointers, it doesn't matter
where they point.
</p>
<p>
Reading the first character from the string adds another
memory access, and the characteristics of that memory access
vary depending on the length of the string.
</p>
<p>
From the experimental data,
one can conclude that the string data is stored in roughly
contiguous memory.
When the strings are short, the first characters of each
string are closer to each other,
since there are fewer other characters in between.
This means that they are more likely to occupy the same
cache line.
</p>
<p>
As the strings get longer, the distance between their first
characters increases,
and fewer strings will fit inside a cache line.
Eventually, the strings are long enough that each string
ends up on a separate cache line,
and you don't gain any significant benefit from locality.
</p>
<p>
Although the access to the first character of the string is
always <var>O</var>(1),
the constant inside the <var>O</var> can vary wildly depending
on cache conditions.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-fjeldse even thread-even depth-1" id="comment-1372645">
				<div id="div-comment-1372645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Erik+F' rel='external nofollow' class='url'>Erik F</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181205-00/?p=100405#comment-1372645">
			December 5, 2018 at 8:52 am</a>		</div>

		<p>It makes a lot of sense that this is true: the pathological case where both strings have been paged out could make the comparison time exponentially longer! It&#8217;s unlikely that this would happen very often nowadays, but in the days of Windows 95 it seemed to happen quite frequently.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-pierrebai odd alt thread-odd thread-alt depth-1" id="comment-1372655">
				<div id="div-comment-1372655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/pierrebai' rel='external nofollow' class='url'>pierrebai</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181205-00/?p=100405#comment-1372655">
			December 5, 2018 at 9:16 am</a>		</div>

		<p>Actually, the reason for the slow-down is more likely the cache eviction during the random string *initialization*, not the cache eviction during access. Allocating and initializing larger string will more-likely overflow the caches, so the comparison loop will now fetch each characters from memory. </p>
<p>If the strings really are very short, maybe two will fit inside a single cache line, but that becomes false very fast. Cache lines are not big. I&#8217;m pretty sure the main culprit is the initialization. It could be tested by making the cache hot again by doing a first loop of untimed  comparisons, then doing it a second time. As long as NUMBER_OF_STRINGS does not overflow the main cache, and STRING_LENGTH is not extremely small (say, smaller than 16), it should become constant again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-paulmoore100 even thread-even depth-1 parent" id="comment-1372665">
				<div id="div-comment-1372665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/paulmoore100' rel='external nofollow' class='url'>paulmoore100</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181205-00/?p=100405#comment-1372665">
			December 5, 2018 at 9:49 am</a>		</div>

		<p>This is why it would be nice for perfmon , resource monitor etc to include cache miss / hit info (as well as instruction pipeline bubbles, branch mis predict etc). Today 100% cpu usage can mean cpu is 100% busy or CPU is 90% idle due to cache issues. Its almost impossible to find this info out</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-d-sturm odd alt depth-2" id="comment-1372675">
				<div id="div-comment-1372675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DanStur' rel='external nofollow' class='url'>DanStur</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181205-00/?p=100405#comment-1372675">
			December 5, 2018 at 11:03 am</a>		</div>

		<p>The Intel performance profiler includes that information iirc. </p>
<p>On Linux you can also use one of the valgrind suite to get the same information.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

