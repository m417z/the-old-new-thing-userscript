<html>
<head>
<title>Exported functions that are really forwarders</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Exported functions that are really forwarders</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 19, 2006 / year-entry #239</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060719-24/?p=30473</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time, we saw how the way Win32 exports functions is pretty much the same as the way 16-bit Windows exports functions, but with a change in emphasis from ordinal-based exports to name-based exports. This change in emphasis is not expressed anywhere in the file format; both 16-bit and 32-bit DLLs can export either by...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last time, we saw how
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/07/18/669668.aspx">
the way Win32 exports functions</a>
is pretty
much the same as the way 16-bit Windows exports functions,
but with a change in emphasis
from ordinal-based exports to name-based exports.
This change in emphasis is not expressed anywhere in the file format;
both 16-bit and 32-bit DLLs can export either by name or by ordinal
(or by both), but the designers of Win32 were biased in spirit
in favor of name-only exports.
</p>
<p>
But there is a new type of exported function in Win32, known as a forwarder.
A forwarder looks just like a regular exported function, except that
the entry in the ordinal export table says, "Oh, I'm not really a
function in this DLL. I'm really a function in that DLL over there."
For example,
if you do a
<code>link /dump /exports kernel32.dll</code>, you'll see a line
like this:
</p>
<pre>
151   EnterCriticalSection (forwarded to NTDLL.RtlEnterCriticalSection)
</pre>
<p>
This means that if a program links to
<code>KERNEL32.EnterCriticalSection</code>,
the loader silently
redirects it to <code>NTDLL.RtlEnterCriticalSection</code>.
Forwarders are a handy way to accommodate functionality moving from
one DLL to another.
The old DLL can continue to export the function but forward it to
the new DLL.
</p>
<p>
The forwarding trick is actually better than just having a stub
function in the old DLL that calls the function in the new DLL,
because the stub function creates a dependency between the old DLL and the
new one.
(After all, the old DLL needs to be linked to the new DLL in order
to call it!)
With a forwarder, however, the new DLL is not loaded unless somebody
actually asks for the forwarded function from the old DLL.
As a result, you don't pay for the new DLL until somebody actually wants it.
</p>
<p>
Okay, we saw that with forwarders, Win32 has diverged from 16-bit Windows,
but when it comes to imports, it's a whole new ball game.
We'll pick up the story next time.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-402053">
				<div id="div-comment-402053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060719-24/?p=30473#comment-402053">
			July 19, 2006 at 10:11 am</a>		</div>

		<p>I just have to comment that these are always interesting and informative articles. &nbsp;I can honestly say, coming just out of college, that I&#8217;ve learned more aspects of programming from my partial reading of this one blog than all my years in classes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-402063">
				<div id="div-comment-402063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060719-24/?p=30473#comment-402063">
			July 19, 2006 at 10:18 am</a>		</div>

		<p>Export forwarding is described in <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/msdnmag/issues/02/03/PE2/" rel="nofollow">http://msdn.microsoft.com/msdnmag/issues/02/03/PE2/</a> and a way to do this is described in <a rel="nofollow" target="_new" href="http://www.microsoft.com/msj/archive/S202B.aspx" rel="nofollow">http://www.microsoft.com/msj/archive/S202B.aspx</a> by using the incantation </p>
<p> &nbsp; &nbsp;#pragma comment(linker, &quot;/export:SomeFunc=DllWork.SomeFunc&quot;)</p>
<p>The first link says you can do this with .DEF files as well, referring the searcher to <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vccore/html/_core_exports.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vccore/html/_core_exports.asp</a> but the page does not really tell you how to write the line. &nbsp;I would presume it would be something like this:</p>
<p> &nbsp; &nbsp;EXPORTS<br />
<br /> &nbsp; &nbsp;SomeFunc=DllWork.SomeFunc</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-402083">
				<div id="div-comment-402083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060719-24/?p=30473#comment-402083">
			July 19, 2006 at 10:58 am</a>		</div>

		<p>Yeah, the MSDN Magazine link shows an example of the .DEF statement needed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-402123">
				<div id="div-comment-402123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060719-24/?p=30473#comment-402123">
			July 19, 2006 at 11:24 am</a>		</div>

		<p>@Bob: Guess I didn&#8217;t read far enough down the page. :) &nbsp;</p>
<p>In my defense, however, the .DEF file documentation in my third link does not describe how to do it. &nbsp;If one were to read only that documentation and not the MSDN article, one might not never know that export forwarding was even possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-402133">
				<div id="div-comment-402133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Colascione</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060719-24/?p=30473#comment-402133">
			July 19, 2006 at 11:25 am</a>		</div>

		<p>Thanks for posting these entries; I haven&#8217;t done any win32 (or win16, for that matter) programming in a long time. These days, I&#8217;m a web developer (ugh) in UNIXland. Just wanted to let you know that your posts are appreciated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-402153">
				<div id="div-comment-402153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Green</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060719-24/?p=30473#comment-402153">
			July 19, 2006 at 12:12 pm</a>		</div>

		<p>This is pretty neat. The most valuable part is the discussion of the design decisions, and their implications. They are not immediately obvious to people who are not intimately familiar with the code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-402193">
				<div id="div-comment-402193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://www.darklock.com/blog/' rel='external nofollow' class='url'>Caliban Darklock</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060719-24/?p=30473#comment-402193">
			July 19, 2006 at 1:24 pm</a>		</div>

		<p>@Cody: </p>
<p>Agreed. I&#8217;ve been in the industry almost fifteen years, and I still learn all kinds of interesting things here &#8211; mostly not from the &quot;what&quot;, since I&#8217;m very familiar with how DLLs import and export functionality (every old school Win3.1 programmer is), but from the &quot;why&quot;. Most of the time, I don&#8217;t have time for &quot;why&quot;, because I need to have something working twenty minutes ago&#8230; so it&#8217;s nice when someone puts the &quot;why&quot; up where I can read it once things calm down.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-402223">
				<div id="div-comment-402223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060719-24/?p=30473#comment-402223">
			July 19, 2006 at 2:04 pm</a>		</div>

		<p>Well, the why is much more important than the what. &nbsp;The what will change, the truth in why will always stay the same. &nbsp;I think that could have been a less cryptic statement though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-402243">
				<div id="div-comment-402243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TinFoilBeanie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060719-24/?p=30473#comment-402243">
			July 19, 2006 at 4:14 pm</a>		</div>

		<p>You know everytime I look at MSDN in Opera, I&#8217;m amazed that it works just well enough to be able to read the article text, but not quite perfectly &#8211; e.g. the navigation pane doesn&#8217;t synchronize properly, and clicking on links reloads the whole page, rather than just the right pane as in IE.</p>
<p>It&#8217;s as if for legal / business reasons there&#8217;s a optimal level somewhere between a complete lock out and complete compatibility that the developers strive for &#8211; anywhere outside this zone will incur chairs hurled from the Gods, blighted careers and so on.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-402503">
				<div id="div-comment-402503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tihiy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060719-24/?p=30473#comment-402503">
			July 20, 2006 at 2:49 pm</a>		</div>

		<p>What&#8217;s with this functionality in 9x/Me?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-402873">
				<div id="div-comment-402873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060719-24/?p=30473#comment-402873">
			July 22, 2006 at 12:02 pm</a>		</div>

		<p>I&#8217;m experiencing a strange error with DLL forwarding. When I try to export a function like the following, the linker doesn&#8217;t like it and stop with an error:</p>
<p>EXPORTS<br />
<br /> &nbsp;EnterCriticalSection=ntdll.RtlEnterCriticalSection</p>
<p>To resolve the problem, I have to append @4 like this:</p>
<p>EXPORTS<br />
<br /> &nbsp;EnterCriticalSection=ntdll.RtlEnterCriticalSection@4</p>
<p>or even</p>
<p>EXPORTS<br />
<br /> &nbsp;EnterCriticalSection=ntdll.RtlEnterCriticalSection@40000000000000000000</p>
<p>works. Very strange, isn&#8217;t it&#8230;</p>
<p>What&#8217;s even more curious is, using #pragma &nbsp;in .c like the following always *works* regardless of use of @ suffix:</p>
<p>#pragma comment(linker, &quot;/EXPORT:EnterCriticalSection=ntdll.RtlEnterCriticalSection&quot;)</p>
<p>Could you (or another guru would be appreciated as well :-) give me an brief description on why there&#8217;s such an inconsitency between .def file and #pragma?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-404833">
				<div id="div-comment-404833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RoBo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060719-24/?p=30473#comment-404833">
			July 31, 2006 at 12:50 pm</a>		</div>

		<p>Is there a (recommended) way to forward a function from one DLL to a function of the same name in a DLL of the same name, located in a different directory?</p>
<p>What I&#8217;m thinking of is being able to intercept calls between an app and a &#8216;standard&#8217; DLL &#8211; without having to change the app or the standard DLL &#8211; by putting a custom DLL in the same directory as the app. If my custom DLL has the same name as the system DLL it will be loaded in place of the system one and, depending on the functions I&#8217;ve exported, the relevant functions can be trapped. Any functions that aren&#8217;t intercepted would automatically forward to the underlying system DLL.</p>
<p>As far as I know, this can be achieved by supplying the full path to the DLL for forwarded functions:</p>
<p>MyFunction=C:/Windows/System32/MyDll.MyFunction</p>
<p>But this relies on knowledge of the location of system DLL in advance and can&#8217;t be deployed to non-conforming systems.</p>
<p>Are there any alternative ways to achieve this?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405203">
				<div id="div-comment-405203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bruteforce</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060719-24/?p=30473#comment-405203">
			August 1, 2006 at 10:50 am</a>		</div>

		<p>I tried to take advantage of the delay-loading feature described above for the forwarder DLLs but either I am doing something wrong or there is something I am missing.</p>
<p>What I wanted to do is create a forwarder DLL that will allow a C# application to safely invoke OS-dependent APIs without much of a hussle (C# applications have a serious problem invoking what gets returned from GetProcAddress).<br />
<br />The idea is that the C# application imports a function named fwdXXX from the forwarder DLL, which forwards the call to the actual XXX function. Then the application calls GetProcAddress(&quot;XXX&quot;) to check whether the function is present in the current environment, and if it is present then it calls fwdXXX.<br />
<br />If forwarding DLLs do not create a dependency between the app and the target DLL then the app will have no problem loading because its fwdXXX imports will be in place (the forwarder DLL is present).</p>
<p>I used InterlockedCompareExchange64 for the test. The forwarder DLL exports fwdInterlockedCompareExchange64 and the test app only calls it if GetProcAddress returns non-NULL for &quot;InterlockedCompareExchange64&quot; in kernel32.DLL.<br />
<br />However the test app FAILS to load on WinXP (The procedure entry point Kernel32.InterlockedCompareExchange64 could not be located in the dynamic library Forwarder.dll)</p>
<p>So what&#8217;s missing here? Maybe the loader sees that kernel32.dll is already loaded so it starts to fixup all of Forwarder.DLL exports that forward to kernel32?<br />
<br />Then I also tried to do a second level of forwarding. APP &#8211;&gt; FWD1.DLL ==&gt; FWD2.DLL ==&gt; Kernel32.DLL, but to no avail. If FWD2.DLL forwards to a non-existing export in Kernel32.DLL then APP fails to load with the same error.</p>
<p>So the question is, is there really some sort of delay loading for the target DLLs?</p>
<p>Regards,<br />
<br />Dimitris Staikos</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-597893">
				<div id="div-comment-597893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2008/02/04/7439592.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060719-24/?p=30473#comment-597893">
			February 4, 2008 at 10:33 am</a>		</div>

		<p>If you forward to a function, it still has to exist.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-666973">
				<div id="div-comment-666973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://msmvps.com/blogs/vandooren/archive/2008/09/12/how-dll-exports-really-work.aspx' rel='external nofollow' class='url'>Cluebat-man to the rescue</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060719-24/?p=30473#comment-666973">
			September 12, 2008 at 6:50 am</a>		</div>

		<p>I found this list of article on Raymond&amp;#39;s blog . Raymond&amp;#39;s blog is one of the more interesting</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

