<html>
<head>
<title>Demonstrating what happens when a parent and child window have different UI states</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Demonstrating what happens when a parent and child window have different UI states</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 23, 2017 / year-entry #258</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171123-00/?p=97455</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Setting up for a fail.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20171122-00/?p=97445">
Last time</a>,
we dug into the statement in the documentation that says,
"When you change the parent of a window,
you should synchronize the UISTATE of both windows."
Today we'll set up a situation where the states are out of sync
so we can play with it.
</p>
<p>
Start with
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20050422-08/?p=35813">
the new scratch program</a>
and make these changes:
</p>
<pre>
<font COLOR="blue">HWND g_hwndPotato;</font>

LRESULT RootWindow::OnCreate()
{
 <font COLOR="blue">g_hwndChild = CreateWindow(L"Button", L"&amp;Reset",
  WS_CHILD | WS_VISIBLE | WS_TABSTOP | BS_PUSHBUTTON,
  0, 0, 100, 100, m_hwnd, (HMENU)1, g_hinst, 0);
 if (!g_hwndPotato) {
   g_hwndPotato = CreateWindow(L"Button", L"&amp;Potato",
    WS_CHILD | WS_VISIBLE | WS_TABSTOP | BS_PUSHBUTTON,
    0, 100, 100, 100, m_hwnd, (HMENU)2, g_hinst, 0);
  }</font>
  return 0;
}
</pre>
<p>
We define a global variable to hold the window that is the
hot potato that will be passed from one root window to another.
When we create a root window, we give it a button called
"Reset", and the first root window also gets the hot potato.
</p>
<pre>
LRESULT RootWindow::HandleMessage(
                          UINT uMsg, WPARAM wParam, LPARAM lParam)
{
 switch (uMsg) {
 ...
  <font COLOR="blue">case WM_COMMAND:
   switch (GET_WM_COMMAND_ID(wParam, lParam)) {
   case 1:
    switch (GET_WM_COMMAND_CMD(wParam, lParam)) {
    case BN_CLICKED:
     SendMessage(m_hwnd, WM_CHANGEUISTATE,
      MAKEWPARAM(UIS_SET, UISF_HIDEACCEL | UISF_HIDEFOCUS), 0);
     break;
    }
    break;
   }
   break;

  case WM_LBUTTONDOWN:
   if (GetParent(g_hwndPotato) != m_hwnd) {
    SetParent(g_hwndPotato, m_hwnd);
   }
   break;</font>

  <font COLOR="red">// delete WM_SIZE handler
  // <strike>case WM_SIZE:</strike>
  //  <strike>if (m_hwndChild) {</strike>
  //   <strike>SetWindowPos(m_hwndChild, NULL, 0, 0,</strike>
  //                <strike>GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam),</strike>
  //                <strike>SWP_NOZORDER | SWP_NOACTIVATE);</strike>
  //  <strike>}</strike>
  //  <strike>return 0;</strike>
</font>
  ...
 }
 return __super::HandleMessage(uMsg, wParam, lParam);
}
</pre>
<p>
If the user clicks the Reset button,
we hide keyboard accelerators and the focus rectangle.
This lets us tinker with the UI state interactively:
Click the button to hide accelerators and tap the <kbd>Alt</kbd>
key to bring them back.
</p>
<p>
If we click in an empty space in the window,
then we try to steal the potato window (assuming it's
not already ours).
</p>
<pre>
int PASCAL
WinMain(HINSTANCE hinst, HINSTANCE, LPSTR, int nShowCmd)
{
 g_hinst = hinst;

 if (SUCCEEDED(CoInitialize(NULL))) {
  InitCommonControls();

  <font COLOR="blue">RootWindow *prw1 = RootWindow::Create();
  RootWindow *prw2 = RootWindow::Create();
  if (prw1 &amp;&amp; prw2) {
   ShowWindow(prw1-&gt;GetHWND(), nShowCmd);
   ShowWindow(prw2-&gt;GetHWND(), nShowCmd);</font>
   MSG msg;
   while (GetMessage(&amp;msg, NULL, 0, 0)) {
    <font COLOR="blue">if (!IsDialogMessage(prw1-&gt;GetHWND(), &amp;msg) &amp;&amp;
        !IsDialogMessage(prw2-&gt;GetHWND(), &amp;msg)) {</font>
     TranslateMessage(&amp;msg);
     DispatchMessage(&amp;msg);
    <font COLOR="blue">}</font>
   }
  }
  CoUninitialize();
 }
 return 0;
}
</pre>
<p>
Finally, our main program creates two top-level windows
and lets you play with them.
</p>
<p>
Observe that we do nothing to synchronize the UI states of
the parent window with the potato.
</p>
<p>
Run this program and click Reset in the window that doesn't
have the Potato button.
This hides the keyboard accelerator indicator.
Now click in the client area of the window without the Potato
button.
The Potato window moves to that window,
and observe that the Potato window still has its
keyboard accelerator even though the Reset button doesn't.
</p>
<p>
Okay, now things get weirder:
hit the <kbd>Tab</kbd> key to put focus on the Potato window.
Now hit the <kbd>Alt</kbd> key to call up keyboard accelerator
indicators.
Notice that the indicators do not show up on the Reset button.
That's because the indicators are already enabled in the Potato
window, so it doesn't bother forwarding the message up to the
root,
since it figures the root would just ignore it anyway.
</p>
<p>
Click the Reset button to remove keyboard indicators from
both the Reset and Potato windows.
Go to the other window (where Reset has the keyboard indicators)
and click in the client area to steal the potato.
Now you have the weird reverse state where the Reset button has
a keyboard indicator but the Potato button doesn't.
Use the <kbd>Tab</kbd> to put focus on the Reset button,
and then
tap the <kbd>Alt</kbd> to call up keyboard indicators.
Oops, nothing happens because the Reset button already has
keyboard indicators, so it decides that there is no work to do.
</p>
<p>
Okay, so we see that if you have a window tree with a mix
of UI states, things act weird.
Next time, we'll try to fix it.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1316896">
				<div id="div-comment-1316896" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171123-00/?p=97455#comment-1316896">
			November 23, 2017 at 8:45 am</a>		</div>

		<p>Such a ridiculously complicated system. Couldn&#8217;t it just have been a global option that let the user decide &#8220;do you want to see focus rectangles and accelerators&#8221;?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1316906">
				<div id="div-comment-1316906" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171123-00/?p=97455#comment-1316906">
			November 23, 2017 at 9:46 am</a>		</div>

		<p>But the user doesn&#8217;t want to see them all the time. Only when they tap <kbd>Alt</kbd>. And only in the window they are currently working in.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1316915">
				<div id="div-comment-1316915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171123-00/?p=97455#comment-1316915">
			November 23, 2017 at 10:35 am</a>		</div>

		<p>Since the system operated differently for twenty years without audible complaints, I doubt that most users were very bothered. This does seem like a feature that should have started at -100 points and never got close to zero.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1316916">
				<div id="div-comment-1316916" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Osexpert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171123-00/?p=97455#comment-1316916">
			November 23, 2017 at 11:31 am</a>		</div>

		<p>It probably over flood</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1316925">
				<div id="div-comment-1316925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://english.rejbrand.se/' rel='external nofollow' class='url'>Andreas Rejbrand</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171123-00/?p=97455#comment-1316925">
			November 23, 2017 at 12:29 pm</a>		</div>

		<p>Personally, I *always* want to see all accelerators and focus rectangles.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1316945">
				<div id="div-comment-1316945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171123-00/?p=97455#comment-1316945">
			November 23, 2017 at 7:35 pm</a>		</div>

		<p>It was intended to go away entirely but some ADA case put it back as a switch.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

