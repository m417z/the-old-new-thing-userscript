<html>
<head>
<title>Visual Studio 2005 gives you acquire and release semantics for free on volatile memory access</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Visual Studio 2005 gives you acquire and release semantics for free on volatile memory access</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 19, 2011 / year-entry #96</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110419-00/?p=10893</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If you are using Visual Studio 2005 or later, then you don't need the weird Interlocked­Read­Acquire function because Visual Studio 2005 and later automatically impose acquire semantics on reads from volatile locations. It also imposes release semantics on writes to volatile locations. In other words, you can replace the old Interlocked­Read­Acquire function with the following:...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
If you are using
Visual Studio 2005 or later, then you don't need the weird
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/12/10152296.aspx">
<code>Interlocked&shy;Read&shy;Acquire</code></a>
function
because
<a HREF="http://msdn.microsoft.com/en-us/library/12a04hfd(v=VS.80).aspx">
Visual Studio 2005 and later automatically impose acquire semantics
on reads from volatile locations</a>.
It also imposes release semantics on writes to volatile locations.
In other words, you can replace the old
<code>Interlocked&shy;Read&shy;Acquire</code>
function with the following:
</p>
<pre>
#if <a HREF="http://msdn.microsoft.com/en-us/library/b0084kay(v=VS.80).aspx">_MSC_VER &gt;= 1400</a>
LONG InterlockedReadAcquire(__in volatile LONG *pl)
{
    return *pl; // Acquire imposed by volatility
}
#endif
</pre>
<p>
This is a good thing because it expresses your intentions more
clearly to the compiler.
The old method that overloaded
<code>Interlocked&shy;Compare&shy;Exchange&shy;Acquire</code>
forced the compiler to perform the actual compare-and-exchange
even though we really didn't care about the operation; we just
wanted the side effect of the Acquire semantics.
On some architectures, this forces the cache line dirty
<a HREF="http://www.bing.com/search?q=&quot;To+simplify+the+interface+to+the+processor's+bus,+the+destination+operand+receives+a+write+cycle+without+regard+to+the+result+of+the+comparison&quot;">
even if the comparison fails</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-908113">
				<div id="div-comment-908113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zan Lynx</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110419-00/?p=10893#comment-908113">
			April 19, 2011 at 7:24 am</a>		</div>

		<p>Of course, writing your code relying on volatile in this way results in mysterious failure conditions if you port it to any other compiler and/or operating system.</p>
<div class="post">[<i>That&#39;s why I put the #if around it. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-908123">
				<div id="div-comment-908123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110419-00/?p=10893#comment-908123">
			April 19, 2011 at 7:44 am</a>		</div>

		<p>Original meaning of volatile was for memory locations that can change their state outside of &quot;C virtual machine&quot;. The closest to that definition are device registers.</p>
<p>I don&#39;t know if later C/C++ standards extended volatile definition for multi-processing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-908143">
				<div id="div-comment-908143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110419-00/?p=10893#comment-908143">
			April 19, 2011 at 8:53 am</a>		</div>

		<p>@Alex, the C and C++ standards do not know the existence of multithreading (oops&#8230; C++11 just got released&#8230; well, even there it&#39;s just a library). They therefore cannot impose any threading semantics on volatile. This is MSVC++ specific.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-908203">
				<div id="div-comment-908203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110419-00/?p=10893#comment-908203">
			April 19, 2011 at 4:12 pm</a>		</div>

		<p>@Billy: Threading is not &#39;just a library&#39; in C++11. The abstract machine semantics were almost entirely rewritten to cover the behaviour of multithreaded programs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-908163">
				<div id="div-comment-908163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110419-00/?p=10893#comment-908163">
			April 19, 2011 at 10:55 am</a>		</div>

		<p>I think the barrier semantics MS added in VS 2005 are sensible defaults. &nbsp;But one situation I&#39;d like to experiment with is how the implied barriers might impact something like the following (on a platform that requires barriers):</p>
<p> &nbsp; &nbsp;void CopyToVolatileBuf( char volatile* vdst, char* src)</p>
<p> &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;while (*vdst++ = *src++) {};</p>
<p> &nbsp; &nbsp;}</p>
<p>In most situations, I&#39;d expect that you&#39;d want to perform the entire transfer before issuing &nbsp;a barrier, but I expect with the volatile semantics in MSVC there would be a barrier after each character is copied.</p>
<p>I&#39;ll have to experiment (with an ia64 build?). &nbsp;I&#39;d bet to get only a single barrier, you&#39;d have to do something like:</p>
<p> &nbsp; &nbsp;void CopyToVolatileBuf( char volatile* vdst, char* src)</p>
<p> &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;char* dst = (char*) vdst;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;while (*dst++ = *src++) {};</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;// perform some operation to get a memory barrier</p>
<p> &nbsp; &nbsp;}</p>
<p>However, I think Microsoft&#39;s volatile semantics are what should be done &#8211; I&#39;d prefer correct behavior over performance by default. &nbsp;And I think having volatile imply an appropriate barrier is the right thing to do. &nbsp;Even if the standard doesn&#39;t require it, the standard also doesn&#39;t require much of any other expected behavior in the face of multiple threads (excluding the recently ratified C++0x standard), but compilers have been going &#39;beyond the standard&#39; to support things sensibly with threads for years.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-908253">
				<div id="div-comment-908253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110419-00/?p=10893#comment-908253">
			April 20, 2011 at 10:40 am</a>		</div>

		<p>@mikeb: As far as I understood the MSDN documentation about this semantics of &quot;volatile&quot;, this is ONLY taken as a hint to the compiler to perform all data access in the order written in the C code, and without using registers for the &quot;volatile&quot; value. It has no implication whatsoever on reordering of memory access by the CPU in the face of multi-core systems. There is no memory barrier.</p>
<p>So, your C loop examples are not affected by using &quot;volatile&quot; one way or the other.</p>
<p>Or am I wrong?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-908263">
				<div id="div-comment-908263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110419-00/?p=10893#comment-908263">
			April 20, 2011 at 1:04 pm</a>		</div>

		<p>On the Itanium, acquire/release semantics are achieved through the use of special load/store instructions (ld.acq, st.rel). Explicit acquire/release &quot;barriers&quot; do not exist. (There is a full memory barrier instruction (mf), though, which is generated by the non-Acquire/Release versions of Interlocked*.)</p>
<div class="post">[<i>Yuhong, is that you? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-908273">
				<div id="div-comment-908273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110419-00/?p=10893#comment-908273">
			April 20, 2011 at 2:52 pm</a>		</div>

		<p>No. ;) Was addressing the comments posted by mikeb and LR, actually. (Acquire/release isn&#39;t implemented via barriers inserted at the end of statements or blocks, and the instructions generated do enforce proper ordering by the CPU.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-908323">
				<div id="div-comment-908323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110419-00/?p=10893#comment-908323">
			April 21, 2011 at 11:18 am</a>		</div>

		<p>@Anon: Thanks.</p>
<p>I&#39;m have no experience with that, but I&#39;m a bit confused by the mix of two different things: OP code generation and ordering (by the compiler) vs. memory-access reordering (by CPU/cache/whatever).</p>
<p>From the description, I take that VS2005 only deals with the first issue, not the second.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-908363">
				<div id="div-comment-908363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110419-00/?p=10893#comment-908363">
			April 21, 2011 at 2:00 pm</a>		</div>

		<p>@LR: Yeah, the VC docs could be clearer&#8230;</p>
<p>On x86/x64, it only actually has to deal with the first issue (compiler reordering), because in effect all reads and writes already have acquire and release semantics, respectively. See: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/kangsu/archive/2007/07/16/volatile-acquire-release-memory-fences-and-vc2005.aspx" rel="nofollow">blogs.msdn.com/&#8230;/volatile-acquire-release-memory-fences-and-vc2005.aspx</a></p>
<p>On the Itanium, the compiler deals with the second issue (CPU memory-access reordering) by replacing ordinary load/store instructions with special acquire/release versions.</p>
<p>On non-&quot;Windows&quot; platforms, however, such as Xbox 360, you evidently can&#39;t count on &quot;volatile&quot; to prevent CPU reordering. Under &quot;Volatile Variables and Reordering&quot;, <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ee418650%28v=VS.85%29.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ee418650%28v=VS.85%29.aspx</a> states: &quot;on Xbox 360 the compiler does not insert any instructions to prevent the CPU from reordering reads and writes.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

