<html>
<head>
<title>What is the format of a double-null-terminated string with no strings?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What is the format of a double-null-terminated string with no strings?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 8, 2009 / year-entry #321</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>31</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">One of the data formats peculiar to Windows is the double-null-terminated string. If you have a bunch of strings and you want to build one of these elusive double-null-terminated strings out of it, it's no big deal. H e l l o \0 w o r l d \0 \0 But what about the edge...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
One of the data formats peculiar to Windows is the
double-null-terminated string.
If you have a bunch of strings and you want to build
one of these elusive double-null-terminated strings out of it,
it's no big deal.
</p>
<table style="font-family: monospace; text-align: center;" cellpadding="2">
<tbody>
<tr>
<td style="border: 0.75pt solid black; width: 2em;">H</td>
<td style="border: 0.75pt solid black; width: 2em;">e</td>
<td style="border: 0.75pt solid black; width: 2em;">l</td>
<td style="border: 0.75pt solid black; width: 2em;">l</td>
<td style="border: 0.75pt solid black; width: 2em;">o</td>
<td style="border: 0.75pt solid black; width: 2em;">\0</td>
<td style="border: 0.75pt solid black; width: 2em;">w</td>
<td style="border: 0.75pt solid black; width: 2em;">o</td>
<td style="border: 0.75pt solid black; width: 2em;">r</td>
<td style="border: 0.75pt solid black; width: 2em;">l</td>
<td style="border: 0.75pt solid black; width: 2em;">d</td>
<td style="border: 0.75pt solid black; width: 2em;">\0</td>
<td style="border: 0.75pt solid black; width: 2em;">\0</td>
</tr>
</tbody>
</table>
<p>
But what about the edge cases?
What if you want to build a double-null-terminated string
with no strings?
</p>
<p>
Let's step back and look at the double-null-terminated string
with two strings in it.
But I'm going to insert line breaks to highlight the structure.
</p>
<table style="font-family: monospace; text-align: center;" cellpadding="2">
<tbody>
<tr>
<td style="border: 0.75pt solid black; width: 2em;">H</td>
<td style="border: 0.75pt solid black; width: 2em;">e</td>
<td style="border: 0.75pt solid black; width: 2em;">l</td>
<td style="border: 0.75pt solid black; width: 2em;">l</td>
<td style="border: 0.75pt solid black; width: 2em;">o</td>
<td style="border: 0.75pt solid black; width: 2em;">\0</td>
</tr>
<tr>
<td style="border: 0.75pt solid black; width: 2em;">w</td>
<td style="border: 0.75pt solid black; width: 2em;">o</td>
<td style="border: 0.75pt solid black; width: 2em;">r</td>
<td style="border: 0.75pt solid black; width: 2em;">l</td>
<td style="border: 0.75pt solid black; width: 2em;">d</td>
<td style="border: 0.75pt solid black; width: 2em;">\0</td>
</tr>
<tr>
<td style="border: 0.75pt solid black; width: 2em;">\0</td>
</tr>
</tbody>
</table>
<p>
Now I'm going to move the lines around.
</p>
<table style="font-family: monospace;" cellpadding="2">
<tbody>
<tr>
<td>
<span style="border: 0.75pt solid black;">Hello\0</span>
</td>
</tr>
<tr>
<td>
<span style="border: 0.75pt solid black;">world\0</span>
</td>
</tr>
<tr>
<td>
<span style="border: 0.75pt solid black;">\0</span>
</td>
</tr>
</tbody>
</table>
<p>
This alternate way of writing the double-null-terminated string
is the secret.
Instead of viewing the string as something terminated by
two consecutive null terminators, let's view it as a
list of null-terminated strings, with a zero-length string at the end.
Alternatively, think of it as a packed array of null-terminated
strings, with a zero-length string as the terminator.
</p>
<p>
This type of reinterpretation happens a lot in advanced
mathematics.
You have some classical definition of an object,
and then you invent a new interpretation which agrees
with the classical definition, but which gives you a
different perspective on the system and even generalizes
to cases the classical definition didn't handle.
</p>
<p>
For example, this "modern reinterpretation" of
double-null-terminated strings provides another answer
to a standard question:
</p>
<p>
How do I build a double-null-terminated string with an empty
string as one of the strings in the list?
</p>
<p>
You can't, because the empty string is treated as the end of the
list.
It's the same reason why you can't put a null character
inside a null-terminated string:
The null character is treated as the terminator.
And in a double-null-terminated string,
an empty string is treated as the terminator.
</p>
<table style="font-family: monospace;" cellpadding="2">
<tbody>
<tr>
<td>
<span style="border: 0.75pt solid black;">One\0</span>
</td>
</tr>
<tr>
<td>
<span style="border: 0.75pt solid black;">\0</span>
</td>
</tr>
<tr>
</tr>
<tr>
<td>
<span style="border: 0.75pt solid black;">Three\0</span>
</td>
</tr>
<tr>
<td>
<span style="border: 0.75pt solid black;">\0</span>
</td>
</tr>
</tbody>
</table>
<p>
If you try to put a zero-length string in your list,
you end up accidentally terminating it prematurely.
Under the classical view, you can see the two consecutive
null terminators:
They come immediately after the
<code>"One"</code>.
Under the reinterpretation I propose,
it's more obvious,
because the zero-length string is itself the terminator.
</p>
<p>
If you're writing a helper class to manage double-null-terminated strings,
make sure you watch out for these empty strings.
</p>
<p>
This reinterpretation of a double-null-terminated string as really
a <i>list of strings with an empty string as the terminator</i>
makes writing code to walk through a double-null-terminated string
quite straightforward:
</p>
<pre>for (LPTSTR pszz = pszzStart; *pszz; pszz += lstrlen(pszz) + 1) {<br> ... do something with pszz ...<br>}<br></pre>
<p>
Don't think about looking for the double null terminator.
Instead, just view it as a list of strings,
and you stop when you find a string of length zero.
</p>
<p>
This reinterpretation also makes it clear how you express a list
with no strings in it at all:
All you have is the zero-length string terminator.
</p>
<table style="font-family: monospace; text-align: center;" cellpadding="2">
<tbody>
<tr>
<td style="border: 0.75pt solid black;">\0</td>
</tr>
</tbody>
</table>
<p>
Why do we even have double-null-terminated strings at all?
Why not just pass an array of pointers to strings?
</p>
<p>
That would have worked, too,
but it makes allocating and freeing the array more complicated,
because the memory for the array and the component strings are
now scattered about.
(Compare absolute and self-relative security descriptors.)
A double-null-terminated string occupies a single block of memory
which can be allocated and freed at one time,
which is very convenient when you have to serialize and deserialize.
It also avoids questions like
"Is it legal for two entries in the array to point to the same string?"
</p>
<p>
Keeping it in a single block of memory reduces the number of selectors
necessary to represent the data in 16-bit Windows.
(And this data representation was developed long before the 80386
processor even existed.)
An array of pointers to 16 strings would require 17 selectors,
if you used <code>GlobalAlloc</code> to allocate the memory:
one for the array itself,
and one for each string.
Selectors were a scarce resource in 16-bit Windows;
there were only 8192 of them available in the entire system.
You don't want to use 1% of your system's entire allocation
just to represent an array of 100 strings.
</p>
<p>
One convenience of double-null-terminated strings is that you can load one
directly out of
your resources with a single call to <code>LoadString</code>:
</p>
<pre>STRINGTABLE<br>BEGIN<br> IDS_FILE_FILTER "Text files\0*.txt\0All files\0*.*\0"<br>END<br><br>TCHAR szFilter[80];<br>LoadString(hinst, IDS_FILE_FILTER, szFilter, 80);<br></pre>
<p>
This is very handy because it allows new filters to be added
by simply changing a resource.
If the filter were passed as an array of pointers to strings,
you would probably put each string in a separate resource,
and then the number of strings becomes more difficult to update.
</p>
<p>
But there is a gotcha in the above code,
which we will look at next time.
</p>
<p>
<b>Bonus Gotcha</b>:
Even though you may know how double-null terminated strings work,
this doesn't guarantee that the code you're interfacing with
understands it as well as you do.
Consequently, you'd be best off putting the extra null terminator
at the end if you are generating a double-null-terminated string,
just in case the code you are calling expects the extra null
terminator (even though it technically isn't necessary).
Example:
The ANSI version of
<a href="http://msdn.microsoft.com/en-us/library/ms682425.aspx" mce_href="http://msdn.microsoft.com/en-us/library/ms682425.aspx">
<code>CreateProcess</code></a> locates the end of the environment block by
looking for two consecutive NULL bytes instead of looking for
the empty string terminator.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (31)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-775993">
				<div id="div-comment-775993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">someone else</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-775993">
			October 8, 2009 at 10:14 am</a>		</div>

		<p>C strings are an ugly hack. First thing I do after I invent the time machine, I&#8217;m gonna whack whoever invented them. With a nailed club.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776013">
				<div id="div-comment-776013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776013">
			October 8, 2009 at 10:57 am</a>		</div>

		<p>And how many crashes, leaks, overflows, et al could be tracked to this &quot;nifty&quot; trick of cramming nul terminated multiple strings and parsing them out ? (I&#8217;ve heard it, dealt with in to get registry values, but still look at the code and shake my head..)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776023">
				<div id="div-comment-776023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776023">
			October 8, 2009 at 10:59 am</a>		</div>

		<p>The Bonus Gotcha is actually vitally important: apart from CreateProcess, I&#8217;ve seen various programs that search for the &quot;double null&quot;. &nbsp;They usually crash when you pass &quot; something  &quot;. It&#8217;s called &quot;double-null terminated&quot;, so sadly that&#8217;s what it must be.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776093">
				<div id="div-comment-776093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/Matthew_van_Eerde' rel='external nofollow' class='url'>Maurits</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776093">
			October 8, 2009 at 11:48 am</a>		</div>

		<blockquote><p>
  The ANSI version of CreateProcess locates the end of the environment block by looking for two consecutive NULL bytes
</p></blockquote>
<p>Sounds like a bug. &nbsp;It&#8217;s perfectly legal for an environment not to have any variables set, no?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776103">
				<div id="div-comment-776103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776103">
			October 8, 2009 at 12:08 pm</a>		</div>

		<p>MSVC 4.0 says that for CreateProcess&#8230;</p>
<p>Note that an ANSI environment block is terminated by two zero bytes: one for the last string, one more to terminate the block. A Unicode environment block is terminated by four zero bytes: two for the last string, two more to terminate the block.</p>
<p>So it&#8217;s not a bug, it&#8217;s part of the specification of CreateProcess().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776113">
				<div id="div-comment-776113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776113">
			October 8, 2009 at 12:30 pm</a>		</div>

		<p>Not to nitpick, but you can generate an array of pointers to strings using one allocation. &nbsp;I can&#8217;t remember off the top of my head, but I&#8217;m pretty sure there are a few places in the Windows API that do this. &nbsp;Of course, this is much easier to get wrong than a double-null-terminated string.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776133">
				<div id="div-comment-776133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776133">
			October 8, 2009 at 12:42 pm</a>		</div>

		<p>This stuff is pretty darned easy to parse, and consistent with the concept of C strings. &nbsp;I actually built lists of strings this way long before I had any Windows experience. &nbsp;Is it really the fault of the data representation if somebody couldn&#8217;t be bothered to figure this out? &nbsp;It&#8217;s not so much a string list terminated by double-nul, but a list of C strings that ends when you see an empty string.</p>
<p>But, I guess some people can&#8217;t be bothered with knowing how to count their buffers, as evidenced by some of the comments here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776143">
				<div id="div-comment-776143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">223</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776143">
			October 8, 2009 at 12:43 pm</a>		</div>

		<p>To push the reinterpretation one step further: C automatically automatically adds the null terminator to string literals &quot;xxxxxx&quot;. But it also automatically adds the empty string terminator to a string list.</p>
<p>Thanks, Mark, for your comment, I hadn&#8217;t understood the gotcha.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776153">
				<div id="div-comment-776153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">avek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776153">
			October 8, 2009 at 12:44 pm</a>		</div>

		<p>Null-terminating strings, a mess. Double null-terminated strings, double mess. No surprise.</p>
<p>What&#8217;s interesting, RegQueryValueExW returns single L&#8217; &#8217; when registry value is REG_MULTI_SZ with no string. But RegQueryValueExA returns two &#8216; &#8217;s. The non-Unicode version says there&#8217;s only 1 byte returned but actually stores 2 bytes in the output buffer.</p>
<p>So everything out there has actually its own idea of how to represent an empty DNT multistring. The gotcha is not only in consuming APIs like CreateProcess, it&#8217;s in producing APIs too. And we should write code as it&#8217;s always done with ambiguous formats: on output, produce the most safe variant (double null), on input, expect the least possible (single null).</p>
<p>&quot;One convenience of double-null-terminated strings is that you can load one directly out of your resources with a single call to LoadString&quot;</p>
<p>Great. So every c00LhAcKeR child out there can tweak the program, &quot;allowing&quot; to open unsupported file formats easily. Doesn&#8217;t look very good to me.</p>
<p>As result of all the gotchas and side effects of this format, some programs out there don&#8217;t use REG_MULTI_SZ in the registry at all. They use REG_SZ with conventional line separators instead, rn or like. Which makes their registry entries uneditable in Regedit (single-line edit control there eats rn while editing and doesn&#8217;t allow to enter them).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776163">
				<div id="div-comment-776163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776163">
			October 8, 2009 at 1:04 pm</a>		</div>

		<p>Well, anonymous, think of all the brilliant programmers at MSFT (and this is not said sarcastically) who still get buffers wrong and don&#8217;t parse what you seem to think of as trivial input..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776183">
				<div id="div-comment-776183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ace</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776183">
			October 8, 2009 at 1:22 pm</a>		</div>

		<p>To avek, re &quot;So every * out there can tweak the program&quot;: you&#8217;re wrong. By having your program easier to edit later, just like Raymond presented, you win, except if you&#8217;re only writing &quot;write once then throw away&quot; programs.</p>
<p>I like MULTI_SZ&#8217;s. Efficient and the absolute minimum needed to have an array of sz strings. They are also a nice example where not every string is aligned to 4 or even 16 bytes. Young weaklings got spoiled enough expecting to do a &quot;new&quot; (really malloc) for every damn thing.</p>
<p>Who needs pointers (a lot of random accesses) can initialize them in the separate array of pointers himself. Who doesn&#8217;t has the minimal representation. A good thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776233">
				<div id="div-comment-776233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Grant Husbands</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776233">
			October 8, 2009 at 2:07 pm</a>		</div>

		<p>It seems odd to create an alternative formalism for double-null-termination that disagrees with the name and typical description for such, to point out a case where that formalism doesn&#8217;t have double-null as termination, and then imply that code that depends on there actually being double-null termination is somehow wrong.</p>
<p>Maybe I&#8217;m just a nitpicker.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776253">
				<div id="div-comment-776253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776253">
			October 8, 2009 at 2:33 pm</a>		</div>

		<p>Grant: Having &quot;double-null&quot; in the name is unfortunate as there isn&#8217;t a double-null in the empty case (but then there aren&#8217;t any strings, either). The way Raymond describes it seems completely valid to me, though.</p>
<p>i.e. Raymond&#8217;s description is valid and correct. The name of the datatype is what&#8217;s wrong (or at least poorly chosen).</p>
<p>The important thing to note is that you can&#8217;t have an empty string in a multi-sz list. Once you realise that you realise that   is an empty list.</p>
<p>Raymond&#8217;s alternative way of looking at the data doesn&#8217;t actually change what the data is. However you look at it, it&#8217;s a bunch of null-terminated strings followed by one extra null. It should be obvious that if you take away all of the strings you&#8217;re only left with the null.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776283">
				<div id="div-comment-776283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776283">
			October 8, 2009 at 2:47 pm</a>		</div>

		<blockquote><p>
  Note that an ANSI environment block is terminated by two zero bytes: one for the last string, one more to terminate the block.</p>
<p>  So it&#8217;s not a bug, it&#8217;s part of the specification of CreateProcess().
</p></blockquote>
<p>And when the &quot;last string&quot; is non-existing, there would only be 1 null according to this written specification.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776293">
				<div id="div-comment-776293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776293">
			October 8, 2009 at 2:47 pm</a>		</div>

		<p>avek: If you want to stop people messing with your string resources then use code-signing or something similar.</p>
<p>Storing resources in an obscure, hard-to-maintain format doesn&#8217;t seem the answer (unless you&#8217;re actually trying to obfuscate them as well as stop people editing them), and using code-signign (or similar) protects a lot more than just your string resources. (It&#8217;ll protect the code itself, plus string literals, etc.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776303">
				<div id="div-comment-776303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776303">
			October 8, 2009 at 2:59 pm</a>		</div>

		<blockquote><p>
  Not to nitpick, but you can generate an array of pointers to strings using one allocation. &nbsp;I can&#8217;t remember off the top of my head, but I&#8217;m pretty sure there are a few places in the Windows API that do this. &nbsp;Of course, this is much easier to get wrong than a double-null-terminated string.
</p></blockquote>
<p>EnumServicesStatus and EnumDependentServices does this. One parameter to these functions are an array of structs including pointers to strings. The array of structs is used to store strings on output. The strings is allocated from the end of the last struct in the array.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776363">
				<div id="div-comment-776363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776363">
			October 8, 2009 at 6:08 pm</a>		</div>

		<p>16-bit windows on 8086 didn&#8217;t have selectors, that can NOT be the reason for not allocating individual strings.</p>
<p>16-bit windows and w9x doesn&#8217;t have any apis for updating resources at all. Visual Studio cannot edit resources on those OSes, usually the program is recompiled anyway.</p>
<div class=post>[<i>Fine. For &#8220;selector,&#8221; read &#8220;global handle.&#8221; Since real-mode Windows locked memory for the shortest time possible, you really would have had to pass an array of global handles, which is even more cumbersome. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776453">
				<div id="div-comment-776453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776453">
			October 9, 2009 at 5:32 am</a>		</div>

		<p>I have a memory of some functions that needed a TRIPLE-null terminated string, like &quot;key value  &quot;(+automatic ).</p>
<p>These functions expected couples of strings, and the lists were only terminated by couples of empty strings.</p>
<p>Didn&#8217;t GetOpenFileName() work like this for its filters?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776463">
				<div id="div-comment-776463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776463">
			October 9, 2009 at 5:42 am</a>		</div>

		<p>According to the SDK, ‘Each process has an environment block associated with it. The environment block consists of a null-terminated block of null-terminated strings (meaning there are two null bytes at the end of the block)’ (and essentially the same: ‘Note that an ANSI environment block is terminated by two zero bytes: one for the last string, one more to terminate the block.’), a non-sequitur that adequately documents the CreateProcess implementer&#8217;s lack of understanding.</p>
<p>Considering all the C-string related bugs I&#8217;ve seen, and the incredibly inconsistent behaviour of the Windows API regarding double-null-terminated string lists, I have to fully agree with the time machine comment.</p>
<p>@Global handle: thanks, now I&#8217;m going to have nightmares again. Still, I&#8217;ve used string lists in DOS long ago, and I just used: count, length, chardata, length, chardata&#8230; It didn&#8217;t even occur to me to use null terminators. Of course these had their own problems, like no Unicode because that didn&#8217;t exist yet, maximum length 64 kB. Those were different days.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776483">
				<div id="div-comment-776483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776483">
			October 9, 2009 at 6:33 am</a>		</div>

		<p>Putting file type filters into the string table resource is extremely useful to support internationalization of your application.</p>
<p>The &#8216;gotcha&#8217; is that the string table doesn&#8217;t support embedded nul characters so you need to use some other separator instead (like a pipe character) and do some substitution before feeding the string to the file selection dialog.</p>
<div class=post>[<i>The string table <a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/30/65013.aspx" rel="nofollow">does support embedded null characters</a>. Perhaps your problem <a href="http://blogs.msdn.com/oldnewthing/archive/2009/10/09/9904648.aspx" rel="nofollow">lies elsewhere</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776493">
				<div id="div-comment-776493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wizou</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776493">
			October 9, 2009 at 7:39 am</a>		</div>

		<blockquote><p>
  [The string table does support embedded null characters. Perhaps your problem lies elsewhere. -Raymond]
</p></blockquote>
<p>Wow&#8230; an HTML link into the future ^^</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776523">
				<div id="div-comment-776523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776523">
			October 9, 2009 at 9:59 am</a>		</div>

		<p>You could still use a single global handle and use an array of ints where the int is an offset relative to the base of the allocated memory.</p>
<p>But like you were saying, that&#8217;s even more cumbersome.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776563">
				<div id="div-comment-776563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Markus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776563">
			October 9, 2009 at 12:20 pm</a>		</div>

		<p>C strings might have been an ugly hack, but at the time, the only well-known alternative were Pascal strings, which were limited to 255 bytes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776593">
				<div id="div-comment-776593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mang</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776593">
			October 9, 2009 at 1:49 pm</a>		</div>

		<p>I can understand describing double-null-terminated strings by saying that you end the block with an empty string. &nbsp;This type of logic makes sense if you&#8217;re parsing the data in a loop.</p>
<p>Example: read until the next null. &nbsp;If length &gt; 0, then it&#8217;s a string. &nbsp;If length == 0, then it&#8217;s the end of the block.</p>
<p>I still think it&#8217;s better to say that it&#8217;s a null-terminated group of null-terminated strings. &nbsp;We already know that we use a null to terminate strings. &nbsp;The point that I like to stress is that the last null is not an empty string, but a null signifying the end of the block.</p>
<p>It&#8217;s an issue of type (null vs. empty string), rather than data, since they&#8217;re effectively the same.</p>
<p>Thanks for writing about it. &nbsp;This sort of stuff should be discussed more often.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776623">
				<div id="div-comment-776623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt [C++ MVP]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776623">
			October 9, 2009 at 1:56 pm</a>		</div>

		<p>&quot;no strings&quot; is the corner-case which shows the error (if the official description is double-NUL terminated) of the &quot;list which is terminated by an empty string&quot; treatment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776553">
				<div id="div-comment-776553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mg.to/' rel='external nofollow' class='url'>Michael Geary</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776553">
			October 9, 2009 at 11:59 am</a>		</div>

		<p>I would change the naming convention in the for loop:</p>
<p>for (LPTSTR pszz = pszzStart; *pszz; pszz += lstrlen(pszz) + 1) {</p>
<p>&#8230; do something with pszz &#8230;</p>
<p>}</p>
<p>pszz should be psz:</p>
<p>for (LPTSTR psz = pszzStart; *psz; psz += lstrlen(psz) + 1) {</p>
<p>&#8230; do something with psz &#8230;</p>
<p>}</p>
<p>Why? The code inside the loop body deals with a single zero-terminated string. That part of the code shouldn&#8217;t care that this string happens to be a piece of a pszz-formatted string.</p>
<p>psz&nbsp;is also a better match for the recommended way of thinking about the code:</p>
<p>&#8220;Don&#8217;t think about looking for the double null terminator. Instead, just view it as a list of strings, and you stop when you find a string of length zero.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776673">
				<div id="div-comment-776673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Earl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776673">
			October 9, 2009 at 7:08 pm</a>		</div>

		<p>More correctly, we should speak of the &quot;Double-Nul Terminated String&quot;:</p>
<p><a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/File:ASCII_Code_Chart-Quick_ref_card.jpg" rel="nofollow">http://en.wikipedia.org/wiki/File:ASCII_Code_Chart-Quick_ref_card.jpg</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776683">
				<div id="div-comment-776683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/Matthew_van_Eerde' rel='external nofollow' class='url'>Maurits</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776683">
			October 9, 2009 at 7:30 pm</a>		</div>

		<p>Or better yet, double-oh-terminated-string.</p>
<p>Captcha: 007 (if only&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776733">
				<div id="div-comment-776733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776733">
			October 10, 2009 at 4:31 am</a>		</div>

		<p>REG_MULTI_SZ has a length, so it can of course contain empty embedded strings. This makes editing PendingFileRenameOperations trickier!</p>
<p>P.S. This is the first captcha for which my browser has tried to autocomplete a previous value, but then maybe I haven&#8217;t filled in enough captchas to notice the problem on other sites.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776843">
				<div id="div-comment-776843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776843">
			October 11, 2009 at 6:47 pm</a>		</div>

		<p>Possibly just ninja&#8217;d by Neil, but:</p>
<p>For bonus points, see HKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlSession ManagerPendingFileRenameOperations, which is a REG_MULTI_SZ that almost always does contain empty strings.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776953">
				<div id="div-comment-776953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">chrdavis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091008-00/?p=16443#comment-776953">
			October 12, 2009 at 10:18 am</a>		</div>

		<p>Paths that are not double-null terminated are the most common issue when dealing with SHFileOperation.</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/bb762164" rel="nofollow">http://msdn.microsoft.com/en-us/library/bb762164</a>(VS.85).aspx</p>
<p>I even put it at the top of the list of the top coding mistakes when using this API.</p>
<p><a rel="nofollow" target="_new" href="http://web.archive.org/web/20071015210149/shellrevealed.com/blogs/shellblog/archive/2006/09/28/Common-Questions-Concerning-the-SHFileOperation-API_3A00_-Part-2.aspx" rel="nofollow">http://web.archive.org/web/20071015210149/shellrevealed.com/blogs/shellblog/archive/2006/09/28/Common-Questions-Concerning-the-SHFileOperation-API_3A00_-Part-2.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

