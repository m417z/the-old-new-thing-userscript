<html>
<head>
<title>On memory allocations larger than 64KB on 16-bit Windows</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>On memory allocations larger than 64KB on 16-bit Windows</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 13, 2017 / year-entry #250</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>22</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The mysterious __AHINCR.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Allocating memory blocks larger than
64<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090611-00/?p=17933/">KB</a>
was tricky in 16-bit Windows
because the nature of 16-bit segment:offset addressing
meant that you could access the memory only 64KB at a time.
Global memory allocations returned you a segment (or selector,
if running protected mode Windows),
and the memory started at offset zero in that selector.
Things got complicated once you needed to read the byte that comes after
offset <code>0xFFFF</code>.
</p>
<p>
For the purpose of discussion, let's say that
the value returned from <code>Global&shy;Alloc</code>
was <code>0x1234</code>.
The first 64KB of the allocated memory are accessible as
<code>1234:0000</code>
through
<code>1234:FFFF</code>.
</p>
<p>
In real mode,
linear addresses are calculated by taking the segment
number,
multiplying by 16,
and adding the offset.
This means that <code>1234:0000</code> refer to linear byte
<code>0x12340</code>,
and
<code>1234:FFFF</code> refer to linear byte
<code>0x12340</code> + <code>0xFFFF</code> = <code>0x2233F</code>.
The next linear byte is <code>0x22340</code>,
which you could access as <code>2234:0000</code>.
</p>
<p>
Conclusion:
When the offset wraps around, you add <code>0x1000</code>
to the segment.
</p>
<p>
In standard mode,
linear addresses are 
calculated by looking up the base address of the selector
in the descriptor table, and adding the offset.
When Windows allocated a block larger than 64KB,
it allocated a block of consecutive selectors,
so that the first selector pointed to the first 64KB of the
allocated memory,
the second selector pointed to second 64KB of the allocated memory,
and so on.
</p>
<p>
Now, consecutive selectors do not have consecutive values, however.
On the 80286,
the bottom three bits of the selector are used for other purposes,
so the numeric difference between consecutive selectors is actually 8.
The first 64KB of the allocated memory are accessible as
<code>1234:0000</code>
through
<code>1234:FFFF</code>,
and the next byte after that is available as
<code>123C:0000</code>.
</p>
<p>
This makes for a bit of trouble if you're writing a program that
needs to run in both real mode and protected mode.
When you reach the end of the first 64KB block,
how much do you increment the segment/selector by to reach
the next 64KB block?
</p>
<p>
Enter the <code>__AHINCR</code> variable.
</p>
<p>
The <code>__AHINCR</code> variable is a variable exported
from <code>KERNEL</code>.
In real mode Windows, the value is <code>0x1000</code>.
In protected mode Windows, the value is <code>0x0008</code>.
When your program reaches the end of a 64KB block,
it uses the <code>__AHINCR</code> value to decide
how much to increment the segment/selector by in order to
reach the next 64KB block.
</p>
<p>
Most programmers never saw this variable.
It was hidden inside the code generated by the compiler.
</p>
<p>
With the introduction of enhanced mode Windows,
the memory manager did a little more.
Enhanced mode Windows used the 80386,
"Now with 32-bit registers!&#x2728;"
This means that the offset portion of a selector:offset
address can be a 32-bit value.
</p>
<p>
The Windows memory manager assigned the selectors
to the different 64KB chunks of data in the same way
that the standard mode memory manager did,
but instead of setting the selector limit to <code>0xFFFF</code>,
it set the selector limit to extend to the entire remainder
of the block.
The first selector's limit was the entire memory block.
The second selector's limit was the memory block minus 64KB.
The third selector's limit was the memory block minus 128KB.
And so on until all the selectors were exhausted.
</p>
<p>
This arrangement meant that if you could convince your compiler
to do it (or if you wrote code in assembly language directly),
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170927-00/?p=97095#comment-1310625">
you could leave the selector alone and operate solely on the
offset portion</a>.
</p>
<p>
Windows 95 took advantage of this.
The languages team
<a HREF="https://technet.microsoft.com/en-us/library/2008.09.windowsconfidential.aspx">
produced a special version of the compiler</a>
that, with proper coaxing and appeasement,
could be convinced to access memory using 32-bit offsets
from a 16-bit selector,
provided you declared the selector and the pointer in just the right way.
</p>
<p>
No lesson today.
Just some reminiscing.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-bboorman even thread-even depth-1 parent" id="comment-1315566">
				<div id="div-comment-1315566" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1315566">
			November 13, 2017 at 7:09 am</a>		</div>

		<p>The linked story in the last paragraph is even worse. The computer shown looks to have been in the UK (judging from the outlet and plug), so the &#8220;bad&#8221; linker would also have had a round-trip network delay from west-coast US to the UK.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1315967">
				<div id="div-comment-1315967" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1315967">
			November 16, 2017 at 11:05 am</a>		</div>

		<p>It is highly unlikely that is the actual computer in question</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1315595">
				<div id="div-comment-1315595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dead1ne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1315595">
			November 13, 2017 at 7:49 am</a>		</div>

		<p>Thinking back on this stuff makes me wonder if something will ever come along that makes page tables seem archaic and convoluted.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1315645">
				<div id="div-comment-1315645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1315645">
			November 13, 2017 at 5:12 pm</a>		</div>

		<p>It&#8217;s called JIT.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1315596">
				<div id="div-comment-1315596" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Piotr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1315596">
			November 13, 2017 at 8:29 am</a>		</div>

		<p>Is there a way to figure out the multiplier when analyzing a memory dump from a different (unknown) machine in WinDBG?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1315605">
				<div id="div-comment-1315605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1315605">
			November 13, 2017 at 8:49 am</a>		</div>

		<p>Um, 16-bit Windows 3.1 can&#8217;t run WinDBG.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-yuhong-bao even depth-3" id="comment-1315635">
				<div id="div-comment-1315635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1315635">
			November 13, 2017 at 4:04 pm</a>		</div>

		<p>Or even crash dumps at all I think. The best that was common was Dr. Watson.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1315756">
				<div id="div-comment-1315756" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Piotr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1315756">
			November 14, 2017 at 10:21 am</a>		</div>

		<p>oh, I assumed it was dependant on the processor, not the OS</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1315615">
				<div id="div-comment-1315615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1315615">
			November 13, 2017 at 12:00 pm</a>		</div>

		<p>MS-DOS C compilers had an option to support a &#8220;huge&#8221; memory model or a declaration specifier that could be used to declare particular pointers as dealing with a &#8220;huge&#8221; memory allocation potentially larger than 64KB.  However, my recollection is that those real mode compilers handled pointer increments/addition a little differently than Raymond described.  Instead of adjusting the segment portion of the address when the offset would rollover at 0xffff, these compilers would keep the offset within 0x0000-0x000f and would increment the segment portion when the offset exceeded 0x0010.  However my memory could be wrong and I can&#8217;t find anything on the web that backs this up.</p>
<p>However, when looking for some support for this memory I was able to solve a mystery that Raymond&#8217;s article brought up &#8211; why is the name of the variable that holds the segment increment &#8220;__AHINCR&#8221;?  The &#8220;INCR&#8221; part is obvious enough, but what does &#8220;AH&#8221; have to do with incrementing segment registers?  My web search recalled that the MS-DOS compilers had options to configure various memory addressing models so you could optimize how much (or how little) the compiler had to worry about the segment registers:</p>
<p>    /AS &#8211; small model  (both code and data in one segment and DS==SS)<br />
    /AC &#8211; compact model (single code segment, multiple data segments)<br />
    /AM &#8211; medium model  (multiple code segments, single data segment)<br />
    /AL &#8211; large model   (multiple code and data segments)<br />
    /AH &#8211; huge model    (multiple code segments, huge data segments)  &lt;&#8211; source of &quot;AHINCR&quot; name</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1315625">
				<div id="div-comment-1315625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lars</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1315625">
			November 13, 2017 at 1:35 pm</a>		</div>

		<p>That&#8217;s some nice digging there. Good work!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1315655">
				<div id="div-comment-1315655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1315655">
			November 13, 2017 at 9:38 pm</a>		</div>

		<p>If memory serves, huge pointers were normalized in the way you described so that pointer arithmetic was easier (you didn&#8217;t get strange oddities like 1800:8000 == 2000:0000!) This normalization of course didn&#8217;t work at all with protected-mode Windows IIRC because segments != selectors (and I&#8217;m fairly sure they also messed up real-mode swapping schemes because the memory managers relied on the exact representation of a memory address for their allocators.)</p>
<p>Just a small nitpick: the tiny model was the one where CS=DS=SS (aka .COM format); small model had separate code and data/stack segments.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1315665">
				<div id="div-comment-1315665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1315665">
			November 13, 2017 at 9:40 pm</a>		</div>

		<p>@mikeb: I think the nitpick wasn&#8217;t warranted; I just parsed your description of the small model incorrectly. Sorry about that.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1315715">
				<div id="div-comment-1315715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1315715">
			November 14, 2017 at 8:29 am</a>		</div>

		<p>I can see that what I wrote for small model isn&#8217;t exactly crystal clear. What I remember is that later DOS compilers added a &#8220;/AT&#8221; option for tiny model where all segments were the same.  I think the tiny mode created .com binaries directly instead of having to use the exe2bin utility to do the conversion.  Or something like that.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1315666">
				<div id="div-comment-1315666" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1315666">
			November 13, 2017 at 10:19 pm</a>		</div>

		<p>Nice. I always wondered what the AH in _AHINCR stood for.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1315676">
				<div id="div-comment-1315676" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1315676">
			November 14, 2017 at 2:49 am</a>		</div>

		<p>As I recall, in real mode Windows you also had to GlobalLock your handle before you could access it; only in protected mode was the selector related to the handle (on my copy of Windows 95 16-bit global handles happen to end in 6 or E while the selector from the return value of GlobalLock happens to end in 7 or F).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1315737">
				<div id="div-comment-1315737" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1315737">
			November 14, 2017 at 9:16 am</a>		</div>

		<p>Real-mode Windows did segment-based virtual memory in software (classic Mac OS and DOS applications which used overlays did the same). When you allocated memory, you got a handle. When you needed to access it, you locked the handle (getting a pointer to the actual data), accessed the memory, and then released the handle. The OS kept an usage count on every segment, so it knew which ones could be discarded (swapped to disk) if it needed to free memory, or moved around if it needed to compact the memory. Also, if you locked the handle of a discarded segment, the OS could recall it from disk (possibly discarding other segments, or compacting memory in the process) before returning you the pointer. Note that there weren&#8217;t pages, and thus, whole segments were swapped. But in the time, with typical mass storage access times measured in hundreds of milliseconds, maybe it was better.</p>
<p>All the function import list patching Raymond has talked about in the past was there to allow you to call a function in a discarded segment. These complex mechanisms allowed Windows to trap the call, recall the offline segment, and then go on with the call as if nothing had happened.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1315806">
				<div id="div-comment-1315806" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1315806">
			November 14, 2017 at 11:37 pm</a>		</div>

		<p>I never used Macs before OS-X, but amusingly it seems like Apple&#8217;s engineers made some very questionable design choices in their scheme</p>
<p><a href="https://en.wikipedia.org/wiki/Mac_OS_memory_management#Fragmentation" rel="nofollow">https://en.wikipedia.org/wiki/Mac_OS_memory_management#Fragmentation</a><br />
&#8221;<br />
Palm OS and 16-bit Windows use a similar scheme for memory management, but the Palm and Windows versions make programmer error more difficult. For instance, in Mac OS, to convert a handle to a pointer, a program just de-references the handle directly, but if the handle is not locked, the pointer can become invalid quickly. Calls to lock and unlock handles are not balanced; ten calls to HLock are undone by a single call to HUnlock.[6] In Palm OS and Windows, handles are an opaque type and must be de-referenced with MemHandleLock on Palm OS or Global/LocalLock on Windows. When a Palm or Windows application is finished with a handle, it calls MemHandleUnlock or Global/LocalUnlock. Palm OS and Windows keep a lock count for blocks; after three calls to MemHandleLock, a block will only become unlocked after three calls to MemHandleUnlock.<br />
&#8221;</p>
<p>These use of high bits in addresses seems like a really bad idea too</p>
<p><a href="https://en.wikipedia.org/wiki/Mac_OS_memory_management#32-bit_clean" rel="nofollow">https://en.wikipedia.org/wiki/Mac_OS_memory_management#32-bit_clean</a><br />
&#8221;<br />
Because memory was a scarce resource, the authors of the Mac OS decided to take advantage of the unused byte in each address. The original Memory Manager (up until the advent of System 7) placed flags in the high 8 bits of each 32-bit pointer and handle. Each address contained flags such as &#8220;locked&#8221;, &#8220;purgeable&#8221;, or &#8220;resource&#8221;, which were stored in the master pointer table. When used as an actual address, these flags were masked off and ignored by the CPU.[4]<br />
While a good use of very limited RAM space, this design caused problems when Apple introduced the Macintosh II, which used the 32-bit Motorola 68020 CPU. The 68020 had 32 physical address lines which could address up to 4 GB (232 bytes) of memory. The flags that the Memory Manager stored in the high byte of each pointer and handle were significant now, and could lead to addressing errors.<br />
In theory, the architects of the Macintosh system software were free to change the &#8220;flags in the high byte&#8221; scheme to avoid this problem, and they did. For example, on the Macintosh IIci and later machines, HLock() and other APIs was rewritten to implement handle locking in a way other than flagging the high bits of handles. But, many Macintosh application programmers and a great deal of the Macintosh system software code itself accessed the flags directly rather than using the APIs, such as HLock(), which had been provided to manipulate them. By doing this they rendered their applications incompatible with true 32-bit addressing, and this became known as not being &#8220;32-bit clean&#8221;.<br />
&#8221;</p>
<p>Compared to that Win16&#8217;s scheme doesn&#8217;t seem all that bad &#8211; it&#8217;s only as nasty as it needs to be given the constraint that it needs to work in real mode or 286 protected mode. Then again I never wrote much Win16 code. </p>
<p>Still you can see why both Apple and Microsoft decided on a clean break for 32 bit code &#8211; once you have a flat 32 bit address space and an MMU you can hide the fact that blocks need to move or leave physical memory from the virtual only view applications see. And even better it doesn&#8217;t really matter if the physical address space fragments &#8211; the magic of virtual memory hides it. And of course applications have their own virtual address space and can&#8217;t overwrite anything outside it. </p>
<p>I worked on a few vxWorks systems with no virtual memory support and they were very prone to dying due to memory fragmentation. Or dying due to one process overwriting another.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1315966">
				<div id="div-comment-1315966" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1315966">
			November 16, 2017 at 10:54 am</a>		</div>

		<p>Laughing at that sparkle emoji!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1316005">
				<div id="div-comment-1316005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">keal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1316005">
			November 17, 2017 at 4:03 am</a>		</div>

		<p>&#8220;so the numeric difference between consecutive selectors is actually 8. The first 64KB of the allocated memory are accessible as 1234:0000 through 1234:FFFF, and the next byte after that is available as 123C:0000&#8221;</p>
<p>Would you ever have a selector 1234 if they come in steps of 8?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1316185">
				<div id="div-comment-1316185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1316185">
			November 17, 2017 at 10:16 am</a>		</div>

		<p>They come in steps of 8, but it doesn&#8217;t start with 0.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1316375">
				<div id="div-comment-1316375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">razil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1316375">
			November 19, 2017 at 8:07 am</a>		</div>

		<p>I read a book windows via c/c++, there was &#8220;64KB off limit&#8221; on 32-bit Windows where the address assigned 0x7FFF0000 &#8211; 7FFFFFFF. what is that mean? what &#8220;64KB off limit&#8221;? there&#8217;s no explanation about this on the book.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1316475">
				<div id="div-comment-1316475" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171113-00/?p=97386#comment-1316475">
			November 20, 2017 at 9:56 am</a>		</div>

		<p>Um, this post is about 16-bit Windows, not 32-bit Windows. Also, <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20141009-00/?p=43883">I already answered it</a>.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

