<html>
<head>
<title>Programmatically controlling which handles are inherited by new processes in Win32</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Programmatically controlling which handles are inherited by new processes in Win32</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 16, 2011 / year-entry #298</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In unix, file descriptors are inherited by child processes by default. This wasn't so much an active decision as it was a consequence of the fork/exec model. To exclude a file descriptor from being inherited by children, you set the FD_CLO­EXEC flag on the file descriptor. Win32 sort of works like that, but backwards, and...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In unix, file descriptors are inherited by child processes by default.
This wasn't so much an active decision as it was a consequence
of the fork/exec model.
To exclude a file descriptor from being inherited by children,
you set the <code>FD_<wbr>CLO&shy;EXEC</code> flag on the file descriptor.
</p>
<p>
Win32 sort of works like that, but backwards, and maybe a little
upside-down.
<a HREF="http://www.gingerrogers.com/about/quotes.html">
And in high heels</a>.
</p>
<p>
In Win32, handles default to <i>not inherited</i>.
Ways to make a handle inherited during
<code>Create&shy;Process</code>
have grown during the evolution of Win32.
</p>
<p>
As far as I can tell, back in the old days,
inheritability of handles was established at handle creation time.
For most handle creation functions, you do this by passing
a <code>SECURITY_<wbr>ATTRIBUTES</code> structure
with <code>bInherit&shy;Handle</code> set
to <code>TRUE</code>.
Functions which created handles from existing objects don't have
a <code>SECURITY_<wbr>ATTRIBUTES</code> parameter,
so they instead have an explicit <code>bInherit&shy;Handle</code>
parameter.
(For examples, see
<code>Open&shy;Event</code> and <code>Duplicate&shy;Handle</code>.)
</p>
<p>
But just marking a handle as inheritable isn't good enough to get
it inherited.
You also have to pass
<code>TRUE</code>
as the
<code>bInherit&shy;Handles</code> parameter to <code>Create&shy;Process</code>.
A handle will be inherited only if
if the <code>bInherit&shy;Handles</code> parameter is
<code>TRUE</code> <u>and</u> the handle is marked as inheritable.
Miss either of those steps, and you don't get your inheritance.
(To make sure you get your inheritance IRL, be nice to your grandmother.)
</p>
<p>
In Windows&nbsp;2000,
Win32 gained the ability to alter the inheritability of a handle
after it is created.
The
<code>Set&shy;Handle&shy;Information</code> function
lets you turn the <code>HANDLE_<wbr>FLAG_<wbr>INHERIT</code>
flag on and off on a handle.
</p>
<p>
But all this inheritability fiddling still had a fatal flaw:
What if two threads within the same process both call
<code>Create&shy;Process</code> but disagree on which handles
they want to be inherited?
For example, suppose you have a function
<code>Create&shy;Process&shy;With&shy;Shared&shy;Memory</code>
whose job it is to
launch a process, passing it
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/12/11/56043.aspx">
a custom-made shared memory block</a>.
Suppose two threads run this function simultaneously.
</p>
<table CELLSPACING=0 CELLPADDING=3>
<tr>
<th>A</th>
<td STYLE="border-left: .75pt solid black; width: .75pt"
        ROWSPAN=5>&nbsp;</td>
<th>B</th>
</tr>
<tr>
<td>CreateFileMapping(inheritable=TRUE)</td>
<td>CreateFileMapping(inheritable=TRUE)</td>
</tr>
<tr>
<td>returns handle H1</td>
<td>returns handle H2</td>
</tr>
<tr>
<td>CreateProcess("A", bInheritHandles=TRUE)</td>
<td>CreateProcess("B", bInheritHandles=TRUE)</td>
</tr>
<tr>
<td>CloseHandle(H1)</td>
<td>CloseHandle(H2)</td>
</tr>
</table>
<p>
What just happened?
Since inheritability is a property of the handle,
processes A&nbsp;and&nbsp;B inherited <i>both</i> handles
H1&nbsp;and&nbsp;H2, even though what we wanted was
for process&nbsp;A to inherit handle&nbsp;H1 and
for process&nbsp;B to inherit handle&nbsp;H2.
</p>
<p>
For a long time, the answer to this problem was the unsatisfactory
"You'll just have to serialize your calls to
<code>Create&shy;Process&shy;With&shy;Shared&shy;Memory</code>
so that thread&nbsp;B won't accidentally cause a handle from
thread&nbsp;A to be inherited by process&nbsp;B."
Actually, the answer was even worse.
You had to serialize all functions that created inheritable
handles from the time the handle was created,
through the call to
<code>Create&shy;Process</code>,
and waiting until after all those inheritable handles were made
no longer inheritable.
</p>
<p>
This was a serious problem since who knows what other parts of
your program are going to call <code>Create&shy;Process</code>
with <code>bInherit&shy;Handles</code> set to <code>TRUE</code>?
Sure you can control the calls that your own code made,
but what about calls from plug-ins or other unknown components?
(This is
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2007/05/02/2365433.aspx">
another case</a> of
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/05/12/10163578.aspx">
kernel-colored glasses</a>.)
</p>
<p>
Windows&nbsp;Vista addresses this problem by allowing you to
pass an explicit list of handles you want the
<code>bInherit&shy;Handles</code> parameter to apply to.
(If you pass an explicit list, then you must pass
<code>TRUE</code> for <code>bInherit&shy;Handles</code>.)
And as before, for a handle to be inherited, it must be
also be marked as inheritable.
</p>
<p>
Passing the list of handles you want to inherit is a multi-step
affair.
Let's walk through it:
</p>
<pre>
BOOL CreateProcessWithExplicitHandles(
  __in_opt     LPCTSTR lpApplicationName,
  __inout_opt  LPTSTR lpCommandLine,
  __in_opt     LPSECURITY_ATTRIBUTES lpProcessAttributes,
  __in_opt     LPSECURITY_ATTRIBUTES lpThreadAttributes,
  __in         BOOL bInheritHandles,
  __in         DWORD dwCreationFlags,
  __in_opt     LPVOID lpEnvironment,
  __in_opt     LPCTSTR lpCurrentDirectory,
  __in         LPSTARTUPINFO lpStartupInfo,
  __out        LPPROCESS_INFORMATION lpProcessInformation,
    // here is the new stuff
  __in         DWORD cHandlesToInherit,
  __in_ecount(cHandlesToInherit) HANDLE *rgHandlesToInherit)
{
 BOOL fSuccess;
 BOOL fInitialized = FALSE;
 SIZE_T size = 0;
 LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList = NULL;

 fSuccess = cHandlesToInherit < 0xFFFFFFFF / sizeof(HANDLE) &amp;&amp;
            lpStartupInfo-&gt;cb == sizeof(*lpStartupInfo);
 if (!fSuccess) {
  SetLastError(ERROR_INVALID_PARAMETER);
 }
 if (fSuccess) {
  fSuccess = InitializeProcThreadAttributeList(NULL, 1, 0, &amp;size) ||
             GetLastError() == ERROR_INSUFFICIENT_BUFFER;
 }
 if (fSuccess) {
  lpAttributeList = reinterpret_cast&lt;LPPROC_THREAD_ATTRIBUTE_LIST&gt;
                                (HeapAlloc(GetProcessHeap(), 0, size));
  fSuccess = lpAttributeList != NULL;
 }
 if (fSuccess) {
  fSuccess = InitializeProcThreadAttributeList(lpAttributeList,
                    1, 0, &amp;size);
 }
 if (fSuccess) {
  fInitialized = TRUE;
  fSuccess = UpdateProcThreadAttribute(lpAttributeList,
                    0, PROC_THREAD_ATTRIBUTE_HANDLE_LIST,
                    rgHandlesToInherit,
                    cHandlesToInherit * sizeof(HANDLE), NULL, NULL);
 }
 if (fSuccess) {
  STARTUPINFOEX info;
  <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2005/06/28/433341.aspx">ZeroMemory</a>(&amp;info, sizeof(info));
  info.StartupInfo = *lpStartupInfo;
  info.StartupInfo.cb = sizeof(info);
  info.lpAttributeList = lpAttributeList;
  fSuccess = CreateProcess(lpApplicationName,
                           lpCommandLine,
                           lpProcessAttributes,
                           lpThreadAttributes,
                           bInheritHandles,
                           dwCreationFlags | EXTENDED_STARTUPINFO_PRESENT,
                           lpEnvironment,
                           lpCurrentDirectory,
                           &amp;info.StartupInfo,
                           lpProcessInformation);
 }
 
 if (fInitialized) DeleteProcThreadAttributeList(lpAttributeList);
 if (lpAttributeList) HeapFree(GetProcessHeap(), 0, lpAttributeList);
 return fSuccess;
}
</pre>
<p>
After some initial sanity checks, we start doing real work.
</p>
<p>
Initializing a <code>PROC_<wbr>THREAD_<wbr>ATTRIBUTE_<wbr>LIST</code>
is a two-step affair.
First you call
<code>Initialize&shy;Proc&shy;Thread&shy;Attribute&shy;List</code>
with a <code>NULL</code> attribute list in order to determine how
much memory you need to allocate for a one-entry attribute list.
After allocating the memory, you call
<code>Initialize&shy;Proc&shy;Thread&shy;Attribute&shy;List</code>
a second time to do the actual initialization.
</p>
<p>
After creating the attribute list, you set the one entry
by calling
<code>Update&shy;Proc&shy;Thread&shy;Attribute&shy;List</code>.
</p>
<p>
And then it's off to the races.
Put that attribute list in a <code>STARTUP&shy;INFO&shy;EX</code>
structure, set the
<code>EXTENDED_<wbr>STARTUPINFO_<wbr>PRESENT</code> flag,
and hand everything off to <code>Create&shy;Process</code>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-953683">
				<div id="div-comment-953683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953683">
			December 16, 2011 at 7:19 am</a>		</div>

		<p>I don&#39;t understand the point of inheritable handles; maybe it makes more sense on Unix, but I am not a Unix guy. &nbsp;The child process needs a way to know what the handle values are so you still have to use some kind of IPC to communicate that (even if it&#39;s just via the command line). &nbsp;That being the case, what is the benefit of using inheritable handles over manually invoking DuplicateHandle() other than convenience?</p>
<div class="post">[<i>Duplicate&shy;Handle may not be practical if the parent and child run in different security contexts. And besides, unix has it. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-953713">
				<div id="div-comment-953713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953713">
			December 16, 2011 at 7:56 am</a>		</div>

		<p>Pipes, John, Pipes. Not win32 pipes, but unix pipes. Quick/simple IPC between parent/child.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-953733">
				<div id="div-comment-953733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953733">
			December 16, 2011 at 8:10 am</a>		</div>

		<p>BTW socket handles (handles to DeviceAfd opened by winsock) are always inheritable by default and seems this is not changable, and this caused few very interesting (read &#8211; hard to find) bugs in my experince. The most complicated was heap corruption caused by overlapped socket operation that was not cancelled as app expected after called closesocket cause this app started another process and that another process inherited socket handle. Since operation was not cancelled, but app released memory (after proper closesocket) used for OVERLAPPED structure &#8211; memory got randomly corrupted. Or just not corrupted and nothing visible happened if memory was decommited on the time when pending operation complete, cause it is kernel who writes into that memory.</p>
<p>BTW it was svchost process, that hosts many services and even 3rd party dlls, one of which (ours) called CreateProcess wit bInheritehandles set to TRUE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-953753">
				<div id="div-comment-953753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953753">
			December 16, 2011 at 8:18 am</a>		</div>

		<p>I suppose the upshot of all this is it might end up being easier in the end to use DuplicateHandleEx to transit handles between processes. Or maybe not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-953763">
				<div id="div-comment-953763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">VS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953763">
			December 16, 2011 at 10:03 am</a>		</div>

		<p>WOW! Killer{R} &#8211; good point for a blog entry ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-953783">
				<div id="div-comment-953783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">poday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953783">
			December 16, 2011 at 11:35 am</a>		</div>

		<p>I love these API archaeology articles. &nbsp;Seeing how an API has evolved/extended to cover more functionality is fascinating. &nbsp;Every step is usually the best solution for the problem(s) being faced by the current tech generation but by the end the solution is significantly more complicated then the first generation&#39;s solution to a problem but still has to retain backwards compatibility.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-953793">
				<div id="div-comment-953793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953793">
			December 16, 2011 at 11:46 am</a>		</div>

		<p>Although you don&#39;t mention it, it sounds like the inheritable handles list solves another long-standing problem: the all-or-nothing nature of standard handle inheritance. &nbsp;If I spawn a new console process from a non-console application, that process gets the new console&#39;s input &amp; output as its stdin, stdout, and stderr by default. &nbsp;But, in Windows XP and earlier, if I wanted to redirect the new process&#39;s stdout to a pipe back to my original program, I needed to set the standard handles to inherited by passing bInheritHandles = TRUE to CreateProcess. &nbsp;I couldn&#39;t get redirected stdout but default stdin and stderr in my new process. &nbsp;Now this limitation is solved &#8212; set stdout to inherited, stdin and stderr to non-inherited in the PROC_THREAD_ATTRIBUTE_HANDLE_LIST. &nbsp;Right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-953813">
				<div id="div-comment-953813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953813">
			December 16, 2011 at 2:06 pm</a>		</div>

		<p>@Karellen Windows doesn&#39;t have fork.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-953823">
				<div id="div-comment-953823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953823">
			December 16, 2011 at 2:47 pm</a>		</div>

		<p>Speaking of fork and Windows, Cygwin&#39;s fork implementation is somewhat interesting, if you&#39;re curious.</p>
<p><a rel="nofollow" target="_new" href="http://www.cygwin.com/cygwin-ug-net/highlights.html" rel="nofollow">http://www.cygwin.com/&#8230;/highlights.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-953703">
				<div id="div-comment-953703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953703">
			December 16, 2011 at 7:56 am</a>		</div>

		<p>FD_CLOEXEC doesn&#39;t stop file descriptors being inherited by child processes across a fork(). It stops file descriptors from being persistent across replacing the current process with a new one during exec().</p>
<p>Part of the point is that you can fork() without exec(). You can create a child process with an exact copy of the same address space as the parent (except for the return value of fork()), and a copy of the file descriptor table, and do multiprocessing in the child without the worry of synchronisation/mutexes. You can communicate between the child and parent using a pipe you&#39;d set up before, because the child and parent know which are which, and therefore whether they should be read()ing from or write()ing to it.</p>
<p>The child process can close any file descriptors it knows it won&#39;t be needing to use, like the end of the pipe it&#39;s not interested in, and the parent likewise.</p>
<p>Similarly, if you *are* doing an exec(), the child is capable of calling close() on all the file descriptors that should not be inherited by the replacement process. Setting FD_CLOEXEC is not needed.</p>
<p>Except for libraries. The problem is with libraries, which may either create file descriptors, or fork()/exec() themselves, as an implementation detail that the application is not aware of. So child processes might not be aware of all the file descriptors they&#39;re supposed to close before exec()ing. Which is why FD_CLOEXEC is now available.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-953833">
				<div id="div-comment-953833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953833">
			December 16, 2011 at 3:57 pm</a>		</div>

		<p>@Random832 Win32 doesn&#39;t have fork, but fork can be implemeted on NT services &#8211; NtCreateProcess can create process from parent&#39;s address space instead of file (section) + handles&amp;views inheritance == fork</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-953873">
				<div id="div-comment-953873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953873">
			December 17, 2011 at 1:10 am</a>		</div>

		<p>Why does a handle supplied as an inherit list have to be marked as inherited? In order to get safe, concurrent CreateProcess, every CreateProcess must <em>either</em> pass FALSE for bInheritHandles <em>or</em> use an explicit HANDLE list.</p>
<p>If PROC_THREAD_ATTRIBUTE_HANDLE_LIST caused inheritable and non-inheritable handles alike to be inherited, then a single process could safely host both old- and new-style handle inheritance. As it is, it&#39;s an all-or-nothing affair because someone using PROC_THREAD_ATTRIBUTE_HANDLE_LIST needs to mark all inherited handled inheritable, and these inherited handles might be accidentally included in a subprocess by an old-fashioned inherit-all CreateProcess call.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-953883">
				<div id="div-comment-953883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953883">
			December 17, 2011 at 12:09 pm</a>		</div>

		<p>@Dan</p>
<p>Are you also the kind of person who would rather all privileges be enabled on an access token so you wouldn&#39;t need to call AdjustTokenPrivilege to use them? Or maybe that functions which use them automatically enable them?</p>
<p>If you did do as you want to happen, just imagine what tracking down a bug where you pass the wrong handle to the new process would be like. It makes much more sense for Windows to treat this situation as an error, and it is much more consistant with the model currently in place. That model is that a handle must be marked as inheritable before a process will inherit it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-953903">
				<div id="div-comment-953903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953903">
			December 18, 2011 at 2:23 am</a>		</div>

		<p>@Crescens2k: Your argument is bogus, sorry. &quot;That model is that a handle must be marked as inheritable before a process will inherit it.&quot; So what? The whole point of the new handle list for CreateProcess is to EXPLICITLY give a handle to the other process. This is a local solution for a local problem. By still requiring the handle to be marked as inheritable, you want to use a global solution for a local problem (this marking counts for all threads in your process), which is clearly wrong. I&#39;m with Dan on that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-953913">
				<div id="div-comment-953913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953913">
			December 18, 2011 at 10:44 am</a>		</div>

		<p>Those sure are a lot of hoops you have to jump through to solve this unusual problem. &nbsp;Don&#39;t you also have to call DeleteProcThreadAttributeList when you&#39;re done?</p>
<p>On a tangential note, I prefer using goto&#39;s to handle code like this that can fail in a number of different ways. It avoids a dozen nested if statements and the pattern shown here of if(fSuccess) { fSuccess = doNextStep(); } over and over. A good optimizing compiler should be able to optimize those into singule jumps to the appropriate location (instead of a series of jumps and tests that will always fail), but even so, I think it&#39;s harder to read.</p>
<div class="post">[<i>Good catch on the missing Delete. Fixed. and yes, it&#39;s a bunch of hoops but at least it&#39;s a generic set of hoops that works for the other attributes too. You can wrap it into a single helper if you like. Hm, that sounds like an interesting topic for a future entry. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-953923">
				<div id="div-comment-953923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953923">
			December 18, 2011 at 11:10 am</a>		</div>

		<p>@Someone</p>
<p>Your argument is bogus, sorry. This is feels less like a global solution for a local problem and more like a double redundency on the local solution. It is the same as how your user privileges mostly require you to enable them before you can do something like take control of arbritrary files if you are an administrator.</p>
<p>I&#39;ll admit that CreateProcess failing with error 87 (ERROR_INVALID_PARAMETER) is annoying because it is hard to figure out WHICH parameter it is referring to, but IMO, it is better that the call to CreateProcess fails with an error when you try to pass in the wrong handle compared to a really annoying debugging session. This is saying to Windows, &quot;Yes I&#39;m really sure I want to do this&quot;, and it is the same model used in other places.</p>
<p>Without a doubt, if Microsoft had done what you wanted, there would be complaints from people bitten by this that there is less safety in this method. As normal Microsoft are in the situation of them being damned if they do and damned if they don&#39;t. I just prefer the situation where Windows checks that you are doing things right.</p>
<p>(See, I can also claim that your argument is bogus when it is just a case of me not agreeing with your opinion. But I honestly don&#39;t see your view as wrong, where it seems like you see mine as wrong like &quot;Your argument is bogus&quot; heavily implies).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-953943">
				<div id="div-comment-953943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953943">
			December 18, 2011 at 3:22 pm</a>		</div>

		<p>@Crescens2k So you&#39;re saying it&#39;s likely that people accidentally &quot;explicitly&quot; add a handle to the list of inherited handles? E.g.: &quot;So I want the process to inherit HandleA and B, so I&#39;ll just write.. HandleA, HandleC, HandleB &#8211; yep perfect&quot;.</p>
<p>Seems extremely far fetched sorry, I&#39;m with Dan and Someone there, a local solution to a local problem has less problematic side effects (&quot;What happens if I mark this handle inheritable in my gigantic, ancient code base?&quot;) and follows the DRY principle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-953953">
				<div id="div-comment-953953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953953">
			December 18, 2011 at 4:18 pm</a>		</div>

		<p>@voo</p>
<p>If you can&#39;t think of a way that this can accidentally happen then it is possible that you haven&#39;t managed to sink to a low enough level.</p>
<p>Of course, any example that I&#39;d write would easily be dismissed as people can&#39;t be that stupid, but again that is just a case of you can&#39;t believe people would do something like this. But it isn&#39;t a case of the explicitly adding, but more along the lines of typoing a variable name and putting it in instead of an intended handle, or you make an array of handles multi purpose (to ease using WaitForMultipleObjects) putting the inheritable handles first and pass the wrong upper bound or when copying them into the array that you use with the handle list, you give the wrong indicese. Or if you aren&#39;t smart enough to put the inheritable handles first, you start from the wrong index completely.</p>
<p>Unfortunately, it seems to be common that people can&#39;t imagine other programmers sinking to the level that you would need this kind of protection, but unfortunately we have TDWTF and other places to counter that. Unfortunately, a lot of programmers are lazy and are capable of stupid mistakes. So while you may think this kind of error isn&#39;t possible, it would seem that someone somewhere thinks otherwise.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-953963">
				<div id="div-comment-953963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-953963">
			December 18, 2011 at 11:06 pm</a>		</div>

		<p>@poday: This is yet an example of an API where features are added without thinking ahead of time.</p>
<p>When you add a public interface/method/whatever that other should use, ask yourself: How is this going to look/being expanded/be used in 5-15 years? If you cannot answer that, you shouldn&#39;t be doing software design to begin with. Windows is usually good in this regard, heavy-weight enterprise software is usually a nightmare in this regard.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-954083">
				<div id="div-comment-954083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-954083">
			December 19, 2011 at 10:41 am</a>		</div>

		<p>@Crescens2k then clearly the solution is to have a &quot;can inherit&quot; flag [which has no effect on its own, unless either the file handle is in a list or the old-style CreateProcess is used] that can be set separately from (but is implied by, obviously) the old-style &quot;inherit with old-style CreateProcess&quot; flag.</p>
<p>Requiring the latter to be set means this explicit function solves no problems and is therefore worthless.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-954313">
				<div id="div-comment-954313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873#comment-954313">
			December 20, 2011 at 10:09 pm</a>		</div>

		<p>I once solved this race condition in a Linux and Mac OS application by calling fork(), then closing all unnecessary open handles in the child before calling exec(). &nbsp;I listed the contents of the /proc/self/fd (Linux) or /dev/fd (Mac OS) pseudo-directories to get a list of handles, and closed any that weren&#39;t recognized.</p>
<p>Something that is quite annoying in Windows is when an AppInit DLL decides to CreateProcess from within your process, and you can&#39;t control this at all. &nbsp;Since there is no way to disable the automatic heritability of socket handles (short of doing evil things), sometimes sockets wouldn&#39;t get disconnected because some child process still had them open.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

