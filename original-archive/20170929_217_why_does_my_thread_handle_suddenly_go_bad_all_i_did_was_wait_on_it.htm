<html>
<head>
<title>Why does my thread handle suddenly go bad? All I did was wait on it!</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does my thread handle suddenly go bad? All I did was wait on it!</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 29, 2017 / year-entry #218</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The scary world of _beginthread.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer reported that they had a very strange bug,
where waiting on a thread handle causes it to become invalid.
Here's a code fragment:
</p>
<pre>
DWORD waitResult = WaitForSingleObject(hThread, INFINITE);
assert(waitResult == WAIT_OBJECT_0); // assertion passes

DoSomeCleanup();

CloseHandle(hThread);
</pre>
<p>
That final call to <code>Close&shy;Handle</code>
results in a <code>STATUS_</code><code>INVALID_</code><code>HANDLE</code> exception
when run in the debugger.
How did the handle become invalid?
We sucessfully waited on it just a few lines earlier.
</p>
<p>
There wasn't enough information to go on, so we had to make
some guesses.
Perhaps <code>hThread</code> was already closed,
and it got recycled to refer to some unrelated kernel object,
and it's that unrelated object that you're waiting on when you
call <code>Wait&shy;For&shy;Single&shy;Object</code>.
And then when you do some cleanup, that causes the unrelated handle
to be closed, which means that the numeric value of <code>hThread</code>
now refers to an invalid handle.
</p>
<p>
The customer did some investigation and discovered that they
were obtaining the thread handle from the
<a HREF="https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/beginthread-beginthreadex">
<code>_begin&shy;thread</code> function</a>.
The handle returned by the
<code>_begin&shy;thread</code> function
is explicitly documented as being closed by the
<code>_end&shy;thread</code> function.
</p>
<blockquote CLASS=q><p>
<code>_end&shy;thread</code> automatically closes the thread handle,
whereas <code>_end&shy;thread&shy;ex</code> does not.
Therefore, when you use
<code>_begin&shy;thread</code>
and
<code>_end&shy;thread</code>,
do not explicitly close the thread handle
by calling the Win32
<code>Close&shy;Handle</code> API.
This behavior differs from the Win32
<code>Exit&shy;Thread</code> API. 
</p>
</blockquote>
<p>
Basically, the deal is that the <code>_begin&shy;thread</code>
function returns a handle to the created thread,
but does not give you ownership of the handle.
Ownership of that handle remains with the thread itself,
and the thread automatically closes the handle when it exits.
(Not mentioned in the MSDN documentation for
<code>_begin&shy;thread</code> is that the runtime automatically
calls
<code>_end&shy;thread</code> if the thread function returns normally.
This detail is mentioned
<a HREF="https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/endthread-endthreadex">
in the documentation for
<code>_end&shy;thread</code></a>,
which is probably a better place for it anyway.)
</p>
<p>
Basically, the handle returned by the
<code>_begin&shy;thread</code> function is useless.
You don't know how long it's valid,
and it might even be invalid by the time you even receive it!
</p>
<p>
Switching to
<code>_end&shy;thread&shy;ex</code> fixed the problem.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1310746">
				<div id="div-comment-1310746" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115#comment-1310746">
			September 29, 2017 at 7:40 am</a>		</div>

		<p>What happens when one simply returns from the thread callback? I&#8217;d suspect the code gluing between _beginthread() and its callback calls _endthread() upon return, while the code between _beginthreadex() and its callback calls _endthreadex() instead?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1310755">
				<div id="div-comment-1310755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115#comment-1310755">
			September 29, 2017 at 9:04 am</a>		</div>

		<p>A hollow voice whispered CreateThread().</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1310756">
				<div id="div-comment-1310756" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115#comment-1310756">
			September 29, 2017 at 10:01 am</a>		</div>

		<p>CreateThread is only useful if you&#8217;re not using the C Runtime Library.   _beginthread() initializes the CRT.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1310785">
				<div id="div-comment-1310785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115#comment-1310785">
			September 29, 2017 at 3:59 pm</a>		</div>

		<p>&gt; _beginthread() initializes the CRT.</p>
<p>Which CRT? A process can have more than one CRT, and the thread function can even call functions from several different C runtimes. If CreateThread() is broken, then _beginthread() is broken too.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1310786">
				<div id="div-comment-1310786" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115#comment-1310786">
			September 29, 2017 at 5:15 pm</a>		</div>

		<p>I&#8217;m in the process of reducing out MS&#8217;s CRT. It&#8217;s pretty much useless for Unicode aware applications. wsnprintfW is in one of the Windows DLLs and the dozen platform functions are quite writable in C or asm.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1310795">
				<div id="div-comment-1310795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115#comment-1310795">
			September 29, 2017 at 5:54 pm</a>		</div>

		<p>The CRT has been self-initializing for, what, more than a decade now?  As far as I know, the only remaining advantage to _beginthread[ex] is that it supposedly handles running out of memory better, but in practice very few applications will survive running out of memory anyway.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-4 parent" id="comment-1310835">
				<div id="div-comment-1310835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115#comment-1310835">
			September 30, 2017 at 1:54 pm</a>		</div>

		<p>When the UCRT refactor happened, I dug through the source for fun. Yes, I know.<br />
Anyway, if a thread tries to access per thread data but TlsGetValue/FlsGetValue returns null, then it will initialise the per thread data there.<br />
If the Fls functions are available then it will prefer those because they have the advantage of cleaning up the per thread data without effort. On Windows XP, creating a thread with CreateThread could leak memory.<br />
Well anyway, while this is all implementation details, it is still interesting.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1310845">
				<div id="div-comment-1310845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115#comment-1310845">
			September 30, 2017 at 3:46 pm</a>		</div>

		<p>Oh, yes, the memory leaks are another edge case, I forgot about that.  But keep in mind that they&#8217;re small, and only occur when using a static runtime, and only on obsolete versions of Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1310766">
				<div id="div-comment-1310766" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115#comment-1310766">
			September 29, 2017 at 10:36 am</a>		</div>

		<p>&#8220;runtime automatically calls _end­thread if the thread function returns normally&#8221;<br />
Does this statement holds true for some older compiler?<br />
Like VC++ 6.0?<br />
Just curious.<br />
I see _endthread all over my code (which I inherited).<br />
Threads just call it before returning.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1310775">
				<div id="div-comment-1310775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Buster</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115#comment-1310775">
			September 29, 2017 at 11:08 am</a>		</div>

		<p>AsmGuru62, no thread calls _endthread before returning, or in other words, no thread returns after calling _endthread. Indeed, a thread does nothing at all after calling _endthread, because _endthread ends the thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-2" id="comment-1310837">
				<div id="div-comment-1310837" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115#comment-1310837">
			September 30, 2017 at 2:01 pm</a>		</div>

		<p>If the thread calls _beginthread then yes it should still hold true.<br />
It is documented in the documentation for _endthread, even in the VC6 version.<br />
<a href="https://msdn.microsoft.com/en-us/library/aa246693(v=vs.60)" rel="nofollow">https://msdn.microsoft.com/en-us/library/aa246693(v=vs.60)</a>.aspx<br />
It has a chance to do this because the thread routine that is passed into _beginthread uses the __cdecl calling convention where CreateThread uses __stdcall. So there needs to be a CRT thread start routine to call into yours. Your thread would then return to this and the call to _endthread should be in there.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1310825">
				<div id="div-comment-1310825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua Schaeffer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115#comment-1310825">
			September 30, 2017 at 5:36 am</a>		</div>

		<p>Instead of automatically closing the handle, how about automatically never opening the handle?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-john-doe-the even thread-even depth-1 parent" id="comment-1311035">
				<div id="div-comment-1311035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/John+Doe%2C+The' rel='external nofollow' class='url'>John Doe, The</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115#comment-1311035">
			October 2, 2017 at 2:25 pm</a>		</div>

		<p>How does the C runtime interop with bare Win32 threads or other runtimes?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1311225">
				<div id="div-comment-1311225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115#comment-1311225">
			October 4, 2017 at 7:47 am</a>		</div>

		<p>Badly.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

