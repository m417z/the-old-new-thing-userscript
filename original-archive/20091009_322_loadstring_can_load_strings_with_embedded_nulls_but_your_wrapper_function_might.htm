<html>
<head>
<title>LoadString can load strings with embedded nulls, but your wrapper function might not</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>LoadString can load strings with embedded nulls, but your wrapper function might not</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 9, 2009 / year-entry #323</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20091009-00/?p=16423</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Whenever somebody reports that the SHFileOperation function or the lpstrFilter member of the OPENFILENAME structure is not working, my psychic powers tell me that they failed to manage the double-null-terminated strings. Since string resources take the form of a counted string, they can contain embedded null characters, since the null character is not being used...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Whenever somebody reports that the
<code>SHFileOperation</code> function
or the <code>lpstrFilter</code> member of the
<code>OPENFILENAME</code> structure
is not working,
my psychic powers tell me that they
<a href="http://shellrevealed.com/blogs/shellblog/archive/2006/09/28/Common-Questions-Concerning-the-SHFileOperation-API_3A00_-Part-2.aspx" mce_href="http://shellrevealed.com/blogs/shellblog/archive/2006/09/28/Common-Questions-Concerning-the-SHFileOperation-API_3A00_-Part-2.aspx">
failed to manage
the double-null-terminated strings</a>.
</p>
<p>
Since
<a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/30/65013.aspx" mce_href="http://blogs.msdn.com/oldnewthing/archive/2004/01/30/65013.aspx">
string resources take the form of a counted string</a>,
they can contain embedded null characters,
since the null character is not being used as the string terminator.
The <code>LoadString</code> function knows about this,
but other functions might not.
</p>
<p>
Here's one example:
</p>
<pre>TCHAR szFilters[80];<br><i>strcpy_s(szFilters, 80, "Text files\0*.txt\0All files\0*.*\0");<br>// ... or ...<br>strlcpy(szFilters, "Text files\0*.txt\0All files\0*.*\0", 80);</i><br></pre>
<p>
The problem is that you're using a function which operates
on null-terminated strings
but you're giving it a double-null-terminated string.
Of course, it will stop copying at the first null terminator,
and the result is that <code>szFilters</code> is not a valid
double-null-terminated string.
</p>
<p>
Here's another example:
</p>
<pre><i>sprintf_s(szFilters, 80, "%s\0*.txt\0%s\0*.*\0", "Text files", "All files");</i><br></pre>
<p>
Same thing here.
Functions from the
<code>sprintf</code> family take a null-terminated
string as the format string.
If you "embed" a null character into the format string,
the <code>sprintf</code> function will treat it as the end of the
format string and stop processing.
</p>
<p>
Here's a more subtle example:
</p>
<pre>CString strFilter;<br>strFilter.LoadString(g_hinst, IDS_FILE_FILTER);<br></pre>
<p>
There is no obvious double-null-termination bug here,
but there is if you look deeper.
</p>
<pre>BOOL CString::LoadString(UINT nID)<br>{<br>  // try fixed buffer first (to avoid wasting space in the heap)<br>  TCHAR szTemp[256];<br>  int nCount =  sizeof(szTemp) / sizeof(szTemp[0]);<br>  int nLen = _LoadString(nID, szTemp, nCount);<br>  if (nCount - nLen &gt; CHAR_FUDGE)<br>  {<br>    *this = szTemp;<br>    return nLen &gt; 0;<br>  }<br> <br>  // try buffer size of 512, then larger size until entire string is retrieved<br>  int nSize = 256;<br>  do<br>  {<br>    nSize += 256;<br>    nLen = _LoadString(nID, GetBuffer(nSize - 1), nSize);<br>  } while (nSize - nLen &lt;= CHAR_FUDGE);<br>  ReleaseBuffer();<br> <br>  return nLen &gt; 0;<br>}<br></pre>
<p>
Observe that this function loads the string into a temporary
buffer, and then if it succeeds, stores the result via the
<code>operator=</code> operator,
which assumes a null-terminated string.
If your string resource contains embedded nulls,
the <code>operator=</code> operator will stop at the first null.
</p>
<p>
The mistake here was taking a class designed for null-terminated strings
and using it for something that isn't a null-terminated string.
After all, it's called a <code>CString</code> and not a
<code>CDoubleNullTerminatedString</code>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-776573">
				<div id="div-comment-776573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Raymundo Chennai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091009-00/?p=16423#comment-776573">
			October 9, 2009 at 1:47 pm</a>		</div>

		<p>As an occassional critic of your approach to blogging, I would like to sincerely compliment you on this post and the one that preceded it in the series. &nbsp;This interesting material is presented clearly without any express or implied denunciation of the idiots whose errors led you to make the posts. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776603">
				<div id="div-comment-776603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.uofr.net/~jdrake/' rel='external nofollow' class='url'>Joshua Drake</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091009-00/?p=16423#comment-776603">
			October 9, 2009 at 1:54 pm</a>		</div>

		<p>Personally I enjoy it when you denounce idiots, even when I am the idiot in question, or at least one of their kin.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776613">
				<div id="div-comment-776613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">string?</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091009-00/?p=16423#comment-776613">
			October 9, 2009 at 1:55 pm</a>		</div>

		<p>What does &quot;String&quot; in LoadString refer to? A arbitrary byte buffer?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776663">
				<div id="div-comment-776663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091009-00/?p=16423#comment-776663">
			October 9, 2009 at 5:44 pm</a>		</div>

		<p>it refers to a NULL terminated string</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776723">
				<div id="div-comment-776723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">vobject</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091009-00/?p=16423#comment-776723">
			October 10, 2009 at 3:28 am</a>		</div>

		<p>This means that the ::LoadString() can handle embedded nulls, but MFC CString::LoadString() cannot?</p>
<p>Thanks for telling :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776763">
				<div id="div-comment-776763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lawrence</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091009-00/?p=16423#comment-776763">
			October 10, 2009 at 2:40 pm</a>		</div>

		<p>I just can&#8217;t agree with your last sentence. By that logic, why is it called LoadString and not LoadDoubleNullTerminatedString?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776773">
				<div id="div-comment-776773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">someone else</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091009-00/?p=16423#comment-776773">
			October 10, 2009 at 3:34 pm</a>		</div>

		<p>Well, it&#8217;s not called LoadCString either.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776793">
				<div id="div-comment-776793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091009-00/?p=16423#comment-776793">
			October 10, 2009 at 5:21 pm</a>		</div>

		<p>Well, maybe it should have been called LoadStrings.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776803">
				<div id="div-comment-776803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabest</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091009-00/?p=16423#comment-776803">
			October 10, 2009 at 6:08 pm</a>		</div>

		<p>CString was handling 0s fine until vs2008 or sp1. It was a breaking change that made me fix up my code here and there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776823">
				<div id="div-comment-776823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091009-00/?p=16423#comment-776823">
			October 11, 2009 at 10:32 am</a>		</div>

		<p>I have had pretty good luck with ATL CComBSTR using .AppendBSTR() and .AppendBytes() to build double-null-terminated strings. Both of those methods seem to be null-friendly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776873">
				<div id="div-comment-776873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091009-00/?p=16423#comment-776873">
			October 12, 2009 at 8:14 am</a>		</div>

		<p>In MSVC 6 the CString class certainly properly handles the strings with zeroes inside. If newer versions don&#8217;t then it&#8217;s a new bug.</p>
<p>In MSVC 6 this:</p>
<p>&lt;code&gt;</p>
<p>char b[] = &quot;a b c &quot;;</p>
<p>CString s( b, sizeof( b ) );</p>
<p>printf( &quot;%dn&quot;, s.GetLength() );</p>
<p>CString t;</p>
<p>t = s;</p>
<p>printf( &quot;%dn&quot;, t.GetLength() );</p>
<p>&lt;/code&gt;</p>
<p>writes 7 and 7 (as it should) and t = s; line goes to the const CString&amp; CString::operator=(const CString&amp; stringSrc) which either just copies the pointer and increments the reference count or does memcpy without doing any strlen equivalent since it has proper length in CStringData member nDataLength.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776883">
				<div id="div-comment-776883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091009-00/?p=16423#comment-776883">
			October 12, 2009 at 8:27 am</a>		</div>

		<p>@acq</p>
<p>that&#8217;s not the point. the point is some parts of the system rely on srings of the form &quot;a b c  &quot;;</p>
<p>the question is all arround the support for the last &quot; &quot; because if it is not there, those parts of the system will think the string isn&#8217;t terminated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-776893">
				<div id="div-comment-776893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091009-00/?p=16423#comment-776893">
			October 12, 2009 at 8:30 am</a>		</div>

		<p>@Dave: BSTRs are designed to be arbitrary binary blobs, thus their tolerance for nuls. &nbsp;They hide the length just before the string starts. &nbsp;Of course, this only works as long as you pass them to BSTR functions; functions that want LPWSTRs or misuse the BSTR identifier (or the COM wrapper) will not work properly if they start looking for nuls. &nbsp;And many functions start assuming they can truncate the string with a nul, or rewrite the string as they would a C style string, which means the next BSTR-aware function that gets such a mangled string will copy all the garbage left behind.</p>
<p>In summary: Only write APIs for BSTRs if you know how they work. &nbsp;C may think of them as equivalent to LPWSTRs, but using them as such is a recipe for disaster.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-776913">
				<div id="div-comment-776913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091009-00/?p=16423#comment-776913">
			October 12, 2009 at 8:45 am</a>		</div>

		<p>to joe: I was referring to Raymond&#8217;s: &quot;Observe that this function loads the string into a temporary buffer, and then if it succeeds, stores the result via the operator= operator, which assumes a null-terminated string. If your string resource contains embedded nulls, the operator= operator will stop at the first null.&quot;</p>
<p>In MSVC 6 CString class both in MFC and in ATL doesn&#8217;t assume null-terminated string in operator=. The original authors of CString tried to implement the class to work properly with strings which are not zero terminated, making possible processing of the strings with as many zeroes inside as anybody needs. But I see now, the problem is in lines:</p>
<p> &nbsp;TCHAR szTemp[256];</p>
<p> (&#8230;)</p>
<p> &nbsp;*this = szTemp;</p>
<p>instead the assignment line should have been</p>
<p>CString r( szTemp, nLen );</p>
<p>*this = r;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

