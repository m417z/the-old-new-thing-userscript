<html>
<head>
<title>Why can't I get FormatMessage to load my resource string?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why can&#8217;t I get FormatMessage to load my resource string?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 29, 2008 / year-entry #71</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080229-00/?p=23263</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A common mistake I see is people confusing message tables with string resources. This basically shows up in one place: FormatMessage. The folks who were designing Win32 decided that plain string resources weren't fancy enough, so they invented message tables, which is just another way of storing strings in resources. Why string resources weren't good...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A common mistake I see is people confusing message tables
with string resources.
This basically shows up in one place:
<code>FormatMessage</code>.
</p>
<p>
The folks who were designing Win32
decided that plain string resources weren't fancy enough,
so they invented message tables, which is just another way
of storing strings in resources.
Why string resources weren't good enough I don't know.
</p>
<p>
The <code>FormatMessage</code> function accepts a message number,
which is looked up in a message table,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2007/05/29/2955171.aspx">
not in a string resource</a>.
In other words, if you have something like this:
</p>
<pre>
#define IDS_MYMESSAGE 100

STRINGTABLE BEGIN
    IDS_MYMESSAGE "Hello, %1"
END

TCHAR szBuffer[256];
FormatMessage(FORMAT_MESSAGE_FROM_HMODULE, g_hInstance,
              IDS_MYMESSAGE, 0, szBuffer, 256, Arguments);
</pre>
<p>
the call to <code>FormatMessage</code> will fail
because you passed in a string resource identifier, not a message
identifier.
Since
<a HREF="http://en.wikipedia.org/wiki/Hyperbole">
nobody</a>
actually uses message tables,
you almost certainly want to pass the
<code>FORMAT_MESSAGE_FROM_STRING</code> flag.
</p>
<pre>
TCHAR szMessage[256];
LoadString(g_hInstance, IDS_MYMESSAGE, szMessage, 256);
TCHAR szBuffer[256];
FormatMessage(FORMAT_MESSAGE_FROM_STRING, szMessage,
              IDS_MYMESSAGE, 0, szBuffer, 256, Arguments);
</pre>
<p>
The only place you will normally want to format a message from
a message table is when you want to access the system message table
to get the text associated with an error code.
(But
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2007/11/28/6564257.aspx">
don't forget the
<code>FORMAT_MESSAGE_IGNORE_INSERTS</code> flag</a>!)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-605603">
				<div id="div-comment-605603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080229-00/?p=23263#comment-605603">
			February 29, 2008 at 10:24 am</a>		</div>

		<p>One thing I&#8217;ve noticed in message tables that string resources don&#8217;t apparently offer is the option to build the message table either as ANSI. When you have a very large number of messages and you don&#8217;t need non-ANSI characters it can be a significant space-saver.</p>
<p>Alarm bells might ring over using ANSI encoding &#8211; what if you need some non-ANSI characters in the future? Fortunately, all you have to do is flip the flag in the message compiler. FormatMessage() checks the resource to see whether it needs to do the ANSI to Unicode conversion and does the right thing. You can even have a message DLL for one language in ANSI and one for another language in Unicode.</p>
<p>Incidently, hyperbole aside, one place where you are pretty-much forced into using message tables instead of string resources is in Windows Services, or for that matter any application that logs messages to the Windows Event Log.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-605613">
				<div id="div-comment-605613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080229-00/?p=23263#comment-605613">
			February 29, 2008 at 10:49 am</a>		</div>

		<p>You can always do the subtle trick that .NET does to write to the event log &#8212; set all your message strings to &quot;%1&quot;, so that you can call the WriteEvent() function with only your string.</p>
<p>Though that puts hard coded strings all over your code, rather than centralized in the message catalog.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-605643">
				<div id="div-comment-605643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080229-00/?p=23263#comment-605643">
			February 29, 2008 at 11:32 am</a>		</div>

		<p>I don&#8217;t know the structure of message tables, but judging by the name it&#8217;s likely that somebody had the idea that it was an optimization over regular string resources. Odds are the difference now is infitessimal, but on 8MB 386s it might have mattered.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-605673">
				<div id="div-comment-605673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080229-00/?p=23263#comment-605673">
			February 29, 2008 at 12:29 pm</a>		</div>

		<p>As Nathan_Works alludes to, you need to support message tables to write to the event log. You&#8217;re supposed to translate your messages into whatever language your customer might want to read the event log in, and use substitutions &#8211; positional substitutions &#8211; to include the actual non-translated data for the event.</p>
<p>The .NET Framework does have a generic &quot;%1&quot; for people who understandably don&#8217;t want to have to build a message table or understand how the resource compiler works.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-605683">
				<div id="div-comment-605683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080229-00/?p=23263#comment-605683">
			February 29, 2008 at 12:31 pm</a>		</div>

		<p>Assuming these messages are the same as those read by the event viewer, then&#8230;.</p>
<p>It might be worth mentioning that a message DLL, is read by the event viewer and not the event logging service.</p>
<p>If you&#8217;re a dimwit like myself, you&#8217;ll be wondering why your changes to the DLL don&#8217;t show up, and thinking that you&#8217;ll have to reboot the machine when you can&#8217;t restart the event logging service.</p>
<p>In my dimwit kind of way I&#8217;d say that messages do make some sense when you&#8217;re writing a service, although personally I&#8217;d be happy just to dump ASCII UK/English in there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-605723">
				<div id="div-comment-605723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jpassing.wordpress.com/' rel='external nofollow' class='url'>J. Passing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080229-00/?p=23263#comment-605723">
			February 29, 2008 at 2:20 pm</a>		</div>

		<p>I assume the main reason for the co-existance of stringtables and messagetables is that they have different origins. Message tables are used for event logging, which is a concept of native NT and also supported by kernel APIs. Judging from the fact that LoadString and friends are implemented in user32.dll, stringtables seem to be a mere Win32 concept.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-605743">
				<div id="div-comment-605743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080229-00/?p=23263#comment-605743">
			February 29, 2008 at 3:46 pm</a>		</div>

		<p>Message tables are closely related in essence to the VMS message system, just as the layout of NT status codes is closely related to the layout of VMS status codes.</p>
<p>There also seems to be a bias in message tables to the emitter of a status code not being the app that will eventually display the message (i.e., the system-call model), whereas the bias in string resources appears to be that emitter and displayer are either the same, or closely related.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-605753">
				<div id="div-comment-605753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080229-00/?p=23263#comment-605753">
			February 29, 2008 at 3:46 pm</a>		</div>

		<p>Message tables are closely related in essence to the VMS message system, just as the layout of NT status codes is closely related to the layout of VMS status codes.</p>
<p>There also seems to be a bias in message tables to the emitter of a status code not being the app that will eventually display the message (i.e., the system-call model), whereas the bias in string resources appears to be that emitter and displayer are either the same, or closely related.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-605773">
				<div id="div-comment-605773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080229-00/?p=23263#comment-605773">
			February 29, 2008 at 5:30 pm</a>		</div>

		<p>I&#8217;ve always thought the message tables were a bit peculiar, if only because the only place I saw them used was in the event viewer. &nbsp;One of the advantages of using the message table over string table is that, if the user changes the default Windows language, the message can be automatically formatted in the new language. &nbsp;In fact, this technique is important enough that I&#8217;m planning on doing something similar with engineering units. &nbsp;I need to write sensor data to message logs that the user can select to see in metric or English units.</p>
<div class=post>[<i>You can do the language-switching with string tables too. See the LANGUAGE keyword. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-605883">
				<div id="div-comment-605883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080229-00/?p=23263#comment-605883">
			March 1, 2008 at 3:31 pm</a>		</div>

		<p>I&#8217;m 80% sure that message tables came to Windows from OS/2, which inherited them from LAN Manager. &nbsp;Maybe Larry Osterman could provide a history lesson.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-larryosterman even thread-even depth-1" id="comment-605903">
				<div id="div-comment-605903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Larry+Osterman+%5BMSFT%5D' rel='external nofollow' class='url'>Larry Osterman [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080229-00/?p=23263#comment-605903">
			March 1, 2008 at 8:48 pm</a>		</div>

		<p>John, I don&#8217;t remember &#8211; I first encountered them in NT 3.1.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-605973">
				<div id="div-comment-605973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080229-00/?p=23263#comment-605973">
			March 2, 2008 at 6:00 pm</a>		</div>

		<blockquote><p>
  Maybe Larry Osterman could provide a history lesson.
</p></blockquote>
<p>I was hoping for something on the Crimean war. Maybe next time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-605983">
				<div id="div-comment-605983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kuhr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080229-00/?p=23263#comment-605983">
			March 3, 2008 at 5:55 am</a>		</div>

		<p>I think the biggest advantage in message tables over stringtables is that using FormatMessage, you can specify a language ID. You can&#8217;t do that with the LoadString API. In order to achieve something similar, you have to use low-level resource APIs in order to read stringtable resources for a given language ID. Additionally, using message tables along with the message compiler gives a nice mechanism of creating custom error codes and automatic resolution into human readable strings using FormatMessage. That&#8217;s why I really like message tables :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-606003">
				<div id="div-comment-606003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin Eshbach</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080229-00/?p=23263#comment-606003">
			March 3, 2008 at 9:21 am</a>		</div>

		<p>I wonder if they weren&#8217;t created to get around the 64K length limitation of a string in a string table.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

