<html>
<head>
<title>Nifty trick: Combining constructor with collection initializer</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Nifty trick: Combining constructor with collection initializer</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 27, 2018 / year-entry #268</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20181127-00/?p=100335</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Two great tastes that work great together.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
C# provides a number of ways of
<a HREF="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/object-and-collection-initializers">
initializing collections</a>.
</p>
<p>
If a collection has a single-parameter <code>Add</code> method,
you can add items into the collection as part of initialization:
</p>
<pre>
var list = new List&lt;int&gt; { 1, 2, 3 };

// Equivalent to
var list = new List&lt;int&gt;();
list.Add(1);
list.Add(2);
list.Add(3);
</pre>
<p>
Note that if you do not provide an argument list after the type,
<a HREF="https://en.wikipedia.org/wiki/Miranda_warning">
one will be provided for you</a>, namely <code>()</code>.
</p>
<p>
If a collection has a multi-parameter <code>Add</code> method,
you can add items into the collection as part of the initialization,
but you need to put braces around each parameter list:</p>
<p>
<pre>
var dict = new Dictionary&lt;int, int&gt; {
    { 0, 1 },
    { 1, 2 },
};

// Equivalent to
var dict = new Dictionary&lt;int, int&gt;();
dict.Add(0, 1);
dict.Add(1, 2);
</pre>
<p>
If a collection has an index setter, you can add items into
the collection with indexer syntax:
</p>
<pre>
var dict = new Dictionary&lt;int, int&gt; {
    [0] = 1,
    [1] = 2,
};

// Equivalent to
var dict = new Dictionary&lt;int, int&gt;();
dict[0] = 1;
dict[1] = 2;
</pre>
<p>
You cannot combine these different initializer notations,
however.
</p>
<pre>
// Code in italics doesn't compile
<i>var dict = new Dictionary&lt;int, int&gt; {
    {0, 1 },
    [1] = 2,
};</i>
</pre>
<p>
However, one thing that is sometimes interesting to do is
combine the constructor with the collection initializer.
This lets you clone a collection and then modify it.
</p>
<pre>
// Resulting list is { 1, 2, 3, 4, 5 }
var list2 = new List&lt;int&gt;(list) { 4, 5 };

// Resulting list is { 4, 2, 3 }
var list3 = new List&lt;int&gt;(list) { [0] = 4 };

// Resulting dictionary is dict2[0] = 1, dict2[1] = 2,
// and dict[2] = 3
var dict2 = new Dictionary&lt;int, int&gt;(dict) { [2] = 3 };

// Resulting dictionary is dict2[0] = 4, dict2[1] = 2
var dict2 = new Dictionary&lt;int, int&gt;(dict) { [0] = 4 };
</pre>
<p>
You can pass anything that is a valid constructor parameter.
For example, <code>List&lt;T&gt;</code> permits construction
from any enumerable, so you can do this:
</p>
<pre>
string[] ab = new string[] { "a", "b" };
List&lt;string&gt; abcd = new List&lt;string&gt;(ab) { "c", "d" };
// abcd has four elements: "a" "b" "c" and "d"
</pre>
<p>
This combination notation is useful if you want to clone
an existing collection and then make some tweaks to it.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-ian-m-goldby even thread-even depth-1 parent" id="comment-1371655">
				<div id="div-comment-1371655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Ian+Goldby' rel='external nofollow' class='url'>Ian Goldby</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181127-00/?p=100335#comment-1371655">
			November 27, 2018 at 7:21 am</a>		</div>

		<p>I&#8217;ve always believed (but admittedly never bothered to check) that if you write in C something like static const int lookup[] = { &#8230; long list of numbers &#8230; } then the compiler does all the heavy lifting; the array is generated in its final form as part of the executable image and there&#8217;s no runtime cost to creating and initialising the array. I suppose my first question is &#8220;is this actually the case with modern C compilers?&#8221; and my second question is &#8220;what is the C# equivalent?&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-jeremytais odd alt depth-2" id="comment-1371675">
				<div id="div-comment-1371675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SimonRev' rel='external nofollow' class='url'>SimonRev</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181127-00/?p=100335#comment-1371675">
			November 27, 2018 at 1:46 pm</a>		</div>

		<p>Yes, that is more or less how it works on C arrays (or C++ arrays).</p>
<p>Note that a C# list is much closer to a C++ std::vector, and in C++ the code:<br />
    std::vector myVect = { 3, 4, 5, 6} is going to create a std::inititlizer_list and run a constructor on std::vector. I am not really sure at all the details that are involved there.  It is at least possible that in the case of integer literals, that the equivilent code that runs in C++ the static array as in C with a memcpy to copy the data into the std::vector.</p>
<p>In C#, I am less certain what the code<br />
    int[] x = new int[] { 1, 2, 3, 4}</p>
<p>actually does.  At a minimum the array would be on the heap and need to be copied out there.  (since there is no such thing as a const array in C#, a copy has to be made)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-odd thread-alt depth-1" id="comment-1371695">
				<div id="div-comment-1371695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181127-00/?p=100335#comment-1371695">
			November 27, 2018 at 5:06 pm</a>		</div>

		<p>This kind of initilization is particularly useful if you want to return list of complex nested object with LINQ queries.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-tyler-szabo odd alt thread-even depth-1" id="comment-1371885">
				<div id="div-comment-1371885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Tyler+Szabo' rel='external nofollow' class='url'>Tyler Szabo</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181127-00/?p=100335#comment-1371885">
			November 29, 2018 at 1:09 am</a>		</div>

		<p>That&#8217;d be handy for initializing sets with a custom comparer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-rkpatrick even thread-odd thread-alt depth-1" id="comment-1372005">
				<div id="div-comment-1372005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/RKPatrick' rel='external nofollow' class='url'>RKPatrick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181127-00/?p=100335#comment-1372005">
			November 30, 2018 at 9:31 am</a>		</div>

		<p>I like these a lot&#8230;it&#8217;s nice to learn new stuff about .Net, even after working with it for so long.  I&#8217;d been using .Concat(&#8230;) to achieve the same results, but I like the semantics of the initializer quite a bit more, since it&#8217;s not building an expression and hooking into the LINQ infrastructure (it&#8217;s a bit of a heavy hand for this task)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

