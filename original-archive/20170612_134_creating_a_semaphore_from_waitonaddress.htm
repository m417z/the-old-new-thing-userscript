<html>
<head>
<title>Creating a semaphore from WaitOnAddress</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Creating a semaphore from WaitOnAddress</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 12, 2017 / year-entry #135</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170612-00/?p=96375</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">More exercises.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Some time ago,
we explored
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20160825-00/?p=94165">
creating various types of well-known synchronization objects
from
<code>Wait&shy;On&shy;Address</code></a>.
Today we'll create a semaphore with no maximum token count.
(Believe it not, I'm building up to something,
but it'll take a while.)
</p>
<pre>
struct ALT_SEMAPHORE
{
  LONG TokenCount;
};

void InitializeAltSemaphore(ALT_SEMAPHORE* Semaphore,
                            LONG InitialCount)
{
  Semaphore-&gt;TokenCount = InitialCount;
}

void ReleaseAltSemaphoreOnce(ALT_SEMAPHORE* Semaphore)
{
  InterlockedIncrement(&amp;Sempahore-&gt;TokenCount);
  WakeByAddressSingle(&amp;Sempahore-&gt;TokenCount);
}

void ReleaseAltSemaphoreMulti(ALT_SEMAPHORE* Semaphore,
                              LONG ReleaseCount)
{
  InterlockedAdd(&amp;Sempahore-&gt;TokenCount, ReleaseCount);
  if (ReleaseCount == 1) {
    WakeByAddressSingle(&amp;Sempahore-&gt;TokenCount);
  } else {
    WakeByAddressAll(&amp;Sempahore-&gt;TokenCount);
  }
}

void WaitForAltSempahore(ALT_SEMAPHORE* Semaphore)
{
  while (true) {
    LONG OriginalCount = Semaphore-&gt;TokenCount;
    while (OriginalCount == 0) {
      WaitOnAddress(&amp;Semaphore-&gt;TokenCount,
                    &amp;OriginalCount,
                    sizeof(OriginalCount),
                    INFINITE);
      OriginalCount = Semaphore-&gt;TokenCount;
    }
    if (InterlockedCompareExchange(&amp;Semaphore-&gt;TokenCount,
                                   OriginalCount - 1,
                                   OriginalCount) == OriginalCount) {
      return;
    }
  }
}
</pre>
<p>
The semaphore consists simply of the current token count.
To release one token, we increment the token count and
wake up any single waiting thread.
To release multiple tokens, we increase the token count by
the number of tokens being released and the signal all the
waiting threads.
There is no <code>Wake&shy;By&shy;Address&shy;Multi</code>
that lets you wake a specific number of threads.
Your options are to release one or to release all.
In the case where we release more than one token, we just
have to release all of the waiting threads and let them
fight over the tokens.
</p>
<p>
Claiming a token is the tricky part.
There are two parts of claiming a token:
Waiting for a token to become available,
and claiming it.
</p>
<p>
To wait for the token to become available,
we wait for the token count to be nonzero.
If we see that it is zero, we use
<code>Wait&shy;On&shy;Address</code> to wait until
it becomes nonzero.
(This relies on
<code>Release&shy;Alt&shy;Semaphore&shy;Once</code>
remembering to <code>Wake&shy;By&shy;Address&shy;Single</code>
when it changes the token count.)
Once the token count changes, we loop back and see
if it's nonzero now.
Note that this code is resilient to spurious wakes
because we always recheck the semaphore count.
Actually, the code would have needed to be resilient to
spurious wakes anyway, because it's possible that a token
got released, but another thread snuck in and stole it from us
before we could check it.
</p>
<p>
Once we confirm that a token is available (or at least
was available recently),
we try to decrement the token count by one.
If that succeeds, then we are done.
Otherwise, it means another thread came in and
claimed a token before we could claim it,
so we loop back to the top and wait for a token to become
available.
</p>
<p>
Note that this synchronization object is not fair.
If a token becomes available and a thread is waiting,
it's possible for an intruder thread to sneak in and
steal the token from the waiting thread.
The waiting thread wakes up, sees that there's no token,
and goes back to sleep.
</p>
<p>
Next time, we'll reimplement a semaphore with a
maximum count.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1299575">
				<div id="div-comment-1299575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DSN</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170612-00/?p=96375#comment-1299575">
			June 12, 2017 at 9:57 am</a>		</div>

		<p>You said &#8220;no maximum token count&#8221;, but then use a finite integer to store the count? Shame on you :P</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1299595">
				<div id="div-comment-1299595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Al Go</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170612-00/?p=96375#comment-1299595">
			June 12, 2017 at 12:03 pm</a>		</div>

		<p>Let me know how creating a billion threads works out for you</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1299605">
				<div id="div-comment-1299605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170612-00/?p=96375#comment-1299605">
			June 12, 2017 at 2:43 pm</a>		</div>

		<p>On a quantum cpu they will be done by last week.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1299615">
				<div id="div-comment-1299615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170612-00/?p=96375#comment-1299615">
			June 12, 2017 at 7:30 pm</a>		</div>

		<p>&#8220;The per-process limit on kernel handles is 2^24.&#8221;<br />
You will never reach there.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1299606">
				<div id="div-comment-1299606" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170612-00/?p=96375#comment-1299606">
			June 12, 2017 at 5:16 pm</a>		</div>

		<p>Come to think of it I wrote an OS that didn&#8217;t need a kernel stack per thread. If the usermode threads don&#8217;t need stacks either it&#8217;s no longer ridiculously implausible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1299645">
				<div id="div-comment-1299645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170612-00/?p=96375#comment-1299645">
			June 13, 2017 at 2:39 am</a>		</div>

		<p>What makes you think that a thread will only ever want to reserve access to <em>one</em> instance of the resource being protected by the semaphore?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-2" id="comment-1299725">
				<div id="div-comment-1299725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170612-00/?p=96375#comment-1299725">
			June 13, 2017 at 12:42 pm</a>		</div>

		<p>Even if you wait on a single address, you don&#8217;t have to keep the token count in a single address, do you?<br />
The x86 architecture has the adc and sbb instructions to allow you to use integers that are larger than the processor can handle in one operation, so as long as you are willing to put more memory to the token count than to anything useful, you will only run out of tokens when you run out of address space.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

