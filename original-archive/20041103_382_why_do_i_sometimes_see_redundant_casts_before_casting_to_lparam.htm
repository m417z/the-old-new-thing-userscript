<html>
<head>
<title>Why do I sometimes see redundant casts before casting to LPARAM?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why do I sometimes see redundant casts before casting to LPARAM?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 3, 2004 / year-entry #383</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If you read through old code, you will often find casts that seem redundant. SendMessage(hwndListBox, LB_ADDSTRING, 0, (LPARAM)(LPSTR)"string"); Why was "string" cast to LPSTR? It's already an LPSTR! These are leftovers from 16-bit Windows. Recall that in 16-bit Windows, pointers were near by default. Consequently, "string" was a near pointer to a string. If the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
If you read through old code, you will often find casts
that seem redundant.
</p>
<pre>
SendMessage(hwndListBox, LB_ADDSTRING, 0, (LPARAM)(LPSTR)"string");
</pre>
<p>
Why was <code>"string"</code> cast to <code>LPSTR</code>?
It's already an <code>LPSTR</code>!
</p>
<p>
These are leftovers from 16-bit Windows.
Recall that in 16-bit Windows, pointers were near by default.
Consequently, <code>"string"</code> was a near pointer to a string.
If the code had been written as</p>
<pre>
SendMessage(hwndListBox, LB_ADDSTRING, 0, (LPARAM)"string");
</pre>
<p>
then it would have taken the near pointer and cast it to a <code>long</code>.
Since a near pointer is a 16-bit value, the pointer would have been 
zero-extended to the 32-bit size of a <code>long</code>.
</p>
<p>
However, all pointers in window messages must be far pointers
because the window procedure for the window might very well be implemented
in a different module from the sender.
Recall that near pointers are interpreted relative to the default
selector, and the default selector for each module is different.
Sending a near pointer to another module will result in the
pointer being interpreted relative to the <strong>recipient's</strong>
default selector, which is not the same as the <strong>sender's</strong>
default selector.
</p>
<p>
The intermediate cast to <code>LPSTR</code> converts the near
pointer to a far pointer, <code>LP</code> being the Hungarian
prefix for far pointers (also known as "long pointers").
Casting a near pointer to a far pointer inserts the previously-implied
default selector, so that the cast to <code>LPARAM</code> captures
the full 16:16 far pointer.
</p>
<p>
Aren't you glad you don't have to worry about this any more?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-222563">
				<div id="div-comment-222563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shmuel Baron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-222563">
			November 3, 2004 at 7:10 am</a>		</div>

		<p>Raymond, did you mean LPCSTR? casting a literal to non-const string pointer is not a nice thing to do. Also the docs say LB_ADDSTRING takes an LPCTSTR anyway.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222583">
				<div id="div-comment-222583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom Seddon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-222583">
			November 3, 2004 at 7:25 am</a>		</div>

		<p>I don&#8217;t think they had const back then.</p>
<p>(String literals are always convertible to char *, anyway, but you may get odd (if obvious :) results if you modify them.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222593">
				<div id="div-comment-222593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SteveM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-222593">
			November 3, 2004 at 7:32 am</a>		</div>

		<p>We had const back then. We just didn&#8217;t use it ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222603">
				<div id="div-comment-222603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shmuel Baron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-222603">
			November 3, 2004 at 7:36 am</a>		</div>

		<p>Yeah, there is no harm using LPSTR instead of LPCSTR, and the internal function that gets this message probably casts the LPARAM to a LPCTSTR anyway and doesn&#8217;t modify it. It just hurts my eyes (and heart) when i see literals being cast to non-const :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222613">
				<div id="div-comment-222613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-222613">
			November 3, 2004 at 7:50 am</a>		</div>

		<p>&quot;string&quot; is actually a const char[7], which implicitly can get casted to char * during standard conversions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222623">
				<div id="div-comment-222623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lowercase josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-222623">
			November 3, 2004 at 8:08 am</a>		</div>

		<p>If you&#8217;re passing an object of some kind (perhaps derived from a win32 structure), you might still need multiple casts.  The bottom line is that C casts don&#8217;t only serve one function and sometimes you need to combine their properties, which requires multiple casts.  In C++ this would be more clear (if uglier), since you&#8217;d need a static_cast and a reinterpret_cast.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222673">
				<div id="div-comment-222673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nobody important</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-222673">
			November 3, 2004 at 1:18 pm</a>		</div>

		<p>Wait, LPARAM is a long?  I always assumed it was a long pointer to an ARAM struct!!!<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222573">
				<div id="div-comment-222573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://andyandy.sprayblogg.no' rel='external nofollow' class='url'>Andreas H&#228;ber</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-222573">
			November 3, 2004 at 7:25 am</a>		</div>

		<p>Shmuel: Remember that Raymond is talking about the Win16 API and not the Win32 API which is what you find on MSDN these days.</p>
<p>[I tried to find some site keeping the Win16 SDK reference docs, but couldn&#8217;t find any. So I may be wrong, of course. But I found at least two sites which contains sample code similar to Raymond&#8217;s example above:<br />
<br />* <a target="_new" href="http://hem.passagen.se/basscad/windows/kap3.htm" rel="nofollow">http://hem.passagen.se/basscad/windows/kap3.htm</a><br />
<br />* <a target="_new" href="http://homepage1.nifty.com/nogue/wincho07.htm" rel="nofollow">http://homepage1.nifty.com/nogue/wincho07.htm</a><br />
<br />(the first one is in Swedish and the second in some other language which I&#8217;m not familiar with)]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222633">
				<div id="div-comment-222633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-222633">
			November 3, 2004 at 9:25 am</a>		</div>

		<p>Writing COM objects in C++ frequently require &#8230; frequently its conventient at least to use multiple casts to take a class pointer, cast it to an interface and THEN to the void* that far too many COM APIs need.</p>
<p>I never did like the *new* C++ casting operators.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222653">
				<div id="div-comment-222653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom Seddon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-222653">
			November 3, 2004 at 12:13 pm</a>		</div>

		<p>Doesn&#8217;t everything convert correctly to void * in C++? I&#8217;m pretty sure you never need a cast to void *. You may need other casts along the way, though (if you want a pointer to a specific base of an object of a multiply-inherited type, say?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222803">
				<div id="div-comment-222803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://arundotphilipatpatnidotcom' rel='external nofollow' class='url'>Arun Philip</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-222803">
			November 3, 2004 at 8:19 pm</a>		</div>

		<p>Off-topic: </p>
<p>Andreas: <a target="_new" href="http://homepage1.nifty.com/nogue/wincho07.htm" rel="nofollow">http://homepage1.nifty.com/nogue/wincho07.htm</a> is in Japanese.</p>
<p>Not that I know Japanese, but IE detected the encoding as Japanese (Shift-JIS)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222663">
				<div id="div-comment-222663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-222663">
			November 3, 2004 at 12:23 pm</a>		</div>

		<p>In C++, (A*)p and (A*)(void*)p can give different results. Back in the old days, you had to use (void*) to force the second interpretation.  (Nowadays you would use reinterpret_cast&#8230;)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222813">
				<div id="div-comment-222813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.valhallalegends.com/skywing' rel='external nofollow' class='url'>Skywing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-222813">
			November 3, 2004 at 10:24 pm</a>		</div>

		<p>I think you mean pointers to member functions, Normand?  Non-member function pointers should cast to void* implictly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222713">
				<div id="div-comment-222713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-222713">
			November 3, 2004 at 4:30 pm</a>		</div>

		<p>Re: C++, casting and COM:</p>
<p>Ah, you&#8217;re doing it the old fashioned difficult way.</p>
<p>The newfangled approach is this:</p>
<p>typedef &lt;typename T&gt; HRESULT MyQI(IUnknown *pIn, T **pOut) {<br />
<br />    return pIn-&gt;QueryInterface(__uuidof(T), (void **) ppOut);<br />
<br />}</p>
<p>And now you&#8217;ve got all the gross badness in one place.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222753">
				<div id="div-comment-222753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pavel Lebedinsky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-222753">
			November 3, 2004 at 5:20 pm</a>		</div>

		<p>You don&#8217;t even need to define your own version of QI. IUnknown has had a template QueryInterface for quite some time:</p>
<p>// From unknwn.h</p>
<p>MIDL_INTERFACE(&quot;00000000-0000-0000-C000-000000000046&quot;)<br />
<br />IUnknown<br />
<br />{<br />
<br />    &#8230;<br />
<br />    template&lt;class Q&gt;<br />
<br />    HRESULT STDMETHODCALLTYPE QueryInterface(Q** pp)<br />
<br />    {<br />
<br />        return QueryInterface(__uuidof(Q), (void **)pp);<br />
<br />    }<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222783">
				<div id="div-comment-222783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-222783">
			November 3, 2004 at 5:33 pm</a>		</div>

		<p>11/3/2004 12:13 PM Tom Seddon</p>
<p>&gt; Doesn&#8217;t everything convert correctly to<br />
<br />&gt; void * in C++?</p>
<p>Everything except function pointers.</p>
<p>&gt; I&#8217;m pretty sure you never need a cast to<br />
<br />&gt; void *.</p>
<p>For the examples discussed here, you are correct.  But in the examples discussed here, when multiple casts used to be necessary (i.e. were not redundant), perversely it does help readability to code the additional redundant cast to (void *).</p>
<p>&gt; You may need other casts along the way,</p>
<p>Yes.  Quoting that line because of this:</p>
<p>11/3/2004 12:23 PM Raymond Chen</p>
<p>&gt; In C++, (A*)p and (A*)(void*)p can give<br />
<br />&gt; different results</p>
<p>Yes, but was that intended to be a reply to Mr. Seddon?  It looks to me like an unrelated fact.  Am I misreading something?</p>
<p>11/3/2004 4:30 PM Michael Grier</p>
<p>&gt; return pIn-&gt;QueryInterface(__uuidof(T),<br />
<br />&gt; (void **) ppOut);</p>
<p>You are still abusing the calling convention.  This has been discussed before and the fact has not changed.  Even on a byte-addressed machine the language still does not guarantee defined behavior.  You must declare a separate variable of type void *, pass the address of that variable in an argument, and then cast the received value to the actual type you want to use.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-222903">
				<div id="div-comment-222903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-222903">
			November 4, 2004 at 7:35 am</a>		</div>

		<p>&quot;Now, I claim that people who abuse IUnknown::QI to return a pointer to the inner object which isn&#8217;t necessarily reference counted are abusing the CCs but this usage in particular is part of the core of the COM ABI.&quot;</p>
<p>Eeek! No one was meant to know about that!</p>
<p>I can state, with more personal experience than I&#8217;d like to admit, that this isn&#8217;t actually such a hot idea.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-222843">
				<div id="div-comment-222843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-222843">
			November 4, 2004 at 7:03 am</a>		</div>

		<p>Norman:</p>
<p>Actually it does not abuse the calling convention.  This is part of the COM ABI.  See Raymond&#8217;s post last week or so about the crazy interface definition macros.</p>
<p>I used to, like a good standard C++ doo-bee write this:</p>
<p>void *pvReturned = NULL;<br />
<br />hr = pIFoo-&gt;QueryInterface(IID_IBar, &amp;pvReturned);<br />
<br />// handle errors<br />
<br />pIBar = reinterpret_cast&lt;IBar *&gt;(pvReturned);</p>
<p>At the binary level (calling conventions are a binary interface contract, not a source interface contract), the contract is that the pointer-sized thing that the 2nd parameter points to will be filled in with an interface pointer corresponding to the type passed in the first parameter.</p>
<p>Now, I claim that people who abuse IUnknown::QI to return a pointer to the inner object which isn&#8217;t necessarily reference counted are abusing the CCs but this usage in particular is part of the core of the COM ABI.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223153">
				<div id="div-comment-223153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-223153">
			November 4, 2004 at 7:28 pm</a>		</div>

		<p>11/3/2004 10:24 PM Skywing</p>
<p>&gt; I think you mean pointers to member<br />
<br />&gt; functions, Normand?</p>
<p>It doesn&#8217;t matter if the function is a member or not.</p>
<p>&gt; Non-member function pointers should cast to<br />
<br />&gt; void* implictly. </p>
<p>No.  A pointer to a non-function can be converted to type void* and back (and for backwards compatibility with pre-standard C, can be converted to type char* and back).  A pointer to a function cannot be.  Furthermore there exist hardware and C language implementations where an attempt to convert a function pointer to type void* and back really do destroy the pointer.</p>
<p>11/4/2004 7:03 AM Michael Grier [MSFT]</p>
<p>&gt; Norman:<br />
<br />&gt; Actually it does not abuse the calling<br />
<br />&gt; convention.</p>
<p>Yes it does.  (void*) is universal in the sense of being able to point to any non-function and be cast back into the appropriate pointer type for it.  A struct or union or class is included.  The question of whether a member of a struct or union or class is included depends on the type of the member, i.e. function or non-function.</p>
<p>(void**) is not universal in that sense.  (void**) only has to be capable of pointing to (void*).  And even more so, it doesn&#8217;t have to be capable of pointing to a function.</p>
<p>In C, function pointers are universal with respect to each other (by a separate statement in the standard) but not with respect to non-function pointers.  (SomeFunctionType*) only has to be capable of pointing to a function, it doesn&#8217;t have to be capable of pointing to a (void*) pointer.  In C++, this gets more complicated for member functions, but still the incompatibility with (void*) just gets that much stronger.</p>
<p>Anyway, (void**) doesn&#8217;t point to (int*) and doesn&#8217;t point to (SomeStruct*) and doesn&#8217;t point to (int(*()).  If you lie about a (SomeStruct*) variable, cast its address to type (void**) and try to shove a (void*) value into your variable, you&#8217;re asking for trouble.</p>
<p>I already reminded you yesterday what the correct technique is, and posted more details a few months ago when Mr. Chen made the same mistake (right after a series of essays concerning abuse of calling conventions).  In fact I checked some MSDN pages when Mr. Chen made the same mistake, and the pages which I saw got it right.</p>
<p>Use or abuse of reference counts do not turn undefined behavior into defined behavior.  The pointer values themselves are already corrupt.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223173">
				<div id="div-comment-223173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-223173">
			November 4, 2004 at 9:09 pm</a>		</div>

		<p>The Win32 ABI requires that all simple pointers have the same representation.  Using (void**) as the &quot;generic pointer to pointer&quot; is legal according to Win32 (though not legal in general, as you point out).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223373">
				<div id="div-comment-223373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-223373">
			November 5, 2004 at 2:40 pm</a>		</div>

		<blockquote><p>
  But it would be better to avoid doing it, as some future version of the program might break spectacularly.</p>
<p>So to prevent this MS would have to support this feature for backward compatibility ;)</p>
<p>&gt; Wait, LPARAM is a long? I always assumed it was a long pointer to an ARAM struct!!! </p>
<p>:)) This is funny. Technically, LPARAM is not a pointer. It is a LONG, which can accept different values (or pointers) depending on the message.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223323">
				<div id="div-comment-223323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael J Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-223323">
			November 5, 2004 at 11:26 am</a>		</div>

		<p>The ANSI/ISO standard for C++ guarantees that you can cast a non-function pointer to void * and back without any loss of information.</p>
<p>It makes no promises about function pointers.  That doesn&#8217;t mean that they won&#8217;t work &#8211; it just means that they might not.  A function pointer might be bigger than a void *, or it might have some extra info encoded.  If you have an architecture where code and data are segregated (by hardware) you could possibly even get a segfault by casting one to the other.</p>
<p>As Raymond pointed out above, on Win32 it happens to work.  But it would be better to avoid doing it, as some future version of the program might break spectacularly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-223463">
				<div id="div-comment-223463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-223463">
			November 7, 2004 at 7:45 pm</a>		</div>

		<p>11/4/2004 9:09 PM Raymond Chen</p>
<p>&gt; The Win32 ABI requires that all simple<br />
<br />&gt; pointers have the same representation.</p>
<p>Hmm, I guess that has the desired effect.  In fact I guess this had to be done in order to get Visual Basic to work.</p>
<p>Does Win64 make a similar guarantee?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-223473">
				<div id="div-comment-223473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-223473">
			November 7, 2004 at 8:17 pm</a>		</div>

		<p>Yes, Win64 also requires that all simple pointers have the same representation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-548083">
				<div id="div-comment-548083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2007/09/10/4849069.aspx' rel='external nofollow' class='url'>MSDN Blog Postings &raquo; If control-specific messages belong to the WM_USER range, why are messages like BM_SETCHECK in the system message range?</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041103-00/?p=37403#comment-548083">
			September 10, 2007 at 12:27 pm</a>		</div>

		<p>PingBack from <a href="http://blogs.msdn.com/oldnewthing/archive/2007/09/10/4849069.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2007/09/10/4849069.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

