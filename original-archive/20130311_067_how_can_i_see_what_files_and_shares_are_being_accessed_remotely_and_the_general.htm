<html>
<head>
<title>How can I see what files and shares are being accessed remotely, and the general usage pattern for the NetXxx functions</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I see what files and shares are being accessed remotely, and the general usage pattern for the NetXxx functions</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 11, 2013 / year-entry #68</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130311-00/?p=5003</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's Little Program is a command line version of the Shared Folders MMC snap-in. Why? Because it illustrates the usage pattern for the Net­Xxx family of functions. (It's also a clone of the networking portion of the openfiles tool.) The Net­Xxx family of functions generally work like this: You pass in some parameters that describe...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program is a command line version of the
Shared Folders MMC snap-in.
Why?
Because it illustrates the usage pattern for the <code>Net&shy;Xxx</code>
family of functions.
(It's also a clone of the networking portion of the
<a HREF="http://technet.microsoft.com/en-us/library/cc732490">
<code>openfiles</code></a> tool.)
</p>
<p>
The <code>Net&shy;Xxx</code> family of functions generally work like this:
</p>
<ul>
<li>You pass in some parameters that describe what you want.
    Server name, that sort of thing.</p>
<li>You pass a "level" parameter that describes
    what information you want.</p>
<li>The function allocates memory to hold the results you requested,
    and
    <a HREF="http://msdn.microsoft.com/library/aa370676.aspx">
    it returns a pointer to that memory</a>
    through a <code>bufptr</code> parameter.</p>
<li>If the function returns an array, then
<ul>
<li>You can tell the function the maximum number of results you want.
<li>The function tells you how much information it returned.
<li>If the function did not retrieve all the results (because it
        exceeded your maximum), it tells you how to get the rest of them.
    </ul>
<li>When you are finished, you free the memory
    with <code>Net&shy;Api&shy;Buffer&shy;Free</code>.
</ul>
<p>
We'll start with the non-array case,
since that is much simpler.
Suppose you want to get the level 123 information for a Thing.
</p>
<pre>
THING_INFO_123 *pinfo123;
if (NetThingGetInfo(pszThing,
                    123, (LPBYTE*)&amp;pinfo123) == NERR_Success)
{
    DoSomethingWith(pinfo123);
    NetApiBufferFree(pinfo123);
}
</pre>
<p>
You call the function, passing the desired information level
and a pointer to the variable you want to receive the results.
You then use the results, and then free them.
Let's try it with a simple function to get information about a user.
</p>
<pre>
#define UNICODE
#define <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/02/12/71851.aspx">_UNICODE</a>
#define STRICT
#include &lt;windows.h&gt;
#include &lt;lm.h&gt;
#include &lt;stdio.h&gt;

void PrintProperty(PCWSTR pszProperty, PCWSTR pszValue)
{
 wprintf(L"%ls: %ls\n", pszProperty,
                        pszValue ? pszValue : L"&lt;none&gt;");
}

int __cdecl wmain(int argc, wchar_t **argv)
{
 USER_INFO_10 *pinfo10;
 if (NetUserGetInfo(NULL, L"Administrator", 10,
                    (LPBYTE*)&amp;pinfo10) == NERR_Success) {
  PrintProperty(L"Name", pinfo10-&gt;usri10_name);
  PrintProperty(L"Comment", pinfo10-&gt;usri10_comment);
  PrintProperty(L"User comment", pinfo10-&gt;usri10_usr_comment);
  PrintProperty(L"Full name", pinfo10-&gt;usri10_full_name);
  NetApiBufferFree(pinfo10);
 }
 return 0;
}
</pre>
<p>
The trickier case is the functions that return arrays of data.
In that case, you need to call the functions in a loop,
similar to <code>Find&shy;Next&shy;File</code>,
in order to read all the data.
But unlike
<code>Find&shy;Next&shy;File</code>,
the functions return chunks of data rather than just one
entry at a time.
</p>
<p>
The general pattern goes like this:
</p>
<pre>
THING_INFO_123 *pinfo123;
NET_API_STATUS status;
DWORD_PTR resumeHandle = 0;
do {
 DWORD actual, estimatedTotal;
 status = NetThingEnum(pszThing, 123,
                       (LPBYTE*)&amp;pinfo123,
                       MAX_PREFERRED_LENGTH,
                       &amp;actual,
                       &amp;estimatedTotal,
                       &amp;resumeHandle);
 if (status == NERR_Success ||
     status == ERROR_MORE_DATA) {
  for (DWORD i = 0; i &lt; actual; i++) {
   DoSomethingWith(&amp;pinfo123[i]);
  }
  NetApiBufferFree(pinfo123);
 }
} while (status == ERROR_MORE_DATA);
</pre>
<p>
The general pattern is to start by calling the
data retrieval function.
If the function returns with
<code>NERR_<wbr>Success</code>,
then it means that it was able to get all the information
you requested.
If the function returns with
<code>ERROR_<wbr>MORE_<wbr>DATA</code>,
then it means that it was able to get some of the information
you requested.
In either of those two cases, it returns the actual number
of items retrieved in the <code>actual</code> parameter,
which you use to read the values out of the results.
(It also returns
an estimate of the total number of items remaining in the
<code>estimated&shy;Total</code> variable,
but very few people use that.)
</p>
<p>
If the return value was
<code>ERROR_<wbr>MORE_<wbr>DATA</code>,
then you go back and call the function again to get the next
batch of results.
</p>
<p>
The way the functions can tell whether you're starting a new
operation or continuing an old one is via the
<code>resume&shy;Handle</code> parameter,
which must be a pointer to a <code>DWORD_<wbr>PTR</code> variable
which the function updates.
On the first call, set the <code>DWORD_<wbr>PTR</code> to zero.
If the function returns partial results, then it puts an opaque
value into the <code>resume&shy;Handle</code> so it can remember
where it needs to continue.
(By comparison,
the <code>Find&shy;First&shy;File</code> passes the
resume handle as its return value.)
</p>
<p>
Note that there is no equivalent to
<code>Find&shy;Close</code> when you are finished with
the function.
If you don't want to retrieve all the results,
you just abandon the handle.
</p>
<pre>
int __cdecl wmain(int argc, wchar_t **argv)
{
 FILE_INFO_3 *pinfo3;
 NET_API_STATUS status;
 DWORD_PTR resumeHandle = 0;
 do {
  DWORD actual, estimatedTotal;
  status = NetFileEnum(NULL, NULL, NULL, 3,
                       (LPBYTE*)&amp;pinfo3,
                       MAX_PREFERRED_LENGTH,
                       &amp;actual,
                       &amp;estimatedTotal,
                       &amp;resumeHandle);
  if (status == NERR_Success ||
      status == ERROR_MORE_DATA) {
   for (DWORD i = 0; i &lt; actual; i++) {
    PrintProperty(L"Path", pinfo3[i].fi3_pathname);
    PrintProperty(L"User", pinfo3[i].fi3_username);
    if (pinfo3[i].fi3_permissions &amp; PERM_FILE_READ) {
     PrintProperty(L"Access", L"READ");
    }
    if (pinfo3[i].fi3_permissions &amp; PERM_FILE_WRITE) {
     PrintProperty(L"Access", L"WRITE");
    }
    if (pinfo3[i].fi3_permissions &amp; PERM_FILE_CREATE) {
     PrintProperty(L"Access", L"CREATE");
    }
   }
   NetApiBufferFree(pinfo3);
  }
 } while (status == ERROR_MORE_DATA);
 return 0;
}
</pre>
<p>
I've been ignoring the parameter known as
<code>prefmaxlen</code>
because you pretty much
always pass <code>MAX_<wbr>PREFERRED_<wbr>LENGTH</code>.
The parameter lets you limit how much information is returned
at a time,
but you nearly always want
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2006/04/06/569873.aspx">
as much as possible</a>
(which is why you nearly always
pass <code>MAX_<wbr>PREFERRED_<wbr>LENGTH</code>).
If, for some reason,
you want to retrieve only a little bit at a time,
you can pass a smaller value as the
<code>prefmaxlen</code>.
Note that
<code>prefmaxlen</code> is in bytes, not elements,
and the size in bytes needs to include the auxiliary data
(like the strings),
not just the structures.
If you pass a custom
<code>prefmaxlen</code>,
then you also have to be prepared to handle the
<code>NERR_<wbr>Buf&shy;Too&shy;Small</code> error code,
which means
"The value you passed in
<code>prefmaxlen</code>
wasn't big enough to hold even <i>one</i> item.
You'll have to try again with a bigger buffer size."
If you're advanced enough to use a custom buffer size,
then you're advanced enough to figure out how to tweak
the algorithm to handle it properly.
</p>
<p>
Note that I have no special knowledge of the <code>Net&shy;Xxxx</code>
family of functions.
I figured this out by reading the documentation.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1044593">
				<div id="div-comment-1044593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130311-00/?p=5003#comment-1044593">
			March 11, 2013 at 8:28 am</a>		</div>

		<p>In my previous project, which was c/c++, we had a smart pointer class called CAutoNetApiBufferFree for such pointers. Actually, we had such classes for most kind of frees (free, delete, delete[], LocalFree, HeapFree, CoTaskMemFree, etc).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1044663">
				<div id="div-comment-1044663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carl D</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130311-00/?p=5003#comment-1044663">
			March 11, 2013 at 10:17 am</a>		</div>

		<p>Ah, my old friends the NetXxxxx functions. &nbsp;These are some of the most unwieldy functions in Win32 when it comes to building P/Invoke wrappers for .NET clients. &nbsp;Good times.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1044673">
				<div id="div-comment-1044673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua S.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130311-00/?p=5003#comment-1044673">
			March 11, 2013 at 12:13 pm</a>		</div>

		<p>@Carl D: The NetXxx functions aren&#39;t that clumsy to P/Invoke because the returned buffers tend not to have self-referencing pointers. Just remember to use a SafeHandle or CriticalHandle derivative for the returned buffer pointer.</p>
<p>If you really want to separate the men from the boys, build a C#5 GetAwaiter() pattern around GetAddrInfoEx in async mode on Windows 8.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1044713">
				<div id="div-comment-1044713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130311-00/?p=5003#comment-1044713">
			March 12, 2013 at 3:27 am</a>		</div>

		<p>Ages ago when I used WNetEnumResource on Windows 95 I was disappointed that one client did not always tell me the necessary size of the buffer the first time around. (No I don&#39;t remember which client it was.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

