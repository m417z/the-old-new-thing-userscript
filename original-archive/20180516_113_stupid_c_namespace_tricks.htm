<html>
<head>
<title>Stupid C++ namespace tricks</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Stupid C++ namespace tricks</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 16, 2018 / year-entry #113</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180516-00/?p=98765</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Shuffling names around.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
These tricks may be obvious, but at least I'm going to write them down.
</p>
<p>
It is common to import an entire namespace into the global
namespace.
<a HREF="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">
I'm not saying it's a good idea</a>, but it is common.
The
most notorious example is to put
</p>
<pre>
using namespace std;
</pre>
<p>
to import the <code>std</code> namespace into the global namespace.
</p>
<p>
When working with the Windows Runtime, you often have rather
deep namespaces.
For example, we saw some time ago that we were operating in the
<code>Windows::</code><code>System::</code
><code>Profile::</code><code>System&shy;Manufacturers</code>
namespace.
This is quite a mouthful,
and it is common to put a
</p>
<pre>
using namespace Windows::System::Profile::SystemManufacturers;
</pre>
<p>
in your program just to save yourself the hassle of typing it
all out.
</p>
<p>
However, things get complicated if you create name collisions.
</p>
<p>
For example, if you are using WRL, you will be working with the
<code>ABI::</code><code>Windows::</code><code>System::</code
><code>Profile::</code><code>System&shy;Manufacturers</code>
namespace,
but if you do a
</p>
<pre>
using namespace ABI::Windows::System::Profile::SystemManufacturers;
</pre>
<p>
you now have a problem because you have imported the name
<code>Smbios&shy;Information</code> twice:
</p>
<pre>
using namespace Windows::System::Profile::SystemManufacturers;
using namespace ABI::Windows::System::Profile::SystemManufacturers;
</pre>
<p>
After these two declarations, the name
<code>System&shy;Information</code> is now ambiguous.
It could refer to
<code>Windows::</code><code>System::</code
><code>Profile::</code><code>System&shy;Manufacturers::</code
><code>System&shy;Information</code>, via the first <code>using</code>
declaration,
or it oculd refer to
<code>ABI::</code><code>Windows::</code><code>System::</code
><code>Profile::</code><code>System&shy;Manufacturers::</code
><code>System&shy;Information</code>, via the second <code>using</code>
declaration.
</p>
<p>
I've worked around this by using namespace aliases:
</p>
<pre>
namespace wspsm = Windows::System::Profile::SystemManufacturers;
namespace awspsm = ABI::Windows::System::Profile::SystemManufacturers;
</pre>
<p>
This lets me use
<code>wspsm::Smbios&shy;Information</code> and
<code>awspsm::Smbios&shy;Information</code> to
refer to the C++/CX or ABI versions, respectively.
</p>
<p>
However, this gets clunky once you have multiple namespaces
you want to access:
</p>
<pre>
namespace wspsm = Windows::System::Profile::SystemManufacturers;
namespace awspsm = ABI::Windows::System::Profile::SystemManufacturers;
namespace wwspsm = winrt::Windows::System::Profile::SystemManufacturers;

namespace wuvm = Windows::UI::ViewManagement;
namespace awuvm = ABI::Windows::UI::ViewManagement;
namespace wwuvm = winrt::Windows::UI::ViewManagement;

namespace wsc = Windows::Security::Cryptography;
namespace awsc = ABI::Windows::Security::Cryptography;
namespace wwsc = winrt::Windows::Security::Cryptography;
</pre>
<p>
because you have to juggle all these aliases.
</`P></p>
<p>
But there's a more attractive solution:
Move names around
by importing them into another namespace.
(The name for this technique is "namespace composition",
covered in
<a HREF="https://www.safaribooksonline.com/library/view/the-c-programming/9780133522884/#toc">
sections 14.4.3 and 14.4.4</a>
of
<a HREF="https://www.amazon.com/gp/product/0321563840/?ie=UTF8&tag=tholneth-20">
<i>The C++ Programming Language</i></a>.)
</p>
<pre>
namespace ABI
{
  using Windows::System::Profile::SystemManufacturers;
  using Windows::UI::ViewManagement;
  using Windows::Security::Cryptography;
}

namespace cx
{
  using Windows::System::Profile::SystemManufacturers;
  using Windows::UI::ViewManagement;
  using Windows::Security::Cryptography;
}

namespace winrt
{
  using Windows::System::Profile::SystemManufacturers;
  using Windows::UI::ViewManagement;
  using Windows::Security::Cryptography;
}
</pre>
<p>
The first block of <code>using</code> declarations
imports the contents of the
<code>ABI::</code><code>Windows::</code><code>System::</code
><code>Profile::</code><code>System&shy;Manufacturers</code>,
<code>ABI::</code><code>Windows::</code><code>UI::</code
><code>View&shy;Management</code>,
and
<code>ABI::</code><code>Windows::</code><code>Security::</code
><code>Cryptography</code> namespaces
into the <code>ABI</code> namespace.
</p>
<p>
Similarly for the other two blocks.
</p>
<p>
The upshot of this is that you can now do this
</p>
<table CLASS=cp3 CELLPADDING=3 BORDER=1
    STYLE="border-collapse: collapse">
<tr>
<th>Old and busted</th>
<th ROWSPAN=2>To get</th>
</tr>
<tr>
<th>New hotness</th>
</tr>
<tr>
<td><code>awspsm::</code><code>Smbios&shy;Information</code></td>
<td ROWSPAN=2>
    <code>&nbsp;&nbsp;&nbsp;ABI::</code><code>Windows::</code><code>System::</code
    ><code>Profile::</code><code>System&shy;Manufacturers::</code
    ><code>SmbiosInformation</code>
    </td>
</tr>
<tr>
<td><code>&nbsp;&nbsp;&nbsp;ABI::</code><code>Smbios&shy;Information</code></td>
</tr>
<tr>
<td><code>&nbsp;wspsm::</code><code>Smbios&shy;Information</code></td>
<td ROWSPAN=2>
    <code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Windows::</code
    ><code>System::</code
    ><code>Profile::</code><code>System&shy;Manufacturers::</code
    ><code>SmbiosInformation</code>
    </td>
</tr>
<tr>
<td><code>&nbsp;&nbsp;&nbsp;&nbsp;cx::</code><code>Smbios&shy;Information</code></td>
</tr>
<tr>
<td><code>wwspsm::</code><code>Smbios&shy;Information</code></td>
<td ROWSPAN=2>
    <code>&nbsp;winrt::</code><code>Windows::</code><code>System::</code
    ><code>Profile::</code><code>System&shy;Manufacturers::</code
    ><code>SmbiosInformation</code>
    </td>
</tr>
<tr>
<td><code>&nbsp;winrt::</code><code>Smbios&shy;Information</code></td>
</tr>
<tr>
<td><code>&nbsp;awuvm::</code><code>Application&shy;View</code></td>
<td ROWSPAN=2>
    <code>&nbsp;&nbsp;&nbsp;ABI::</code><code>Windows::</code><code>UI::</code
    ><code>View&shy;Management::</code
    ><code>Application&shy;View</code>
    </td>
</tr>
<tr>
<td><code>&nbsp;&nbsp;&nbsp;ABI::</code><code>Application&shy;View</code></td>
</tr>
<tr>
<td><code>&nbsp;&nbsp;wuvm::</code><code>Application&shy;View</code></td>
<td ROWSPAN=2>
    <code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Windows::</code
    ><code>UI::</code
    ><code>View&shy;Management::</code
    ><code>Application&shy;View</code>
    </td>
</tr>
<tr>
<td><code>&nbsp;&nbsp;&nbsp;&nbsp;cx::</code><code>Application&shy;View</code></td>
</tr>
<tr>
<td><code>&nbsp;wwuvm::</code><code>Application&shy;View</code></td>
<td ROWSPAN=2>
    <code>&nbsp;winrt::</code><code>Windows::</code><code>UI::</code
    ><code>View&shy;Management::</code
    ><code>Application&shy;View</code>
    </td>
</tr>
<tr>
<td><code>&nbsp;winrt::</code><code>Application&shy;View</code></td>
</tr>
<tr>
<td><code>&nbsp;&nbsp;awsc::</code><code>Cryptographic&shy;Buffer</code></td>
<td ROWSPAN=2>
    <code>&nbsp;&nbsp;&nbsp;ABI::</code><code>Windows::</code
    ><code>Security::</code
    ><code>Cryptography::</code
    ><code>Cryptographic&shy;Buffer</code>
    </td>
</tr>
<tr>
<td><code>&nbsp;&nbsp;&nbsp;ABI::</code><code>Cryptographic&shy;Buffer</code></td>
</tr>
<tr>
<td><code>&nbsp;&nbsp;&nbsp;wsc::</code><code>Cryptographic&shy;Buffer</code></td>
<td ROWSPAN=2>
    <code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Windows::</code
    ><code>Security::</code
    ><code>Cryptography::</code
    ><code>Cryptographic&shy;Buffer</code>
    </td>
</tr>
<tr>
<td><code>&nbsp;&nbsp;&nbsp;&nbsp;cx::</code><code>Cryptographic&shy;Buffer</code></td>
</tr>
<tr>
<td><code>&nbsp;&nbsp;wwsc::</code><code>Cryptographic&shy;Buffer</code></td>
<td ROWSPAN=2>
    <code>&nbsp;winrt::</code><code>Windows::</code
    ><code>Security::</code
    ><code>Cryptography::</code
    ><code>Cryptographic&shy;Buffer</code>
    </td>
</tr>
<tr>
<td><code>winrt::</code><code>Cryptographic&shy;Buffer</code></td>
</tr>
</table>
<p>
In particular, this trick works with Windows Runtime classes because
as a general rule,
Windows Runtime type names are unique across all Windows Runtime namespaces,
so you won't inadvertently introduce a name collision by
<code>using</code>
a bunch of Windows Runtime namespaces together.
</p>
<p>
The general rule
makes Windows Runtime types easier to search for
(both on the Web and in your code)
because you will have fewer false positives.
</p>
<p>
<b>Bonus chatter</b>:
The exception to the general rule is DirectX.
Windows Runtime naming conventions permit the same name to be used
in different versions of DirectX.
This isn't a problem because in practice, each application picks one version
of DirectX and sticks with it;
applications don't try to mix-and-match different versions of DirectX.
</p>
<p>
<b>Bonus bonus chatter</b>:
The above rule is on the books, but has yet to be exercised.
As of this writing, the only version of DirectX in the Windows Runtime
is DirectX11.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1337705">
				<div id="div-comment-1337705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Koopa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180516-00/?p=98765#comment-1337705">
			May 16, 2018 at 7:44 am</a>		</div>

		<p>And of course you do all the using namespace statements in your header files. So your colleagues don&#8217;t miss out on your awesome ideas when including then.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1337745">
				<div id="div-comment-1337745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rich</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180516-00/?p=98765#comment-1337745">
			May 16, 2018 at 10:03 am</a>		</div>

		<p>*Applause* !!!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo even thread-even depth-1 parent" id="comment-1337755">
				<div id="div-comment-1337755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180516-00/?p=98765#comment-1337755">
			May 16, 2018 at 10:12 am</a>		</div>

		<p>When reading/using such deep namespace I&#8217;m always reminded of one of Butterworth&#8217;s ironic posts, namely <a href="https://punchlet.wordpress.com/2011/06/18/letter-the-sixth-belatedly/" rel="nofollow">https://punchlet.wordpress.com/2011/06/18/letter-the-sixth-belatedly/</a></p>
<blockquote><p>And then I (yes, modesty allows me to admit) had a wonderful idea. Why can we not take advantage of our patient’s mania for hierarchy? Can we not encourage them to write code like this:</p>
<p>namespace MyLibrary {<br />
    namespace Useful {<br />
        namespace Utility {<br />
           int f();<br />
        }<br />
        namespace Business {<br />
           int f();<br />
           namespace Utility {<br />
                int f();<br />
           }<br />
       }<br />
    }<br />
}</p>
<p>It turns out that almost no encouragement is needed. Humans apparently actually like writing stuff like this:</p>
<p>MyLibrary::Useful::Business::Utility::f();</p>
<p>and when they have done so seem to think they have done something profound. The thought of naming the functions so that their own names are distinct seems repellent to them. And even when the names are distinct, and there is absolutely no reason to use these ludicrous constructs, they will still embrace them as they would long-lost lovers.
</p></blockquote>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1337845">
				<div id="div-comment-1337845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180516-00/?p=98765#comment-1337845">
			May 16, 2018 at 11:39 am</a>		</div>

		<p>Thank you so much for sharing this site. I now want all content about programming to be in Screwtape Letters format.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1337785">
				<div id="div-comment-1337785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180516-00/?p=98765#comment-1337785">
			May 16, 2018 at 10:54 am</a>		</div>

		<p>This is rather wonderful.  I wouldn&#8217;t call it a &#8220;stupid trick,&#8221; per se, because after all a namespace is just an aliasing mechanism.  Rather, it&#8217;s a composite alias mechanism for aliases.</p>
<p>If you have a sufficiently large .NET code-base, it might even be worth thinking about there.  Isn&#8217;t <b>using</b> a wonderful keyword?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1337865">
				<div id="div-comment-1337865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://00jknight.com' rel='external nofollow' class='url'>Jason Knight</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180516-00/?p=98765#comment-1337865">
			May 16, 2018 at 2:18 pm</a>		</div>

		<p>Isn&#8217;t there a mistake on this? Shouldn&#8217;t the &#8220;inner namespaces&#8221; be different from each other? All three are importing the same Windows::* namespaces! Shouldn&#8217;t it be:</p>
<p>namespace ABI {<br />
    using ABI::Windows::System::Profile::SystemManufacturers;<br />
    &#8230;&#8230;<br />
}</p>
<p>???</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1337945">
				<div id="div-comment-1337945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180516-00/?p=98765#comment-1337945">
			May 17, 2018 at 6:41 am</a>		</div>

		<p>Maybe I read it wrong, but I would expect that ABI:: and winrt:: are missing in the examples of the namespaces (all 3 are identical at the moment).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1342205">
				<div id="div-comment-1342205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180516-00/?p=98765#comment-1342205">
			May 23, 2018 at 11:41 am</a>		</div>

		<p>The code&#8217;s already *in* that namespace, so it will automatically lookup names qualified relative to it.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1340825">
				<div id="div-comment-1340825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aged .Net Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180516-00/?p=98765#comment-1340825">
			May 18, 2018 at 8:32 am</a>		</div>

		<p>Looks like cut-n-paste coding strikes again.  Happens to the very best of us apparently.</p>
<p>One of the nice things about being retired from active devving is that it&#8217;s now been _months_ since I last made that mistake myself. :)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1342215">
				<div id="div-comment-1342215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180516-00/?p=98765#comment-1342215">
			May 23, 2018 at 11:43 am</a>		</div>

		<p>Nope, just context-dependent meaning, so someone who blindly copy+pastes this code to a function living in a different namespace will have the meaning mysteriously and completely change.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1341045">
				<div id="div-comment-1341045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180516-00/?p=98765#comment-1341045">
			May 19, 2018 at 4:34 pm</a>		</div>

		<p>re: Windows Runtime type names are unique across all Windows Runtime namespaces</p>
<p>So why not just use one namespace and let the compiler enforce that rule?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1341075">
				<div id="div-comment-1341075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180516-00/?p=98765#comment-1341075">
			May 20, 2018 at 7:32 pm</a>		</div>

		<p>I can&#8217;t tell if you&#8217;re being serious or silly.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1341115">
				<div id="div-comment-1341115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Yagnatinsky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180516-00/?p=98765#comment-1341115">
			May 21, 2018 at 6:28 am</a>		</div>

		<p>Almost serious</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1342435">
				<div id="div-comment-1342435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180516-00/?p=98765#comment-1342435">
			May 23, 2018 at 11:50 pm</a>		</div>

		<p>Perhaps it&#8217;s me, but when C++ first emerged, it&#8217;s great attraction was the ability to encapsulate code and hide implementation within the objects you were building. As the years went by, ever more complex mechanisms were introduced to allow the real-world access needed to object data and methods. Ever more complex aliasing and namespace usages were born to avoid the use of global variables whilst simultaneously creating ever more esoteric ways of actually having them in all but name but hiding that fact! </p>
<p>After many years, I finally gave up using C++ because it was harder to understand and use the language than it was to solve the problems I was coding for. The above article illustrates why &#8211; for me anyway &#8211; very well.</p>
<p>8)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

