<html>
<head>
<title>Data breakpoints are based on the linear address, not the physical address</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Data breakpoints are based on the linear address, not the physical address</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 9, 2008 / year-entry #159</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080509-00/?p=22383</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">When you ask the debugger to set a read or write breakpoint, the breakpoint fires only if the address is read from or written to by the address you specify. If the memory is mapped to another address and modified at that other address, then your breakpoint won't see it. For example, if you have...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>When you ask the debugger to set a read or write breakpoint, the breakpoint fires only if the address is read from or written to by the address you specify. If the memory is mapped to another address and modified at that other address, then your breakpoint won't see it.</p>
<p> For example, if you have <a href="http://blogs.msdn.com/oldnewthing/archive/2003/10/07/55194.aspx"> multiple views on the same data</a>, then modifications to that data via alternate addresses will not trigger the breakpoint. </p>
<p> The hardware breakpoint status is part of the processor context, which is maintained on a per-thread basis. Each thread maintains its own virtualized hardware breakpoint status. You don't notice this in practice because debuggers are kind enough to replicate the breakpoint state across all threads in a process so that the breakpoint fires regardless of which thread triggers it. But that replication typically doesn't extend beyond the process you're debugging; the debugger doesn't bother replicating your breakpoints into other processes! This means that if you set a write breakpoint on a block of shared memory, and the write occurs in some other process, your breakpoint won't fire since it's not your process that wrote to it. </p>
<p> When you call into kernel mode, there is another context switch, this time between user mode and kernel mode, and the kernel mode context of course doesn't have your data breakpoint. Which is a good thing, because if that data breakpoint fired in kernel mode, how is your user-mode debugger expected to be able to make any sense of it? The breakpoint fired when executing code that user mode doesn't have permission to access, and it may have fired while the kernel mode code owned an important critical section or spinlock, a critical section the debugger itself may very well need. Imagine if the memory were accessed by the keyboard driver. Oops, now your keyboard processing has been suspended. Even worse, what if the memory were accessed by a a hardware interrupt handler? Hardware interrupt handlers can't even access paged memory, much less allow user-mode code to run. </p>
<p> This "program being debugged takes a lock that the debugger itself needs" issue isn't usually a problem when a user-mode debugger debugs a user-mode process, because the locks held by a user-mode process typically affect only that process. If a process takes a critical section, sure that may deadlock the process, but the debugger is not part of the process, so it doesn't care. </p>
<p> Of course, the "debugger is its own world" principle falls apart if the debugger is foolish enough to require a lock that the program being debugged also uses. Debugger authors therefore must be careful to avoid these sorts of cross-process dependencies. (News flash:  Writing a debugger is hard.) You can still run into trouble if the program being debugged has done something with global consequences like create a fullscreen topmost window (thereby covering the debugger) or installed a global keyboard hook (thereby interfering with typing). If you've tried debugging a system service, you may have run into this sort of cross-process deadlock. For example, if you debug the service that is responsible for the networking client, and the debugger tries to access the network (for example, to load symbols), you've created a deadlock since the debugger needs to access the network, which it can't do because the networking service is stopped in the debugger. </p>
<p> Hardware debugging breakpoints are a very convenient tool for chasing down bugs, but you have to understand their limitations. </p>
<p> <b>Additional reading</b>: <a href="http://blogs.msdn.com/mithuns/archive/2006/02/28/540902.aspx"> Data breakpoint oddities</a>. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-627653">
				<div id="div-comment-627653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Greg Geldorp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080509-00/?p=22383#comment-627653">
			May 9, 2008 at 2:25 pm</a>		</div>

		<p>A couple of weeks back, I was scratching my head on how the value of a certain memory location could change without the data breakpoint I had set on it firing. In the end it turned out that the location was part of a buffer passed to ReadFile, so it was changed in kernel mode.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-madq42 odd alt thread-odd thread-alt depth-1" id="comment-627773">
				<div id="div-comment-627773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MadQ1' rel='external nofollow' class='url'>MadQ1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080509-00/?p=22383#comment-627773">
			May 9, 2008 at 6:58 pm</a>		</div>

		<p>This reminds of trying to debug a an application that used a global (out-of-process) low-level mouse hook (yes, yes, heresy! global hooks are Evilâ„¢!) The mouse behaved very strangly when the process was paused by the debugger. Kudos to the designers of the hook APIs for taking into account badly-behaved handlers; they appear to bypass the hook after a timeout. On the bright side, I did get more profficient at using shortcut keys in Visual Studio.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-627783">
				<div id="div-comment-627783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080509-00/?p=22383#comment-627783">
			May 9, 2008 at 7:21 pm</a>		</div>

		<p>An example of this, caused by the TSF:</p>
<p><a rel="nofollow" target="_new" href="http://www.virtualdub.org/blog/pivot/entry.php?id=118" rel="nofollow">http://www.virtualdub.org/blog/pivot/entry.php?id=118</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-627973">
				<div id="div-comment-627973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Raymundo Chennai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080509-00/?p=22383#comment-627973">
			May 10, 2008 at 9:11 pm</a>		</div>

		<p>Thanks for this post. &nbsp;And thank you for saying, &quot;Hardware debugging breakpoints are a very convenient tool for chasing down bugs, but you have to understand their limitations.&quot; &nbsp;Instead of the usual variation of, &quot;If you didn&#8217;t intuitively realize all of the preceding when the concept of a debugger was first described to you, the world would be a better place if your mother had aborted you.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-628003">
				<div id="div-comment-628003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://f0dder.reteam.org' rel='external nofollow' class='url'>f0dder</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080509-00/?p=22383#comment-628003">
			May 11, 2008 at 9:40 pm</a>		</div>

		<p>Writing a debugger is hard. Writing a system-level debugger using VMX is worse :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-628573">
				<div id="div-comment-628573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave Harris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080509-00/?p=22383#comment-628573">
			May 13, 2008 at 7:47 am</a>		</div>

		<p>On occasion I&#8217;ve had to debug code that handles Pasting from the clipboard into my app. I&#8217;ve learned not to use the debugger as the Copy source because it hangs, presumably because of the kind of issues mentioned here.</p>
<p>It&#8217;s so tempting, though, because my debugger is the IDE (VC++) and there&#8217;s usually some selected text right there just begging to be copied.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

