<html>
<head>
<title>Why don't I get a broken pipe when the child process terminates?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why don&#8217;t I get a broken pipe when the child process terminates?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 7, 2016 / year-entry #258</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161207-00/?p=94875</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The pipe isn't broken yet.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer was having a problem with named pipes.
</p>
<blockquote CLASS=q><p>
Our main process creates a named pipe with
<code>ACCESS_<wbr>INBOUND</code>
and passes the write handle to the child process.
The main process keeps reading from the pipe
until it gets
<code>ERROR_<wbr>PIPE_<wbr>BROKEN</code>.
We expect that when the child process terminates,
the main process will get the
<code>ERROR_<wbr>PIPE_<wbr>BROKEN</code> error.
However, we are finding that sometimes the
main proecss doesn't get the
<code>ERROR_<wbr>PIPE_<wbr>BROKEN</code> error,
even though the child process has definitely terminated.
Are there cases where
the process with the
write end of the pipe terminates,
but the read doesn't error out with
<code>ERROR_<wbr>PIPE_<wbr>BROKEN</code>?
</p>
</blockquote>
<p>
You won't get
<code>ERROR_<wbr>PIPE_<wbr>BROKEN</code>
until all the write handles are closed.
One common reason why you don't get the error
is that
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20110708-00/?p=10203">
there's still a write handle open in the parent process</a>.
Another possibility is that the child process launched a subprocess
which inherited the write handle,
or more generally, the handle got duplicated into another process
by some means.
</p>
<p>
The customer wrote back.
</p>
<blockquote CLASS=q><p>
Thanks.
That is indeed the issue.
The main process spawns many child processes simultaneously,
so depending on race conditions, the write handle for one pipe
could inadvertently be inherited by an unrelated child process.
We could explicitly serialize our <code>Create&shy;Process</code>
calls, but is there another way to specify that a child
process should inherit only certain handles and not others?
</p>
</blockquote>
<p>
Yes.
You can use the
<code>PROC_<wbr>THREAD_<wbr>ATTRIBUTE_<wbr>LIST</code> structure
to
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873">
exercise finer control over which handles are inherited</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1276275">
				<div id="div-comment-1276275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161207-00/?p=94875#comment-1276275">
			December 7, 2016 at 12:52 pm</a>		</div>

		<p>On Unix, fixing the customer&#8217;s problem would be technically possible, but far more complicated than it needs to be.  The short version is that you always open all file descriptors with O_CLOEXEC or the moral equivalent, and then when you need to inherit them, you do a fork(2) (which always inherits all file descriptors) and then use fcntl(2) to un-CLOEXEC the ones you really do want to inherit before you call one of the exec* functions.</p>
<p>Naturally, if there are libraries involved which don&#8217;t respect this pattern, or if you want to do fork-without-exec, you are screwed.  The Good News is that O_CLOEXEC is a reasonably safe default, so a number of high-level programming languages will set it for you.  This reduces the error surface somewhat, but unfortunately a lot of Unix libraries are written in C to maximize interoperability.</p>
<p>Meanwhile, cursory Googling shows that fork-without-exec leaves the child process in an infelicitous state under a variety of circumstances not involving file descriptor inheritance (typically because some mutex or other synchronization primitive gets stuck when its owning thread vanishes), and is also nontrivial to port to Windows.  I&#8217;m inclined to call it a lost cause.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1276295">
				<div id="div-comment-1276295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161207-00/?p=94875#comment-1276295">
			December 7, 2016 at 5:14 pm</a>		</div>

		<p>I wrote the code on the child side of fork() to clean up all unwanted handles. (Enum over open handles in /process gets the job done.) Your O_CLOEXEC doesn&#8217;t work too well because pipe() doesn&#8217;t set it. :(</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1276305">
				<div id="div-comment-1276305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161207-00/?p=94875#comment-1276305">
			December 7, 2016 at 5:15 pm</a>		</div>

		<p>Gee my phone autocotrect doesn&#8217;t know /proc yet.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1276336">
				<div id="div-comment-1276336" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161207-00/?p=94875#comment-1276336">
			December 8, 2016 at 7:55 am</a>		</div>

		<p>You should use pipe2() instead of pipe().</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1276575">
				<div id="div-comment-1276575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lars Viklund</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161207-00/?p=94875#comment-1276575">
			December 10, 2016 at 5:01 am</a>		</div>

		<p>Depending on who spawns your initial process, you may have file descriptors you don&#8217;t expect.</p>
<p>There was a fun incident with node.js and GNU Make a while ago. Make has a &#8220;makeserver&#8221; which communicates with the initial Make process to coordinate the starting of jobs to adhere to the specified parallelism count. This communication is done via an inherited FD which normally passes unharmed through all child processes.</p>
<p>The call chain here was something like Make -&gt; node.js -&gt; Make. This would be fine and properly job rate limited, except that node.js explicitly looped over the first N file descriptors and closed them for some obscure reason I don&#8217;t remember. The end result was a lovely explosion of make processes, each thinking it had free reigns to spawn -j tasks.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1276315">
				<div id="div-comment-1276315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161207-00/?p=94875#comment-1276315">
			December 8, 2016 at 2:41 am</a>		</div>

		<p>I&#8217;m slightly curious as to why you don&#8217;t get ERROR_HANDLE_EOF in such a case.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1277165">
				<div id="div-comment-1277165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161207-00/?p=94875#comment-1277165">
			December 16, 2016 at 1:47 am</a>		</div>

		<p>Because nobody closed it yet, that&#8217;s how pipes and sockets works: you get EOF only after the sending end has accurately closed the writing side of it.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

