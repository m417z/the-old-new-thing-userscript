<html>
<head>
<title>Writing a sort comparison function</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Writing a sort comparison function</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 23, 2003 / year-entry #106</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20031023-00/?p=42063</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">When you are writing a sort comparison function (say, to be passed to ListView_SortItems or *gasp* to be used as an IComparer), your comparison function needs to follow these rules: Reflexivity: Compare(a, a) = 0. Anti-Symmetry: Compare(a, b) has the opposite sign of Compare(b, a), where 0 is considered to be its own opposite. Transitivity:...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
When you are writing a sort comparison function (say, to be passed to
<code>ListView_SortItems</code> or *gasp* to be used as
an <code>IComparer</code>), your comparison function needs to follow
these rules:
</p>
<ul>
<li><b>Reflexivity</b>:
<code>Compare(a, a) = 0</code>.</p>
<li><b>Anti-Symmetry</b>:
<code>Compare(a, b)</code> has the opposite sign of
<code>Compare(b, a)</code>, where 0 is considered to
be its own opposite.</p>
<li><b>Transitivity</b>:
If <code>Compare(a, b) &le; 0</code>
and <code>Compare(b, c) &le; 0</code>,
then <code>Compare(a, c) &le; 0</code>.
</ul>
<p>
Here are some logical consequences of these rules (all easily proved).
The first two are obvious, but the third may be a surprise.
</p>
<ul>
<li><b>Transitivity of equality</b>:
If <code>Compare(a, b) = 0</code>
and <code>Compare(b, c) = 0</code>,
then <code>Compare(a, c) = 0</code>.</p>
<li><b>Transitivity of inequality</b>:
If <code>Compare(a, b) &lt; 0</code>
and <code>Compare(b, c) &lt; 0</code>,
then <code>Compare(a, c) &lt; 0</code>.</p>
<li><b>Substitution</b>: If
<code>Compare(a, b) = 0</code>, then
<code>Compare(a, c)</code> has the same sign as
<code>Compare(b, c)</code>.
</ul>
<p>
Of the original three rules,
the first two are hard to get wrong, but the third rule is
often hard to get right if you try to be clever in your comparison
function.
</p>
<p>
For one thing, these rules require that you implement a total order.
If you merely have a partial order, you must extend your partial
order to a total order <i>in a consistent manner</i>.
</p>
<p>
I saw somebody get into trouble when they tried to implement their
comparison function on a set of tasks, where some tasks have other
tasks as prerequisites. The comparison function implemented
the following algorithm:
</p>
<ul>
<li>If <code>a</code> is a prerequisite of <code>b</code>
(possibly through a chain of intermediate tasks),
then <code>a &lt; b</code>.</p>
<li>If <code>b</code> is a prerequisite of <code>a</code>
(again, possibly through a chain of intermediate tasks),
then <code>a &gt; b</code>.</p>
<li>Otherwise, <code>a = b</code>.
"Neither task is a prerequisite of the other, so I don't care what
order they are in."
</ul>
<p>
Sounds great. Then you can sort with this comparison function and you
get the tasks listed in some order such that all tasks come after
their prerequisites.
</p>
<p>
Except that it doesn't work. Trying to sort with this comparison
function results in all the tasks being jumbled together
with apparently no regard for which tasks are prerequisites of which.
What went wrong?
</p>
<p>
Consider this dependency diagram:
</p>
<pre>
   a ----&gt; b
 
   c
</pre>
<p>
Task "a" is a prerequisite for "b", and task "c" is unrelated to both
of them. If you used the above comparison function, it would declare
that "a = c" and "b = c" (since "c" is unrelated to "a" or "b"),
which in turn implies by transitivity that "a = b", which contradicts
"a &lt; b", since "a" is a prerequisite for "b".
If your comparison function is inconsistent, you will get garbled results. 
</p>
<p>
Moral of the story: When you write a comparison function, you really
have to know which items are less than which other items.
Don't just declare two items "equal" because you don't know which order
they should be in.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-128813">
				<div id="div-comment-128813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031023-00/?p=42063#comment-128813">
			October 23, 2003 at 3:24 pm</a>		</div>

		<p>Sorry if this is slightly off-topic, but what is wrong with IComparer?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-128823">
				<div id="div-comment-128823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Israel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031023-00/?p=42063#comment-128823">
			October 23, 2003 at 4:40 pm</a>		</div>

		<p>I would guess that it&#8217;s because a .Net interface (or a .Net anything) is normally not seen on this blog. See the tagline at top right! :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-128833">
				<div id="div-comment-128833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031023-00/?p=42063#comment-128833">
			October 24, 2003 at 9:38 am</a>		</div>

		<p>The solution to the IComparer for Tasks is too compare another task field after the dependency comparison showed nothing. For instance:<br />
int compare(Task a, Task b) {<br />
  if (a.dependsOn(b)) return 1;<br />
  if (b.dependsOn(a)) return -1;<br />
  return strcmp(a.getName(), b.getName());<br />
  // or return a.getId() &#8211; b.getId(); if you don&#8217;t like the sort order depending on the task name which could change.<br />
}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-128843">
				<div id="div-comment-128843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031023-00/?p=42063#comment-128843">
			October 24, 2003 at 12:22 pm</a>		</div>

		<p>Sorry, Jonathan, that still doesn&#8217;t work. Consider this dependency diagram:</p>
<p>c -&gt; a<br />
b</p>
<p>then a&lt;b (no dependency, use alpha sort), and b&lt;c (no dependency, use alpha sort), and c&lt;a (dependency).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-154663">
				<div id="div-comment-154663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ericlippert/archive/2004/03/16/90851.aspx' rel='external nofollow' class='url'>Fabulous Adventures In Coding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031023-00/?p=42063#comment-154663">
			March 16, 2004 at 9:33 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-201263">
				<div id="div-comment-201263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Keith McAfee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031023-00/?p=42063#comment-201263">
			August 5, 2004 at 6:50 am</a>		</div>

		<p>raymond, you are wrong, &quot;b&lt;c&quot; is incorrect because there IS a dependency of c on b &#8230; dependencies are by definition bi-directional.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-201333">
				<div id="div-comment-201333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031023-00/?p=42063#comment-201333">
			August 5, 2004 at 8:23 am</a>		</div>

		<p>The conversion from gotdotnet messed up the formatting.  The diagram should be</p>
<p>c -&gt; a<br />
<br />b</p>
<p>there is no dependency betwen b and anything.</p>
<p>With that I&#8217;m closing comments since this thread is extremely old.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-249053">
				<div id="div-comment-249053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2005/01/25/360195.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031023-00/?p=42063#comment-249053">
			January 25, 2005 at 10:00 am</a>		</div>

		<p>Files and directories with no time/date are often mistaken for so-called</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

