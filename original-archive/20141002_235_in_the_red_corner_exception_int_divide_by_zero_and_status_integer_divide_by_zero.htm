<html>
<head>
<title>In the red corner, EXCEPTION_INT_DIVIDE_BY_ZERO and STATUS_INTEGER_DIVIDE_BY_ZERO; and in the blue corner, EXCEPTION_INT_OVERFLOW and STATUS_INTEGER_OVERFLOW</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>In the red corner, EXCEPTION_INT_DIVIDE_BY_ZERO and STATUS_INTEGER_DIVIDE_BY_ZERO; and in the blue corner, EXCEPTION_INT_OVERFLOW and STATUS_INTEGER_OVERFLOW</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 2, 2014 / year-entry #236</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The exception code EXCEPTION_INT_DIVIDE_BY_ZERO (and its doppelgänger STATUS_INTEGER_DIVIDE_BY_ZERO) is raised, naturally enough, when the denominator of an integer division is zero. The x86 and x64 processors also raise this exception when you divide INT_MIN by -1, or more generally, when the result of a division does not fit in the destination. The division instructions for...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The exception code <code>EXCEPTION_<wbr>INT_<wbr>DIVIDE_<wbr>BY_<wbr>ZERO</wbr></wbr></wbr></wbr></code> (and its doppelg&auml;nger <code>STATUS_<wbr>INTEGER_<wbr>DIVIDE_<wbr>BY_<wbr>ZERO</wbr></wbr></wbr></wbr></code>) is raised, naturally enough, when the denominator of an integer division is zero.</p>
<p> The x86 and x64 processors also raise this exception when <a href="http://web.archive.org/web/20111128085612/http://my.opera.com/taviso/blog/show.dml/639454"> you divide <code>INT_MIN</code> by <code>-1</code></a>, or more generally, when the result of a division does not fit in the destination. The division instructions for those processors take a 2<var>N</var>-bit dividend and an <var>N</var>-bit divisor, and they produce <var>N</var>-bit quotient and remainder. Values of <var>N</var> can be 8, 16, and 32; the 64-bit processors also support 64. And the division can be signed or unsigned. Therefore, you can get this exception if you try to divide, say, 2&sup3;&sup2; by 1, using a 64-bit dividend and 32-bit divisor. The quotient is 2&sup3;&sup2;, which does not fit in a 32-bit divisor. </p>
<p> The Windows&nbsp;95 kernel does not attempt to distinguish between division overflow and division by zero. It just converts the processor exception to <code>EXCEPTION_<wbr>INT_<wbr>DIVIDE_<wbr>BY_<wbr>ZERO</wbr></wbr></wbr></wbr></code> and calls it a day. </p>
<p> The Windows&nbsp;NT kernel realizes that the underlying processor exception is ambiguous and tries to figure out why the division operation failed. If the divisor is zero, then the exception is reported as <code>EXCEPTION_<wbr>INT_<wbr>DIVIDE_<wbr>BY_<wbr>ZERO</wbr></wbr></wbr></wbr></code>. If the divisor is nonzero, then the exception is reported as <code>EXCEPTION_<wbr>INT_<wbr>OVERFLOW</wbr></wbr></code>. </p>
<p> Another place that <code>EXCEPTION_<wbr>INT_<wbr>OVERFLOW</wbr></wbr></code> can arise from a processor exception is if an application issues the <code>INTO</code> instruction and the overflow flag is set. </p>
<p> <b>Puzzle</b>: The <code>DIV</code> and <code>IDIV</code> instructions support a divisor in memory. What happens if the memory becomes inaccessible after the processor raises the exception but before the kernel can read the value in order to check whether it is zero? What other things could go wrong? </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1153793">
				<div id="div-comment-1153793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1153793">
			October 2, 2014 at 7:05 am</a>		</div>

		<p>Let&#39;s see. In single CPU land it can&#39;t happen. In multi CPU I&#39;d probably opt to reraise it as an access violation. The other thing that can go wrong is obviously the codeseg unmapped out from the interrupt handler. Same solution.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1153813">
				<div id="div-comment-1153813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1153813">
			October 2, 2014 at 7:09 am</a>		</div>

		<p>Puzzle: I&#39;d guess that the kernel does the moral equivalent of __try/__except when checking the divisor in the exception handler, and if a secondary exception is encountered while trying to handle the division exception, it just throws its hands up and calls it an EXCEPTION_INT_DIVIDE_BY_ZERO by default? &nbsp;Or maybe there&#39;s something tricky going on with the cache?</p>
<p>The memory could also change out from under the kernel during the brief period between when the exception is raised and when it&#39;s handled, e.g. if it&#39;s memory-mapped I/O or the target of a DMA read request, in which case the kernel might report the wrong exception type. &nbsp;Of course in that case, the program itself would have a terrible race condition.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1153823">
				<div id="div-comment-1153823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1153823">
			October 2, 2014 at 7:12 am</a>		</div>

		<p>Niceties: they are allowed to fail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1153843">
				<div id="div-comment-1153843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1153843">
			October 2, 2014 at 7:43 am</a>		</div>

		<p>The division exception handler has to touch user memory. Any code in the kernel that needs to touch user memory has to run in a __try/__except block.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1153893">
				<div id="div-comment-1153893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1153893">
			October 2, 2014 at 10:33 am</a>		</div>

		<p>Fun fact: the new RISC-V architecture does not raise an exception on division by zero or division of INT_MIN by -1. The RISC-V ISA specifies a fixed value to be returned in both cases. If you want to check for division by zero or division overflow, you can add a test before or after the division instruction.</p>
<p>(I don&#39;t have the C spec in front of me right now, but I believe that both cases are &quot;undefined behavior&quot; in C, which means returning a fixed value is acceptable, and the compiler doesn&#39;t have to add any test.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1153903">
				<div id="div-comment-1153903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1153903">
			October 2, 2014 at 10:42 am</a>		</div>

		<p>@Cesar: Signed integer overflow is definitely undefined behavior, though many compilers are nice and produce twos-complement behavior. &nbsp;Unsigned integer overflow, however, is perfectly well-defined (the number rolls over like an odometer), so the compiler might have to generate additional code to cover that case. &nbsp;OTOOH, division by zero is something of a special case so it is probably separately undefined regardless of signedness.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1153923">
				<div id="div-comment-1153923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1153923">
			October 2, 2014 at 12:26 pm</a>		</div>

		<p>@Cesar AArch64 (new 64bit ARM ISA) does the same thing. I&#39;m guessing the necessary hardware and complexity just isn&#39;t worth to implement it in hardware. An extremely predictable (hoepfully!) branch is cheap and compilers know that the dividend can&#39;t be zero in lots of cases too, so go for the simpler hardware implementation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1153933">
				<div id="div-comment-1153933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1153933">
			October 2, 2014 at 12:29 pm</a>		</div>

		<p>Of course, if another thread changes the divisor value in memory, it could be something other than 0 or -1 when the kernel looks.</p>
<p>Trivia: &nbsp;PowerPC takes a somewhat different approach. The result in either case (div by 0 or INT_MIN/-1) is undefined. Optionally, the instruction can request that the overflow flag be set/cleared based on the result so that the condition can be detected. If the overflow flag is set, the &quot;summary overflow&quot; flag is also set. But, this flag is never reset by an arithmetic instruction, so one can detect that there was a problem in a sequence of code by checking &quot;summary overflow&quot; at the end of it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1153963">
				<div id="div-comment-1153963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1153963">
			October 2, 2014 at 2:04 pm</a>		</div>

		<p>Yes, the x86/x64 NT kernel actually has a mini-disassembler in it that understands divide instructions enough to find and determine whether the divisor is zero. &nbsp;I think that there are corner cases where the kernel isn&#39;t a complete-enough x86 disassembler to determine the correct parameters. &nbsp;I forget which of the two exceptions is returned if it can&#39;t determine the answer (or if the kernel ends up throwing an exception trying).</p>
<p>The MSVC ARM (Windows Phone/Windows RT) compiler gives division by zero defined behavior in the form of properly throwing exceptions like x86. &nbsp;When you divide by an unknown divisor, or by zero intentionally, a library function is called. &nbsp;This library function checks for a zero divisor (or if signed, for INT_MIN / -1). &nbsp;If such a condition happens, the code executes a particular illegal Thumb2 instruction to cause an illegal instruction exception. &nbsp;The NT kernel knows this particular illegal instruction and translates it to a divide exception. &nbsp;I believe that whether a certain register (r0?) is zero determines which of the two exceptions occurs.</p>
<p>ARMv7/Thumb2 has 256 such illegal instructions; I think 7 are used in this manner in Windows on ARM. &nbsp;Others are used as __debugbreak, __fastfail, __yield, __rdpmccntr64, if I remember correctly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1153883">
				<div id="div-comment-1153883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1153883">
			October 2, 2014 at 9:24 am</a>		</div>

		<p>I&#39;d also change it to an access violation. The kernel can pretend the divide-by-zero which threw the fault never occurred, and it was an access violation all along. Once the program gets control back, it&#39;s impossible* for it to know any better.</p>
<p>* unless it&#39;s doing weird stuff with hardware debug registers</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1153973">
				<div id="div-comment-1153973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1153973">
			October 2, 2014 at 11:50 pm</a>		</div>

		<p>@Puzzle: Just as a general response, I&#39;d say it makes up a suitably plausible answer and returns that. Sometimes you have to be able to say &quot;this is what would usually happen, so we&#39;ll call call it that because EXCEPTION_BEATS_ME_WHATS_WRONG doesn&#39;t go down too well with developers&quot;. As long as you keep things within reason and don&#39;t report something like &quot;lp0 on fire&quot; of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1153983">
				<div id="div-comment-1153983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1153983">
			October 3, 2014 at 12:13 am</a>		</div>

		<p>&quot;Divide by zero&quot; is, to me, the poster child for dubious priorities &#8212; something that produces an exception or trap of some sort across a very wide range of hardware and languages, even where all sorts of other horrible things that deserve to be signaled aren&#39;t. It&#39;s like programmers and designers all agreed from their basic math class that yes, division by zero is such an obviously wrong and undefined thing to do that we need hardware support to interrupt the program. Integer overflow? Meh, maybe. If you&#39;re lucky. Let&#39;s just wrap around instead, that&#39;s usually what we want anyway &#8212; right?</p>
<p>Not that I&#39;m advocating this, but I wonder how many programs would continue running just fine if the hardware just returned 0. In most practical cases I&#39;ve seen, the division happens as a result of something like &quot;widget_blob_size = total_blob_size / widgets&quot;, where someone forgot the corner case of there being no widgets. Obviously you can come up with easy examples of this going horribly wrong, but then, you can do that for any instance of undefined behavior that nevertheless isn&#39;t checked.</p>
<p>The best situation is a dual system where you can have checks and exceptions all the way if you&#39;re so inclined, or just fallback results and flags that are checked wherever appropriate, but if you need to care about performance you are of course very dependent on what the hardware offers you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1154263">
				<div id="div-comment-1154263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1154263">
			October 4, 2014 at 2:32 am</a>		</div>

		<p>@JM: It&#39;s called fail fast.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1154293">
				<div id="div-comment-1154293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1154293">
			October 4, 2014 at 2:48 pm</a>		</div>

		<p>@640k: JM contrasted divide-by-zero exceptions with overflow exceptions. If divide-by-zero is fail-fast, then wouldn&#39;t it also make sense for all overflows to be fail-fast?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1154313">
				<div id="div-comment-1154313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1154313">
			October 4, 2014 at 6:49 pm</a>		</div>

		<p>I agree that the fault reading the value should surface as a fault, as if the division never happened.</p>
<p>If the kernel reads the value and it&#39;s not 0 or -1 because another thread wrote it, why not return control to the program and let it retry the DIV instruction? Again, like the first divide never happened.</p>
<p>These both seem like fair game when data races are play.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1154333">
				<div id="div-comment-1154333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1154333">
			October 5, 2014 at 5:52 am</a>		</div>

		<p>@Kevin &quot;Signed integer overflow is definitely undefined behavior&quot;</p>
<p>Uh, no. Signed integer overflow is defined *In C programs*. It is certainly not undefined for usermode processes in Windows in general. For example, signed-overflow is well defined in C#, or Java, or if the programmer decides to jump in and do a bit of have-a-go x86 assembly.</p>
<p>The kernel doesn&#39;t know what constraints user-mode is running in, so it has to try and resolve the exception as best it can.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1154363">
				<div id="div-comment-1154363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hagenp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1154363">
			October 6, 2014 at 6:20 am</a>		</div>

		<p>Thank you, Raymond, for using the correct spelling of &quot;DoppelgÃ¤nger&quot;&#8230;!!!</p>
<p>(Why this matters to me? Well, just imagine, some country had &quot;y&quot; as a special character, and so they would use &quot;u&quot; or &quot;v&quot; instead of &quot;y&quot; all the time when writing English: </p>
<p>&quot;I guess, this could be verv annoving for vou after some time. OK, vou would get used to it, but it would still not be correct.&quot; &#8230;hopefully it is clear now.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1154373">
				<div id="div-comment-1154373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1154373">
			October 6, 2014 at 8:11 am</a>		</div>

		<p>&quot;I guess, this could be very annoying for you after some time.&quot;</p>
<p>Huh?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1154743">
				<div id="div-comment-1154743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1154743">
			October 8, 2014 at 8:13 pm</a>		</div>

		<p>@Matt</p>
<p>&gt;For example, signed-overflow is well defined in C#, or Java</p>
<p>They don&#39;t count. &nbsp;They run on VMs.</p>
<p>&gt;or if the programmer decides to jump in and do a bit of have-a-go x86 assembly.</p>
<p>We&#39;re not talking about x86. &nbsp;We&#39;re talking about RISC-V.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1154753">
				<div id="div-comment-1154753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1154753">
			October 9, 2014 at 12:06 am</a>		</div>

		<p>&quot;&gt;or if the programmer decides to jump in and do a bit of have-a-go x86 assembly.</p>
<p>We&#39;re not talking about x86. &nbsp;We&#39;re talking about RISC-V.&quot;</p>
<p>Huh? C programs are not the only kind of processes that are allowed to run under a general-purpose OS. &quot;undefined behavior&quot; is a C specific thing, and only so by definition of this specific language. Any other language on the planet can define the behavior differently. Any part of a &nbsp;program written in assembler has to expect that the assembly instruction works like defined for the specific CPU, not how the C language likes to define the integer division.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1154763">
				<div id="div-comment-1154763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141002-00/?p=43933#comment-1154763">
			October 9, 2014 at 6:51 am</a>		</div>

		<p>@@Kevin</p>
<p>Cesar asked a question *about C* and I replied. &nbsp;Why do people keep changing the subject? &nbsp;I suppose now the comments to Raymond&#39;s blog need their own nitpicker&#39;s corners.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

