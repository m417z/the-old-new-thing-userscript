<html>
<head>
<title>Handy delegate shortcut hides important details: The hidden delegate</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Handy delegate shortcut hides important details: The hidden delegate</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 21, 2015 / year-entry #176</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150821-00/?p=91761</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">One of my colleagues was having trouble with a little tool he wrote.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
One of my colleagues was having trouble with a little tool
he wrote.
<span id="more-91761"></span>
</p>
<blockquote CLASS=q>
<p>
I installed a low-level keyboard hook following the code in
<a HREF="http://blogs.msdn.com/b/toub/archive/2006/05/03/589423.aspx">
this article</a>,
but it crashes randomly.
Here's what I know so far:
</p>
<ul>
<li>I spawn a new STA thread to register the hook,
    so that it can run a message pump,
    which is a requirement for low-level hooks.</p>
<li>After setting the hook, the program waits on
    a <code>Manual&shy;Reset&shy;Event</code>
    with <code>Wait&shy;One()</code>.
    Since this is being called from an STA thread,
    <a HREF="http://blogs.msdn.com/b/cbrumme/archive/2003/04/17/51361.aspx">
    it will pump messages while waiting</a>, which is
    what we want.</p>
<li>The event is signaled by another part of the program
    when the hook is no longer needed,
    at which point the thread unregisters the hook
    before exiting normally.
</ul>
<p>
The crash happens inside <code>Wait&shy;One()</code>
immediately after keyboard activity occurs.
The debugger tells me that it is crashing trying to dispatch
a call into a managed stub via the message pump,
but that's all I was able to extract.
</p>
</blockquote>
<p>
I took a look at the article that my colleague referenced
and observed that there was a subtlety in the code that
not obvious,
and which may have been lost in translation.
I shared my observation in the form a psychic prediction.
</p>
<blockquote CLASS=m>
<p>
My psychic powers tell me that
you did not prevent the delegate from getting GCd.
The next time GC runs,
the delegate will get collected,
and the next attempt to fire the callback will
AV because its calling into memory that has been freed.
</p>
<p>
The sample code from the blog avoids this problem by
putting the delegate in a private static,
which makes it a GC root, ineligible for collection.
</p>
<pre>
private static LowLevelKeyboardProc _proc = HookCallback;
</pre>
<p>
This is subtle because the private static is
decoupled from <code>Set&shy;Hook</code>.
If you copied <code>Set&shy;Hook</code>
but not the private static,
then you inadvertently created a bug because
local variables can get optimized out.
</p>
<p>
Either put it in a static,
like the sample does,
or explicitly extend the delegates lifetime by calling
<code>GC.<wbr>Keep&shy;Alive()</code> after you unhook the hook.
</p>
<pre>
LowLevelKeyboardProc proc = HookCallback;
IntPtr hookId = SetHook(proc);
WaitOne();
RemoveHook(hookId);
GC.KeepAlive(proc); // keep the proc alive until this line is reached
</pre>
</blockquote>
<p>
My colleague realized that was the problem.
</p>
<blockquote CLASS=q>
<p>
I'd actually thought of that (mostly).
I made my callback method itself a static,
thinking that this was enough.
What I forgot is that C# wraps that in an instance
of the delegate automatically,
and it was this hidden delegate that was getting GC'd
not the callback function itself.
This explains why I could always inspect the callback
method and see that it was alive and well,
yet we were still jumping into space when invoking
the callback.
</p>
<p>
Explicitly calling out the assignment reminded me of the
details of delegates.
Thanks!
</p>
</blockquote>
<p>
The classical notation for creating a delegate is
</p>
<pre>
    DelegateType d = new DelegateType(o.Method);
    DelegateType d = new DelegateType(Method); // this.Method
</pre>
<p>
C# version 2.0 added <i>delegate inference</i>
which lets you omit the <code>new DelegateType</code>
most of the time.
The compiler will automatically convert the method name
(and optional <code>this</code> object) into a delegate.
</p>
<pre>
    DelegateType d = o.Method;
    DelegateType d = Method; // this.Method
</pre>
<p>
This shorthand is so old,
you may not even remember (or realize) that
it is a shorthand for a <i>hidden delegate</i>.
</p>
<p>
In my colleague's program,
the line
</p>
<pre>
    IntPtr hookId = SetHook(HookCallback);
</pre>
<p>
was shorthand for
</p>
<pre>
    LowLevelKeyboardProc temp = HookCallback;
    IntPtr hookId = SetHook(temp);
</pre>
<p>
Once the delegate was made explicit rather than hidden,
the issue became clear:
Since there was nothing keeping the delegate alive,
the delegate disappeared at the next GC,
and the unmanaged function pointer disappeared with it.
</p>
<p>
And now CLR Week will disappear until next time.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1207901">
				<div id="div-comment-1207901" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150821-00/?p=91761#comment-1207901">
			August 21, 2015 at 7:06 am</a>		</div>

		<p>Been here.There used to be a comment &quot;Do not optimize. Compiler bugs lurk.&quot; Until we understood what was going on. Incidentally, in debug compiles the variable would always live long enough because debug builds keep variables alive until they leave scope.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1207891">
				<div id="div-comment-1207891" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Some guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150821-00/?p=91761#comment-1207891">
			August 21, 2015 at 7:23 am</a>		</div>

		<p>Not knowing any C# myself, I wonder:</p>
<p>is there any magic in &quot;GC.KeepAlive&quot; or is it basically just a NOP which could be replaced with anything else, as long as it references the local &quot;proc&quot; variable?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1207881">
				<div id="div-comment-1207881" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150821-00/?p=91761#comment-1207881">
			August 21, 2015 at 7:28 am</a>		</div>

		<p>It&#39;s a function call the JIT can&#39;t inline.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1207861">
				<div id="div-comment-1207861" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Raphael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150821-00/?p=91761#comment-1207861">
			August 21, 2015 at 9:48 am</a>		</div>

		<p>Yep, it&#39;s just a NOP in a method marked as Do-Not-Inline: <a rel="nofollow" target="_new" href="http://referencesource.microsoft.com/#mscorlib/system/gc.cs,279">referencesource.microsoft.com</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1207821">
				<div id="div-comment-1207821" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">poizan42</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150821-00/?p=91761#comment-1207821">
			August 23, 2015 at 1:17 pm</a>		</div>

		<p>Uhm so unless it&#39;s special-cased in the jitter, GC.KeepAlive actually has a small performance overhead (at least a call+return)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1207811">
				<div id="div-comment-1207811" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150821-00/?p=91761#comment-1207811">
			August 23, 2015 at 2:08 pm</a>		</div>

		<p>Raymond, thanks for the managed code week. Again, I learned from your posts. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1207671">
				<div id="div-comment-1207671" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150821-00/?p=91761#comment-1207671">
			August 24, 2015 at 9:14 am</a>		</div>

		<p>@poizan42 It also inhibits useful optimisations since the JIT cannot make any assumptions about global state of the program after the function is executed.</p>
<p>But all in all that&#39;s still pretty negligible on a larger scale.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1207401">
				<div id="div-comment-1207401" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150821-00/?p=91761#comment-1207401">
			August 25, 2015 at 7:31 am</a>		</div>

		<p>I like how your colleague actually responds to you, and gives you thanks, and mentions that he forgot an important point. &nbsp;He doesn&#39;t blame you for what happened. &nbsp;That&#39;s nice!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1207261">
				<div id="div-comment-1207261" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Cow Herd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150821-00/?p=91761#comment-1207261">
			August 25, 2015 at 5:08 pm</a>		</div>

		<p>&quot;a private static&quot;? Not &quot;a private static *field*&quot;?</p>
<p>Reminds me of the newbies asking in IRC &quot;Hey, I declared main as a void, but someone tells me it should be an int instead?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1207241">
				<div id="div-comment-1207241" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Cow Herd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150821-00/?p=91761#comment-1207241">
			August 25, 2015 at 5:24 pm</a>		</div>

		<p>@Raphael: I like how they censored the word &quot;races&quot;, referring to race conditions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1207201">
				<div id="div-comment-1207201" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150821-00/?p=91761#comment-1207201">
			August 26, 2015 at 12:06 am</a>		</div>

		<p>Weirdly, the documentation for KeepAlive mentions a problem that&#39;s not supposed to happen because according to Dispose&#39;s documentation, you&#39;re not supposed to dispose managed resources when GC&#39;d, only when explicitly disposed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1207181">
				<div id="div-comment-1207181" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"> Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150821-00/?p=91761#comment-1207181">
			August 26, 2015 at 4:06 am</a>		</div>

		<p>ETA: How foolish I am. Of course that situation can easily happen as soon as the stream is an unmanaged one.</p>
<p>Fortunately, explicit disposal should prevent it (since it references the object).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1206911">
				<div id="div-comment-1206911" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150821-00/?p=91761#comment-1206911">
			August 27, 2015 at 8:38 am</a>		</div>

		<p>@Anonymous Cow Herd: You mean like this?</p>
<p><a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/32212468/wndproc-weird-behaviour-on-windows-8-1-only-works-if-dummy-printf-is-called/32212944#32212944">stackoverflow.com/&#8230;/32212944</a></p>
<p>(different function, same consequence)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

