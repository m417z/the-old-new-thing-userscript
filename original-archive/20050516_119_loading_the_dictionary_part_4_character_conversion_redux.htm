<html>
<head>
<title>Loading the dictionary, part 4:  Character conversion redux</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Loading the dictionary, part 4:  Character conversion redux</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 16, 2005 / year-entry #120</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>24</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Getting rid of getline was a big help, but 480ms is still not quite peppy enough. You need to respond to user actions within a tenth of a second for thing to seem responsive. Profiling the latest endeavor reveals that 40% of our CPU time is spent in codecvt::in. Some debugging reveals that codecvt::in ultimately...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Getting rid of <code>getline</code> was a big help, but 480ms
is still not quite peppy enough.  You need to respond to user
actions within a tenth of a second for thing to seem responsive.
</p>
<p>
Profiling the latest endeavor reveals that 40% of our CPU time
is spent in <code>codecvt::in</code>.  Some debugging reveals
that <code>codecvt::in</code> ultimately calls
<code>MultiByteToWideChar</code> but uses it to convert
only one or two characters at a time, even though we handed it a
whole line.
</p>
<p>
Let's get rid of <code>codecvt::in</code> and convert the
characters ourselves, calling
<code>MultiByteToWideChar</code> exactly once to convert the
entire line at a single go.
</p>
<pre>
<font COLOR=blue>#define CP_BIG5 950</font>

Dictionary::Dictionary()
{
 MappedTextFile mtf(TEXT("cedict.b5"));
 <font COLOR=blue><strike>// typedef std::codecvt&lt;wchar_t, char, mbstate_t&gt; widecvt;
 // std::locale l(".950");
 // const widecvt&amp; cvt = _USE(l, widecvt); // use_facet&lt;widecvt&gt;(l);</strike></font>
 const CHAR* pchBuf = mtf.Buffer();
 const CHAR* pchEnd = pchBuf + mtf.Length();
 while (pchBuf &lt; pchEnd) {
  const CHAR* pchEOL = std::find(pchBuf, pchEnd, '\n');
  if (*pchBuf != '#') {
   size_t cchBuf = pchEOL - pchBuf;
   wchar_t* buf = new wchar_t[cchBuf];
   <font COLOR=blue>DWORD cchResult = MultiByteToWideChar(CP_BIG5, 0,
                          pchBuf, cchBuf, buf, cchBuf);
   if (cchResult) {</font>
    wstring line(buf, <font COLOR=blue>cchResult</font>);
    DictionaryEntry de;
    if (de.Parse(line)) {
     v.push_back(de);
    }
   }
   delete[] buf;
  }
  pchBuf = pchEOL + 1;
 }
}
</pre>
<p>
Instead of using the <code>codecvt::in</code> method to perform
character conversion, we go straight to the
<code>MultiByteToWideChar</code> function.
Notice that we assume that the Big5 string will not generate
more Unicode characters than its length in bytes.
This happens to be a safe assumption based on our external knowledge
of the Big5 encoding.  (If the encoding were something else,
the assumption may no longer be valid.)
</p>
<p>
With this change, the dictionary load time has dropped to 240ms
(or 300ms if you include the time it takes to destroy the
dictionary).  That's twice as fast the previous version, but still
not quite close enough to the 100ms goal.
We still have some work ahead of us.
</p>
<p>
[Raymond is currently on vacation; this message was pre-recorded.]</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-cornedbee even thread-even depth-1" id="comment-276183">
				<div id="div-comment-276183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CornedBee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276183">
			May 16, 2005 at 12:25 pm</a>		</div>

		<p>I can&#8217;t help but think that so far, all you have demonstrated is how inefficient the MS STL implementation is.</p>
<p>Perhaps it&#8217;s not possible to make it much better. But I don&#8217;t really believe that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276203">
				<div id="div-comment-276203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TrueTom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276203">
			May 16, 2005 at 1:20 pm</a>		</div>

		<p>C++ and its lack of support of Unicode is a big, big pain&#8230; You cannot rely on nothing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276213">
				<div id="div-comment-276213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ricom/archive/2005/05/16/418051.aspx' rel='external nofollow' class='url'>Rico Mariani's Performance Tidbits</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276213">
			May 16, 2005 at 2:09 pm</a>		</div>

		<p>Raymond is definately making some great headway.&amp;amp;nbsp; Having targetted the single-character at a time&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276223">
				<div id="div-comment-276223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.interdictor.org' rel='external nofollow' class='url'>niven</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276223">
			May 16, 2005 at 2:59 pm</a>		</div>

		<p>I&#8217;ve run the four versions, but get no discernable difference in performance:</p>
<p>version 3: 210ms<br />
<br />version 4: 210ms</p>
<p>(with Borland CPP builder)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276233">
				<div id="div-comment-276233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276233">
			May 16, 2005 at 3:40 pm</a>		</div>

		<p>niven &#8211; sounds like you&#8217;re using GetTickCount() to do your perf timing.</p>
<p>You might want to use the instruction cycle timer or the performance counter instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276243">
				<div id="div-comment-276243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AlienRancher</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276243">
			May 16, 2005 at 4:09 pm</a>		</div>

		<p>Just for reference here <a rel="nofollow" target="_new" href="http://blogs.msdn.com/ricom/" rel="nofollow">http://blogs.msdn.com/ricom/</a> the managed unoptimized version (whith plain old stream ReadLine ) clocking at 124ms which seems to me that the small allocations are the weakest part of the standard library.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276163">
				<div id="div-comment-276163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anders Dalvander</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276163">
			May 16, 2005 at 10:06 am</a>		</div>

		<p>Dictionary::Dictionary()<br />
<br />{<br />
<br /> MappedTextFile mtf(TEXT(&quot;cedict.b5&quot;));<br />
<br /> const CHAR* pchBuf = mtf.Buffer();<br />
<br /> const CHAR* pchEnd = pchBuf + mtf.Length();<br />
<br /> std::vector&lt;wchar_t&gt; buf;<br />
<br /> while (pchBuf &lt; pchEnd) {<br />
<br />  const CHAR* pchEOL = std::find(pchBuf, pchEnd, &#8216;n&#8217;);<br />
<br />  if (*pchBuf != &#8216;#&#8217;) {<br />
<br />   size_t cchBuf = pchEOL &#8211; pchBuf;<br />
<br />   buf.resize(cchBuf + 1); // +1 to prevent zero length buffer, which is undefined.<br />
<br />   DWORD cchResult = MultiByteToWideChar(CP_BIG5, 0,<br />
<br />                          pchBuf, cchBuf, &amp;buf[0], cchBuf);<br />
<br />   if (cchResult) {<br />
<br />    wstring line(&amp;buf[0], cchResult);<br />
<br />    DictionaryEntry de;<br />
<br />    if (de.Parse(line)) {<br />
<br />     v.push_back(de);<br />
<br />    }<br />
<br />   }<br />
<br />  }<br />
<br />  pchBuf = pchEOL + 1;<br />
<br /> }<br />
<br />}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276253">
				<div id="div-comment-276253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Pryhodko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276253">
			May 16, 2005 at 7:36 pm</a>		</div>

		<p>Some notes about code in your example:<br />
<br />wstring&#8217;s constructor could throw<br />
<br />DictionaryEntry&#8217;s contructor could throw<br />
<br />de.Parse could throw<br />
<br />v.push_back could throw</p>
<p>Any of these events will give you memory leak, because nobody will call &#8216;delete[] buf&#8217;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276283">
				<div id="div-comment-276283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Pryhodko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276283">
			May 16, 2005 at 9:14 pm</a>		</div>

		<p>And finally (I hope):<br />
<br />it is a good idea to allocate buffer from stack (with &#8216;_alloca()&#8217;) &#8212; this will give significant boost in speed depending on type of CRT you are linking.<br />
<br />To prvent stack overuse(and overflow), each &#8216;while&#8217; iteration should be contained on separate stack frame &#8212; for example containing it in a separate __fastcall __decspec(noinline) function. On modern PCs cost of function call is insignificant in comparison with lock/unlock in malloc (even if it is amortized by any mechanism).</p>
<p>Basically &#8212; just use your mind, Luke&#8230; :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276293">
				<div id="div-comment-276293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276293">
			May 16, 2005 at 11:22 pm</a>		</div>

		<p>Microsoft&#8217;s implementation of _alloca is ass-backwards as can be. They just reused (literally, same address, different symbol names) the code they call on functions with large stacks (which just touches the stack in 4k increments) to implement it. Instead of fixing _alloca, they added another function _resetstkoflw (that looks like it was written by a summer intern) which you have to call in a SEH block that tests for stack overflow.</p>
<p>It would be interesting to see how much of a further improvement this code gets just by using Doug Lea&#8217;s malloc instead of using VC&#8217;s allocator and maybe even add STLPort to the mix instead of VC&#8217;s STL/string classes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276303">
				<div id="div-comment-276303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Pryhodko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276303">
			May 16, 2005 at 11:36 pm</a>		</div>

		<ol>
<li>you need to call &#8216;_resetstkoflw&#8217; ONLY if you wish to recover from stack overflow (which is nonsense by itself from C++&#8217;s point of view)<br />
<br />2. _alloca&#8217;s implementation looks reasonable to me&#8230; i.e. this intrinsic is doing almost nothing, leaving stack-growth logic to underlying system.<br />
<br />3. In this specific example stack should not ever overflow, and there should be no need to call &#8216;_resetstkoflw&#8217;, and using _alloca is ok<br />
<br />4. It is unconvenient to force system to increase stack size, because AFAIK all Windows systems never reclaims committed memory from stack while it&#8217;s owner thread is still running.</p>
<p>&gt; It would be interesting to see how much of a<br />
<br />&gt; further improvement this code gets just by<br />
<br />&gt; using Doug Lea&#8217;s malloc instead of using VC&#8217;s<br />
<br />&gt; allocator and maybe even add STLPort to the<br />
<br />&gt; mix instead of VC&#8217;s STL/string classes.</p>
<p>It will be slower. _alloca() is intrinsic and should end up with 1-3 asm commands&#8230;</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276313">
				<div id="div-comment-276313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276313">
			May 16, 2005 at 11:39 pm</a>		</div>

		<p>My guess is that in the end we will have something like this:</p>
<p>open MemoryMappedFile<br />
<br />Allocate wcharBuffer // big enough for full file<br />
<br />MultiByteToWideChar // one single conversion<br />
<br />parse the wcharBuffer and just remember<br />
<br />pointers inside the wcharBuffer, no allocation,<br />
<br />no nothing.</p>
<p>And I bet Raymond has it all written already, just trying to show us how it is done :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-larryosterman even thread-even depth-1" id="comment-276323">
				<div id="div-comment-276323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Larry+Osterman+%5BMSFT%5D' rel='external nofollow' class='url'>Larry Osterman [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276323">
			May 17, 2005 at 1:00 am</a>		</div>

		<p>Mihai,<br />
<br />  Raymond had it written sometime last year (in September or October, IIRC).</p>
<p>  He writes that far ahead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276333">
				<div id="div-comment-276333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Pryhodko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276333">
			May 17, 2005 at 1:54 am</a>		</div>

		<p>I wonder if &#8216;n&#8217; could be a part of multibyte character? if yes &#8212; this code is invalid.</p>
<p>AFAIK, Windows supports only DBCS (i.e. up to 2 bytes per character) &#8212; who knows if it is possible for DBCS character to have &#8216;n&#8217; in second byte?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276263">
				<div id="div-comment-276263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276263">
			May 16, 2005 at 7:58 pm</a>		</div>

		<p>Hold it, I thought I just had to use exceptions and the world became a better place without me having to do anymore work.</p>
<p>*snicker*</p>
<p>Once again showing that switching between return values and exceptions just means that the developer has to check for something different.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276273">
				<div id="div-comment-276273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Pryhodko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276273">
			May 16, 2005 at 8:46 pm</a>		</div>

		<p>&gt; Once again showing that switching between<br />
<br />&gt; return values and exceptions just means that<br />
<br />&gt; the developer has to check for something<br />
<br />&gt; different.</p>
<p>No &#8212; that means that developer must be always **prepared**. :) That is different.</p>
<p>Other notes:<br />
<br />&#8211; it is a good idea to do &#8216;v.reserve(N)&#8217; with some  meaningfuill value N (in case if &#8216;v&#8217; is std::vector)<br />
<br />&#8211; if size of v could potentially grow large I&#8217;d strongly suggest to use &#8216;deque&#8217; (in case if &#8216;v&#8217; is std::vector)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276373">
				<div id="div-comment-276373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matthew Douglass-Riley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276373">
			May 17, 2005 at 7:49 am</a>		</div>

		<p>In a production environment, wouldn&#8217;t it be more efficient to write a converter to preprocess the file, and make the whole thing unicode to begin with?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-larryosterman odd alt thread-odd thread-alt depth-1" id="comment-276383">
				<div id="div-comment-276383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Larry+Osterman+%5BMSFT%5D' rel='external nofollow' class='url'>Larry Osterman [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276383">
			May 17, 2005 at 8:42 am</a>		</div>

		<p>I&#8217;m not 100% sure (I don&#8217;t have my DBCS manual here) but I believe that no characters &lt; 0x1f are legal leading or trailing bytes in Big5</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276473">
				<div id="div-comment-276473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Olaf Ian Davidson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276473">
			May 17, 2005 at 12:31 pm</a>		</div>

		<p>From &lt;<a rel="nofollow" target="_new" href="http://www.jbrowse.com/text/charsets.html#Big5&gt;" rel="nofollow"></a><a href="http://www.jbrowse.com/text/charsets.html#Big5&#038;gt" rel="nofollow">http://www.jbrowse.com/text/charsets.html#Big5&#038;gt</a>;</p>
<p>The term &#8216;Big5&#8217; has been abused quite a lot over the years. The original Big5 character repertoire is no longer used and the name &#8216;Big5&#8217; usually means one of the many extensions. The main extensions are Microsoft&#8217;s CP950, Big5-ETen, and Big5-HKSCS. </p>
<p>Big5 is both a character set and an encoding. As an encoding, it is a DBCS encoding with lead bytes in the range 0xa1-0xf90 and trails 0x40-0xfe.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276533">
				<div id="div-comment-276533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Pryhodko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276533">
			May 17, 2005 at 6:09 pm</a>		</div>

		<blockquote><p>
  From &lt;<a rel="nofollow" target="_new" href="http://www.jbrowse.com/text/charsets.html#Big5&gt;" rel="nofollow"></a><a href="http://www.jbrowse.com/text/charsets.html#Big5&#038;gt" rel="nofollow">http://www.jbrowse.com/text/charsets.html#Big5&#038;gt</a>;<br />
  <br />&gt; Big5 is both a character set and an encoding.<br />
  <br />&gt; As an encoding, it is a DBCS encoding with<br />
  <br />&gt; lead bytes in the range 0xa1-0xf90 and trails<br />
  <br />&gt; 0x40-0xfe. </p>
<p>Anyway, it worth pointing out that for example in  &#8216;CP949&#8217; &#8216;n&#8217; could be a part of DBCS character:</p>
<p>[&#8212;- quote begin &#8212;-]<br />
  <br />CP949    charset     encoding </p>
<p>Also called: UHC, Unified Hangul Code<br />
  <br />Languages: Korean</p>
<p>This is Microsoft&#8217;s favored way of representing Korean. It is a derivative of EUC-KR, extended to include all johab precomposed hangul. Like other east asian Microsoft encodings, it allows ASCII trail bytes, and lead bytes in the control code range, thus losing a form of ASCII compatibility.<br />
  <br />[&#8212;- quote end &#8212;-]
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276583">
				<div id="div-comment-276583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276583">
			May 17, 2005 at 10:25 pm</a>		</div>

		<p>Ah ha&#8230; Here&#8217;s a table from MSDN listing the lead and trail byte ranges for the various Far East code pages used by Windows:</p>
<p><a rel="nofollow" target="_new" href="http://web.archive.org/web/20000303195204/http://msdn.microsoft.com/library/books/devintl/S24B2_b2.HTM" rel="nofollow">http://web.archive.org/web/20000303195204/http://msdn.microsoft.com/library/books/devintl/S24B2_b2.HTM</a></p>
<p>(Link at archive.org because it seems it&#8217;s no longer on microsoft.com anymore.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276573">
				<div id="div-comment-276573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-276573">
			May 17, 2005 at 9:52 pm</a>		</div>

		<p>&gt; Anyway, it worth pointing out that for example in &#8216;CP949&#8217; &#8216;n&#8217; could be a part of DBCS character</p>
<p>I don&#8217;t think your source is correct. According to <a rel="nofollow" target="_new" href="http://www.microsoft.com/globaldev/reference/dbcs/949.mspx" rel="nofollow">http://www.microsoft.com/globaldev/reference/dbcs/949.mspx</a> , lead bytes start at 0x81, and trail bytes (as far as I can tell) go no lower than 0x41.</p>
<p><a rel="nofollow" target="_new" href="http://lists.freebsd.org/pipermail/freebsd-bugs/2003-August/002657.html" rel="nofollow">http://lists.freebsd.org/pipermail/freebsd-bugs/2003-August/002657.html</a> (random page found via Google) agrees:</p>
<p>+ * CP949 contains four character sets:<br />
<br />+ *<br />
<br />+ *  &lt;0x00-0x7f&gt;			ASCII equivalent<br />
<br />+ *  &lt;0xa1-0xfd&gt;&lt;0xa1-0xfe&gt;	EUC instance of KS X 1001:2002<br />
<br />+ *  &lt;0x81-0xa0&gt;&lt;0x41-0xfe&gt;	Hangul syllables GAGG-JWAK<br />
<br />+ *  &lt;0xa1-0xc6&gt;&lt;0x41-0xa0&gt;	Hangul syllables JWAT-HIH (ends with C652)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-351483">
				<div id="div-comment-351483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/03/03/542924.aspx' rel='external nofollow' class='url'>The Old New Thing : Very late remarks on the original Chinese dictionary series</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-351483">
			March 3, 2006 at 10:00 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2006/03/03/542924.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2006/03/03/542924.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-464443">
				<div id="div-comment-464443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ricom/archive/2005/05/16/performance-quiz-6-looking-at-the-fourth-cut.aspx' rel='external nofollow' class='url'>Rico Mariani's Performance Tidbits</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050516-30/?p=35633#comment-464443">
			January 23, 2007 at 9:30 pm</a>		</div>

		<p>Raymond is definately making some great headway. Having targetted the single-character at a time conversion</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

