<html>
<head>
<title>If you are going to call Marshal.GetLastWin32Error, the function whose error you're retrieving had better have SetLastError=true</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If you are going to call Marshal.GetLastWin32Error, the function whose error you&#8217;re retrieving had better have SetLastError=true</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 18, 2015 / year-entry #173</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150818-00/?p=91791</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer reported that their p/invoke to a custom DLL was failing, and the error code made no sense.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer reported that their p/invoke to a custom DLL was
failing, and the error code made no sense.
<span id="more-91791"></span>
</p>
<pre>
// C#
using System;
using System.Runtime.InteropServices;
using System.Diagnostics;

class Program
{
  [DllImport("contoso.dll", CallingConvention=CallingConvention.Cdecl)]
  public static extern int Fribble();

  public static void Main()
  {
    Console.WriteLine("About to call Fribble");

    var result = Fribble();
    if (result &gt;= 0) {
      Console.WriteLine("succeeded {0}", result);
    } else {
      Console.WriteLine("failed {0}, last error = {1}",
                        result, Marshal.GetLastWin32Error());
    }
  }
}

// C++

int __cdecl Fribble()
{
 HANDLE hEvent = OpenEvent(EVENT_MODIFY_STATE, FALSE,
                           TEXT("FribbleEvent"));
 if (hEvent == nullptr)
  return -1;
 }

 if (!SetEvent(hEvent)) {
  CloseHandle(hEvent);
  return -2;
 }

 CloseHandle(hEvent);
 return 1;
}
</pre>
<p>
The customer reported that their <code>Fribble</code>
function was returning &minus;1,
indicating a failure to open the event,
but the error code returned by
<code>Marshal.<wbr>Get&shy;Last&shy;Win32&shy;Error</code>
is 87,
"The parameter is incorrect."
But all of the parameters to <code>Open&shy;Event</code> look
correct.
Why are we getting this strange error code?
</p>
<p>
My psychic powers tell me that if the customer had taken the time to
troubleshoot their problem by writing a C++ program that
calls the <code>Fribble</code> function,
<code>Get&shy;Last&shy;Error</code> would have returned the more
reasonable
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/01/27/9953807.aspx">
error 2</a>,
meaning that the event does not exist.
</p>
<p>
That's because <code>Get&shy;Last&shy;Error</code> is working fine.
The last error code is&nbsp;2.
</p>
<p>
The problem is with the p/invoke declaration.
</p>
<p>
The documentation for the
<code>Marshal.<wbr>Get&shy;Last&shy;Win32&shy;Error</code>
function says as its very first line
</p>
<blockquote CLASS=q><p>
Returns the error code returned by the last unmanaged function
that was called using platform invoke <i>that has the
DllImportAttribute.SetLastError flag set</i>.
</p>
</blockquote>
<p>
(Emphasis mine.)
</p>
<p>
This reminder about
<code>Dll&shy;Import&shy;Attribute.<wbr>Set&shy;Last&shy;Error</code>
is repeated in the Remarks.
</p>
<blockquote CLASS=q><p>
You can use this method to obtain error codes
only if you apply the
System.<wbr>Runtime.<wbr>Interop&shy;Services.<wbr
>Dll&shy;Import&shy;Attribute</code>
to the method signature and set the <code>Set&shy;Last&shy;Error</code>
field to <b>true</b>.
</p>
</blockquote>
<p>
Observe that the
<code>Set&shy;Last&shy;Error</code> field was not set in the p/invoke
declaration.
Therefore,
what you are actually getting when you call
<code>Marshal.<wbr>Get&shy;Last&shy;Win32&shy;Error</code>
is whatever error was lying around after the previous call to
a p/invoke function that <i>did</i> specify
<code>Set&shy;Last&shy;Error = true</code>.
</p>
<p>
Changing the p/invoke to
</p>
<pre>
[DllImport("contoso.dll", <font COLOR=blue>SetLastError=true</font>,
           CallingConvention=CallingConvention.Cdecl)]
public static extern int Fribble();
</pre>
<p>
fixed the problem.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1208281">
				<div id="div-comment-1208281" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150818-00/?p=91791#comment-1208281">
			August 18, 2015 at 7:04 am</a>		</div>

		<p>Throw new System.ComponentModel.Win32Exception() doesn&#39;t seem to care though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1208271">
				<div id="div-comment-1208271" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150818-00/?p=91791#comment-1208271">
			August 18, 2015 at 7:43 am</a>		</div>

		<p>@Joshua It probably does not use Marshal.GetLastWin32Error and P/Invokes GetLastError directly. If you have .NET Reflector or a similar tool you can check this yourself (I don&#39;t have it on me at the moment).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208261">
				<div id="div-comment-1208261" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150818-00/?p=91791#comment-1208261">
			August 18, 2015 at 7:49 am</a>		</div>

		<p>&gt; Returns the error code returned by the last unmanaged function [&#8230;] that has the DllImportAttribute.SetLastError flag set.</p>
<p>That&#39;s a good thing. I&#39;ve seen a problem (in a different language) where enabling the interpreter&#39;s &quot;trace&quot; mode clobbered the last error between a call to a Win32 function ans a call to the GetLastError Win32 function, causing spurious errors in code which branched depending on the error (the error is &quot;already exists&quot;? good, do nothing; all other errors, throw an exception).</p>
<p>But IMO the real problem is with the &quot;last error&quot; model (aka the &quot;errno&quot; model), which uses a global variable shared by all functions to hold the error state. It&#39;s much better to keep the error state local to the function call; for instance, returning an HRESULT or a NTSTATUS, or the model used by Linux system calls where values in the -4095 to -1 range (if the function returns a pointer, these values are in the unaccessible last page of memory) are the negated &quot;errno&quot; value.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ipoverscsi odd alt thread-odd thread-alt depth-1" id="comment-1208251">
				<div id="div-comment-1208251" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ipoverscsi' rel='external nofollow' class='url'>ipoverscsi</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150818-00/?p=91791#comment-1208251">
			August 18, 2015 at 8:40 am</a>		</div>

		<p>There is a more vexing problem when using GetLastError() with P/Invoke functions: Error message functions.</p>
<p>The developers I work with don&#39;t like to call FormatErrorMessage() and so require me to implement some error message function in my DLLs. This function is usually of the form &quot;BOOL GetErrorMessage(LPCTSTR buffer, DWORD size)&quot;. This function calls FormatErrorMessage() on the error code reported by GetLastError() and places the result into the buffer. </p>
<p>Now imagine this scenario:</p>
<p>1) Managed program DllImports Foo(), properly marking it as SetLastError=true</p>
<p>2) Managed program DllImports GetErrorMessage().</p>
<p>3) Managed program calls Foo() and it reports failure.</p>
<p>4) Managed program calls GetErrorMessage() to get the error message.</p>
<p>5) Managed program prints the returned string &quot;The operation completed successfully.&quot;</p>
<p>Huh?</p>
<p>It appears that the CLR only preserves the last error on transition from unmanaged to managed and not the other way around. Therefore, when GetErrorMessage() is called, it sees the last error from some random function called by the CLR (usually zero in my experience) and calls FormatErrorMessage() on that error code.</p>
<p>This happens not just in C# code, but in C++/CLR code, too. Problems with error codes are particularly difficult to diagnose in C++/CLR, especially when it occurs in transitions between managed code to unmanaged code *within the same translation unit*. </p>
<p>I&#39;ve had to resort to some very nasty code to properly handle these cases.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208241">
				<div id="div-comment-1208241" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">meh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150818-00/?p=91791#comment-1208241">
			August 18, 2015 at 8:48 am</a>		</div>

		<p>Too bad a successful CloseHandle() call will overwrite the last error for the -2 return case (right?). Tho&#39; it&#39;s likely the code above is simplified from the real thing for the purpose focusing on the blog&#39;s subject.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-john-ludlow odd alt thread-odd thread-alt depth-1" id="comment-1208221">
				<div id="div-comment-1208221" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/John+Ludlow' rel='external nofollow' class='url'>John Ludlow</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150818-00/?p=91791#comment-1208221">
			August 18, 2015 at 9:51 am</a>		</div>

		<p>@Cesar I&#39;d like all languages to support returning a tuple of the form</p>
<p> &nbsp;(the data you wanted, whether the thing succeeded)</p>
<p>So you could do this</p>
<p> &nbsp;var (data, status) = Fribble()</p>
<p> &nbsp;if (status.OK)</p>
<p> &nbsp;{</p>
<p> &nbsp; &nbsp;// use data</p>
<p> &nbsp;}</p>
<p> &nbsp;else</p>
<p> &nbsp;{</p>
<p> &nbsp; &nbsp;Console.WriteLine(&quot;Error occurred : &quot; + status.Message)</p>
<p> &nbsp;}</p>
<p>F# has some nice constructs where you can do stuff a bit like this with discriminated unions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208211">
				<div id="div-comment-1208211" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150818-00/?p=91791#comment-1208211">
			August 18, 2015 at 10:29 am</a>		</div>

		<p>@ipoverscsi: &nbsp;How nasty does it need to be? &nbsp;Just write a native wrapper for GetErrorMessage that takes an extra parameter of the error code you want the error message of. &nbsp;The native wrapper can then call SetLastError followed by GetErrorMessage. &nbsp;Slightly annoying yes, but normally when I am P/Invoking I find that I want to be writing native wrappers for a bunch of stuff anyway because it is often easier to write a native function to call a bunch of other native functions than try to P/Invoke a series of native functions. &nbsp;Or because a native wrapper function to massage data formats is easier than trying heroic P/Invokes on complicated structures.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1208201">
				<div id="div-comment-1208201" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150818-00/?p=91791#comment-1208201">
			August 18, 2015 at 11:10 am</a>		</div>

		<p>@ipoverscsi</p>
<p>I can feel your comment about Heroic P/Invoke structures. I maintain a C# Tapi application that makes heavy use of P/Invoke structure and callbacks. When adding new native calls with complex structures I find it easier to just allocate a block of memory in C# fill the bytes pass the structure on and deallocate it after the call.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1208181">
				<div id="div-comment-1208181" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150818-00/?p=91791#comment-1208181">
			August 18, 2015 at 3:39 pm</a>		</div>

		<p>@meh: CloseHandle is not supposed to change the lasterror on success but it can happen if someone hooked the function: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2014/10/31/10568872.aspx">blogs.msdn.com/&#8230;/10568872.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1208171">
				<div id="div-comment-1208171" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua A. Schaeffer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150818-00/?p=91791#comment-1208171">
			August 18, 2015 at 6:58 pm</a>		</div>

		<p>This may not be entirely on-topic but I write a LOT of Win32 interop framework code and I figured I&#39;d share the way I report &quot;last errors&quot;. Maybe it helps someone. It&#39;s saved me more time than you can imagine.</p>
<p> &nbsp; &nbsp;[DebuggerDisplay(&quot;{this.ToDebugString(),nq}&quot;)]</p>
<p> &nbsp; &nbsp;public enum Win32ErrorCode : int</p>
<p> &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;///&lt;summary&gt;The operation completed successfully.&lt;/summary&gt;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;ERROR_SUCCESS = 0,</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;///&lt;summary&gt;Incorrect function.&lt;/summary&gt;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;ERROR_INVALID_FUNCTION = 1,</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;// All the other codes follow here&#8230;</p>
<p> &nbsp; &nbsp;}</p>
<p>ToDebugString() actually calls a meticulously P/Invoke&#39;d ::FormatMessage() if you can believe it. </p>
<p> &nbsp; &nbsp;[SuppressUnmanagedCodeSecurity]</p>
<p> &nbsp; &nbsp;public static partial class Win32Api</p>
<p> &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;[MethodImpl(MethodImplOptions.AggressiveInlining)]</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;public static Win32ErrorCode GetLastError()</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return (Win32ErrorCode)Marshal.GetLastWin32Error();</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;}</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;// Other P/Invoke imports here.</p>
<p> &nbsp; &nbsp;}</p>
<p>Instead of throwing Win32Exception, I throw this:</p>
<p> &nbsp; &nbsp;[DebuggerDisplay(&quot;{Win32ErrorCode.ToString(),nq} : {Win32Utilities.FormatMessage(Win32ErrorCode)}&quot;)]</p>
<p> &nbsp; &nbsp;public class Win32Exception : System.ComponentModel.Win32Exception</p>
<p> &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;public new Win32ErrorCode Win32ErrorCode</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;get</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return (Win32ErrorCode)base.NativeErrorCode;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;}</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;// Other methods here&#8230;</p>
<p> &nbsp; &nbsp;}</p>
<p>You&#39;ll never have to look up integer error codes again, especially in the Watch window.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1208161">
				<div id="div-comment-1208161" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150818-00/?p=91791#comment-1208161">
			August 19, 2015 at 1:56 am</a>		</div>

		<p>The first time I made a mixed-mode C++/CLI assembly to call Win32 functions, rather than deal with this, I made unmanaged wrapper functions that all returned HRESULTs.</p>
<p>Nowadays I&#39;d feel confident enough to use SetLastError=true and GetLastWin32Error(), though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hardon odd alt thread-odd thread-alt depth-1" id="comment-1208151">
				<div id="div-comment-1208151" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/gdalsnes' rel='external nofollow' class='url'>gdalsnes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150818-00/?p=91791#comment-1208151">
			August 19, 2015 at 5:29 am</a>		</div>

		<p>Docs says: &quot;The default is false, except in Visual Basic.&quot;</p>
<p>Very confusing. I thought the clr runtime (mscorlib) was language agnostic. In Reflector i see no sign of how SetLastError is magically set to true for VB.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208141">
				<div id="div-comment-1208141" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150818-00/?p=91791#comment-1208141">
			August 19, 2015 at 7:09 am</a>		</div>

		<p>@arghhhhhhhhhhh &#8211; Because VB doesn&#39;t have people write the DllImport attribute, normally. They write a Declare statement (<a rel="nofollow" target="_new" href="https://msdn.microsoft.com/en-us/library/4zey12w5.aspx">msdn.microsoft.com/&#8230;/4zey12w5.aspx</a>). That Declare statement is transformed, by the VB compiler, into the DllImport. And when it does that transformation, it sets SetLastError to be true.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00037ffe8545d1b7 odd alt thread-odd thread-alt depth-1" id="comment-1208121">
				<div id="div-comment-1208121" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/David+Totzke' rel='external nofollow' class='url'>David Totzke</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150818-00/?p=91791#comment-1208121">
			August 19, 2015 at 7:23 am</a>		</div>

		<p>@ipoverscsi</p>
<p>&gt;&gt;The developers I work with don&#39;t like to call FormatErrorMessage()</p>
<p>Is there a technical reason they don&#39;t like to do this? &nbsp;Forcing you to jump through hoops because they &quot;don&#39;t like it&quot; seems like behavior that requires a swat on the nose with rolled up newspaper.</p>
<p>I have been mercifully spared from interaction via p/Invoke and have no C++ experience to speak of. &nbsp;Just curious. &nbsp;Thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208061">
				<div id="div-comment-1208061" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">meh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150818-00/?p=91791#comment-1208061">
			August 19, 2015 at 8:41 am</a>		</div>

		<p>@skSdnW. Ah right. I suspected I was forgetting something there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1207831">
				<div id="div-comment-1207831" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150818-00/?p=91791#comment-1207831">
			August 23, 2015 at 3:40 am</a>		</div>

		<p>This leaves me wondering why you would ever not want to set that.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

