<html>
<head>
<title>Why does SetThreadPriority sometimes take a really long time?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does SetThreadPriority sometimes take a really long time?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 28, 2016 / year-entry #227</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161028-00/?p=94595</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Because you asked for it.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer had a video application that gathers information as it runs.
Every so often, they need to take all this information,
process it, and save it to a database.
They perform this processing every fifteen seconds,
but they found that whenever the processing occurred,
it created enough of a CPU hiccup that the application would drop frames
whenever the updates were being processed.
</p>
<p>
The customer solved the problem by calling
<code>Set&shy;Thread&shy;Priority</code> with the
<code>THREAD_<wbr>MODE_<wbr>BACKGROUND_<wbr>BEGIN</code> priority level
at the start of the update, and then
<code>THREAD_<wbr>MODE_<wbr>BACKGROUND_<wbr>END</code> when the update
was complete.
This reduces the impact of the update on foreground activity,
and it seemed to do a good job of getting rid of the glitches.
</p>
<p>
And then later, they were investigating an unrelated problem,
and as part of their investigation, they noticed that the very
first time to enter background mode sometimes took over two seconds
to complete.
This initial update happened to take place as part of the application's
startup, which meant that the long delay was directly affecting the
application's startup time.
</p>
<p>
Further investigation revealed that this extra-long delay occurred
only if the application was launched shortly after the machine was
rebooted.
If the system had been running for a while before the application
was run, then the delay was not observed.
</p>
<p>
What's going on here?
</p>
<p>
What's going on here is that the system is doing exactly what you
asked it to do.
You said,
"Please reduce the priority of this thread to minimize its impact
on the rest of the system."
And shortly after a system boots up, there's a lot of activity.
Since you said that the thread should have minimal impact on the
rest of the system,
the thread gets stalled behind all those other activities.
</p>
<p>
"It's okay. Don't worry about me. I'll be fine."
</p>
<p>
"Hey, why aren't you paying attention to me?"
</p>
<p>
The thread said that it wants to run at very low priority,
and the main consequence of running at very low priority
is that it gets very low priority.
The application didn't notice this most of the time
because the system usually had enough spare capacity
that it could deal even with very low priority things relatively
promptly.
But once the system gets busy, those very low priority things
may end up having to wait a long time.
</p>
<p>
One the customer understood that this was a problem of their own
creation, there were a few possible solutions.
</p>
<p>
One solution was to suppress the call to lower the thread's
priority if the application is still starting up.
During startup, update the database at normal priority instead
of low priority.
</p>
<p>
What the customer chose to do was simply to suppress database
updates completely when the application is starting up.
The application will update the databases in the background
after everything else is off and running.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1271195">
				<div id="div-comment-1271195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161028-00/?p=94595#comment-1271195">
			October 28, 2016 at 7:03 am</a>		</div>

		<p>Filed under: Works As Coded</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1271215">
				<div id="div-comment-1271215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161028-00/?p=94595#comment-1271215">
			October 28, 2016 at 7:16 am</a>		</div>

		<p>Another interesting thing in this neighborhood is Thread Boosting. SetThreadPriorityBoost().</p>
<p>When a thread completes a wait for something, its gets a tempory kick to it priority. Usually, this is a good thing. Threads sleep until there is work to do then they get a boost so they can complete their work and go back to sleep promptly.</p>
<p>However, it is possible that this can interupt other time-critical threads by starving them.</p>
<p>It sounds like in this case, maybe this could be the initial problem (if the dropped frames lined up with the background task starting) and disabling ThreadBoosting for that thread would stop the hiccup that could cause dropped frames&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1271225">
				<div id="div-comment-1271225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161028-00/?p=94595#comment-1271225">
			October 28, 2016 at 7:27 am</a>		</div>

		<p>Strange. Given that the application had unacceptable behaviour (dropping frames) if the foreground activity was interrupted for any reason at all, I wonder why they didn&#8217;t raise the priority of the foreground thread (&#8220;realtime&#8221;?) rather than lowering the priority of the background thread.</p>
<p>In that case, the background thread would still have had higher priority than the system startup tasks.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1271235">
				<div id="div-comment-1271235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161028-00/?p=94595#comment-1271235">
			October 28, 2016 at 9:21 am</a>		</div>

		<p>If the foreground thread ran in realtime, the chances of the background thread running *at all* would be very low: that&#8217;s the point of realtime priority!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-2 parent" id="comment-1271245">
				<div id="div-comment-1271245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161028-00/?p=94595#comment-1271245">
			October 28, 2016 at 9:25 am</a>		</div>

		<p>The problem then would be that the process would have higher priority than the startup tasks. In order to solve a small delay in start up, under high CPU load, you starve everything except one process of CPU.<br />
There is a good reason why things default to normal priority and the advice is to only increase the priority if you really need to.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1271296">
				<div id="div-comment-1271296" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161028-00/?p=94595#comment-1271296">
			October 28, 2016 at 2:40 pm</a>		</div>

		<p>But if the process does not have a higher priority than startup tasks, it will surely drop frames, which &#8211; as the customer has pointed out as being the core issue here &#8211; is unacceptable.</p>
<p>Yes, my suggestion to bump it up to &#8220;realtime&#8221; was going too far (as ErikF also pointed out, thankyou) but there&#8217;s room above &#8220;normal&#8221; priority but below &#8220;realtime&#8221; which could be explored to get the balance needed. Without dropping the background thread to background priority.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-4" id="comment-1271305">
				<div id="div-comment-1271305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161028-00/?p=94595#comment-1271305">
			October 28, 2016 at 4:09 pm</a>		</div>

		<p>The thing is, the easier solution is to just wait until the startup tasks had finished then the problem went away. Then the thread would have higher than normal priority, which is higher than most system components, for the rest of its life. All of this to just get rid of a short period of time after startup where the application would not be able to get as much CPU as it would need.<br />
Messing with priority is generally not a good thing to do unless you really know what you are doing. It is way to easy to increase priority on a thread and cause problems without realising. Also, due to the fact that this customer&#8217;s program can start dropping frames when the CPU is under load shows that it can potentially use a large portion of the CPU. Putting anything that uses a lot of CPU time at a higher priority than Explorer is always a disaster waiting to happen. This is one reason why I really think that Windows should stop user threads from setting their priorities to higher than normal.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1271315">
				<div id="div-comment-1271315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161028-00/?p=94595#comment-1271315">
			October 28, 2016 at 8:56 pm</a>		</div>

		<p>A possible partial solution that incorporates your idea would be to have the main application set a CPU affinity and then boost its priority on those CPUs; I&#8217;m making an assumption that there are cores to spare and I/O isn&#8217;t bottlenecking everything. That way the rest of the system can keep going and (hopefully) you get constant performance on the main app.</p>
<p>Actually, if startup is hitting the system that hard, I&#8217;d probably start looking at exactly what services and applications the program is trying to start up. If you&#8217;re running a dedicated system, maybe you can get rid of some of the cruft or at least put it on delay-load.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-odd thread-alt depth-1 parent" id="comment-1271265">
				<div id="div-comment-1271265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161028-00/?p=94595#comment-1271265">
			October 28, 2016 at 9:58 am</a>		</div>

		<p>THREAD_MODE_BACKGROUND was a wrong solution for the problem. They should have just set the thread priority to THREAD_PRIORITY_BELOW_NORMAL.<br />
Then there is a new &#8220;lock-free&#8221; scheduler, which is perhaps better for a 256 core box, but for a typical consumer 4 processor system.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-zlynx odd alt depth-2 parent" id="comment-1271275">
				<div id="div-comment-1271275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161028-00/?p=94595#comment-1271275">
			October 28, 2016 at 10:28 am</a>		</div>

		<p>I think that your comment got cut off somewhere. Yes, in both Windows and Linux the scalable lock-free schedulers are not as good on small numbers of cores. However, the era of small core counts is coming to an end.</p>
<p>Games using DX12 or Vulkan use up to six cores for rendering and the game engines support threaded job queues for all of the other work. Next generation games for 2017 and 2018 can use eight to ten cores (or hyperthreads).</p>
<p>Servers can of course use infinite cores.</p>
<p>There&#8217;s really no place for schedulers that are limited to four in today&#8217;s environment.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev even depth-3 parent" id="comment-1271285">
				<div id="div-comment-1271285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161028-00/?p=94595#comment-1271285">
			October 28, 2016 at 10:50 am</a>		</div>

		<p>&gt;I think that your comment got cut off somewhere<br />
That&#8217;s Microsoft&#8217;s wonderful home-baked discussion engine.<br />
The new lock-free scheduler doesn&#8217;t have ability to requeue a thread to an available processor, if it&#8217;s already queued for execution to a busy processor. This is why one or two runaway threads can affect responsiveness of the whole 4 core consumer system.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1271345">
				<div id="div-comment-1271345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161028-00/?p=94595#comment-1271345">
			October 29, 2016 at 3:04 pm</a>		</div>

		<p>Reminder and correction: Most of MSDN and TechNet blogs are by now migrated to WordPress-based CMS.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1271295">
				<div id="div-comment-1271295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161028-00/?p=94595#comment-1271295">
			October 28, 2016 at 2:02 pm</a>		</div>

		<p>Wow!  This sounds like the first time a customer has made the correct decision after receiving information, for once!  Not only did they not blindly bump their main processing priority higher (cuz they&#8217;re a very special snowflake), but they also just suppressed a inconsequential DB update during app startup.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1271355">
				<div id="div-comment-1271355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161028-00/?p=94595#comment-1271355">
			October 29, 2016 at 3:31 pm</a>		</div>

		<p>With nowadays programmable HPET and high CPUs frequencies it would be possible instead of reducing frequency of time slices granted to lower-priority threads &#8211; reduce time slices duration. Some analogy from electronics engeenering world: Replace PFM with PWM. This will increase a bit overhead but should improve responsiveness. So this should be good for UI threads that gets preempted too heavy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1271415">
				<div id="div-comment-1271415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Koopa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161028-00/?p=94595#comment-1271415">
			October 31, 2016 at 2:47 am</a>		</div>

		<p>&#8220;It&#8217;s okay. Don&#8217;t worry about me. I&#8217;ll be fine.&#8221;</p>
<p>&#8220;Hey, why aren&#8217;t you paying attention to me?&#8221;</p>
<p>Sounds like my girlfriend.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

