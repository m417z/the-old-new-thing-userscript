<html>
<head>
<title>Why does my window get a WM_ACTIVATE message when it isn't active?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does my window get a WM_ACTIVATE message when it isn&#8217;t active?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 16, 2013 / year-entry #277</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Say you launch a program, and for whatever reason the program takes a long time to start up, so you start doing something else, say launching Calculator and balancing your checkbook. Eventually, the program you launched a while back gets itself off the ground and creates its main window. And the window sits in the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Say you launch a program, and for whatever reason the program takes a long time to start up, so you start doing something else, say launching Calculator and balancing your checkbook. Eventually, the program you launched a while back gets itself off the ground and creates its main window. And the window sits in the background (since the window manager won't let it steal foreground activation), but the caret is blinking in the edit control, and the program seems to think it's the active window.</p>
<p> If you write a test program to do this, say by sticking a <code>Sleep(10000)</code> at the start of your <code>WinMain</code>, you'll see that your window gets a <code>WM_ACTIVATE</code> message that says "Yup, you're active." </p>
<p> But you're not. </p>
<p> Or are you? </p>
<p> What's going on here? </p>
<p> Let's rewind to 16-bit Windows. The active window was the top-level window that receives input. You could make a window active by clicking on it or by selecting it via <kbd>Alt</kbd>+<kbd>Tab</kbd> or any number of other operations. A program could change the active window by calling the <code>SetActiveWindow</code> function explicitly, or by performing a number of other operations which imply changing the active window. (For example, depending on the parameters you pass, <code>ShowWindow</code> and <code>SetWindowPos</code> may make the window active as well as showing/repositioning it.) There was only one active window at a time; if a program set itself as the active window, then the previous active window lost activation. </p>
<p> Okay, now let's move forward to Win32. Recall that in Win32, most of the state that used to be global became thread-local.&sup1; This was done to permit the asynchronous input model, where each thread gets its own input queue. This means <a href="http://blogs.msdn.com/oldnewthing/archive/2009/12/17/9937972.aspx"> each thread gets its own mouse cursor show state</a>, each thread gets its own caret, each thread gets its own focus window, and so on. And one of the and-so-on bits is that each thread gets its own active window. </p>
<p> What you're seeing is a thread which has an <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/07/20/10040074.aspx#10040488"> active window which is not the foreground window</a>. The thread also has a focus window, and when an edit control gets the focus, it draws a blinky caret. Mind you, the window is not the <i>foreground</i> window, so your input doesn't actually go to it, but the window doesn't know that. It's sitting around as an active window, wondering why nobody is typing anything. </p>
<p> So now you know what's going on. Mind you, there's nothing actually wrong with this situation. In fact, it's a sign that the virtualization is doing what it's supposed to do: The thread is living in its own world, a world designed to be compatible with the 16-bit world where there was only one active window. </p>
<p> <b>Footnote</b> </p>
<p>&sup1;&thinsp;Or, more nitpickily, local to the input thread group. Since most input thread groups consist of a single thread, I'll just write thread and leave you to insert "or input thread group" as necessary. But you knew that, because it's one of the five things every Win32 programmer should know. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1083193">
				<div id="div-comment-1083193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Motti</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913#comment-1083193">
			October 16, 2013 at 7:24 am</a>		</div>

		<p>So&#8230; What are the other four things every Win32 programmer should know?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1083203">
				<div id="div-comment-1083203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TKW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913#comment-1083203">
			October 16, 2013 at 7:25 am</a>		</div>

		<p>@Motti:</p>
<p><a rel="nofollow" target="_new" href="http://channel9.msdn.com/Blogs/scobleizer/Raymond-Chen-PDC-05-Talk-Five-Things-Every-Win32-Programmer-Needs-to-Know">channel9.msdn.com/&#8230;/Raymond-Chen-PDC-05-Talk-Five-Things-Every-Win32-Programmer-Needs-to-Know</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1083223">
				<div id="div-comment-1083223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Dawson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913#comment-1083223">
			October 16, 2013 at 7:34 am</a>		</div>

		<p>If it&#39;s by design that a textbox can have its caret blinking even when typing on the keyboard will not send characters to that textbox, then the design is wrong. Anyone who&#39;s ever accidentally typed their password into a different (and plain text) window than they intended will tell you that.</p>
<div class="post">[<em>This would require the caret to be a global resource, which means you lose asynchronous input. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1083233">
				<div id="div-comment-1083233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913#comment-1083233">
			October 16, 2013 at 8:08 am</a>		</div>

		<p>&quot;&#8230;the window doesn&#39;t know that. It&#39;s sitting around as an active window, wondering why nobody is typing anything.&quot;</p>
<p>Man, now I feel bad for leaving the window on its own.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1083243">
				<div id="div-comment-1083243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913#comment-1083243">
			October 16, 2013 at 8:15 am</a>		</div>

		<p>What I&#39;ve always wondered is why this situation causes the &quot;activated&quot; window to show up randomly in the Z-order. Let&#39;s say I start an app, move on to two other apps (my calculator and my checkbook), and then the app shows its window. I would expect the app to show up either on top, between my checkbook and calculator, or just below my checkbook and calculator.</p>
<p>In reality what happens is that it will show up anywhere in the Z-order, from the bottom all the way to the top. It can be hard to even know that the app even launched.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1083263">
				<div id="div-comment-1083263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pmbAustin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913#comment-1083263">
			October 16, 2013 at 8:32 am</a>		</div>

		<p>Now if I could only figure out why, when I&#39;m happily typing along, another app pops up some dialog, stealing focus, and causing my typing to go into the dialog&#8230; sometimes randomly dismissing the dialog depending on what keys are mapped, meaning I can&#39;t even see what happened. &nbsp;It&#39;s very annoying. &nbsp;Even Outlook has been known to do this occasionally. &nbsp;I thought the &quot;Another app/window cannot steal your focus&quot; problem had been solved, but apparently that&#39;s not strictly true&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1083273">
				<div id="div-comment-1083273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913#comment-1083273">
			October 16, 2013 at 8:58 am</a>		</div>

		<p>[This would require the caret to be a global resource, which means you lose asynchronous input. -Raymond]</p>
<p>Bleh. Easily fixed as follows: The caret blink timer calls GetForegroundWindow (GetActiveWindow won&#39;t work here) and not blink if it&#39;s not the right window.</p>
<p>Now for those who implemented their own textboxes with their own carets, it&#39;s their problem now.</p>
<div class="post">[<em>Or apps which rely on the caret blink timer to perform other business logic. (Perhaps inadvertently. For example, maybe <a href="http://blogs.msdn.com/b/oldnewthing/archive/2005/02/17/375307.aspx">it prevents their app from hanging</a> because the timer message wakes up their queue.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1083283">
				<div id="div-comment-1083283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913#comment-1083283">
			October 16, 2013 at 11:13 am</a>		</div>

		<p>Hey somewhat unrelated to the post, but does anyone know when Raymond will be speaking next? (I thought there use to be a blog post that mentioned his upcoming engagements) Also did anyone have any cleaner audio from that PDC linked above?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1083293">
				<div id="div-comment-1083293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913#comment-1083293">
			October 16, 2013 at 11:59 am</a>		</div>

		<p>[Or apps which rely on the caret blink timer to perform other business logic. (Perhaps inadvertently. For example, maybe it prevents their app from hanging because the timer message wakes up their queue.) -Raymond]</p>
<p>Nothing happens. The edit control is what eats the message.</p>
<div class="post">[<em>Sure, the edit control eats the message, but the presence of the caret timer wakes up the queue. And the app may be relying on the wake-up. (E.g., because it accidentally stalled its queue and the timer message unstalls it.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1083323">
				<div id="div-comment-1083323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913#comment-1083323">
			October 16, 2013 at 5:00 pm</a>		</div>

		<p>I agree with the sentiment that an app with the caret blinking but that doesn&#39;t actually have the focus is a really bad user experience (especially on multimonitor and especially in schemes with partially transparent window borders or low visual distinction between the foreground window and the other windows). &nbsp;Is there anything a developer can do to make sure their app is never blinking an an inappropriate moment? &nbsp;From your description, it doesn&#39;t sound like it, but I remain hopeful.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1083343">
				<div id="div-comment-1083343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913#comment-1083343">
			October 17, 2013 at 4:08 am</a>		</div>

		<p>[This would require the caret to be a global resource, which means you lose asynchronous input. -Raymond]</p>
<p>(Or well behaved programs that act apporopriately when they gain / lose focus &#8211; the docs for WM_SETFOCUS and WM_KILLFOCUS say programs should respect this convention)</p>
<div class="post">[<em>What a different world it would be if we didn&#39;t need to support poorly-behaved programs. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1083363">
				<div id="div-comment-1083363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913#comment-1083363">
			October 17, 2013 at 7:41 am</a>		</div>

		<p>When I&#39;m working with virtual machines, I sometimes forget whether the VM or the real computer has the mouse focus. &nbsp;Each machine has its own blinking edit cursor and thinks it owns the mouse, but in reality only one does, so you get multiple blinking cursors.</p>
<p>That problem is much trickier to solve &#8212; you&#39;d either need guest extensions in the VM to communicate to the guest OS that &quot;you just lost focus&quot;, or you&#39;d need the hypervisor to pull tricks like tell the guest OS that the mouse was unplugged when it loses focus.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1083403">
				<div id="div-comment-1083403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913#comment-1083403">
			October 17, 2013 at 8:40 am</a>		</div>

		<p>Windows doesn&#39;t seem to be handling well some non-respond cases (as I saw recently in Windows 7). Namely when a program hangs inside WM_INITMENU/WM_INITMENUPOPUP message (for example, when debugging a ON_UPDATE_COMMAND_UI handler). The program window then becomes impossible to switch from, and the debugger can never become a top window. You can start Task Manager, but it won&#39;t kill the program being debugged. Logout works, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1083433">
				<div id="div-comment-1083433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913#comment-1083433">
			October 17, 2013 at 9:34 am</a>		</div>

		<p>[Or apps which rely on the caret blink timer to perform other business logic.]</p>
<p>Having a visibly blinking caret and having a timer go off are different things though.</p>
<p>I&#39;m still a bit confused about what creates the unwanted situation though. Even if a window doesn&#39;t respond to messages when you switch away from it, shouldn&#39;t it still have a notification that it should no longer blink a caret sitting in its message queue?</p>
<div class="post">[<em>They are different things, but one is implemented in terms of the other, and applications may inadvertently rely on this dependency. -Raymond</em><em>]</em></div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1083523">
				<div id="div-comment-1083523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913#comment-1083523">
			October 17, 2013 at 4:08 pm</a>		</div>

		<p>That means it&#39;s possible to make sure the caret (for standard controls, again whoever creates his own carets is on his own) will never show up when the window doesn&#39;t have focus without breaking backwards compatibility.</p>
<p>And I still cannot picture the chain of events (and messages) that create the problematic situation to begin with. The text in your article suggests that either Windows forgets to send the unfocus notification or that the window ignores it, in which case I don&#39;t see how the caret would ever be properly hidden when the window loses focus.</p>
<div class="post">[<em>To preserve backward compatibility, you would have to leave the timer running but somehow let it know, &quot;Hey, I&#39;m just running you for compatibility reasons. Don&#39;t actually blink anything.&quot; (The chain of events is &quot;The frame is created and is given local activation but not foreground. Next, a control on the frame window is given local focus.&quot;) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1083603">
				<div id="div-comment-1083603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913#comment-1083603">
			October 18, 2013 at 9:15 am</a>		</div>

		<p>I can&#39;t think of a time when I&#39;ve seen two windows in the same desktop with carets blinking simultaneously. Obviously it is a major problem with VMs, RDP clients, and the like. But how often does it happen within a single desktop?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1083633">
				<div id="div-comment-1083633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913#comment-1083633">
			October 18, 2013 at 11:14 am</a>		</div>

		<p>I&#39;ve been in the situation where PopularBrowser blinks what looks like a caret in the address bar, but the window isn&#39;t focussed and you cannot type in the address bar. It usually happens when launching the browser or creating a new window. But to the best of my knowledge they implemented their own caret (badly), so this isn&#39;t really what we&#39;re talking about here.</p>
<p>I cannot reproduce Raymond&#39;s scenario; I do get a WM_ACTIVATE(WA_ACTIVE, hWndPrevious) but then I get a WM_ACTIVATE(WA_INACTIVE, NULL) too and the edit control doesn&#39;t even receive focus, even though it does when I don&#39;t switch away during the Sleep. Oh well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1084103">
				<div id="div-comment-1084103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131016-00/?p=2913#comment-1084103">
			October 21, 2013 at 3:15 pm</a>		</div>

		<p>I&#39;ve got it with Raymond&#39;s scenario with one wrinkle. The application tried to steal global focus but was prevented from doing so.</p>
<p>[To preserve backward compatibility, you would have to leave the timer running but somehow let it know, &quot;Hey, I&#39;m just running you for compatibility reasons. Don&#39;t actually blink anything.&quot; (The chain of events is &quot;The frame is created and is given local activation but not foreground. Next, a control on the frame window is given local focus.&quot;) -Raymond]</p>
<p>Easy only for the standard controls. Custom controls would still blink.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

