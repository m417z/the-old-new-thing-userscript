<html>
<head>
<title>A process shutdown puzzle</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A process shutdown puzzle</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 29, 2009 / year-entry #32</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>29</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In honor of National Puzzle Day, I leave you today with a puzzle based on an actual customer problem. Part One: The customer explains the problem. We have this DLL, and during its startup, it creates a thread with the following thread procedure: DWORD CALLBACK ThreadFunction(void *) { HANDLE HandleArray[2]; HandleArray[0] = SetUpStuff(); if (HandleArray[0])...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In honor of National Puzzle Day,
I leave you today with a puzzle
based on an actual customer problem.
</p>
<p>
<b>Part One</b>: The customer explains the problem.
</p>
<blockquote CLASS=q>
<p>
We have this DLL, and during its startup, it creates a thread
with the following thread procedure:
</p>
<pre>
DWORD CALLBACK ThreadFunction(void *)
{
  HANDLE HandleArray[2];
  HandleArray[0] = SetUpStuff();
  if (HandleArray[0]) {
    HandleArray[1] = ShutdownEvent;
    while (WaitForMultipleObjects(2, HandleArray,
                             FALSE, INFINITE) == WAIT_OBJECT_0) {
      ProcessStuff();
    }
    CleanUpStuff(HandleArray[0]);
  }
  SetEvent(ThreadCompleteEvent);
  FreeLibraryAndExitThread(ThisLibrary, 0);
}
</pre>
<p>
During process shutdown, the following function is called
as part of <code>DLL_PROCESS_DETACH</code> handling:
</p>
<pre>
void StopWorkerThread()
{
  // tell the thread to stop
  SetEvent(ShutdownEvent);

  // wait for it to stop
  WaitForSingleObject(ThreadCompleteEvent, INFINITE);

  // Clean up
  CloseHandle(ShutdownEvent);
  ShutdownEvent = NULL;

  CloseHandle(ThreadCompleteEvent);
  ThreadCompleteEvent = NULL;
}
</pre>
<p>
The above function is hanging at the call to
<code>WaitForSingleObject</code>.
If we break in, we see that the thread that is supposed
to be running the <code>ThreadFunction</code> is gone.
I verified that the thread was successfully created,
but by the time we get around to waiting for it, it's already gone.
</p>
<p>
I checked, and nobody sets the <code>ThreadCompleteEvent</code>
except the <code>StopWorkerThread</cODE> function.
I stepped through <code>SetUpStuff</code>, and it succeeded.
However, a breakpoint on <code>CleanUpStuff</code> was never hit.
No exceptions were thrown either.
</p>
<p>
I am completely stumped as to how this thread disappeared.
</p>
</blockquote>
<p>
You already know enough to explain how the thread disappeared.
</p>
<p>
<b>Part Two</b>: After providing your explanation, the customer
came up with this solution.
</p>
<blockquote CLASS=q>
<p>
Thank you for your explanation.
We've made the following changes to fix the problem.
Again, thank you for your help.
</p>
<pre>
DWORD CALLBACK ThreadFunction(void *)
{
  HANDLE HandleArray[2];
  HandleArray[0] = SetUpStuff();
  if (HandleArray[0]) {
    HandleArray[1] = ShutdownEvent;
    while (WaitForMultipleObjects(2, HandleArray,
                             FALSE, INFINITE) == WAIT_OBJECT_0) {
      ProcessStuff();
    }
    CleanUpStuff(HandleArray[0]);
  }
  <font COLOR=blue><strike>// SetEvent(ThreadCompleteEvent);</strike></font>
  FreeLibraryAndExitThread(ThisLibrary, 0);
}

void StopWorkerThread()
{
  // tell the thread to stop
  SetEvent(ShutdownEvent);

  // wait for <font COLOR=blue>the thread</font>
  WaitForSingleObject(<font COLOR=blue>ThreadHandle</font>, INFINITE);

  // Clean up
  CloseHandle(ShutdownEvent);
  ShutdownEvent = NULL;
}
</pre>
</blockquote>
<p>
Criticize this proposed solution.
</p>
<p>
<b>Part Three</b>:
Even though the proposed solution is flawed,
explain why it doesn't cause a problem in practice.
(I.e., explain why the customer is always lucky.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-704253">
				<div id="div-comment-704253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Juan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704253">
			January 29, 2009 at 10:30 am</a>		</div>

		<p>Hi, I am pretyt new in Threads programming and all I want to do is try to learn. :)</p>
<p>I think, (Please note that I said think) the main concern about this solution is to pass the Thread&#8217;s handle to WaitForSingleObject, since if the thread is gone it realeases the handle, so at least in theory, any process can reuse it.</p>
<p>I think the customer is always lucky because the computer the customer is running the application in, has enough memory to not reuse handles and just continue to use higher handles. I think under low memory conditions this solution will run in troubles. Am I right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704273">
				<div id="div-comment-704273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704273">
			January 29, 2009 at 10:45 am</a>		</div>

		<p>The DLL in question is never unloaded by FreeLibrary. If it is, it will hang on WaitFSO.</p>
<p>Anyway, on process exit one should not be waiting for the threads. And to safely shut the threads down in a DLL it requires a second proxy DLL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-704283">
				<div id="div-comment-704283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stewart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704283">
			January 29, 2009 at 10:50 am</a>		</div>

		<p>The proposed solution suffers from the same problem, since waiting on the thread in DllMain will deadlock because ExitThread needs to take the loader lock.</p>
<p>I&#8217;m totally stumped as to how they&#8217;re getting away with it though. The only way I can think of is if CleanupStuff closes the thread handle. It seems likely that CleanupStuff will run to completion before the WaitForSingleObject runs, since the SetEvent will probably cause a context switch to the worker thread. If the handle got closed in there, then WaitForSingleObject will fail with ERROR_INVALID_HANDLE, but since they don&#8217;t check the return code, they won&#8217;t know that. Either that or they closed the handle straight away after creating the thread. That would also make sense, since if they had the handle around, what did they need ThreadCompletedEvent for anyway.</p>
<p>On a related note, they seem to be calling FreeLibraryAndExitThread without calling LoadLibrary first &#8211; unless they&#8217;re doing it somewhere else. That might be bad.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704293">
				<div id="div-comment-704293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Steward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704293">
			January 29, 2009 at 10:56 am</a>		</div>

		<ol>
<li>
<p>They haven&#8217;t read the docs for ExitProcess. &nbsp;It terminates all threads except the main one. &nbsp;Pens down, no finishing the sentence you&#8217;re on. (<a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/2383346.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/2383346.aspx</a>)</p>
</li>
<li>
<p>The thread no longer exists (see part 1). &nbsp;If the handle were reused, we could end up waiting on something forever.</p>
</li>
<li>
<p>Handles rarely get reused.</p>
</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-704303">
				<div id="div-comment-704303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">peterchen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704303">
			January 29, 2009 at 11:10 am</a>		</div>

		<p>Juan,</p>
<p>The handle is valid until it is closed, i.e. it &quot;survives&quot; thread termination. This is intentional, so you can indeed wait on a thread handle, whcih get signaled when the thread terminates.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704313">
				<div id="div-comment-704313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Steward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704313">
			January 29, 2009 at 11:15 am</a>		</div>

		<p>Actually, the more likely reason they&#8217;re lucky is that they haven&#8217;t called CloseHandle, so the thread object and its handle still exist (even though the thread doesn&#8217;t).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-704323">
				<div id="div-comment-704323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stewart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704323">
			January 29, 2009 at 11:33 am</a>		</div>

		<p>Mark,</p>
<p>But if they haven&#8217;t closed the handle, so we assume ThreadHandle is valid, then the call to WaitForSingleObject, which is called with the loaderlock held, should deadlock with the thread termination in FreeLibraryAndExitThread which needs to acquire the loader lock &#8211; so they ought to see a deadlock here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704333">
				<div id="div-comment-704333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Steward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704333">
			January 29, 2009 at 11:39 am</a>		</div>

		<p>Yes, that will happen if they&#8217;re unloaded using FreeLibrary (before process shutdown). &nbsp;That&#8217;s another problem with this design. &nbsp;As you said, they shouldn&#8217;t be calling FreeLibary from DllMain.</p>
<p>However, on process shutdown, DllMains are called after the threads are terminated, so the handle will be in the permanently signalled state as peterchen said.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-704343">
				<div id="div-comment-704343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Max</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704343">
			January 29, 2009 at 11:49 am</a>		</div>

		<ol>
<li>
<p>ExitProcess terminates all threads except the calling one ( as Mark Steward has already pointed out ).</p>
</li>
<li>
<p>It is not a good idea to wait in a thread in DLLMain</p>
</li>
<li>
<p>The customer is probably lucky because during process termination ( according to one of the Raymond&#8217;s posts on this topic ), the kernel says &quot;Open season on critical sections!&quot; and that causes the loader lock not to block at all ?</p>
</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704353">
				<div id="div-comment-704353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">gedoe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704353">
			January 29, 2009 at 12:19 pm</a>		</div>

		<p>Max seems (almost)spot on</p>
<p>Exitprocess terminates all threads</p>
<p>their first solution can therefore never succeed as the event is never set (the thread is already gone)</p>
<p>the second solution works, the thread is dead and the threadhandle knows that. But nothing they did helped it, they could just as easy have ignored exiting the thread.</p>
<p>Extra luck is rewarded for the fact that they do seem to have their own dll fixed in memory due to a GetModuleHandle or something and thus should call Freelibrary (as they try). This ensures that the only reason for unloading the dll is terminating the application</p>
<p>(unloading due to a refcount of 0 would have caused havoc, then the threads are not forcefully terminated and the loader lock would have prevented the process from recovering)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-704363">
				<div id="div-comment-704363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704363">
			January 29, 2009 at 12:49 pm</a>		</div>

		<ol>
<li>
<p>When the process exits, all threads are killed before DLL_PROCESS_DETACH is called. Thus StopWorkerThread() comes too late.</p>
</li>
<li>
<p>I see several problems: First, StopWorkerThread() is still too late, so even though there is no deadlock, CleanUpStuff() is never called, which is clearly not the intended behaviour. Second, if the worker thread execution actually reaches FreeLibraryAndExitThread and the library is unloaded, DLL_PROCESS_DETACH will be sent to the thread, I think (the docs are unspecific about this), thus the thread ends up waiting for itself. Or maybe LoadLibrary is called before the thread is being created, but in this case the library is keeping a reference on itself and will never be freed before the process terminates.</p>
</li>
<li>
<p>Maybe CleanUpStuff isn&#8217;t that important, and the second problem doesn&#8217;t occur because no one calls FreeLibrary, WaitForMultipleObjects never fails (seems unlikely) and no one else raises the shutdown event. OK, it&#8217;s not a good explanation.</p>
</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704383">
				<div id="div-comment-704383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stewart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704383">
			January 29, 2009 at 12:57 pm</a>		</div>

		<p>I&#8217;m surprised that all the threads get terminated before DLL_PROCESS_DETACH is called. I&#8217;m sure I&#8217;ve seen processes deadlock on shutdown waiting for threads in DllMain, but not sure enough to disagree &#8211; I don&#8217;t know how I&#8217;d ever have seen it otherwise &#8211; I&#8217;m pretty sure I haven&#8217;t written enough code that uses dynamically loaded (or more importantly unloaded) libraries to have seen it that way.</p>
<p>I&#8217;m not sure enough to disagree though :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-704393">
				<div id="div-comment-704393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">WaldoFinder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704393">
			January 29, 2009 at 1:42 pm</a>		</div>

		<p>Stewart,</p>
<p>FreeLibraryAndExitThread() never gets called, so no dead lock.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704433">
				<div id="div-comment-704433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704433">
			January 29, 2009 at 3:08 pm</a>		</div>

		<p>The problem: &quot;We have this DLL, and during its startup, it creates a thread&quot;</p>
<p>The real solution: &quot;Don&#8217;t do that&quot;</p>
<p>Seriously. I read that much of the first sentence and already knew that they were never going to get far.</p>
<p>And even though luck is with them for the proposed &quot;solution&quot;, all they need to do is add an &quot;unrelated&quot; dependancy to a DLL that will cause just enough of a change to the DLL loading sequence that they&#8217;ll hit a deadlock. And because adding a dependancy wouldn&#8217;t even need to be related to the thread, they&#8217;ld probably have no idea why it caused a deadlock.</p>
<p>If you look up DllMain on msdn, this is what you find:</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms682583.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms682583.aspx</a></p>
<p>Because DLL notifications are serialized, entry-point functions should not attempt to communicate with other threads or processes. Deadlocks may occur as a result.</p>
<p>And if you&#8217;re not retarded, you say &quot;hmm, I&#8217;m having problems with my DLL, first let me check the documentation and see what it says&quot;.</p>
<p>Threads and DllMain() &#8211; just say no!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-704473">
				<div id="div-comment-704473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704473">
			January 29, 2009 at 4:59 pm</a>		</div>

		<p>&quot;And if you&#8217;re not retarded&#8230;&quot;</p>
<p>Too late.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704513">
				<div id="div-comment-704513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704513">
			January 29, 2009 at 8:10 pm</a>		</div>

		<p>A clean way to have a thread in a DLL is to have a second proxy DLL which runs the thread. First (explicit) DLL loads the proxy and asks it to start the thread. The thread should hold an extra reference to the DLL by calling LoadLibrary(hProxy). When the first DLL gets unloaded, its DllMain should signal the thread to exit, and then call FreeLibrary(hProxy). The thread will call FreeLibraryAndExitThread(hProxy). All done. The proxy is now gone, too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-704523">
				<div id="div-comment-704523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A completly different mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704523">
			January 29, 2009 at 8:13 pm</a>		</div>

		<p>It appears that most of the answer has been described, but not all in one post.</p>
<p>1) &#8230; explain how the thread disappeared:</p>
<p>The process is exiting, the DLL was not (un)loaded dynamically. All threads will have exited or have been killed by ExitProcess(). We can assume that the DLL in use is not loaded dynamically, since if it was, the thread would still exist, set the event, and call FreeLibrary on the DLL currently unloading, resulting in &#8230; i have no idea, but it cant be good.</p>
<p>2) Criticize this proposed solution:</p>
<p>Removing the SetEvent() call only fixes the symptom of the problem, not the underlying cause. Also calling FreeLibrary is totally wrong (who called LoadLibrary() and see above.)</p>
<p>3) explain why the customer is always lucky:</p>
<p>Since the thread is killed, it never exits the loop, and nothing below it gets called. However the new wait will exit this time, since the thread is gone, and windows will clean up the handle when the process is finished exiting. No possible deadlock since the &#8216;communication&#8217; with another thread never happens.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704533">
				<div id="div-comment-704533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">WaldoFinder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704533">
			January 29, 2009 at 8:19 pm</a>		</div>

		<p>Alexandre,</p>
<p>How are you supposed to do this? You are not supposed to call LoadLibray() or anything that calls LoadLibray(), from DllMain(). Your solution will deadlock, as your DLL is waiting for your proxy DLL to load, while the proxy can&#8217;t load till DllMain returns.</p>
<p>Read the MSDN description of DllMain(), if you need a thread in a DLL, don&#8217;t create it in DllMain().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-704603">
				<div id="div-comment-704603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704603">
			January 30, 2009 at 10:34 am</a>		</div>

		<p>Waldo finder,</p>
<p>1) dynamically link the second DLL to the first one, so it will be loaded automatically.</p>
<p>2) You CAN call CreateThread in DllMain. The issue is only that its thread function won&#8217;t start running until your DllMain returns. You can&#8217;t synchronize with the thread&#8217;s initialization code though (that&#8217;s what either AfxBeginThread of beginthreadex used to do, but doesn&#8217;t anymore).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704613">
				<div id="div-comment-704613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704613">
			January 30, 2009 at 10:39 am</a>		</div>

		<p>WaldoFinder,</p>
<p>And, by the way, the loader lock is recursive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-704713">
				<div id="div-comment-704713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704713">
			January 30, 2009 at 1:23 pm</a>		</div>

		<p>So ExitProcess, which is called any time a program exits, kills all the threads except for the one that invoked ExitProcess. &nbsp;Then it has that thread call DllMain with DLL_PROCESS_DETACH.</p>
<p>Yet we so often hear that the only way to kill a thread is with TerminateThread, and TerminateThread is so horrible that it should never be used, since it leaves your process-world in a dangerous, unstable state.</p>
<p>So how is it that one can do anything in the DllMain? &nbsp;Does the kernel shut down the threads in a way less likely to cause the horrible trouble that you would be in if you simply called TerminateThread in the middle of your program?</p>
<div class=post>[<i>The historical context is given in <a href="http://blogs.msdn.com/oldnewthing/archive/2007/05/02/2365433.aspx" rel="nofollow">this old article</a>. And that&#8217;s why the guidance in MSDN is to do nothing if DLL_PROCESS_DETACH is called due to process termination. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704803">
				<div id="div-comment-704803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704803">
			January 30, 2009 at 2:55 pm</a>		</div>

		<p>How much metadata is created with a HANDLE? and how much space does it occupy in memory? WinNT.h has &quot;typedef void* HANDLE;&quot;, but windbg and Process Explorer (SysInternals) tell me all kinds of information about various handles. Where is all that stored?</p>
<p>I began looking into a handle leak in a 3rd party application on a server and was sidetracked by these rather pedestrian questions whose answers elude my searches on Google and MSDN. Perhaps I don&#8217;t know where to look. Do I just need to buy the book by Russinovich and Solomon?</p>
<p>Apologies for the slight non sequitur, but I can&#8217;t find the information that I&#8217;m looking for anywhere else, and comments are closed on a more relevant post. <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2007/07/18/3926581.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2007/07/18/3926581.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-704813">
				<div id="div-comment-704813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hw</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704813">
			January 30, 2009 at 3:17 pm</a>		</div>

		<p>OT for tb:</p>
<p>Start here. The book might be helpful too, but this is the basics (apologies if you&#8217;ve been through this, but everything you&#8217;re asking for is described in this &quot;chapter&quot;):</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms684841" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms684841</a>(VS.85).aspx</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704863">
				<div id="div-comment-704863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704863">
			January 30, 2009 at 4:13 pm</a>		</div>

		<p>@hw: Not sure where that&#8217;s buried in the link, but I eventually found Handles and Objects ( <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms724457" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms724457</a>(VS.85).aspx )</p>
<p>Oh, what different results you get searching &#8216;handle limits&#8217; and &#8216;handle limitations&#8217;.</p>
<p>&quot;The total number of open handles in the system is limited only by the amount of memory available.&quot; That tells me that there&#8217;s no longer a hard limit (like 10000 or 32768) for all handles, but it doesn&#8217;t help me to predict when a system could hit its limit, or just generally satisfy my curiosity about the memory footprint of a handle to a registry key or a file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-704873">
				<div id="div-comment-704873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.stephencleary.com/' rel='external nofollow' class='url'>Stephen Cleary</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704873">
			January 30, 2009 at 4:40 pm</a>		</div>

		<p>OK, my first try at one of Raymond&#8217;s Famous Problems:</p>
<p>Part 1:</p>
<p>When a process is exiting, DLL_PROCESS_DETACH is called after all threads have been terminated except one.</p>
<p>Part 2:</p>
<p>According to the ExitProcess documentation, thread handles do not become signalled until after all DLL_PROCESS_DETACH notifications return.</p>
<p>Furthermore, the list of allowed actions for DLL_PROCESS_DETACH is quite small (and only semi-documented). It&#8217;s better to do nothing.</p>
<p>This &quot;solution&quot; will totally fall apart if FreeLibrary is called instead of the process exiting (due to a deadlock over the loader lock).</p>
<p>Part 3:</p>
<p>Hmmm&#8230; this one is tough.</p>
<p>I would guess that the ExitProcess documentation is a bit misleading, and that the thread handle is signalled before DLL_PROCESS_DETACH is called.</p>
<p>This may be lucky results of a race condition, and I wouldn&#8217;t count on it happening always.</p>
<p>General Recommendation:</p>
<p>What is needed is for the customer to restructure their thinking: a thread DOES NOT belong to a dll. It belongs to the process. The process may explicitly ask the DLL to create or cleanup threads on its behalf (using exports), but the dll should not create or cleanup threads implicitly (using DllMain).</p>
<pre><code>-Steve
</code></pre>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-704983">
				<div id="div-comment-704983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DaveK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-704983">
			January 31, 2009 at 7:11 am</a>		</div>

		<p>@tb: &nbsp;You need to look up a bit about how the Windows NT kernel Object Manager works. &nbsp;HANDLEs are indices into a (sparse, multi-level tree-based) array of pointers; the pointers point to kernel and executive objects such as thread and process structures, mutexes, etc., etc.</p>
<p>So basically each extra handle to an object uses up four bytes in the handle table.</p>
<p>Browse the wikipedia entry, it looks reasonably accurate at a first glance:</p>
<p><a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Object_Manager_" rel="nofollow">http://en.wikipedia.org/wiki/Object_Manager_</a>(Windows)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-705113">
				<div id="div-comment-705113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tyler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-705113">
			February 2, 2009 at 9:54 am</a>		</div>

		<p>The system will terminate the thread during ExitProcess, probably while it is blocking on HandleArray. &nbsp;As a result ThreadCompleteEvent never gets set. &nbsp;So blocking on ThreadCompleteEvent will block indefinitely.</p>
<p>On the other hand, blocking on ThreadHandle will always return WAIT_OBJECT_0, because the thread has already been terminated as part of the regular shutdown process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-705403">
				<div id="div-comment-705403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Justa Fanna DaOleNewTing</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-705403">
			February 2, 2009 at 5:38 pm</a>		</div>

		<p>Part 1: the thread was already removed by the time PROCESS_DETACH is handled, so ThreadCompleteEvent will never be set, so the WFSO in PROCESS_DETACH will never be satisified, and will hang. &nbsp;</p>
<p>Part 2: does not actually address the issue that the thread will be removed by the time PROCESS_DETACH is handled, so setting ShutdownEvent is pointless. &nbsp;</p>
<p>Part 3: WFSO is actually failing (and thus not in an INFINITE wait) because ThreadHandle is not actually a handle. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-712663">
				<div id="div-comment-712663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.openquality.ru/software-quality-news-0209/' rel='external nofollow' class='url'>OpenQuality.ru &#124; ?????????????????????? ??????????: ???????????? ???? ??????????</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090129-00/?p=19333#comment-712663">
			March 1, 2009 at 2:29 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blog.openquality.ru/software-quality-news-0209/" rel="nofollow">http://blog.openquality.ru/software-quality-news-0209/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

