<html>
<head>
<title>If I duplicate a handle, can I keep using the duplicate after closing the original?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If I duplicate a handle, can I keep using the duplicate after closing the original?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 11, 2014 / year-entry #168</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140711-00/?p=523</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer asked whether it was okay to use a duplicated handle even after the original handle was closed. Yes. That's sort of why you would duplicate it. Duplicating a handle creates a second handle which refers to the same underlying object as the original. Once that's done, the two handles are completely equivalent. There's...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer asked whether it was okay to use a duplicated handle even after the original handle was closed.</p>
<p> Yes. That's sort of why you would duplicate it. </p>
<p> Duplicating a handle creates a second handle which refers to the same underlying object as the original. Once that's done, the two handles are completely equivalent. There's no way to know which was the original and which is the duplicate. Either handle can be used to access the underlying object, and the underlying object is not torn down until all handles to it have been closed. </p>
<p> One tricky bit here is that since you have two ways to refer to the same thing, changes made to the object via one handle will be reflected when observed through the other handle. That's because the changes you're making are to the object itself, not to the handle. For example, if you duplicate the handle to an event, then you can set the event via either handle. </p>
<p> That may all sound obvious, but one thing to watch out for is the case of file handles: The current file position is a property of the file object, not the handle. Say you duplicate a file handle and give the original to one component and the duplicate to another. Now, when either component reads from or writes to the file, it's going to change the current position of the file object, and consequently may confuse the other component (who may not have expected the current position to be changing). Also, if the underlying file is a synchronous file handle, the file operations on the underlying file will be synchronized. If one component starts a read, the other component won't be able to access the file object until that read completes. </p>
<p> If you want to create a second handle to a file that has its own file pointer and is not synchronized against the first file handle, you can use the <code>Re&shy;Open&shy;File</code> function to create a second file object with its own synchronization and its own file position, but which refers to the same underlying file. </p>
<p> (Don't forget to get your sharing modes right! The second file object's access and sharing modes must be compatible with access and sharing modes of the original file object. Otherwise the call will fail with a sharing violation.) </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1137763">
				<div id="div-comment-1137763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140711-00/?p=523#comment-1137763">
			July 11, 2014 at 7:07 am</a>		</div>

		<p>I&#39;ve only duplicated handles with the intent to keep the original with pipes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1137783">
				<div id="div-comment-1137783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140711-00/?p=523#comment-1137783">
			July 11, 2014 at 7:31 am</a>		</div>

		<p>One thing separate for duplicated handles is a file lock. At least when the duplication happens as a result of handle inheritance. The LockFile documentation doesn&#39;t say what happens for explicitly duplicated handles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1137793">
				<div id="div-comment-1137793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140711-00/?p=523#comment-1137793">
			July 11, 2014 at 8:31 am</a>		</div>

		<p>I duplicate handles to make the object easier to hold&#8230;</p>
<p>&#8230;better weight distribution and all that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1137813">
				<div id="div-comment-1137813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140711-00/?p=523#comment-1137813">
			July 11, 2014 at 8:45 am</a>		</div>

		<p>&gt;One thing separate for duplicated handles is a file lock.</p>
<p>LockFile allegedly acquires the range lock &#39;for the calling process&#39;. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1137823">
				<div id="div-comment-1137823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140711-00/?p=523#comment-1137823">
			July 11, 2014 at 9:24 am</a>		</div>

		<p>&gt; LockFile allegedly acquires the range lock &#39;for the calling process&#39;. </p>
<p>Since when are duplicated handles guaranteed to be in the same process?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1137843">
				<div id="div-comment-1137843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140711-00/?p=523#comment-1137843">
			July 11, 2014 at 10:43 am</a>		</div>

		<p>@Joshua, I&#39;ve done the same for the standard handles in the same process.</p>
<p>Since there&#39;s no way to open the console for overlapped or asynchronously IO (the console is not actually a file-like kernel object), and since the standard handles, console or not, are synchronous for historical reasons, you have to delegate console reads to another thread to avoid blocking. &nbsp;Duplicating means you can use _open_osfhandle, if you need to use some higher-level reader linked with the C runtime that will _close the C file descriptor when it finishes, or in fact any function of any framework on which you must provide file-like thing (based on the duplicated handle) that gets closed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1137873">
				<div id="div-comment-1137873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140711-00/?p=523#comment-1137873">
			July 11, 2014 at 12:44 pm</a>		</div>

		<p>DuplicateHandle is why the PROCESS_DUP_HANDLE permission is like PROCESS_VM_WRITE in that it allows god access to a process: you can duplicate a process&#39;s GetCurrentProcess handle (reinterpret_cast&lt;HANDLE&gt;(-1)) to make a full-access handle to another process.</p>
<p>Is WSADuplicateSocketW the proper way to duplicate a socket, even when it&#39;s known to be a kernel handle? &nbsp;And does WSADuplicateSocketW work on the same process?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1137883">
				<div id="div-comment-1137883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140711-00/?p=523#comment-1137883">
			July 11, 2014 at 3:18 pm</a>		</div>

		<p>@Myria:</p>
<p>WinSockets state that the handles cannot (should not) be duplicated to another process. I think it&#39;s because of using completion ports.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1137913">
				<div id="div-comment-1137913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140711-00/?p=523#comment-1137913">
			July 11, 2014 at 9:25 pm</a>		</div>

		<p>@alegr1: you can duplicate socket handles across processes using WSADuplicateSocket, you just can&#39;t use DuplicateHandle. &nbsp;The documentation says &quot;A socket handle should not be used with the DuplicateHandle function. The presence of layered service providers (LSPs) can cause this to fail and there is no way for the destination process to import the socket handle.&quot;</p>
<p>As a side note, and to provide some context, socket handles are surprisingly complicated beasts &#8211; for a start, there are two completely different kinds. &nbsp;From what I&#39;ve gathered, IFS socket handles put the transport service provider directly in the driver stack, whereas with non-IFS socket handles the file system drivers have to call the provider on the user&#39;s behalf if you use non-winsock I/O functions such as ReadFile. &nbsp;Apparently that requires a transition back to user mode, impacting performance, which is why &quot;it is recommended that socket handles be used only with Winsock functions.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1137953">
				<div id="div-comment-1137953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140711-00/?p=523#comment-1137953">
			July 14, 2014 at 7:30 am</a>		</div>

		<p>ReOpenFile doesn&#39;t work with pipes: a re-open counts as a different connection on the same pipe, it will not result in two file objects sharing the same connection. This means you can&#39;t do overlapped I/O on an anonymous pipe, because CreatePipe always opens both ends of the pipe in synchronized mode</p>
<p>DuplicateHandle safely works with sockets IF you are absolutely sure that the socket&#39;s provider stack is entirely composed of kernel mode (IFS) components. I&#39;m not sure what happens if you try to re-open a socket, though (never tried)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

