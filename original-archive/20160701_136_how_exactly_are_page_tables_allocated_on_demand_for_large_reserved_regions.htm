<html>
<head>
<title>How exactly are page tables allocated on demand for large reserved regions?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How exactly are page tables allocated on demand for large reserved regions?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 1, 2016 / year-entry #137</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160701-00/?p=93785</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Just create a placeholder page directory entry that says "Nothing to see here."</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Commenter pm100
asked
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20160318-00/?p=93181#comment-1230851">
to go into more detail</a>
into why reserving a large amount of
address space used to be expensive, and now it's not.
</p>
<p>
I sort of answered it in my reply, but let's draw some pictures.
</p>
<p>
Recall that
<!-- backref: Is there a way to change the minimum size for large pages?  -->
the paging structure is hierarchical</a>.
To describe a page of memory,
you first select a page directory pointer
from the page directory pointer table (PDPT).
That points to a page directory (PD).
You then select a
then a page directory entry (PDE) from the page directory.
This points to a page table (PT).
You then select a page table entry (PTE) from the page table.
The page table entry tells you where the memory for the page can be found.
</p>
<table BORDER=0 STYLE="border-collapse: collapse">
<tr>
<td>PDPT</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td>PD</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP &#x25cf;</td>
<td>&rarr;</td>
<td STYLE="border: solid 1px black">PDE</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td STYLE="border: solid 1px black">PDE</td>
<td></td>
<td>PT</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td STYLE="border: solid 1px black">PDE &#x25cf;</td>
<td>&rarr;</td>
<td STYLE="border: solid 1px black">PTE</td>
</tr>
<tr>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">PDE</td>
<td></td>
<td STYLE="border: solid 1px black">PTE</td>
</tr>
<tr>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">&vellip;</td>
<td></td>
<td STYLE="border: solid 1px black">PTE</td>
<td></td>
<td COLSPAN=2>Physical memory</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">PTE &#x25cf;</td>
<td>&rarr;</td>
<td>Page <var>N</var>: </td>
<td STYLE="border: solid 1px black">00 01 02 03 04 05 &hellip;</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">PTE</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">&vellip;</td>
</tr>
</table>
<p>
For pages that are reserved, the page table entry doesn't point
to physical memory.
Instead, it has a sad-face that says "If you try to access this
memory, you will get a page fault."
</p>
<table BORDER=0 STYLE="border-collapse: collapse">
<tr>
<td>PDPT</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td>PD</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP &#x25cf;</td>
<td>&rarr;</td>
<td STYLE="border: solid 1px black">PDE</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td STYLE="border: solid 1px black">PDE</td>
<td></td>
<td>PT</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td STYLE="border: solid 1px black">PDE &#x25cf;</td>
<td>&rarr;</td>
<td STYLE="border: solid 1px black">&#x1f622;</td>
</tr>
<tr>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">PDE</td>
<td></td>
<td STYLE="border: solid 1px black">PTE</td>
</tr>
<tr>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">&vellip;</td>
<td></td>
<td STYLE="border: solid 1px black">&#x1f622;</td>
<td></td>
<td COLSPAN=2>Physical memory</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">PTE &#x25cf;</td>
<td>&rarr;</td>
<td>Page <var>N</var>: </td>
<td STYLE="border: solid 1px black">00 01 02 03 04 05 &hellip;</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">PTE</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">&vellip;</td>
</tr>
</table>
<p>
The above diagram shows a page table with some pages reserved
(the sad faces),
and some pages committed and present (the ones with a filled-in PTE).
</p>
<p>
If you reserved a huge chunk of address space, the traditional
way of representing this was a page table full of sad-faces.
</p>
<table BORDER=0 STYLE="border-collapse: collapse">
<tr>
<td>PDPT</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td>PD</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP &#x25cf;</td>
<td>&rarr;</td>
<td STYLE="border: solid 1px black">PDE</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td STYLE="border: solid 1px black">PDE</td>
<td></td>
<td>PT</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td STYLE="border: solid 1px black">PDE &#x25cf;</td>
<td>&rarr;</td>
<td STYLE="border: solid 1px black">&#x1f622;</td>
</tr>
<tr>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">PDE</td>
<td></td>
<td STYLE="border: solid 1px black">&#x1f622;</td>
</tr>
<tr>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">&vellip;</td>
<td></td>
<td STYLE="border: solid 1px black">&#x1f622;</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">&#x1f622;</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">&#x1f622;</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">&vellip;</td>
</tr>
</table>
<p>
But starting in Windows 8.1 and Windows Server 2012 R2,
the memory manager optimizes this out,
and instead of creating an entire page table
filled with sad faces,
it puts a sad face <i>in the page directory</i>:
</p>
<table BORDER=0 STYLE="border-collapse: collapse">
<tr>
<td>PDPT</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td>PD</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP &#x25cf;</td>
<td>&rarr;</td>
<td STYLE="border: solid 1px black">PDE</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td STYLE="border: solid 1px black">PDE</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td STYLE="border: solid 1px black">&#x1f622; &#x25cf;</td>
</tr>
<tr>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">PDE</td>
</tr>
<tr>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">&vellip;</td>
</tr>
</table>
<p>
If you try to access memory through a sad-face page directory entry,
the CPU raises a page fault.
</p>
<p>
Looking back at the original issue:
The customer was reserving
100<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090611-00/?p=17933">GB</a>
of address space.
Each page table maps 512 &times; 4KB = 2MB of address spaces,
so that's 51,200 page tables filled with sad faces.
The memory manager optimizes this out and instead of creating
51,200 page tables filled with sad faces,
it creates 51,200 page directory entries with sad faces.
</p>
<p>
But wait, that's still proportional to the size of the memory reserve,
albeit with
a much lower constant factor.
How do we get the memory usage to be constant?
</p>
<p>
Page directory entries are grouped together into page directories.
Each page directory holds 512 page directory entries,
and if the page directory is filled with sad faces,
we can replace it with a sad face in the page directory pointer table.
Our 51,200 sad-face page directory entries become
100 sad-face page directory pointer.
(On x64, there's another hierarchy level above the page directory
pointer table, known as the page map level 4, but let's ignore that for now.)
</p>
<p>
A reservation of 100GB of address space turns into this:
</p>
<table BORDER=0 STYLE="border-collapse: collapse">
<tr>
<td>PDPT</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">&#x1f622;</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">&#x1f622;</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">&#x1f622;</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">&vellip;</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">&#x1f622;</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">&vellip;</td>
</tr>
</table>
<p>
Okay, so the constant factor is now a lot lower.
And if you filled the entire page directory page table
with sad faces,
then it can be replaced by a single sad face in the page map level 4.
</p>
<p>
So now we have an extremely low constant factor,
but it's still a constant factor.
How do you get the whole thing to be a constant?
</p>
<p>
Because eventually you will hit the top of the virtual
memory hierarchy (currently page map level 4),
and the madness stops.
</p>
<p>
If you think about it another way,
you would have realized that reserving address space
would never have required creating page tables,
page directories,
or page directory pointer tables in the first place:
The address space was already invalid (namely, in the free state).
Reserving address space doesn't make the pages valid;
they're just invalid for a different reason (namely,
in the reserved state).
They were sad faces before, and they remain sad faces.
Either way, they're still sad.
You didn't have to do anything with the page tables
to change sad faces to sad faces.
</p>
<p>
There is therefore no additional cost in terms of page tables,
page directories,
or page directory pointer tables.
The cost is in the memory manager's internal bookkeeping,
which is constant.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1254746">
				<div id="div-comment-1254746" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160701-00/?p=93785#comment-1254746">
			July 1, 2016 at 7:05 am</a>		</div>

		<p>Does it actually use a sentinal value of  	&#x1f622;  (Unicode crying face)   or something more boring like -1?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1254765">
				<div id="div-comment-1254765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160701-00/?p=93785#comment-1254765">
			July 1, 2016 at 7:21 am</a>		</div>

		<p>This is actually an insightful question disguised as a joke. I&#8217;ll answer it in another post.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1254805">
				<div id="div-comment-1254805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Piotr Siódmak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160701-00/?p=93785#comment-1254805">
			July 1, 2016 at 9:11 am</a>		</div>

		<p>lemme guess: 0x5ADDFACE? :)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-2" id="comment-1254855">
				<div id="div-comment-1254855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160701-00/?p=93785#comment-1254855">
			July 2, 2016 at 10:05 am</a>		</div>

		<p>The only requirement that the &#8220;valid&#8221; (the least significant) bit is zero. The rest of PTE can be used to point to OS structures that describe this region. It&#8217;s unlikely that it&#8217;s wasted on a joke bitmask.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk even thread-odd thread-alt depth-1" id="comment-1254785">
				<div id="div-comment-1254785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160701-00/?p=93785#comment-1254785">
			July 1, 2016 at 7:23 am</a>		</div>

		<p>Are these sad-faces visible in memory dumps?  That&#8217;s cute!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1254795">
				<div id="div-comment-1254795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt G</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160701-00/?p=93785#comment-1254795">
			July 1, 2016 at 8:46 am</a>		</div>

		<p>I&#8217;m guessing that it uses the value 0xdeadbeef</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1254845">
				<div id="div-comment-1254845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160701-00/?p=93785#comment-1254845">
			July 1, 2016 at 1:27 pm</a>		</div>

		<p>As a side note, not all architectures uses a hierarchical page table. x86 and ARM do, but PowerPC for instance doesn&#8217;t. They mostly use a hash-table for PTE (but on some PowerPC there isn&#8217;t even a page table, only TLB that are loaded by software).<br />
On these kinds of CPU, not doing anything special for &#8220;reserved but not commited&#8221; memory is the &#8220;obvious&#8221; way. I wonder if the x86 memory manager would have been &#8220;optimized&#8221; from the start if Windows had been *first* designed for that kind of CPU. Sometimes you don&#8217;t realize that there are shortcuts when you have always thought of a problem in a certain way, and it&#8217;s only when you (or someone else) approach it from a different angle that the question &#8220;Wait, is this intermediate step really necessary?&#8221; does pop up.<br />
Or maybe the shortcut was always known but wasn&#8217;t deemed worthy of the extra lines?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1254915">
				<div id="div-comment-1254915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Farnsworth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160701-00/?p=93785#comment-1254915">
			July 3, 2016 at 11:49 am</a>		</div>

		<p>I suspect that it&#8217;s just that programming models have changed; in DOS days, address space and physical memory were the same thing, and thus the early reservers of address space were people who expected to back it with something already available to the system (mirrors of RAM or disk contents).</p>
<p>Modern users reserve as much address space as they could possibly need in the worst case. These people don&#8217;t expect to back most of the space with anything, it&#8217;s just reserved and empty.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-jan-ringos even depth-3 parent" id="comment-1254935">
				<div id="div-comment-1254935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Jan+Ringo%C5%A1' rel='external nofollow' class='url'>Jan Ringoš</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160701-00/?p=93785#comment-1254935">
			July 4, 2016 at 3:11 am</a>		</div>

		<p>It was probably also a case of not optimizing for the case that nobody has used. The approach of using continuous memory is quite recent. The good old days used to be all about linked lists and quite a lot of things in Windows are still implemented that way.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1255455">
				<div id="div-comment-1255455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.farnz.org.uk/' rel='external nofollow' class='url'>Simon Farnsworth</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160701-00/?p=93785#comment-1255455">
			July 8, 2016 at 4:05 am</a>		</div>

		<p>Also worth noting that when the algorithm was first chosen, Win16 and Win32s apps would have been the norm, at 16 MiB of address space per app, and that restriction would still have mattered in developer thinking. While Win32 increased the address space to 2 GiB, it took a while for people to get the idea that they could actually use that, and even then, it wouldn&#8217;t be uncommon for the maximum possible need to be beyond 2 GiB (even though the typical case is closer to 8 MiB).</p>
<p>It&#8217;s not until 64-bit CPUs become the norm (address space of 8 TiB in early 64-bit Windows, 128 TiB in current 64-bit Windows) that most processes had sufficient address space that they could simply reserve the largest continuous block that they could possibly need instead of worrying about running out of space.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1254926">
				<div id="div-comment-1254926" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160701-00/?p=93785#comment-1254926">
			July 4, 2016 at 2:27 am</a>		</div>

		<p>@nawak Windows NT was designed for Intel i860XR first and then ported to MIPS and then later to the 386 and dec alpha. MIPS only has a TLB, so I doubt that throwing PowerPC into the mix would have made much difference.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

