<html>
<head>
<title>SHOpenRegStream does not mix with smart pointers</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2><CODE>SHOpenRegStream</CODE> does not mix with smart pointers</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 27, 2018 / year-entry #292</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20181227-00/?p=100575</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>1</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Old school meets new school, again.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Some time ago, I noted that
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20151023-00/?p=91291">
<code>Co&shy;Get&shy;Interface&shy;And&shy;Release&shy;Stream</code>
does not mix with smart pointers</a>
because it performs an
<code>IUnknown::</code><code>Release</code> of its interface parameter,
which messes up all the bookkeeping because smart pointers expect
that <i>they</i> are the ones which will perform the <code>Release</code>.
</p>
<p>
The other half of the problem is functions like
<code>SH&shy;Open&shy;Reg&shy;Stream</code> and
<code>SH&shy;Open&shy;Reg&shy;Stream2</code> which
return a COM pointer directly,
rather than putting it into an output parameter.
When you put them into a smart pointer,
the default behavior of the smart pointer is to create a new
reference,
so it will call <code>AddRef</code> upon assignment or construction,
and call <code>Release</code> upon replacement or destruction.
</p>
<pre>
// Code in italics is wrong

Microsoft::WRL::ComPtr&lt;IStream&gt; stream;
<i>stream = SHOpenRegStream(...);</i>

Microsoft::WRL::ComPtr&lt;IStream&gt; <i>stream(SHOpenRegStream(...));</i>

ATL::CComPtr&lt;IStream&gt; stream;
<i>stream = SHOpenRegStream(...);</i>

ATL::CComPtr&lt;IStream&gt; <i>stream(SHOpenRegStream(...));</i>

_com_ptr_t&lt;IStream&gt; stream;
<i>stream = SHOpenRegStream(...);</i>

_com_ptr_t&lt;IStream&gt; <i>stream(SHOpenRegStream(...));</i>
</pre>
<p>
All of these operations will take the raw pointer returned by
<code>SH&shy;Open&shy;Reg&shy;Stream</code>,
save it in the smart pointer,
and increment the reference count.
When the smart pointer is destructed,
the reference count will be decremented.
</p>
<p>
But the object started with a reference count of 1.
After storing it in the smart pointer, the reference count is 2,
even though there is only one object tracking it.
When that object (in this case, the smart pointer)
releases its reference, there is still one reference remaining,
which nobody is tracking.
</p>
<p>
You have a memory leak.
</p>
<p>
The solution is to use the <code>Attach</code> method
to say,
"Here is an object that I would like you to adopt responsibility
for."
The smart pointer will take the object but will <i>not</i>
increment the reference count,
because you told it,
"I want you to take responsibility for the reference count that
I am giving you."
</p>
<pre>
Microsoft::WRL::ComPtr&lt;IStream&gt; stream;
<font COLOR="blue">stream.Attach(SHOpenRegStream(...));</font>

ATL::CComPtr&lt;IStream&gt; stream;
<font COLOR="blue">stream.Attach(SHOpenRegStream(...));</font>

_com_ptr_t&lt;IStream&gt; stream;
<font COLOR="blue">stream.Attach(SHOpenRegStream(...));</font>

_com_ptr_t&lt;IStream&gt; stream(SHOpenRegStream(...), <font COLOR="blue">false</font>);
</pre>
<p>
The <code>_com_ptr_t</code> class has a bonus constructor that
takes a boolean parameter that indicates whether the smart pointer
should perform an <code>AddRef</code> on the pointer.
In the case where you want to adopt an existing reference,
you pass <code>false</code>.
</p>
<p>
This problem is basically the flip side of the
<code>Co&shy;Get&shy;Interface&shy;And&shy;Release&shy;Stream</code>
problem.
Whereas that one results in an over-release,
this results in an under-release.
</p>
<p>
And the root cause of both of them is that they use a calling
pattern that doesn't conform to COM recommendations.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (1)	</div>

		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title"> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/oldnewthing/20181227-00/?p=100575#respond" style="display:none;">Cancel reply</a></small></h3><p class="must-log-in">You must be <a href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20181227-00%2F%3Fp%3D100575">logged in</a> to post a comment.</p>	</div><!-- #respond -->
	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-aadsso-1live-com00034001d01cd865 even thread-even depth-1" id="comment-1374695">
				<div id="div-comment-1374695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Neil+Rashbrook+%28Copy+1%29' rel='external nofollow' class='url'>Neil Rashbrook (Copy 1)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181227-00/?p=100575#comment-1374695">
			December 28, 2018 at 3:10 am</a>		</div>

		<p>I&#8217;m just glad I don&#8217;t want to pass the result of SHOpenRegStream to CoGetInterfaceAndReleaseStream.</p>

		<div class="reply"><a rel="nofollow" class="comment-reply-login" href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20181227-00%2F%3Fp%3D100575">Log in to Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

