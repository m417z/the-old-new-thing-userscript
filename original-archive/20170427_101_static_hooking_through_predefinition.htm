<html>
<head>
<title>Static hooking through predefinition</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Static hooking through predefinition</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 27, 2017 / year-entry #102</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170427-00/?p=96055</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Creating your own hook points.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer had a program
that incorporated source code from two
different third parties,
let's call them Contoso and LitWare.
These libraries were originally written for Linux,
and they are trying to port them to Windows.
</p>
<p>
Contoso's library implements some useful feature
that they want to use.
LitWare's library implements some fancy memory management
and wants to
intercept all calls to <code>malloc</code>,
<code>free</code>, and related functions.
In particular, it wants to intercept the calls
from Contoso.
</p>
<p>
The customer knew that they could use Detours
to do the intercepting, but that would require
them to obtain a professional license,
and the cost was a concern.
</p>
<p>
Fortunately, since the customer is building all
the libraries themselves, they can make changes
to the code and recompile.
</p>
<p>
I suggested using this header file:
</p>
<pre>
// interceptable.h
extern void* (*intercepted_malloc)(size_t);
#define malloc interceptable_malloc

extern void (*intercepted_free)(void*);
#define free interceptable_free

... repeat as necessary ...
</pre>
<p>
Include this header file after <code>stdlib.h</code>
so that all calls to
the functions you care about are redirected to
the <code>intercepted_...</code> wrappers.
</p>
<p>
The implementation file is simple:
</p>
<pre>
// interceptable.c
#undef malloc
void* (*intercepted_malloc)(size_t) = malloc;

#undef free
void (*intercepted_free)(void*) = free;

... repeat as necessary ...
</pre>
<p>
When the LitWare library wants to intercept
the functions of interest,
it does this:
</p>
<pre>
void* (*original_malloc)(size_t);

void* replacement_malloc(size_t size)
{
 ... replacement can call original_malloc() ...
}

void install_malloc_wrapper()
{
  original_malloc = intercepted_malloc;
  intercepted_malloc = replacement_malloc;
}
</pre>
<p>
Now, when the Contoso library calls
<code>intercepted_malloc</code>,
it ends up calling <code>replacement_malloc</code>,
which can do whatever it wants (including calling the
original <code>malloc</code>).</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1294336">
				<div id="div-comment-1294336" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170427-00/?p=96055#comment-1294336">
			April 27, 2017 at 7:07 am</a>		</div>

		<p>Small typo: your #define declare intercept*able* instead of intercept*ed*.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1294356">
				<div id="div-comment-1294356" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170427-00/?p=96055#comment-1294356">
			April 27, 2017 at 8:02 am</a>		</div>

		<p>How timely !</p>
<p>I was wondering how to redirect calls to undocumented functions (like ddraw&#8217;s AcquireDDThreadLock), and how DDrawCompat did it (it turns out it uses Detour Express to simply &#8220;jump&#8221; to those functions by calling the real ddraw.dll).</p>
<p>I was hooking calls to functions such as DirectDrawCreate easily thanks to the types and functions defined in ddraw.h,</p>
<p>As it was very early in my project, I simply did this for each function :<br />
&#8211; define a function with the same name in EXPORTS section of the DEF file (example : &#8220;DirectDrawCreate = DirectDrawCreateHook&#8221;)<br />
&#8211; define a function with matching return type (from ddraw.h) that simply calls the real function imported from ddraw.h</p>
<p>But for those undocumented functions I could not call them by name (AcquireDDThreadLock is not defined in ddraw.h) nor know which type they returned (again, not defined).</p>
<p>As I was seeing it, Run&#8217;Time Dynamic Linking was only an answer to the &#8220;call the real function&#8221; part (of course I was wrong).</p>
<p>But I wondered how people did it before Detour / EasyHook, and this give such an &#8220;of course !&#8221; solution that I&#8217;m a little ashamed I didn&#8217;t think of it sooner.</p>
<p>Thanks a lot !</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1294357">
				<div id="div-comment-1294357" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170427-00/?p=96055#comment-1294357">
			April 27, 2017 at 8:14 am</a>		</div>

		<p>The wonderful book &#8220;Working Effectively with Legacy Code&#8221; by Michael Feathers describes all kinds of techniques like this (usually in a language-neutral way) for &#8220;hooking&#8221; into places and making &#8220;seams&#8221; to be able to test individual pieces of things. Usually, one can find some way to abuse a compiler to point things to your own code when the code you&#8217;re testing isn&#8217;t expecting things, even in a non-OO language.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1294365">
				<div id="div-comment-1294365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170427-00/?p=96055#comment-1294365">
			April 27, 2017 at 9:28 am</a>		</div>

		<p>So many projects try to globally replace malloc and free that I&#8217;m mildly surprised the C and C++ standards committees haven&#8217;t provided official hook points.</p>
<p>Maybe it&#8217;s because so many projects don&#8217;t actually have a good reason.  Library implementations and/or compiler instrumentation seem good enough for finding bugs (leaks, double-frees, pathological allocation patterns).</p>
<p>The system allocators are about as efficient (and secure) as general purpose allocators can be.  But many project still insist on changing the allocator for performance.  The way you get better performance is to exploit something specific about your application&#8217;s allocation patterns.  For any non-trivial app, though, those patterns are specific to only a portion of your application, so hooking at the global level is overkill and surrenders the other benefits of the system allocator.  So, sure, it might make sense to allocate all your fribblediwidgets with an arena allocator, but hijacking all allocations is fraught with peril.</p>
<p>I hope that one day, the C++ compiler folks will change new and delete to use something other than malloc and free, just to screw with all the C++ developers who&#8217;ve replaced malloc and free.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1294385">
				<div id="div-comment-1294385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170427-00/?p=96055#comment-1294385">
			April 27, 2017 at 10:20 am</a>		</div>

		<p>They do, it&#8217;s called ld. The C standard doesn&#8217;t define dynamic linking, so they expect that defining the symbol redirects callers in the standard library to it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1294395">
				<div id="div-comment-1294395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170427-00/?p=96055#comment-1294395">
			April 27, 2017 at 10:29 am</a>		</div>

		<p>&gt; For any non-trivial app, though, those patterns are specific to only a portion of your application, so hooking at the global level is overkill and surrenders the other benefits of the system allocator.</p>
<p>Playing devil&#8217;s advocate, if you&#8217;re going to reinvent the allocation wheel for part of your application, then your allocator probably wants to have some understanding of the memory usage of the rest of the application.  That means hooking malloc for accounting purposes.</p>
<p>But the real question is why you&#8217;re reinventing the wheel in the first place.  Is the performance issue really big enough to justify all that developer time, and the fragility that comes with it (see: Heartbleed, etc.)?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1294396">
				<div id="div-comment-1294396" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy ONeal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170427-00/?p=96055#comment-1294396">
			April 27, 2017 at 11:17 am</a>		</div>

		<p>Don&#8217;t be silly, Contoso would never have had something on Linux in the first place :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-pesik odd alt thread-odd thread-alt depth-1" id="comment-1294495">
				<div id="div-comment-1294495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Peter+Esik' rel='external nofollow' class='url'>Peter Esik</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170427-00/?p=96055#comment-1294495">
			April 28, 2017 at 1:04 pm</a>		</div>

		<p>It&#8217;s all fun and games until they start encountering nasty stuff, like an MSVC header where memory is allocated with _malloc_dbg, but freed with regular free (such as strstream, for example).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1294555">
				<div id="div-comment-1294555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Wiltshire</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170427-00/?p=96055#comment-1294555">
			April 30, 2017 at 9:41 pm</a>		</div>

		<p>An aside on Linux, how dynamic linking is different, and LD_PRELOAD would have been fun.  ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

