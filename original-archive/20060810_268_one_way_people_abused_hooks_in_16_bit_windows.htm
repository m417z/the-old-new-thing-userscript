<html>
<head>
<title>One way people abused hooks in 16-bit Windows</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>One way people abused hooks in 16-bit Windows</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 10, 2006 / year-entry #269</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060810-06/?p=30173</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">We saw last time how windows hooks were implemented in 16-bit Windows. Even though the HHOOK was an opaque data type that should have been treated like a handle, many programs "knew enough to be dangerous" and took advantage of the fact that the HHOOK was just a pointer to the previous hook procedure. The...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We saw last time
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/08/09/693280.aspx">
how windows hooks were implemented in 16-bit Windows</a>.
Even though the <code>HHOOK</code> was an opaque data type that
should have been treated like a handle,
many programs "knew enough to be dangerous"
and took advantage of the fact that the <code>HHOOK</code>
was just a pointer to the previous hook procedure.
</p>
<p>
The most common way of abusing this knowledge was
by unhooking from the windows hook chain the wrong way.
Instead of calling the <code>UnhookWindowsHook</code> function
to unhook a windows hook, they called <code>SetWindowsHook</code> again!
Specifically, they removed their hook by simply reinstalling the
previous hook at the head of the chain:
</p>
<pre>
HHOOK g_hhkPrev;

// install the hook
g_hhkPrev = SetWindowsHook(WH_KEYBOARD, MyHookProc);
...

// crazy! uninstall the hook by setting the previous hook "back"
SetWindowsHook(WH_KEYBOARD, g_hhkPrev);
</pre>
<p>
This code worked in spite of itself;
it's as if two wrongs made a "sort of right".
If nobody else messed with the hook chain in between the time
the hook was installed and it was subsequently "uninstalled",
then reinstalling the hook at the head of the chain
did restore the chain variables in the same way they would have
been restored if they had uninstalled the hook correctly.
</p>
<p>
But if somebody else installed their own <code>WH_KEYBOARD</code>
hook in the meantime, then setting the previous hook "back"
would have the effect of not only "uninstalling" the <code>MyHookProc</code>
but also <strong>all other hooks that were installed in the meantime</strong>.
(This is exactly the same problem you have
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/11/10/55647.aspx">
if you aren't careful in how you remove subclassed window procedures</a>.)
</p>
<p>
I still have no idea why they used this strange technique instead of
doing the right thing, which is just swapping out one line of code
for another:
</p>
<pre>
UnhookWindowsHook(WH_KEYBOARD, MyHookProc);
</pre>
<p>
Windows&nbsp;3.1 introduced the
<code>SetWindowsHookEx</code>/<code>CallNextHookEx</code> model,
which doesn't use the external linked list technique but rather manages
the hook chain internally.
This protected the hook chain from programs that corrupted it by
mismanaging the external hook chain,
but it meant that
when these crazy programs tried to unhook by hooking,
they ended up corrupting the <strong>internal</strong> hook chain.
Special code had to be written to detect these crazy people and
turn their bad call into the correct one so that the hook chain
wouldn't get corrupted.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-407813">
				<div id="div-comment-407813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://www.darklock.com/blog/' rel='external nofollow' class='url'>Caliban Darklock</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060810-06/?p=30173#comment-407813">
			August 10, 2006 at 11:45 am</a>		</div>

		<p>And where else have we seen this (bad) practice? </p>
<p>Why, under DOS, when installing ISRs for background processing. Which just goes to show that people never, ever, EVER learn.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-407833">
				<div id="div-comment-407833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nksingh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060810-06/?p=30173#comment-407833">
			August 10, 2006 at 12:58 pm</a>		</div>

		<p>Well, it&#8217;s never ever the same people every time. &nbsp;It&#8217;s like Nietzsche&#8217;s Eternal Recurrence of inexperienced (too smart for their own good) programmers. &nbsp;Also, old programmers never die, they just move up the management hierarchy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-407843">
				<div id="div-comment-407843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Bruno</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060810-06/?p=30173#comment-407843">
			August 10, 2006 at 1:11 pm</a>		</div>

		<p>There was also the problem that there was a bug in the debug kernel of Windows 3.1 that made it crash if you used SetWindowsHookEx. The only cure was to go back to the deprecated SetWindowsHook.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-407853">
				<div id="div-comment-407853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060810-06/?p=30173#comment-407853">
			August 10, 2006 at 1:29 pm</a>		</div>

		<p>This is all well and good, but how does one restore GDI objects? By calling SelectObject and passing the old value, of course. So is it so hard to understand why programmers get confused? I&#8217;m not blaming MS in particular here, but this is a common problem when there are inconsistencies across an API. In this case SetWindowsHook should not have returned something that was a valid parameter for a subsequent call (although given the rampant casting required under Win16 that wouldn&#8217;t have stopped some people from still trying!).</p>
<div CLASS=post>[<i>Um, but there can be multiple hooks, but only one bitmap selected into a DC. Different models. You don&#8217;t &#8220;chain to the previous bitmap&#8221; in a DC. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-407883">
				<div id="div-comment-407883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Coderjoe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060810-06/?p=30173#comment-407883">
			August 10, 2006 at 3:27 pm</a>		</div>

		<p>Right, but inexperienced programmers in a rush could wind up with the mistaken impression that there is only one hook, or something, and treat it like the do GDI objects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-407893">
				<div id="div-comment-407893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shog9</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060810-06/?p=30173#comment-407893">
			August 10, 2006 at 3:40 pm</a>		</div>

		<p>Joe/Kevin:<br />
<br />You know, most of us have probably seen and/or made enough newbie mistakes to recognize the strange logic that goes into making them.<br />
<br />It doesn&#8217;t make them any less stupid.</p>
<p>Now, misunderstanding the difference between selecting a bitmap into a DC and selecting anything else&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-407923">
				<div id="div-comment-407923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Merit</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060810-06/?p=30173#comment-407923">
			August 10, 2006 at 6:10 pm</a>		</div>

		<p>I think it has to do with the requirement that you save the old value in a global variable. &nbsp;Without stopping to think about it pretty hard thats a really strange requirement, so people might have assumed that you needed to keep it around in order to do the unhook.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-407933">
				<div id="div-comment-407933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060810-06/?p=30173#comment-407933">
			August 10, 2006 at 7:49 pm</a>		</div>

		<p>[Um, but there can be multiple hooks, but only one bitmap selected into a DC. Different models. You don&#8217;t &#8220;chain to the previous bitmap&#8221; in a DC. -Raymond] <br />But will a programmer writing his first (and only one in that program) windows hook necessarily realize that? Would it not be better to design API calls, where possible, so that this kind of mistake is impossible or at least unlikely, even for programmers who might miss a detail in the docs? The tone of some of these comments is starting to remind me of cases of &#8220;blame the user&#8221;, which I believe Raymond&#8217;s written about in the past. In this case it&#8217;s &#8220;blame the user of this API for not understanding the model the author had in mind, when there&#8217;s an incorrect but superficially similar model in the same general space (ie Win16 development) that the user has probably been using all along&#8221;. Whose fault is that?</p>
<div CLASS=post>[<i>You&#8217;d think a function called <code>CallNextHook</code> would be an extremely strong indication that there can be multiple hooks. Setting the current object into a container and installing a hook into a container are very different concepts. It actually surprises me that people think they&#8217;re related&#8230; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-407943">
				<div id="div-comment-407943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060810-06/?p=30173#comment-407943">
			August 10, 2006 at 9:42 pm</a>		</div>

		<blockquote><p>
  I still have no idea why they used this<br />
  <br />&gt; strange technique instead of doing the right<br />
  <br />&gt; thing</p>
<p>Although I know (after taking too long to learn this) not to blame you for two possible reasons, nonetheless there are two pretty obvious possible reasons.</p>
<p>1. &nbsp;Not everyone was a Win16 programmer, no problem. &nbsp;Some people who weren&#8217;t Win16 programmers were learning to be Win16 programmers, no problem. &nbsp;Some people who weren&#8217;t Win16 programmers were doing Win16 programming in products to be released, without anyone else checking and fixing their work, oops.</p>
<p>2. &nbsp;Some people don&#8217;t always have time to experiment to see which 75% of MSDN is correct, so they skip MSDN and just do the experiments.</p>
<p>I also agree with Merit&#8217;s suggestion that the use of a global variable provides some pretty powerful intuition that the global variable was intended to be used that way, and then add the fact that it seemed to work sometimes&#8230;
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-407963">
				<div id="div-comment-407963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060810-06/?p=30173#comment-407963">
			August 10, 2006 at 11:29 pm</a>		</div>

		<p>I think it was inspired by DOS and TSR.<br />
<br />The only way to unhook an interrupt was to set the previous interrupt address.</p>
<p>The rigth way was to GetInterrupt (ah=35h), compare it to the saved interrupt address, and not uninstall yourself if different, only set a flag to disable processing in your own interrupt routine.<br />
<br />But I have seen enough applications that just restored the original interrupt handler, &quot;killing&quot; other TSR or even the system.</p>
<p>Fun times :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-408263">
				<div id="div-comment-408263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060810-06/?p=30173#comment-408263">
			August 11, 2006 at 4:34 pm</a>		</div>

		<p>Well, they would have to had to know about UnhookWindowsHook, and that&#8217;s not an obvious counterpart to SetWindowsHook. The name SetWindowsHook doesn&#8217;t suggest that any counterpart exists (except maybe GetWindowsHook). (Further thought would lead to the realisation that this can&#8217;t work for out-of-order removal, but there are plenty of hook mechanisms that are broken in that way.) The lesson I would draw is that functions that attach and detach functions from hooks should be done using names that suggest an inverse function exists. For example, Attach/Detach, Install/Remove, Add/Remove, Register/Unregister, Subscribe/Unsubscribe.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

