<html>
<head>
<title>What is DLL import hinting?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What is DLL import hinting?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 17, 2010 / year-entry #88</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100317-00/?p=14573</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Binding and hinting are two types of optimizations to improve the load-time performance of a module (executable or DLL). We'll start with hinting, then look at binding, and then look at how it affects delay-loading. The import table for a module contains a list of DLLs and a list of functions from that DLL which...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p><i>Binding</i> and <i>hinting</i> are two types of optimizations to improve the load-time performance of a module (executable or DLL). We'll start with hinting, then look at binding, and then look at how it affects delay-loading.</p>
<p> The import table for a module contains a list of DLLs and a list of functions from that DLL which the module wishes to link to. The basic idea is that for each target DLL, the linker loads the DLL and then obtains the address of each imported function and from that DLL, <a href="http://blogs.msdn.com/oldnewthing/archive/2006/07/20/672695.aspx"> records the results in the loaded module's table of imported function addresses</a>. </p>
<p> <a href="http://blogs.msdn.com/oldnewthing/archive/2006/07/28/681473.aspx"> <i>Hinting</i></a> is a technique for speeding up this lookup. </p>
<p> In addition to recording the name of the function the module wishes to link to, the linker also records the index of the function in the target DLL's export table. For example, suppose we had a DLL named <code>FLINT</code> whose export table looks like this: </p>
<table>
<tr>
<td>1</td>
<td><code>Barney</code></td>
</tr>
<tr>
<td>2</td>
<td><code>Fred</code></td>
</tr>
<tr>
<td>3</td>
<td><code>Wilma</code></td>
</tr>
</table>
<p> I've numbered the entries for reasons you'll see soon. </p>
<p> You wrote a DLL which imports all three of these functions. The import table for your DLL goes something like this: </p>
<table>
<tr>
<td colspan="2">Import from <code>FLINT</code></td>
</tr>
<tr> </tr>
<tr>
<td rowspan="3" width="10"></td>
<td>Fred (hint = 2)</td>
</tr>
<tr>
<td>Wilma (hint = 3)</td>
</tr>
<tr>
<td>Barney (hint = 1)</td>
</tr>
</table>
<p> When your DLL gets loaded, the module loader loads the target DLL <code>FLINT.DLL</code>, and then it goes about resolving the imports. First up is <code>Fred</code>. But instead of just searching the export table of <code>FLINT.DLL</code> for the function <code>Fred</code>, it sees the hint and says, "Hey, let me look in slot&nbsp;2 first." And lo and behold, there the function is in slot&nbsp;2. Yay, a full search of the export table was not necessary; the hint sent us directly to the correct slot. </p>
<p> The hint is just a hint, though. If <code>FLINT.DLL</code> doesn't have the function <code>Fred</code> in slot&nbsp;2, then the loader just does things the old-fashioned way, by searching the export table for the <code>Fred</code> function. </p>
<p> In general, hints are fairly resilient as long as the DLL doesn't change too much. If <code>FLINT.DLL</code> is updated, say by a security patch, the list of functions typically does not change, so the position in the exported names table remains unchanged. It's only if a function is added to or removed from <code>FLINT.DLL</code> do the hints begin to lose their effectiveness. </p>
<p> <a href="http://blogs.msdn.com/oldnewthing/archive/2010/03/18/9980802.aspx"> Next time, we'll look at <i>binding</i></a>, which is an optimization even more powerful than hinting, but which is also more fragile. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-820093">
				<div id="div-comment-820093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100317-00/?p=14573#comment-820093">
			March 17, 2010 at 11:16 am</a>		</div>

		<p>Man, does this topic have legs!</p>
<p>My questions below might violate some implied ground rules, so feel free to delete or ignore this comment.</p>
<p>Raymond: do you have any thoughts on how prevalent these load-time optimizations might be? &nbsp;For example, are these techniques common when building the Windows Shell?</p>
<p>I know that this is not really a .NET blog, but a thought crosses my mind &#8212; would these techniques work on assemblies? &nbsp;My gut feeling is that they wouldn&#8217;t since the functions exported by assemblies must first be JIT-ed, but maybe these techniques could be applied to assemblies that have been pre-translated (ngen).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820103">
				<div id="div-comment-820103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jared</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100317-00/?p=14573#comment-820103">
			March 17, 2010 at 1:56 pm</a>		</div>

		<p>I may be missing something, but this seems like a <em>trivia</em> boost. &nbsp;The number of entries in a dll should be relatively small, and in an ordered table.</p>
<p>When a dll has hundreds of entry points, perhaps it&#8217;s getting too big?</p>
<p>Maybe the real performance problem is an application having to loading a zillion bytes of dlls when only a few percent of the loaded coded is actually referenced (or potentially usable)?</p>
<div class=post>[<i>The export table is sorted by ordinal number, which isn&#8217;t much help when you&#8217;re looking by name. (And may I suggest reading up on &#8220;demand paging.&#8221;) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820113">
				<div id="div-comment-820113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.doogal.co.uk' rel='external nofollow' class='url'>Doogal</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100317-00/?p=14573#comment-820113">
			March 17, 2010 at 2:24 pm</a>		</div>

		<p>I also wonder what kind of performance boost this would provide. Is it just a throwback to ye olde days where this would make a difference or is it still worth it? And if it&#8217;s the latter, what are the steps required by searching the export table that make it slow?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820123">
				<div id="div-comment-820123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100317-00/?p=14573#comment-820123">
			March 17, 2010 at 2:29 pm</a>		</div>

		<p>@Tom: &nbsp;I just did a dumpbin /exports of several common system modules like user32.dll. &nbsp;There you can see that those DLLs export functions by name and by ordinal.</p>
<p>Until a few minutes ago, I thought hints and ordinals were the same things. (I know I&#8217;ve read other articles that implied that and even used the terms interchangeably.) &nbsp;But dumpbin shows different numbers for ordinal and hint. &nbsp;So now I&#8217;m confused again.</p>
<p>My best guess is that the ordinal is just a 32-bit number that, if assigned to an exported function, can be used in place of the name of the function&#8211;comparing numbers is generally faster than comparing strings. &nbsp;The hint, then, would be the index into the export name table, which is possibly specific to the version of the DLL.</p>
<p>To use ordinals, I know you have to do extra work&#8211;specifically, create a .DEF file that specifies the ordinals and optionally tells the linker to discard the name. &nbsp;Does hinting happen automatically?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820143">
				<div id="div-comment-820143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100317-00/?p=14573#comment-820143">
			March 17, 2010 at 5:42 pm</a>		</div>

		<p>I&#8217;ve been used to bind function to the index back in the Win 3.1 days.</p>
<p>The reason is because TPW 1.5 online help say that this kind of bind is faster (and it is). Also my primary use if the API involved (WinExec()) is for calling up winmine.exe in the CS lesson after assignment is done. I don&#8217;t have to consider maintainance afterwards. :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820163">
				<div id="div-comment-820163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pagetable.com/' rel='external nofollow' class='url'>Myria</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100317-00/?p=14573#comment-820163">
			March 17, 2010 at 8:41 pm</a>		</div>

		<p>Are exports&#8217; names always in lexicographical order, so that when hint lookup fails, it can do a binary search by name?</p>
<p>Regarding the questions above, the hints come from the import library you statically linked against.</p>
<p>Since the ordinal numbers differ among Windows versions, this hinting ultimately isn&#8217;t very useful.</p>
<p>Some ordinals don&#8217;t change between versions, such as the older functions of ws2_32.dll. &nbsp;This is because to this day, their import libraries still use ordinal-only lookup.</p>
<div class=post>[<i>Export names are not always in lexicographical order. If you explicitly assign ordinals, then they appear in the order you specified. <a href="http://blogs.msdn.com/oldnewthing/archive/2006/07/18/669668.aspx" rel="nofollow">I discussed this a few years ago</a>.-Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820173">
				<div id="div-comment-820173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100317-00/?p=14573#comment-820173">
			March 17, 2010 at 11:39 pm</a>		</div>

		<p>@Myria:</p>
<p>I&#8217;d imagine that if you imported one of your own DLLs the ordinals wouldn&#8217;t change between windows versions.</p>
<p>(Disclaimer: I only do .Net programming for Windows so what I just said might be utter rubbish)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820183">
				<div id="div-comment-820183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pelock.com' rel='external nofollow' class='url'>Bartosz W&#243;jcik</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100317-00/?p=14573#comment-820183">
			March 18, 2010 at 4:17 am</a>		</div>

		<p>In my executable protector loader code I&#8217;m also using an additional hint which are the first letters of the API (skipping anything else A..Z like _ @ etc.) so the export table search loop is even faster, import table resolving is the biggest issue in my software (in terms of speed, scanning an export table of 20MB dll file with &gt;50 chars in the export names takes sooo long), but there are some things that can be done to speed it up, eg. when you have a DLL loaded you can split a single IMAGE_IMPORT_DESCRIPTOR resolving across multiple threads (for the PE EXE files of course). The best solution to speed up import table resolving would be using only ordinals, blazing fast ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820193">
				<div id="div-comment-820193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100317-00/?p=14573#comment-820193">
			March 18, 2010 at 7:08 am</a>		</div>

		<p>If it fails to find it at the slot specified in the hint, does it search nearby positions first? (i.e. the hint says 42, it&#8217;s not there, does it search 40 41 43 44 etc, or does it start from 1?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820303">
				<div id="div-comment-820303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100317-00/?p=14573#comment-820303">
			March 18, 2010 at 10:39 am</a>		</div>

		<blockquote><p>
  &gt;&gt;
</p></blockquote>
<p>Maybe the real performance problem is an application having to loading a zillion bytes of dlls when only a few percent of the loaded coded is actually referenced (or potentially usable)?</p>
<blockquote><p>
  &gt;&gt;
</p></blockquote>
<p>Actually, executable modules aren&#8217;t loaded into memory wholesale, but rather are mapped into memory through the use of sections. &nbsp;In essence, Windows kind of treats them as a sort of read-only page file, loading pages of the executable at a time. &nbsp;This reduces load times and also frees up physical memory for other use.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

