<html>
<head>
<title>Wrapper templates to make writing callback functions slightly easier</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Wrapper templates to make writing callback functions slightly easier</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 19, 2004 / year-entry #283</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">I previously discussed why callback functions must be static if they are member functions. Writing the correct prototype for the callback function is usually somewhat clumsy. It's not hard. Just clumsy. class Sample { static DWORD CALLBACK StaticThreadProc(LPVOID *lpParameter) { Sample *self = reinterpret_cast<Sample*>(lpParameter); return self->RealThreadProc(); } DWORD __stdcall RealThreadProc() { ... do stuff ......</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>I previously discussed <a href="http://weblogs.asp.net/oldnewthing/archive/2004/01/09/49028.aspx">why callback functions must be static if they are member functions</a>. </p>
<p>Writing the correct prototype for the callback function is usually somewhat clumsy. It's not hard. Just clumsy. </p>
<pre>class Sample {
 static DWORD CALLBACK StaticThreadProc(LPVOID *lpParameter)
 {
  Sample *self = reinterpret_cast&lt;Sample*&gt;(lpParameter);
  return self-&gt;RealThreadProc();
 }
 DWORD __stdcall RealThreadProc()
 {
   ... do stuff ...
 }
 void DoSomething()
 {
   ... CreateThread(NULL, 0, StaticThreadProc, this, 0, &amp;dwTid); ...
 }
};
</pre>
<p>(If you read <a href="http://weblogs.asp.net/oldnewthing/archive/2004/01/09/49028.aspx">my previous article, you'd recognizing sticking a __stdcall in the declaration for RealThreadProc as a micro-optimization</a>.) </p>
<p>Every class that has a thread procedure needs this "trampoline" function <code>StaticThreadProc</code> that has the correct function signature, then massages it into something that is easier to work with (in this case, an object pointer and method call). Well, okay, you could do the work directly in the trampoline if you wanted to, but it's usually much more convenient to put the bulk of the work in a proper member function so you have access to all the "this" shorthand. </p>
<p>If you do this a lot, you can write a template function to do the boring grunt work, freeing your brain to do "real thinking". </p>
<pre>template&lt;class T, DWORD (__stdcall T::*F)()&gt;
DWORD CALLBACK ThreadProc(void *p)
{
    return ((reinterpret_cast&lt;T*&gt;(p))-&gt;*F)();
}
</pre>
<p>This template function declares a templatized thread procedure. Notice that the calling convention for the <code>ThreadProc</code> template function is correct for a thread function, so this guy can be passed straight to <code>CreateThread</code>. Your class then would look like this: </p>
<pre>class Sample {
 DWORD __stdcall Background()
 {
   ... do stuff ...
 }
 void DoSomething()
 {
   ... CreateThread(NULL, 0, ThreadProc&lt;Sample, &amp;Sample::Background&gt;, this, 0, &amp;dwTid); ...
 }
};
</pre>
<p>This takes the trampoline function out of the class declaration. Instead, it is auto-generated by the compiler via the template. </p>
<p>Okay, so maybe this isn't much of a typing-savings after all, considering the rather clumsy expression for the template invocation. I wonder if it can be made simpler. </p>
<p>[Raymond is currently on vacation; this message was pre-recorded.] </p>
<p>[2004 July 31 - fix obvious typos.]</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-196263">
				<div id="div-comment-196263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403#comment-196263">
			July 19, 2004 at 8:23 am</a>		</div>

		<p>Many frameworks define a Thread class or template that takes care of all the Win32 interfacing, leaving the developer to override the main function (and constructor to take additional parameters).</p>
<p>Hereâ€™s an example class documentation, PThread from PWLib.<br />
<br /><a target="_new" href="http://www.openh323.org/docs/pwlib/PThread.html" rel="nofollow">http://www.openh323.org/docs/pwlib/PThread.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196273">
				<div id="div-comment-196273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">icymint3</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403#comment-196273">
			July 19, 2004 at 10:00 am</a>		</div>

		<p>good, very good</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196303">
				<div id="div-comment-196303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403#comment-196303">
			July 19, 2004 at 12:05 pm</a>		</div>

		<p>We really just need to slap the twits in charge of the compiler standard who decide that they can&#8217;t let us at nifty things like the ability to assign &quot;this&quot; in a static and use class data thereafter.<br />
<br /> :P<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196313">
				<div id="div-comment-196313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ATZ Man</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403#comment-196313">
			July 19, 2004 at 12:08 pm</a>		</div>

		<p>Mat,</p>
<p>Obviously there are languages and frameworks and so on that do indeed take care of the details for you. You have your C#, your Java, your scripting languages (the old fashioned term for Perl and Python). You can write frameworks for C++ that do this, too. Raymond writes for a Win32 C++/C audience.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196323">
				<div id="div-comment-196323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://members.cox.net/menright1/' rel='external nofollow' class='url'>ATZ Man</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403#comment-196323">
			July 19, 2004 at 12:11 pm</a>		</div>

		<p>Follow-up question:</p>
<p>What of beginthread? As I understand it, if you use operator new or malloc or one of many standard library functions you need to use beginthread[ex] to launch a thread instead of CreateThread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196353">
				<div id="div-comment-196353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.bigbeardy.co.uk' rel='external nofollow' class='url'>Mat Hall</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403#comment-196353">
			July 19, 2004 at 12:59 pm</a>		</div>

		<p>I know we have a range of things, from Lisp at one end where everything&#8217;s some sort of list, and you don&#8217;t need to get involved in the nitty gritty of how it actually works, via C (which combines the power of assembly language with the ease of use of assembly language) through to raw binary, each with their own special powers&#8230;</p>
<p>My point (such as it was) that in this day and age, what business of anyone&#8217;s is it whether foo is an int, a pointer to an int, a dereferenced pointer to an int, or a collection of Uraguayan stamps?  How come we&#8217;re this far into the 21st century and people still need to know this sort of thing?  Where&#8217;s my meal in a pill?  My jetpack?  Have we actually made any progress, or can we just waste time much faster than before?</p>
<p>I think I shall join a monastery &#8212; at least they make no pretence at progress, and it&#8217;s the same nonsense it ever was&#8230;</p>
<p>(And I&#8217;m still having a bad day.  I&#8217;ve been given a problem that&#8217;s most definitely not a nail, and the only tool I&#8217;m allowed is a hammer.  (A time-and-motion manpower resource estimation app, and Access 97.  And somebody told the guy who wants it about XML, and he seems to think its relevant.)  Understandably, I&#8217;m bitter.)</p>
<p>Apologies for the interuption, and we now return you to your scheduled broadcast.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196373">
				<div id="div-comment-196373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403#comment-196373">
			July 19, 2004 at 3:15 pm</a>		</div>

		<p>How come the security attributes in CreateThread isn&#8217;t a pointer to const?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196253">
				<div id="div-comment-196253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Kohne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403#comment-196253">
			July 19, 2004 at 8:21 am</a>		</div>

		<p>Use a macro. Yea, bad old #define:</p>
<p>#define STATIC_THREAD_PROC(ClassName) static DWORD CALLBACK StaticThreadProc(LPVOID *lpParameter)<br />
<br />	{<br />
<br />	ClassName *self = reinterpret_cast&lt;ClassName*&gt;(lpParameter);<br />
<br />	return self-&gt;RealThreadProc();<br />
<br />	}</p>
<p>Invoke thusly in the class header:<br />
<br />   STATIC_THREAD_PROC(Sample)</p>
<p>You are trying to do text replacement, so use a tool that does text replacement. And it&#8217;s easy to use.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196293">
				<div id="div-comment-196293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.bigbeardy.co.uk' rel='external nofollow' class='url'>Mat Hall</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403#comment-196293">
			July 19, 2004 at 11:07 am</a>		</div>

		<p>It&#8217;s things like that that make me wonder why anyone uses C (or its derivatives) any more.  Have we not prgoressed far enough that the compiler is smart enough to handle all this sort of tedious junk for us?  If you (almost) *always* have to do this, why can&#8217;t it be done for you?  Why must we have pointers everywhere?</p>
<p>The way I see it, in the years since I started coding computer power has increased by at least two orders of magnitude, so why now do I still need to bust my ass doing all this when the hundred-fold increase in machine speed can compensate for me only being human and not really being designed for handling this sort of totally abstract and unneccesarily complicated state of affairs?  Why can&#8217;t programming languages or OSes compensate for sloppy coding?  If my handle goes out of context, why can&#8217;t the machine deal with freeing it?  Why should I have to bother?  SO I didn&#8217;t free up some memory.  Big deal.  From context it&#8217;s obvious I won&#8217;t be using it again, so use those cycles for something useful!  I have far more important things to worry about!</p>
<p>Spock with a beard?  Has the universe gone crazy?</p>
<p>(Apologies.  I&#8217;ve had a bad day, and I&#8217;m on the cusp of abandoning computers for good &#8212; they may be faster and more capable than ever, but they&#8217;re still as awkward and boneheaded as ever, and I can&#8217;t take it any more!)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196383">
				<div id="div-comment-196383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizza</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403#comment-196383">
			July 19, 2004 at 4:27 pm</a>		</div>

		<p>I personally do not like to lose the void* parameter.  I don&#8217;t like to lose it because I sometimes have more than one thread per member function, so it can be useful to pass context information.</p>
<p>I also do not like to put the trampoline inside the class (as I don&#8217;t really see why it belongs there).</p>
<p>And finally I do not like to type in template parameters if I can help it.</p>
<p>So I do something along the lines of:</p>
<p>template &lt;typename T, typename P, typename F&gt;<br />
<br />struct ThreadInfoMemberFn<br />
<br />{<br />
<br />	typedef T class_type;<br />
<br />	typedef P parameter_type;<br />
<br />	typedef F function_type;</p>
<p>	T* obj;<br />
<br />	function_type function;<br />
<br />	P data;<br />
<br />	ThreadInfoMemberFn(class_type* f, function_type fp, parameter_type d) : obj(f), function(fp), data(d) {}<br />
<br />private:<br />
<br />	ThreadInfoMemberFn&lt;T, P, F&gt;&amp; operator=(const ThreadInfoMemberFn&lt;T, P, F&gt;&amp;);<br />
<br />};</p>
<p>template &lt;typename T, typename P, typename F&gt;<br />
<br />DWORD WINAPI ThreadDispatchMemberFn(void* data)<br />
<br />{<br />
<br />	try<br />
<br />	{<br />
<br />		std::auto_ptr&lt;ThreadInfoMemberFn&lt;T, P, F&gt; &gt; ti(static_cast&lt;ThreadInfoMemberFn&lt;T, P, F&gt;*&gt;(data));<br />
<br />		return ((ti-&gt;obj)-&gt;*(ti-&gt;function))(ti-&gt;data);<br />
<br />	}<br />
<br />	catch(&#8230;)<br />
<br />	{<br />
<br />		return 0;<br />
<br />	}<br />
<br />}</p>
<p>template &lt;typename T, typename P, typename P2&gt;<br />
<br />HANDLE CreateThread(SECURITY_ATTRIBUTES* sa, SIZE_T stackSize, T* obj, DWORD(T::* func)(P), P2 data, DWORD flags, DWORD* tid)<br />
<br />{<br />
<br />	typedef DWORD(T::* F)(P);<br />
<br />	std::auto_ptr&lt;ThreadInfoMemberFn&lt;T, P, F&gt; &gt; ti(new ThreadInfoMemberFn&lt;T, P, F&gt;(obj, func, data));<br />
<br />	HANDLE rv(::CreateThread(sa, stackSize, ThreadDispatchMemberFn&lt;T, P, F&gt;, static_cast&lt;void*&gt;(ti.get()), flags, tid));<br />
<br />	if(NULL != rv) { ti.release(); }<br />
<br />	return rv;<br />
<br />}<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196523">
				<div id="div-comment-196523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403#comment-196523">
			July 20, 2004 at 9:25 am</a>		</div>

		<p>ATZ Man: Whenver a thread exits, the DllMain function of each DLL in the process is called, allowing it to clean up thread-specific resources. _beginthread(ex) is a kluge to make this happen if you link the C/C++ run-time as a static library. You don&#8217;t need to use it if you use a DLL version of the run-time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196773">
				<div id="div-comment-196773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403#comment-196773">
			July 21, 2004 at 7:18 am</a>		</div>

		<p>The problem with making RealThreadProc virtual is that it means that each class can have only one thread procedure. (What if you want two background threads? What do you call the second one?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196743">
				<div id="div-comment-196743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403#comment-196743">
			July 21, 2004 at 4:59 am</a>		</div>

		<p>Why not make the RealThreadProc() simply a virtual memeber?<br />
<br />In this case all template issues are gone. You can derive from the base class, override RealThreadProc() and you can use your own construct to initialize the instance with all the arguments you need.</p>
<p>In any case, whether one uses a template or any other class to create a thread, one should make sure class didn&#8217;t went out of scope before thread is terminated.</p>
<p>In fact none of the above didn&#8217;t make my life easier.. why would I need it then at all?</p>
<p>I think most reliable solution is a template that would create a *copy* of my class in the *new* thread and delete it upon termination &#8211; something like:</p>
<p>class CMyClass : public CThread<br />
<br />{<br />
<br />public: virtual long ThreadEntryPoint(void);<br />
<br />}</p>
<p>TCreateThread&lt;CMyClass&gt; thread = CMyClass(bla,bla);</p>
<p>or if you don&#8217;t like things in contructors</p>
<p>TCreateThread&lt;CMyClass&gt; thread;<br />
<br />thread.CreateNewThread(CMyClass(bla,bla));</p>
<p>in this case<br />
<br />a) I don&#8217;t have to worry that object could go out of scope before thread terminates<br />
<br />b) it is typesafe<br />
<br />c) I am not limited to one argument only</p>
<p>Of course TCreateThread&lt;&gt; will have to be implemented in a way that will make sure that CreateNewThread() won&#8217;t return control before newly created thread is created, started and has created copy of the argument, but this isn&#8217;t hard to do using one mutex and one event</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-197323">
				<div id="div-comment-197323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mschaef</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403#comment-197323">
			July 22, 2004 at 10:40 am</a>		</div>

		<p>&quot;I know we have a range of things, from Lisp at one end where everything&#8217;s some sort of list, and you don&#8217;t need to get involved in the nitty gritty of how it actually works, via C &quot;</p>
<p>Not to be too pedantic, but modern Lisp&#8217;s (&lt;20 years old, let&#8217;s say) have a fairly diverse set of capabilities. While they do have support for lists, they also typically have elaborate support for vectors/arrays, hash tables, structures, and objects. Compilers matching the performance of C aren&#8217;t atypical either, but they&#8217;re typically more interactive than what you&#8217;re used to. It&#8217;s possible to define a function in one interactive command, compile it in the next, and disassemble it (to native x86 machine code, for example) in the third line.</p>
<p>The net result of this is that it&#8217;s easy to think in terms of lists and interpreted code while doing prototyping/design, and switch to faster data structures and native compiled code for the speed critical stuff.</p>
<p>It&#8217;s also worth mentioning that many Lisp implementations are written entirely in Lisp and compiled to native code by themselves (see Scheme48 and PreScheme), it&#8217;s not below the &quot;nitty gritty&quot;. A lot of the same things can be said of Smalltalk too&#8230; squeak is almost entirely written in Smallwalk, IIRC.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-197783">
				<div id="div-comment-197783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403#comment-197783">
			July 23, 2004 at 11:58 am</a>		</div>

		<p>I&#8217;m surprised no one has mentioned Hickey&#8217;s &quot;Callbacks in C++ Using Template Functions.&quot;  I originally found it in C++ Gems years ago.  Although a bit dense and difficult to deal with it&#8217;s come in quite handy.  Here&#8217;s one reference to it: <a target="_new" href="http://www.tutok.sk/fastgl/callback.html" rel="nofollow">http://www.tutok.sk/fastgl/callback.html</a><br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-197793">
				<div id="div-comment-197793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403#comment-197793">
			July 23, 2004 at 11:59 am</a>		</div>

		<p>I&#8217;m surprised no one has mentioned Hickey&#8217;s &quot;Callbacks in C++ Using Template Functions.&quot;  I originally found it in C++ Gems years ago.  Although a bit dense and difficult to deal with it&#8217;s come in quite handy.  Here&#8217;s one reference to it: <a target="_new" href="http://www.tutok.sk/fastgl/callback.html" rel="nofollow">http://www.tutok.sk/fastgl/callback.html</a><br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-200173">
				<div id="div-comment-200173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403#comment-200173">
			July 31, 2004 at 6:25 am</a>		</div>

		<p>I can&#8217;t retrieve pointer to ThreadProc&lt;&gt;<br />
<br />Any ideas?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-200183">
				<div id="div-comment-200183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040719-00/?p=38403#comment-200183">
			July 31, 2004 at 8:27 am</a>		</div>

		<p>I fixed some obvious typos (wrong return value). The point was to use the template; I figured my readers would be smart enough to fill in the gaps.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

