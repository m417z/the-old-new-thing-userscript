<html>
<head>
<title>Why doesn't the window manager have a SetClipboardDataEx helper function?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why doesn&#8217;t the window manager have a SetClipboardDataEx helper function?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 25, 2010 / year-entry #27</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>29</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Jonathan Wilson asks why the clipboard APIs still require GlobalAlloc and friends. Why is there not a SetClipboardDataEx or something that does what SetClipboardData does but without needing to call GlobalAlloc? Okay, here's your function: HANDLE SetClipboardDataEx(UINT uFormat, void *pvData, DWORD cbData) { if (uFormat == CF_BITMAP || uFormat == CF_DSPBITMAP || uFormat == CF_PALETTE...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Jonathan Wilson asks
<a HREF="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#760970">
why the clipboard APIs still require GlobalAlloc and friends</a>.
Why is there not a <code>SetClipboardDataEx</code>
or something that does what <code>SetClipboardData</code>
does but without needing to call <code>GlobalAlloc</code>?
</p>
<p>
Okay, here's your function:
</p>
<pre>
HANDLE SetClipboardDataEx(UINT uFormat, void *pvData, DWORD cbData)
{
    if (uFormat == CF_BITMAP ||
        uFormat == CF_DSPBITMAP ||
        uFormat == CF_PALETTE ||
        uFormat == CF_METAFILEPICT ||
        uFormat == CF_DSPMETAFILEPICT ||
        uFormat == CF_ENHMETAFILE ||
        uFormat == CF_DSPENHMETAFILE ||
        uFormat == CF_OWNERDISPLAY) {
        return NULL; // these are not HGLOBAL format
    }

    HANDLE hRc = NULL;
    HGLOBAL hglob = GlobalAlloc(GMEM_MOVEABLE | GMEM_SHARE | GMEM_ZEROINIT,
                                cbData);
    if (hglob) {
        void *pvGlob = GlobalLock(hglob);
        if (pvGlob) {
            CopyMemory(pvGlob, pvData, cbData);
            GlobalUnlock(hglob);
            hRc = SetClipboardData(uFormat, hglob);
        }
        if (!hRc) {
            GlobalFree(hglob);
        }
    }
    return hRc;
}
</pre>
<p>
Whoop-dee-doo.
</p>
<p>
Historically,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2010/01/21/9951193.aspx">
Windows doesn't go out of its way to include functions like this
because you can easily write them yourself</a>,
or you can at least find a framework library
that did it for you.
Windows focused on doing the things that only Windows could do,
providing you the building blocks with which you can create
your own programs.
</p>
<p>
Besides, the classic clipboard is so old-school.
The OLE clipboard provides a much richer interface,
where you can
generate data dynamically</a>
(for example
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/03/19/8080215.aspx">
as a stream</a>)
and expose it in formats other than just a chunk of bytes.
Since <code>SetClipboardData</code> is old-school,
if the window manager folks had written a function like
<code>SetClipboardDataEx</code>,
people would instead have asked the not unreasonable question,
"Why did you bother to write a function that provides no essential new
functionality to an old interface that was supplanted over a decade ago?"</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-805313">
				<div id="div-comment-805313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805313">
			January 25, 2010 at 7:23 am</a>		</div>

		<p>While I understand where you are coming from, I think your justification is weak since there are examples to the contrary. &nbsp;For example, CoTaskMemAlloc() is simply a wrapper around the following code (probably improperly formatted):</p>
<p>&lt;pre&gt;</p>
<p>LPVOID CoTaskMemAlloc(DWORD dwSize)</p>
<p>{</p>
<p>&nbsp; &nbsp;IMalloc *pMalloc;</p>
<p>&nbsp; &nbsp;LPVOID retval = NULL;</p>
<p>&nbsp; &nbsp;if (SUCCEEDED(CoGetMalloc(1, pMalloc)))</p>
<p>&nbsp; &nbsp;{</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;retval = pMalloc-&gt;Alloc(dwSize);</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;pMalloc-&gt;Release();</p>
<p>&nbsp; &nbsp;}</p>
<p>&nbsp; &nbsp;return retval;</p>
<p>}</p>
<p>&lt;/pre&gt;</p>
<p>There are any number of common tasks that could stand to have convenience wrappers, but I can understand the reluctance to create them.</p>
<div class=post>[<i>The existence of exceptions does not invalidate the basic principle, especially since different teams perform each calculation from <a href="http://blogs.msdn.com/ericgu/archive/2004/01/12/57985.aspx" rel="nofollow">minus 100 points</a> differently, at different points in time, with different priorities, and under different conditions. SetClipboardData is a very old function, and the calculus back in the old days (hence the word &#8220;Historically&#8221;) was biased strongly against convenience functions. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805323">
				<div id="div-comment-805323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.parkscomputing.com/' rel='external nofollow' class='url'>Paul M. Parks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805323">
			January 25, 2010 at 7:30 am</a>		</div>

		<p>I used to drop in convenience functions like this into the libraries that I developed until I started having to support them for a considerable number of developers. Every API created and documented is another API that has to be maintained and tested. Now I only put in the bare minimum of what the library has to support and release sample applications to show how to call the APIs in a more &quot;convenient&quot; manner. If I have to go through all this for the stuff I do, I can imagine it&#8217;s orders of magnitude more complex for MS to create, test, release, document, and maintain a new API function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805333">
				<div id="div-comment-805333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.textexpanderforwindows.com/' rel='external nofollow' class='url'>P.a.t.r.i.c.k.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805333">
			January 25, 2010 at 8:26 am</a>		</div>

		<p>Funny, I was just dealing with the clipboard a few days ago, and was wondering the same thing.</p>
<p>I will say, not having a &quot;helper&quot; function means if you&#8217;ve never dealt with the clipboard before, you have to do some research to figure out all of the necessary functions you actually need to use. But it&#8217;s not too difficult I guess.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805343">
				<div id="div-comment-805343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jlechem</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805343">
			January 25, 2010 at 8:32 am</a>		</div>

		<p>I am a bit surprised by Ray&#8217;s response here, it seems a bit dismissive to me. &nbsp;Not his usual style, but I digress. &nbsp;After coding this kind of thing multiple times it&#8217;s not that hard to write. &nbsp;However I think the burden should be on the API not the developer to handle clipboard functionality at that level. &nbsp;I guess they decided .net developers were too dumb for that kind of code and actually created a class called Clipboard that handles all the stuff for you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805353">
				<div id="div-comment-805353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805353">
			January 25, 2010 at 8:36 am</a>		</div>

		<p>It might make sense, though, to have a few helper functions like SetClipboardText(W/A), GetClipboardText(W/A), to prevent those lazy programmers from screwing up the whole desktop by forgetting to close the clipboard. Those who neet to set more complex data types, are on their own.</p>
<p>And it may make sense to provide some recovery from misbehaving applications. For example, if an app is holding the clipboard open for some predefined time, and another app is opening it, the clipboard should be closed for the first (misbehaving) app.</p>
<div class=post>[<i>Historically, programmers were assumed <a href="http://blogs.msdn.com/oldnewthing/archive/2005/10/21/483438.aspx" rel="nofollow">not to be lazy</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805363">
				<div id="div-comment-805363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lorenzo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805363">
			January 25, 2010 at 8:53 am</a>		</div>

		<p>Alexandre, don&#8217;t forget that back in the old days, programmers were assumed to be smart and hardworking. And such a programmer would never forget to close the clipboard!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805373">
				<div id="div-comment-805373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805373">
			January 25, 2010 at 9:17 am</a>		</div>

		<blockquote><p>
  &gt; &nbsp;if (SUCCEEDED(CoGetMalloc(1, pMalloc)))
</p></blockquote>
<p>You missed WINOLEAPI in the function prototype and &amp; before the pMalloc.</p>
<p>For every &quot;&#8230;.Ex()&quot; function you&#8217;ll have somebody demanding &quot;&#8230;..ExEx()&quot;.</p>
<p>The mantra &quot;do a few things and do them well&quot; has been replaced by &quot;I want it all and I want it now&quot;. Parents are familiar with that attitude.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805383">
				<div id="div-comment-805383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805383">
			January 25, 2010 at 9:40 am</a>		</div>

		<p>Raymond, Lorenzo,</p>
<p>Yep, the programmers read the docs, always check the buffers for overflow, check the allocations for success, don&#8217;t save files to protected locations, test the applications to work under a limited user, don&#8217;t overwrite system DLLs, test the apps under checked OS build, don&#8217;t use undocumented APIs. I just don&#8217;t understand why Raymond had to work so hard to make compatibility shims.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805393">
				<div id="div-comment-805393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.parkscomputing.com/' rel='external nofollow' class='url'>Paul M. Parks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805393">
			January 25, 2010 at 10:06 am</a>		</div>

		<p>@Alexandre: Of course programmers screw up. I&#8217;d still prefer MS didn&#8217;t spend development cycles protecting lousy programmers from themselves. I&#8217;ve run into too many developers that have an attitude of, &quot;Well, the OS/library/runtime/GC will clean up after me.&quot; Maybe I&#8217;m old school. Maybe that&#8217;s why .NET and Java give me the heebee-jeebees. There just need to be fewer lazy programmers in the world, not more.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805403">
				<div id="div-comment-805403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805403">
			January 25, 2010 at 10:20 am</a>		</div>

		<blockquote><p>
  &gt;&gt; &nbsp;no essential new functionality to an old interface that was supplanted over a decade ago?
</p></blockquote>
<p>Because this interface is still widely used. It is much easier to put essential data into clipboard using &quot;old school&quot; API. Newer API provides richer functionality but all those IDataSource and stuff are probably very flexible, very abstract but really pain in the A to use.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805413">
				<div id="div-comment-805413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805413">
			January 25, 2010 at 10:33 am</a>		</div>

		<p>My own implementation was very similar. I did not include the format check in the beginning, but took care to restore to the last error code after GlobalUnlock (which calls GetLastError even on success):</p>
<p>err = GetLastError();</p>
<p>GlobalUnlock(hglob);</p>
<p>SetLastError(err);</p>
<p>In general, I think that it is a good idea to have simple helper functions and wrappers in the API. If there is one officially supported version, there is less room for implementation errors. I find functions such as AppendMenu useful even if they exist only for backwards compatibility (and InsertMenuItem exists).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805423">
				<div id="div-comment-805423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805423">
			January 25, 2010 at 10:38 am</a>		</div>

		<p>@Paul: &quot;I&#8217;d still prefer MS didn&#8217;t spend development cycles protecting lousy programmers from themselves.&quot;</p>
<p>That&#8217;s &#8217;cause you&#8217;re looking at it the wrong way. Instead, look at it as protecting users from lousy programmers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805433">
				<div id="div-comment-805433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.parkscomputing.com/' rel='external nofollow' class='url'>Paul M. Parks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805433">
			January 25, 2010 at 11:17 am</a>		</div>

		<p>@Evan: Well, there&#8217;s another solution to lousy programmers that involves providing a steady stream of new trainee baristas for Starbucks, but that probably wouldn&#8217;t be too popular.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805443">
				<div id="div-comment-805443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805443">
			January 25, 2010 at 11:20 am</a>		</div>

		<p>I for one appreciate the convenience in such helper functions, like RegSetKeyValue (introduced in Vista). In my experience, the choice is 1 function properly implemented in the library, or 100 functions implemented by 100 different library users, each borken in a slightly different way.</p>
<p>The .NET framework, specifically in 2.0, does include an astounding wealth of such functions, and is a joy to program against, compared to Win32.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805453">
				<div id="div-comment-805453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805453">
			January 25, 2010 at 12:34 pm</a>		</div>

		<blockquote><p>
  &gt; In general, I think that it is a good idea to have simple helper functions and wrappers in the API. If there is one officially supported version, there is less room for implementation errors.
</p></blockquote>
<p>Because now have two problems instead of one(TM). The APIs, the helpers and wrappers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805463">
				<div id="div-comment-805463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805463">
			January 25, 2010 at 12:59 pm</a>		</div>

		<p>@Porter, Paul,</p>
<p>Then, why have that dialog template stuff and CreateDialog at all. And resource API. Let programmers figure that out, let them just call CreateWindow for all those buttons and stuff. And while we&#8217;re at it, why have those controls. You know why? Because people will get it wrong. I&#8217;ve seen those custom buttons, and they already do wrong, as simple as they are.</p>
<p>You think that reading/writing a string or anything from the registry is simple? Wish so. Even MS elite &#8211; kernel programmers &#8211; can get it wrong. I remember USB stack crashing with BSOD when a registry value was not a single REG_BINARY byte, but a REG_DWORD instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805473">
				<div id="div-comment-805473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805473">
			January 25, 2010 at 2:01 pm</a>		</div>

		<p>&quot;Historically, Windows doesn&#8217;t go out of its way to include functions like this because you can easily write them yourself, or you can at least find a framework library that did it for you.&quot;</p>
<p>I think we&#8217;ve finally discovered the Second Step!</p>
<ol>
<li>
<p>Come across programming problem.</p>
</li>
<li>
<p>Ask question on Raymond&#8217;s blog and work on something else for about 3 years while waiting for the answer.</p>
</li>
<li>
<p>Profit!</p>
</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805483">
				<div id="div-comment-805483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805483">
			January 25, 2010 at 2:08 pm</a>		</div>

		<p>Rather than just thinking of &quot;loads of APIs&quot;, think in terms of layered APIs. Think of it in terms of a protocol stack. The lower ones belong in USER32.DLL, etc the upper ones belong in helper DLLs and libraries, and even in the development systems, not in the core DLLs.</p>
<p>Consider the great unwinding currently taking place of trying to take the windows out of windows. Because of the APIs that were gaily thrown into the core DLLs, it has made it so much harder to produce a version of windows that can run with only a command line prompt.</p>
<p>What am I talking about? Think single source for mobile systems, desktop tops, laptops, slates, high end servers, phones, embedded systems etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805493">
				<div id="div-comment-805493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.parkscomputing.com/' rel='external nofollow' class='url'>Paul M. Parks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805493">
			January 25, 2010 at 2:35 pm</a>		</div>

		<p>@Alexandre: Nice reductio ad absurdum, but the idea is to make the API as simple as possible, but no simpler. Sure, we could all code in assembly language and make direct calls into the kernel, but nobody wants to do that. On the other hand, an API that tried to do every little thing would never be finished. It&#8217;s a matter of balance. I&#8217;m for smaller surface area.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805523">
				<div id="div-comment-805523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805523">
			January 25, 2010 at 7:02 pm</a>		</div>

		<p>The funny thing about the whole &quot;add helpers because people get things wrong&quot; opinion is that I&#8217;ve seen people get it wrong even with helpers.</p>
<p>Having helper functions does not stop people getting things wrong, the same as how not having helpers means people don&#8217;t get it right.</p>
<p>When you see people do things like mess up the console access in a .net application, or mess up other supposidly easy things in a .net application that says to me that it doesn&#8217;t matter whether the helpers are there or not since someone somewhere will get it wrong. It will be the same with these helper functions, they wouldn&#8217;t protect against the people who really want to get it wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805533">
				<div id="div-comment-805533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">reduce bloat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805533">
			January 25, 2010 at 7:09 pm</a>		</div>

		<p>20 years ago the right approach was a minimal OS. Now, with multigigabyte OS, 30 lines of code isn&#8217;t that much at all.</p>
<p>In total, there will be less code, less bloat, and less bugs because all applications doesn&#8217;t need to implement common functions themself.</p>
<p>Raymonds excuses are lousy as usual.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805543">
				<div id="div-comment-805543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lawrence</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805543">
			January 25, 2010 at 9:00 pm</a>		</div>

		<p>For someone who entered their name as &quot;reduce bloat&quot;, your suggestion that Windows should provide additional functions to replicate existing functions in a marginally more convenient way is rather&#8230; interesting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805553">
				<div id="div-comment-805553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.henke37.cjb.net/' rel='external nofollow' class='url'>Henke37</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805553">
			January 25, 2010 at 10:33 pm</a>		</div>

		<p>There is also another reason, some people might optimize by using domain specific knowledge and thusly eliminating work. While I would be surprised if setting the clipboard was a performance issue, it works as an example. Someone could just allocate the memory for the string using GlobalAlloc to begin with, one memory copy less to worry about.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805513">
				<div id="div-comment-805513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805513">
			January 25, 2010 at 2:48 pm</a>		</div>

		<p>CoTaskMemAlloc() does *a lot* more than this.</p>
<p>look up CoRegisterMallocSpy(), and that is just the start</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805573">
				<div id="div-comment-805573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805573">
			January 26, 2010 at 3:22 am</a>		</div>

		<p>The OLE interface is all well and good until some third-party DLL injects itself into your process and calls CoInitializeEx with incompatible parameters, causing OleInitialize to fail.</p>
<p>It also defaults to delayed rendering, which is not useful if your app crashes or is suspended in a debugger (particularly the one in which you want to paste. Oops!)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805603">
				<div id="div-comment-805603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave Harris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805603">
			January 26, 2010 at 8:32 am</a>		</div>

		<p>Jonathan &#8211; &quot;I for one appreciate the convenience in such helper functions, like RegSetKeyValue (introduced in Vista).&quot;</p>
<p>But they belong with the app. If they are part of the O/S that is not installed with the app, the app can&#8217;t rely on them being there. If I have to detect whether I&#8217;m running on an O/S older than Vista, and then code my own implementation of RegSetKeyValue for that case, I&#8217;m better off using my own implementation always. Any new O/S-provided function has to provide a lot of value to be worth the compatibility hassles.</p>
<p>If the function is provided by a library I statically link to, or install myself with my app, then the barrier to use is much lower.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805643">
				<div id="div-comment-805643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805643">
			January 26, 2010 at 9:35 am</a>		</div>

		<blockquote><p>
  &gt;The OLE interface is all well and good until some third-party DLL injects itself into your process and calls CoInitializeEx with incompatible parameters, causing OleInitialize to fail.
</p></blockquote>
<p>If it is your process then call OleInitialize in your main. Problem solved. If you are a DLL, then respect the apartment you are running in.</p>
<p>If you are a DLL and there is no current apartment you have the freedom of choice of what apartment you want for the small scope of your function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-805733">
				<div id="div-comment-805733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805733">
			January 26, 2010 at 11:36 am</a>		</div>

		<p>@Paul</p>
<p>&quot;Maybe that&#8217;s why .NET and Java give me the heebee-jeebees. There just need to be fewer lazy programmers in the world, not more.&quot;</p>
<p>It&#8217;s not laziness to use .NET or Java it&#8217;s smart pragmatism,using the right tool for the job and a preference for providing &nbsp;business value quicker than you could when writing in Win32. Go ahead and convince yourself that writing everything in win32 makes you superior while you introduce buffer and integer overflow vulnerabilities into your app while the rest of us &quot;lazy&quot; programmers have the VM warn us of these errors instead. :P</p>
<p>You&#8217;re confusing helper functions and convenience as the problem when in reality it&#8217;s incompetence that causes problems regardless of what tool is used (Win32,.NET,Java).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-805853">
				<div id="div-comment-805853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul M. Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100125-00/?p=15183#comment-805853">
			January 27, 2010 at 6:32 am</a>		</div>

		<p>@ton: I use .NET and Java. They just give me the heebie-jeebies. C gives me the heebie-jeebies, too, albeit for different reasons, but I still use it where necessary. No language or platform is a panacea, and none can protect you from bad programmers.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

