<html>
<head>
<title>A question about avoiding page faults the first time newly-allocated memory is accessed</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A question about avoiding page faults the first time newly-allocated memory is accessed</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 12, 2017 / year-entry #114</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170512-00/?p=96146</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">What are you trying to optimize?</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer had a question about memory allocation.
</p>
<blockquote CLASS="q">
<p>
When allocating memory with <code>malloc</code>
and <code>new</code>,
the memory is not loaded into the physical memory immediately.
Instead, the memory is placed in RAM
only when the application writes to the memory address.
The process of moving pages into physical memory incurs page faults.
</p>
<p>
In order to avoid page faults,
we use
<code>Virtual&shy;Lock</code>
to lock all allocated memory into physical memory
immediately after allocating it.
According to MSDN,
"Locking pages into memory may degrade the performance of the
system by reducing the available RAM and
forcing the system to swap out other critical pages to the paging file."
</p>
<p>
Assume that we have plenty of free RAM on the machine (say, 64GB).
Is there any option to configure Windows to load the memory into
RAM an allocation time and to swap it into the disk
only when it runs out of memory?
</p>
</blockquote>
<p>
The customer says that they have "plenty of free RAM",
which I interpret to mean "so much RAM that there will never
be any paging."
But then the customer says,
"when it runs out of memory",
which contradicts the previous statement that they have
"plenty of RAM."
</p>
<p>
So let's just ignore the "plenty of RAM" part of the statement.
It is confusing and doesn't add to the discussion.
</p>
<p>
Assuming there is free memory available,
the initial page fault will grab a page of free memory and zero it out.
This is no slower than grabbing a page of free memory and zeroing it out
at allocation time.
All you did was change the time the work takes place;
the total amount of work remains the same.
</p>
<p>
In other words,
you will gain no performance increase by doing this.
Just allocate the memory normally and don't do anything special
to "force" it into memory.
Forcing it into memory up front means that some other memory may
need to be paged out in order to satisfy your immediate demand,
and then when that other page is needed, it will need to be
paged back in.
The system as a whole will run slower than if you waited until
the memory was accessed.
</p>
<p>
And if the page that you prematurely wrote to needs to get evicted
before you get around to using it for real,
then the system will discard it
(assuming
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20161109-00/?p=94675">
it's still all zeroes</a>),
and you're back where you started.
</p>
<p>
But what is the customer's real problem that
that makes them think that preloading zero pages is going to help?
I had a few theories.
</p>
<p>
"We think that page faults are bad and are doing
everything we can to get rid of them."
</p>
<p>
The customer is not distinguishing between hard faults and
soft faults.
Hard faults are bad. Soft faults not so much.
The page faults you are eliminating here are soft faults.
</p>
<p>
"We have carefully profiled our program and
have determined that touching at allocation
will reduce performance fluctuations during processing,
even if it comes at a cost in overall performance.
We prefer predictability over throughput."
</p>
<p>
This is a valid concern.
</p>
<p>
"We saw the function
<code>Virtual&shy;Lock</code> and said,
'Hey, that sounds cool! How do I get a piece of that action?'"
</p>
<p>
This is a case of finding a hammer and looking for nails.
</p>
<p>
The customer liaison replied that the customer agreed that the
total time is the same,
but they want to do it at allocation time in order to avoid taking
page faults during processing.
</p>
<p>
If it is indeed the case that the customer is sophisticated enough
to be able to measure the additional cost in terms of elapsed time
(as opposed to simply counting page faults because
<i>page faults are bad mmkay?</i>),
then sure, go ahead and touch all the pages at allocation time.
There is no built-in setting to do this automatically, though.
You'll just have to do it yourself.
</p>
<p>
It's possible that the customer is sophisticated enough to measure this,
but the way they worded the question suggests that they simply didn't
understand how the operating system manages resources.
Sometimes a very advanced question is hard to distinguish from a very
na&iuml;ve question.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-mzzt even thread-even depth-1 parent" id="comment-1295867">
				<div id="div-comment-1295867" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/The+MAZZTer' rel='external nofollow' class='url'>The MAZZTer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170512-00/?p=96146#comment-1295867">
			May 12, 2017 at 7:16 am</a>		</div>

		<p>Yeah it sounds like the customer assumes that even if a system has infinite RAM, page faults would still happen for some reason. The best solution here is to let the OS do its job and for goodness sakes don&#8217;t turn off the page file to stop paging. That just exchanges page faults for out of memory errors which likely will crash most apps or at least put them into undefined states.</p>
<p>Even if you have enough RAM, the difference between a system with a page file and one without is the one with a page file has a safety buffer in case for some reason commit size (that&#8217;s the term, right?) does exceed RAM, whereas the one without starts crashing apps.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1295875">
				<div id="div-comment-1295875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Piotr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170512-00/?p=96146#comment-1295875">
			May 12, 2017 at 7:49 am</a>		</div>

		<p>That &#8220;some reason&#8221; might be hipervisor&#8217;s baloon driver, which simulates memory pressure specifically to force paging to reserve some memory for other machines on the same hardware.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even depth-2 parent" id="comment-1295945">
				<div id="div-comment-1295945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170512-00/?p=96146#comment-1295945">
			May 12, 2017 at 2:08 pm</a>		</div>

		<p>&gt;Yeah it sounds like the customer assumes that even if a system has infinite RAM, page faults would still happen for some reason</p>
<p>Windows just LOVES to discard pages if it thinks they&#8217;ve not been touched for a while, in favor of file cache, even though those files will not ever be opened any soon. For example, if it runs antivirus scan or indexing (those guys like seriously haven&#8217;t head of FILE_FLAG_NO_BUFFERING). Like, you have a box with enough RAM so its commit size never exceeds it, and yet, when you come back to it after a while, even the Explorer is paged out.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1296005">
				<div id="div-comment-1296005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170512-00/?p=96146#comment-1296005">
			May 13, 2017 at 3:08 am</a>		</div>

		<p>+1.  And the further you go back in Windows versions, the worse it gets,  Under NT 4 (or 3.51) you could cause the OS to page itself to death by copying a single file as large as or larger than physical RAM, it would take more and more memory to cache the file contents until eventually it was thrashing solidly.  I&#8217;ve run Win7 and Win8 boxes without a swapfile because I&#8217;ve never come remotely close to using more than a fraction of the total RAM, but there were still just enough corner cases that caused problems that I eventually created a tiny pagefile that didn&#8217;t serve any useful purpose except provide Windows something to swap arbitrary pages to, not because it needed to but because, as you say, it just likes to page stuff out for no good reason.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1296116">
				<div id="div-comment-1296116" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Cohn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170512-00/?p=96146#comment-1296116">
			May 15, 2017 at 8:37 am</a>		</div>

		<p>Once (was it Windows 3.11?) it was possible to configure the system to run w/o page file. But this switched Windows onto a special mode which slowed it down significantly, because in order to keep as much RAM as possible available for the applications, it was reloading all system DLLs.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mngoldeneagle odd alt depth-5" id="comment-1296295">
				<div id="div-comment-1296295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170512-00/?p=96146#comment-1296295">
			May 16, 2017 at 11:39 am</a>		</div>

		<p>You could always configure Windows to run without a pagefile.  But it does sound likely that Windows 3.x/95 had special rules for how to behave when the pagefile was disabled.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1295895">
				<div id="div-comment-1295895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170512-00/?p=96146#comment-1295895">
			May 12, 2017 at 8:17 am</a>		</div>

		<p>I remember when optimizing away soft page faults paid for itself. Today, not so much. I&#8217;m kind of surprised there&#8217;s no good call that says commit this RAM (several pages) immediately so the code only pays for one context switch to get to kernel mode rather than one per page.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1295976">
				<div id="div-comment-1295976" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170512-00/?p=96146#comment-1295976">
			May 12, 2017 at 3:59 pm</a>		</div>

		<p>If page-related context switches really are killing you, you might as well just go to large pages. A one-time shortcut that only works on the first commit is pretty tiny in most applications, compared to the eventual cost of actually using that memory.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude even thread-even depth-1" id="comment-1295915">
				<div id="div-comment-1295915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170512-00/?p=96146#comment-1295915">
			May 12, 2017 at 9:27 am</a>		</div>

		<p>In my experience the vast majority of (younger) developers even for native code don&#8217;t fully understand how paging works from an OS/Kernel perspective. To be fair this included me until I made it a point to find out and understand better because I wanted to understand context switches. They understand the basic concept of paged memory usually; but not the vast array of resources the OS uses to ensure that memory can seem infinite even before swapping out to disk.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1295925">
				<div id="div-comment-1295925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170512-00/?p=96146#comment-1295925">
			May 12, 2017 at 10:21 am</a>		</div>

		<p>Charitable assumption: The customer is a relatively new indie game studio.  They want to minimize the number of page faults that happen while the game is being played, even if that means taking more faults during the loading screens.</p>
<p>I say &#8220;relatively new&#8221; because the established players all know how to do this already.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1295935">
				<div id="div-comment-1295935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170512-00/?p=96146#comment-1295935">
			May 12, 2017 at 10:36 am</a>		</div>

		<p>I remember a game (Windows 95 time frame IIRC) touching its first allocated&#8230; was it 32 MB (which was quite a bit back then) to make sure it was paged in and immediately available (or more likely to make sure anything else not needed was paged _out_, so the game had it&#8217;s VA in RAM). This was obviously due to the real-time demand to avoid later jerkyness.</p>
<p>But to do something like that today? Even for a game it&#8217;d almost be silly to do it. It&#8217;d have to be some _pretty_ specific requirements in place to even attempt it.</p>
<p>I&#8217;m with Raymond here; it smells like the customer in error had equated &#8220;paging&#8221;with &#8220;swapping&#8221;, without knowing there are soft vs. hard faults.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joe_woodbury odd alt thread-odd thread-alt depth-1" id="comment-1295937">
				<div id="div-comment-1295937" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/JoeWoodbury' rel='external nofollow' class='url'>JoeWoodbury</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170512-00/?p=96146#comment-1295937">
			May 12, 2017 at 10:42 am</a>		</div>

		<p>Before heading down the rabbit hole of trying to be too clever, first check your algorithms and how you are using the data. In other words, if every class instance in a collection has it&#8217;s data scattered all over the memory space, being clever with the base collection may not really buy anything.</p>
<p>I&#8217;m also reminded of &#8220;clever&#8221; code I wrote 16 years ago, leveraging something in NT 4.0. I later realized that all I&#8217;d done is shift the burden from one area to another without actually improving anything. Worse, I&#8217;d ended up making the OS do the easy part while my code was doing the hard part, which also made the code harder to maintain.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1295986">
				<div id="div-comment-1295986" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170512-00/?p=96146#comment-1295986">
			May 12, 2017 at 4:32 pm</a>		</div>

		<p>There&#8217;s an interesting investigation of the costs of memory allocation / deletion and soft page faults at <a href="https://randomascii.wordpress.com/2014/12/10/hidden-costs-of-memory-allocation/" rel="nofollow">https://randomascii.wordpress.com/2014/12/10/hidden-costs-of-memory-allocation/</a></p>
<p>For example, freeing 32MB of memory that has been written to is several orders of magnitude slower than freeing it without writing to it.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1296015">
				<div id="div-comment-1296015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rwg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170512-00/?p=96146#comment-1296015">
			May 13, 2017 at 12:51 pm</a>		</div>

		<p>But, is there possibly mileage in taking the page faults in another thread? </p>
<p>If you know that your application is going to come through that block of memory with a memory intensive but CPU light operation (perhaps copying a large block of memory) *and* you know this far enough in advance to make the idea feasible, then making the OS page the memory in while you are doing something else useful in prep for the memcopy sounds plausible. </p>
<p>Could be a job for &#8216;VirtualLockAsync&#8217; &#8211; if it existed&#8230; More likely custom code to touch every page in region from a thread pool thread or similar.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-3" id="comment-1296016">
				<div id="div-comment-1296016" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170512-00/?p=96146#comment-1296016">
			May 13, 2017 at 2:21 pm</a>		</div>

		<p>Oh, you mean <a href=https://blogs.msdn.microsoft.com/oldnewthing/20160225-00/?p=93091 rel="nofollow">PrefetchVirtualMemory</a>?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

