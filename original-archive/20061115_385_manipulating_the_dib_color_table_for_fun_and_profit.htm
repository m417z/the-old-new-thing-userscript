<html>
<head>
<title>Manipulating the DIB color table for fun and profit</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Manipulating the DIB color table for fun and profit</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 15, 2006 / year-entry #386</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20061115-01/?p=28993</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>17</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If you create a DIB section at 8bpp or lower, then it will come with a color table. Pixels in the bitmap are represented not by their red/blue/green component values, but are instead indices into the color table. For example, a 4bpp DIB section can have up to sixteen colors in its color table. Although...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
If you create a DIB section at 8bpp or lower,
then it will come with a color table.
Pixels in the bitmap are represented not by their red/blue/green
component values, but are instead indices into the color table.
For example, a 4bpp DIB section can have up to sixteen colors in
its color table.
</p>
<p>
Although displays that use 8bpp or lower are considered
woefully outdated nowadays,
bitmaps in that format are actually quite useful
precisely due to the fact that you can manipulate colors
in the bitmap, not by manipulating the bits themselves, but instead
by manipulating the color table.
</p>
<p>
Let's demonstrate this by taking the "Gone Fishing" bitmap
and converting it to grayscale.
Start with our
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/07/23/54576.aspx">
scratch program</a> and make these changes:
</p>
<pre>
<font COLOR=blue>HBITMAP g_hbm;</font>

BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
 <font COLOR=blue>// change path as appropriate
 g_hbm = (HBITMAP)LoadImage(g_hinst,
                      TEXT("C:\\Windows\\Gone Fishing.bmp"),
                      IMAGE_BITMAP, 0, 0,
                      LR_CREATEDIBSECTION | LR_LOADFROMFILE);
 if (g_hbm) {
  HDC hdc = CreateCompatibleDC(NULL);
  if (hdc) {
   HBITMAP hbmPrev = SelectBitmap(hdc, g_hbm);
   RGBQUAD rgbColors[256];
   UINT cColors = GetDIBColorTable(hdc, 0, 256, rgbColors);
   for (UINT iColor = 0; iColor &lt; cColors; iColor++) {
    BYTE b = (BYTE)((30 * rgbColors[iColor].rgbRed +
                     59 * rgbColors[iColor].rgbGreen +
                     11 * rgbColors[iColor].rgbBlue) / 100);
    rgbColors[iColor].rgbRed = b;
    rgbColors[iColor].rgbGreen = b;
    rgbColors[iColor].rgbBlue = b;
   }
   SetDIBColorTable(hdc, 0, cColors, rgbColors);
   SelectBitmap(hdc, hbmPrev);
   DeleteDC(hdc);
  }
 }</font>
 return TRUE;
}

void
OnDestroy(HWND hwnd)
{
 <font COLOR=blue>if (g_hbm) DeleteObject(g_hbm);</font>
 PostQuitMessage(0);
}

void
PaintContent(HWND hwnd, PAINTSTRUCT *pps)
{
 <font COLOR=blue>if (g_hbm) {
  HDC hdc = CreateCompatibleDC(NULL);
  if (hdc) {
   HBITMAP hbmPrev = SelectBitmap(hdc, g_hbm);
   BITMAP bm;
   if (GetObject(g_hbm, sizeof(bm), &amp;bm) == sizeof(bm)) {
    BitBlt(pps-&gt;hdc, 0, 0, bm.bmWidth, bm.bmHeight, hdc, 0, 0, SRCCOPY);
   }
   SelectBitmap(hdc, hbmPrev);
   DeleteDC(hdc);
  }
 }</font>
}
</pre>
<p>
The <code>OnDestroy</code> function merely cleans up, and the
<code>PaintContent</code> function simply draws the bitmap to
the window's client area.
All the work really happens in the <code>OnCreate</code> function.
</p>
<p>
First, we load the bitmap as a DIB section by passing the
<code>LR_CREATEDIBSECTION</code> flag.
This opens up the exciting world of DIB sections,
but all we care about is the color table.
That happens when we call <code>GetDIBColorTable</code>.
Since color tables are supported only up to 8bpp,
a color table of size 256 is big enough to handle the worst case.
Once we get the color table, we go through each color in it
and convert it to grayscale,
then set the new color table into the DIB section.
That's all.
</p>
<p>
Notice that we were able to change the color of every single
pixel in the bitmap by modifying just 1KB of data.
(Four bytes per <code>RGBQUAD</code> times a worst-case of
256 colors.)
Even if the bitmap were 1024&nbsp;&times;&nbsp;768,
modifying just the color table is enough to change all the colors
in the bitmap.
</p>
<p>
Manipulating the DIB color table is how flags like
<code>LR_LOADMAP3DCOLORS</code> and <code>LR_LOADTRANSPARENT</code>
do their work.
They don't walk the bitmap updating every single pixel;
instead, they just load the color table,
look for the colors they are interested in, and change
that entry in the color table.
This technique of editing the color table is
<!-- backref: raster ops -->
what I was referring to</a>
when I suggested you could use DIB sections to 
avoid the pesky DSna raster operation.
And it's faster, too.
But it only works on bitmaps that are 8bpp or lower.
</p>
<p>
You may also have noticed that <code>LR_LOADTRANSPARENT</code>
doesn't actually load a transparent bitmap.
Rather, it loads a bitmap that <strong>appears to be</strong>
transparent provided that you draw it against a window whose color
is <code>COLOR_WINDOW</code>.
Why this misleading name?
Because at the time this flag was invented,
GDI didn't support transparent bitmaps.
(And even today, it still doesn't really support then,
with the notable exception of functions like <code>AlphaBlend</code>.)
The best you could do was fake it.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-442813">
				<div id="div-comment-442813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061115-01/?p=28993#comment-442813">
			November 15, 2006 at 10:28 am</a>		</div>

		<p>Reminds me of the old 320x200x8bit VGA mode. &nbsp;Just under 64K of framebuffer RAM required, so even the woefully inadequate DOS programs could address the entire display using one segment (at segment:offset addresses A000:0000 through A000:ffff, IIRC). &nbsp;And it had the same 256-entry palette (though I think the palette was composed of three bytes per entry, not four).</p>
<p>And of course the same effects were possible; you could modify the palette instead of the display if you needed to do a global color change.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-442863">
				<div id="div-comment-442863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MichaelAbrashWasMyHero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061115-01/?p=28993#comment-442863">
			November 15, 2006 at 12:07 pm</a>		</div>

		<p>yeah remember how you used to program effects for games like this? &nbsp;Like making a waterfall look like it was flowing with palette rotation?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-442893">
				<div id="div-comment-442893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.benryves.com/' rel='external nofollow' class='url'>Ben Ryves</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061115-01/?p=28993#comment-442893">
			November 15, 2006 at 12:32 pm</a>		</div>

		<p>who could forget that nifty wormhole effect in FC&#8217;s Unreal? :)</p>
<p>It&#8217;s a shame that the .NET analogue (manipulating Bitmap.Palette) appears to be so horribly slow to retrieve and update; to the extent that it is significantly faster to just rewrite every pixel in a 32bpp Bitmap yourself than update the palette. (By significant, I mean reducing a &quot;100%&quot; CPU load and half the original framerate to about 10% &#8211; this is when called in a render loop).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-442903">
				<div id="div-comment-442903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061115-01/?p=28993#comment-442903">
			November 15, 2006 at 12:55 pm</a>		</div>

		<p>Where did the magic numbers come from for converting to greyscale? &nbsp;Is that a &#8220;standard&#8221; set of values, or something you came up with?</p>
<div class=post>[<i><a href="http://blogs.msdn.com/oldnewthing/archive/2007/07/30/4123208.aspx" rel="nofollow">Response</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-442923">
				<div id="div-comment-442923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://com2kid.wordpress.com' rel='external nofollow' class='url'>Devlin Bentley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061115-01/?p=28993#comment-442923">
			November 15, 2006 at 1:11 pm</a>		</div>

		<p>Yes, palette rotations rocked. &nbsp;:) &nbsp;I remember many old games that used them.</p>
<p>Hey, shouldn&#8217;t this post have been obvious to everybody? &nbsp;I am still in College and I knew this. :-D</p>
<p>256 colors an portray a lot of information. &nbsp;As long as the material is not photographic (or photorealistic), it is enough for most images. &nbsp;One reason that GIFs are still around!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-442953">
				<div id="div-comment-442953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.justresting.net/blog/' rel='external nofollow' class='url'>Mark</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061115-01/?p=28993#comment-442953">
			November 15, 2006 at 2:03 pm</a>		</div>

		<p>GregM: Check out <a rel="nofollow" target="_new" href="http://www.bersoft.com/bimagem/help/color_channels.htm" rel="nofollow">http://www.bersoft.com/bimagem/help/color_channels.htm</a></p>
<p>&quot;The coefficients 0.299, 0.587 and 0.114 properly computed luminance for monitors having phosphors that were contemporary at the introduction of NTSC television in 1953, however, these coefficients do not accurately compute luminance for contemporary monitors.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-442963">
				<div id="div-comment-442963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.morganalley.com' rel='external nofollow' class='url'>Dewi Morgan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061115-01/?p=28993#comment-442963">
			November 15, 2006 at 2:29 pm</a>		</div>

		<p>Well, it wasn&#8217;t just games (ultime underworld 2, clearly the best game of all time, used it for fires, magic effects, and other things).</p>
<p>Windows 95 used it too, on the loading screen. Remember the progress banner scrolly thingy at the bottom? Pallette rotated.</p>
<p>Which meant that you could create cool, slightly-animated loading screens :D</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-442973">
				<div id="div-comment-442973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061115-01/?p=28993#comment-442973">
			November 15, 2006 at 3:44 pm</a>		</div>

		<p>I remember all the cool kids had &quot;The Matrix&quot; animated Windows 95/98 load screens.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-443043">
				<div id="div-comment-443043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">required</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061115-01/?p=28993#comment-443043">
			November 16, 2006 at 2:11 am</a>		</div>

		<p>Raymond, you know very well that there are a bunch of unfortunates<br />
out there who just copy &amp; paste the first code they see off the<br />
&#8216;net, then you get the problems and write about how stupid they are<br />
some months down the road. Can&#8217;t you at least set a good example by not<br />
assuming that Windows lives in C:Windows, please?</p>
<div class="post">[<i>That is not the point of the article. I&#8217;m<br />
assuming you&#8217;re smart enough to know that I&#8217;m hard-coding for<br />
expository purposes, in the same way that I often ignore error checking<br />
for the same reason. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com000300008195987d odd alt thread-odd thread-alt depth-1" id="comment-443063">
				<div id="div-comment-443063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Spire' rel='external nofollow' class='url'>Spire</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061115-01/?p=28993#comment-443063">
			November 16, 2006 at 3:43 am</a>		</div>

		<p>BryanK: The stock 320&#215;200&#215;8bit MCGA/VGA video mode (0x13) used the address range from A000:0000 to A000:F9FF. The 256-color palette was set by writing directly to a couple of ports on the VGA. (But you had do it during vertical blank if you didn&#8217;t want any snow!) Each palette entry occupied three bytes, but only the lowest six bits of each byte were used. If you wanted to use a standard 24-bit palette, you would have to shift every byte two bits to the right before sending it to the VGA.</p>
<p>That was the basic stuff. The VGA could actually do modes better than 320&#215;200&#215;8bit, but there was no BIOS support for them, so you&#8217;d have to program them in yourself by manipulating the VGA registers directly. The famous &quot;Mode X&quot; (320&#215;240&#215;8bit) needed more than a segment of memory to be addressed, so to get it to work you&#8217;d have to &quot;unchain&quot; the VGA and access the frame buffer as four parallel planes. It was actually similar to working with the stock 4-bit EGA and VGA modes. (Little known fact: VGA always used planes internally; the elegant linear frame buffer in mode 0x13 was implemented as a clever hack.)</p>
<p>Good times, good times.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-443083">
				<div id="div-comment-443083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061115-01/?p=28993#comment-443083">
			November 16, 2006 at 8:10 am</a>		</div>

		<p>At some point, graphics cards with very slow palette switching started appearing, killing the great palette-rotation effects &#8211; the latest games using 256 colors usually included an option to disable it (StarCraft comes to mind, and Diablo got it added on a patch).</p>
<p>If I had to guess, perhaps the culprit cards stored always RGB and when changing a palette entry they rescaned the whole image- wait, that wouldn&#8217;t even work at all. Perhaps they stored two copys &#8211; RGB and indexes?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-443113">
				<div id="div-comment-443113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061115-01/?p=28993#comment-443113">
			November 16, 2006 at 11:27 am</a>		</div>

		<p>Ah &#8212; I knew about the &quot;Mode X&quot; stuff, but never learned how to work with it. &nbsp;Since it&#8217;s planar and not linear, it sounds like it&#8217;s harder to work with (from the program&#8217;s POV) than 0x13 was.</p>
<p>And right, it&#8217;s F9FF because it isn&#8217;t a full segment (64000 bytes, not 65536). &nbsp;Minor little details. &nbsp;;-)</p>
<p>I do remember the VESA interface, though &#8212; where you had to map a 64K chunk of the full large-resolution linear framebuffer into a fixed 64K segment at a time. &nbsp;And if you had to draw across multiple chunks of the large framebuffer, you had to call into one of the VESA software interrupts to remap the 64K window. &nbsp;That was also a PITA.</p>
<p>Good times? &nbsp;Well, maybe&#8230; &nbsp;;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-443173">
				<div id="div-comment-443173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nomenclature</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061115-01/?p=28993#comment-443173">
			November 16, 2006 at 1:13 pm</a>		</div>

		<p>Colorkeying = transparency</p>
<p>Alphablending = translucency</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-443183">
				<div id="div-comment-443183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Slow palette</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061115-01/?p=28993#comment-443183">
			November 16, 2006 at 1:31 pm</a>		</div>

		<p>My old 286/12 with VGA could change 800k of palette entries per second (which was about ten colors per scanline, if I remember correctly). Same program on a P200 with PCI-card did write 1.2 MB/s. I would bet modern graphics cards isn&#8217;t much better.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-443273">
				<div id="div-comment-443273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">required</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061115-01/?p=28993#comment-443273">
			November 17, 2006 at 3:54 am</a>		</div>

		<p>&gt; I&#8217;m assuming you&#8217;re smart enough to know that I&#8217;m hard-coding for expository purposes</p>
<p>I am, but then I wouldn&#8217;t do that (hard code the path) anyway. It is<br />
the other n% of the software developing population you have to worry<br />
about (those who, like I said, just copy &amp; paste source off the<br />
web).</p>
<div class="post">[<i>Somebody who copies/pastes this code will have a<br />
hard-coded path to the Gone Fishing bitmap in their app. Unless they&#8217;re<br />
really interested in Gone Fishing, I strongly suspect they&#8217;re going to<br />
change the hard-coded path anyway. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-443363">
				<div id="div-comment-443363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.tungware.com' rel='external nofollow' class='url'>Henry Skoglund</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061115-01/?p=28993#comment-443363">
			November 17, 2006 at 4:28 pm</a>		</div>

		<p>Maybe I am just being picky today but shouldn&#8217;t you add 50 to make the B/W computation round off correctly, like this: (in theory you otherwise lose half a percent of luminance)</p>
<p>BYTE b = (BYTE)((30 * rgbColors[iColor].rgbRed +</p>
<p>59 * rgbColors[iColor].rgbGreen + 11 * rgbColors[iColor].rgbBlue + 50) / 100);</p>
<p>Rgrds Henry</p>
<div class="post">[<i>The point of this article was not the grayscale formula. Grayscale was just a demonstration. Feel free to use whatever formula you want. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-468543">
				<div id="div-comment-468543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2007/02/05/1604637.aspx' rel='external nofollow' class='url'>The Old New Thing : Public service announcement for United States taxpayers: In tax year 2006, you can claim a $30 refund if you owned a telephone</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061115-01/?p=28993#comment-468543">
			February 5, 2007 at 10:00 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2007/02/05/1604637.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2007/02/05/1604637.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

