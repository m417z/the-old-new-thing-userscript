<html>
<head>
<title>Dubious security vulnerability: Attacking the application directory in order to fool yourself?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Dubious security vulnerability: Attacking the application directory in order to fool yourself?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 13, 2016 / year-entry #216</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>48</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Look over there. Ha ha made you look.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A security vulnerability report arrived that went something like this:
</p>
<blockquote CLASS=q>
<p>
There is a vulnerability in the <code>XYZ.EXE</code> program.
If you place a hacked copy of the file
<code>CABINET.DLL</code> in the same directory as
<code>XYZ.EXE</code>,
then when the user runs the
<code>XYZ.EXE</code> program,
it loads the hacked
<code>CABINET.DLL</code> instead of the real one.
When
<code>XYZ.EXE</code> prompts for elevation,
the user will allow it,
and now the rogue <code>CABINET.DLL</code> is running
code as administrator.
</p>
</blockquote>
<p>
Um, okay.
</p>
<p>
First of all, this is an application directory attack,
and
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20110620-00/?p=10393">
the application directory is considered a trusted
location</a>.
If you let somebody write to your application directory,
then you are giving them control over what the application does.
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20121207-00/?p=5893">
So don't do that</a>.
</p>
<p>
This particular variation tries to disguise the matter by
throwing in an elevation prompt,
but the underlying issue is the same.
Let's look at it another way:
Who is the attacker, and who is the victim?
</p>
<p>
The attacker is the user who creates a trap in the application
directory.
The victim is the person who runs the application
and gets caught in the trap.
But how do you get the victim to
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20121031-00/?p=6203">
wander into the yucky hot tub</a>?
Whatever technique you used to get them to run a program from
your hot tub,
you can use that technique to get them to run
a rogue app directly; no need for fancy application directory attacks.
</p>
<p>
The other possibility of a victim is the user himself,
who runs the <code>XYZ.EXE</code> application,
and discovers that he just fell into his own trap.
It's not really considered elevation if you manage to fool
yourself.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (48)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1268575">
				<div id="div-comment-1268575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark (The other Mark)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268575">
			October 13, 2016 at 7:04 am</a>		</div>

		<p>There is a vulnerability in the XYZ.EXE program. If you place a hacked copy of the file XYZ.EXE in the same directory as XYZ.EXE, then when the user runs the XYZ.EXE program, it loads the hacked XYZ.EXE instead of the real one. When XYZ.EXE prompts for elevation, the user will allow it, and now the rogue XYZ.EXE is running code as administrator.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-bboorman odd alt depth-2" id="comment-1268585">
				<div id="div-comment-1268585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268585">
			October 13, 2016 at 7:11 am</a>		</div>

		<p>There is vulnerability in Windows Explorer. If a user has administrator privileges, she can put any file into the XYZ application directory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1268616">
				<div id="div-comment-1268616" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268616">
			October 13, 2016 at 8:06 am</a>		</div>

		<p>@Mark, that was my first thought.  If you can place a hacked DLL in the same folder as the executable, then surely you can place a hacked executable in the same directory.  Sheesh.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1268627">
				<div id="div-comment-1268627" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268627">
			October 13, 2016 at 8:08 am</a>		</div>

		<p>I just realized, that&#8217;s what Raymond said with &#8220;Whatever technique you used to get them to run a program from your hot tub, you can use that technique to get them to run a rogue app directly&#8230; &#8220;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1268655">
				<div id="div-comment-1268655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268655">
			October 13, 2016 at 8:33 am</a>		</div>

		<p>There is a vulnerability in Windows. Windows allows to run arbitrary programs, and arbitrary programs include malware. So Windows is designed specifically to run malware. Move on to other OS that doesn&#8217;t let you run malware, like eh&#8230; ummm&#8230; other OS :-P .</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-3 parent" id="comment-1268675">
				<div id="div-comment-1268675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268675">
			October 13, 2016 at 8:40 am</a>		</div>

		<p>You&#8217;re kidding, but the execution model of running any arbitrary programs with full privileges of the user is a serious weakness of Windows, which continues to cause grief to many users. Even UAC is little help.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1268705">
				<div id="div-comment-1268705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">morlamweb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268705">
			October 13, 2016 at 9:02 am</a>		</div>

		<p>@alegr1: you&#8217;re kidding, because since 2009, Windows clients have not run applications with full admin privileges by default.  I know that it depends a lot on whether users log on as the local admin account and the group policy settings in effect, but in most cases, users do not run EXEs with full admin rights (source: my experience in tech support since 2009).   I&#8217;ve worked on countless support cases where a user tried to install a program or write to a trusted location, only to be blocked by permissions.  &#8220;But my account is an admin!&#8221; they cry.  Doesn&#8217;t matter in the default case: accounts in the admin group run programs with standard user permissions by default.  Ditto, of course, for user accounts in the Users group.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-5" id="comment-1268785">
				<div id="div-comment-1268785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268785">
			October 13, 2016 at 10:15 am</a>		</div>

		<p>I&#8217;m not talking about admin privileges. Every user process has full access to all files and registry. UWP was a step to the right direction, but it&#8217;s too little, too late.</p>
<p>Operating system should be out of bounds even for the &#8220;administrator&#8221;. Applications should not be able to install arbitrary programs as services, even when they run as administrators. Service binaries should be required to bear MS signature, like kernel drivers are.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-5" id="comment-1268805">
				<div id="div-comment-1268805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268805">
			October 13, 2016 at 11:44 am</a>		</div>

		<p>@alegr1:<br />
And we saw how popular completely locked down systems like Windows RT were.<br />
The thing to also remember is that hiding things behind a high cost wall is also not a good option. It deters the wrong kinds of people you want developing for your platform, and the driver related signing has already pushed small independent hardware devs to go to Linux. If they did the same with software then they would be pushing even more people away to an OS like Linux which has the same kind of full access to the system as Windows, except they won&#8217;t have to pay for it. Plus, even with the driver signing requirements, I could still manage to convince an undereducated user to install any driver I want them to.<br />
So right now, unless you have a time machine, trying to convince people to go to the super locked down approach won&#8217;t work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1270885">
				<div id="div-comment-1270885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zboot</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1270885">
			October 25, 2016 at 9:22 am</a>		</div>

		<p>@alegr1 Actually, you can set a security policy so that even when logged on as an administrator, programs are not elevated by default.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-4" id="comment-1268776">
				<div id="div-comment-1268776" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268776">
			October 13, 2016 at 9:42 am</a>		</div>

		<p>That was the whole point of annoying people like crazy starting with Windows Vista.<br />
If you are running an application that requires administrative privileges these days then it is normally in one of three categories.<br />
First, a network game that uses driver based anti cheat protection. These suck.<br />
Second, a legacy application that was written to assume full administrative rights.<br />
Third, a modern application whose programmers suck.<br />
The third one is the major problem, but due to guidelines becoming more well known these are going down but probably will never go away.<br />
Anyway, the point here is the need for blindly running things with full administrative rights has gone down like crazy and any decent modern application should be following good development practices and using the user profile to save settings. For the application to actually be a threat with an administrative account these days the user must be doing stupid things like turning off UAC (which is on by default), linking the tokens or running untrusted executables without setting UAC to maximum.<br />
For the second class of applications above, the need for an administrative account can be mitigated if you can change permissions on directories/registry keys. Of course, you have to be really careful about this (like changing permissions on sub directories or sub keys if possible).<br />
As one final note, even though I still have some issues with it, the UWP/WinRT model doesn&#8217;t run with more privileges than you need, so &#8220;any arbitrary application&#8221; is wrong here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1268815">
				<div id="div-comment-1268815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mspowell24.7@gmail.com' rel='external nofollow' class='url'>Mark (The other Mark)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268815">
			October 13, 2016 at 11:47 am</a>		</div>

		<p>Integrity Levels help with this- I just finished up tracking down an issue where, under certain circumstances, a document storage location would be created under medium integrity level instead of low, which caused a problem with the process running under low integrity levels. </p>
<p>To the best of my knowledge, all POSIX-style OSes have very similar issues, when the user is logged in as root. However, it&#8217;s much more common that people who run POSIX know to never use root for day to day usage, while many Windows user blithely log in as a Local Admin.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-4 parent" id="comment-1268865">
				<div id="div-comment-1268865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268865">
			October 13, 2016 at 4:02 pm</a>		</div>

		<p>Alegr1, you are ten years late. Since October 2006, every version of Windows runs every process as limited user by default. Under that level of privileges, processes can only write to the current user&#8217;s home folder, have no access to other users&#8217; homes, and have read only access to almost everywhere else (including Windows and Program files). The Registry is similarly secured (yes, ACLs are used to regulate access to different areas of the Registry).</p>
<p>This is pretty similar to what Unix does: every user has read permissions on /bin/ (equivalent to C:\Windows\) and /usr/bin/ (equivalent to C:\Program files\), for example.</p>
<p>In any case, in a properly secured open system (as both Windows and Linux are), it is easier to trick the user than the system. And if you are going to trick a user, would you target an OS with a 90% of share (Windows) or one with only 1% (Linux)? Which one do you think would be more desirable to malware writers?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1269055">
				<div id="div-comment-1269055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Gilbert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1269055">
			October 14, 2016 at 2:55 pm</a>		</div>

		<p>Even better, developers are encouraged to make new apps using the Windows Store model where possible, the principle being to lock down the app, not the user. If each app lives in its own isolated sandbox, then a vulnerability in an app only affects the files and settings written by *that app*. Nothing else on the system is exposed. :-) (Of course, the Windows Store app model is blatantly ripped off of Android and iOS, but that doesn&#8217;t make it a bad idea.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-4" id="comment-1268875">
				<div id="div-comment-1268875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Josh B</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268875">
			October 13, 2016 at 4:36 pm</a>		</div>

		<p>Possibly the only thing worse than any process having access to all of your documents is everything being silo&#8217;d away, invisible to everything but the app that made it. Of course, now that Windows runs both apps and regular programs, you can run apps of things you don&#8217;t want touching your files, strictly managing their permissions, and regular programs when you want to be able to use synergy to do interesting things.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1268945">
				<div id="div-comment-1268945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268945">
			October 14, 2016 at 3:38 am</a>		</div>

		<p>Well, they might just notice that the application&#8217;s signature has changed&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-odd thread-alt depth-1" id="comment-1268595">
				<div id="div-comment-1268595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268595">
			October 13, 2016 at 7:14 am</a>		</div>

		<p>The standard answer to these researchers should be &#8220;Call us back when you can demonstrate how an untrusted process put the rogue file into the application directory in the first place.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1268605">
				<div id="div-comment-1268605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268605">
			October 13, 2016 at 7:15 am</a>		</div>

		<p>The vulnerability is real but I don&#8217;t care for political reasons.</p>
<p>Some people lock down their systems so that only binaries signed by certain entities may run.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1268615">
				<div id="div-comment-1268615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pietro Gagliardi (andlabs)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268615">
			October 13, 2016 at 7:34 am</a>		</div>

		<p>I&#8217;m starting to wonder if this specific set of security reports come from people who think Windows should never allow you to load a non-system DLL with the same name as a system DLL. That is, the LoadLibrary() heuristics become &#8220;Is this DLL a system DLL like dwmapi.dll? If so, **always** load the system version, no matter what.&#8221;.</p>
<p>I admittedly don&#8217;t know why either option is better than the other. The best I could come up with is: Had a dwmapi.dll in your third-party Windows XP app but need to upgrade to Vista? (For instance, that app may have been developed by a fictional &#8220;DWM Corporation&#8221; and they named their utility library dwmapi.dll.) Too bad, Windows now gets to keep that DLL name all to itself!</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1268635">
				<div id="div-comment-1268635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268635">
			October 13, 2016 at 8:11 am</a>		</div>

		<p>The .NET Framework kinda-sorta behaves like that.  Strongly named &#8220;assemblies&#8221; (DLLs) are signed.  If an app has a dependency on a strongly named assembly, only the properly signed one will load.  All Framework assemblies are strongly named.  If I create an app that will be installed on a user box, I can strongly name my assemblies as well. That way, only the DLLs I expect will ever be loaded into my process.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-ranta even depth-3" id="comment-1268726">
				<div id="div-comment-1268726" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ranta' rel='external nofollow' class='url'>ranta</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268726">
			October 13, 2016 at 9:27 am</a>		</div>

		<p>The CLR used to verify all strong-name signatures like you say, but nowadays the &#8220;strong-name bypass feature&#8221; usually skips this verification for DLLs loaded from the application directory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1268765">
				<div id="div-comment-1268765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268765">
			October 13, 2016 at 9:41 am</a>		</div>

		<p>WinSXS behaves like .net, but for native code, and is far more strict. For example, you need a real certificate to sign your executable etc.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1268665">
				<div id="div-comment-1268665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268665">
			October 13, 2016 at 8:40 am</a>		</div>

		<p>If you specify in the documentation (the &#8220;contract&#8221;) of LoadLibrary(), it can work well and solve a lot of hassle. But LoadLibrary() has been around for more than 30 years (it was introduced in Windows 1.0, back in 1985), way before DLL injection and privilege escalation were worrying in personal computers. Locking it now would break many legit apps and utilities who rely on this behavior.</p>
<p>.NET, on the other side, was designed with this in mind, and thus, it favors signed strong assemblies from day zero.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1268825">
				<div id="div-comment-1268825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268825">
			October 13, 2016 at 12:06 pm</a>		</div>

		<p>Problem with such lock is that it prevents useful tools fixing up old games or improving them. (Gedosato or modifications for Final Fantasy VIII)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-3" id="comment-1268885">
				<div id="div-comment-1268885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268885">
			October 13, 2016 at 6:57 pm</a>		</div>

		<p>Did you know that sn.exe can run with self-signed certs, so if you generate your own self-signed cert and use it to sign those binaries, it&#8217;ll work for you?</p>
<p><a href="https://blogs.msdn.microsoft.com/shawnfa/2006/02/14/sn-v2-0-works-with-pfx-files/" rel="nofollow">https://blogs.msdn.microsoft.com/shawnfa/2006/02/14/sn-v2-0-works-with-pfx-files/</a></p>
<p>Now you just need to redistribute those files with delay-signing option, and include a tool that automates the process with the package.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-even depth-1 parent" id="comment-1268645">
				<div id="div-comment-1268645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268645">
			October 13, 2016 at 8:16 am</a>		</div>

		<p>&#8220;the application directory is considered a trusted location&#8221; the exception to this is the Downloads folder. This is the default save location for most browsers so people often end up with a bunch of unrelated programs and installers there. Combine that with the default &#8220;feature&#8221; of downloading without asking where to save in some browsers and some evil JavaScript on a page and suddenly your application directory is full of evil .DLLs just waiting for the user to run something they downloaded.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1268695">
				<div id="div-comment-1268695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neshram</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268695">
			October 13, 2016 at 8:51 am</a>		</div>

		<p>Would it be prudent, problematic, or useless, to set a &#8220;low integrity&#8221; ACE on such a folder?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-3 parent" id="comment-1268745">
				<div id="div-comment-1268745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268745">
			October 13, 2016 at 9:29 am</a>		</div>

		<p>It would mostly just be problematic. Most applications are not designed to run at Low IL and even if they could handle it, it really restricts their usefulness since they would not be able to write anywhere. The default Low IL behavior is no-write-up so something evil could read all the files in your profile and upload all your files somewhere. The bigger concern is that some of the programs are going to ask for elevation and then the ACE becomes moot?</p>
<p>A better solution would be for the Downloads folder to deny execute rights on files. ShellExecute could detect this and ask you if you want to enable execution of just this file.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1268755">
				<div id="div-comment-1268755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neshram</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268755">
			October 13, 2016 at 9:39 am</a>		</div>

		<p>I have a vague memory of a program that needed elevation that was flat failing with some Windows error, instead of prompting. We eventually figured out it had gotten marked with low integrity by accident. Removing the ACE resulting in running and normal prompting for elevation. But maybe that was just something about that particular program.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1269065">
				<div id="div-comment-1269065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Gilbert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1269065">
			October 14, 2016 at 2:59 pm</a>		</div>

		<p>Even simpler: Create a separate subdirectory for each download, or for each download source. C:\Downloads\microsoft.com\ProcExp.exe isn&#8217;t going to accidentally load C:\Downloads\haxx0r.ru\kernel32.dll. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1268715">
				<div id="div-comment-1268715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268715">
			October 13, 2016 at 9:10 am</a>		</div>

		<p>Is there some way (a manifest-type thing, or API call, or whatnot) for an application to designate itself as &#8220;I don&#8217;t rely on other DLLs in my directory; I should only be loading system DLLs? It seems that installer applications and the like should have that kind of flag set, to indicate that it shouldn&#8217;t be considered part of the &#8220;bundle&#8221; with whatever else is in the Downloads directory. Or perhaps all web browsers should default to downloading all files into individual subdirectories.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-ranta odd alt depth-2 parent" id="comment-1268775">
				<div id="div-comment-1268775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ranta' rel='external nofollow' class='url'>ranta</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268775">
			October 13, 2016 at 9:42 am</a>		</div>

		<p>Your program could call SetDefaultDllDirectories without LOAD_LIBRARY_SEARCH_APPLICATION_DIR, and then SetDllDirectory(TEXT(&#8220;&#8221;)) so that LoadLibrary won&#8217;t search the current directory either.</p>
<p>Windows 10 apparently has also PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_ON for UpdateProcThreadAttribute, and PROCESS_MITIGATION_IMAGE_LOAD_POLICY::PreferSystem32Images for SetProcessMitigationPolicy. I don&#8217;t know if it possible to put those in the manifest somehow.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1269525">
				<div id="div-comment-1269525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1269525">
			October 18, 2016 at 12:20 pm</a>		</div>

		<p>Does not help in the case of static binding (the default).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1268795">
				<div id="div-comment-1268795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">heto</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268795">
			October 13, 2016 at 11:36 am</a>		</div>

		<p>&gt; Whatever technique you used to get them to run a program from your hot tub, you can use that technique to get them to run a rogue app directly; no need for fancy application directory attacks.</p>
<p>But this is not the attacker&#8217;s hot tub: the directory may have been created and XYZ.EXE was placed there by the administrator or by someone whom the administrator trusts. Just because the administrator might run XYZ.EXE on request, periodically, or even automatically (e.g. as a scheduled task), does not mean the administrator is willing to run any arbitrary program.</p>
<p>For example, say XYZ.EXE is a user account management tool (of course, not provided by the attacker, instead in place and trusted before the attacker is involved at all). You can come up with a legitimate-sounding reason for the administrator to run that tool, but it would be much harder for you to convince the administrator to run an arbitrary EXE provided by you.</p>
<p>The real vulnerability here is only that whoever owns the tub, granted too many permissions to the tub to the attacker. I.e. write permissions to the directory are the problem, not that administrators sometimes run programs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1268835">
				<div id="div-comment-1268835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phylyp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268835">
			October 13, 2016 at 12:11 pm</a>		</div>

		<p>How come this entry doesn&#8217;t have Raymond&#8217;s standard phrase &#8220;this side of the airtight hatch&#8221;? :-) I thought this was that class of attack.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1268855">
				<div id="div-comment-1268855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268855">
			October 13, 2016 at 1:40 pm</a>		</div>

		<p>Of course there are scenarios where this _is_ a vulnerability, well not specifically the DLL loading itself but the scenario where you could drop a DLL next to an executable another user would run without being able to replace the EXE itself. It happens that there&#8217;s an annoying number of applications which like to drop files to the system temporary directory (which for back-compat a normal user can create files in) or into a folder in %PROGRAMDATA%. Both these locations have default DACLs which mean only the owner can modify the files they create but allow another user to come along later and drop arbitrary files next to them. Of course the bug here is these applications shouldn&#8217;t be dropping and running executables in these locations in the first place, or at least without securing the DACL, but if you give people enough rope, yada yada.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00034001a5381f07 even thread-even depth-1 parent" id="comment-1268895">
				<div id="div-comment-1268895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Georg_Rottensteiner' rel='external nofollow' class='url'>Georg_Rottensteiner</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268895">
			October 13, 2016 at 10:56 pm</a>		</div>

		<p>I wonder how the recent plague of &#8220;installing&#8221; programs in the users app data folder is seen.<br />
Doesn&#8217;t it basically undermine the security lockdown of the program files folder? It&#8217;s done to simply avoid having a UAC popup, which brings with itself the &#8220;feature&#8221; that the UAC won&#8217;t even pop up if it really should.<br />
Maybe disallowing running applications from the users app data would be a solution?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong odd alt depth-2 parent" id="comment-1268925">
				<div id="div-comment-1268925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268925">
			October 14, 2016 at 2:16 am</a>		</div>

		<p>Or just don&#8217;t load DLLs in the same folder when the DLL is not in one of the %SystemRoot%/%ProgramFiles%/%ProgramFiles(x86)% folders of the system.</p>
<p>Or make a whitelist entry in GPO to define location of DLLs (folders and their subfolders) that can be used.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-3 parent" id="comment-1268935">
				<div id="div-comment-1268935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268935">
			October 14, 2016 at 2:40 am</a>		</div>

		<p>On the second thought, those programs installs to ProgramData usually because they don&#8217;t need admin right to run in the first place, and they don&#8217;t want elevation prompt to show up in order to update. In other words, the EXEs in these folder usually do not need admin right to run so no security program is created.</p>
<p>The ones with problem are those inhouse applications created to run on file server shares. They often DO require admin right to run because of various things they need to perform.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-4" id="comment-1268966">
				<div id="div-comment-1268966" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268966">
			October 14, 2016 at 5:41 am</a>		</div>

		<p>He does actually mean installing the programs into %USERPROFILE%\AppData\Local, not %ALLUSERSPROFILE%.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-2" id="comment-1268975">
				<div id="div-comment-1268975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268975">
			October 14, 2016 at 5:52 am</a>		</div>

		<p>I would say the answer to this is it depends.<br />
First of all, if the user has administrative rights enabled all the time (UAC disabled), then it wouldn&#8217;t make much of a difference. If the user is using a UAC limited administrator account, or better yet, a limited user account and a separate administrator account to use to elevate then the biggest question is whether the application that ends up in the user profile requires elevation.<br />
My opinion on that is only an application that will never need administrative rights can be installed in the user&#8217;s profile. This way, you can only end up in the situation that you will only get the same privileges from there as the user currently has.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ranta odd alt depth-2" id="comment-1268976">
				<div id="div-comment-1268976" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ranta' rel='external nofollow' class='url'>ranta</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268976">
			October 14, 2016 at 6:27 am</a>		</div>

		<p>In Windows 7, Microsoft added FOLDERID_UserProgramFiles, which points to the user&#8217;s %LOCALAPPDATA%\Programs. Windows Installer can automatically use that in per-user installations. If Microsoft now turned around and decided to block execution of files from within that directory, I&#8217;d be surprised.</p>
<p>Strangely though, &#8220;Certification requirements for Windows Desktop Apps&#8221; version 10 requirement 10.1 seems to forbid installing apps to that directory by default. I wonder if it was allowed in &#8220;Windows 7 Client Software Logo Program Technical Requirements&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1269365">
				<div id="div-comment-1269365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1269365">
			October 17, 2016 at 3:06 pm</a>		</div>

		<p>Right; don&#8217;t many browsers install themselves into the AppData folder (partly so they can update themselves every day without asking the user for consent)?  </p>
<p>Which means that the program&#8217;s executable could probably be overwritten somehow without asking the user&#8217;s consent, and then the next open of that browser&#8230; you are sunk.  Well, whatever program overwrote the browser&#8217;s executable file is, itself, a bad program and could probably do bad things without replacing the browser&#8217;s executable.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1268905">
				<div id="div-comment-1268905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Koopa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1268905">
			October 13, 2016 at 11:45 pm</a>		</div>

		<p>I think the subtitles you can now add to the articles on the blog&#8217;s main page are a win for this blog, they&#8217;re quite funny.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1269075">
				<div id="div-comment-1269075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Gilbert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1269075">
			October 14, 2016 at 3:03 pm</a>		</div>

		<p>They were always there from the very beginning, actually, and only got lost temporarily when Microsoft migrated their entire suite of blogs to this new platform. I&#8217;m glad Raymond was able to get them working again &#8212; or, should I say, able to convince the blogs team to get them working again. :-)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1269105">
				<div id="div-comment-1269105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1269105">
			October 16, 2016 at 12:23 am</a>		</div>

		<p>The only problem with them is, RSS readers like me don&#8217;t see them.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher even thread-even depth-1" id="comment-1269595">
				<div id="div-comment-1269595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1269595">
			October 18, 2016 at 4:16 pm</a>		</div>

		<p>The application directory generally should not be a trusted location all the time.</p>
<p>Here&#8217;s the problem.  You have an on-by-default install technology that ships with the operating system, as a must-install component of the operating system.  That on-by-default install technology creates folders under %USERPROFILE%\AppData\Local\Apps\2.0\Random\Random</p>
<p>Users installing are prompted &#8220;do you want to install this,&#8221; and the experience is very similar to UAC.  Most users could not tell you why sometimes the screen goes dark before it asks them yes / no and other times it doesn&#8217;t.</p>
<p>Microsoft&#8217;s package manager is verifying it is OK to install the package, and then downloading and installing the package &#8212; making shortcuts, etc.  If something else running in the user&#8217;s space can copy a library into that folder &#8212; without any prompting at all (which is the case for the Apps folder) &#8212; that is actively dangerous to the user&#8217;s computer and data.</p>
<p>Note: changing the technology to off-by-default and requiring a redistributable won&#8217;t materially impact the problem given a ton of Windows software won&#8217;t run correctly without the technology being installed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1270595">
				<div id="div-comment-1270595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Reelix</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161013-00/?p=94505#comment-1270595">
			October 21, 2016 at 1:21 am</a>		</div>

		<p>If you&#8217;re wondering, this is mainly an issue where browsers prompt you to &#8220;Run&#8221; something you have downloaded. If you can get a malicious DLL with a commonly used name into their downloads folder, the majority of the applications the user runs will use said malicious DLL instead of the native Windows one.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

