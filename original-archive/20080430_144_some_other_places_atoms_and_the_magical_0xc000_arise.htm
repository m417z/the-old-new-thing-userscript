<html>
<head>
<title>Some other places atoms (and the magical 0xC000) arise</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Some other places atoms (and the magical 0xC000) arise</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 30, 2008 / year-entry #145</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080430-00/?p=22523</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The moment the Windows developers got a system for converting strings into numbers, they could use it anywhere they need to, well, convert a string into a number. Somtimes these integers are officially declared as atoms, but most of the time they are just integers that happen to be atoms under the covers. I'll start...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The moment the Windows developers got a system for converting strings into numbers, they could use it anywhere they need to, well, convert a string into a number. Somtimes these integers are officially declared as atoms, but most of the time they are just integers that happen to be atoms under the covers.</p>
<p> I'll start with registered window messages, created by the <code>RegisterWindowMessage</code> function. These are not officially atoms; they are just integers that happen to lie in the range <code>0xC000</code> to <code>0xFFFF</code>, just like atoms. But yeah, internally, they're atoms. Of course, you shouldn't rely on it since it's not contractual. Think of it as a fantastic coincidence. </p>
<p> Registered clipboard formats created by the <code>RegisterClipboardFormat</code> message are also not officially atoms; they're just <code>UINT</code>s. The numeric range for registered clipboard formats isn't even specified; that they hang out in the <code>0xC000</code> range is just an implementation detail. Someday, registered clipboard formats may have values like <code>0x1234</code>, who knows. </p>
<p> Window properties are also stored in the form of atoms, but unlike the other examples above, the atomic nature of window properties is contractual. You can set a property either by passing the property name <code>SetProp(hwnd, TEXT("PropertyName"), hData)</code> or by passing the property atom <code>SetProp(hwnd, MAKEINTATOM(atm), hData)</code>, where <code>atm</code> was obtained from an earlier call to <code>GlobalAddAtom</code>. There is additional weirdness with the way these atoms are tracked, which I'll defer to Friday's article, though it is hinted at in the documentation for <code>SetProp</code> which cautions that you need to remove all the properties from a window before it is destroyed. </p>
<p> Window classes also have atoms. The return value of the <code>RegisterClass</code> function is an <code>ATOM</code>, and you can also retrieve the atom later by calling <code>GetClassWord(GCW_ATOM)</code>. We'll see more about that atom next time. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-625173">
				<div id="div-comment-625173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">meh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080430-00/?p=22523#comment-625173">
			April 30, 2008 at 11:24 am</a>		</div>

		<p>I love this stuff. I love your blog too, but that goes without saying. =]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-625193">
				<div id="div-comment-625193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080430-00/?p=22523#comment-625193">
			April 30, 2008 at 12:01 pm</a>		</div>

		<p>Why is RegisterClipboardFormat returning UINT and not a WORD? Even the documentation says the value is between 0xC000 and 0xFFFF. This is not a big deal in itself, but the problem is when assigning this to a CLIPFORMAT (which is defined as WORD) it requires a cast. I need to add a bunch of those recently in my project when I upped the warning level.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-625273">
				<div id="div-comment-625273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Messiant R</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080430-00/?p=22523#comment-625273">
			April 30, 2008 at 2:45 pm</a>		</div>

		<p>Going to take a guess on the additional weirdness:</p>
<p>GlobalAddAtom() stuffs the atom into the atom table shared by all applications, and SetProp() seems to be using that table according to your explanation.</p>
<p>If a mischievous developer decided to call GlobalDeleteAtom() more times on the window property names than he explicitly or implicitly added the atom, other applications could suddenly fail due to the disappearance of their expected atom. I guess there&#8217;s also a chance then that GlobalAddAtom() may reuse the value of the deleted atom.</p>
<p>Nobody likes it if the ground sinks away under their feet, so there must be some process based reference counting going on to prevent what I described.</p>
<p>Now I&#8217;ll go wait in anticipation of friday to see if my hunch is correct.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-625323">
				<div id="div-comment-625323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080430-00/?p=22523#comment-625323">
			April 30, 2008 at 5:28 pm</a>		</div>

		<blockquote><p>
  Think of it as a fantastic coincidence.
</p></blockquote>
<p>Nearly fantastic; as Undocumented Windows points out, currently RegisterWindowMessage and RegisterClipboardFormat have the same address.</p>
<p>Unfortunately, at least in my edition, they then explain how to load ds with the HINSTANCE of the desktop to call GetAtomName to retrieve the name of the registered message, when in fact GetClipboardFormatName already does that!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-625383">
				<div id="div-comment-625383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IUnknown</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080430-00/?p=22523#comment-625383">
			May 1, 2008 at 5:04 am</a>		</div>

		<p>IIRC, RegisterWindowMessage calls AddAtom.</p>
<div class="post">[<i>Thank you for repeating my second paragraph, in case people missed it the first time. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-625593">
				<div id="div-comment-625593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IUnknown</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080430-00/?p=22523#comment-625593">
			May 1, 2008 at 3:14 pm</a>		</div>

		<p>Heh, sorry about that. RegisterClipboardFormat is the exact same function though, it has the same prototype and even the same entry point in user32.dll. That&#8217;s all, thanks for the informative article. It&#8217;s always fun to read your blog :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-626013">
				<div id="div-comment-626013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">knut</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080430-00/?p=22523#comment-626013">
			May 3, 2008 at 10:29 am</a>		</div>

		<p>I always wondered what RegisterWindowMessage will do when all 16 383 possible atom values are exhausted?</p>
<p>With all these uses of GlobalAddAtom (Window classes,SetProp,RegisterWindowMessage,RegisterClipboardFormat,&#8230;), isn&#8217;t it very likely the string table gets &#8216;full&#8217; some time?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

