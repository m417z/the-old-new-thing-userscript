<html>
<head>
<title>The Itanium processor, part 7: Speculative loads</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The Itanium processor, part 7: Speculative loads</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 4, 2015 / year-entry #162</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today we'll look at speculative loads, which is when you load a value before you even know whether the value should be loaded. (A related but distinct concept is advanced loading, which we'll look at next time.) Consider the following code: int32_t SomeClass::calculateSomething(int32_t *a, int32_t *b) { int32_t result; if (m_p > m_q + 1)...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today we'll look at speculative loads, which is when you load a value
before you even know whether the value should be loaded.
(A related but distinct concept is advanced loading,
which we'll look at next time.)
</p>
<p>
Consider the following code:
</p>
<pre>
int32_t SomeClass::calculateSomething(int32_t *a, int32_t *b)
{
 int32_t result;
 if (m_p &gt; m_q + 1) {
  result = a[*b];
 } else {
  result = defaultValue;
 }
 return result;
}
</pre>
<p>
The na&iuml;ve way to compile this function would go something like this:
</p>
<pre>
        // we are a leaf function, so no need to use "alloc" or to save rp.
        // on entry: r32 = this, r33 = a, r34 = b

        // calculate complex condition, putting the result in p6
        // and the opposite of the result in p7.

        addl    r31 = 08h, r32          // r31 = &amp;this-&gt;m_p
        addl    r30 = 10h, r32 ;;       // r30 = &amp;this-&gt;m_q
        ld8     r31 = [r31]             // r31 = this-&gt;m_p
        ld8     r30 = [r30] ;;          // r30 = this-&gt;m_q
        addl    r30 = 08h, r30 ;;       // r30 = this-&gt;m_q + 1
        cmp.gt  p6, p7 = r30, r31 ;;    // p6 = m_p &gt; m_q + 1; p7 = !p6

        // Now take action based on the result.

(p6)    ld4     r29 = [r34] ;;          // if true: load *b
(p6)    shladd  r29 = r29, 2, r33 ;;    // if true: calculate &amp;a[*b]
(p6)    ld4     ret0 = [r29]            // if true: load a[*b]
(p7)    or      ret0 = 2ah, r0          // if false: return default value
        br.ret.sptk.many rp             // return
</pre>
<p>
First we decide whether the condition is true or not.
Once we know whether the branch is taken, we execute
the appropriate branch.
If the condition is true, then we load <code>*b</code>,
then use it to index the array <code>a</code>.
If the condition is false, then we just
set the result to the default value.
</p>
<p>
Now, in reality, the encoded instructions aren't that neat
due to template restrictions.
For example, we cannot put the first three instructions into
a bundle because they consist of two arithmetic instructions,
a stop, and a memory instruction,
but there is no II|M template.
The actual encoding would be more like this:
</p>
<pre>
        // we are a leaf function, so no need to use "alloc" or to save rp.
        // on entry: r32 = this, r33 = a, r34 = b

        // calculate complex condition, putting the result in p6
        // and the opposite of the result in p7.

<font COLOR=blue>{      // MII| template</font>
        <font COLOR=red>nop.m</font>
        addl    r31 = 08h, r32          // r31 = &amp;this-&gt;m_p
        addl    r30 = 10h, r32 ;;       // r30 = &amp;this-&gt;m_q
<font COLOR=blue>}
{       // MM|I| template (M port can also execute integer operations)</font>
        ld8     r31 = [r31]             // r31 = this-&gt;m_p
        ld8     r30 = [r30] ;;          // r30 = this-&gt;m_q
        addl    r30 = 08h, r30 ;;       // r30 = this-&gt;m_q + 1
<font COLOR=blue>}
{       // M|MI| template</font>
        cmp.gt  p6, p7 = r30, r31 ;;    // p6 = m_p &gt; m_q + 1; p7 = !p6

        // Now take action based on the result.

(p6)    ld4     r29 = [r34]             // if true: load *b
        <font COLOR=red>nop.i ;;</font>                        // move the stop here
<font COLOR=blue>}
{       //  M|MI template</font>
(p6)    shladd  r29 = r29, 2, r33 ;;    // if true: calculate &amp;a[*b]
(p6)    ld4     ret0 = [r29]            // if true: load a[*b]
(p7)    or      ret0 = 2ah, r0          // if false: return default value
<font COLOR=blue>}
{       // BBB template</font>
        br.ret.sptk.many rp             // return
        <font COLOR=red>nop.b
        nop.b</font>
<font COLOR=blue>}</font>
</pre>
<p>
Anyway, let's go back to the original version.
What you might notice is that
there is a long dependency chain:
</p>
<table BORDER=0 CELLPADDING=0 CELLSPACING=0
       STYLE="text-align: center">
<tr>
<td STYLE="border: solid black 1px; width: 9em; height: 2em">addl r31 = 08h, r32</td>
<td STYLE="width: 3em"></td>
<td STYLE="border: solid black 1px; width: 9em; height: 2em">addl r30 = 10h, r32</td>
</tr>
<tr>
<td>&darr;</td>
<td></td>
<td>&darr;</td>
</tr>
<tr>
<td STYLE="border: solid black 1px; height: 2em">ld8 r31 = [r31]</td>
<td></td>
<td STYLE="border: solid black 1px; height: 2em">ld8 r30 = [r30]</td>
</tr>
<tr>
<td>&darr;</td>
<td></td>
<td>&darr;</td>
</tr>
<tr>
<td>&darr;</td>
<td></td>
<td STYLE="border: solid black 1px; height: 2em">addl r30 = 08h, r30</td>
</tr>
<tr>
<td>&darr;</td>
<td>&#x2199;</td>
<td></td>
</tr>
<tr>
<td COLSPAN=2 STYLE="border: solid black 1px; height: 2em">cmp.gt p6, p7 = r30, r31</td>
<td></td>
</tr>
<tr>
<td>&darr;</td>
<td>&#x2198;</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid black 1px; height: 2em">(p7) or ret0 = 2Ah, r0</td>
<td></td>
<td STYLE="border: solid black 1px; height: 2em">(p6) ld4 r29 = [r34]</td>
</tr>
<tr>
<td>&darr;</td>
<td></td>
<td>&darr;</td>
</tr>
<tr>
<td>&darr;</td>
<td COLSPAN=2 STYLE="border: solid black 1px; height: 2em">(p6) shladd r29 = r29, 2, r33</td>
</tr>
<tr>
<td>&darr;</td>
<td></td>
<td>&darr;</td>
</tr>
<tr>
<td>&darr;</td>
<td></td>
<td STYLE="border: solid black 1px; height: 2em">(p6) ld4 ret0 = [r29]</td>
</tr>
<tr>
<td>&darr;</td>
<td>&#x2199;</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid black 1px; height: 2em">br.ret.sptk.many rp</td>
<td></td>
<td></td>
</tr>
</table>
<p>
It would be great if we could parallelize more of this computation.
For example, we could precalculate the <var>true</var> branch:
</p>
<pre>
        // we are a leaf function, so no need to use "alloc" or to save rp.
        // on entry: r32 = this, r33 = a, r34 = b

        <font COLOR=blue>ld4     r29 = [r34]             // assume true: load *b</font>
        addl    r31 = 08h, r32
        addl    r30 = 10h, r32 ;;
        <font COLOR=blue>shladd  r29 = r29, 2, r33       // assume true: calculate &amp;a[*b]</font>
        ld8     r31 = [r31]
        ld8     r30 = [r30] ;;
        <font COLOR=blue>ld4     r29 = [r29]             // assume true: load a[*b]</font>
        addl    r30 = 08h, r30 ;;       // r30 = this-&gt;m_q + 1
        cmp.gt  p6, p7 = r30, r31 ;;    // p6 = m_p &gt; m_q + 1; p7 = !p6

        // Now take action based on the result.

(p6)    or      ret0 = r0, r29          // if true: use the value we precalculated
(p7)    or      ret0 = 2ah, r0          // if false: return the default value
        br.ret.sptk.many rp             // return
</pre>
<p>
After applying template restrictions, the code looks more like this:
</p>
<pre>
{       // MII| template
        ld4     r29 = [r34]             // assume true: load *b</font>
        addl    r31 = 08h, r32
        addl    r30 = 10h, r32 ;;
}
{       // MMI| template
        ld8     r31 = [r31]
        ld8     r30 = [r30]
        shladd  r29 = r29, 2, r33 ;;    // assume true: calculate &amp;a[*b]
}
{       // MI|I| template
        ld4     r29 = [r29]             // assume true: load a[*b]</font>
        addl    r30 = 08h, r30 ;;       // r30 = this-&gt;m_q + 1
        cmp.gt  p6, p7 = r30, r31 ;;    // p6 = m_p &gt; m_q + 1; p7 = !p6
}
{       // MIB template (recalling that the M port can also execute integer instructions)
(p6)    or      ret0 = r0, r29          // if true: use the value we precalculated
(p7)    or      ret0 = 2ah, r0          // if false: return the default value
        br.ret.sptk.many rp             // return
}
</pre>
<p>
Note that we managed to shrink the code because we were able to use the speculative
instructions to "fill in the holes" left by the template-mandated <code>nop</code>
instructions in the original.
We managed to squeeze out all the <code>nop</code>s!
</p>
<p>
Okay, enough with the template restrictions digressions.
</p>
<p>
This alternate version assumes that the complex condition is true
and speculatively evaluates the <var>true</var> branch.
If the test turns out to be true, then it just uses the precalculated
result.
if it turns out to be false, then the precalculated result is thrown away.
</p>
<p>
In other words, we rewrote the code like this:
</p>
<pre>
int32_t SomeClass::calculateSomething(int32_t *a, int32_t *b)
{
 int32_t speculativeResult = a[*b];
 int32_t result;
 if (m_p &gt; m_q + 1) {
  result = speculativeResult;
 } else {
  result = defaultValue;
 }
 return result;
}
</pre>
<p>
The dependency chain is now much shorter.
</p>
<table BORDER=0 CELLPADDING=0 CELLSPACING=0
       STYLE="text-align: center">
<tr>
<td STYLE="border: solid black 1px; width: 9em; height: 2em">addl r31 = 08h, r32</td>
<td STYLE="width: 3em"></td>
<td STYLE="border: solid black 1px; width: 9em; height: 2em">addl r30 = 10h, r32</td>
<td STYLE="width: 3em"></td>
<td STYLE="border: solid black 1px; width: 11em; height: 2em">ld4 r29 = [r34]</td>
</tr>
<tr>
<td>&darr;</td>
<td></td>
<td>&darr;</td>
<td></td>
<td>&darr;</td>
</tr>
<tr>
<td STYLE="border: solid black 1px; height: 2em">ld8 r31 = [r31]</td>
<td></td>
<td STYLE="border: solid black 1px; height: 2em">ld8 r30 = [r30]</td>
<td></td>
<td STYLE="border: solid black 1px; height: 2em">shladd r29 = r29, 2, r33</td>
</tr>
</tr>
<tr>
<td>&darr;</td>
<td></td>
<td>&darr;</td>
<td></td>
<td>&darr;</td>
</tr>
<tr>
<td>&darr;</td>
<td></td>
<td STYLE="border: solid black 1px; height: 2em">addl r30 = 08h, r30</td>
<td></td>
<td STYLE="border: solid black 1px; height: 2em">ld4 r29 = [r29]</td>
</tr>
<tr>
<td>&darr;</td>
<td>&#x2199;</td>
<td></td>
<td></td>
<td ALIGN=left>&#x2199;</td>
</tr>
<tr>
<td COLSPAN=2 STYLE="border: solid black 1px; height: 2em">cmp.gt p6, p7 = r30, r31</td>
<td></td>
<td>&#x2199;</td>
</tr>
<tr>
<td>&darr;</td>
<td>&#x2198;</td>
<td ALIGN=right>&#x2199;</td>
</tr>
<tr>
<td STYLE="border: solid black 1px; height: 2em">(p7) or ret0 = 2ah, r0</td>
<td></td>
<td COLSPAN=2 STYLE="border: solid black 1px; height: 2em">(p6) or ret0 = r0, r29</td>
</tr>
<tr>
<td>&darr;</td>
<td>&#x2199;</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid black 1px; height: 2em">br.ret.sptk.many rp</td>
<td></td>
<td></td>
</tr>
</table>
<p>
This rewrite is generally beneficial if profiling feedback
suggests that the conditional is normally true,
since it hides the memory access latency inside the
calculation of the conditional.
</p>
<p>
Until somebody does this:
</p>
<pre>
    // Get the default value. We know that m_p == m_q.
    p-&gt;calculateSomething(nullptr, nullptr);
</pre>
<p>
In this case, the speculative execution will take
an access violation because it tries to deference
the null pointer as part of calculating the
speculative result.
</p>
<p>
Well, that sucks.
</p>
<p>
To solve this problem,
the Itanium lets you explicitly tag memory read operations
as speculative.
If you try to load a value speculatively,
the instruction will read the value if possible,
but if doing so would normally raise an exception,
the processor says, "Sorry, I couldn't read it.
But since this is part of speculative execution,
I shouldn't raise an exception.
Instead, I will set the NaT bit on the value
so that you will know that the speculative load failed."
</p>
<p>
The NaT bit (short for <i>Not a Thing</i>)
is a 65th bit associated with each 64-bit general-purpose
integer register
that says whether the register holds a valid value.
(Floating point registers do not have a NaT bit;
instead there is a special value called NaTVal
which serves the same purpose.)
Arithmetic operations on NaT simply result in another NaT,
but if you try to do something interesting with a NaT,
you
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/01/19/60162.aspx">
incur a
<code>STATUS_<wbr>REG_<wbr>NAT_<wbr>CONSUMPTION</code> exception</a>.
</p>
<p>
So let's take advantage of explicit speculative execution:
</p>
<pre>
        // we are a leaf function, so no need to use "alloc" or to save rp.
        // on entry: r32 = this, r33 = a, r34 = b

        <font COLOR=blue>ld4.s   r29 = [r34]             // speculatively load *b</font>
        addl    r31 = 08h, r32
        addl    r30 = 10h, r32 ;;
        ld8     r31 = [r31]
        ld8     r30 = [r30]
        shladd  r29 = r29, 2, r33 ;;    // speculatively calculate &amp;a[*b]
        <font COLOR=blue>ld4.s   r29 = [r29]             // speculatively load a[*b]</font>
        addl    r30 = 08h, r30 ;;       // r30 = this-&gt;m_q + 1
        cmp.gt  p6, p7 = r30, r31 ;;    // p6 = m_p &gt; m_q + 1; p7 = !p6

        // Now take action based on the result.

(p6)    or      ret0 = r0, r29          // if true: use the value we precalculated
(p7)    or      ret0 = 2ah, r0          // if false: return the default value
        br.ret.sptk.many rp             // return
</pre>
<p>
We changed the two load operations from <code>ld4</code>
to <code>ld4.s</code>.
The trailing <code>.s</code> means that the load is being
performed speculatively,
and that if an error occurs or if the address is itself NaT,
then set the result to NaT rather than raising an exception.
</p>
<p>
Okay, so this prevents the exception from being raised
during the speculative execution,
but what if an exception really occurred?
How do we turn the NaT back into the original
exception?
As written, we return NaT back to our caller,
which is definitely not what the caller expects!
</p>
<p>
You might put on your language lawyer hat at this point and
say that dereferencing a null pointer invokes
<i>undefined behavior</i>,
so returning NaT is standard-conforming
(because undefined behavior allows <i>anything</i> to be standard-conforming).
That's true, if the exception was due to an access violation.
But the exception might have been a <i>page not present</i>
exception because the memory was paged out.
In that case, we really do want to raise the exception so that
the kernel can handle it by paging the memory back in,
and then we want to read the value and resume our calculations.
The caller definitely does not expect that passing valid
parameters will result in a NaT just because the memory happens
to be paged out.
</p>
<p>
What we need to do is convert the deferred exception
back into the original exception so that it can be raised
as if no speculation had occurred.
The instruction that lets us know that an exception got
converted to a NaT is
<code>chk.s</code>.
This means
"Check if the register contains NaT.
If so, then jump to recovery code."
The recovery code re-executes the instructions
non-speculatively so that all the exceptions can be
raised in the standard way,
and any exception handlers can do their work in the standard way.
Since NaT infects future computations, we don't need to check
every speculative step;
we need only check the final speculated result.
</p>
<pre>
        // we are a leaf function, so no need to use "alloc" or to save rp.
        // on entry: r32 = this, r33 = a, r34 = b

        ld4.s   r29 = [r34]             // speculatively load *b
        addl    r31 = 08h, r32
        addl    r30 = 10h, r32 ;;
        ld8     r31 = [r31]
        ld8     r30 = [r30]
        shladd  r29 = r29, 2, r33 ;;    // speculatively calculate &amp;a[*b]
        ld4.s   r29 = [r29]             // speculatively load a[*b]
        addl    r30 = 08h, r30 ;;       // r30 = this-&gt;m_q + 1
        cmp.gt  p6, p7 = r30, r31 ;;    // p6 = m_p &gt; m_q + 1; p7 = !p6

        // Now take action based on the result.

(p6)    <font COLOR=blue>chk.s   r29, recovery           // if true: recover r29 if not valid
recovered:</font>
(p6)    or      ret0 = r0, r29          // if true: use the value we precalculated
(p7)    or      ret0 = 2ah, r0          // if false: return the default value
        br.ret.sptk.many rp             // return

<font COLOR=blue>recovery:
        ld4     r29 = [r34] ;;          // load *b
        shladd  r29 = r29, 2, r33 ;;    // calculate &amp;a[*b]
        ld4     r29 = [r29]             // load a[*b]
        br      recovered               // resume with recovered value</font>
</pre>
<p>
The <code>chk.s</code> instruction checks the specified register to see if the
NaT bit is set.
If not, the instruction allows execution to continue normally.
But if the register is invalid,
then control transfers to the specified label.
Our recovery code re-executes the instructions that led
to the invalid value,
but this time we execute them non-speculatively
so that exceptions can be raised and handled.
Once the value has been recovered,
we jump back to the instruction after the
<code>chk.s</code> so that normal execution can resume.
</p>
<p>
In this case, we can make an additional optimization.
Since the only things happening after recovery are copying
<code>r29</code> to <code>ret0</code> and returning,
we can inline those two instructions then perform peephole
optimization to combine the
<code>ld4 r29 = [r29]</code> and
<code>or ret0 = r0, r29</code> into
<code>ld4 ret0 = [r29]</code>.
</p>
<p>
Note that optimizing the recovery code is not really that important
from an execution speed standpoint,
since the recovery code runs only if an exception occurred,
and the cost of raising and handling the exception will drown out
any cycle squeezing effects.
The real benefit of optimizing the recovery code is to avoid the jump
back into the mainline code,
because that allows the mainline code to be more compact:
Recall that all jump targets must be the start of a bundle.
If we had the recovery code jump back to the mainline code,
we would have to insert some <code>nop</code>s so that the
<code>recovered</code> label is at the start of a bundle.
(In practice, what the compiler will do is repeat the trailing
instructions in the bundle containing the <code>chk.s</code>
then jump to the start of the next bundle.)</p>
<p>
The final compiled function now looks like this:
</p>
<pre>
        // we are a leaf function, so no need to use "alloc" or to save rp.
        // on entry: r32 = this, r33 = a, r34 = b

        ld4.s   r29 = [r34]             // speculatively load *b
        addl    r31 = 08h, r32
        addl    r30 = 10h, r32 ;;
        ld8     r31 = [r31]
        ld8     r30 = [r30]
        shladd  r29 = r29, 2, r33 ;;    // speculatively calculate &amp;a[*b]
        ld4.s   r29 = [r29]             // speculatively load a[*b]
        addl    r30 = 08h, r30 ;;       // r30 = this-&gt;m_q + 1
        cmp.gt  p6, p7 = r30, r31 ;;    // p6 = m_p &gt; m_q + 1; p7 = !p6

        // Now take action based on the result.

(p6)    chk.s   r29, recovery           // if true: recover r29 if not valid
(p6)    or      ret0 = r0, r29          // if true: use the value we precalculated
(p7)    or      ret0 = 2ah, r0          // if false: return the default value
        br.ret.sptk.many rp             // return

recovery:
        ld4     r29 = [r34] ;;          // load *b
        shladd  r29 = r29, 2, r33 ;;    // calculate &amp;a[*b]
        <font COLOR=blue>ld4     ret0 = [r29]            // load a[*b] as return value
        br.ret.sptk.many rp             // return</font>
</pre>
<p>
Next time, we'll look at advanced loading,
which is a different type of speculative execution.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1196871">
				<div id="div-comment-1196871" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Muzer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196871">
			August 4, 2015 at 7:13 am</a>		</div>

		<p>To my mind, this seems so hacky, and yet quite clever.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1196861">
				<div id="div-comment-1196861" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andre</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196861">
			August 4, 2015 at 7:26 am</a>		</div>

		<p>What happens when one instruction of the bundle incurs, say, a page fault? Does the whole bundle get discarded before calling into the trap handler, or only a single instruction?</p>
<p>If the whole bundle gets re-executed: Could this lead to a situation where a (pretty naive) page handler runs in circles paging in one page for another, and two instructions of the bundle alternatingly raise page faults?</p>
<div class="post">[<em>This is a non-problem because bundles are 16 bytes long and are aligned on on 16-byte boundaries, so they can never straddle a page boundary. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1196841">
				<div id="div-comment-1196841" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jared S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196841">
			August 4, 2015 at 7:38 am</a>		</div>

		<p>@Andre: You could get into that situation on x86 if you have an instruction that crosses a page boundary.</p>
<div class="post">[<em>Also, <a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/08/27/221486.aspx">unaligned data</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1196831">
				<div id="div-comment-1196831" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196831">
			August 4, 2015 at 7:57 am</a>		</div>

		<p>I&#39;m not sure Andre&#39;s question was perfectly understood here.</p>
<p>The way I read it, it&#39;s about what can happen if a bundle contains two instructions that each load a memory value from two different pages.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1196821">
				<div id="div-comment-1196821" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andre</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196821">
			August 4, 2015 at 8:15 am</a>		</div>

		<p>@Medinoc:</p>
<p>Yes, that&#39;s what I meant.</p>
<div class="post">[<em>Sorry, I misunderstood. Fault handlers have access to a privileged <code>rfi</code> instruction, which has the power to resume execution at a specific instruction within the bundle. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1196811">
				<div id="div-comment-1196811" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kirchner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196811">
			August 4, 2015 at 8:18 am</a>		</div>

		<p>Somebody care to help me understand how this instruction makes sense?</p>
<p>addl &nbsp; &nbsp;r30 = 08h, r30 ;; &nbsp; &nbsp; &nbsp; // r30 = this-&gt;m_q + 1</p>
<p>I&#39;d say it adds 8 to r30. What am I missing?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1196801">
				<div id="div-comment-1196801" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196801">
			August 4, 2015 at 8:22 am</a>		</div>

		<p>@Kirchner: The declaration of m_q isn&#39;t shown, but if it&#39;s a pointer to int64_t, adding 1 to it translates as adding 8 to the actual address it contains.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1196791">
				<div id="div-comment-1196791" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Typo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196791">
			August 4, 2015 at 8:30 am</a>		</div>

		<p>It says &quot;it tries to deference the null pointer&quot;.</p>
<p>It should be &#39;dereference&#39; instead of &#39;deference&#39;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1196781">
				<div id="div-comment-1196781" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kirchner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196781">
			August 4, 2015 at 8:33 am</a>		</div>

		<p>@Medinoc, thanks a lot. I missed that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-tom-lambert-13live-com odd alt thread-odd thread-alt depth-1" id="comment-1196771">
				<div id="div-comment-1196771" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Tom+Lambert+%28Koopakiller%29' rel='external nofollow' class='url'>Tom Lambert (Koopakiller)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196771">
			August 4, 2015 at 11:43 am</a>		</div>

		<p>I am a pure .NET developer but this strategy sounds very clever to me. A really interesting Strategy</p>
<p>Thanks for the article ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1196761">
				<div id="div-comment-1196761" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196761">
			August 4, 2015 at 12:29 pm</a>		</div>

		<p>At least as reported in the press at the time, one of the biggest problems of the Itanium was that the compilers never managed to deliver the promised performance. Was that just an early problem, or something that persisted over the lifetime of the architecture? Has the state of compiler research advanced enough that VLIW would be a viable model for general-purpose computing today?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1196751">
				<div id="div-comment-1196751" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196751">
			August 4, 2015 at 12:42 pm</a>		</div>

		<p>&quot;The recovery code re-executes the instructions non-speculatively so that all the exceptions can be raised in the standard way, and any exception handlers can do their work in the standard way.&quot;</p>
<p>Presumably you need to make sure the code is correct under multithreading/interrupts, given that &quot;the same&quot; instructions can now execute more than once? (The general pattern of &quot;load the register again non-speculatively given that we already know this branch will be taken&quot; is safe, of course.)</p>
<div class="post">[<em>The non-speculative version is the &quot;real&quot; execution. The speculative version is the &quot;Gosh, I wonder if I can get away with this &quot; version. So any exceptions raised in the non-speculative version are the ones that correspond to the code as-written. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1196741">
				<div id="div-comment-1196741" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NOR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196741">
			August 4, 2015 at 2:06 pm</a>		</div>

		<p>&gt;(p6) &nbsp; &nbsp;chk.s &nbsp; r29, recovery &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // if true: recover r29 if not valid</p>
<p>&gt;(p6) &nbsp; &nbsp;or &nbsp; &nbsp; &nbsp;ret0 = r0, r29 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// if true: use the value we precalculated</p>
<p>&gt;(p7) &nbsp; &nbsp;or &nbsp; &nbsp; &nbsp;ret0 = 2ah, r0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// if false: return the default value</p>
<p>&gt; &nbsp; &nbsp; &nbsp; &nbsp;br.ret.sptk.many rp &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // return</p>
<p>&gt;</p>
<p>&gt;recovery:</p>
<p>&gt; &nbsp; &nbsp; &nbsp; &nbsp;ld4 &nbsp; &nbsp; r29 = [r34] ;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// load *b</p>
<p>Q1: Are all five really in the same block? Is there an implicit &#39;;;&#39; after an unconditional jump?</p>
<p>Q2: Why are there no &#39;;;&#39; in the first four instructions?</p>
<p>&nbsp; &nbsp;If NAT is set for r29:</p>
<p>&nbsp; &nbsp; &nbsp;1) Is there a guarantee that we jump to recovery first and don&#39;t return?</p>
<p>&nbsp; &nbsp; &nbsp;2) Is the content of ret0 defined?</p>
<div class="post">[<em>There is an implicit <code>;;</code> after any taken jump. If r29 has NaT set, then the jump at <code>chk.s</code> is taken, and a <code>;;</code> is auto-inserted, thereby preventing <code>ret0</code> from being set and the <code>br.ret</code> from being taken. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1196731">
				<div id="div-comment-1196731" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andre</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196731">
			August 4, 2015 at 4:26 pm</a>		</div>

		<p>Very interesting.</p>
<p>Thanks a lot, Raymond, for the posts and the answer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1196721">
				<div id="div-comment-1196721" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josh Bowman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150804-00/?p=91181#comment-1196721">
			August 4, 2015 at 4:26 pm</a>		</div>

		<p>@asdf:</p>
<p>35 years on from the introduction of x86, compilers are still improving with multiple-percent gains each major version. Small, but a non-negligible increase. While the science of compilers has evolved in tandem, it was already pretty solid when Itanic was introduced, and especially since the architecture throws out many x86 (and Power, Arm, Sparc) assumptions, there&#39;s still decades of theory and engineering work to truly take advantage of its uniqueness. The market didn&#39;t give it more than a half-decade, so here we are.</p>
<p>(It would probably have gained an on-chip recompiler anyway. Intel&#39;s the only one who ever understand it well enough.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

