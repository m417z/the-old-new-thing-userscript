<html>
<head>
<title>The Alpha AXP, part 11: Processor faults</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The Alpha AXP, part 11: Processor faults</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 21, 2017 / year-entry #188</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170821-00/?p=96855</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>2</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Sometimes you know where it happened. Sometimes you don't.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
There are three types of faults on the Alpha AXP:
</p>
<ul>
<li>Software faults</li>
<li>Hardware faults</li>
<li>Arithmetic faults</li>
</ul>
<p>
Software faults are those triggered by explicit
instructions,
such as
<code>CALL_PAL</code>.
These are calls that trap into the kernel and
are used as the Alpha AXP version of
<code>syscall</code>.
Software faults are raised synchronously,
and execution does not proceed past a software fault.
Consequently, they are restartable.
</p>
<p>
Hardware faults are those triggered by things like
page faults, hardware interrupts,
or software emulation.
Hardware faults are not necessarily raised synchronously;
execution can proceed past a hardware fault before the fault
is generated,
but the fault is nevertheless restartable.
Even though instructions past the faulting instruction may
have already executed, they can safely be executed again.
</p>
<p>
Arithmetic faults are tricky.
</p>
<p>
The
<code>ADD<u>x</u></code>,
<code>SUB<u>x</u></code>
and
<code>MUL<u>x</u></code>
instructions can take a <code>/V</code> suffix
to indicate that the instruction should raise a processor trap
if a signed integer overflow occurs.&sup1;
There is a similar suffix that can be applied to floating
point operations to trigger an arithmetic fault if something
goes wrong in the floating point calculation.
</p>
<p>
The catch is that the trap is not required to be raised at the point
of the operation.
The processor is permitted to delay the overflow trap indefinitely,
or until you do this:
</p>
<pre>
    TRAPB
</pre>
<p>
The trap barrier instruction tells the processor to raise any
overflow traps that are still pending.
The previous arithmetic operations need not run to completion;
they only need to run far enough to confirm that no overflow
has occurred.
The processor is allowed to execute past the <code>TRAPB</code>
instruction,
as long as it can do so without violating the constraints
of the <code>TRAPB</code> instruction.
</p>
<p>
In practice, you don't see the <code>/V</code> suffix
because C-like programming languages don't raise overflow exceptions.
They just define integer overflows to wrap, or leave the behavior
undefined.
</p>
<p>
You usually see <code>TRAPB</code> instructions at the start
and end of a function,
and whenever code enters or exits a
<code>__try</code> block.
Basically, it happens any time there is a change to how exceptions
are dispatched and unwound.
</p>
<p>
The fact that overflow traps can occur long after the
operation that caused the overflow means that
overflow traps are in general not recoverable,
because you don't know which register contains
the overflowed value.
(Indeed, the overflowed value may not even be in a register
any more.)
If you want your overflow traps to be recoverable,
you need to put the <code>TRAPB</code> immediately
after the instruction that potentially creates the overflow condition.
</p>
<p>
Okay, so that's overflow.
But what about carry?
We'll look at that next time.
</p>
<p>
&sup1;
The presence of overflow detection means that the <code>L</code>
versions of the instructions are not quite the same as
"Perform the <code>Q</code> operation, and then sign-extend the
low-order 32 bits of the result."
The numeric result is the same, but the overflow conditions are
different.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (2)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1306905">
				<div id="div-comment-1306905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170821-00/?p=96855#comment-1306905">
			August 21, 2017 at 8:35 am</a>		</div>

		<p>The behavior for software faults and hardware faults makes sense to me, but the behavior for arithmetic faults is a bit mind-boggling.  Surely there&#8217;s an implicit risk of a side-effect here, whereby the program sends an invalid result to disk/network/whatever?</p>
<p>Then again, I never needed to go further than Z80 or i8086 in assembler, so I&#8217;m hardly up to date with modern architectures. (And of course neither of those had arithmetic traps &#8212; they just had an overflow bit in the flags field.)</p>
<p>Did anybody question this behavior at the time, or was it taken for granted that overflow checking was either for wusses or was a compiler &#8220;optimisation?&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1306915">
				<div id="div-comment-1306915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170821-00/?p=96855#comment-1306915">
			August 21, 2017 at 9:56 am</a>		</div>

		<p>This thing is quite common for floating-point, less so for integer arithmetic. For example, on x86, SSE has &#8220;sticky&#8221; FP exception flag bits in the bottom of the MXCSR register that get set by the CPU based on floating-point exceptions but need to be cleared manually. The ARMv8 floating-point status register FPSR is similar, and other architectures have a similar facility.</p>
<p>The common unspoken assumption is that applications actually caring about such exceptions is quite rare. Reading x86 MXCSR or ARM FPSR &#8211; both architectures require special instructions for this &#8211; effectively acts as the equivalent of an Alpha TRAPB, serializing execution of all earlier FP arithmetic instructions.</p>
<p>All such facilities are biased to be really lightweight as long as faults don&#8217;t occur (because faults are assumed to be very rare). The idea is that the compiler is supposed to generate fast code for the &#8220;happy path&#8221;, and then check for faults (TRAPB, looking at status registers) only at interface boundaries or before side effects. Thus, you only pay the error-checking overhead once. Then, depending on your goals, you might either handle the fault and have a separate slow path that avoids the issue (or at least tries to identify where exactly the overflow happened, say for error reporting), or just abort.</p>
<p>A different approach that explicitly tries to propagate error conditions down dataflow edges so they can be checked late is Itanium&#8217;s Not-a-Thing bit (somewhat analogous to floating-point NaNs, but on integer registers, and used to flag results that depend on faulting computations; in essence, they&#8217;re hardware-supported &#8220;poison&#8221; values). Raymond has written about that before. :)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

