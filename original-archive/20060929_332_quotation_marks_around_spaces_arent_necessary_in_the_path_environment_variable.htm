<html>
<head>
<title>Quotation marks around spaces aren't necessary in the PATH environment variable</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Quotation marks around spaces aren&#8217;t necessary in the PATH environment variable</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 29, 2006 / year-entry #333</td></tr>
<tr><td><b>Tags:</b></td><td>tipssupport</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>28</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The purpose of quotation marks is to allow a character that would normally be interpreted as a delimiter to be included as part of a file name. Most of the time, this delimiter is the space. The CreateProcess function uses a space to separate the program name from its arguments. Most programs separate their command...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The purpose of quotation marks is to allow a character that would normally be interpreted as a delimiter to be included as part of a file name. Most of the time, this delimiter is the space. The <code>CreateProcess</code> function uses a space to separate the program name from its arguments. Most programs separate their command line arguments with a space. But the <code>PATH</code> environment variable doesn't use spaces to separate directories. It uses semicolons.</p>
<p> This means that if you want to add a directory with spaces in its name to the path, you don't need quotation marks since spaces mean nothing to the <code>PATH</code> environment variable. The quotation marks don't hurt, mind you, but they don't help either. </p>
<p> On the other hand, if the directory you want to add contains a semicolon in its name, then you do need the quotation marks, because it's the semicolon that you need to protect. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (28)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-msdnarchive even thread-even depth-1" id="comment-425703">
				<div id="div-comment-425703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MSDN Archive</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-425703">
			September 29, 2006 at 10:35 am</a>		</div>

		<p>Actually, sometimes the quotes do hurt. I&#8217;ve run into a couple of programs recently (can&#8217;t remember which now) that refused to load until I took the quotation marks out of the path variable. That took a while to figure out&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-425793">
				<div id="div-comment-425793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ShyGuy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-425793">
			September 29, 2006 at 11:13 am</a>		</div>

		<p>They also hurt because they are characters in what is sometimes a very limited resource (on Win9x at least).</p>
<p>There is a limit on length of env vars in Win9x (at least)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-425873">
				<div id="div-comment-425873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.hoyty.com/hoytyweblog' rel='external nofollow' class='url'>Brian Hoyt</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-425873">
			September 29, 2006 at 12:36 pm</a>		</div>

		<p>I must admit I have never nor had thought of using ; in a dir. &nbsp;I for some reason thought that was a forbidden character.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-425883">
				<div id="div-comment-425883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">And</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-425883">
			September 29, 2006 at 12:40 pm</a>		</div>

		<p>Why wasnt |(pipe) or * or some other invalid char used as the separator?</p>
<div CLASS=post>[<i>I trust you&#8217;re smart enough to answer this for yourself. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-425913">
				<div id="div-comment-425913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ma</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-425913">
			September 29, 2006 at 1:25 pm</a>		</div>

		<blockquote><p>
  Quotation marks around spaces aren&#8217;t necessary in the PATH environment variable</p>
<p>In Windows 9x, you NEED to use quotation marks for paths with spaces, at least in autoexec.bat
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-425933">
				<div id="div-comment-425933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.explorewindows.com' rel='external nofollow' class='url'>Vipin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-425933">
			September 29, 2006 at 1:42 pm</a>		</div>

		<p>In the past project, I had to place set of strings in a config file. The way I went about placing it was like this:-<br />
<br />Strings=&lt;len1&gt;=&lt;string1&gt;&lt;len2&gt;=&lt;string2&gt;&#8230;.</p>
<p>so the basic unit over there was &lt;len&gt;=&lt;string&gt;<br />
<br />let us say the two strings were &quot;hello&quot; and &quot;world&quot; then in the config file, I place it like this:-<br />
<br />Strings=5=Hello5=world</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-425953">
				<div id="div-comment-425953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://levicki.blogspot.com/' rel='external nofollow' class='url'>igor_levicki</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-425953">
			September 29, 2006 at 2:09 pm</a>		</div>

		<p>And what happens if a program unaware of long paths parses PATH variable which contains spaces?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-425983">
				<div id="div-comment-425983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Cooke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-425983">
			September 29, 2006 at 3:06 pm</a>		</div>

		<p>Igor,</p>
<p>If I recall correctly, Windows fakes up some environment variables for 16-bit processes, including the PATH. It contains the short versions of the filenames from the perspective of such programs.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hswear3 even thread-even depth-1" id="comment-425993">
				<div id="div-comment-425993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hswear3</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-425993">
			September 29, 2006 at 3:11 pm</a>		</div>

		<p>I always thought the semicolon was an invalid character for files and directories; but it is not. I just did an experiment on Windows XP.</p>
<p>From cmd.exe, mkdir test1;test2 creates two directories but mkdir &quot;test1;test2&quot; creates one directory.</p>
<p>Explorer does not complain at all and creates a folder named test1;test.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-426003">
				<div id="div-comment-426003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jamiej</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-426003">
			September 29, 2006 at 3:21 pm</a>		</div>

		<p>Recently I came across a directory ending in a space. Explorer had no problem peering inside, however the command prompt could not even with quotes. This piqued my interest so I decided to see how .Net would handle it.</p>
<p>System::IO::GetDirectories on the parent enumerated the folder. Its name included the trailing space. Using GetFiles on the folder threw DirectoryNotFoundException. I then tried to encapsulate the space using quotes and finally appending a slash to no avail.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-426043">
				<div id="div-comment-426043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hobbes78</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-426043">
			September 29, 2006 at 4:48 pm</a>		</div>

		<p>jamiej: that&#8217;s when dir&#8217;s /x switch comes in handy&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-425903">
				<div id="div-comment-425903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RC5</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-425903">
			September 29, 2006 at 1:04 pm</a>		</div>

		<p>Well, we all can understand the implication of using | or &gt; or &lt;. </p>
<p>But * ? </p>
<p>SET P=*.* </p>
<p>sets P to.. *.*. So no expansion is done and it could easily be used when the system was designed as a separator.</p>
<div CLASS=post>[<i>Okay, I guess people don&#8217;t know their history. Unix uses a colon to separate directories in the PATH environment variable. Colon is a valid path character in MS-DOS (drive letter identifier), so the next closest invalid file name character was chosen &#8211; the semicolon. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-426113">
				<div id="div-comment-426113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-426113">
			September 29, 2006 at 8:15 pm</a>		</div>

		<p>mikedodd, I had exactly the same problem just last week. Turned out the DirectX SDK inserted its UtilitiesBinx86 folder at the start of my PATH and used quotes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-426223">
				<div id="div-comment-426223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dennis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-426223">
			September 30, 2006 at 5:23 pm</a>		</div>

		<p>Rational&#8217;s ClearMake and IAR&#8217;s C compiler threw fits until we quoted the PATH environment variable. &nbsp;Windows itself doesn&#8217;t mind but other people&#8217;s code who uses it may not interpret it right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-426253">
				<div id="div-comment-426253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-426253">
			October 1, 2006 at 5:30 pm</a>		</div>

		<p>Ben Cooke (&amp; hobbes78 too):<br />
<br />Windows NTx does (and sometimes even can) not place the dreaded short filenames in environment variables or the registry: NTFS knows a setting &quot;NTFSDisable8dot3NameCreation&quot;!</p>
<p>I&#8217;d encourage EVERY developer to turn this setting on (as early as possible, i.e. per modification of the SETUPREG.HIV on the installation media) to catch errors of bad installers!</p>
<p>JFTR: PowerPoint 2003 Viewer and Excel 2003 Viewer both have errors in their installation routines (they come as *.msi; it&#8217;t sad that there is no automatic check in the tools or even the msiexec.exe) and don&#8217;t place &quot; around the paths they write to the registry.<br />
<br />Trustworthy computing in Redmond?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-426263">
				<div id="div-comment-426263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/jgalloway' rel='external nofollow' class='url'>Jon Galloway</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-426263">
			October 1, 2006 at 5:39 pm</a>		</div>

		<p>Raymond, this reminds me of something kind of similar that I ran into recently. .NET console applications seem to have problems with arguments which end in &#8220;, and I can&#8217;t tell if it&#8217;s a .NET thing, a Windows thing, something in between, or boneheadedness on my part. Care to comment?</p>
<p><a rel="nofollow" target="_new" href="http://weblogs.asp.net/jgalloway/archive/2006/09/13/Command-Line-Confusion.aspx" rel="nofollow">http://weblogs.asp.net/jgalloway/archive/2006/09/13/Command-Line-Confusion.aspx</a></p>
<div CLASS=post>[<i>Command line parsing is the program&#8217;s responsibility. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-426323">
				<div id="div-comment-426323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/jgalloway' rel='external nofollow' class='url'>Jon Galloway</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-426323">
			October 2, 2006 at 1:16 am</a>		</div>

		<p>Re: Command line parsing, I understand that it&#8217;s the program&#8217;s responsibility, but it appears that my program&#8217;s not being given the arguments correctly. See my post for more details, but here&#8217;s an example that shows what I&#8217;m talking about. In this case, the Environment.CommandLine property is correct, but args[] (which is populated by the .NET framework) is missing characters.</p>
<p>C:Temp&gt;CommandLineArgumentsTest.exe &#8220;\test\&#8221; &#8220;\test\&#8221;<br />
<br />Environment.CommandLine: CommandLineArgumentsTest.exe &#8220;\test\&#8221; &#8220;\test\&#8221;<br />
<br />args[0]: \test<br />
<br />args[1]: \test&#8221;</p>
<div class="post">[<i>You&#8217;ve shown it yourself. Your program was given the arguments correctly by the core OS. The issue is that your program asks the .NET Framework to do the parsing, and apparently you don&#8217;t like the way they do it. The core OS isn&#8217;t involved. Its job is to give you the raw command line; the rest is up to you. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-426823">
				<div id="div-comment-426823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">windows.net = os</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-426823">
			October 3, 2006 at 7:51 am</a>		</div>

		<p>.net is an os component.</p>
<p>It&#8217;s should not be the app developer&#8217;s duty to parse the command line.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-426873">
				<div id="div-comment-426873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-426873">
			October 3, 2006 at 9:09 am</a>		</div>

		<blockquote><p>
  .net is an os component.
</p></blockquote>
<p>Well no, actually, it isn&#8217;t. &nbsp;It&#8217;s an optional addon, see where Windows Update / Microsoft Update put it.</p>
<p>See also this blog&#8217;s tagline:</p>
<blockquote><p>
  not actually a .NET blog
</p></blockquote>
<p>Now:</p>
<blockquote><p>
  It&#8217;s should not be the app developer&#8217;s duty to parse the command line.
</p></blockquote>
<p>There I agree; that&#8217;s why I think the way that Unix-like OSes do it is better. &nbsp;Your main() function gets handed an array of strings, rather than one long string; the shell has already done the parsing, and the kernel has kept the array-of-strings setup all the way through until it starts your program. &nbsp;(Or in the case of Windows, either cmd.exe or explorer.exe has done the parsing.)</p>
<p>Now I realize the reason this doesn&#8217;t happen is because cmd.exe used to be command.com, and it used to be that DOS only had 640K of RAM available, and command.com had to use as little of that as possible. &nbsp;But that argument just means that each program had to include the same parsing code over and over again (and get it wrong in many cases! &nbsp;apparently including .net for some odd command lines); it didn&#8217;t mean the parsing code could go away. &nbsp;Well, unless the program didn&#8217;t care about its arguments; then it could go away.</p>
<p>For some reason, it just seems like a bad tradeoff&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-427053">
				<div id="div-comment-427053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-427053">
			October 3, 2006 at 9:12 pm</a>		</div>

		<p>Tuesday, October 03, 2006 9:09 AM by BryanK</p>
<blockquote><p>
  &gt; .net is an os component.
</p></blockquote>
<p>></p>
<blockquote><p>
  Well no, actually, it isn&#8217;t. &nbsp;It&#8217;s an</p>
<p>  optional addon
</p></blockquote>
<p>Prior to Vista that&#8217;s true, it&#8217;s not a critical integrated component like IE. &nbsp;However, the quoted poster was correct for Vista.</p>
<blockquote><p>
  See also this blog&#8217;s tagline:</p>
<p>  &gt; not actually a .NET blog
</p></blockquote>
<p>Of course that&#8217;s true. &nbsp;Now I&#8217;m wondering how some .NET stuff sneaked into this blog a few months ago.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-427173">
				<div id="div-comment-427173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-427173">
			October 4, 2006 at 8:39 am</a>		</div>

		<blockquote><p>
  Prior to Vista that&#8217;s true
</p></blockquote>
<p>And since there is no such thing as Vista yet, only betas (and RCs?), it is still true. &nbsp;And depending on how many times Vista gets pushed back again before it finally gets released, it may be true for quite some time yet.</p>
<p>(OK, yes, I&#8217;m being pedantic now. &nbsp;You&#8217;re right, I wasn&#8217;t paying any attention to Vista when I made that comment.)</p>
<p>Regarding the &quot;not actually a .NET blog&quot; comment, my point was that since the issue is with .Net&#8217;s command line parsing code, and Raymond is on the shell team, he (1) probably has no way of even looking into the problem, and (2) very likely can&#8217;t do anything about it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-427223">
				<div id="div-comment-427223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/jgalloway' rel='external nofollow' class='url'>Jon Galloway</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-427223">
			October 4, 2006 at 10:54 am</a>		</div>

		<p>Carlos commented on my blog post and set me straight. It turns out that it&#8217;s not just a .NET thing, it&#8217;s a CommandLineToArgvW thing.</p>
<p>&quot;Most apps (including .Net apps) use CommandLineToArgvW to decode their command lines. &nbsp;It uses crazy escaping rules which explain the behaviour you&#8217;re seeing.&quot;</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/shell/reference/functions/commandlinetoargv.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/shell/reference/functions/commandlinetoargv.asp</a></p>
<p>CommandLineToArgvW has a special interpretation of backslash characters when they are followed by a quotation mark character (&quot;), as follows:</p>
<p> &nbsp; &nbsp;* 2n backslashes followed by a quotation mark produce n backslashes followed by a quotation mark.</p>
<p> &nbsp; &nbsp;* (2n) + 1 backslashes followed by a quotation mark again produce n backslashes followed by a quotation mark.</p>
<p> &nbsp; &nbsp;* n backslashes not followed by a quotation mark simply produce n backslashes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-427523">
				<div id="div-comment-427523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/jgalloway/archive/2006/10/05/_5B002E00_NET-Gotcha_5D00_-Commandline-args-ending-in-_5C002200_-are-subject-to-CommandLineToArgvW-whackiness.aspx' rel='external nofollow' class='url'>JonGalloway.ToString()</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-427523">
			October 5, 2006 at 4:00 am</a>		</div>

		<p>I recently posted on my confusion when I tried to use commandline arguments ending in &quot; and got unpredictable</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-427483">
				<div id="div-comment-427483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rsclient</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-427483">
			October 4, 2006 at 9:53 pm</a>		</div>

		<p>A quick note about CommandLineToArgvW &#8212; these easiest way to get the command-line back in properly parsed form is&#8212;-to use the __argc and __argv global variables that *all* C (and C++) program are allowed to access.</p>
<p>They aren&#8217;t documented very much, but they work like a charm. &nbsp;And yes, I already reported to Microsoft that they should be mentioned more in the documentation :-)</p>
<div class="post">[<i>It depends on your definition of &#8220;all&#8221;. Those internal variables are specific to the Microsoft Visual C runtime. If you use some other company&#8217;s C/C++ compiler you may not have those variables. Plus of course if they&#8217;re not documented then they might stop working at any time. But you knew that, right? I mean, you wouldn&#8217;t recommend people do stuff that might break in the future, woudl you? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-427813">
				<div id="div-comment-427813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">windows.net = os</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-427813">
			October 5, 2006 at 12:29 pm</a>		</div>

		<blockquote><p>
  And since there is no such thing as Vista yet, only betas (and RCs?), it is still true.
</p></blockquote>
<p>windows.net (server2k3) has .net framework installed, correct? At least it is bundled with windows ce .net, including windows mobile.</p>
<p>When .net framework is installed, it&#8217;s an os component, much like directx (wasn&#8217;t bundled with win95a/b &#8211; but could be installed).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-427863">
				<div id="div-comment-427863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">use the standard please</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-427863">
			October 5, 2006 at 1:19 pm</a>		</div>

		<p>&gt; Those internal variables are specific to the Microsoft Visual C runtime.</p>
<p>Because argc &amp; argv are broken, you are thus suggesting it would be better to use unportable OS specific functions (CommandLineToArgvW/GetCommandLineW)?</p>
<p>If you use some other company&#8217;s OS you may not have those functions. But you knew that, right? I mean, you wouldn&#8217;t recommend people do stuff that might break in the future, would you?</p>
<div class="post">[<i>If you use some other company&#8217;s compiler you may not have those variables. I don&#8217;t see what&#8217;s so hard about declaring your own global variables and assigning to them the first thing in your main(). Now your code is portable to all compilers and doesn&#8217;t use undocumented features. I&#8217;m not sure what you mean about breaking in the future. CommandLineToArgvW and GetCommandLineW are documented and supported. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-427953">
				<div id="div-comment-427953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-427953">
			October 5, 2006 at 2:44 pm</a>		</div>

		<p>&gt; Now your code is portable to all compilers</p>
<p>No, now your code is portable to all *Windows* compilers. &nbsp;Unless Unix (i.e. &#8220;some other company&#8217;s OS&#8221;) has a CommandLineToArgvW call that acts the way Windows&#8217; does, that I&#8217;ve missed? &nbsp;;-P</p>
<p>Using the values that the C library startup routine passes to your main() function is *supposed* to work on any OS that has a C compiler.</p>
<p>(Now, if the program&#8217;s C library uses CommandLineToArgvW to get these values, it still won&#8217;t be portable as far as the user is concerned. &nbsp;They&#8217;ll pass &#8220;\&#8221; on the command line, and expect one backslash and no quotes. &nbsp;&#8220;\&#8221; will be expected to give one backslash and one quote (and not terminate the command line). &nbsp;Or at least, this is what happens under any Bourne shell, and it seems a *heck* of a lot more logical to me. &nbsp;But, the code will at least *compile* on other OSes.)</p>
<p>(To clarify: I suspect that &#8220;use the standard please&#8221; meant that you should use the arguments to main(), not the undocumented __argc and __argv variables provided by only the Microsoft C library. &nbsp;But I don&#8217;t know what he meant for sure, so maybe I shouldn&#8217;t assume it. &nbsp;And since you were talking about the undocumented variables, it seems that his argument doesn&#8217;t make much sense in the context it was presented.)</p>
<div class="post">[<i>I think we&#8217;re talking about different things. I&#8217;m saying that using the __argc and __argv variables is not portable. If you want portable, then do this:</p>
<pre>int program_argc;
int program_argv;
int main(int argc, char **argv)
{
 program_argc = argc;
 program_argv = argv;
 ...
}
</pre>
<p>CommandLineToArgvW was somebody else&#8217;s suggestion. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-452763">
				<div id="div-comment-452763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/michkap/archive/2006/12/13/1275292.aspx' rel='external nofollow' class='url'>Sorting It All Out : Sometimes what a person really wants is a LACK of size</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060929-06/?p=29533#comment-452763">
			December 13, 2006 at 7:46 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.msdn.com/michkap/archive/2006/12/13/1275292.aspx" rel="nofollow">http://blogs.msdn.com/michkap/archive/2006/12/13/1275292.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

