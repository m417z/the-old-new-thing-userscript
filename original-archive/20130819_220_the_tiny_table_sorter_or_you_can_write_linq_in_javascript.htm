<html>
<head>
<title>The tiny table sorter - or - you can write LINQ in JavaScript</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The tiny table sorter &#8211; or &#8211; you can write LINQ in JavaScript</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 19, 2013 / year-entry #221</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130819-00/?p=3473</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">I had a little side project that displayed status information in a table, and I figured, hey, let me add sorting. And it was a lot easier than I thought. I just put the header row in the THEAD and the table contents in the TBODY, then I could use this code to sort the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
I had a little side project that displayed status information in a table,
and I figured,
hey,
let me add sorting.
And it was a lot easier than I thought.
I just put the header row in the <code>THEAD</code> and the table
contents in the <code>TBODY</code>,
then I could use this code to sort the table:
</p>
<pre>
function sortByColumn(table, sortCol, direction) {
 direction = direction || 1; // default sort ascending
 var tBody = table.tBodies[0];
 Array.prototype.map.call(tBody.rows, function (row) {
   var cell = row.cells[sortCol];
   return { row: row, key: cell.sortKey || cell.innerText };
 }).sort(function (a, b) {
   if (a.key &lt; b.key) return -direction;
   if (a.key &gt; b.key) return direction;
   return 0;
 }).forEach(function (o) {
   tBody.appendChild(o.row);
 });
}
</pre>
<p>
Each cell can have an optional <code>sort&shy;Key</code> custom attribute
which specifies how the item should sort.
If there is no <code>sort&shy;Key</code>, then I just use the cell's
<code>inner&shy;Text</code>.
(My table was constructed at runtime from an
<code>Xml&shy;Http&shy;Request</code>,
so adding the <code>sort&shy;Key</code> to the date fields was not difficult.)
</p>
<p>
One handy thing about the functions in the <code>Array</code> prototype
is that as a rule, they do not actually require that the <code>this</code>
object be an array.
As long as it has a <code>length</code> property and integer subscripts,
you can use it as if it were an array.
The <code>map</code> function is okay with read-only access;
some other function like <code>sort</code> require read-write access.
To call a function with a custom <code>this</code> parameter,
you use the <code>call</code> method on the function object itself,
passing the artificial <code>this</code> as the first parameter,
with the remaining parameters following.
</p>
<p>
First, the <code>sort&shy;By&shy;Column</code>
function takes the rows of the table body and
<code>map</code>s each one to a record consisting of the sort key
and the original row.
The sort key is the <code>sort&shy;Key</code> property,
if true-ish, we will use it; otherwise, we use the text of the cell.
</p>
<p>
I took a few shortcuts here.
Depending on your browser, you may need to use
<code>text&shy;Content</code> instead of <code>inner&shy;Text</code>,
and you may need to use <code>get&shy;Attribute</code> instead of
property notation.
And my function doesn't handle the case where the sort key is defined
but is false-ish.
Here's a more general version:
</p>
<pre>
var textProperty = table.innerText ? "innerText" : "textContent";
...
   return { row: row,
            key: cell.hasAttribute("sortKey") ?
                 cell.getAttribute(sortKey") : 
                 cell[textProperty] };
...
</pre>
<p>
Anyway, after we map the rows to an array of sort records,
we sort the records by comparing the <code>key</code>,
either by string or by number.
The code assumes that every column is either all-strings or all-numbers;
it doesn't try to handle the mixed case.
This is easy to enforce in the code
that generates the table
because the only way to get a non-string
as a sort key is to set it explicitly as the <code>sort&shy;Key</code>
attribute.
</p>
<p>
Finally, we take the sorted records and insert the sorted rows back
into the table.
</p>
<p>
This is a common programming pattern: Decorate, operate, undecorate.&sup1;
We started with a bunch of rows,
and we wanted to sort them.
We can't sort rows directly, so instead we converted the rows
into something we <i>can</i> sort, but remembered the row that each
converted item came from.
We then perform the sort operation,
and then recover the original rows from the decoration,
now in sorted order,
which we can then use for whatever operation we really wanted.
I sort of combined the last two step into one.
More formally, it would look like this:
</p>
<pre>
function sortByColumn(table, sortCol, direction) {
 direction = direction || 1; // default sort ascending
 var tBody = table.tBodies[0];
 <font COLOR=blue>// decorate: convert the row into a record</font>
 Array.prototype.map.call(tBody.rows, function (row) {
   var cell = row.cells[sortCol];
   return { row: row, key: cell.sortKey || cell.innerText };
 })
 <font COLOR=blue>// operate on the record</font>
 .sort(function (a, b) {
   if (a.key &lt; b.key) return -direction;
   if (a.key &gt; b.key) return direction;
   return 0;
 })
 <font COLOR=blue>// undecorate: convert the record back into a row
 .map(function (o) {
   return o.row;
 })
 // operate on the sorted rows
 .forEach(function (r) {
   tBody.appendChild(r);
 })</font>;
}
</pre>
<p>
Category theorists I'm sure have some fancy names they can use to describe
this concept,
like <i>natural transformation</i> and <i>functor category</i>
and <i>splitting</i>.
</p>
<p>
LINQ also has a fancy name for this: <i>let</i>, which is
<a HREF="http://msdn.microsoft.com/en-us/library/bb308966.aspx#csharp3.0overview_topic18d">
a special case of <i>select</i></a>
where LINQ generates the record for you.
</p>
<table BORDER=1 STYLE="border-collapse: collapse">
<tr>
<th VALIGN=baseline>LINQ let query</th>
<td VALIGN=baseline><code>from d in data let y = f(d.xValue)</code></td>
<tr>
<th VALIGN=baseline>LINQ query</th>
<td VALIGN=baseline><code>from d in data
         select new { d = d, y = f(d.xValue) }</code></td>
</tr>
<tr>
<th VALIGN=baseline>LINQ fluent</th>
<td VALIGN=baseline><code>data.Select(d =&gt;
        new { d = d, y = f(d.xValue) })</code></td>
</tr>
<tr>
<th VALIGN=baseline>LINQ fluent<br>old delegate syntax</th>
<td VALIGN=baseline><code>data.Select(delegate(Data d) {
        return new { d = d, y = f(d.xValue) }; })</code></td>
</tr>
<tr>
<th VALIGN=baseline>JavaScript</th>
<td VALIGN=baseline><code>data.map(function (d)
        { return { d: d, y: f(d.xValue) }; })</code></td>
</tr>
</table>
<p>
JavaScript's <code>map</code> is the same as LINQ's <i>Select</i>,
just with different decorative bits.
</p>
<table BORDER=0 CELLPADDING=0 CELLSPACING=0>
<tr>
<td VALIGN=baseline>
      <code>data.Select(delegate(Data d)
            { return new { d = d, y = f(d.xValue) }; })</code></td>
</tr>
<tr>
<td VALIGN=baseline>
      <code>data.map&nbsp;&nbsp;&nbsp;(function(&nbsp;&nbsp;&nbsp;&nbsp; d)
            { return &nbsp;&nbsp;&nbsp;
              { d:&nbsp; d, y:&nbsp; f(d.xValue) }; })</code></td>
</tr>
</table>
<p>
Similarly,
JavaScript's <code>filter</code> is the same as LINQ's <i>Where</i>,
JavaScript's <code>some</code> is the same as LINQ's <i>Any</i>,
JavaScript's <code>every</code> is the same as LINQ's <i>All</i>,
and
JavaScript's <code>reduce</code> is the same as LINQ's <i>Aggregate</i>.
JavaScript's <code>sort</code> is sort of like LINQ's <i>Sort</i>,
except that it modifies the array in place rather than generating a new
result.
</p>
<p>
<b>Bonus chatter</b>:
In theory, I could've just sorted the table directly by doing the
sort key extraction inside the comparator:
</p>
<pre>
function sortByColumn(table, sortCol, direction) {
 direction = direction || 1; // default sort ascending
 var tBody = table.tBodies[0];
 Array.prototype.map.call(tBody.rows, function (r) {
   return r;
 }).sort(function (a, b) {
   var keyA = a.cells[sortCol].sortKey || a.cells[sortCol].innerText;
   var keyB = b.cells[sortCol].sortKey || b.cells[sortCol].innerText;
   if (keyA &lt; keyB) return -direction;
   if (keyA &gt; keyB) return direction;
   return 0;
 }).forEach(function (r) {
   tBody.appendChild(r);
 });
}
</pre>
<p>but since I had to convert the rows into an array anyway
(since you cannot modify the <code>rows</code> property by subscript
assignment), I figured I'd do the extracting while I was there.
</p>
<p>
I guess I could've added a LINQy sort method:
</p>
<pre>
function defaultComparator(a, b) {
  if (a &lt; b) return -1;
  if (a &gt; b) return 1;
  return 0;
}

Array.prototype.orderBy =
function Array_orderBy(extractKey, comparator, direction) {
  direction = direction || 1;
  comparator = comparator || defaultComparator;
  return Array.prototype.map.call(this, function (d) {
    return { key: extractKey.call(d), original: d };
  }).sort(function (a, b) {
    return direction * comparator(a.key, b.key);
  }).map(function (r) {
    return r.original;
  });
};
</pre>
<p>
Then my <code>sort&shy;By&shy;Column</code> function would just be
</p>
<pre>
function sortByColumn(table, sortCol, direction) {
 direction = direction || 1; // default sort ascending
 var tBody = table.tBodies[0];
 Array.prototype.orderBy.call(tBody.rows, function (r) {
   var cell = r.cells[sortCol];
   return { key: cell.sortKey || cell.innerText, row: r };
 }, direction).forEach(function (r) {
   tBody.appendChild(r);
 });
}
</pre>
<p>
But if I had done that, I wouldn't have had a cute one-function table sorter!
</p>
<p>
&sup1;
In perl, this pattern is known as the
<a HREF="http://en.wikipedia.org/wiki/Schwartzian_transform">
Schwartzian transform</a>.
I prefer to think of it as completing the commutative diagram:
</p>
<table BORDER=0 CELLPADDING=0 CELLSPACING=0 STYLE="line-height: 1.2">
<tr>
<td></td>
<td></td>
<td ALIGN=center><var>g</var></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><font SIZE=+2><var>B</var></font></td>
<td ALIGN=center STYLE="font-size: 200%">&rarr;</td>
<td><font SIZE=+2><var>B</var></font></td>
</tr>
<tr>
<td><var>f</var></td>
<td STYLE="font-size: 200%">&darr;</td>
<td></td>
<td STYLE="font-size: 200%">&darr;</td>
<td><var>f</var></td>
</tr>
<tr>
<td></td>
<td><font SIZE=+2><var>A</var></font></td>
<td ALIGN=center STYLE="font-size: 200%">&#x21e2;</td>
<td><font SIZE=+2><var>A</var></font></td>
<td></td>
</tr>
<tr>
<td></td>
<td ALIGN=center COLSPAN=3>
    <var>f</var> &#x2218; <var>g</var> &#x2218; <var>f</var>&#x207b;&sup1;
    </td>
<td></td>
</tr>
</table>
<p>
Mathematicians get all excited when they see something
of the form
<var>f</var> &#x2218; <var>g</var> &#x2218; <var>f</var>&#x207b;&sup1;:
That's the form of a conjugation operation.
Which makes sense, because conjugation is a way of
looking at an algebraic group through different-colored glasses.
In our case, the magic glasses make every row look like its sort key.
</p>
<p>
<b>Bonus chatter</b>:
<a HREF="http://jscriptlinq.codeplex.com/">
$linq</a> is a Javascript LINQ library.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1073413">
				<div id="div-comment-1073413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130819-00/?p=3473#comment-1073413">
			August 19, 2013 at 8:12 am</a>		</div>

		<p>Perhaps the biggest difference is that LINQ is lazy, in that the results are only evaluated when you ask for them (so if you change the underlying array, you get different results back), while your methods are eager (&quot;strict&quot;), in that the results are computed when your functions are called.</p>
<p>It looks like $linq is lazy, too, as evidenced by the existence of its .toArray() function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1073423">
				<div id="div-comment-1073423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130819-00/?p=3473#comment-1073423">
			August 19, 2013 at 8:33 am</a>		</div>

		<p>A few years ago, I started on writing a JavaScript-LINQ (complete with enumerables) of my own, I&#39;m glad to see that somebody else had the same idea and wasn&#39;t as procrastinating as me! ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leonardo_lourenco_silvahotmail-com even thread-even depth-1" id="comment-1073443">
				<div id="div-comment-1073443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leonardo+Louren%C3%A7o+Silva' rel='external nofollow' class='url'>Leonardo Lourenço Silva</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130819-00/?p=3473#comment-1073443">
			August 19, 2013 at 11:13 am</a>		</div>

		<p>Exemplo muito show, sonho de consumo linq no JS </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1073533">
				<div id="div-comment-1073533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">The Barnyard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130819-00/?p=3473#comment-1073533">
			August 20, 2013 at 2:47 am</a>		</div>

		<p>This decorate-sort-undecorate pattern is called a Schwartzian transform :)</p>
<div class="post">[<em>Is there anything else in the article you feel like repeating? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1073693">
				<div id="div-comment-1073693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/leonardo.herrera_4000_gmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>leonardo.herrera@gmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130819-00/?p=3473#comment-1073693">
			August 20, 2013 at 1:51 pm</a>		</div>

		<p>One minor nitpick: Perl is the language and perl the interpreter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1073723">
				<div id="div-comment-1073723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Styles</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130819-00/?p=3473#comment-1073723">
			August 21, 2013 at 5:44 am</a>		</div>

		<p>Human sacrifice, dogs and cats living together, mass hysteria, Raymond Chen blogging about JavaScript.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jesper-lindholm even thread-even depth-1" id="comment-1074323">
				<div id="div-comment-1074323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/JesperTreetop' rel='external nofollow' class='url'>JesperTreetop</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130819-00/?p=3473#comment-1074323">
			August 23, 2013 at 10:06 am</a>		</div>

		<p>LINQ stands for Language Integrated Query, integration meaning that the query expressions are rewritten into method invocations, particularly helpfully with &quot;let&quot; as you say. No such thing happens here. Maybe the proper name for this post is that you can write and use LINQ operators in JavaScript and roughly mirror the fluent enumerable API? Couldn&#39;t you call Common LISP (a great oxymoron) and Perl LINQ-compatible by this standard?</p>
<p>Huge nitpick, I know, but also motivated. If there&#39;s no integration, why not also write a ray tracer and call it a Language Integrated Ray Tracer?</p>
<div class="post">[<em>Because &quot;You can write something that syntactically resembles LINQ in JavaScript&quot; is more awkward. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jesper-lindholm odd alt thread-odd thread-alt depth-1" id="comment-1074353">
				<div id="div-comment-1074353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/JesperTreetop' rel='external nofollow' class='url'>JesperTreetop</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130819-00/?p=3473#comment-1074353">
			August 23, 2013 at 11:30 am</a>		</div>

		<p>Fair enough.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

