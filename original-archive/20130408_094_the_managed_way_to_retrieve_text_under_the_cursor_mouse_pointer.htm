<html>
<head>
<title>The managed way to retrieve text under the cursor (mouse pointer)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The managed way to retrieve text under the cursor (mouse pointer)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 8, 2013 / year-entry #95</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130408-00/?p=4733</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's Little Program is a managed version of the text-extraction program from several years ago. It turns out that it's pretty easy in managed code because the accessibility folks sat down and wrote a whole framework for you, known as UI Automation. (Some people are under the mistaken impression that UI Automation works only for...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program is a managed version of the
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/04/23/118893.aspx">
text-extraction program from
several years ago</a>.
It turns out that it's pretty easy in managed code
because the accessibility folks sat down and wrote a whole framework for you,
known as
<a HREF="http://msdn.microsoft.com/library/ms747327">
UI Automation</a>.
</p>
<p>
(Some people are under the mistaken impression that UI Automation
works only for extracting data from applications written in managed code.
That is not true.
Native code can also be a UI Automation provider.
The confusion arises because the name <i>UI Automation</i> is used
both for
<a HREF="http://msdn.microsoft.com/library/ee684009">
the underlying native technology</a>
as well as for
<a HREF="http://msdn.microsoft.com/library/ms747327">
the managed wrappers</a>.)
</p>
<pre>
using System;
using System.Windows;
using System.Windows.Forms;
using System.Windows.Automation;

class Program
{
 static Point MousePos {
  get { var pos = Control.MousePosition;
        return new Point(pos.X, pos.Y); }
 }

 public static void Main()
 {
  for (;;) {
   AutomationElement e = AutomationElement.FromPoint(MousePos);
   if (e != null) {
    Console.WriteLine("Name: {0}",
     e.GetCurrentPropertyValue(AutomationElement.NameProperty));
    Console.WriteLine("Value: {0}",
     e.GetCurrentPropertyValue(ValuePattern.ValueProperty));
    Console.WriteLine();
   }
   System.Threading.Thread.Sleep(1000);
  }
 }
}
</pre>
<p>
We use the <code>From&shy;Point</code> method to locate the
automation element under the current mouse position and print
its name and value.
</p>
<p>
Well that was pretty simple.
I may as well do something a little more challenging.
Since the feature is known as UI <i>Automation</i>,
I'll try automating the <i>Run</i> dialog by
programmatically entering some text and then clicking OK.
</p>
<pre>
using System.Windows.Automation;

class Program
{
 static AutomationElement FindById(AutomationElement root, string id)
 {
  return root.FindFirst(TreeScope.Children,
   new PropertyCondition(AutomationElement.AutomationIdProperty, id));
 }

 public static void Main()
 {
  var runDialog = AutomationElement.RootElement.FindFirst(
   TreeScope.Children,
   new PropertyCondition(AutomationElement.NameProperty, "Run"));
  if (runDialog == null) return;

  var commandBox = FindById(runDialog, "12298");
  var valuePattern = commandBox.GetCurrentPattern(ValuePattern.Pattern)
                     as ValuePattern;
  valuePattern.SetValue("calc");

  var okButton = FindById(runDialog, "1");
  var invokePattern = okButton.GetCurrentPattern(InvokePattern.Pattern)
                     as InvokePattern;
  invokePattern.Invoke();
 }
}
</pre>
<p>
The program starts by looking for a window named <i>Run</i>
by performing a children search on the root element
for an element whose <i>Name</i> property is equal to
<code>"Run"</code>.
</p>
<p>
Assuming it finds it,
the program looks for a child element whose
<a HREF="http://msdn.microsoft.com/en-us/library/system.windows.automation.automationelement.automationelementinformation.automationid.aspx">
automation ID</a>
is
<code>"12298"</code>.
How did I know that was the automation ID to use?
<a HREF="http://msdn.microsoft.com/en-us/library/aa349646.aspx">
The documentation for UI Automation</a>
suggests using a tool like UI Spy to look up the automation IDs.
</p>
<p>
Mind you, since I am automating something outside my control,
I have to accept that the automation ID may change in future
versions of Windows.
(It's not like they check with me before making changes.)
But this is a Little Program, not a production-level program,
so that's a limitation I will accept,
since I'm the only person who's going to use this program,
and if it stops working, I know who to talk to (namely, me).
</p>
<p>
Anyway, afer we find the command box, I ask for its Value pattern.
Automation elements can support <i>patterns</i>
which expose additional properties and methods specific to particular
uses.
In our case, the Value pattern lets us get and set the value
of an editable object,
so we use the <code>Set&shy;Value</code> method to set the
text in the Run dialog to <tt>calc</tt>.
</p>
<p>
Next, we look for the OK button,
which UI Spy told me had automation ID&nbsp;1.
We ask for the Invoke pattern on the button
and then call the <code>Invoke</code> method.
The Invoke pattern is the pattern for objects that do
just one thing,
and <code>Invoke</code> means "Do
<a HREF="http://www.imdb.com/title/tt0117887/">
that thing that you do</a>."
</p>
<p>
Open the <i>Run</i> dialog and run this program.
It should programmatically set the command line to
<tt>calc</tt>, then click OK.
Hopefully, this will run the Calculator.
</p>
<p>
Just for fun, here's another program that just dumps the
automation properties and patterns for whatever object
is under the mouse cursor:
</p>
<pre>
using System;
using System.Windows;
using System.Windows.Forms;
using System.Windows.Automation;

class Program
{
 static Point MousePos {
  get { var pos = Control.MousePosition;
        return new Point(pos.X, pos.Y); }
 }

 public static void Main()
 {
  for (;;) {
   AutomationElement e = AutomationElement.FromPoint(MousePos);
   if (e != null) {
    <font COLOR=blue>foreach (var prop in e.GetSupportedProperties()) {
     object o = e.GetCurrentPropertyValue(prop);
     if (o != null) {
      var s = o.ToString();
      if (s != "") {
       var id = o as AutomationIdentifier;
       if (id != null) s = id.ProgrammaticName;
       Console.WriteLine("{0}: {1}", Automation.PropertyName(prop), s);
      }
     }
    }
    foreach (var pattern in e.GetSupportedPatterns()) {
     Console.WriteLine("Pattern: {0}", Automation.PatternName(pattern));
    }</font>
    Console.WriteLine();
   }
   System.Threading.Thread.Sleep(1000);
  }
 }
}
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1049003">
				<div id="div-comment-1049003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130408-00/?p=4733#comment-1049003">
			April 8, 2013 at 7:28 am</a>		</div>

		<p>Huh, didn&#39;t realize this stuff existed. &nbsp;I assumed .NET apps were entirely locked into their own little world unless you used P/Invoke.</p>
<p>I guess programs like AutoIt wrap the native version of this API&#8230; it looks sort of similar to what they do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1049063">
				<div id="div-comment-1049063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130408-00/?p=4733#comment-1049063">
			April 8, 2013 at 10:59 am</a>		</div>

		<p>(Sorry if this is double post, I didn&#39;t get a confirm from the blog software)</p>
<p>We use this heavily in our &quot;Automation Framework&quot; and wrap it in a driver that allows us to easily create mappings and generate tests. Think Microsoft&#39;s Test Professional, but the editing of Automated Tests being much easier without the pain of re-recording everything. UI Automation was a huge boon for us, especially because its one of the few ways to programatically interact with Windows Presentation Foundation interfaces. This saved countless man hours of work, and in addition was included!</p>
<p>The only thing I&#39;d include in Raymond&#39;s blog is the suggestion to use the &quot;Inspect&quot; tool included in the SDK which based on my understanding is what they intend you to use, its almost like a UI Spy, but specifically for UIAutomation (and MSAA to an extent). It does a really nice job of showing you the &quot;Tree&quot; it sees along with just about any other piece of information you&#39;d most likely need for writing UIAutomation &quot;Clients&quot;.</p>
<p>For all of its pros there are some cons, for one I couldn&#39;t for the life of me find a book on it, and at the time the MSDN documentation was a little scarce (but I&#39;ve noticed that it has improved in recent years). We had some experience coming in dealing with automating programs which use the windows &#39;Common Controls&#39; which was a big help. We also had access to the code which we were automating so were able to add AutomationId&#39;s to our projects which is a big help.</p>
<p>Third Party support seems a little spotty, but it is getting better (I won&#39;t mention names as per the blog rules) with some of the more well known control makers out there. All of the &quot;stock&quot; controls have great support already which is a testament to the team responsible for WPF. I do wish there was more documentation (I know wrong blog) on how to implement custom AutomationPeers, our product has a few places where we&#39;ve had to create custom controls internally and it&#39;d be nice to actually extend a custom AutomationPeer instead of the FrameworkAutomationPeer default (although I appreciate that its there, for 95% of what we do its good enough because it enables you to slap on the AutomationId and get a simple Click and BoundingRectangle).</p>
<p>The last thing I&#39;d mention (and yes again I know not the right blog, I&#39;d like to get in contact with the author(s) and buy him/her a case of beer) is that I&#39;d like to see how you add AutomationId&#39;s to WinForms and MFC type applications. The MSDN Documentation seems to be very WPF-centric which makes sense as It seems the push for this was during the introduction of that technology. For those wondering, in a lot of cases when the Framework can&#39;t find a good AutomationId for these windowing libraries it falls back to using the Window Handle, which of course is not reliable.</p>
<p>As always great blog Raymond, sorry for the length of the comment, but I&#39;m super passionate about this stuff and I LOVE when your blog mentions this type of stuff! Brightens my day right up.</p>
<div class="post">[<em>Thanks for the comment. It saddens me that UI Automation (and accessibility in general) don&#39;t get the visibility they deserve. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1049103">
				<div id="div-comment-1049103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130408-00/?p=4733#comment-1049103">
			April 8, 2013 at 2:18 pm</a>		</div>

		<p>UI spy is dead (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms727247.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms727247.aspx</a>), and we can&#39;t find it anymore, but Inspect (make sure you get the last version that has the tree view) is better anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1049133">
				<div id="div-comment-1049133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marco</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130408-00/?p=4733#comment-1049133">
			April 9, 2013 at 5:20 am</a>		</div>

		<p>John, you can use Dynamic Annotation API to set automation ids (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd318060.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/dd318060.aspx</a>).</p>
<p>Check also Michael Bernstein&#39;s blog post &quot;Using Dynamic Annotation with Child IDs&quot; (<a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/winuiautomation/archive/2012/04/25/using-dynamic-annotation-with-child-ids.aspx" rel="nofollow">blogs.msdn.com/&#8230;/using-dynamic-annotation-with-child-ids.aspx</a>).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1049383">
				<div id="div-comment-1049383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130408-00/?p=4733#comment-1049383">
			April 10, 2013 at 8:58 am</a>		</div>

		<p>I tried out Inspect, and left it running minimized for a few days. I must say that it caused several applications to exhibit really strange behavior. It must trigger something that causes programs to think some accessibility mode has been activated.</p>
<p>It&#39;s a shame, because it&#39;s a really neat tool that is the kind of thing that&#39;s useful to have running.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1050083">
				<div id="div-comment-1050083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alasdair</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130408-00/?p=4733#comment-1050083">
			April 15, 2013 at 4:26 am</a>		</div>

		<p>&gt; It must trigger something that causes programs to think some accessibility mode has been activated.</p>
<p>Inspect looks like it sets SPI_SETSCREENREADER, which indicates to Windows and other applications that a screenreader is running and (if necessary) they should make themselves more accessible &#8211; possibly even turning on and off UIA (or MSAA) support.</p>
<p>A good example is the View tab in Folder Options in Windows Explorer. Run Inspect, open it up, and you&#39;ll see that the checkboxes on that tab now have ON and OFF appended to their labels so that screenreader users can tell if they are checked &#8211; clearly the checkboxes don&#39;t report that through UIA or MSAA correctly, and there was some reason why they couldn&#39;t be made to do so.</p>
<p>INFO: How Clients and Servers Should Use SPI_SETSCREENREADER and SPI_GETSCREENREADER</p>
<p><a href="http://support.microsoft.com/kb/180958" target="_new" rel="nofollow">support.microsoft.com/&#8230;/180958</a></p>
<div class="post">[<em>Those checkboxes were written before MSAA Annotation was invented, so they had to show the ON/OFF state some other way. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

