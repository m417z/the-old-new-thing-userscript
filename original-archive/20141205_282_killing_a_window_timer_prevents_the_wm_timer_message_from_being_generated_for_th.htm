<html>
<head>
<title>Killing a window timer prevents the WM_TIMER message from being generated for that timer, but it doesn't retroactively remove ones that were already generated</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Killing a window timer prevents the WM_TIMER message from being generated for that timer, but it doesn&#8217;t retroactively remove ones that were already generated</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 5, 2014 / year-entry #283</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20141205-00/?p=43463</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Calling Kill­Timer to cancel a window timer prevents WM_TIMER messages from being generated for that timer, even if one is overdue. In other words, give this sequence of operations: SetTimer(hwnd, IDT_MYTIMER, 1000, NULL); Sleep(2000); KillTimer(hwnd, IDT_MYTIMER); no WM_TIMER message is ever generated. Even though a timer became due during the Sleep, no timer message was...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Calling
<code>Kill&shy;Timer</code>
to cancel a window timer
prevents <code>WM_<wbr>TIMER</code> messages from being
generated for that timer,
even if one is overdue.
In other words,
give this sequence of operations:
</p>
<pre>
SetTimer(hwnd, IDT_MYTIMER, 1000, NULL);
Sleep(2000);
KillTimer(hwnd, IDT_MYTIMER);
</pre>
<p>
no <code>WM_<wbr>TIMER</code> message is ever generated.
Even though a timer became due during the <code>Sleep</code>,
no timer message was generated during the sleep
because timer messages are generated on demand,
and nobody demanded one.
Killing the timer then removes the ability to demand a timer
message,
and the result is that no message ever appears.
</p>
<p>
In general, this means that
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/12/04/10577881.aspx">
once you kill a timer,
you will not receive any <code>WM_<wbr>TIMER</code> messages
for that timer</a>.
</p>
<p>
Unless you
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/05/23/10420741.aspx">
demanded one while the timer was active and didn't process it</a>.
</p>
<p>
Let's try a variation:
</p>
<pre>
SetTimer(hwnd, IDT_MYTIMER, 1000, NULL);
Sleep(2000);
if (PeekMessage(&amp;msg, NULL, WM_TIMER, WM_TIMER, 0)) {
 DispatchMessage(&amp;msg);
}
KillTimer(hwnd, IDT_MYTIMER);
</pre>
<p>
In this case, the <code>Peek&shy;Message</code> function
looks for a <code>WM_<wbr>TIMER</code> message in the queue,
and if none is found, it asks for one to be generated on the fly
if a timer is due.
It so happens that one is due (<code>IDT_<wbr>MY&shy;TIMER</code>),
so the <code>Peek&shy;Message</code> causes a
<code>WM_<wbr>TIMER</code> to be generated and placed in the queue.
But it doesn't remain in this state for long, because
the message is removed from the queue by the
<code>Peek&shy;Message</code> function.
</p>
<p>
Okay, now let's make things weird:
</p>
<pre>
SetTimer(hwnd, IDT_MYTIMER, 1000, NULL);
Sleep(2000);
if (PeekMessage(&amp;msg, NULL, WM_TIMER, WM_TIMER, <font COLOR=blue>PM_NOREMOVE</font>)) {
 // oh hey there is an overdue timer, how about that
}
KillTimer(hwnd, IDT_MYTIMER);
</pre>
<p>
This time, we passed the
<code>PM_<wbr>NO&shy;REMOVE</code> flag.
The window manager goes through the same process as before,
first looking for a <code>WM_<wbr>TIMER</code> message in the queue,
and then failing to find one,
generates one on the fly since the <code>IDT_<wbr>MY&shy;TIMER</code>
timer is overdue.
But the
<code>PM_<wbr>NO&shy;REMOVE</code> flag makes things weird
because it says,
"Thanks for generating that message for me.
But don't remove it from the queue.
Leave it there.
I'll deal with it later."
</p>
<p>
You might do this if you want to stop processing
if a timer elapses,
but you don't want to handle the timer immediately because you are in
some sensitive state at the point you realize that you need to stop processing.
Instead, you want to return back out to the main message loop and let it
deal with the timer.
</p>
<pre>
BOOL DoWorkUntilTheNextTimer()
{
 BOOL fFinished = FALSE;
 MSG msg;
 PrepareToDoWork();
 while (!PeekMessage(&amp;msg, NULL, WM_TIMER, WM_TIMER, PM_NOREMOVE)) {
  if (AnyWorkLeft()) DoSomeWork(); 
  else { fFinished = TRUE; break; }
 }
 CleanUpAfterDoingWork();
 return fFinished;
}
</pre>
<p>
And then you might call it like this:
</p>
<pre>
void DoWorkForUpToOneSecond()
{
 SetTimer(hwnd, IDT_MYTIMER, 1000, NULL);
 DoWorkUntilTheNextTimer();
 KillTimer(hwnd, IDT_MYTIMER);
}
</pre>
<p>
The
<code>Kill&shy;Timer</code> will prevent any new
timer messages from being generated for
<code>IDT_<wbr>MY&shy;TIMER</code>,
but it does not go back in time and retroactively
un-generate the timer message that was generated
when
<code>Do&shy;Work&shy;Until&shy;The&shy;Next&shy;Timer</code>
asked to see if there were any timer messages.
</p>
<p>
You are now in the strange situation where
a subsequent
call to <code>Peek&shy;Message</code> or
<code>Get&shy;Message</code>
will retrieve a timer message for a timer that is no longer active!
</p>
<p>
This is captured in the MSDN documentation with the simple
sentence,
"The <b>Kill&shy;Timer</b> function does not remove
<code>WM_<wbr>TIMER</code> messages already posted to the message queue."</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1165323">
				<div id="div-comment-1165323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141205-00/?p=43463#comment-1165323">
			December 5, 2014 at 7:53 am</a>		</div>

		<p>Let me guess, Raymond had to debug a shell extension messing this up about a queue length ago.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165333">
				<div id="div-comment-1165333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">OldFart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141205-00/?p=43463#comment-1165333">
			December 5, 2014 at 8:18 am</a>		</div>

		<p>This recent string of message-queue-related posts made me wonder, when is a message filter (or PeekMessage for that matter) ever a proper solution to a problem? &nbsp;It has been years since I&#39;ve attempted to do anything tricky in a message pump, but my best recollection is that the unintended consequences of any such attempt way overwhelmed any benefits.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165353">
				<div id="div-comment-1165353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141205-00/?p=43463#comment-1165353">
			December 5, 2014 at 9:29 am</a>		</div>

		<p>I suspect 0 should be PM_REMOVE in the first PeekMessage example (0 is PM_NOREMOVE).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165373">
				<div id="div-comment-1165373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EduardoS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141205-00/?p=43463#comment-1165373">
			December 5, 2014 at 11:50 am</a>		</div>

		<p>Get&shy;Message blocks the thread, in the case of WM_TIMER, how is the process of wakeing up the thread and posting the message?</p>
<div class="post">[<em>The same way Get&shy;Message wakes up for other external events, like a new posted message or an inbound sent message. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165393">
				<div id="div-comment-1165393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141205-00/?p=43463#comment-1165393">
			December 5, 2014 at 3:24 pm</a>		</div>

		<p>&quot;But it doesn&#39;t remain in this state for long, because the message is removed from the queue by the Peek&shy;Message function.&quot; &#8211; Pretty sure you meant &quot;&#8230; by the DispatchMessage function&quot; (as opposed to rs&#39;s suggestion)</p>
<div class="post">[<em>Nope. PeekMessage and GetMessage remove messages from the queue. DispatchMessage dispatches messages after they have already been removed from the queue. It is legal to <a href="http://blogs.msdn.com/b/oldnewthing/archive/2003/10/21/55384.aspx">remove messages from the queue without dispatching them</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165403">
				<div id="div-comment-1165403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141205-00/?p=43463#comment-1165403">
			December 5, 2014 at 3:45 pm</a>		</div>

		<p>Oops, sorry! Thanks for the reply (and the post of course, which is interesting as always).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165413">
				<div id="div-comment-1165413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141205-00/?p=43463#comment-1165413">
			December 5, 2014 at 6:16 pm</a>		</div>

		<p>As far as I understand, DispatchMessage just calls WndProc with a given message, and does little else (that &quot;little else&quot; includes some calling convention magic that is not needed in normal circumstances).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

