<html>
<head>
<title>Why can't I declare a type that derives from a generic type parameter?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why can&#8217;t I declare a type that derives from a generic type parameter?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 14, 2009 / year-entry #256</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A lot of questions about C# generics come from the starting point that they are just a cutesy C# name for C++ templates. But while the two may look similar in the source code, they are actually quite different. C++ templates are macros on steroids. No code gets generated when a template is "compiled"; the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A lot of questions about C# generics come from the starting point
that they are just a cutesy C# name for C++ templates.
But while the two may look similar in the source code,
they are actually quite different.
</p>
<p>
C++ templates are macros on steroids.
No code gets generated when a template is "compiled";
the compiler merely hangs onto the source code,
and when you finally instantiate it,
the actual type is inserted and code generation takes place.
</p>
<pre>
// C++ template
template&lt;class T&gt;
class Abel
{
public:
 int DoBloober(T t, int i) { return t.Bloober(i); }
};
</pre>
<p>
This is a perfectly legal (if strange) C++ template class.
But when the compiler encounters this template,
there are a whole bunch of things left unknown.
What is the return type of <code>T::Bloober</code>?
Can it be converted to an <code>int</code>?
Is <code>T::Bloober</code> a static method?
An instance method?
A virtual instance method?
A method on a virtual base class?
What is the calling convention?
Does <code>T::Bloober</code> take an <code>int</code> argument?
Or maybe it's a <code>double</code>?
Even stranger, it might accept a <code>Canoe</code> which
gets converted from an <code>int</code> by a
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/05/24/605974.aspx">
converting constructor</a>.
Or maybe it's a function that takes two parameters,
but the second parameter has a default value.
</p>
<p>
Nobody knows the answers to these questions, not even the compiler.
It's only when you decide to instantiate the template
</p>
<pre>
Abel&lt;Baker&gt; abel;
</pre>
<p>
that these burning questions can be answered,
overloaded operators can be resolved,
conversion operators can be hunted down,
parameters can get pushed on the stack in the correct order,
and the correct type of <code>call</code> instruction can be
generated.
</p>
<p>
In fact, the compiler doesn't even care whether or not <code>Baker</code>
has a <code>Bloober</code> method, as long as you never call
<code>Abel&lt;Baker&gt;::DoBloober</code>!
</p>
<pre>
void f()
{
 Abel&lt;int&gt; a; // no error!
}

void g()
{
 Abel&lt;int&gt; a;
 a.DoBloober(0, 1); // error here
}
</pre>
<p>Only if you actually call the method does the compiler start looking for
how it can generate code for the <code>DoBloober</code> method.</p>
<p>
C# generics aren't like that.
</p>
<p>
Unlike C++, where a non-instantiated template exists only
in the imaginary world of potential code that could exist but doesn't,
a C# generic results in code being generated,
but with placeholders where the type parameter should be inserted.
</p>
<p>
This is why you can use generics implemented in another assembly,
even without the source code to that generic.
This is why a generic can be recompiled without having to recompile
all the assemblies that use that generic.
The code for the generic is generated <i>when the generic is compiled</i>.
By comparison no code is generated for C++ templates
until the template is instantiated.
</p>
<p>
What this means for C# generics is that if you want to do something
with your type parameter, it has to be something that the compiler
can figure out how to do <i>without knowing what <code>T</code> is</i>.
Let's look at the example that generated today's question.
</p>
<pre>
class Foo&lt;T&gt;
{
 class Bar : T
 { ... }
}
</pre>
<p>
This is flagged as an error by the compiler:
</p>
<pre>
error CS0689: Cannot derive from 'T' because it is a type parameter
</pre>
<p>
Deriving from a generic type parameter is explicitly forbidden by
25.1.1 of the C# language specification.
Consider:
</p>
<pre>
class Foo&lt;T&gt;
{
 class Bar : T
 {
   public void FlubberMe()
   {
     Flubber(0);
   }
 }
}
</pre>
<p>
The compiler doesn't have enough information to generate the IL for
the <code>FlubberMe</code> method.
One possibility is
</p>
<pre>
ldarg.0        // "this"
ldc.i4.0    // integer 0 - is this right?
call T.Flubber // is this the right type of call?
</pre>
<p>
The line <code>ldc.i4.0</code> is a guess.
If the method <code>T.Flubber</code> were actually
<code>void Flubber(long l)</code>,
then the line would have to be <code>ldc.i4.0; conv.i8</code>
to load an 8-byte integer onto the stack instead of a 4-byte integer.
Or perhaps it's
<code>void Flubber(object o)</code>,
in which case the zero needs to be boxed.
</p>
<p>
And what about that call instruction?
Should it be a <code>call</code> or <code>callvirt</code>?
</p>
<p>
And what if the method returned a value, say,
<code>string Flubber(int i)</code>?
Now the compiler also has to generate code to discard the
return value from the top of the stack.
</p>
<p>
Since the source code for a generic is not included in the assembly,
all these questions have to be answered at the time the generic is
compiled.
Besides, you can
write a generic in Managed C++ and use it from VB.NET.
Even saving the source code won't be much help if the generic
was implemented in a language you don't have the compiler for!</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-762613">
				<div id="div-comment-762613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093#comment-762613">
			August 14, 2009 at 10:37 am</a>		</div>

		<p>Interesting choice of metasyntactic variables. &nbsp;I can&#8217;t say I&#8217;ve ever seen the first monkeys successfully sent into space used in code before. &nbsp;Although I believe Able&#8217;s name was spelled Able, not Abel.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762643">
				<div id="div-comment-762643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erzengel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093#comment-762643">
			August 14, 2009 at 12:20 pm</a>		</div>

		<p>This is another one of those &quot;Someone asked this?&quot; But I suppose it makes sense that someone who doesn&#8217;t have an understanding of generics might wonder about this.</p>
<p>For one thing, with generics, if I don&#8217;t restrict the generic to a particular interface, I can&#8217;t do anything to the generic type at all. I can&#8217;t use T.DoFunc because the compiler doesn&#8217;t know what DoFunc is, as said in this article. But if I restrict T to an interface (or more accurately, a derivation of the interface), then I can call those functions.</p>
<p>That makes me wonder in the context of the article, what if the type parameter were restricted to an interface (ie, &quot;where T: class, IDictionary&quot;)? You&#8217;d only be able to use functions that your base type overloads from the interface, and you obviously couldn&#8217;t use sealed classes.</p>
<p>But the problem really isn&#8217;t with calling functions from the base class. The problem is from DERIVING from the base class. Code needs to be generated for the generic class. It would be very difficult, I think, to create a class that needs to have it&#8217;s base class changed every time the generic is instantiated. Is it even possible?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762673">
				<div id="div-comment-762673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zahical</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093#comment-762673">
			August 14, 2009 at 2:24 pm</a>		</div>

		<p>&quot;imaginary world of potential code&quot;</p>
<p>Beautifully said, Mr. Chen!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762703">
				<div id="div-comment-762703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093#comment-762703">
			August 14, 2009 at 3:42 pm</a>		</div>

		<p>I don&#8217;t code in C#, but it seems pretty useful to be able to say, &#8220;instantiation of this generic requires you specify a type that implements this interface.&#8221; &nbsp;That way the generic could call Flubber() and the compiler can still check at compile-time whether you&#8217;re using something that conforms to IFlubberable. &nbsp;Any C# types reading this know if this is possible?</p>
<div class=post>[<i>You can always <a href="http://msdn.microsoft.com/en-us/library/d5x73970(VS.80).aspx" rel="nofollow">read about C# generics yourself and find out</a>. It&#8217;s quite readable, really. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762733">
				<div id="div-comment-762733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Luke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093#comment-762733">
			August 14, 2009 at 4:37 pm</a>		</div>

		<p>@Adam [waaay off-topic]: &quot;Able&quot; and &quot;Baker&quot; are the first two &quot;letters&quot; of the old US military Phonetic Alphabet:</p>
<p><a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Joint_Army/Navy_Phonetic_Alphabet" rel="nofollow">http://en.wikipedia.org/wiki/Joint_Army/Navy_Phonetic_Alphabet</a></p>
<p>which was developed decades before the space race. The monkeys&#8217; names are therefore a little bit of aerospace geek humor; a more humane way of naming them &quot;monkey A&quot; and &quot;monkey B&quot;. The phonetic alphabet is also the reason that people (not just Mr. Chen) use Able and Baker as metasyntactic variables. I imagine &quot;able&quot; often gets changed to &quot;abel&quot; because then they both sound like English names. (like Cain and Abel)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762743">
				<div id="div-comment-762743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.parkscomputing.com/' rel='external nofollow' class='url'>Paul M. Parks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093#comment-762743">
			August 14, 2009 at 6:14 pm</a>		</div>

		<p>This is why I like writing .NET code with C++/CLI. I can use both templates and generics, which opens up some interesting possibilities.</p>
<p>That, and I don&#8217;t have to fool around with P/Invoke.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762763">
				<div id="div-comment-762763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093#comment-762763">
			August 14, 2009 at 7:33 pm</a>		</div>

		<p>ldarg.1 &nbsp; &nbsp; &nbsp; &nbsp;// &quot;this&quot;</p>
<p>This should actually be ldarg.0</p>
<div class="post">[<i>Fixed, thanks. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mihailik odd alt thread-odd thread-alt depth-1" id="comment-762783">
				<div id="div-comment-762783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mihailik' rel='external nofollow' class='url'>Mihailik</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093#comment-762783">
			August 14, 2009 at 8:46 pm</a>		</div>

		<p>Well, you&#8217;re more careful, but still referring to IL is quite a miss.</p>
<p>Deriving from T by no means implies calling a non-existent method.</p>
<p>It&#8217;s the same as saying &#8216;4-storey buses don&#8217;t exist because they would have had square wheels&#8217;. There&#8217;s just not connexion between those 2 things.</p>
<p>Another incorrect IL-influenced assumption. Call/callvirt dilemma is an everyday thing in generics. Fixating on IL, how would you invoke ToString method for a variable of type T? Surely for struct and class that&#8217;s a bit different :-)</p>
<p>The correct reason why they prohibit 25.1.1 is much more complex machine code generation required for that case. Currently, generic class is quite certain in what it is derived from, so in most of cases actual machine code may be generated only once for all T types (in case of non-value-types anyway). With parametrised inheritance each T would require its own machine code generation.</p>
<p>Still, possible but very annoying.</p>
<p>Additional grief would be caused by abstract methods and non-default constructors. Though that could be simple outlawed, so that&#8217;s not a blocker.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762813">
				<div id="div-comment-762813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093#comment-762813">
			August 15, 2009 at 9:51 am</a>		</div>

		<p>&quot;how would you invoke ToString method for a variable of type T?&quot; &#8211; ildasm says callvirt &nbsp; instance string [mscorlib]System.Object::ToString()</p>
<p>If I actually limit the generic to value types [Class x(Of t as Structure) &#8211; don&#8217;t know the C# syntax offhand], it calls ValueType::ToString</p>
<p>ValueType is a subclass of Object, even though it&#8217;s clearly a special case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762823">
				<div id="div-comment-762823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093#comment-762823">
			August 15, 2009 at 9:58 am</a>		</div>

		<p>Of course, (I thought of this case after posting) that doesn&#8217;t explain the case where it picks up the right version of the function if it Shadows (i.e. &quot;new&quot; function in C#) and therefore doesn&#8217;t appear in the ToString vtable slot from Object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762833">
				<div id="div-comment-762833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jason</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093#comment-762833">
			August 15, 2009 at 12:30 pm</a>		</div>

		<p>Anonymous:</p>
<p>Yes, you specify:</p>
<p>class Foo&lt;T&gt; where T : IFlubberable</p>
<p>{</p>
<p>}</p>
<p>.. However you still can&#8217;t derive an inner class from T since Raymond&#8217;s assertions still hold. You can, of course, derive from IFlubberable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762853">
				<div id="div-comment-762853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">iliyat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093#comment-762853">
			August 15, 2009 at 4:09 pm</a>		</div>

		<p>&gt; In fact, the compiler doesn&#8217;t even care whether or not Baker has a Bloober method, as long as you never call Abel&lt;Baker&gt;::DoBloober</p>
<p>The Microsoft compiler doesn&#8217;t care. gcc would compile the entire class at the instantiation point and fail because of the missing Bloober method. As far as I remember gcc does the right (standard conformant) thing here</p>
<div class=post>[<i>Section 14.7.1 (Implicit instantiation) paragraph 1 says &#8220;&#8230; The implicit intantiation of a class template specialization causes the implicit instantiation of the declarations, but <u>not of the definitions</u> or default arguments, of the class member functions&#8230; [T]he specialization of the member is implicitly instantiated when the specialization is referenced <u>in a context that requires the member definition to exist</u>.&#8221; (Emphasis mine.) Therefore (according to my reading), <code>Abel&lt;int&gt; a;</code> causes the declaration <code>int Abel&lt;int&gt;::DoBloober(int t, int i)</code> to exist, but the function body does not exist because it has not been referenced in a context that requires its definition to exist. Since the body does not exist, there is no error yet. I may be reading it wrong, however. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762893">
				<div id="div-comment-762893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093#comment-762893">
			August 16, 2009 at 5:55 am</a>		</div>

		<p>iliyat: No. gcc doesn&#8217;t compile the whole template code at instantiation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762943">
				<div id="div-comment-762943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093#comment-762943">
			August 16, 2009 at 7:37 pm</a>		</div>

		<p>@Paul M. Parks: This is why I like writing .NET code with C++/CLI. I can use both templates and generics, which opens up some interesting possibilities.</p>
<p>I don&#8217;t know whether to be terrified or amazed. No maintenance issues?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762973">
				<div id="div-comment-762973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093#comment-762973">
			August 17, 2009 at 3:35 am</a>		</div>

		<p>It&#8217;s a bit remarkable to say that C++ doesn&#8217;t generate code for templates, but C# does for generics. Both compile to an intermediate form. </p>
<p>Now, the intermediate form for C# is IL, which is (A) standardized and (B) closer to x86 code, but in either case the conversion from text to runnable code takes two phases. The example C++ code merely shows that C++ has different phases.</p>
<p>A good example would be { return t..Bloober(i); } which fails to compile, even before providing T t. There&#8217;s simply no way it could be correct. </p>
<div class=post>[<i>The &#8220;intermediate form&#8221; generated by C# is in fact the <u>final form</u> generated by the compiler. (Besides, you can argue that x86 code still isn&#8217;t the &#8220;final form&#8221; since it has to be &#8220;compiled&#8221; by the CPU into smaller units for execution.) C#&#8217;s &#8220;final form&#8221; is consumable by other languages; C++&#8217;s isn&#8217;t. C++&#8217;s &#8220;processed template form&#8221; is not visible to other compilation units. C#&#8217;s is. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-762983">
				<div id="div-comment-762983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093#comment-762983">
			August 17, 2009 at 7:07 am</a>		</div>

		<p>iliyat, anonymous: The C++ standard says to bind names that do not depend on the template parameters when the template is encountered. It&#8217;s kind of a partial compilation. Microsoft&#8217;s compiler does not currently do this &#8211; it just captures the source code and uses it as a macro. You can get errors or differing behaviour when moving code between Visual C++ and a conforming compiler.</p>
<p>Microsoft document this nonstandard behaviour at <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/w98s4hs8.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/w98s4hs8.aspx</a>. Unfortunately, still not fixed in Visual Studio 10.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762993">
				<div id="div-comment-762993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Petr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093#comment-762993">
			August 17, 2009 at 7:49 am</a>		</div>

		<p>The example does not explain the problem of deriving from a generic type parameter. Sure, you cannot call this.Flubber(0) in the example, but it is not specific to this case. You cannot do this, either:</p>
<p>class Foo&lt;T&gt;</p>
<p>{</p>
<p>class Bar</p>
<p>{</p>
<p>&nbsp; public void FlubberMe(T inst)</p>
<p>&nbsp; {</p>
<p>&nbsp; &nbsp; inst.Flubber(0);</p>
<p>&nbsp; }</p>
<p>}</p>
<p>}</p>
<p>You could fix that with a constraint, but no constraint allows you to derive from T. Why? The article does not explain this.</p>
<div class=post>[<i>Good point. I answer the question with a puzzle. What does this program print? What are its consequences for deriving from a template class?</p>
<p>class TBase {<br />&nbsp; public void Flubber(int i) { }<br />}</i></div>
<div class=post><i>class Foo&lt;T&gt; where T : TBase {<br />&nbsp;public void DoFlubber(T t) { t.Flubber(0); }<br />}</i></div>
<div class=post><i>class Baker : TBase {<br />&nbsp;new public void Flubber(int i)<br />&nbsp;&nbsp;&nbsp; { System.Console.WriteLine(&#8220;yo&#8221;); }<br />};</i></div>
<div class=post><i>class Program {<br />&nbsp;&nbsp;&nbsp; public static void Main()<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var f = new Foo&lt;Baker&gt;();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f.DoFlubber(b);<br />&nbsp;&nbsp;&nbsp; }<br />}</i></div>
<div class=post><i><br />-Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-763123">
				<div id="div-comment-763123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090814-00/?p=17093#comment-763123">
			August 17, 2009 at 8:47 pm</a>		</div>

		<p>Armchair analysis of that code suggests it should print nothing. &nbsp;In Foo&lt;T&gt;, T is known to be a TBase, and TBase&#8217;s Flubber method prints nothing. &nbsp;The fact that T is a Baker and Baker introduces a new method called Flubber is irrelevant, since it&#8217;s using a new slot. &nbsp;(The old method still exists, you just can&#8217;t get to it without a base cast, which is effectively what the generic does.)</p>
<p>Had the Flubber method been virtual (and Baker had overridden it), then it would have printed something.</p>
<p>In general (other than being able to use new sometimes) generics behave no differently than standard methods using the assumed base, except that generics don&#8217;t need the typecasts.</p>
<p>I&#8217;m not denying that generics are a very useful feature and well worth having, but sometimes I miss templates. &nbsp;(A recent example was when I was trying to invoke TryParse on either of Int32 or Double depending on the type of a parameter. &nbsp;Not hard to do with overloads instead, but it gets tedious, particularly if you want to handle any of the primitive types. &nbsp;It also made me wish there was such a thing as a &#8220;static interface&#8221;.)</p>
<div class=post>[<i>Okay, now what does this say about deriving from T? What does Foo&lt;Baker&gt;.Bar.FlubberMe() call? What does this mean for code generation? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

