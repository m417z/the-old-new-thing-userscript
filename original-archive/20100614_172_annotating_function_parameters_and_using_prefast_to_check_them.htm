<html>
<head>
<title>Annotating function parameters and using PREfast to check them</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Annotating function parameters and using PREfast to check them</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 14, 2010 / year-entry #173</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Via the suggestion box, Sys64738 asks, whether I think is a good C/C++ programming style to add IN and OUT to function prototypes. Remember, this is my opinion. Your opinion may validly differ. I would go beyond just IN and OUT and step up to SAL annotations, which describe the semantics of function parameters in...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Via the suggestion box, Sys64738 asks, <a href="http://blogs.msdn.com/b/oldnewthing/archive/2007/05/23/407234.aspx#1499080"> whether I think is a good C/C++ programming style to add IN and OUT to function prototypes</a>.</p>
<p> Remember, this is my opinion. Your opinion may validly differ. </p>
<p> I would go beyond just IN and OUT and step up to <a href="http://msdn.microsoft.com/en-us/library/aa383701.aspx"> SAL annotations</a>, which describe the semantics of function parameters in more detail than simply IN and OUT. For example, the <code>__out_ecount</code> annotation lets you specify not only that the buffer is an output parameter, but also lets you specify how big the buffer is. </p>
<p> This added expressiveness is used by tools like <a href="http://msdn.microsoft.com/en-us/library/ff550543.aspx"> PREfast</a> and its user-mode equivalent the <a href="http://msdn.microsoft.com/en-us/library/d3bbz7tz.aspx"> C/C++ Code Analysis tool</a>. These tools study your source code and attempt to find errors like writing past the end of an output buffer, passing the wrong buffer size for an output parameter, or writing to an input buffer. </p>
<p> One question that often comes up when people start adding SAL annotations to their code is "I have a function whose parameters are used in a manner that isn't neatly covered by an existing annotation. How do I annotate it?" If you ask them to describe the parameters they are having trouble with, you often find that they don't have an easy annotation because they are too complicated. "Well, this is a null-terminated input string buffer, unless the <code>SET</code> flag set, in which case it's an output buffer with length specified by the <code>cchBuf</code> parameter, and the buffer size is specified in <code>CHAR</code>s unless the <code>FN_<wbr>UNICODE</wbr></code> flag is set in the <code>dwFlags</code> parameter, in which case the size is in <code>WCHAR</code>s." </p>
<p> One lesson we learned in Windows is that if your function is so complicated that the annotation language has trouble expressing it, then that might be a clue that your function is so complicated that human beings can't understand it either. The answer to "How do I annotate it?" is therefore "Don't try. Simplify your interface instead." (Of course, if the function must be kept around for compatibility reasons, then you are stuck with a complicated annotation.) </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-839553">
				<div id="div-comment-839553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-839553">
			June 14, 2010 at 7:54 am</a>		</div>

		<p>I&#39;ll go a step further and say &quot;make your __in arguments const&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-839653">
				<div id="div-comment-839653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-839653">
			June 14, 2010 at 9:23 am</a>		</div>

		<p>@Maurits: I wouldn&#39;t, unless they&#39;re pointers. I like to fiddle with my incoming arguments.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-839693">
				<div id="div-comment-839693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-839693">
			June 14, 2010 at 9:53 am</a>		</div>

		<p>@Joshua:</p>
<p>What a coincidence, I like to argue with my incoming fiddlers!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-839713">
				<div id="div-comment-839713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-839713">
			June 14, 2010 at 10:43 am</a>		</div>

		<p>&#39;const&#39; qualifier is a good thing, but as recently as in WDK 6000, MS C compiler used to have problems with it. I suppose when it compiles C++ files, it should be OK, because &#39;const is used more often there, but with C files the compiler was often confused.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-839723">
				<div id="div-comment-839723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CodeOrDie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-839723">
			June 14, 2010 at 10:59 am</a>		</div>

		<p>Uh oh, this is about to devolve in one of those thread where everyone leaves out one detail of what they understand to be the problem and it becomes a huge argue-fest even though we&#39;re all very smart. So&#8230; I&#39;ll add my piece of coal to this BBQ!</p>
<ol>
<li>foo(__in int x)</li>
<li>
<p>foo(__in const int&amp; x)</p>
</li>
<li>
<p>foo(__in const int x)</p>
</li>
</ol>
<p>In all cases, the caller is guaranteed the value of the passed parameter post-call, it will be whatever it was pre-call. But, inside the function, you can &quot;fiddle&quot; with x in case 1., but not in case 2. Case 3 is pointless, I think.</p>
<p>Of course, we know that case 2. is a performance optimization. But is this integer copy really a big bottleneck in your app? And, though Joshua said he &quot;likes to fiddle&quot; with arguments, I think he really meant: &quot;I like to keep open my opportunities to <em>not</em> wonder whether it is safe to transform this innocuous parameter&quot;.</p>
<p>(Sorry for the double-post if there is one.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-839743">
				<div id="div-comment-839743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.roseharp.com' rel='external nofollow' class='url'>Timothy Byrd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-839743">
			June 14, 2010 at 12:00 pm</a>		</div>

		<p>@Marquess:</p>
<p>What about the Cellists?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-839753">
				<div id="div-comment-839753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-839753">
			June 14, 2010 at 12:34 pm</a>		</div>

		<p>Uhh&#8230; &nbsp;tangential question for you: &nbsp;what does the PRE in PREFast stand for?</p>
<p>(apologies if it&#39;s obvious, I didn&#39;t drink my coffee today)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-839803">
				<div id="div-comment-839803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dasuxullebt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-839803">
			June 14, 2010 at 2:59 pm</a>		</div>

		<p>With that much of annotations, one could as well do proper formal program verification.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-839833">
				<div id="div-comment-839833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-839833">
			June 14, 2010 at 4:22 pm</a>		</div>

		<p>FWIW, I was thinking of pointers when I made my suggestion. &nbsp;I don&#39;t see much&#8230; er, value&#8230; in annotating non-pointer arguments.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-839683">
				<div id="div-comment-839683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">William</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-839683">
			June 14, 2010 at 9:49 am</a>		</div>

		<p>@Joshua: &nbsp;If you&#39;ve declared them as __in in the header, you&#39;ve explicitly stated that you don&#39;t write to that buffer. &nbsp;In other words, you have specifically told the caller that you *won&#39;t* &quot;fiddle&quot; with them, just read them.</p>
<p>If you really need to transform your inputs, you need to either make a copy or declare the parameter as __inout.</p>
<div class="post">[<i>I think you&#39;re talking about different things. Joshua is talking about foo(__in int x) vs foo(__in const int x). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-839923">
				<div id="div-comment-839923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-839923">
			June 15, 2010 at 2:07 am</a>		</div>

		<p>@Maurits: Better yet, make your const arguments __in, not __inout (I&#39;m looking at you DrawText()).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-839953">
				<div id="div-comment-839953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-839953">
			June 15, 2010 at 4:09 am</a>		</div>

		<p>Hmmm&#8230; looks like DrawText supports a DT_MODIFYSTRING flag which can modify lpchText. &nbsp;So __inout is correct and the &quot;LPCTSTR&quot; is a bug (const implies __in, so it&#39;s not necessary to add __in to pointer-to-const arguments.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-839973">
				<div id="div-comment-839973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">stewart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-839973">
			June 15, 2010 at 5:23 am</a>		</div>

		<p>@Maurits: but in the case of DrawText you could argue it is the better of two evils. Either MS change the argument type to LPTSTR and the 99.9% of people who do not use DT_MODIFYSTRING have to insert a const_cast, or more likely simply don&#39;t use const for their strings to avoid the error you get, or they cheat and call the argument LPCTSTR, do the const_cast internally where appropriate and the 0.1% of people who use DT_MODIFYSTRING have to remember that the function prototype is wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-840023">
				<div id="div-comment-840023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-840023">
			June 15, 2010 at 6:29 am</a>		</div>

		<p>@Maurits: But that&#39;s the problem: DT_MODIFYSTRING, and the inability to annotate that it&#39;s not always there, are exactly what Raymond advised against: It should have been in a separate function.</p>
<p>Also, a function that can write to a const pointer is an ugly kludge.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-sdl even thread-even depth-1" id="comment-840083">
				<div id="div-comment-840083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SDL+Team' rel='external nofollow' class='url'>SDL Team</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-840083">
			June 15, 2010 at 11:27 am</a>		</div>

		<p>const params are treated as __in by default.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-840013">
				<div id="div-comment-840013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-840013">
			June 15, 2010 at 6:07 am</a>		</div>

		<p>Jeff: I&#39;ve always thought it&#39;s from PREfix. PREfix is another static code analysis tool used by Microsoft*. PREfix runs on dedicated machines, and typically takes days to complete a run. On the other hand, PREfast runs on the developer&#39;s machine fairly quickly. So in my mind, it&#39;s &quot;PREfast = PREfix, but faster!&quot;.</p>
<p>PREfix itself was an acquisition (company&#39;s name was Intrinsa, I think), so I don&#39;t know where this name comes from.</p>
<p>Corollary to Raymond&#39;s last paragraph: If you can&#39;t find a good name for a function, then you don&#39;t know what it does, and you need to refactor. Same for variable names.</p>
<p>Annoying mention: Obviously, the above was understood only after FormatMessage() was created&#8230;</p>
<p>* Mentioned here: <a rel="nofollow" target="_new" href="http://technet.microsoft.com/en-us/library/cc723542.aspx" rel="nofollow">technet.microsoft.com/&#8230;/cc723542.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-840143">
				<div id="div-comment-840143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cashto</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-840143">
			June 15, 2010 at 2:11 pm</a>		</div>

		<ol>
<li>
<p>C and C++ are different languages. There is no such thing as &quot;C/C++&quot;.</p>
</li>
<li>
<p>In C++, if you are dealing with raw buffers whose size is held in a separate variable, you are Doing It Wrong.</p>
</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-840153">
				<div id="div-comment-840153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://arnshea.blogspot.com/' rel='external nofollow' class='url'>arnshea</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-840153">
			June 15, 2010 at 2:27 pm</a>		</div>

		<p>What an excellent way to reinforce a concept that strikes me as a close cousin of &quot;If it&#39;s too hard to name then it&#39;s probably doing too much&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-840213">
				<div id="div-comment-840213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Work harder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-840213">
			June 15, 2010 at 11:33 pm</a>		</div>

		<p>@arnshea</p>
<p>Or too less.</p>
<p>DoNothing();</p>
<p>DoNothing2();</p>
<p>DoNothingAlso();</p>
<p>DoNothingAgainAndAgain();</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-840353">
				<div id="div-comment-840353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100614-00/?p=13723#comment-840353">
			June 16, 2010 at 8:05 am</a>		</div>

		<blockquote><p>
  There is no such thing as &quot;C/C++&quot;.
</p></blockquote>
<p>On my team we call it &quot;C+&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

