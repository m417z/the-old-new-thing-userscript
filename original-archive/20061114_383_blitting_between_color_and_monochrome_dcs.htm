<html>
<head>
<title>Blitting between color and monochrome DCs</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Blitting between color and monochrome DCs</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 14, 2006 / year-entry #384</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20061114-01/?p=29013</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">When blitting between color and monochrome DCs, The text foreground and background colors play a role. We saw earlier that when blitting from a monochrome DC to a color DC, the color black in the source turns into the destination's text color, and the color white in the source turns into the destination's background color....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
When blitting between color and monochrome DCs,
The text foreground and background colors play a role.
We saw earlier that
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/08/02/446605.aspx">
when blitting from a monochrome DC to a color DC,
the color black in the source turns into the destination's text color,
and the color white in the source turns into the destination's background
color</a>.
This came in handy when we wanted to colorize a monochrome bitmap.
</p>
<p>
This trick works in reverse, too.
If you blit from a color DC to a monochrome DC,
then all pixels in the source that are equal to the background color
will turn white, and all other pixels will turn black.
In other words, GDI considers a monochrome bitmap to be
<a HREF="http://www.sciencebob.com/lab/q-zebrastripes.html">
black pixels on a white background</a>.
</p>
<p>
This trick comes in handy when you want to convert a bitmap with
color-keyed transparency into a color bitmap and a mask.
Select the color bitmap into the DC <code>hdcColor</code>,
and create a monochrome bitmap with the same dimensions and select
it into the DC <code>hdcMask</code>.
Then the following operations will construct the mask:
</p>
<pre>
// let's say that the upper left pixel is the transparent color
COLORREF clrTransparent = GetPixel(hdcColor, 0, 0);
COLORREF clrBkPrev = SetBkColor(hdcColor, clrTransparent);
BitBlt(hdcMono, 0, 0, cx, cy, hdcColor, 0, 0, SRCCOPY);
SetBkColor(hdcColor, clrBkPrev);
</pre>
<p>
We can see this in action in our
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/07/23/54576.aspx">
scratch program</a>
by making the following changes:
</p>
<pre>
void
PaintContent(HWND hwnd, PAINTSTRUCT *pps)
{
  <font COLOR=blue>
  HBITMAP hbmMono = CreateBitmap(100, 100, 1, 1, NULL);
  HDC hdcMono = CreateCompatibleDC(pps-&gt;hdc);
  HBITMAP hbmPrev = SelectBitmap(hdcMono, hbmMono);
  HDC hdcScreen = GetDC(NULL);

  SetBkColor(hdcScreen, GetSysColor(COLOR_DESKTOP));
  BitBlt(hdcMono, 0, 0, 100, 100, hdcScreen, 0, 0, SRCCOPY);

  SetTextColor(pps-&gt;hdc, RGB(0xFF,0,0));
  SetBkColor(pps-&gt;hdc, RGB(0,0x80,0));
  BitBlt(pps-&gt;hdc, 0, 0, 100, 100, hdcMono, 0, 0, SRCCOPY);

  ReleaseDC(NULL, hdcScreen);
  SelectBitmap(hdcMono, hbmPrev);
  DeleteDC(hdcMono);
  DeleteObject(hbmMono);</font>
}
</pre>
<p>
We start by creating a 100&nbsp;&times;&nbsp;100 monochrome bitmap
and selecting it into a memory DC. This will become our mask.
Next, we take a screen DC and set its background color to the
desktop color and blit from the screen to the monochrome bitmap.
This creates a bitmap which is white where the screen has the desktop
color and black where the screen has some other color.
We show off we show off this new bitmap by painting it into our
client area, but just for fun, I made the foreground pixels
(black pixels in the monochrome bitmap)
bright red and the background pixels
(white pixels in the monochrome bitmap)
dark green.
</p>
<p>
Minimize your windows so the upper left corner of the desktop is
visible, and turn off your wallpaper (so the desktop color actually
means something).
Run this program and observe a copy of your desktop drawn in the
window's client area,
but with your desktop color turned to green and all the other pixels
turned to red.
</p>
<p>
The rest of the job of drawing a color bitmap with transparency
is now comparatively straightforward.
I'll leave it as an exercise.
Hint:
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/08/03/447131.aspx">
Raster operation 0x00220326 (DSna)
will probably be handy</a>.
</p>
<p>
Next time, we'll look at DIB sections as a way of doing
fast color manipulation, thereby avoiding the need to
perform the DSna ROP entirely.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-442383">
				<div id="div-comment-442383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061114-01/?p=29013#comment-442383">
			November 14, 2006 at 12:30 pm</a>		</div>

		<p>I don&#8217;t normally complain about documentation but here it would have been pretty helpful to know that blitting from a monochrome DC to a colour one could be recoloured by setting the background and text colours of the destination DC. That information isn&#8217;t in MSDN, and I must have missed it when reading your blog. It isn&#8217;t even particularly clear from your linked article.</p>
<p>Indeed, the naive expectation would be that it would use the original colours, i.e. white and black in the monochrome DC would be white and black in the destination DC. I&#8217;ll have to test it out on CE to see whether this bug was replicated over there ;)</p>
<div class=post>[<i>I got the information from <a href="http://msdn.microsoft.com/archive/en-us/dnargdi/html/msdn_transblt.asp" rel="nofollow">this MSDN article</a>. It&#8217;s also mentioned incidentally in SetBkColor and SetTextColor. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-442733">
				<div id="div-comment-442733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob Gray</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061114-01/?p=29013#comment-442733">
			November 15, 2006 at 2:49 am</a>		</div>

		<p>This may be slightly offtopic:</p>
<p>If you were making some graphics-intensive win32 application, and had to use GDI/GDI+, would it be faster to perform things like alpha blended blits using GDI operations as you show here, or write some optimized code that does it all in one go and then displays the end result?</p>
<p>Can GDI(+) take advantage of hardware accellerated 2d operations (and do any modern graphics chips even support that nowadays :))?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-442873">
				<div id="div-comment-442873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061114-01/?p=29013#comment-442873">
			November 15, 2006 at 12:12 pm</a>		</div>

		<p>Bob Gray: 2D accelerated operations are still around, but most modern graphics chips only support either 2D or 3D acceleration being enabled at one time. If, on Windows Vista, the Aero environment is currently turned on, the window surfaces (which are textures applied to the 3D model) are rendered in software with no 2D acceleration.</p>
<p>GDI 2D acceleration is a back-and-forth process, where the device driver can register a function with GDI for performing particular operations. However, if it turns out that the requested operation is too complex, the driver can call back into GDI for GDI to perform part of the processing; GDI will then call back into the driver for suboperations of the main task. For example, the driver might register a callback with GDI for drawing a path, but it might only support simple paths. If GDI passes a complex path, the driver calls back into GDI, which then calls the driver to perform the next step of processing (which might be a textured line segment, for example).</p>
<p>ClearType text rendering is, I suspect, all done by GDI &#8211; I don&#8217;t think 2D hardware is programmable enough to support the determination of the correct colours. The right colour for a pixel to get subpixel rendering right depends on both foreground and background colour, so you&#8217;d have to read back what the background colour is at that point.</p>
<p>Depending on how the hardware and driver work, it might be quicker to work on the image in RAM rather than constantly transferring operations and data to the graphics card and having them processed there, and potentially having to transfer results back to the CPU. It depends whether the improvement in rendering time offsets the latency of getting data to and from the device.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-442883">
				<div id="div-comment-442883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061114-01/?p=29013#comment-442883">
			November 15, 2006 at 12:13 pm</a>		</div>

		<p>Annoyingly, the documentation for StretchBlt does in fact document the use of text and background colours, and did back in the October 2001 MSDN Library too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-442983">
				<div id="div-comment-442983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061114-01/?p=29013#comment-442983">
			November 15, 2006 at 4:23 pm</a>		</div>

		<p>Mike, I&#8217;m not so sure that the hardware won&#8217;t support 2D and 3D acceleration at the same time.</p>
<p>This may not be using the card&#8217;s 2D acceleration features, but the Linux nvidia drivers have a RenderAccel option to turn on acceleration of 2D stuff (the X11 &quot;RENDER&quot; extension). &nbsp;I don&#8217;t know if this uses the card&#8217;s 2D acceleration or not, but since it&#8217;s there, and it is faster for some RENDER operations, I would assume it does.</p>
<p>This option can be turned on at the same time as hardware OpenGL support. &nbsp;And it even (seems to) work &#8212; I can run a (non-fullscreen) OpenGL program alongside a program using the RENDER extension, and as far as I can tell, they both get accelerated.</p>
<p>Now maybe this depends more on the driver than the hardware. &nbsp;It would also depend on the target of the 2D operations, which may explain why Aero does what you&#8217;re seeing. &nbsp;Rendering OpenGL stuff to a texture hasn&#8217;t been well supported until very recently in nvidia&#8217;s driver (if it even works now; I guess I&#8217;m not sure whether it does), and the GLX texture_from_pixmap extension (to get the card to build an OpenGL texture from the contents of a window) is also quite new.</p>
<p>In short: just because you can&#8217;t get the card to accelerate building a texture from a set of 2D operations doesn&#8217;t necessarily mean the card can&#8217;t do 2D and 3D acceleration at the same time. &nbsp;I don&#8217;t know for sure that it can, though, either.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-442853">
				<div id="div-comment-442853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061114-01/?p=29013#comment-442853">
			November 15, 2006 at 11:56 am</a>		</div>

		<p>&#8220;The background color is also used when converting bitmaps from color to monochrome and vice versa.&#8221; &#8220;The text color is also used in converting bitmaps from color to monochrome and vice versa.&#8221; That&#8217;s not exactly clear as to what happens. </p>
<p>As for the other article you linked to, it&#8217;s in the archive section, it dates from 1992 and isn&#8217;t in the offline copy of MSDN Library from October 2001 that I would have been using when I originally wrote it (in 2002). A common problem with MSDN is not so much that the information isn&#8217;t there, it&#8217;s that you don&#8217;t know that it&#8217;s there. I say this as someone who has a pretty good memory, has thoroughly read &#8220;Programming Windows, Fifth Edition&#8221;, &#8220;Programming Applications for Windows, Fourth Edition&#8221;, &#8220;Programming Server-Side Applications for Windows&#8221;, &#8220;Windows Internals, Fourth Edition&#8221;, and used to read every issue of MSDN Magazine. Since I started my Windows programming career around 1999-2000, I simply didn&#8217;t see that article. I wouldn&#8217;t have described what I was doing as &#8216;transparency&#8217; anyway, since I&#8217;m (potentially) changing *both* colours.</p>
<p>I realise there&#8217;s a hard trade-off: you can&#8217;t link to every possible article that uses a given API, you have to be selective. I&#8217;d still classify this as &#8216;obscure&#8217; and add some documentation to BitBlt (and presumably StretchBlt) to the effect that the current text and background colours are used when blitting a monochrome bitmap to a colour DC.</p>
<div class="post">[<i>Monochrome/color conversion is also mentioned in the documentation of the BITMAP structure. I&#8217;m still not sure where the best place for this information is. Having to mention it in every Blt function is fragile. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-443143">
				<div id="div-comment-443143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061114-01/?p=29013#comment-443143">
			November 16, 2006 at 12:10 pm</a>		</div>

		<p>Well, whaddyaknow, it works on CE too. Thanks, that saves creating a couple of brushes and having to select one of them into the screen DC (which up until very recently was leaking a brush on every paint because I forgot to deselect it before deleting it and the DC &#8211; this code is double-buffered), and having to change brushes to change colours. Also saves having to explain a really obscure ternary raster op code.</p>
<p>Now to have the argument about whether it&#8217;s worth making the change&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

