<html>
<head>
<title>The tadpole operators explained</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The tadpole operators explained</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 26, 2015 / year-entry #109</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time,¹ I introduced the tadpole operators. As you have probably figured out by now, it was a joke. There are no new tadpole operators. But the sample code works. What's going on? The tadpole operators are pseudo-operators, like the goes to operator or the sproing operator: They take advantage of existing language features, and...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/05/25/10616865.aspx">
Last time</a>,&sup1; I introduced
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/05/25/10616865.aspx">
the tadpole operators</a>.
As you have probably figured out by now, it was a joke.
There are no new tadpole operators.
</p>
<p>
But the sample code works. What's going on?
</p>
<p>
The tadpole operators are pseudo-operators,
like
<a HREF="http://blogs.msdn.com/b/ericlippert/archive/2010/04/01/somelastminutefeatures.aspx">
the goes to operator</a> or
<a HREF="https://news.ycombinator.com/item?id=9602611">
the sproing operator</a>:
They take advantage of existing language features,
and come with a creative story.
</p>
<p>
The tadpole operators exploit two's complement arithmetic and overflow.&sup2;
The
<code>__ENABLE_<wbr>EXPERIMENTAL_<wbr>TADPOLE_<wbr>OPERATORS</code>
is just a red herring.
</p>
<p>
Start with the identity for two's complement negation
</p>
<pre>
-x = ~x + 1
</pre>
<p>
then move the <code>-x</code> to the right hand side
and the <code>~x</code> to the left hand side:
</p>
<pre>
-~x = x + 1
</pre>
<p>
If that was too fast for you,
we can do it a different way:
start with the identity for two's complement negation
</p>
<pre>
-x = ~x + 1
</pre>
<p>
subtract 1 from both sides
</p>
<pre>
-x - 1 = ~x
</pre>
<p>
and finally, negate both sides
</p>
<pre>
x + 1 = -~x
</pre>
<p>
To get the decrement tadpole operator, start with
</p>
<pre>
-x = ~x + 1
</pre>
<p>
and
substitute <code>x = -y</code>:
</p>
<pre>
-(-y) = ~-y + 1
</pre>
<p>
subtract <code>1</code>
from both sides and simplify <code>-(-y)</code> to <code>y</code>.
</p>
<pre>
y - 1 = ~-y
</pre>
<p>
<b>Update</b>:
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/05/25/10616865.aspx#10617200">
Justin Olbrantz (Quantam)</a>
and
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/05/26/10617079.aspx#10617246">
Ben Voigt</a> provide
a simpler derivation,
starting with the identity for two's complement negation.
</p>
<table BORDER=0 CELLPADDING=3>
<tr>
<td><code>-x = ~x + 1</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td ALIGN=center>Rearrange terms</td>
<td><code>~x = -x - 1</code></td>
</tr>
<tr>
<td>Let <code>x = ~y</code></td>
<td></td>
<td>Let <code>x = -y</code></td>
</tr>
<tr>
<td><code>-~y = ~(~y) + 1</code></td>
<td></td>
<td><code>~-y = -(-y) - 1</code></td>
</tr>
<tr>
<td><code>-~y = y + 1</code></td>
<td></td>
<td><code>~-y = y - 1</code></td>
</tr>
</table>
<p>
&sup1;Why didn't I post it on April 1st?
Well, for one thing, April 1st is overcrowded.
Second,
it would have interfered with the run-up to the //build conference.
And third, yesterday was a holiday in the United States,
and I tend to schedule lighter fare on holidays.
</p>
<p>
&sup2;This means that they don't work on a machine that does not
use two's complement, or one which checks overflow.
Still, maybe they'll be useful if you're entering the
<a HREF="http://ioccc.org/">
IOCCC</a> or some other contest which values minimal code size
or obfuscation (or both).</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1190514">
				<div id="div-comment-1190514" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Boris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190514">
			May 26, 2015 at 7:02 am</a>		</div>

		<p>I noted in the other thread that an April Fools&#39; post would have to be technically false, but that one was false only in spirit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190524">
				<div id="div-comment-1190524" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J Cobb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190524">
			May 26, 2015 at 7:03 am</a>		</div>

		<p>And yesterday was a holiday in the UK too, so all good. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190544">
				<div id="div-comment-1190544" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190544">
			May 26, 2015 at 7:18 am</a>		</div>

		<p>To get the increment version immediately with no sleight of hand, start with the identity Raymond uses (-x = ~x + 1) and substitute (~y) for x. &nbsp;Then -~y = ~(~y) + 1. &nbsp;But ~(~y) is just y so -~y = y + 1. &nbsp;This is the same approach Raymond uses for the decrement tadpole, except that it uses the definition of bitwise inverse ~(~y) = y instead of additive inverse -(-y) = y.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190564">
				<div id="div-comment-1190564" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">OldFart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190564">
			May 26, 2015 at 7:29 am</a>		</div>

		<p>Mostly it demonstrated that people would rather post their own comments than read other people&#39;s comments.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190574">
				<div id="div-comment-1190574" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephan Leclercq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190574">
			May 26, 2015 at 7:34 am</a>		</div>

		<p>Has anyone mentioned that the Tadpole operators could be written as ??&#8211; or -??-</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190594">
				<div id="div-comment-1190594" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wizou</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190594">
			May 26, 2015 at 7:45 am</a>		</div>

		<p>@Stephan Leclercq: with trigraphs enabled :) nice!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190624">
				<div id="div-comment-1190624" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190624">
			May 26, 2015 at 8:31 am</a>		</div>

		<p>Wow, that is a rather nice use of trigraphs, the only other one I&#39;ve seen being the WTF operator (??!??!). One more goofy thing to miss in C++17.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190634">
				<div id="div-comment-1190634" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190634">
			May 26, 2015 at 9:06 am</a>		</div>

		<p>&gt;This means that they don&#39;t work on a machine that does not use two&#39;s complement, or one which checks overflow.</p>
<p>Or any sufficiently intelligent optimizing compiler, since signed integer overflow is undefined behavior. &nbsp;As we&#39;ve seen, that can cause time travel among other things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190654">
				<div id="div-comment-1190654" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Trevor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190654">
			May 26, 2015 at 9:28 am</a>		</div>

		<p>Why does it not work when overflow is checked for? The only two times when overflow comes into play, it comes into play into +1 and -1 as well.</p>
<p>For 8-bit signed, when x = 127, there is an overflow in both x + 1, and -~x = -(-128). When x = -128, there is an overflow in both x &#8211; 1, and ~-x.</p>
<p>For all other cases, no overflow occurs in either.</p>
<div class="post">[<em>I thought that ~-(-127) incurs overflow, but I guess not. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190664">
				<div id="div-comment-1190664" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190664">
			May 26, 2015 at 9:46 am</a>		</div>

		<p>These operations would be subject to overflow only in the same situations that a normal increment or decrement operation would overflow (unless I&#39;m missing something). So that aspect isn&#39;t really a downside. &nbsp;You&#39;re left with relying on two&#39;s-complement and the not-particularly-readable aspects being the downsides to this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190714">
				<div id="div-comment-1190714" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190714">
			May 26, 2015 at 12:24 pm</a>		</div>

		<p>int a = 1&lt;&lt;31;</p>
<p>int b = ~-0;</p>
<p>int c = a/b;</p>
<p>This causes an overflow error, even though b is not 0. &nbsp;Clearly this is a bug in the tadpole operator.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190794">
				<div id="div-comment-1190794" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Louis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190794">
			May 26, 2015 at 4:04 pm</a>		</div>

		<p>@Brian: using b = (0-1) gives the same error. (Also, it&#39;s undefined behavior to shift a 1 into the sign bit.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190814">
				<div id="div-comment-1190814" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190814">
			May 26, 2015 at 5:18 pm</a>		</div>

		<p>I think the simpler issue is, what isn&#39;t undefined behavior in C and in C++?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190824">
				<div id="div-comment-1190824" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190824">
			May 26, 2015 at 8:23 pm</a>		</div>

		<p>This is why parenthesis should be mandatory. &nbsp;(Yeah, I know &#8211; I&#39;m such a spoilsport.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190844">
				<div id="div-comment-1190844" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dirk gently</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190844">
			May 27, 2015 at 1:03 am</a>		</div>

		<p>Bad Raymond! Bad! Making jokes of the humourless computer geek community</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190854">
				<div id="div-comment-1190854" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">alex_sh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190854">
			May 27, 2015 at 1:48 am</a>		</div>

		<p>@Engywuck: they should have used non-breakable space character instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190884">
				<div id="div-comment-1190884" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190884">
			May 27, 2015 at 4:42 am</a>		</div>

		<p>You should have left the explanation due one week after. &nbsp;I was having quite a good time reading some of the comments: the naÃ¯ve ones, the haters gonna hate ones, and the snarky ones. &nbsp;Not so much for the explanatory ones.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190894">
				<div id="div-comment-1190894" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephan Leclercq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190894">
			May 27, 2015 at 4:43 am</a>		</div>

		<p>It&#39;s so much simpler in Forth&#8230; No parentheses, no precedence rules. And like C, almost everything you can write has some undefined behavior, so you&#39;re not un uncharted territory :-) And, oh, btw, tadpole operators already exist in Forth, they&#39;re spelled 1+ and 1-</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1190834">
				<div id="div-comment-1190834" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Engywuck</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190834">
			May 26, 2015 at 10:31 pm</a>		</div>

		<p>@Harry: it gets even &quot;better&quot;: &quot;strong spaces&quot; to change precedence rules for the parser. Just add more whitespace in your formula and have that act as parentheses: <a rel="nofollow" target="_new" href="http://nim-lang.org/docs/manual.html#syntax-strong-spaces" rel="nofollow">nim-lang.org/&#8230;/manual.html</a></p>
<p>I can understand some form of it, e.g. &quot;3+4 * 5&quot; *could* be different from &quot;3 + 4*5&quot;, but this opens the box of pandora for no real reason. ( and ) should rule! </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1190994">
				<div id="div-comment-1190994" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">madbrain</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1190994">
			May 27, 2015 at 1:10 pm</a>		</div>

		<p>Forth with problem the nothing quite you expect that order the in is that is&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1191014">
				<div id="div-comment-1191014" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Justin Olbrantz (Quantam)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1191014">
			May 27, 2015 at 1:35 pm</a>		</div>

		<p>Raymond,</p>
<p>You credited the wrong person. I posted that simplified solution 2 1/2 hours before him <a href="http://blogs.msdn.com/b/oldnewthing/archive/2015/05/25/10616865.aspx#10617200" rel="nofollow" target="_new">blogs.msdn.com/&#8230;/10616865.aspx</a></p>
<div class="post">[<em>Sorry. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1191024">
				<div id="div-comment-1191024" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Justin Olbrantz (Quantam)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1191024">
			May 27, 2015 at 1:52 pm</a>		</div>

		<p>To be fair, I wouldn&#39;t read all 115 comments in the old thread, either :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1191114">
				<div id="div-comment-1191114" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1191114">
			May 27, 2015 at 7:10 pm</a>		</div>

		<p>I think Raymond reads all comments to almost all threads. That&#39;s probably why certain endless debate topics get on his nerves (not naming any for the obvious reason).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1191154">
				<div id="div-comment-1191154" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1191154">
			May 28, 2015 at 3:41 am</a>		</div>

		<p>Conveniently the sproing operator hardly (on the US or UK keyboards at least) makes use of the shift key, while the *(foo)-&gt; is a relative nightmare.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1191174">
				<div id="div-comment-1191174" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">T. West</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150526-00/?p=45034#comment-1191174">
			May 28, 2015 at 5:20 am</a>		</div>

		<p>We&#39;ve seen this before&#8230;</p>
<p>&quot;No, this idea will never escape the confines of the blog post. &nbsp;It was created specifically for humorous purposes, and we modified it so it could never survive in the wild.&quot;</p>
<p>Then there&#39;s a report of someone being hit by a flying chess piece in a fairground. &nbsp;&quot;No, that was just a naturally occurring flying rook. &nbsp;Totally unrelated.&quot;</p>
<p>And then it starts. &nbsp;A trickle, but it&#39;s too late. &nbsp;The author obviously had no idea exactly how dangerous their idea was, and now it&#39;s infecting our communities at an astonishing rate. &nbsp;Soon, we&#39;re being asked to wear helmets near roller coasters.</p>
<p>I predict we&#39;ll see the first appearance of tadpole operators in the dailywtf.com within a year. &nbsp;Within 2 year, it will have spread to our universities, and within 5, *I* will be dealing with it in code maintenance and review.</p>
<p>Thanks a lot, Raymond.</p>
<p>:-)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

