<html>
<head>
<title>Further discussion of the synchronization barrier</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Further discussion of the synchronization barrier</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 29, 2016 / year-entry #158</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160729-00/?p=93985</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It's really just a switch.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The synchronization barrier is apparently more confusing
than I expected.
</p>
<p>
The basic idea of the synchronization barrier is that you want
to each participant in some coordinated activity
to wait until every participant has reached a particular state.
Once the last participant reaches the desired state,
all the participants are released to go on to the next step,
and one of the participants is designated the "winner" for
the step that just completed.
(Usually being the "winner" means that you have to do some
one-time final clean-up.)
</p>
<p>
A synchronization barrier is completely a user-mode concept.
It is not a kernel object that you
can pass to
<code>Wait&shy;For&shy;Single&shy;Object</code>,
destroy with <code>Close&shy;Handle</code>,
or duplicate with <code>Duplicate&shy;Handle</code>.
instead, there is a special entry function
<code>Enter&shy;Synchronization&shy;Barrier</code>,
and a special cleanup function
<code>Delete&shy;Synchronization&shy;Barrier</code>,
</p>
<p>
The analogy here is with critical sections,
which are also user-mode objects that use a special
entry function
<code>Enter&shy;Critical&shy;Section</code>,
and a special cleanup function
<code>Delete&shy;Critical&shy;Section</code>.
You can't pass critical sections to
<code>Wait&shy;For&shy;Single&shy;Object</code>,
<code>Close&shy;Handle</code>,
or <code>Duplicate&shy;Handle</code>.
</p>
<p>
You can think of a synchronization barrier as having
enough tokens to track a specific number of threads
(specified at its creation).
Each token can be in one of the following states:
</p>
<ul>
<li>Available.
<li>A thread is entering.
<li>A thread is leaving.
</ul>
<p>
When a thread tries to enter a synchronization barrier,
it takes an available token,
and transitions the token to <i>entering</i>,
and then waits.
When all the tokens reach the <i>entering</i>
state, then they all transition to the <i>leaving</i>
state simultaneously.
When the thread resumes execution,
it clears the <i>leaving</i> state and
returns the token to <i>available</i>.
</p>
<p>
(In reality, it doesn't work like this.
There aren't any actual tokens.
The synchronization barrier merely keeps
track of the number of tokens of each kind.
No wait, it doesn't even do that!
We'll discuss more about the implementation later.)
</p>
<p>
It's important that you not try to enter
a synchronization barrier until you are sure
that there is an available token,
because the "take an available token" code
doesn't actually know whether there are tokens
available; it just assumes that there is one.
</p>
<p>
If the same set of threads participates in
the synchronization barrier, then this requirement
is easily met,
because each thread leaves the synchronization
barrier before it enters it again.
But if you keep shifting the set of threads in
the synchronization barrier,
then the incoming thread can't enter the
synchronization barrier until the outgoing thread
leaves it.
You can arrange for this by having the outgoing thread
be the one to tell the incoming thread that it's
okay to enter the synchronization barrier.
</p>
<p>
<b>Warning: Implementation details</b>.
Remember that this information is for educational
purposes and is not contractual.
Future versions of the synchronization barrier may
be implemented differently.
</p>
<p>
The current implementation of a synchronization barrier uses
two manual-reset events (which we will call
<i>incoming</i> and <i>outgoing</i>)
and a counter which
records the number of available tokens.
</p>
<ul>
<li>
    As threads enter the synchronization barrier,
    they claim a token, and if the available token count
    is still nonzero, they wait on the <i>incoming</i> event.</p>
<li>When a thread claims the last token,
    the synchronization barrier changes modes:</p>
<ul>
<li>It exchanges the two event handles,
    so that the former <i>outgoing</i> event
    is now <i>incoming</i>, and vice versa.</p>
<li>It resets the new <i>incoming</i> event handle.
<li>It sets the available token count back to the maximum.
<li>It signals the <i>outgoing</i> event handle
    (formerly the <i>incoming</i> event handle),
    which releases all the waiting threads.
    </ul>
</ul>
<p>
From this implementation, you can see why it's
important that outgoing threads leave the
synchronization barrier before new arrivals enter.
If new threads arrive before the outgoing threads
have exited,
then
it's possible for the token count to drop to zero
while there are still threads trying to get out.
The result is that the synchronization barrier starts
to
"<a HREF="http://www.wsdot.wa.gov/Northwest/King/ExpressLanes/Closures.htm"
>turn the barrier the other way</a>"
before all the threads have finished getting out.
Those threads end up trapped inside the synchronization
barrier for an extra cycle
because the event they are using to get out
got reused before they were finished with them.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1 parent" id="comment-1258325">
				<div id="div-comment-1258325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160729-00/?p=93985#comment-1258325">
			July 29, 2016 at 7:57 am</a>		</div>

		<p>There was a time when I needed a solution to find out when all processes running a certain application exited (to uninstall the app). Kind of a reverse semaphore. Now that I think about it, it could have been implemented by having the target processes taking a read lock to a predefined range of a file, and the waiting process trying to take a write lock to the same range.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1258375">
				<div id="div-comment-1258375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160729-00/?p=93985#comment-1258375">
			July 29, 2016 at 9:24 am</a>		</div>

		<p>The problem with using file locks for synchronization is that operations fail outright, there&#8217;s no way to wait on a file lock, or get notified when it is released.  Thus you end up using (wasteful and allows starvation) polling to try again, instead of being event driven (efficient, allows starvation) or queuing up for access (efficient, guaranteed eventual progress).</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1258395">
				<div id="div-comment-1258395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160729-00/?p=93985#comment-1258395">
			July 29, 2016 at 11:45 am</a>		</div>

		<p>LockFileEx without LOCKFILE_FAIL_IMMEDIATELY does this</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1258435">
				<div id="div-comment-1258435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160729-00/?p=93985#comment-1258435">
			August 1, 2016 at 7:27 am</a>		</div>

		<p>Nice!  Do you know if it works with CancelIoEx?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even thread-odd thread-alt depth-1" id="comment-1258365">
				<div id="div-comment-1258365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160729-00/?p=93985#comment-1258365">
			July 29, 2016 at 8:58 am</a>		</div>

		<p>I like the whole concept of just switching the events like that, it is really simple.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

