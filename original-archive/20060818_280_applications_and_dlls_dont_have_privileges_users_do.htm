<html>
<head>
<title>Applications and DLLs don't have privileges; users do</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Applications and DLLs don&#8217;t have privileges; users do</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 18, 2006 / year-entry #281</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>75</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">I can't believe you people are actually asking for backdoors. If an end user can do it, then so can a bad guy. In response to the requirement that all drivers on 64-bit Windows be signed, one commenter suggested adding a backdoor that permits unsigned drivers, using some "obscure registry key". Before somebody can jump...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
I can't believe you people are actually asking for backdoors.
If an end user can do it, then so can a bad guy.
</p>
<p>In response to the requirement that all drivers on 64-bit Windows be signed,
one commenter suggested
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/03/14/551141.aspx#551242">
adding a backdoor that permits unsigned drivers</a>,
using some "obscure registry key".
Before somebody can jump up and shouts "security through obscurity!",
the commenter adds this parenthetical:
"(that no application has privileges to do by default)".
</p>
<p>
What does that parenthetical mean?
How do you protect a registry key from an application?
And if applications don't have privileges to modify a key,
then who does?
</p>
<p>
The Windows security model is based on identity.
Applications don't have privileges.
Users have privileges.
If an application is running in your user context, then it can do
anything you can,
and that includes setting that "obscure registry key".
(This is a variation on
"<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/12/12/502719.aspx"
>Your debugging code can be a security hole</a>".)
Same goes for DLLs.
There's no such thing as something
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/06/07/426294.aspx#426645">
only an individual program/library can read/write to</a>
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/06/19/636823.aspx#637022 
">
or do</a>.
You can't check the "identity of the calling library" because
you can't trust the return address.
Coming up with some other "magic encryption key" like the full path
to the DLL won't help either, because a key that anybody can guess
with 100% accuracy isn't much of a key.
</p>
<p>
Yes,
UNIX has setuid,
but that still doesn't make applications security principals.
Even in UNIX, permissions are assigned to users, not to applications.
</p>
<p>
That's one of the reasons I get so puzzled when I hear people
say,
"<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/03/21/556505.aspx#558271"
>Windows should let me do whatever I want with my system</a>",
while simultaneously saying,
"<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/03/21/556505.aspx#557618"
>Windows should have used ACLs to prevent applications from
doing whatever they want with my system</a>."
But when you are running an application,
<strong>the application is you</strong>.
If you can do it, then an application can do it
because the application is you.
</p>
<p>
Some people want to extend the concept of security principal
to a chunk of code.
"This registry key can be written to only by this function."
But how could you enforce this?
Once you let untrusted code enter a process,
you can't trust any return addresses any more.
How else could you identify the caller, then?
</p>
<p>
"Well, the DLL when it is created is given a magic cookie
that it can use to prove its identity by passing that cookie
to these 'super-secure functions'.
For example,
</p>
<pre>
// SECRET.DLL - a DLL that protects a secret registry key
HANDLE g_hMagicCookie;

// this function is called by means to be determined;
// it tells us the magic cookie to use to prove our identity.
void SetMagicCookie(HANDLE hMagicCookie)
{
 g_hMagicCookie = hMagicCookie;
}
</pre>
<p>
and then the program can use the magic cookie to prove
that it is the caller.
For example, you could have
<code>RegSetValueWithCookie(g_hMagicCookie, hkey, ...)</code>,
where passing the cookie means 'It's me calling, please give
me access to that thing that only I have access to."
</p>
<p>
That won't stop the bad guys for long.
They just have to figure out where the DLL saves that cookie
and read it, and bingo, they're now you.
</p>
<pre>
// bad-guy program

int CALLBACK WinMain(...)
{
 // call some random function from SECRET.DLL
 // so it gets loaded and the magic cookie gets
 // initialized.
 SomeFunctionFromSECRETDLL();

 // experimentation tells us that SECRET.DLL
 // keeps its magic cookie at address 0x70131970
 HANDLE hMagicCookie = *(HANDLE*)0x70131970;
 RegSetValueWithCookie(hMagicCookie, hkey, ...);

 return 0;
}
</pre>
<p>
Ta-da, we now have a program that writes to that
registry key that <code>SECRET.DLL</code> was trying to protect.
It does it by merely waiting for <code>SECRET.DLL</code> to receive
its magic cookie, then stealing that cookie.
</p>
<p>
"Well, sure, but if I combine that with the check-the-return-address
technique, then that'll stop them."
</p>
<p>
No, that doesn't stop anybody.  All the bad guy has to do is
change the <code>RegSetValueWithCookie(hMagicCookie, hkey, ...)</code>
to code that hunts for a trusted address inside <code>SECRET.DLL</code>
and cooks up a fake stack so that when control reaches
<code>RegSetValueWithCookie</code>, everything in memory looks just
like a legitimate call to the function, except that the attacker
got to pass different parameters.
</p>
<p>
You can come up with whatever technique you want,
it won't do any good.
Once untrusted code has been granted access to a process,
the entire process is compromised and you cannot trust it.
Worst case, the attacker just sets a breakpoint on
<code>RegSetValueWithCookie</code>, waits for the breakpoint
to hit, then edits the stack to modify the parameters and resumes
execution.
</p>
<p>
That's why code is not a security principal.
</p>
<p>
Corollary: Any security policy that says "Applications cannot do X
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/06/07/426294.aspx#426432">
without permission from the user</a>" is flawed from conception.
The application running as the user <strong>is the user</strong>.
It's one thing to have this rule as a recommendation,
even a logo requirement,
but it's another thing to enforce this rule in the security subsystem.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (75)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-410663">
				<div id="div-comment-410663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuliy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410663">
			August 18, 2006 at 10:34 am</a>		</div>

		<p>Permission from the user can be granted in a few different ways. One of which is requiring the user to enter their password again. Another is popping up a system modal dialog that doesn&#8217;t accept events generated by another application, but only from the console (but that&#8217;s tricky, because of applications like VNC or terminal services: what exactly is &quot;the console&quot;?).</p>
<p>Still another approach for extremely dangerous settings is to actually enable the change after restart, but very early in the user&#8217;s login process, to pop up a message notifying the user: &quot;This setting has changed from its old value of ___ to a new value of ___. Do you wish to <em>Accept the new value</em> or <em>Restore the setting to its previous value</em>?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-410673">
				<div id="div-comment-410673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carlos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410673">
			August 18, 2006 at 10:47 am</a>		</div>

		<p>The problem is that the Windows and UNIX security models are ass-backwards. &nbsp;The operating systems go to great lengths to protect themselves from me, but do nothing to protect my data from the programs I run.</p>
<p>Re-architecting Windows with a capability security model would be impracticable, but .Net is an excellent step in the right direction.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-410723">
				<div id="div-comment-410723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Ritchie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410723">
			August 18, 2006 at 11:10 am</a>		</div>

		<p>&quot;Any security policy that says &quot;Applications cannot do X without permission from the user&quot; is flawed from conception.&quot; &nbsp;Isn&#8217;t that basically the out-of-the-box policy for IE downloads, installing unsigned drivers, etc?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-410733">
				<div id="div-comment-410733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Ritchie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410733">
			August 18, 2006 at 11:10 am</a>		</div>

		<p>&quot;Any security policy that says &quot;Applications cannot do X without permission from the user&quot; is flawed from conception.&quot; &nbsp;Isn&#8217;t that basically the out-of-the-box policy for IE downloads, installing unsigned drivers, etc?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-410753">
				<div id="div-comment-410753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410753">
			August 18, 2006 at 11:14 am</a>		</div>

		<p>Carlos &gt; How is an OS supposed to protect your data from the programs that access them?</p>
<p>If you edit a Word .doc file with Notepad, then it&#8217;ll end up corrupted. How is the OS supposed to guard against that? What exactly are you proposing?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-410783">
				<div id="div-comment-410783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard Gadsden</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410783">
			August 18, 2006 at 11:23 am</a>		</div>

		<p>&#8220;If you edit a Word .doc file with Notepad, then it&#8217;ll end up corrupted. How is the OS supposed to guard against that? What exactly are you proposing?&#8221;</p>
<p>The OS should (a) know that the Word .doc file belongs to Word and (b) not let Notepad access that file.</p>
<div CLASS=post>[<i>I can see the error messages now. &#8220;Outlook cannot embed the OLE object Party.doc. That document can be opened only by Microsoft Word.&#8221; Or &#8220;Explorer cannot show the properties of the file Party.doc. That document can be opened only by Microsoft Word.&#8221; Or even better, &#8220;OpenOffice cannot open Party.doc. That document can only be opened by Microsoft Word.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-410793">
				<div id="div-comment-410793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410793">
			August 18, 2006 at 11:30 am</a>		</div>

		<p>&quot;Any security policy that says &quot;Applications cannot do X without permission from the user&quot; is flawed from conception&quot;</p>
<p>But that&#8217;s only true because of the assumptions in current OS design, surely? An entirely managed code OS like Singularity can enforce those kinds of policies can&#8217;t it? Likewise you could build an infrastructure on Windows that used some form of hardware seperation (similar to user/kernel mode) that prevented rogue native code applications from acting like this, it&#8217;s just that we currently don&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-410803">
				<div id="div-comment-410803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Todd Greer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410803">
			August 18, 2006 at 11:37 am</a>		</div>

		<p>Richard Gadsden:</p>
<p>Now you&#8217;ve got the OS unduly interfering with what I want it to do. As the user, if I want to edit a .doc file with Notepad, I expect the OS to refrain from interfering[1]. Yes, some sorts of programs should have a more limited set of (user configurable) privileges, but others, such as general-purpose editors, should not.</p>
<p>[1] To get a less filtered view, I do occasionally open unusual files in Notepad, though never yet a .doc file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-410813">
				<div id="div-comment-410813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mastmaker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410813">
			August 18, 2006 at 11:40 am</a>		</div>

		<p>@Richard Gadsden</p>
<p>Ha! then you would end up with a visual basic OS. Or a AOL OS. Imagine a flight where you are prohibited from carrying a bottle of water&#8230;.oh&#8230;I am sorry&#8230;THAT has already been done.</p>
<p>I can&#8217;t begin to count the ways in which that suggestion is gaseous.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-410833">
				<div id="div-comment-410833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.chetos.net/' rel='external nofollow' class='url'>Chet</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410833">
			August 18, 2006 at 11:57 am</a>		</div>

		<p>@mastmaker</p>
<p>What are you going on about?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-410843">
				<div id="div-comment-410843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carlos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410843">
			August 18, 2006 at 12:01 pm</a>		</div>

		<p>&#8220;If you edit a Word .doc file with Notepad, then it&#8217;ll end up corrupted. How is the OS supposed to guard against that? What exactly are you proposing?&#8221;</p>
<p>If notepad screws up a file that I chose to open then that&#8217;s my problem. &nbsp;If notepad has permission to corrupt or delete all of my documents (which it does) then that&#8217;s a flaw in the OS security model.</p>
<p>&#8220;And what&#8217;s the difference between a configuration file and a document?&#8221;</p>
<p>A configuration file lives in the app&#8217;s per-user data directory. &nbsp;So the app can access it without further permission. &nbsp;(But it can&#8217;t access any other app&#8217;s data directory.)</p>
<p>A document is a file explicitly chosen by the user through a secure file open dialog or windows explorer (which would also update the MRU list).</p>
<p>Apps are only allowed to access their own private data and documents chosen by the user.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-410873">
				<div id="div-comment-410873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Todd Greer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410873">
			August 18, 2006 at 12:07 pm</a>		</div>

		<p>&quot;There&#8217;s no such thing as something only an individual program/library can read/write to or do.&quot;</p>
<p>You are absolutely correct with regard to libraries (at least native ones). However, having data that only individual programs can read or write is a solved problem. In unix, you create a user to own the data, make the data only readable and writable by its owner, and set the program to be setuid to that user.</p>
<p>I don&#8217;t know what the equivalent to the setuid bit is in Windows, but given Windows&#8217;s rich security capabilities, I&#8217;m sure there is a way to achieve the same result.</p>
<p>Naturally, root/Administrative Users can still access the data, but having full access is what such accounts are for. </p>
<p>If there is a legitimate need for a particular library to have such an altered set of privileges, just wrap it in a process and apply the same technique. That said, I suspect that there are very few situations where this should actually be done, and you still have to make sure that the now trusted process doesn&#8217;t permit itself to be misused, but it is certainly possible to isolate code this way.</p>
<p>Note that I do agree with the overall point of the post, just not certain details.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-410883">
				<div id="div-comment-410883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410883">
			August 18, 2006 at 12:13 pm</a>		</div>

		<p>VMS had (has?) the concept of associating privileges with applications as well as with users or processes.</p>
<p>For example, you could give the Backup program READALL priv (allowing it to read any file, regardless of ownership and ACL). &nbsp;Then you would put an ACL on Backup to only allow your system operators to access it.</p>
<p>When the loader loads a trusted app, it grants the associated privileges to the process. &nbsp;When the application terminates, the privileges are revoked. &nbsp;That kept the operators from starting Backup, hitting Ctrl+Y, and ending up with a process. &nbsp;Typically the tape drive was physically secured in a locked room, so operators couldn&#8217;t just back up and then grab the tape.</p>
<p>Maybe there&#8217;s a flaw in the design, but I know that VMS was once considered very secure.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-410893">
				<div id="div-comment-410893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410893">
			August 18, 2006 at 12:16 pm</a>		</div>

		<p>[So if you open an album in Picasa it shouldn&#8217;t show up in your Start menu&#8217;s &#8220;recent documents&#8221; list? Because that list is stored in HKCUSoftwareMicrosoft&#8230; which your proposal places off-limits to Picasa. And what&#8217;s the difference between a configuration file and a document? -Raymond]</p>
<p>Yes. My argument is badly worded and ill thought out. Because I find it fruitless spending too much time thinking about that which will not happen.</p>
<p>With regards to my Picasa example, I got an early beta version that had a bug that caused it to write &#8220;discovered&#8221; image file names into HKCU. This is why I picked on it. Id rather that writing to the root of HKCU would be impossible for a application installed with default app permissions.</p>
<p>I don&#8217;t think that [HKCUSoftwareMicrosoft&#8230;] need necessially be off limits to applications. Not all of it for certain. Just like users can be granted access to some sub keys, and lcoked out of others, applications could be granted sufficient access &#8211; by default &#8211; for the shell component) hosted as it is in each applications process space &#8211; to read and write its recent documents list.</p>
<p>Perhaps I should not have mentioned configuration files at all. But, for the purpose arguing about the hypothetical OS protecting config files but allowing access to documents, protected &#8220;config&#8221; files would be those stored in the applications Program Files folder. &#8220;Documents&#8221; would be those files stored in the users &#8220;My Documents&#8221; folder.</p>
<div CLASS=post>[<i>But you still have the DLL problem. Process A loads B.DLL (e.g. Wordpad loads a media player). Does Process A gain the ability to modify B.DLL&#8217;s settings? If you say No, then B.DLL can&#8217;t update its settings. If you say Yes, then bad guys can load B.DLL (thereby gaining &#8220;Allowed to modify B.DLL&#8217;s settings&#8221; permission) and then start partying on its settings. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-410903">
				<div id="div-comment-410903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Todd Greer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410903">
			August 18, 2006 at 12:17 pm</a>		</div>

		<p>Adam: It actually might be a good idea to have the <em>option</em> of refusing to run any untrusted[1] code. This would be some sort of user preference, domain policy, or some such. Many users would have no problem with this. I could see it being good for some enterprise users, for example. It would of course be disabled on any developer&#8217;s computer, and it might be too disruptive to even have on by default.</p>
<p>[1] I&#8217;m not talking about code signing; code could be considered trusted by virtue of the user having been asked by the OS.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-410923">
				<div id="div-comment-410923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mastmaker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410923">
			August 18, 2006 at 12:21 pm</a>		</div>

		<p>@chet</p>
<p>Just venting the steam while trying to be funny. Apparently, I am not so successful. Otherwise, &#8216;I&#8217; would be chosen to replace Jay Leno instead of Conan O&#8217;brien. :-)</p>
<p>I still can&#8217;t get over the monstrosity of that suggestion. (As Raymond surmised) Microsoft would be stripped down to underwear to pay the penalty for Anti-trust case on THAT one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-410943">
				<div id="div-comment-410943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mastmaker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410943">
			August 18, 2006 at 12:22 pm</a>		</div>

		<p>@chet</p>
<p>Just venting the steam while trying to be funny. Apparently, I am not so successful. Otherwise, &#8216;I&#8217; would be chosen to replace Jay Leno instead of Conan O&#8217;brien. :-)</p>
<p>I still can&#8217;t get over the monstrosity of that suggestion. (As Raymond surmised) Microsoft would be stripped down to underwear to pay the penalty for Anti-trust case on THAT one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-410953">
				<div id="div-comment-410953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410953">
			August 18, 2006 at 12:23 pm</a>		</div>

		<p>Interesting. So if I open foo.doc in MS Word via the secure open file dialog, Word is fine to read and write foo.doc, but can&#8217;t write (or overwrite) a backup file, or an autosave file, in the same folder? Interesting.</p>
<p>Although, Word could keep the backups/autosaves in it&#8217;s own cache folder instead of next to the real folder. But then you have a problem if the user wants to rename/move/delete the original file. How do you associate the backup with the original? Or make sure you remove backups in good time? It&#8217;s not like the user can see it right there next to their original document when they move/delete the original.</p>
<p>HTML editors would be tricky too. At the moment if you add an image to a web page you&#8217;re working on the editor just sticks it in an &quot;images&quot; directory next to the HTML file, so that if you delete the original the version you put in the HTML file is still there. Now you&#8217;re saying that as well as selecting the images to include, the user will have to confirm saving every single image they&#8217;re about to add to the web page?</p>
<p>And when they re-open the page, they&#8217;ll have to confirm opening every single image file included in the page to view it properly?</p>
<p>Wow, what about music players? Open a playlist and be prompted to open every single mp3 file referenced in it? Or do you want to keep a copy of each mp3 in the playlist? What if you have multiple playlists with the same file in? Note &#8211; even if this can be done in bulk, what about nested playlists? &quot;All&quot; contains references to each &quot;Artist&quot; playlist. When you open &quot;All&quot;, you&#8217;ll have to be prompted to confirm all the sub-playlists to open before they can be read to figure out which mp3 files to confirm.</p>
<p>I dunno &#8211; there just seem to be a lot of problems associated with what you&#8217;re proposing. And I&#8217;m sure I haven&#8217;t listed even a tiny fraction of them.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-410963">
				<div id="div-comment-410963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nksingh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410963">
			August 18, 2006 at 12:26 pm</a>		</div>

		<p>Most suggestions here are exactly like saying that we should have a dictatorship because we don&#8217;t like our current president&#8230; &nbsp;(I&#8217;ve sometimes felt myself believing that way over the past 5 years).</p>
<p>Nevertheless, in UNIX people achieve a similar thing by having restricted user accounts for programs like apache (I think IIS does this too). &nbsp;This isn&#8217;t a general purpose solution, though, for applications that users wish to run directly. &nbsp;</p>
<p>Frankly, the easiest security model is one in which the user has full access to her computer so she can install or remove things at will (with maybe some simple protections like hiding system files so that she doesn&#8217;t make terrible mistakes). &nbsp;Entering a gazillion passwords is not my idea of an easy experience. &nbsp;I think we need to stop trying to protect computers against malware through technology but instead use legal means to target these people. &nbsp;If people start going to jail for producing evil software, it would probably put a dent in the amount of stuff out there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-410993">
				<div id="div-comment-410993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">XRay</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410993">
			August 18, 2006 at 12:38 pm</a>		</div>

		<blockquote><p>
  &gt; &quot;Any security policy that says &quot;Applications cannot do X without permission from the user&quot; is flawed from conception&quot; </p>
<p>Have the setting kernel protected. Always. Let it unprotected in safemode or whatever other bootmode only the user can select.</p>
<p>That said, I&#8217;m very against the decision of allowing only signed drivers. Cheap hardware companies (you know, those very cheap bluetooth dongles) are cut away. Freeware is cut away from the driver market. Opensource too. Not a nice way to push RDP in place of VNC..<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411023">
				<div id="div-comment-411023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erzengel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411023">
			August 18, 2006 at 1:09 pm</a>		</div>

		<p>If the application is you, what&#8217;s to keep applications from modifying XP&#8217;s pin/recently used menu?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411053">
				<div id="div-comment-411053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411053">
			August 18, 2006 at 1:15 pm</a>		</div>

		<p>@ Yuliy : &quot;Permission from the user can be granted in a few different ways. One of which is requiring the user to enter their password again<br />
<br />&quot;</p>
<p>This defeats the whole point of a single, secured sign-on process in the first place, also what if the user is using some other authentication mechanism like a smart-card?</p>
<p>Also not only will user get sick of the constant prompting to confirm security details they will stop assigning any special consideration to the process and blindly enter them regardless of who / what asks for them regardless of when / where it asked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411063">
				<div id="div-comment-411063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411063">
			August 18, 2006 at 1:20 pm</a>		</div>

		<p>I think the &#8216;access by application only&#8217; thing can be solved in principle. </p>
<p>Assume there are such things as &#8220;application SIDs&#8221;, i.e. SIDs that identify applications. </p>
<p>First approximation: </p>
<p>When a new process is created to run an image, the image file on disk is checksummed (MD5, say). The result is looked up in some Big Database which maps from checksum to application SID. If found, the process token is modified to include the application SID. </p>
<p>Naturally, resources can then have security descriptors which mention the SID in the usual way. </p>
<p>This isn&#8217;t too terribly different in principle from the use of role-specific SIDs like INTERACTIVE, BATCH, etc. </p>
<p>In practice, it&#8217;ll have to be slightly different, since NtCreateProcess doesn&#8217;t take a file, it takes a section handle. But those are mere details. </p>
<p>The Big Database is constructed by management operation: &#8220;I allow this application program to run with identifier XYZ&#8221;. &nbsp;There are some logistical problems to deal with, in that you probably don&#8217;t know the SID until after you&#8217;ve &#8220;installed&#8221; the application in that manner, so you can&#8217;t put XYZ into the SD of any object. But such things can be dealt with. </p>
<p>The real question here is, does this make the system more secure? &nbsp;It requires the admin (the XP Home admin, even) to make decisions about what apps can be trusted. The database needs to be adjusted every time an application is updated, which means the user is going to get conditioned into pressing &#8220;OK&#8221; without reading anything, just as they are now. </p>
<div CLASS=post>[<i>And then all I have to do is inject some code into this application (since it merely added the application SID to the token, my SID is still there and I have debug privileges over my own applications) and I have effectively &#8220;stolen&#8221; the application SID. No MD5 hash hacking necessary. (And the &#8220;dialog box fatigue&#8221; issue you mention is a real problem too.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411093">
				<div id="div-comment-411093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411093">
			August 18, 2006 at 1:48 pm</a>		</div>

		<p>Wow. &nbsp;There certainly are some strange requests in the comments today!</p>
<p>As Raymond points out, security is associated with the account (i.e. the user), not to applications or processes. &nbsp;This means that you have the same privileges / permissions from the start of your session to the end, and so do all of the programs you run. &nbsp;Applications can, of course, drop privilege when running, but they cannot gain privileges that are not already assigned to the account. &nbsp;</p>
<p>The problem with this system is that you don&#8217;t want to use those privileges all the time. &nbsp;For example, if you are a power user and you&#8217;re browsing the web, you&#8217;d probably prefer that the &quot;software install&quot; privilege be dropped so that malicious websites can&#8217;t install software without your asking. &nbsp;But can you imagine what such a system that asked you about using privileges would look like every time you tried to do something? &nbsp;It would look like Vista Beta 1. &nbsp;In other words, there would be so many dialog boxes about permissions and access that you&#8217;d tear your hair out before finishsing the latest install of QuickBooks.</p>
<p>One solution is available from <a rel="nofollow" target="_new" href="http://www.desktopstandard.com/PolicyMakerApplicationSecurity.aspx" rel="nofollow">http://www.desktopstandard.com/PolicyMakerApplicationSecurity.aspx</a> (which I have no afiliation with; I found the link from Aaron Margosis&#8217; MSDN blog at <a rel="nofollow" target="_new" href="http://blogs.msdn.com/aaron_margosis/" rel="nofollow">http://blogs.msdn.com/aaron_margosis/</a> ). &nbsp;This program runs as an NT service that will grant privileges to processes (keyed by application name and verified by MD5 hashes) when certain users run them. &nbsp;This allows the user to run with the least privilege at all times and be granted temporary privilege when running &nbsp;certain processes. &nbsp;According to the manufacturer&#8217;s website, you can even prevent children of the &quot;blessed&quot; process from inheriting its privileges.</p>
<p>The catch is that this is still prone to the same problems as Raymond has already mentioned. &nbsp;For example, instead of using some hidden registry key for protection, you&#8217;re now depending on the MD5 hash of the application. &nbsp;While this may be harder to crack, recent research shows that it is clearly not impossible.</p>
<p>I&#8217;m not sure what the best solution to this problem is. &nbsp;In the UNIX world it&#8217;s easy to switch to root and run some sensitive task; in Windows, not so much. &nbsp;Fast user switching helps, but only if the task that requires privileges can be completed while running with privilege. &nbsp;Otherwise, switching between the users is a real PITA. &nbsp;And, yes, I know about the &#8216;runas&#8217; utility helps, but somehow it doesn&#8217;t seem to work as well as switching to root does in UNIX (at least to me).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411103">
				<div id="div-comment-411103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411103">
			August 18, 2006 at 2:21 pm</a>		</div>

		<p>Why is the answer to every security problem &#8220;Just add another dialog box&#8221;? -Raymond </p>
<p>Any security policy that says &#8220;Applications cannot do X without permission from the user&#8221; is flawed from conception. -Raymond </p>
<p>(And the &#8220;dialog box fatigue&#8221; issue you mention is a real problem too.) -Raymond </p>
<p>Reading this post and the comments makes me curious&#8230; what do you think of the security model in Vista? &nbsp;Asking permission to do this and that gets annoying pretty quick, and does seem somewhat problem prone. I suppose when the little &#8220;Yes/No&#8221; box pops up, other applications are stymied somewhat from messing with the dialog, but is it that secure? All it takes is one person to figure out how to send a keystroke through the &#8216;fog&#8217; and the box is nullified. </p>
<p>I agree that bouncing between user and root in *nix is easier than in Windows, but still a pain. Too often I find myself just doing an su &#8211; and then staying as root until I&#8217;m done with whatever it was I was working on. Typing sudo 500 times an hour gets old real fast as well. </p>
<p>I work in IT at the moment and am constantly bouncing around my network and hardware settings, registry, filesystem, etc. If I try an run as a regular user, my work is doubled just to get into the right security context. &nbsp;The solution? I run as an admin and think before I click. Maybe that will bite me one day, but it hasn&#8217;t yet.</p>
<div CLASS=post>[<i>&#8220;What do you think of the new security model in Vista?&#8221; Ask me in ten years. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411113">
				<div id="div-comment-411113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bmm6o</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411113">
			August 18, 2006 at 2:48 pm</a>		</div>

		<p>&#8220;Any security policy that says &#8220;Applications cannot do X without permission from the user&#8221; is flawed from conception. The application running as the user is the user.&#8221; </p>
<p>This contains the underlying assumption that the user trusts the software. &nbsp;I don&#8217;t know about the average user, but I get a little lump in my stomach every time I run a program I downloaded from the internet. &nbsp;Even if I trust that Winamp (e.g.) won&#8217;t intentionally mess up my system, how can I be sure there aren&#8217;t any bugs that cause data loss? &nbsp;Wouldn&#8217;t it be great if I could give it read-only access to my mp3 files, and restrict it from doing anything else? &nbsp;I have much more faith that Windows implements and enforces file ACLs correctly, and I&#8217;d like to leverage that. </p>
<p>I think that&#8217;s all that people want, and I don&#8217;t think it&#8217;s unreasonable. &nbsp;And you&#8217;re right Raymond that manually doing this in Windows would put an excessive burden on the user. &nbsp;They would have to create a new account with appropriate rights, create a batch file to &nbsp;RunAs before launching the app, remember to create an appropriate ACL for each new mp3 file they rip from CD, etc. &nbsp;But just because nobody&#8217;s proposed a good UI for it, it doesn&#8217;t follow that it wouldn&#8217;t be a desirable outcome.</p>
<div CLASS=post>[<i>Perhaps <a href="http://blogs.msdn.com/aaron_margosis/archive/2004/09/10/227727.aspx" rel="nofollow">Restricted Tokens</a> will get you most of what you want. It&#8217;s not file-by-file but it may be close enough. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411203">
				<div id="div-comment-411203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://coldacid.slylabs.com/' rel='external nofollow' class='url'>Chris Charabaruk</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411203">
			August 18, 2006 at 4:45 pm</a>		</div>

		<p>&quot;Of course this only works if you can trust a process, which you can never really do in Windows/Unix. &nbsp;One way Singularity accomplishes this is by disallowing any form of code loading after the process starts. &nbsp;Basically, no LoadLibarys. &nbsp;If you want to load a DLL, that must be specified in your manifest. &nbsp;Now you can authenticate an in-storage program and trust that it won&#8217;t change.&quot;</p>
<p>In other words, there is no extensibility possible for applications running on Singularity. Doesn&#8217;t strike me as too useful, then!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-410763">
				<div id="div-comment-410763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410763">
			August 18, 2006 at 11:19 am</a>		</div>

		<p>I don&#8217;t know&#8230; I still *want* permissions to be assigned to applications.</p>
<p>Now, dll&#8217;s within an application &#8211; thats another story. I can see that it would be impossible to enforce module based permissions.</p>
<p>That said, when I download and run some random application from the internet. Say, for example, google picasa&#8230; I think that it should be confined to reading/writing exclusively from HKCUSoftwareGoogle&#8230; And, within Program Files, it again should again be stuck within its install script declared folder. &#8220;Program FilesGoogle&#8230;&#8221;</p>
<p>I would like a OS where *all* software *has* to be installed via install scripts that are executed by a trusted OS supplied install tool. i.e. MSI.</p>
<p>And, the applications / sfotware subsequently isntalled, would be, entirely confined &#8211; by default permissions &#8211; to its own program folders and registry keys. OS keys (HKCR) would be read only, other application keys, would be entirely hidden. I dont think theres any reason for application X to know of application Ys presence on the machine, nevermind have the ability to screw with its settings.</p>
<p>I am a developer. Management occasionally come to me and ask me to do&#8230; distasteful things. So far I have held them off. But, for as long as &#8220;dont screw with other applications or the OS via undocumented means&#8221; remains a not very well documented guideline, the temptation exists.</p>
<p>Me &#8211; I want the OS to partition applications, and keep them partitioned. At least their files and registry keys. That way, when I want to uninstall something, I can, and be sure its cleanly gone. </p>
<p>The process boundary &#8220;protection&#8221; the os offers is all for naught when apps can directly go and poke at the config files, code files, and registry settings of other apps.</p>
<div CLASs=post>[<i>So if you open an album in Picasa it shouldn&#8217;t show up in your Start menu&#8217;s &#8220;recent documents&#8221; list? Because that list is stored in HKCUSoftwareMicrosoft&#8230; which your proposal places off-limits to Picasa. And what&#8217;s the difference between a configuration file and a document? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411243">
				<div id="div-comment-411243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">theofour</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411243">
			August 18, 2006 at 6:22 pm</a>		</div>

		<p>Actually I think users should be able to do almost everything they want to do, just hazardous operations should be made difficult to finish (by asking user to confirm passwords, inserting PIN and PUK and other passwords/keys).</p>
<p>You do not need an application to cause user unhappyness due to having those rights &#8211; they will almost always do something they will later regret doing. So technically users need to be protected from themselves. That is why versioning filesystems (filesystems, that version your files making them recoverable) and system restore functionality are so useful. The only drawback is that these features require a lot of space on your disks (and that space is not cheap, at least not yet). On the other hand, having systems, that never lose data, can be very effective when battling piracy as you couldn&#8217;t remove the evidence.</p>
<p>It is just too bad I wouldn&#8217;t like that kind of attack on my privacy, so running computers with no versioning data storage and root/administrator rights with having to manually confirm/allow (almost) any application at any time trying to run or access any libraries or other applications, will be the best solution for me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411253">
				<div id="div-comment-411253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/audiofool/archive/2006/08/18/706708.aspx' rel='external nofollow' class='url'>The Audio Fool</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411253">
			August 18, 2006 at 6:59 pm</a>		</div>

		<p>Raymond today has a discussion up about the folly of trying to set security with a granularity of per-DLL.&amp;amp;nbsp;&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-410853">
				<div id="div-comment-410853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-410853">
			August 18, 2006 at 12:04 pm</a>		</div>

		<p>Chris&gt; &quot;I would like a OS where *all* software *has* to be installed via install scripts that are executed by a trusted OS supplied install tool. i.e. MSI.&quot;</p>
<p>What about batch files/Monad scripts? Should you be required to write an installer for your batch file and then execute it before being able to /run/ the script? Every time you modify the file? Even while you&#8217;re in the process of developing it? (How do you make a difference between a &quot;finished&quot; script and one under construction? Is there a difference? For most of my scripts there isn&#8217;t.)</p>
<p>Or do you want the scripts you write to not be able to access any of your files? (Why are you writing the script again?)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411263">
				<div id="div-comment-411263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">El Guapo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411263">
			August 18, 2006 at 7:47 pm</a>		</div>

		<p>Sorry if this is said before but, </p>
<p>How the heck do you explain CAS (CODE ACCESS SECURITY) in .NET? </p>
<p>The whole principal of CAS is exactly the OPPOSITE of what you just asserted! </p>
<div CLASS=post>[<i>This was already explained yesterday. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411273">
				<div id="div-comment-411273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">El Guapo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411273">
			August 18, 2006 at 7:53 pm</a>		</div>

		<p>Oh, sorry, I will go read it.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411283">
				<div id="div-comment-411283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jamessummerlin.blogspot.com' rel='external nofollow' class='url'>James Summerlin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411283">
			August 18, 2006 at 8:06 pm</a>		</div>

		<p>I am to the point I&#8217;m ready to pull my hair out. &nbsp;I cannot believe all of you are having such a horrible time with the simple concept Mr. Chen is trying to convey to you.</p>
<p>THE PROGRAM RUN BY THE USER IS RUN UNDER THE SAME SECURITY CONTEXT AS THAT USER.</p>
<p>If a user with ADMINISTRATOR RIGHTS starts up notepad, then notepad HAS ADMINISTRATOR RIGHTS! &nbsp;It&#8217;s that simple. &nbsp;And the same goes for any other stupid program the user gets from download.com.</p>
<p>What I am seeing is that many of you want to log on as god but still be able to download all the crap you want in utmost safety. &nbsp;Or, you want Windows to protect the user from every application out there BUT YOURS!! &nbsp;Which begs the question of why in the hell should I trust you and your little app?</p>
<p>Please stop and think about what you are typing before you type it. &nbsp;Right now I am having a horrible time thinking any of you have a degree in computer science &#8211; and if you do you obviously skipped the entire semester of your Operating Systems class (and possibly even compiler construction). </p>
<p>The answer isn&#8217;t to create more dialog boxes for users to ignore.</p>
<p>The answer isn&#8217;t for MS to create special back doors just for you.</p>
<p>The answer is for MS to continue to spend millions of dollars every year in research and usability labs to figure out the best way to move forward &#8211; which is what they are doing. </p>
<p>Of course, there&#8217;s always the conspiracy theory that many of you are open source/slashdotters who are trying everything you can to knock a hole in Mr. Chen&#8217;s wall.</p>
<p>On a different note, users logging on with admin rights explains 99.99% of all security problems and crashes that Windows has endured since Windows 2000. &nbsp;And the reason why users have to log on with admin right is because of poorly written third party apps (like yours). &nbsp;Thank God (and Mr. Chen) that MS is going to do something about that in Vista &#8211; despite it not being their problem to begin with.</p>
<p>James</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411033">
				<div id="div-comment-411033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carlos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411033">
			August 18, 2006 at 1:10 pm</a>		</div>

		<p>@Adam: I didn&#8217;t go into detail but the problems you note are easily surmountable. </p>
<p>When applications are security principals you can associate permissions with them. &nbsp;So a web server would have access to &#8220;wwwroot&#8221; and its subdirectories. &nbsp;You would give media players permission to *read* all media files (identified by extension). &nbsp;Playlists are part of the apps data so don&#8217;t require any permissions. </p>
<p>If you opened a web project for editing you would check a box saying &#8220;and all files in this directory and subdirectories&#8221;. </p>
<p>If you open a Word file in a read-only directory it already puts its &#8220;~df*.tmp&#8221; files in the temp directory. &nbsp;This hasn&#8217;t caused me any problems. </p>
<div CLASS=post>[<i>So the &#8220;secure file open&#8221; dialog would have an &#8220;and all files in this directory and subdirectories&#8221; checkbox? What file extesions will you allow Notepad to open? Why is the answer to every security problem &#8220;Just add another dialog box&#8221;? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411303">
				<div id="div-comment-411303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carlos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411303">
			August 18, 2006 at 8:49 pm</a>		</div>

		<p>&#8220;So the &#8216;secure file open&#8217; dialog would have an &#8216;and all files in this directory and subdirectories&#8217; checkbox?&#8221; </p>
<p>Yes. </p>
<p>&#8220;What file extesions will you allow Notepad to open?&#8221; </p>
<p>None by default. &nbsp;Notepad can only open files that the user has selected in the secure dialog (whatever extension they have). </p>
<p>&#8220;Why is the answer to every security problem &#8216;Just add another dialog box&#8217;?&#8221; </p>
<p>The question &#8220;should this application be allowed to access that file/API/service/whatever&#8221; is not one that can be answered by a computer (or an OS vendor). &nbsp;Ultimately, someone has to make a policy decision. &nbsp;And if you&#8217;re going to the ask the user, making it an implicit part of the file-open dialog (or windows explorer) is very unobtrusive, since it&#8217;s something they have to do anyway. </p>
<p>Of course, home users can install random software with arbitrary permissions and screw up their computers if they want to. &nbsp;But that&#8217;s no reason to deny security to knowledgeable users and administrators. </p>
<div CLASS=post>[<i>Notepad can&#8217;t open any files by default. Hm. Okay, well I guess there&#8217;s no point taking this any further &#8211; we fundamentally disagree. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411123">
				<div id="div-comment-411123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Reuven Lax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411123">
			August 18, 2006 at 3:09 pm</a>		</div>

		<p>Take a look at the security model used in Singularity out of Microsoft Research. &nbsp;In this model, the application being run _is_ a security principle. &nbsp;The security principle for any instance of an application contains the history leading up to that execution (kinda like Java/.Net stack inspection). &nbsp;So, an instance of Word may have the following principle:</p>
<p>logon.exe@ntdevraymondc+explorer.exe+winword.exe</p>
<p>Meaning that you logged on as raymondc, started explorer which then started word. &nbsp;The ACL on a file now becomes a regexp. &nbsp;Say .*logon.exe@raymondc.*winword.exe.*<br />
<br />This means that only raymondc can access this file and only through winword.exe at least indirectly (I&#8217;m assuming there aren&#8217;t any more logon.exe@otheruser in the principle).</p>
<p>Of course this only works if you can trust a process, which you can never really do in Windows/Unix. &nbsp;One way Singularity accomplishes this is by disallowing any form of code loading after the process starts. &nbsp;Basically, no LoadLibarys. &nbsp;If you want to load a DLL, that must be specified in your manifest. &nbsp;Now you can authenticate an in-storage program and trust that it won&#8217;t change. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-411323">
				<div id="div-comment-411323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411323">
			August 18, 2006 at 10:24 pm</a>		</div>

		<blockquote><p>
  In other words, there is no extensibility possible for applications<br />
  <br />&gt; running on Singularity. Doesn&#8217;t strike me as too useful, then! </p>
<p>IPC is essentially free in Singularity (it almost has to be) so to implement extensibility, you run your plugin in separate processes.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411173">
				<div id="div-comment-411173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://plan99.net/~mike/blog' rel='external nofollow' class='url'>Mike Hearn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411173">
			August 18, 2006 at 3:55 pm</a>		</div>

		<p>This isn&#8217;t correct &#8211; *most* UNIXes have the user as the center of the security system, but SELinux and AppArmor change this completely. They allow you to assign fine grained privileges to applications and not users. Binaries are tagged with extended attributes identifying which security context they should run it (or in AppArmor they are identified by file paths). </p>
<p>The system originally governed only the standard UNIX syscalls and APIs, so you could for instance say that Apache is only allowed to listen on port 80, only allowed to read files marked in a special fashion, only allowed to fork and so on &#8230;. through &#8220;userspace object managers&#8221; servers like DBUS (central rpc router) and the X server (graphics/windowing subsystem) can *also* perform security checks by examining the context that the remote process is running as. </p>
<p>This allows you to do things like say &#8220;No applications are allowed to take screenshots, except the official screenshot application&#8221;. </p>
<p>So you can get very fine grained security like this, at the application level. CoreForce provides something similar for Windows, but not quite as good. </p>
<p>Now this is quite good at limiting what hackers can do but different from stopping spyware/malware/untrusted software because by definition, an application has to specify what the minimal set of permissions it needs are. So a malware program could just say it needs the ability to call CreateRemoteThread on explorer, and the operating system would have to believe it. </p>
<p>Using this kind of process-centric security system is a step in the right direction however &#8230; it allows you to say &#8220;We can have magic registry key XYZ and only the official Microsoft Control Center program can change it&#8221; then you an also say &#8220;The Microsoft Control Center program can only be remotely controlled by accessibility programs/debuggers signed by us&#8221; and now it is possible for an end user to set the registry key but not a program. I&#8217;m simplifying but you get the idea right?</p>
<div CLASS=post>[<i>&#8220;&#8230; only by programs signed by Microsoft.&#8221; Yeah that&#8217;ll go over really well. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411333">
				<div id="div-comment-411333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411333">
			August 19, 2006 at 12:24 am</a>		</div>

		<p>Tiny Firewall 2005 does pretty much what some are asking for. It basically sandboxes all processes on the machine and allows fine grained per process per user control.</p>
<p>I used one of their first versions a couple of years ago and even then it was fairly stable and didn&#8217;t cause many problems, but it was a bit of a pain to set up properly.</p>
<p>I have no idea how effective it is against an application that is designed specifically to thwart it, but it works well against normal processes.</p>
<p>VMWare + regmon + filemon are a good combo for testing out new applications.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411353">
				<div id="div-comment-411353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Archangel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411353">
			August 19, 2006 at 12:51 am</a>		</div>

		<p>Well, I&#8217;m flattered to have had one of my posts linked to&#8230;</p>
<p>I don&#8217;t believe &quot;Windows should let me do whatever I want&quot; and &quot;Windows should use ACLs to protect files, not sneaky tricks&quot; are as orthogonal as all that. The obvious solution is implemented (apparently badly, but hey) in Vista as UAC &#8211; then you can do whatever you want, given a wee jump through a hoop, but important bits of the OS are still protected against malicious applications, at least within reason.</p>
<p>As far as signing all drivers on 64-bit Windows &#8211; my opinion is not to require it. I&#8217;m told it costs money &#8211; I like the idea that I can buy a piece of hardware without having to pay extra to get the driver signed by Microsoft. None of the drivers on my current system are signed by anyone, and it seems to work fine &#8211; I&#8217;m not at all convinced that it&#8217;s a necessary evil in any way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411373">
				<div id="div-comment-411373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411373">
			August 19, 2006 at 2:13 am</a>		</div>

		<blockquote><p>
  Yes, UNIX has setuid, but that still doesn&#8217;t<br />
  <br />&gt; make applications security principals. Even<br />
  <br />&gt; in UNIX, permissions are assigned to users,<br />
  <br />&gt; not to applications.</p>
<p>OK. &nbsp;A user who isn&#8217;t allowed to log in and isn&#8217;t ordinarily impersonatable by any real world user is still a user, OK, let&#8217;s continue.</p>
<p>&gt; But when you are running an application, the<br />
  <br />&gt; application is you.</p>
<p>Not if you&#8217;re running a setuid application. &nbsp;In such a case the application is the user who owns the application, the user is someone whom you can&#8217;t even impersonate by other means (unless you&#8217;re already root).</p>
<p>&gt; Any security policy that says &quot;Applications<br />
  <br />&gt; cannot do X without permission from the user&quot;<br />
  <br />&gt; is flawed from conception.</p>
<p>Recent Vista betas give quite a different impression. &nbsp;Sometimes your employer decides to do a good job of tackling some issue, and they seem to be proceeding pretty well on this one. &nbsp;(It would still be a good idea to add setuid in addition though.)
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411393">
				<div id="div-comment-411393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">yet another open source/slashdotter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411393">
			August 19, 2006 at 4:34 am</a>		</div>

		<blockquote><p>
  &gt; Of course, there&#8217;s always the conspiracy theory that many of you are open source/slashdotters who are trying everything you can to knock a hole in Mr. Chen&#8217;s wall.</p>
<p>Quite a racist comment. </p>
<p>&gt;&gt; Or, you want Windows to protect the user from every application out there BUT YOURS!! </p>
<p>Effectively I don&#8217;t want Windows to protect me from anything at all. But since MS is going to allow only signed drivers, and since I use many unsigned drivers on my system (without any problem, heck I even wrote one of them) I&#8217;d like a way to bypass the protection on my will. </p>
<p>A different boot mode. A different setting at Windows installation time (press F6 or something). A different x64 edition entirely. Something to be confirmed at next reboot (before applications start).</p>
<p>Why you cannot selectively enable/disable the rule for different drivers, you can do it at a global level.</p>
<p>Of course some way around exists (otherwise noone could develop drivers on/for vista x64 ?!) maybe involving having to use checked builds.</p>
<p>&gt;&gt; The answer is for MS to continue to spend millions of dollars every year in research and usability labs to figure out the best way to move forward &#8211; which is what they are doing.</p>
<p>They spent millions of dollars researching that for security reasons it&#8217;s good for outlook to zap every attachment with exe or xml or whatever else extension ?<br />
  <br />They spent millions of dollars so that MSN could automagically delete a file it received just because it PERCEIVES it as dangerous. Gosh I&#8217;M the one who decides what&#8217;s dangerous and what not.</p>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-411413">
				<div id="div-comment-411413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411413">
			August 19, 2006 at 7:20 am</a>		</div>

		<p>yos/s: you&#8217;re not up to date. There will be a boot mode option in Vista/x64 to enable unsigned drivers. The desktop will then be &#8216;stamped&#8217; to indicate that the system is booted in this mode &#8211; the desktop background will be overlaid with some text indicating this, as occurs in safe mode and for the betas. I don&#8217;t think this was implemented in Beta 2 but should be in the next public release.</p>
<p>There won&#8217;t be any way for an application to enable this &#8211; it will have to be selected from the boot menu every time. To do otherwise would compromise the driver signing program.</p>
<p>Source: <a rel="nofollow" target="_new" href="http://www.osronline.com/article.cfm?article=465" rel="nofollow">http://www.osronline.com/article.cfm?article=465</a> (requires login)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411433">
				<div id="div-comment-411433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tyler Reddun</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411433">
			August 19, 2006 at 12:17 pm</a>		</div>

		<p>People keep talking about setuid as a solution, but it&#8217;s not, it&#8217;s a securty hole. The idea that having an app anyone can run automaticly take on higher privlages then yourself is asking for your system to be compromised (example: your running IE as a regular user, a hack lets it run code, it runs the setuid app then hacks in, now it owns your box).</p>
<p>setuid is the bane of unix systems, a work around to allow users to change there passwords because root owns that file. It&#8217;s a very bad choice to use it as a security feature.</p>
<p>Windows at least as a &quot;Run As&#8230;&quot; on every application, this way you can start up an app as an administrator while in a normal user account (I use it mostly for installing new applications). It&#8217;s not automatic and you have to be willing to put up with a password dialog, but it&#8217;s there, and it works.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411453">
				<div id="div-comment-411453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">OrsoYoghi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411453">
			August 19, 2006 at 1:30 pm</a>		</div>

		<blockquote><p>
  &gt; Looks like part of the Secure Audio Path to me. </p>
<p>I have the same opinion.<br />
  <br />It looks like another of these &quot;own the user while making him believe we&#8217;re doing him a favour&quot;..</p>
<p>Driver signing is not protecting me from getting garbage in my system. It&#8217;s protecting my system from me and this is the wrong way around, yet another time in history.<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411463">
				<div id="div-comment-411463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411463">
			August 19, 2006 at 2:24 pm</a>		</div>

		<blockquote><p>
  Explorer cannot show the properties of the file Party.doc. <br />&gt;That document can be opened only by Microsoft Word. </p>
<p>Apps can drop privileges, right? So Word can say it only wants write permission to Word documents, the user&#8217;s setting, etc., and can&#8217;t later be coerced into taking over the OS by a macro it loads or corrupting something by a bug. This is good, in the sense that user&#8217;s don&#8217;t want any program they load to have arbitrary access to everything they have available to them. </p>
<p>The only thing the user wants Word to open is the documents the user asks it to open. So, have Vista/Explorer hand Word permissions on a file-by-file basis as the user opens them. If Outlook wants Office to open a file, have it use the same Vista API, and automatically give Office its own privs to that file at the same time. Then, if Vista wants to keep a list of &#8216;recent documents&#8217;, then it&#8217;s a Vista implementation detail, not something each app has to manage (and manage to screw up) itself.</p>
<div CLASS=post>[<i>&#8220;The OS&#8221; is a pretty vague term. Could you be more specific? Are you refering to DLLs (which run in-process and therefore are under the same security constraints as the host process)? Or out-of-proc services? Or kernel-mode components? Given that nearly all software runs in user-mode in a single process, how do you distinguish between &#8220;application running in-proc&#8221; and &#8220;OS code running in-proc&#8221;? If Word drops privileges and then calls an OS function provided in the form of an in-proc DLL, then that OS function also runs with reduced privileges and may not be able to accomplish what it was being asked to do. Maybe you consider this a feature. -Raymond</i>]</div>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411473">
				<div id="div-comment-411473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.morganalley.com' rel='external nofollow' class='url'>Dewi Morgan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411473">
			August 19, 2006 at 2:38 pm</a>		</div>

		<p>There was a similar case when everyone outside Microsoft said &quot;outbound protection in a software firewall is a good thing&quot; and MS said &quot;No, it is pointless and can trivially be subverted&quot; (qv Jesper&#8217;s blog: he mentioned it in his &quot;Security Myths&quot;).</p>
<p>BOTH were right.</p>
<p>If you install a firewall with outbound protection, then you&#8217;ll block most malware from getting out, stop most badly behaved software from dialling home without asking, and stop most adware from showing ads. You&#8217;d be in a tiny minority of users who take this step, so the programmers don&#8217;t take the time to work around it.</p>
<p>But if MS had introduced it in XP by default, then every piece of malware would have outbound-protection-dodging. Every DLL for adware and dialling home would have it. People would dodge the firewall by default, as the firewall would be part of their development environment by default.</p>
<p>Not until they had altered the Windows core significantly could MS include undodgable outbound protection, as they allegedly have in Vista, for drivers, or something. They had to do this because it was very clear that applications which provided this even as broken functionality were very, very popular, as they filled a need.</p>
<p>The &quot;application ACL&quot; is similar: we need third-party ACL programs (such as CoreForce and TinyFW, ibid: anyone know of any others? Especially free ones?) that do this task, as well as they can under the current system. As third-party apps, these would work to protect the users from badly-behaved apps, because they would not be part of the default dev environment for those apps.</p>
<p>Microsoft can&#8217;t do it themselves, yet, as their ACL would become part of the default malware development environment, so they&#8217;d need to do it &quot;properly&quot;, in a non-dodgable manner, rather than just &quot;as best as possible&quot;. This would require a total rewrite of windows security, and there is no business case for that, until a lot of users start to use third-party application ACLs, and clamour for their introduction in Windows.</p>
<p>So, Raymond is RIGHT to say per-application ACLs just won&#8217;t work as a solution for MS at the moment, but at the same time that doesn&#8217;t mean that per-application ACLs aren&#8217;t needed, as well as can be written under the current system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411423">
				<div id="div-comment-411423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411423">
			August 19, 2006 at 10:09 am</a>		</div>

		<p>I really can&#8217;t think of any clean way to get B.DLL to save its settings when loaded by application A. Well I can. Some kind of IPC. B.DLL cannot save its settings. Process A can load B.DLL. B.DLL will IPC to an instance of ProcessB &#8211; probably ServiceB, and *that* will save settings. What a pain, I agree.</p>
<p>Perhaps I want too much when I want applications to be partitioned.</p>
<p>Well, I just made the mistake of installing Spliner Cell Chaos Theory. It told me to restart. Which can only mean its installed a rogue device driver. I *really* do wish for more intrusive dialogs when setup programs try to install &#8211; probably unsigned &#8211; drivers behind my back.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411503">
				<div id="div-comment-411503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jamessummerlin.blogspot.com' rel='external nofollow' class='url'>James Summerlin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411503">
			August 19, 2006 at 5:57 pm</a>		</div>

		<p>yet another</p>
<p>&gt;&gt;Effectively I don&#8217;t want Windows to protect me from anything at all.<br />
<br />&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-<br />
<br />The problem we have is that people like you say that until some trojan gets on your machine (right after you click OK on something) and then you bitch about the insecurity of Windows.</p>
<p>=============================================<br />
<br />&gt;&gt;A different boot mode. A different setting at Windows installation time (press F6 or something). A different x64 edition entirely. Something to be confirmed at next reboot (before applications start). </p>
<p>Why you cannot selectively enable/disable the rule for different drivers, you can do it at a global level.<br />
<br />&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br />
<br />We already have drivers that do that. &nbsp;Some vendors click OK for you when Windows notifies you that the driver is unsigned. &nbsp;The only thing MS is trying to do is get rid of the unscrupulous ones.<br />
<br />=========================================</p>
<p>&gt;&gt;They spent millions of dollars researching that for security reasons it&#8217;s good for outlook to zap every attachment with exe or xml or whatever else extension ?<br />
<br />&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-<br />
<br />Why yes, they did. &nbsp;Clicking on an EXE sent as an email attachment is like trying a new food recommended by someone you have never met before. &nbsp;Yeah, I wouldn&#8217;t either.<br />
<br />===========================================</p>
<p>&gt;&gt;They spent millions of dollars so that MSN could automagically delete a file it received just because it PERCEIVES it as dangerous.<br />
<br />&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;</p>
<p>Not because it percieves, but because statistics plainly show that the majority of such files cause the majority of the problems in question.<br />
<br />=====================================</p>
<p>&gt;&gt;Gosh I&#8217;M the one who decides what&#8217;s dangerous and what not.<br />
<br />&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-</p>
<p>Yes you are. &nbsp;The problem is you&#8217;re in the minority. &nbsp;There is a term for people like you : casualties of war. &nbsp;And I am sorry you have to deal with all this.</p>
<p>James<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411513">
				<div id="div-comment-411513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Hearn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411513">
			August 19, 2006 at 6:29 pm</a>		</div>

		<p>[&quot;&#8230; only by programs signed by Microsoft.&quot; Yeah that&#8217;ll go over really well. -Raymond]</p>
<p>I know, I know.</p>
<p>Still. The world we live in today is VERY different to that of even 5 years ago.</p>
<p>I remember back when XP was about to come out, people were kicking up a fuss about whether online update would be on by default or not (MS will control every computer in the world, etc). 5 years on we&#8217;re all just damn glad it is. Nobody thought about botnets, trojans, adware like Aurora back then.</p>
<p>I think if you started locking down the system (for those who wanted it) such that CreateRemoteThread, driver loading, debugging etc only worked for applications from verified authors, and such that the operating system protected itself from malicious software via a combination of mandatory access control and signing programs &#8230;. I think people would be a lot more sympathetic to that now than perhaps they would have once been. I know this is true for me.</p>
<p>What&#8217;s the alternative? Organised crime is winning this one, they are wiping the floor with us. I don&#8217;t see any alternative to gradually locking the system down. I wish there was :(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411533">
				<div id="div-comment-411533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411533">
			August 19, 2006 at 7:06 pm</a>		</div>

		<p>Todd: Windows doesn&#8217;t have &quot;setuid&quot; at all. The creation of identities (token objects) is an extremely sensitive operation that can only be initiated by a system process, and it has to pass through an authentication package. While it&#8217;s possible to create an authentication package that can just synthetize identities out of thin air (and one does exist, it&#8217;s included in the Windows port of the CVS server), as a general rule you have to provide credentials (typically username, password). In Windows Vista, though, that has changed: there must be some sort of &quot;setuid&quot; facility because the Task Scheduler no longer requires a password when running jobs as another user (only if you need to access remote resources through integrated authentication, which is how it should have been since forever), and all services now automatically get their own SID synthetized from the service&#8217;s short name</p>
<p>Everyone else: per-application SIDs do exist, altough you have to configure them yourself. The implementation (Safer), while powerful (you can match the path, the checksum, the digital signature, etc.) is purely advisory, meaning it can be bypassed on the first run (but once inside the sandbox, there&#8217;s no way out because the kernel guarantees that), and the per-application SID part may or may not be implemented (it&#8217;s undocumented but public, see SaferObjectRestrictedSidsInverted and SaferObjectRestrictedSidsAdded and surroundings in &lt;winsafer.h&gt;)</p>
<p>The major downside is severe inconvenience, that can sometimes stop the application from working. ACLs have to be set manually, to enable the application to at least access its configuration files and registry keys, but that&#8217;s relatively easy: filesystem and registry ACLs are permanent, but there are many volatile, hard-coded ACLs that will limit your application left and right &#8211; notably, the credentials storage will deny access to any sandboxed application, meaning you won&#8217;t be able to save your MSN Messenger password for one. Did I mention SSPI (the component providing &quot;integrated authentication&quot; for network protocols) will not give sandboxed processes any credentials? barring you from any network drive and SSL servers? (&#8230; and did I mention the default GUI for Safer doesn&#8217;t even support configurable sandboxing?)</p>
<p>(&#8230; and did I mention that the temporary directory now that you are a sandboxed process is read-only? did you know? but most importantly: did your parent process know?)</p>
<p>Personally, I have written my own sandboxing tool, it&#8217;s called iam (&quot;I Am&quot;, sorta like the opposite of &quot;whoami&quot;&#8230;), it&#8217;s command-line with a help text several Bibles long, and requires a rocket science degree to use (or just run &quot;iam -typical cmd&quot;&#8230; after setting %TMP% and %TEMP% to a writable directory, of course):</p>
<p>&lt;<a rel="nofollow" target="_new" href="http://spacebunny.xepher.net/hack/iam/&gt;" rel="nofollow"></a><a href="http://spacebunny.xepher.net/hack/iam/&#038;gt" rel="nofollow">http://spacebunny.xepher.net/hack/iam/&#038;gt</a>;</p>
<p>Myria: I swear if you use the &quot;pwn&quot; word once more, I&#8217;m going to slap you with a wet noodle</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411443">
				<div id="div-comment-411443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pagetable.com/' rel='external nofollow' class='url'>Myria</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411443">
			August 19, 2006 at 1:22 pm</a>		</div>

		<p>Driver signing is a horrible mistake. &nbsp;It does not prevent rootkits. &nbsp;All you need for a rootkit on the vast majority of systems even in Vista64 is to NtCreateFile DeviceHarddisk0Partition0, NtWriteFile 512 bytes, and NtShutdownSystem to reboot. &nbsp;System pwned. &nbsp;You could do things like not reboot and wait for the user to, or bugcheck the system to act like Windows crashed.</p>
<p>Unless Microsoft wants to restrict raw disk access to kernel drivers, this will never be fixed. &nbsp;And if Microsoft does that, the first thing Symantec will do is make a (signed) driver that allows raw disk access to user mode, and then rootkits can copy that driver since rookit authors don&#8217;t particular care about copyright law. &nbsp;Imagine Symantec Ghost having to exist entirely as a kernel driver, since granting *any* raw disk access to user mode breaks driver signing.</p>
<p>Rather than preventing Administrator from doing, well, administrative things, Microsoft should be doing all they can to prevent trojans and/or shellcode from getting to Administrator level. &nbsp;This they have made great strides with in Vista.</p>
<p>I suspect DRM is the real reason for driver signing, since its anti-rootkit security is dubious at best. &nbsp;If you disable driver signing (either with F8 at startup or with test signing), Windows Media Player refuses to play protected songs. &nbsp;Looks like part of the Secure Audio Path to me.</p>
<p>That brings up another point. &nbsp;Test signing is something else you can enable from user mode then reboot the system to take over.</p>
<p>Raymond is completely correct in his post. &nbsp;If you are going to have driver signing, nothing available to an Administrator user-mode program should be able to disable driver signing. &nbsp;Of course, the MBR and BOOTLDR are two such things, but I think you get the point&#8230;</p>
<p>Melissa</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411563">
				<div id="div-comment-411563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jamessummerlin.blogspot.com' rel='external nofollow' class='url'>James Summerlin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411563">
			August 20, 2006 at 9:19 am</a>		</div>

		<p>And now, let us all sit back and watch as Ken, a person who has never seen a single line of Windows source code, tells the person who works on said source code all day everyday how said source code works.</p>
<p>This should be fun.</p>
<p>James</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411553">
				<div id="div-comment-411553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://K.Hagan@thermoteknix.co.uk' rel='external nofollow' class='url'>Ken Hagan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411553">
			August 20, 2006 at 5:19 am</a>		</div>

		<p>I think Raymond is wrong on a (significant) technicality. </p>
<p>There&#8217;s no such thing as the user&#8217;s privileges. Access rights and privileges are bound to a thingy called a token, and this is nearly always built (by the kernel) in a standard way based on the user&#8217;s identity. (Except for fresh logins, the standard way is to clone the token of the parent process.) However, it might be clearer if we think of it the &#8220;current instance&#8221; of the user. If you log in interactively, your token will have INTERACTIVE privileges. If not, your token won&#8217;t and you can use INTERACTIVE in file or registry ACLs to exploit this difference. The kernel&#8217;s &#8220;Job objects&#8221; allow privileges within a token to be selectively withdrawn (which is the secret behind the Safer APIs noted by KJK::Hyperion). So it *is* technically possible to run a process with fewer privileges then you normally have. Since Job objects are a kernel concept, this is as bullet-proof as Windows itself. </p>
<p>Ideally, to use this in the real world, you would want to populate your token with several groups, each of which would represent a trust distinction that you cared about and any or all of which could be restricted in the token. You&#8217;d then configure file and registry ACLs to grant or deny access based on those trust groups, rather than more conventional aliases. As far as I know, Windows lacks a convenient UI for setting up the groups in the token. </p>
<p>This is the closest the Windows XP kernel gets to supporting the notion of trusted or untrusted *code*. (Vista uses the technique to enforce its &#8220;limited administrator&#8221; feature.) IE attempts something similar with its zones, a trust level based on *where* code comes from, and the infamous signed/unsigned distinction, a trust level based on *who* code comes from, but it doesn&#8217;t use kernel-level facilities and so it can be circumvented by bugs or malicious code in the DLLs involved. However, I think the concepts that IE is reaching for are valid ones and ought to be better supported. (Interesting to read about SELinux and AppArmor.)</p>
<div CLASS=post>[<i>True, it depends on what the definition of &#8220;you&#8221; is, and as you noted, by &#8220;you&#8221; I meant &#8220;the token&#8221;. Change the token and you change the process&#8217;s identity, but the identity is still at the token level (which is assigned to an entire process), not the code level. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-411583">
				<div id="div-comment-411583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411583">
			August 20, 2006 at 3:08 pm</a>		</div>

		<p>Mike Hearn:</p>
<p>&quot;I think if you started locking down the system (for those who wanted it) such that CreateRemoteThread, driver loading, debugging etc only worked for applications from verified authors, and such that the operating system protected itself from malicious software via a combination of mandatory access control and signing programs &#8230;. I think people would be a lot more sympathetic to that now than perhaps they would have once been. I know this is true for me.&quot;</p>
<p>Yeah, I had that thought too, but it would basically mean that you would have to prevent debuggers from being scriptable. Right now kd (from the Windows Debugging Tools) effectively accepts a hacking script on the command line. See for example how adplus.vbs works.</p>
<p>The debugger would have to be restricted because otherwise an attacker can simply debug an application running with a token that does have the required privileges or permissions. I saw this approach used to &#8216;silently&#8217; open a listening inbound port without Windows Firewall prompting to unblock, because it did so by creating a remote thread in one of the processes that is permitted by default.</p>
<p>I don&#8217;t know whether Windows Vista&#8217;s firewalls between processes running in the same window station but with different privilege levels extend to stopping a low-privileged process from debugging a high-privileged one. I would hope that this is covered.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411603">
				<div id="div-comment-411603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Hearn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411603">
			August 20, 2006 at 4:12 pm</a>		</div>

		<p>Mike Dimmick:</p>
<p>Yes the debugger APIs are a backdoor around any security system, which is why I am always annoyed when I see ZoneAlarm annoy my friends every 10 seconds with pointless popups &#8211; adds no real security because evading them is so easy.</p>
<p>I think the trick is to ensure only a real, physical person interacting via hardware can install software. If you have a scriptable debugger installed, well that&#8217;s a back-door and the user should be aware of that. But most people won&#8217;t, so &quot;mass market&quot; exploits like bots or adware won&#8217;t be shipping kd scripts anytime soon. If the adware can install kd and then use a script, then clearly we lose, but if only humans can install software (such that the operating system recognises it as being signed and therefore given higher level of privilege) then you can work your way up from here to start getting serious security.</p>
<p>The Vista UAE prompts are someway towards this now, but there is no well defined concept of what installation is, so there&#8217;s still a lot of work to do &#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411633">
				<div id="div-comment-411633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">OrsoYoghi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411633">
			August 21, 2006 at 4:25 am</a>		</div>

		<blockquote><p>
  &gt; The problem we have is that people like you say that until some trojan gets on your machine (right after you click OK on something) and then you bitch about the insecurity of Windows. </p>
<p>Actually I see more people bitching about stupid protections than about trojan and so on. That said, adding the annoyance of having to zip the exe before sending the mail/im does not add anything to security. At least a dialog box could be there.</p>
<p>&gt;&gt; We already have drivers that do that. &nbsp;Some vendors click OK for you when Windows notifies you that the driver is unsigned. &nbsp;The only thing MS is trying to do is get rid of the unscrupulous ones. &nbsp;</p>
<p>Boot modes cannot be remoted by an applications through messages. Unless someone does the boot sector trick mentioned, but in that case they might just replace a patched kernel32 anyway.</p>
<p>&gt;&gt; Why yes, they did. &nbsp;Clicking on an EXE sent as an email attachment is like trying a new food recommended by someone you have never met before. &nbsp;Yeah, I wouldn&#8217;t either. </p>
<p>Is it different from unzipping the exe and trying it ? When your agent at a 12hour timezone offset needs the patch as soon as he logs on again, having to remember to zip (or change the extension to &quot;.ohmygodwhatanannoyance_rename_as_exe&quot;) is, well, just plain stupid. </p>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411653">
				<div id="div-comment-411653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411653">
			August 21, 2006 at 4:45 am</a>		</div>

		<p>Mike Hearn:</p>
<p>&quot;I think the trick is to ensure only a real, physical person interacting via hardware can install software&quot;</p>
<p>I suspect a lot of large corporate system administrators would have something to say about that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411663">
				<div id="div-comment-411663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Whiz Kid</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411663">
			August 21, 2006 at 10:14 am</a>		</div>

		<p>Most of the suggestions in this thread is stupid. Even compared to current ms os.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411703">
				<div id="div-comment-411703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexey Lavnikov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411703">
			August 21, 2006 at 11:12 am</a>		</div>

		<p>The idea that &#8220;application is the user&#8221; is not well thought. The user in current understanding is an security account which has a set of permissions enforced by OS. </p>
<p>Why can&#8217;t a single user have several security accounts with different set of permissions (like IE zones)? Let the user decide under which of these security accounts this application is to run. One of them could be default one with limited set of permissions (like built-in guest account with persisted registry).</p>
<p>In this case, application is not always the user, but only when user decides so&#8230;</p>
<div CLASS=post>[<i>And then when Windows Vista tries to do what you suggest, people are upset because of all the elevation prompts. You just can&#8217;t win. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411643">
				<div id="div-comment-411643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411643">
			August 21, 2006 at 4:35 am</a>		</div>

		<p>Mike &gt; &#8220;The debugger would have to be restricted because otherwise an attacker can simply debug an application running with a token that does have the required privileges or permissions.&#8221;</p>
<p>Mike &gt; &#8220;Yes the debugger APIs are a backdoor around any security system,&#8221;</p>
<p>WTF?!? You can debug a process that has a different security descriptor than you? Wha&#8230;? Why&#8230;? Huh&#8230;?</p>
<p>That&#8217;s &#8230; not even broken. It was never whole to begin with!</p>
<p>*flabbergasted*</p>
<p>Mike &gt; &#8220;you would have to prevent debuggers from being scriptable&#8221;</p>
<p>How would you do this? What&#8217;s to stop someone writing their own scriptable debugger? If they&#8217;re installing other software (adware, bots, etc&#8230;) they can install that.</p>
<div class="post">[<i>I would recommend people actually verify what the rules are regarding who can debug processes before jumping to conclusions. Notice that Mike said &#8220;the require privileges or permissions.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411763">
				<div id="div-comment-411763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">C++ guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411763">
			August 21, 2006 at 12:03 pm</a>		</div>

		<p>Raymond said:<br />
<br />I get so puzzled when I hear people say, &quot;Windows should let me do whatever I want with my system&quot;, while simultaneously saying, &quot;Windows should have used ACLs to prevent applications from doing whatever they want with my system.&quot;</p>
<p>Ok, programmers should know better.</p>
<p>But users? &nbsp;I think users have a very clear concept of &quot;what I did&quot; vs &quot;what the application did.&quot; &nbsp;I typed in a URL. &nbsp;Internet Explorer installed spyware for me.</p>
<p>Fixing this would require a security overhaul that would dwarf the XP -&gt; Vista security overhaul. &nbsp;Ain&#8217;t gonna happen.</p>
<p>But whoever does it will make a lot of money. ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411783">
				<div id="div-comment-411783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411783">
			August 21, 2006 at 12:17 pm</a>		</div>

		<p>[I would recommend people actually verify what the rules are regarding who can debug processes before jumping to conclusions. Notice that Mike said &quot;the require privileges or permissions.&quot; -Raymond]</p>
<p>Ah &#8211; I was falling into the trap of assuming that all the posters here are non-/.-karma-whore-ish enough to only post things like &quot;you <em>can</em> do X&quot; if they&#8217;ve actually done it.</p>
<p>Most of the time, on this blog, it&#8217;s a pretty good assumption.</p>
<p>&quot;You <em>should be able to</em> do X&quot; I always take with a pin^H^H^Htub of salt &#8211; you get all kinds of madness posted along those lines. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411803">
				<div id="div-comment-411803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://K.Hagan@thermoteknix.co.uk' rel='external nofollow' class='url'>Ken</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411803">
			August 21, 2006 at 12:53 pm</a>		</div>

		<p>&quot;And now, let us all sit back and watch as Ken, a person who has never seen a single line of Windows source code, tells the person who works on said source code all day everyday how said source code works.&quot;</p>
<p>I doubt Raymond does work on this part of Windows every day, but that&#8217;s hardly the point since Raymond doesn&#8217;t disagree with my nit-pick. (Neither do I think IE&#8217;s concept of zones is arcane knowledge that only the Raymonds of this world can be expected to understand.)</p>
<p>The point is that there&#8217;s a distinction between the user and a token with that user&#8217;s SID sitting in it. Whoever designed the &quot;Safer&quot; APIs and Vista&#8217;s new dialogs thinks it can be exploited.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-411863">
				<div id="div-comment-411863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411863">
			August 21, 2006 at 3:47 pm</a>		</div>

		<blockquote><p>
  If Word drops privileges and then calls an OS function <br />&gt;provided in the form of an in-proc DLL, then that OS <br />&gt;function also runs with reduced privileges and may not <br />&gt;be able to accomplish what it was being asked to do. </p>
<p>If it was IIS, and it was asking to write to C:windows, and being denied, that&#8217;s a good thing. I&#8217;d say the &#8216;secure&#8217; file-open API would have to be a system call into kernel mode. By default, many kinds of apps might have a profile with read access to computer settings/files, &nbsp;and read/write access to user settings/files and a working set of files. The working set would be provided by Explorer (or whatever) when calls the secure file-open API, and the API would tell the app its working set and temporarily give working-set privs to it that the calling app had. </p>
<p>The same API might allow asking for new permissions. Some, like creating temp files, might be in the app&#8217;s profile and automatically granted or blocked, some might be grantable by the kinds of apps that give it a working set, and some would fall back on the user or get the app recognized as a problem and killed.</p>
<div CLASS=post>[<i>I&#8217;m not sure what your remarks have to do with the sentence you quoted. -Raymond</i>]</div>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-411983">
				<div id="div-comment-411983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.benlast.com/' rel='external nofollow' class='url'>Ben Last</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-411983">
			August 22, 2006 at 4:36 am</a>		</div>

		<p>A bit of an aside, but the Symbian OS (especially as of version 9) does have privileges (known as capabilities) assigned to applications and DLLs. &nbsp;Those capabilities are granted when the application or DLL&#8217;s installation file is digitally signed. &nbsp;Since a mobile device usually doesn&#8217;t have the idea of separate users, and can potentially be picked up and used by anyone, identity-based privileges don&#8217;t work in the same way.<br />
<br />At the very least, it&#8217;s a different approach.</p>
<div CLASS=post>[<i>I wonder what happens if an application tries to load a DLL which has different privileges. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-412013">
				<div id="div-comment-412013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://plan99.net/~mike/blog' rel='external nofollow' class='url'>Mike Hearn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-412013">
			August 22, 2006 at 7:13 am</a>		</div>

		<p>Andy C &#8211; yes, good point, but managed desktops are a whole different kettle of fish. Assume that whatever restrictions prevent some random program installing other software can be lifted by an administrator in a secure way?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-412023">
				<div id="div-comment-412023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://plan99.net/~mike/blog' rel='external nofollow' class='url'>Mike Hearn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-412023">
			August 22, 2006 at 7:14 am</a>		</div>

		<p>Adam &#8211; we were talking about firewalls and other &#8216;security systems&#8217; that try to police programs on the basis of who they are. The problem is not that you can debug some process with a different kernel security context (you can&#8217;t &#8230;), the problem is that other programs try and give out permissions when they can&#8217;t enforce that (like ZoneAlarm).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-412073">
				<div id="div-comment-412073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-412073">
			August 22, 2006 at 10:41 am</a>		</div>

		<p>Mike : Sorry, it looked like you were replying more to Mike&#8217;s post where he was talking about using a debugger to make another app with more *kernel* privs do something that they would not be otherwise allowed to do. The &quot;any&quot; in &quot;debugger APIs are a backdoor around any security system&quot; kind of helped with that, as did the fact that that clause was *before* the example of a user-mode access control system.</p>
<p>Thx for clarification.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-412463">
				<div id="div-comment-412463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://barrkel.blogspot.com/' rel='external nofollow' class='url'>Barry Kelly</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-412463">
			August 22, 2006 at 7:13 pm</a>		</div>

		<p>I think that anyone looking at this problem should read the &quot;Capability Myths Demolished&quot; paper, here:</p>
<p><a rel="nofollow" target="_new" href="http://srl.cs.jhu.edu/pubs/SRL2003-02.pdf" rel="nofollow">http://srl.cs.jhu.edu/pubs/SRL2003-02.pdf</a></p>
<p>It changed the way I think about ACLs versus Capability systems. I now think Windows has the wrong security model.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-412623">
				<div id="div-comment-412623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-412623">
			August 23, 2006 at 8:48 am</a>		</div>

		<p>What exactly is the problem of applying security to sensitive applications? Sure, you cannot load just any DLL anymore from such a process. That is a good thing! If I signed A.EXE, installed it using an application-ACL and it tries to load B.DLL which I didn&#8217;t sign, Windows should terminate thre process. </p>
<p>Yes, this means Word or Explorer or ActiveX hosts won&#8217;t get such application-ACLs. Good, they shouldn&#8217;t be messing with the OS in the first place. Any open-ended application should be considered potentially unsecure.</p>
<p>However, it does solve the original problem. You can have a registry key that is changable by any user, but only via permitted applications. (They will off course use the OS DLLs, but those should have superset ACLs. The process-ACL is just the common subset of application-ACL and DLL-ACLs)</p>
<div CLASS=post>[<i>Yes, this means Firefox won&#8217;t get such application-ACLs either. Hope that&#8217;s okay. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-413663">
				<div id="div-comment-413663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-413663">
			August 25, 2006 at 3:48 am</a>		</div>

		<p>So why not use ACLs for the obscure key to require real (in Vista with UAC, elevated) administrator privledges to modify it?</p>
<div CLASS=post>[<i>And what&#8217;s to stop an elevated application from screwing with teh key, then? That&#8217;s the whole point of the article. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-413893">
				<div id="div-comment-413893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-413893">
			August 27, 2006 at 5:58 am</a>		</div>

		<p>[And what&#8217;s to stop an elevated application from screwing with teh key, then? That&#8217;s the whole point of the article. -Raymond]<br />
<br />Yea, but this is the best you can do and is sorely need because not everyone can afford a VeriSign key, nor they evn want it to be required. I am thinking open source here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414583">
				<div id="div-comment-414583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060818-14/?p=30053#comment-414583">
			August 29, 2006 at 4:40 am</a>		</div>

		<p>[And then when Windows Vista tries to do what you suggest, people are upset because of all the elevation prompts. You just can&#8217;t win. -Raymond]</p>
<p>In the context of the &#8216;Run as Restricted&#8217; stuff you linked to before. How about the converse &#8211; nicer/automatic privilege *degradation* not escalation&#8230;</p>
<p>What would be nice is for some reasonable* default restricted mode to be available when installing an application in Vista. When an app is installed that knows it can function fine in this restricted mode (off the top of my head it doesn&#8217;t need anything but access to it&#8217;s own registry key, it only needs access to an app specific temp directory, &nbsp;when using the Internet (if it even needs to) it only needs access to a shortlist of named sites).</p>
<p>A good example for this sort of thing is the innumerable widgets which are cropping up everywhere.<br />
<br />When I install one of these (using the usual vista escalation privilege route) It would be nice to know if the app has declared itself &#8216;Restricted Compliant&#8217;. It is then installed as such, any attempt to execute the app automatically runs it as the severely restricted user (all this happens transparently to me of course).</p>
<p>Now you have this system, and &#8211; if you have defined the restricted capabilities well enough then it is possible you can allow &#8211; as an admin &#8211; the installation of these type of programs, but not others without a sysadmin coming over (or better doing the install for you remotely)</p>
<p>This would then create a reason for developers to code their apps to only require low restrictions from the word go since they would benefit from the Halo of &quot;well behaved program&quot; status (if you can pick between umpteen different widgets to display the time you may be more likely to go with the ones marked thusly).</p>
<p>Obviously this is a (very) big piece of work which would require vast amounts of effort and developer buy in. As such it may be that the effort expended to make it happen would be more productive elsewhere. But still this _would_ improve things since, as more apps begin to use this mode (or shades of this mode, hey let&#8217;s not run before we can walk) then there would be increasing pressure on the other apps to toe the line (since this is a &#8216;feature&#8217; most IT departments would be happy to have on their check list) and do it too.</p>
<p>Whenever I see Unix installation descriptions and I see &quot;create user with the following privileges, set the daemon to run as this user&quot; I wince a little &#8211; since no matter how effective this is it is never going to work in broad strokes across the windows ecology unless it is automatic and transparent to the end user (apart from, on install, the warm glow the user gets seeing the &#8216;Safe App&quot; Logo someone in your marketing department dreams up :)</p>
<p>I know a lot of apps won&#8217;t run in this mode, including any that need to read from the filesystem except in their own area.</p>
<p>I think one element you would have to provide to get this wide spread would be an API for opening a file open/save dialog (that is incorruptible in the same way the privilege escalation one is) that allows opening and writing to a file (so basically an _Edit_ file dialog).<br />
<br />No need for this dialog to request your password, you are explicitly okaying it editing a file after all (if you need temp files either provide an api for the temp file being writhen to the same location in a controlled manner or just have the app deal with it in it&#8217;s own sandbox &#8211; pros and cons to each).</p>
<p>This is not perfect (I came up with it in 5 mins so course it won&#8217;t be &#8211; but it shows you one way to use the existing RunAs functionality (which should be a secure base) but automate the tedious (and frankly impossible for the average user) process of setting this all up.</p>
<p>* I know what is reasonable will always be debatable, but several things are definite, no registry access to anything it didn&#8217;t create. Significantly restricted file system and network privileges)</p>
<p>** or to be more exact were _told_ at install time</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

