<html>
<head>
<title>In 16-bit Windows, some per-process data structures were really per-data segment</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>In 16-bit Windows, some per-process data structures were really per-data segment</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 20, 2018 / year-entry #287</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20181220-00/?p=100525</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>2</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">You just have to set up a private data segment.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In 16-bit Windows, one of the things you did at the
start of your program
(or more accurately,
which the runtime did for you
before calling your <code>WinMain</code>)
was call the <code>Local&shy;Init</code> function.
This function initialized your local heap.
</p>
<p>
When a process started, it was given a data segment,
which it could use for whatever purpose it liked.
This data segment was the <i>instance</i>,
and its handle was the <i>instance handle</i>,
the unit of identification for the process.
You could have two copies of the program running,
and they would share code, but have different data segments
(different instances, different instance handles),
so they operated on different sets of memory.
</p>
<p>
This data segment was up to 64KB in size,
and it held your program's stack, heap, and atom table.
The operating system set the stack pointer at the end of your
instance data segment, so the stack was already taken care of.
Setting up the other two, though, are on you.
</p>
<p>
The <code>Local&shy;Init</code> function takes your
instance data segment and creates the necessary data structures
to make it a heap.
This is something the C runtime library startup code did for you.
Once that's done, you can call <code>Local&shy;Alloc</code>
to allocate memory from it.
</p>
<p>
Once you initialized a data segment as a heap,
it was also ready to serve as an atom table.
</p>
<p>
While it's normally the case that an application uses
the local heap and atom table that comes in its instance data segment,
it was technically legal to take any zero-initialized
data segment and create a heap and atom table in it.
</p>
<p>
The <code>Local&shy;Init</code> function took three parameters:
The data segment handle,
a pointer to the first byte of memory you want to use as the heap,
and
a pointer to the last byte of memory you want to use as the heap.
So it explicitly lets you pick the data segment and which bytes
in that segment you want to turn into a heap.
</p>
<p>
But the <code>Local&shy;Alloc</code> function doesn't have
a parameter for the data segment handle.
Neither does <code>Add&shy;Atom</code>.
They always operate on the current data segment,
the one specified by the <code>ds</code> register.
During execution of a program, the <code>ds</code>
register holds that program's instance data segment,
so that all references to global variables are relative
to that data segment.
</p>
<p>
The trick is to load your custom data segment into
the <code>ds</code> register before calling
<code>Local&shy;Alloc</code>,
and then restoring the program's instance data segment
after the call returns.
Similarly for the other heap and atom functions.
</p>
<p>
Mind you, there was no way to express this in C,
so you had to use either an assembly language wrapper
or use inline assembly.
That probably contributed to the fact that
the trick was little-known and little-used.
</p>
<p>
But if you knew the trick, you could set up your own
local heap and atom table anywhere you liked.
</p>
<p>
The dialog box manager in 16-bit Windows knew this trick,
and if the dialog box contains any edit controls,
then it sets up a new data segment to hold the data
for those edit controls,
so that the total text in the edit controls for the dialog box
could go up to 64KB.
(A single segment is used for all the edit controls
in the dialog box.)
There is a style
<code>DS_</code><code>LOCAL&shy;EDIT</code> which suppresses
this behavior,
in which case the memory for the edit controls come from
the caller's data segment.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (2)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-joshudson even thread-even depth-1" id="comment-1374165">
				<div id="div-comment-1374165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua_______' rel='external nofollow' class='url'>Joshua_______</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181220-00/?p=100525#comment-1374165">
			December 20, 2018 at 10:24 am</a>		</div>

		<p>And this is why you sometimes really need MakeProcInstance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00034001d01cd865 odd alt thread-odd thread-alt depth-1" id="comment-1374175">
				<div id="div-comment-1374175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Neil+Rashbrook+%28Copy+1%29' rel='external nofollow' class='url'>Neil Rashbrook (Copy 1)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181220-00/?p=100525#comment-1374175">
			December 21, 2018 at 3:39 am</a>		</div>

		<p>I have a Windows 3.1 book which goes to all the trouble of pointing out that RegisterWindowMessage() was a wrapper around AddAtom() and provides a code sample for calling GetAtomName() with a custom data segment. It also points out that RegisterWindowMessage() was an alias for RegisterClipboardFormatName(). However, it then fails to put two and two together&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

