<html>
<head>
<title>Stop cherry-picking, start merging, Part 10: Web-based workflow for VSTS</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Stop cherry-picking, start merging, Part 10: Web-based workflow for VSTS</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 23, 2018 / year-entry #68</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180323-00/?p=98315</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>1</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Clicking your way to a merged cherry-pick.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
If you uses Visual Studio Team Services (VSTS)
as your repository hosting service,
then a lot of the workflows described in this series can be performed
completely from the Web interface.
</p>
<p>
<b>Find the merge base</b>
</p>
<p>
This is the one step that doesn't have a convenient button to click
in VSTS.
</p>
<p>
Option 1: Use special knowedge.
</p>
<p>
If you have special knowledge of the way your team manages branches,
you may be able to figure out the merge base by using your powerful
brain.
In the Windows division, we have internal Web sites
that let you look up various information from the repo,
and you may be able to use that to find a suitable merge base.
For example, build numbers are established by the master branch,
so a safe (though perhaps not optimal) merge base is the
commit on the
master branch whose build number is the minimum of the build
numbers of the two branches you are working with.
</p>
<p>
Option 2: Ask VSTS to look it up.
</p>
<p>
This is very annoying to do the first time,
and moderately annoying to do subsequent times.
</p>
<p>
One-time setup:
Take the repo clone URL and append <code>/vsts/info</code> to it.
Visit that Web site, and you will get some JSON back.
Look in the <code>repository</code> section of the JSON and suck out
the <code>url</code> property.
</p>
<pre>
{
  "serverUrl": "https://fabrikam-fiber-inc.visualstudio.com",
  "collection": {
    ...
  },
  "repository": {
    "id": "2f3d611a-f012-4b39-b157-8db63f380226",
    "name": "FabrikamCloud",
    "url": "<b>https://fabrikam-fiber-inc.visualstudio.com/_apis/
            git/repositories/2f3d611a-f012-4b39-b157-8db63f380226</b>",
    ...
    "project": {
      ...
    },
    ...
  }
}
</pre>
<p>
This URL will not change, so you need to look this up only once.
(I inserted line breaks for readability. It will be one long line.)
</p>
<p>
Next,
if one or more of the things from which you want to get the merge base
is a branch, you need to convert it to a commit ID.
Go to your repo on VSTS,
find the branch on the <i>Branches</i> tab,
go to the <i>Commit</i> column and hover over the commit ID.
A little document icon will appear:
Click it to copy the hash to the clipboard.
</p>
<p>
Finally, ask VSTS to calculate the merge base between the two commits.
</p>
<pre>
https://fabrikam-fiber-inc.visualstudio.com/_apis/git/
    repositories/2f3d611a-f012-4b39-b157-8db63f380226/
    commits/<b>fe17a84cc2dfe0ea3a2202ab4dbac0706058e41f</b>/<a HREF="https://docs.microsoft.com/en-us/rest/api/vsts/git/merge%20bases/list">mergebases</a>?
    otherCommitId=<b>0360c963d7d86d040e9c33bba836feab14da4ad3</b>&
    api-version=4.1-preview
</pre>
<p>
The first part of the URL is the service URL we obtained during the
one-time setup.
Substitute the two commit IDs (in boldface).
The merge-base operation is symmetric, so it doesn't matter what
order you list them in.
(Note that this is a preview API, so eventually I'll have to update
the URL to the release version.)
</p>
<p>
The result will be some more JSON:
</p>
<pre>
{
    "count": 1,
    "value": [{
        "commitId": "<b>be67f8871a4d2c75f13a51c1d3c30ac0d74d4ef4</b>"
    }]
}
</pre>
<p>
There is your merge base.
</p>
<p>
That was a real pain.
Maybe I can convince our engineering team to create a tiny little
Web page that lets people type in two commits or branch names,
and it can do the grunt work of finding the merge base.
</p>
<p>
<b>Create the patch branch</b>
</p>
<p>
Go to your repo on VSTS and enter the commit ID for the merge base
into the <i>Commits</i> page.
You are now looking at the commit.
Go to the "&hellip;" menu (next to the <i>Search in branches</i>)
and click <i>New branch</i>.
Create your branch.
</p>
<p>
<b>Prepare the patch branch</b>
</p>
<p>
Apply the changes to the patch branch.
For example,
if you need to edit a file, you can go to a file and click <i>Edit</i>.
If you need to cherry-pick, you can go to the commit you want to
cherry-pick and select <i>Cherry-pick</i> from the "&hellip;" menu.
Note that VSTS will not cherry-pick directly into a branch;
it will create a temporary branch and a pull request from the
temporary branch into the target branch.
You can make the temporary branch your new patch branch
to avoid an extraneous commit.
</p>
<p>
Now that you have the patch branch ready to be merged into the two
targets,
you can create the pull requests.
</p>
<p>
<b>Viewing the proposed result of a pull request</b>
</p>
<p>
Some parts of the workflow include the step
"Verify that the merge results in no code change."
To do this in VSTS, you can go to the "&hellip;" menu
and select <i>View merge commit</i>.
This shows the changes that will be introduced into the
target branch by the pull request.
(The commit will not have the final commit message,
but that's okay because we're interested only in the files.)
If there are no changes, then VSTS will show an empty diff.
</p>
<p>
<b>Building the proposed result of a pull request</b>
</p>
<p>
You may want to build the proposed result of the
pull request in order to test the result before committing it.
Get the commit hash for the proposed merge commit,
say by copying it from the web page by clicking the "copy"
icon next to the hash.
Let's say that the commit hash is <code>xyz</code>.
</p>
<p>
Fetch the commit and then check it out.
</p>
<pre>
git fetch origin xyz
git checkout xyz
</pre>
<p>
If you are using
<a HREF="https://www.gvfs.io/">
GVFS</a>, then you can skip the fetch step
because GVFS downloads git objects on demand.
</p>
<p>
Note that you now have a detached head.
If you make any commits (say, to fix a problem),
your commit won't go into any named branch.
You'll have to cherry-pick them back into the patch branch.
</p>
<p>
<b>Ensuring that the result is a merge</b>
</p>
<p>
On the pull request page, when you are about to
complete the pull request, make sure to uncheck the
<i>squash</i> button.
</p>
<p>
Fortunately, VSTS lets you preload the check boxes
on the completion dialog,
so click the Complete button, uncheck the <i>squash</i>
box, and then cancel the completion.
Now you won't forget to uncheck the box when you finally
decide to complete the pull request.
</p>
<p>
That's the end of the series for now.
I hope you now understand the merge-recursive algorithm
and three-way merge algorithm enough to apply these
principles to your own scenarios where you may be tempted
to cherry-pick changes between branches that will eventually merge.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (1)	</div>

		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title"> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/oldnewthing/20180323-00/?p=98315#respond" style="display:none;">Cancel reply</a></small></h3>			<form action="https://blogs.msdn.microsoft.com/oldnewthing/wp-comments-post.php" method="post" id="commentform" class="comment-form">
				<p class="comment-form-comment"><textarea id="comment" name="comment" cols="45" rows="4" aria-required="true"></textarea></p><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" aria-required='true' required='required' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" maxlength="100" aria-describedby="email-notes" aria-required='true' required='required' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" maxlength="200" /></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit btn btn-default" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='98315' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="6d185913db" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="246"/></p>			</form>
			</div><!-- #respond -->
	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1330455">
				<div id="div-comment-1330455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180323-00/?p=98315#comment-1330455">
			March 23, 2018 at 8:35 am</a>		</div>

		<p>If you are prepared to use command-line git, git merge-base A B will tell you the (a) best merge base.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180323-00/?p=98315&#038;replytocom=1330455#respond' onclick='return addComment.moveForm( "div-comment-1330455", "1330455", "respond", "98315" )' aria-label='Reply to Martin Bonner'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

