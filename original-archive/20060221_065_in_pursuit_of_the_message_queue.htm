<html>
<head>
<title>In pursuit of the message queue</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>In pursuit of the message queue</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 21, 2006 / year-entry #66</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060221-09/?p=32203</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In 16-bit Windows, every thread (or "task" as it was called then) had a message queue, end of story. In the transition to 32-bit Windows, this model broke down because Win32 introduced the concepts of "worker threads" and "console applications", neither of which had much need for messaging. Creating a queue for every thread in...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>In 16-bit Windows, every thread (or "task" as it was called then) had a message queue, end of story. In the transition to 32-bit Windows, this model broke down because Win32 introduced the concepts of "worker threads" and "console applications", neither of which had much need for messaging. Creating a queue for every thread in the system would have been quite a waste, so the window manager deferred creating the input queue for a thread until that thread actually needed an input queue. That way, threads that didn't use the GUI didn't have to pay for something they weren't using. But once you send a message or peek for a message or create a window or do anything else that requires a message queue, <strong><em>poof</em></strong> a message queue would be created just in time to accomodate your request. As far as you knew, the queue was always there.</p>
<p> The create-on-demand queue model worked out great: Queues were created only when they were needed, threads that didn't need message queues didn't get one, and nobody knew the difference. There was only one catch: <code>PostThreadMessage</code>. When I started writing this entry, I was going to write that the behavior of the <code>PostThreadMessage</code> function is a mistake. Instead of failing if the thread doesn't have a queue, it should have preserved the conceit that the queue was there all along by creating the queue on demand. But thinking about it more (as the writing process forces you to do), I've now convinced myself that the current design is correct, even though it violates the "as far as you can tell, the queue is always there" principle. </p>
<p> The <code>PostThreadMessage</code> function is peculiar among all the other queue-related functions in that it operates on the queue of <strong>another thread</strong> that may not already have a queue. All the other queue functions operate on the queue of the thread making the call or operate on the queue of a thread that is known to have a queue (because it created a window, for example). As a result, a thread is in control of whether it gets a message queue or not. If <code>PostThreadMessage</code> created a queue on demand, this would allow one process to start creating queues in other processes without those other processes knowing about it. It could then start filling that message queue with thousands upon thousands of posted messages, and the victim thread would have no idea not only that it had a message queue, but also that the message queue that somebody else created was full of unprocessed messages! No thread would be able to defend itself from this sort of attack. </p>
<p> Making the <code>PostThreadMessage</code> an exception to the "as if there always were a thread queue" rule keeps a thread in control of its own queue destiny. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-348253">
				<div id="div-comment-348253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060221-09/?p=32203#comment-348253">
			February 21, 2006 at 11:23 am</a>		</div>

		<p>What effect would this &#8216;attack&#8217; have?<br />
<br />As far as I can tell it could cause the proccess to run out of address space, but could anything worse happen?</p>
<p>Also, interesting to note that even when programmers were &#8216;trusted&#8217; this was considered too dangerous.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-348273">
				<div id="div-comment-348273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060221-09/?p=32203#comment-348273">
			February 21, 2006 at 11:38 am</a>		</div>

		<p>&lt;i&gt;In 16-bit Windows, every thread (or &quot;task&quot; as it was called then)&lt;/i&gt;</p>
<p>Huh? I thought Win16 didn&#8217;t support threads. A quick google brings up <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnwui/html/msdn_styles32.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnwui/html/msdn_styles32.asp</a> which indicates the same thing.</p>
<p>So, what was the point of this again?</p>
<p>When an app starts up, if its entry point is WinMain (and is therefore not a console app) it could get a message queue automatically. Console apps and new threads could ask for one if they need one.</p>
<p>What&#8217;s wrong with that?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-348283">
				<div id="div-comment-348283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060221-09/?p=32203#comment-348283">
			February 21, 2006 at 11:40 am</a>		</div>

		<p>It sounds to me that using PostThreadMessage to send messages to a thread which would otherwise not have a queue would be harmless, like knocking on the door of a deaf person. Your average thread will never have a message queue, so it will be blissfully unaware of those thousands of messages waiting for it.</p>
<p>If a thread then checks the queue only to find thousands of messages waiting, it&#8217;s no different than posting thousands of messages right after the thread created its own queue. It&#8217;s not like you can&#8217;t post millions of messages to any thread&#8217;s queue after it&#8217;s been created.</p>
<p>The only way I can see this as a possible attack is it you could use up multiple megabytes of a process&#8217;s address space with messages that will never be read. In that case it would be safe to just limit the number of messages in a not-yet-read queue to a few hundred.</p>
<p>Has anybody run into the race condition of trying to post a message to a queue that hasn&#8217;t yet been created?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-348313">
				<div id="div-comment-348313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ringzero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060221-09/?p=32203#comment-348313">
			February 21, 2006 at 11:50 am</a>		</div>

		<p>Stu, programmers were trusted only in the Win16 environment. PostThreadMessage doesn&#8217;t exist there, so it wasn&#8217;t an issue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-348323">
				<div id="div-comment-348323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Loz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060221-09/?p=32203#comment-348323">
			February 21, 2006 at 11:52 am</a>		</div>

		<p>I never really understood how to handle correctly the message queues in worker threads. In an application I’m currently maintaining, there’s a main GUI thread that creates windows, receives the user input and of course processes messages with the classic GetMessage loop. Then, there’s another thread that never directly interacts with the GUI, but sends messages to the main thread with SendMessage or PostMessage. So, even this thread has its queue, but it never looks at it. Which are the side effects? This thread creates no windows, so it should never get window messages, so if the system broadcasts messages this thread should not cause hangs. But I’m still consuming system resources because the queue slowly fills in for some reason?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-348333">
				<div id="div-comment-348333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Poster</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060221-09/?p=32203#comment-348333">
			February 21, 2006 at 11:52 am</a>		</div>

		<p>Why doesn&#8217;t PostThreadMessage just fail silently when there is no message queue? &nbsp;If the destination thread never reads any messages, what difference would it make if the queue exists or not? &nbsp;All messages posted would just be ignored anyways.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-348433">
				<div id="div-comment-348433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Blekhman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060221-09/?p=32203#comment-348433">
			February 21, 2006 at 1:13 pm</a>		</div>

		<p>I’d like to add that PostThreadMessage was one of the first functions, which could allow to itself to fail due to inexistent message queue. All other “old” functions were called by 16-bit code in assumption that there is message queue for “task”. Then, if their semantics would suddenly changed (for example, message queue had to be created explicitly) it would broke many innocent applications.</p>
<p>PostThreadMessage is another story. Anyone who calls it is aware of threads already, therefore aware of message queues and the fact that queue is not necessarily there. So, it’s perfectly safe to fail because of missing message queue: whoever calls PostThreadMessage should not assume that message queue is always there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-348453">
				<div id="div-comment-348453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Poster</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060221-09/?p=32203#comment-348453">
			February 21, 2006 at 1:21 pm</a>		</div>

		<p>Derek:</p>
<p>&quot;Failing silently contributes to nearly-impossible-to-track-down bugs. &nbsp;Imagine that one thread (t1) posts a message to a thread (t2) which needs that message, but for whatever reason hasn&#8217;t created its queue. &nbsp;Then t2 reads from its queue (thereby creating the queue), and proceeds to process messages.&quot;</p>
<p>I hadn&#8217;t thought of that scenario. &nbsp;Yeah, that would result in lost messages. &nbsp;But what is the thread sending the message supposed to do when there is no message queue (yet)? &nbsp;Just keep re-posting the message until the queue is created?</p>
<p>It seems to me that the whole concept of tying a message queue to a thread was a bad idea from the start. &nbsp;Threads should be separate from message queues. &nbsp;A thread can create a message queue and pass its handle to another thread for posting messages. &nbsp;Having all of these byzantine rules about when a queue is created automatically (and when it isn&#8217;t) just leads to a world of pain and confusion.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-348463">
				<div id="div-comment-348463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Derek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060221-09/?p=32203#comment-348463">
			February 21, 2006 at 1:31 pm</a>		</div>

		<p>Poster, by no means am I saying the current system is perfect. &nbsp;The fact that thread messages are routinely discarded by secondary message loops is evidence enough of that. &nbsp;But silent failure is typically worse than loud obnoxious failure. &nbsp;At least in the scenario I gave, the failure gives the developers a direction to proceed. &nbsp;e.g. The second thread could do a PeekMessage as soon as it starts.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-348473">
				<div id="div-comment-348473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ashod Nakashian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060221-09/?p=32203#comment-348473">
			February 21, 2006 at 1:41 pm</a>		</div>

		<p>This doesn&#8217;t make sense to me!</p>
<p>First of all, it&#8217;s obvious that Raymond&#8217;s logical explanation is done, what, 15 years after the function was designed. So his assumptions are probably current to today&#8217;s mindset but not to 15 or 20 years ago.</p>
<p>Furthermore, this is an optimization trick (creating queues on demand) and whatever benefit you get from it is clearly NOT by design. For example consider the case where each thread gets a queue by default, now calling PostThreadMessage on a thread in another process would actually post the message and you couldn&#8217;t do anything about it. The fact that because they decided to create queues on demand and not doing it for PostThreadMessage doesn&#8217;t translate into &quot;we did it to protect threads from message-flooding attacks.&quot;</p>
<p>That, I don&#8217;t buy, regardless of who is selling it. I personally think that even if PostThreadMessage was designed in the way Raymond explained, they probably didn&#8217;t have &quot;avoiding message-flood attacks&quot; in their minds; There are MANY ways (and 15 years ago even more) to do all sorts of things to other processes, threads and windows, including broadcasting timer messages with nasty params (I think some of you know where I&#8217;m going with this.)</p>
<p>Cheers,<br />
<br />Ash</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-348513">
				<div id="div-comment-348513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kokorozashi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060221-09/?p=32203#comment-348513">
			February 21, 2006 at 2:29 pm</a>		</div>

		<p>Ashod, RC didn&#8217;t say the design was WISE. He said it was CORRECT. There&#8217;s a big difference.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-348403">
				<div id="div-comment-348403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Derek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060221-09/?p=32203#comment-348403">
			February 21, 2006 at 12:59 pm</a>		</div>

		<p>Poster, because if you post to a message queue which doesn&#8217;t exist, clearly there&#8217;s a problem.</p>
<p>Failing silently contributes to nearly-impossible-to-track-down bugs. &nbsp;Imagine that one thread (t1) posts a message to a thread (t2) which needs that message, but for whatever reason hasn&#8217;t created its queue. &nbsp;Then t2 reads from its queue (thereby creating the queue), and proceeds to process messages. &nbsp;For whatever reason, it needed that message. &nbsp;Maybe it was a file (or log) handle, or an address, or a memory location with info it needs, or whatever else. &nbsp;Since it didn&#8217;t get that message, it may lead to unexpected behavior.</p>
<p>T1 *knows* it sent the message successfully, and t2 *knows* it didn&#8217;t get there. &nbsp;Now, the developer are cursing Microsoft and trying to work around the &quot;bug&quot; that could have been avoided if the post had simply reported failure.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-348533">
				<div id="div-comment-348533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thomas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060221-09/?p=32203#comment-348533">
			February 21, 2006 at 3:03 pm</a>		</div>

		<p>If creating a message queue in the destination thread (without it knowing) is a problem, then why is it possible to kill window-less timers of *any* thread session-wide? I think that&#8217;s far more dangerous than flooding a thread&#8217;s message queue (there&#8217;s a maximum of messages iirc) which just doesn&#8217;t process them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-348633">
				<div id="div-comment-348633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http:hardlyhere.blogspot.com' rel='external nofollow' class='url'>Ilan Pillemer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060221-09/?p=32203#comment-348633">
			February 22, 2006 at 2:57 am</a>		</div>

		<p>It seems pretty logical to me, a thread should not be allowed to create the queue of another thread.</p>
<p>Its just rude.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-349193">
				<div id="div-comment-349193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060221-09/?p=32203#comment-349193">
			February 23, 2006 at 6:11 am</a>		</div>

		<p>&quot;If a thread then checks the queue only to find thousands of messages waiting, it&#8217;s no different than posting thousands of messages right after the thread created its own queue. It&#8217;s not like you can&#8217;t post millions of messages to any thread&#8217;s queue after it&#8217;s been created. </p>
<p>The only way I can see this as a possible attack is it you could use up multiple megabytes of a process&#8217;s address space with messages that will never be read. In that case it would be safe to just limit the number of messages in a not-yet-read queue to a few hundred.&quot;</p>
<p>The aim is not to protect against malicious attacks, but against involountary attacks.<br />
<br />I guess there are programs that send some messages to all threads of the system, thinking that it is fine, threads discard them if they don&#8217;t treat them.<br />
<br />But this guess would be wrong for working threads.<br />
<br />And, slowly, if such messages are send at regular interval of time, the thread queues would increase.</p>
<p>Thomas: killing a timer of another thread is obviously evil&#8230; Every programmer is aware of that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-patriotb odd alt thread-odd thread-alt depth-1" id="comment-349453">
				<div id="div-comment-349453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PatriotB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060221-09/?p=32203#comment-349453">
			February 23, 2006 at 10:04 pm</a>		</div>

		<p>I think Alex Blekhman means that *PostMessage* (not PostThreadMessage) was one of the first functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

