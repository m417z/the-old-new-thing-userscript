<html>
<head>
<title>Rescuing thread messages from modal loops via message filters</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Rescuing thread messages from modal loops via message filters</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 28, 2005 / year-entry #108</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050428-00/?p=35753</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">As we have seen recently, thread messages are eaten by modal loops because they have nowhere to go when dispatched. However, there is a way to see them before they vanish, provided the modal loop is cooperative. The WH_MSGFILTER message hook allows you to receive messages passed to the CallMsgFilter function. Fortunately, all the modal...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
As we have seen recently, thread messages are eaten by modal loops
because they have nowhere to go when dispatched.
However, there is a way to see them before they vanish,
provided the modal loop is cooperative.
</p>
<p>
The WH_MSGFILTER message hook allows you to receive messages
passed to
<a HREF="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/callmsgfilter.asp">
the <code>CallMsgFilter</code> function</a>.
Fortunately, all the modal loops in the window manager use
<code>CallMsgFilter</code> to allow the thread to capture thread
messages before they are lost.
Therefore, this gives you a way to snoop
on messages as they travel through modal loops.
</p>
<p>
Let's add a message filter to the program we wrote last time to
see how messages pass through a message filter.
Note that <strong>this is the wrong way to solve the problem</strong>.
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/04/27/412565.aspx">
The correct solution was illustrated last time</a>.
I'm doing it the wrong way
to illustrate message filters since they are not
well-understood.  (For example, a valid reason for a message
filter would to
prevent the menu loop from seeing certain input.)
</p>
<p>
Start with the program from last the before we changed the
<code>PostThreadMessage</code> to a <code>PostMessage</code>,
then make the following changes:
</p>
<pre>
<font COLOR=blue>HHOOK g_hhkMSGF;

LRESULT CALLBACK MsgFilterProc(int code, WPARAM wParam, LPARAM lParam)
{
 MSG* pmsg = (MSG*)lParam;
 if (code &gt;= 0 &amp;&amp; IsThreadMessage(pmsg)) return TRUE;
 return CallNextHookEx(g_hhkMSGF, code, wParam, lParam);
}</font>

BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
<font COLOR=blue> g_hhkMSGF = SetWindowsHookEx(WH_MSGFILTER, MsgFilterProc,
    NULL, GetCurrentThreadId());
 if (!g_hhkMSGF) return FALSE;</font>
 DWORD dwThread;
 HANDLE hThread = CreateThread(NULL, 0, ThreadProc,
       UintToPtr(GetCurrentThreadId()), 0, &dwThread);
 ...
</pre>
<p>
Here, we installed a message filter hook on our thread so that we can seem
messages as they pass through modal loops.  The <code>code</code>
parameter tells us what type of modal loop retrieved the message;
we ignore it here since we want to do our filtering for all modal loops.
</p>
<p>
Run this program and observe that the beeps are no longer lost
because our message filter is getting a chance to see them and
react to them.
</p>
<p>
The message filter trick relies on all modal loops sending the
messages they retrieve through a message filter before dispatching
them.  If you are writing code that is going into a library,
and you have a modal loop, then you too should call the message filter
before dispatching messages you've retrieved, in case the program
using your library wants to do something with the message.
</p>
<pre>
MSG msg;
while (GetMessage(&amp;msg, NULL, 0, 0)) {
 <font COLOR=blue>if (!CallMsgFilter(&amp;msg, MSGF_MYLIBRARY)) {</font>
  TranslateMessage(&amp;msg);
  DispatchMessage(&amp;msg);
 <font COLOR=blue>}</font>
}
</pre>
<p>
The value <code>MSGF_MYLIBRARY</code> is an arbitrary positive value
you can choose and document in your library's header file.
You can see examples of this in the <code>commctrl.h</code> header
file:
</p>
<pre>
#define MSGF_COMMCTRL_BEGINDRAG     0x4200
#define MSGF_COMMCTRL_SIZEHEADER    0x4201
#define MSGF_COMMCTRL_DRAGSELECT    0x4202
#define MSGF_COMMCTRL_TOOLBARCUST   0x4203
</pre>
<p>
These are the message filters called by the modal loops in the
shell common controls library.
</p>
<p>
One question you might ask is, "Why use a message filter hook
instead of a <code>GetMessage</code> hook?"
</p>
<p>
Message filter hooks are less expensive than <code>GetMessage</code>
hooks because they are called only upon request, as opposed to
a <code>GetMessage</code> hook
which is called for every retrieved message.
Message filter hooks also tell you <strong>which</strong> modal loop
is doing the filtering, in case you want to adjust your behavior
accordingly.
</p>
<p>
The downside of message filter hooks is that all modal loops need
to remember to call <code>CallMsgFilter</code> as part of their
dispatch loop.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-universalis even thread-even depth-1" id="comment-273133">
				<div id="div-comment-273133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Universalis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050428-00/?p=35753#comment-273133">
			April 28, 2005 at 8:55 am</a>		</div>

		<p>Some modal loops call CallMsgFilter, some don&#8217;t.<br />
<br />Do all modal loops within Windows itself call CallMsgFilter? If not, is there a list of the ones that do and the ones that don&#8217;t?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-273143">
				<div id="div-comment-273143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050428-00/?p=35753#comment-273143">
			April 28, 2005 at 9:14 am</a>		</div>

		<p>You mentioned before, that the thread message is discarded by DispatchMessage() &#8211; does this mean that GetMessage() still retrieves it from the message queu correctly? If so, isn&#8217;t it easier to process those messages in the message pump loop and therefore avoid using message hooks, etc?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-273153">
				<div id="div-comment-273153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050428-00/?p=35753#comment-273153">
			April 28, 2005 at 9:16 am</a>		</div>

		<p>In other words, why do you use a message hook, rather than simply pass the message to some message handler function?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-273163">
				<div id="div-comment-273163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Cooke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050428-00/?p=35753#comment-273163">
			April 28, 2005 at 9:28 am</a>		</div>

		<p>waleri, I think the idea here is that you may not have control over the modal loop as it may be handled by someone else&#8217;s code or by Windows itself. Obviously there&#8217;s no way to &quot;get inside&quot; someone else&#8217;s message loop without a hook.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-273193">
				<div id="div-comment-273193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jasmusic.com' rel='external nofollow' class='url'>Joshua Schaeffer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050428-00/?p=35753#comment-273193">
			April 28, 2005 at 3:00 pm</a>		</div>

		<p>All the modal loops I&#8217;ve seen, and yet this is the first time I&#8217;ve heard of CallMsgFilter. Of COURSE people aren&#8217;t going to remember to call it, assuming they care at all!</p>
<p>I still stand by what I wrote three articles ago. There should be a callback(s) for thread messages, which gets called if DispatchMessage() sees that it has been set. Imagine that, it&#8217;d even be backwards-compatible.</p>
<p>On the other hand, I use MFC with its goofy GetMessage hook, so why should I care&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-273203">
				<div id="div-comment-273203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050428-00/?p=35753#comment-273203">
			April 28, 2005 at 3:15 pm</a>		</div>

		<p>Clearly a simple callback isn&#8217;t good enough &#8211; what if two modules both want to register a callback? Who wins? It would have to be a new hook type &#8211; but since you only care about thread messages, the existing WH_GETMESSAGE hook works just fine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-273243">
				<div id="div-comment-273243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jasmusic.com' rel='external nofollow' class='url'>Joshua Schaeffer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050428-00/?p=35753#comment-273243">
			April 29, 2005 at 12:17 pm</a>		</div>

		<p>&quot;what if two modules both want to register a callback? Who wins?&quot;</p>
<p>Ask whoever wrote SetWindowSubclass(&#8230;). They seemed to figure it out. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-273253">
				<div id="div-comment-273253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050428-00/?p=35753#comment-273253">
			April 29, 2005 at 12:36 pm</a>		</div>

		<p>I&#8217;m with Joshua on this one. I&#8217;ve never heard of CallMsgFilter before. :) When should I call it? Every time I do a modal message loop? In my main application message loop?</p>
<p>The MSDN is not clear at all on this. It says &quot;The system calls CallMsgFilter to enable applications&#8230;&quot; Sounds like it is to be called by the system, and not by application code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-273263">
				<div id="div-comment-273263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050428-00/?p=35753#comment-273263">
			April 29, 2005 at 12:40 pm</a>		</div>

		<p>Joshua: Precisely, SetWindowSubclass uses a hook model rather than a single callback. And hey check it out there&#8217;s already a hook WH_GETMESSAGE you can use to capture thread messages.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-273283">
				<div id="div-comment-273283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050428-00/?p=35753#comment-273283">
			April 29, 2005 at 4:08 pm</a>		</div>

		<p>So why is this the wrong way?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-345033">
				<div id="div-comment-345033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/01/26/517849.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050428-00/?p=35753#comment-345033">
			February 10, 2006 at 11:54 am</a>		</div>

		<p>Putting together pieces you already know.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

