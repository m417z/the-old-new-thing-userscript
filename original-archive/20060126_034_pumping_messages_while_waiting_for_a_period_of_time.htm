<html>
<head>
<title>Pumping messages while waiting for a period of time</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Pumping messages while waiting for a period of time</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 26, 2006 / year-entry #35</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060126-00/?p=32513</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">We can use the MsgWaitForMultipleObjects function (or its superset MsgWaitForMultipleObjectsEx) to carry out a non-polling "sleep while processing messages". #define MSGF_SLEEPMSG 0x5300 BOOL SleepMsg(DWORD dwTimeout) { DWORD dwStart = GetTickCount(); DWORD dwElapsed; while ((dwElapsed = GetTickCount() - dwStart) < dwTimeout) { DWORD dwStatus = MsgWaitForMultipleObjectsEx(0, NULL, dwTimeout - dwElapsed, QS_ALLINPUT, MWFMO_WAITANY | MWMO_INPUTAVAILABLE); if (dwStatus...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We can use the <code>MsgWaitForMultipleObjects</code> function
(or its superset <code>MsgWaitForMultipleObjectsEx</code>)
to carry out a non-polling "sleep while processing messages".
</p>
<pre>
#define MSGF_SLEEPMSG 0x5300

BOOL SleepMsg(DWORD dwTimeout)
{
 DWORD dwStart = GetTickCount();
 DWORD dwElapsed;
 while ((dwElapsed = <a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/05/31/423407.aspx">GetTickCount() - dwStart</a>) &lt; dwTimeout) {
  DWORD dwStatus = MsgWaitForMultipleObjectsEx(0, NULL,
                    dwTimeout - dwElapsed, QS_ALLINPUT,
                    MWFMO_WAITANY | <a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/02/17/375307.aspx">MWMO_INPUTAVAILABLE</a>);
  if (dwStatus == WAIT_OBJECT_0) {
   MSG msg;
   while (PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE)) {
    if (<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/02/22/378018.aspx">msg.message == WM_QUIT</a>) {
     PostQuitMessage(<a HREF="http://windowssdk.msdn.microsoft.com/library/en-us/Win64/win64/rules_for_using_pointers.asp">(int)</a>msg.wParam);
     return FALSE; // abandoned due to WM_QUIT
    }
    if (!<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/04/28/412574.aspx">CallMsgFilter(&amp;msg, MSGF_SLEEPMSG)</a>) {
     TranslateMessage(&amp;msg);
     DispatchMessage(&amp;msg);
    }
   }
  }
 }
 return TRUE; // timed out
}
</pre>
<p>
This function pumps messages for up to
<code>dwTimeout</code> milliseconds.
The kernel of the idea is merely to use the
<code>MsgWaitForMultipleObjects/Ex</code> function as a
surrogate for <code>WaitMessageTimeout</code>,
pumping messages until the cumulative timeout has been reached.
There are a lot of small details to pay heed to, however.
I've linked them to earlier postings that discuss the specific
issues, if you need a refresher.
The <code>CallMsgFilter</code> you might find gratuitous,
but you'll change your mind when you realize that users might
press a keyboard accelerator while you're sleeping, and you
presumably want it to go through somebody's
<code>TranslateAccelerator</code>.
The message filter lets you hook into the modal loop and do
your accelerator translation.
</p>
<p>
Extending this function to "wait on a set of handles up to
a specified amount of time, while pumping messages" is left
as an exercise.
(You can do it without changing very many lines of code.)
</p>
<p>
[Call the right function. -2pm]</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-341073">
				<div id="div-comment-341073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060126-00/?p=32513#comment-341073">
			January 26, 2006 at 10:39 am</a>		</div>

		<p>MWFMO_WAITANY?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-341083">
				<div id="div-comment-341083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060126-00/?p=32513#comment-341083">
			January 26, 2006 at 10:41 am</a>		</div>

		<p>Well, I must say that the code we wrote to do this seems a lot simpler in VB6 (though I don&#8217;t know if it&#8217;s entirely correct!):</p>
<p>Do Until &lt;button was clicked&gt;<br />
<br />    If MsgWaitForMultipleObjects(&#8230;) = WAIT_OBJECT_0 Then<br />
<br />        DoEvents<br />
<br />    EndIf<br />
<br />Loop</p>
<p>(This used to be a &quot;Do Until &lt;button was clicked&gt; DoEvents&quot; loop, which used a ton of CPU doing exactly nothing.  The DoEvents call runs VB6&#8217;s message loop on any messages that have come in, but if nothing&#8217;s there, it just returns immediately.)</p>
<p>I don&#8217;t know if this is actually 100% correct because I don&#8217;t know whether DoEvents makes the CallMessageFilter call, or handles WM_QUIT properly.  I would guess that WM_QUIT would be OK, but I don&#8217;t know for sure.</p>
<p>(We also didn&#8217;t have a timeout, we were just waiting for the user to click a button.  We needed to keep pumping messages because we had several VB Timer objects set up to pacify a hardware watchdog, so if we never called DoEvents, the timer handlers would never fire, and the watchdog would reset the machine.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-341093">
				<div id="div-comment-341093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060126-00/?p=32513#comment-341093">
			January 26, 2006 at 10:51 am</a>		</div>

		<p>Determining the correct value for MWFMO_WAITALL I leave an an exercise to see if you really understand the issue.</p>
<p>BryanK: If you aren&#8217;t interested in timeout behavior, then you can just use WaitMessage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-341123">
				<div id="div-comment-341123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060126-00/?p=32513#comment-341123">
			January 26, 2006 at 11:15 am</a>		</div>

		<p>OK, what you&#8217;re doing with MWMO_INPUTAVAILABLE is now completely contrary to MSDN. Is the MSDN documentation incorrect? Should you be using MsgWaitForMultipleObjectsEx instead?</p>
<p>The value of MWFMO_WAITALL should be TRUE while the value of MWFMO_WAITANY should be FALSE, if the MSDN documentation for MsgWaitForMultipleObjects is correct.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-341133">
				<div id="div-comment-341133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carlos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060126-00/?p=32513#comment-341133">
			January 26, 2006 at 11:53 am</a>		</div>

		<p>MsgWaitForMultipleObjects is a wrapper around MsgWaitForMultipleObjectsEx and from the code it looks like the documentation is correct:</p>
<p>xor         eax,eax<br />
<br />cmp         dword ptr [ebp+10h],eax<br />
<br />setne       al</p>
<p>push        eax</p>
<p>i.e. the third parameter is treated as a BOOL and 0 or 1 (MWMO_WAITALL) is sent to MsgWaitForMultipleObjectsEx.  So the flags Raymond passes are getting eaten.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-341233">
				<div id="div-comment-341233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060126-00/?p=32513#comment-341233">
			January 26, 2006 at 4:35 pm</a>		</div>

		<p>I called the wrong function, but if you have been reading and understanding you should have been able to fix it yourself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-341263">
				<div id="div-comment-341263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jasmusic.com' rel='external nofollow' class='url'>Joshua Schaeffer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060126-00/?p=32513#comment-341263">
			January 26, 2006 at 5:42 pm</a>		</div>

		<p>I would have preferred a way to get an event handle for the message queue, if only because a custom function like MsgWaitForMultipleObjects is difficult (if not impossible) to integrate with existing C++ general framework synchronization wrappers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-341253">
				<div id="div-comment-341253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060126-00/?p=32513#comment-341253">
			January 26, 2006 at 5:02 pm</a>		</div>

		<p>I went back and looked at the code &#8212; it wasn&#8217;t using a timeout, but it was waiting for an event to get signaled.</p>
<p>Basically, we were trying to emulate the VB6 MsgBox function (which doesn&#8217;t return until the message-box goes away), while still allowing the watchdog timers to fire (so we had to pump messages somehow).  Normally the VB MsgBox function disables timers.</p>
<p>We brought up a form using vbModeless, and the form had an auto-reset event that it signaled inside its button click handler.</p>
<p>Then the replacement MsgBox function did the MsgWaitForMultipleObjects(&#8230;) loop, with the auto-reset event handle from the form that it brought up.</p>
<p>I&#8217;m still not sure this is safe, but now it&#8217;s more because I don&#8217;t know whether the auto-reset event was the right kernel object to wait on (since VB6 is single-threaded, and the signalling thread *was* the thread that later re-waited).  I believe it was probably OK, because it does work (we didn&#8217;t use PulseEvent, but rather SetEvent).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-341323">
				<div id="div-comment-341323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anthony Wieser</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060126-00/?p=32513#comment-341323">
			January 27, 2006 at 2:30 am</a>		</div>

		<p>Looks like the flags and timeout are swapped in:<br />
<br />MsgWaitForMultipleObjectsEx(0, NULL, WFMO_WAITANY | MWMO_INPUTAVAILABLE, dwTimeout &#8211; dwElapsed, QS_ALLINPUT);</p>
<p>Shouldn&#8217;t it be:<br />
<br />MsgWaitForMultipleObjectsEx(0, NULL, dwTimeout &#8211; dwElapsed, WFMO_WAITANY | MWMO_INPUTAVAILABLE,  QS_ALLINPUT);</p>
<p>And MWFMO_WAITANY is 0, right?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-341553">
				<div id="div-comment-341553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ghbyrkit</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060126-00/?p=32513#comment-341553">
			January 28, 2006 at 10:39 am</a>		</div>

		<p>By jove, I think that Anthony is correct about there being an error in Raymond&#8217;s code!  And I was about to use this method just as incorrectly as Raymond did!  Why did it take all of us so long to spot this?  And I also think that MWFMO_WAITANY isn&#8217;t defined in the system header files (at least the ones that VS6 uses), and that its value should be zero.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-341563">
				<div id="div-comment-341563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ghbyrkit</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060126-00/?p=32513#comment-341563">
			January 28, 2006 at 10:44 am</a>		</div>

		<p>And upon further reflection (and consulting the Platform SDK documents), the QS_ALLINPUT goes BEFORE the MWMO_INPUTAVAILABLE parameter as well!</p>
<p>So shouldn&#8217;t it be:<br />
<br />        DWORD dwStatus = MsgWaitForMultipleObjectsEx(<br />
<br />                        0,                                      // handle count<br />
<br />                        NULL,                                   // handle array<br />
<br />                        dwTimeout &#8211; dwElapsed,                  // time to wait<br />
<br />                        QS_ALLINPUT,                            // wait options<br />
<br />                        MWFMO_WAITANY | MWMO_INPUTAVAILABLE     // wait options (MWFMO_WAITANY is NOT defined by the system!)<br />
<br />                        );<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-344933">
				<div id="div-comment-344933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/02/10/529525.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060126-00/?p=32513#comment-344933">
			February 10, 2006 at 10:00 am</a>		</div>

		<p>It clogs up the messaging system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-426633">
				<div id="div-comment-426633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.strafenet.com/2006/09/30/msgwaitformultipleobjectsex/' rel='external nofollow' class='url'>The Blog of Justice &raquo; MsgWaitForMultipleObjectsEx</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060126-00/?p=32513#comment-426633">
			October 2, 2006 at 6:36 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blog.strafenet.com/2006/09/30/msgwaitformultipleobjectsex/" rel="nofollow">http://blog.strafenet.com/2006/09/30/msgwaitformultipleobjectsex/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

