<html>
<head>
<title>The operating system doesn't know which language programs are written in - by the time the code hits the CPU, they all look the same</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The operating system doesn&#8217;t know which language programs are written in &#8211; by the time the code hits the CPU, they all look the same</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 24, 2009 / year-entry #263</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>27</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Reader Will Rayer asks about "the degree to which 'plain vanilla' C Windows API code works under Vista with the native look and feel." It works just as well as code written in any other language. The operating system doesn't know which language programs are written in. By the time the code reaches the CPU,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Reader
<a HREF="http://www.ubercode.com">Will Rayer</a>
asks about
"<a HREF="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#649621"
>the degree to which 'plain vanilla' C Windows API code
works under Vista with the native look and feel</a>."
</p>
<p>
It works just as well as code written in any other language.
The operating system doesn't know which language programs are
written in.
By the time the code reaches the CPU,
they all look the same.
It's just a bunch of instructions that occasionally call an API function.
You can write it in C, C++, assembly, Delphi, Perl, whatever.
</p>
<p>
Of course, some languages are better-suited to calling Win32 than others.
Win32 is a C-based API,
in the sense that the way you call an exported function is
expressed in a C header file,
and <code>__stdcall</code> calling convention matches up reasonably
well with the way C does things
(once you convince your compiler to follow that convention).
The way types are passed on the stack or in registers,
how return values are represented,
the fact that pointers are just the address of some blob of data,
these all follow the C way of thinking.
It stands to reason that the C language
(and languages which follow in C's footsteps,
like C++)
have a pretty easy time of calling Win32 exported functions.
</p>
<p>
But that doesn't mean that those are the only languages.
After all, at the end of the day, it's all machine code.
If you can write assembly language that pushes the parameters
in the right format in the right order, then you can use Win32 from
assembly language.
(There appears to be a whole subculture devoted to this endeavor.)
</p>
<p>
Now, it is indeed the case that COM programming is much more
convenient in C++ because
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/02/05/68017.aspx">
the COM object layout</a>
matches that of many C++ compilers.
But that doesn't mean you can't use some other language to do it.
As long as that language knows how to indirect through a vtable,
you can use COM objects.
Indeed, the COM header files go out of their way to make sure
even you old-school C programmers can call COM objects.
If you define the <code>COBJMACROS</code> symbol, then
you get access to macros like this:
</p>
<pre>
#define IPersistFile_GetClassID(This,pClassID)      \
    (This)->lpVtbl -> GetClassID(This,pClassID)
</pre>
<p>
This snippet from the <code>objidl.h</code> header file
is some syntactical sugar to help C programmers use COM.
Under pure C, you would retrieve the <code>CLSID</code>
from an <code>IPersistFile</code> interface pointer like this:
</p>
<pre>
CLSID clsid;
IPersistFile* ppf = ...;
HRESULT hr = ppf->lpVtbl->GetClassID(ppf, &amp;clsid);
</pre>
<p>
The above macro at least removes the error potential of
passing the wrong <code>this</code> pointer:
</p>
<pre>
CLSID clsid;
IPersistFile* ppf = ...;
HRESULT hr = IPersistFile_GetClassID(ppf, &amp;clsid);
</pre>
<p>
If you want to write your programs in C,
you still have a lot of company.
Huge chunks of Windows are still written in the C language.
Not that you can tell, because once the compiler is
done doing its thing,
the identity of the source language is long gone.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-764093">
				<div id="div-comment-764093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764093">
			August 24, 2009 at 10:15 am</a>		</div>

		<p>I&#8217;ve used COM from C a lot, because it&#8217;s quite fun.</p>
<p>However, it becomes quite a pain in the backside when people distribute COM components with only a Type Library, and no C header: To use the functions statically, a C programmer has to regenerate the header by fiddling with OLEVIEW and MIDL!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-764103">
				<div id="div-comment-764103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pavel Kostromitinov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764103">
			August 24, 2009 at 10:27 am</a>		</div>

		<p>Seems that the emphasis on &quot;plain C&quot; in original question is a bit misplaced. I&#8217;m pretty sure Will was interested more in second part &#8211; &quot;Windows API&quot; code. Which I presume means not using MFC/WTL/whatever.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-764113">
				<div id="div-comment-764113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764113">
			August 24, 2009 at 10:34 am</a>		</div>

		<p>If you look at the Wine source, you will see tons of this stuff, Wine being written in C and constructing its COM objects &quot;by hand&quot;, as it were.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-764133">
				<div id="div-comment-764133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel the Wise</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764133">
			August 24, 2009 at 2:10 pm</a>		</div>

		<p>When you step into the window API with a stripped PDB you can easily see a lot of C++ code (I did not step into the kernel yet, just user-land code).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-764153">
				<div id="div-comment-764153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bukes</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764153">
			August 24, 2009 at 2:54 pm</a>		</div>

		<p>Does the #import directive work with .C files? &nbsp;If so, you could just #import &quot;foo.tlb&quot; no_namespace and have the compiler generate the class definitions for you.</p>
<p>&quot;However, it becomes quite a pain in the backside when people distribute COM components with only a Type Library, and no C header: To use the functions statically, a C programmer has to regenerate the header by fiddling with OLEVIEW and MIDL!&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-764193">
				<div id="div-comment-764193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764193">
			August 24, 2009 at 11:18 pm</a>		</div>

		<p>I think maybe he was actually asking if the Vista look requires using COM APIs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-764203">
				<div id="div-comment-764203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">confused</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764203">
			August 25, 2009 at 12:24 am</a>		</div>

		<p>Where&#8217;s the link to the question? &nbsp;The link above is for some site that sells a programing language. &nbsp;I don&#8217;t get it.</p>
<div class=post>[<i>Sorry, fixed. (Monday is Suggestion Box day.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-764213">
				<div id="div-comment-764213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764213">
			August 25, 2009 at 1:06 am</a>		</div>

		<blockquote><p>
  &gt; Not that you can tell, because once the compiler is done doing its thing, the identity of the source language is long gone.
</p></blockquote>
<p>Unless you insist on using C++ exported name mangled entrypoints, where no two compilers agree.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-764223">
				<div id="div-comment-764223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764223">
			August 25, 2009 at 1:24 am</a>		</div>

		<p>Trying to read between the line, I assume Mr. Rayer was confused by the hype around WPF (codename Avalon), and wondering whether you have to use that to get all the new-fangled transparencies and stuff.</p>
<p>I remember similar confusion when Windows Server 2003 was called &quot;Windows .NET Server&quot; &#8211; some people thought it was written in .NET, and that you must program in .NET to run on it. Over-hyping has its perils.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-764263">
				<div id="div-comment-764263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764263">
			August 25, 2009 at 3:31 am</a>		</div>

		<blockquote><p>
  &gt;Bukes</p>
<p>  &gt;Does the #import directive work with .C files?</p>
<p>  &gt;If so, you could just #import &quot;foo.tlb&quot; no_namespace and have the compiler generate the class definitions for you.
</p></blockquote>
<p>No, it doesn&#8217;t work with C files, that&#8217;s the problem.</p>
<p>Also, you have the same problem if you want to program in C++ with MinGW, which doesn&#8217;t support #import either.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-764183">
				<div id="div-comment-764183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">El Guapo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764183">
			August 24, 2009 at 10:57 pm</a>		</div>

		<p>I&#8217;m pretty sure he was asking about the *API* and not the language.</p>
<p>Interesting that you wrote an entire article on what is essentially a gigantic &#8220;Nitpicker&#8217;s Corner&#8221; of your own!!!!</p>
<div class=post>[<i>The API doesn&#8217;t know what language your program is written in either. (Not sure what the difference is between &#8220;the operating system&#8221; and &#8220;the API&#8221; here.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-764273">
				<div id="div-comment-764273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764273">
			August 25, 2009 at 6:05 am</a>		</div>

		<p>@Gabe: far from some other language being required for Vista APIs, .NET code actually has to call an unmanaged entry point to create &#8216;glass&#8217; areas of a window: DwmExtendFrameIntoClientArea.</p>
<p>The new &#8216;big buttons&#8217; dialog boxes are created with the (C-style) TaskDialog function, or TaskDialogIndirect.</p>
<p>The newest &#8216;open file&#8217; and &#8216;save file&#8217; dialogs are COM-based, however.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-764283">
				<div id="div-comment-764283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jeffstong.blogspot.com/' rel='external nofollow' class='url'>Jeff Stong</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764283">
			August 25, 2009 at 9:17 am</a>		</div>

		<p>I once worked on a project with a mandate that Ada be the programming language used for most of the code. &nbsp;We were able to create data types in Ada that looked like the COM object layout. &nbsp;The Ada code was then called from MFC-based user interface code using COM. &nbsp;By the time the code hit the CPU it didn&#8217;t matter that the application was a weird mix of C++ and Ada.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-764293">
				<div id="div-comment-764293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764293">
			August 25, 2009 at 9:40 am</a>		</div>

		<p>What about if/when .NET is used for the API being called? Can C directly call code in .Net assemblies? All the examples I could find involve a C++/CLR wrapper that exposes an unmanaged interface being used.</p>
<p>I appreciate that it must be technically possible &#8211; but is it feasible?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-764303">
				<div id="div-comment-764303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764303">
			August 25, 2009 at 9:45 am</a>		</div>

		<p>@Joe</p>
<p>You could use the hosting (COM) API to host the CLR in your application, load the relevant assemblies and call their code.</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms404385.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms404385.aspx</a></p>
<p>It seems unnecessarily painful though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-764343">
				<div id="div-comment-764343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764343">
			August 25, 2009 at 10:18 am</a>		</div>

		<p>@Joe, @Sunil Joshi: If I remember correctly, if a .Net assembly is COM-Visible, it can be called directly from an unmanaged application via COM, without having to call the hosting API from the client code (the hosting API is called by the COM infrastructure itself).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-764443">
				<div id="div-comment-764443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jasondoucette.com' rel='external nofollow' class='url'>Jason Doucette</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764443">
			August 25, 2009 at 12:46 pm</a>		</div>

		<p>Great article!</p>
<blockquote><p>
  &quot;&#8230;because once the compiler is done doing its thing, the identity of the source language is long gone.&quot;
</p></blockquote>
<p>(Nit-pick Warning:) I&#8217;d say this isn&#8217;t the case. &nbsp;It reminds me of a newsgroup war over what language Doom was written in. &nbsp;Anyone reasonable knowledgeable could easily tell it was written in C via the .exe, without even disassembling it.</p>
<p>However I get the point: &nbsp;It&#8217;s all machine code after the compiler is done (well, at least IL code in the case of .NET; which is pretty much the same thing). &nbsp;Neat concept really.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-764503">
				<div id="div-comment-764503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">What?</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764503">
			August 25, 2009 at 4:56 pm</a>		</div>

		<p>I&#8217;m surprised you attempted to answer this. &nbsp;</p>
<p>I read the question about 10 times and still don&#8217;t have even a guess as to what Will is asking. &nbsp; I would say the degree to which the code works under Vista is the same as XP &#8211; very well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-764523">
				<div id="div-comment-764523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.cypherjb.com/blog/' rel='external nofollow' class='url'>Cypherjb</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764523">
			August 25, 2009 at 6:43 pm</a>		</div>

		<p>Whilst I get the idea of what you&#8217;re saying, it&#8217;s not entirely accurate.</p>
<p>Although the CPU can&#8217;t &#8216;tell the difference&#8217; it&#8217;s very easy to fire up a disassembler and take a look for yourself. </p>
<p>Code output by a Delphi compiler looks different to that output by a C++ compiler, which looks different again to that output by a C compiler, and different again to that output by an assembler.</p>
<p>Just because they all end up at the same level at the end doesn&#8217;t mean that &#8220;the identity of the source language is long gone&#8221;. It still continues to linger.</p>
<div class=post>[<i>The identity is gone. There is no &#8220;This was originally Delphi&#8221; bit in the code stream. You can attempt to reverse-engineer the most likely language by inspecting the code style, but it&#8217;s not foolproof. (I could always write a program in assembly that &#8220;looks like&#8221; Delphi.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-764533">
				<div id="div-comment-764533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.cypherjb.com/blog/' rel='external nofollow' class='url'>Cypherjb</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764533">
			August 25, 2009 at 7:18 pm</a>		</div>

		<p>I guess it depends on what you define as the &#8216;identity&#8217;. I would say that because the original language can usually be identified under normal circumstances that at least some &#8216;identity&#8217; continues to linger.</p>
<p>Of course someone could go to the trouble of &#8216;faking&#8217; the language, but even you have to admit seeing that in the wild would be very unlikely.</p>
<p>My point was not that it was foolproof (naturally, there is lots of information that is unknown to you when disassembling a piece of software), but rather, that under normal circumstances there is still information left over that can identify the language in which the software was written.</p>
<div class=post>[<i>While it&#8217;s true that a human being can determine the likely source language by examining the code&#8217;s style, this is not something the operating system knows anything about. It&#8217;s just code. (It&#8217;s like saying &#8220;These essays were submitted anonymously [identities removed], but if you study the writing style, you can figure out who wrote each one.&#8221; Yeah, but that doesn&#8217;t deny that the identities were removed. Now you&#8217;re doing forensics.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-764543">
				<div id="div-comment-764543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shinobu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764543">
			August 25, 2009 at 7:52 pm</a>		</div>

		<p>Jim, I&#8217;ve actually found Wine quite useful when I couldn&#8217;t figure out how to use some set of functions using just the SDK.</p>
<p>For those who use MinGW who have mangling issues, the killat flag can help fix that in certain scenarios.</p>
<p>Also, I think Raymond&#8217;s point was not whether you could in principle determine with a certain amount of certainty what the original language was (if it was VB you will spot the pcode) but that when the code is running, it&#8217;s all machine code, no matter what compiler (or even interpreter, after all even interpreters have to execute corresponding machine code at some point) was used.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-764743">
				<div id="div-comment-764743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.cypherjb.com/blog/' rel='external nofollow' class='url'>Cypherjb</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764743">
			August 26, 2009 at 12:03 pm</a>		</div>

		<p>Well, if you want to take the stance that you&#8217;re talking about the CPU not knowing the difference, not humans, that&#8217;s something different entirely.</p>
<p>Of course the CPU will be indifferent, it&#8217;s a machine. ;)</p>
<p>I get what you&#8217;re saying though. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-764753">
				<div id="div-comment-764753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">seesharp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764753">
			August 26, 2009 at 12:28 pm</a>		</div>

		<p>The CPU doesn&#8217;t know the program is compiled from C-code. It doesn&#8217;t help if the pe/coff format would have had a &quot;original programming language&quot;-property or even if you try to send the string &quot;this program is compiled from C-code&quot; into the cpu. The cpu cannot understand such attributes. It lacks the ability to be able to know such things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-764883">
				<div id="div-comment-764883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764883">
			August 26, 2009 at 6:47 pm</a>		</div>

		<p>As others have pointed out, the original question sounds like they were talking about the library support, not the language itself. &nbsp;(It&#8217;s more complicated to write a Windows app in plain C because there are less libraries like MFC/WTL available.)</p>
<p>And regarding calling into .NET code from native code: by far the simplest way is to write a mixed-mode C++ &quot;wrapper&quot; (either directly in the app or in a DLL). &nbsp;You can pretty much just call the .NET code directly then; the compiler sorts out the details for you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-764983">
				<div id="div-comment-764983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">quick fix</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-764983">
			August 27, 2009 at 4:34 am</a>		</div>

		<p>The only way to fix this is if the compiler manufacturers embedded some kind of crypto certificate manifest in executable files/libraries (and checksum signed the file also), which the OS have to read and confirm which compiler was used. Then the OS can alter the code for whatever reason. This is currently not supported, a flaw.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-765203">
				<div id="div-comment-765203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-765203">
			August 28, 2009 at 3:34 am</a>		</div>

		<p>The question really was about getting &#8220;native look and feel&#8221; in unmanaged code with maybe some new, but old-style, API (i.e. Win64).</p>
<p>With the .NET hype, one may think that WPF + a managed Microsoft language is required to make applications benefit from voice recognition, nice transparency effects in windows, and everything new in Vista, making MinGW and non-Microsoft C language implementations unable to access those extra features.</p>
<p>Analogically, one can say that the MS-DOS &#8220;int 21h&#8221; API was well supported in Windows 95, and even had been extended but would produce applications with non-native look &amp; feel (e.g. no Win32-like GUI support).</p>
<div class=post>[<i>Imagine if only WPF applications got &#8220;native look and feel&#8221;. How many applications would have native look and feel? (What about Explorer?) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-765243">
				<div id="div-comment-765243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090824-00/?p=17023#comment-765243">
			August 28, 2009 at 11:10 am</a>		</div>

		<p>&quot;Imagine if only WPF applications got &quot;native look and feel&quot;. How many applications would have native look and feel? (What about Explorer?)&quot;</p>
<p>I know that the answer obviously is &quot;yes, you can get a native look &amp; feel with the Win64 or Win32 API&quot;, but, at least, the question makes some sense.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

