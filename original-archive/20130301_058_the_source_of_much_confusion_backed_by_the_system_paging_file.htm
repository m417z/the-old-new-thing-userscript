<html>
<head>
<title>The source of much confusion: "backed by the system paging file"</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The source of much confusion: &quot;backed by the system paging file&quot;</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 1, 2013 / year-entry #59</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>42</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Perhaps one of the most misunderstood sentences in the Win32 documentation is this little bit in the documentation for Create­File­Mapping: If hFile is INVALID_HANDLE_VALUE, the calling process must also specify a size for the file mapping object in the dwMaximum­Size­High and dwMaximum­Size­Low parameters. In this scenario, Create­File­Mapping creates a file mapping object of a specified...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Perhaps one of the most misunderstood sentences in the Win32 documentation is this little bit in <a href="http://msdn.microsoft.com/library/aa366537(v=vs.85).aspx"> the documentation for <code>Create&shy;File&shy;Mapping</code></a>:</p>
<blockquote class="q"><p> If <i>hFile</i> is <b>INVALID_<wbr>HANDLE_<wbr>VALUE</wbr></wbr></b>, the calling process must also specify a size for the file mapping object in the <i>dwMaximum&shy;Size&shy;High</i> and <i>dwMaximum&shy;Size&shy;Low</i> parameters. In this scenario, <b>Create&shy;File&shy;Mapping</b> creates a file mapping object of a specified size that is <u>backed by the system paging file instead of by a file in the file system</u>. </p>
</blockquote>
<p> When people read the underlined portion, they interpret this to mean "The data in the file mapping object <a href="http://blogs.msdn.com/oldnewthing/archive/2009/07/06/9818299.aspx#9829063"> will be written to the system paging file</a>." But that's not what it says. It says that it is <i>backed by</i> the system paging file. In other words, "If I need to page this memory out, I will store it in the system paging file." </p>
<p> Note the word "if". </p>
<p> Usually, people get all worked up about the description because "I don't want this data to be written to disk by the creator, and then read from the disk by the consumer. I want this to be stored in RAM, just like the memory I allocate with <code>Heap&shy;Allocate</code> or <code>Virtual&shy;Alloc</code>." Of course, what they didn't realize is that memory allocated with <code>Heap&shy;Allocate</code> and <code>Virtual&shy;Alloc</code> is <i>also</i> backed by the system paging file. If memory allocated by <code>Heap&shy;Allocate</code> and <code>Virtual&shy;Alloc</code> needs to be paged out, the memory manager will write it to the paging file. </p>
<p> In other words, "backed by the system paging file" just means "handled like regular virtual memory." </p>
<p> If the memory is freed before it ever gets paged out, then it will never get written to the system paging file. Just like you wanted. </p>
<p> The documentation was written with <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/05/12/10163578.aspx"> kernel-colored glasses</a>. They figured that you knew that paging file-backed memory was just a way of saying "normal pageable memory." </p>
<p> <b>Exercise</b>: What happens if paging is disabled? Where is the memory backed if there is no paging file? </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (42)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1042693">
				<div id="div-comment-1042693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042693">
			March 1, 2013 at 7:06 am</a>		</div>

		<p>If the paging file is switched off (or too small) then the CreateFileMapping would fail if there was not enough free ram to accommodate the request? &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1042703">
				<div id="div-comment-1042703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A. Skrobov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042703">
			March 1, 2013 at 7:06 am</a>		</div>

		<p>If there is no paging file, then the memory isn&#39;t backed up by anything, and you have to keep the pages resident in memory because there&#39;s nowhere to page them out to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1042713">
				<div id="div-comment-1042713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ajgelado_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>ajgelado@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042713">
			March 1, 2013 at 7:15 am</a>		</div>

		<p>I&#39;m with Skrobov: disabling paging means that all pages remain in physical RAM, of course with the exception of the ones corresponding to actual memory mapped files.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1042743">
				<div id="div-comment-1042743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042743">
			March 1, 2013 at 8:17 am</a>		</div>

		<p>[Exercise: What happens if paging is disabled? Where is the memory backed if there is no paging file?]</p>
<p>If there is no pagefile for some reason or another, then RAM is backed by itself. If there&#39;s not enough RAM than allocations fail. I believe that Windows is strict in that regard that all there will be enough RAM + page to always meet allocated regions except for PAGE_*_WRITECOPY (which faults if it can&#39;t allocate). You can&#39;t really turn off paging as all loaded images are pagefiles (as much as I&#39;d like it to be the case that a specific EXE is not locked while running there&#39;s no way to do that).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1042753">
				<div id="div-comment-1042753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dennis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042753">
			March 1, 2013 at 8:25 am</a>		</div>

		<p>&quot;(as much as I&#39;d like it to be the case that a specific EXE is not locked while running there&#39;s no way to do that).&quot;</p>
<p>You mean there is no way currently to do that in Windows &#8212; there are most certainly ways that it could be done, as other OSes have proved it possible. &nbsp;One way to do it would be to use reference counting to keep the mapped image backed by the same contents, even though the file system now points at new contents. &nbsp;And then as soon as the EXE is closed, the reference count would go to 0 and the old contents would be deallocated.</p>
<p>I assume it works the way it does in Windows because of limitations in older filesystems &#8212; though it would be nice if at least for EXEs on reasonably modern filesystems (like NTFS), we could overwrite EXE files even while open.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1042763">
				<div id="div-comment-1042763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MarkV</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042763">
			March 1, 2013 at 8:36 am</a>		</div>

		<p>You can&#39;t overwrite an EXE file while it&#39;s open, but you can do the next best thing: if you rename the file (yes, you can rename am EXE or DLL while it&#39;s running) then you can write out a new one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1042783">
				<div id="div-comment-1042783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CherryDT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042783">
			March 1, 2013 at 8:47 am</a>		</div>

		<p>I don&#39;t think that images are just mapped to memory like memory mapped files, because you can write to images in memory without consecutively altering the file on disk (or in any other processes where the same image is loaded).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1042793">
				<div id="div-comment-1042793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris B</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042793">
			March 1, 2013 at 8:52 am</a>		</div>

		<p>Where is the memory backed if there is no paging file?</p>
<p>In the cloud!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1042803">
				<div id="div-comment-1042803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042803">
			March 1, 2013 at 9:12 am</a>		</div>

		<p>@CherryDT: It could use copy on write.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1042823">
				<div id="div-comment-1042823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042823">
			March 1, 2013 at 9:46 am</a>		</div>

		<p>@dennis:</p>
<p>IIRC exe being locked is side effect of old memory saving measures, so executable can be paged out from memory in case or low free memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1042833">
				<div id="div-comment-1042833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042833">
			March 1, 2013 at 10:34 am</a>		</div>

		<p>@Ray: &quot;Usually, people get all worked up about the description because&#8230;&quot;. What people? The mechanism of paging is a long established one. This is so ancient and behaves the same way that none I know would be worked up about that sentences. And as others already said, if user defines &quot;no paging&quot; then you either create the memory mapped file and keep using it or you fail at Create&shy;File&shy;Mapping.</p>
<p>@MarkV: &quot;You can&#39;t overwrite an EXE file while it&#39;s open&#8230;&quot;. Are you sure? Are you betting money on that sentence? Use Google for &quot;unlocker&quot;, a little free utility then talk again. Given enough rights you can do anything. Log in as Admin and you can overwrite entire memory, including kernel and if you want to have fun, with current systems of plenty of RAM, you can replace Windows with a Linux that has everything it needs in memory. Heck, you can even read entire memory, write it to disk (hibernate style so far), load the Linux, show you have Linux to your friends (little bragging), and when they left reload Windows from disk to continue your work.</p>
<div class="post">[<em>You&#39;d be surprised how many people ask, &quot;I want to create shared memory, but I don&#39;t want to use CreateFileMapping because I don&#39;t want the overhead of one process writing the data to disk, then the other process reading it in. What is the version of CreateFileMapping that just shares the memory directly rather than going through the pagefile?&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1042843">
				<div id="div-comment-1042843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042843">
			March 1, 2013 at 10:38 am</a>		</div>

		<p>@CherryDT: They are in fact mapped into memory EXACTLY like memory mapped files, in that both are mapped into your address space via NtMapViewOfSection. There&#39;s a minor difference in that executable sections get magic extra parsing in the kernel to map their sections and ASLR the image, but in terms of how memory gets back to disk, it&#39;s the same.</p>
<p>All of the pages in an EXE are copy-on-write unless you map it as PAGE_READWRITE (although WTF you&#39;d do that is beyond me), so when you write to that page, you copy the page and that page is now backed by the pagefile instead of the image on disk.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1042853">
				<div id="div-comment-1042853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042853">
			March 1, 2013 at 10:40 am</a>		</div>

		<p>@dennis, klimax</p>
<p>You can&#39;t <em>write</em> to a running executable on Unix, either, because they do the same thing and have done since the 70s. The relevant errno is ETXTBSY. Being able to delete it doesn&#39;t <em>really</em> delete the file, and I suspect that the reason that executables aren&#39;t opened with SHARE_DELETE is the same reason nothing else is: backwards compatibility.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1042863">
				<div id="div-comment-1042863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042863">
			March 1, 2013 at 10:59 am</a>		</div>

		<p>@Danny: &quot;what people?&quot;</p>
<p>Probably the same people who think &quot;virtual memory&quot; means &quot;disk&quot; and who think that user-mode programs &quot;allocate RAM&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1042883">
				<div id="div-comment-1042883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042883">
			March 1, 2013 at 11:40 am</a>		</div>

		<p>&quot;What happens if paging is disabled? Where is the memory backed if there is no paging file?&quot;</p>
<p>It&#39;s backed by the full faith and credit of the United States Government.</p>
<p>Zing!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1042893">
				<div id="div-comment-1042893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042893">
			March 1, 2013 at 11:55 am</a>		</div>

		<p>@Danny: &quot;You can&#39;t overwrite an EXE file while it&#39;s open&#8230;&quot;. Are you sure? Are you betting money on that sentence? &nbsp;&lt;tangent&gt;</p>
<p>Obviously this was meant in terms of operations logically supported by the system. &nbsp;Modifying internal state of other processes or the kernel is generally not advisable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1042913">
				<div id="div-comment-1042913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042913">
			March 1, 2013 at 12:37 pm</a>		</div>

		<p>@John: Obviously, but one is what the system suppose to do and else what you can do once inside having full power. Think malware &#8211; do you really think the people behind those care what the system is suppose to do? They will close your opened handles, read your data and generally piss in every corner of your computer because they CAN.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1042933">
				<div id="div-comment-1042933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042933">
			March 1, 2013 at 1:30 pm</a>		</div>

		<p>It&#39;s interesting that Windows NT has a distinction between VirtualAlloc and CreateFileMappingW(INVALID_HANDLE_VALUE) at all. &nbsp;You could build an entire memory management system on anonymous pagefile-backed section objects rather than VirtualAlloc. &nbsp;In fact, that&#39;s what Linux does.</p>
<p>I&#39;ve been told that the reason is that NT&#39;s section objects have more kernel overhead than private memory allocations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1042943">
				<div id="div-comment-1042943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042943">
			March 1, 2013 at 2:15 pm</a>		</div>

		<p>There&#39;re also programmers myth caused by that MSDN&#39;s pharse. I saw some people that believe that disabling pagefile causes CreateFIleMapping(INVALID_HANDLE_VALUE..) to fail.</p>
<p>BTW my observation: if system has lot of RAM. Really lot of RAM so you think that it doesnt need even be bothered by managing swap &#8211; its beter to disable it completely than set it size &quot;minimal&quot;. Somewhy settings size to just small causes strange bugs and failures to allocate VM while there&#39;is lot of RAM. It seems that if VMM works with swap enabled &#8211; i assumes that it always can allocate a swap space, an even if it really has a space in RAM, ut anyway if it decided o put something to swap and it FAILED &#8211; then it goes into some kind of panic frustraion. If swap is disabled &#8211; then it really uses RAM while there&#39;is enough space to to all commited pages that not backed FS (file mappings and images).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1042953">
				<div id="div-comment-1042953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Silly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042953">
			March 1, 2013 at 3:27 pm</a>		</div>

		<p>Killer{R} &#8211; &quot;MSDN&#39;s pharse&quot; Haha (farce)</p>
<blockquote><p>
  What happens if paging is disabled? Where is the memory backed if there is no paging file?
</p></blockquote>
<p>It gets backed to msdn man and blog pages. This has a huge performance and potential security issues, but little impact on overall readablity. /joking</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043003">
				<div id="div-comment-1043003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043003">
			March 1, 2013 at 6:20 pm</a>		</div>

		<p>@Killer{R}: Ever create a ramdrive and a pagefile on it? The system will page to it. It turns out with the right drivers the ramdrive can be created above the 4GB barrier on 32 bit Windows, which allows consumer grade Windows to make some use (turns out to be quite a bit) of the extra RAM.</p>
<p>Just don&#39;t turn on paging to ramdrive and hibernate at the same time. That combination is incompatible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1043013">
				<div id="div-comment-1043013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043013">
			March 1, 2013 at 6:55 pm</a>		</div>

		<p>@Myria: If Linux truly uses sections underneath its heaps then that sounds like such a waste, especially when sections are essentially a fat layer over a VirtualAlloc-like primitive. But then again we ARE talking about the Model T equivalent of desktop OS kernels which used to hardcode the process limit and had a global kernel mode lock. Linux = eww gross</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043023">
				<div id="div-comment-1043023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043023">
			March 1, 2013 at 6:59 pm</a>		</div>

		<p>@Joshua: If you&#39;re running a 32-bit OS on a device that has more than 4GB of RAM, and then installing unsupported drivers such as a RAM disk to copy memory between &lt; 4GB to &gt; 4GB, then You&#39;re Doing It Wrong(TM).</p>
<p>Use x64 like a normal person. In fact, Breaching The 4GB RAM Limit Is The Primary Reason To Run 64-bit OSes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1043033">
				<div id="div-comment-1043033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">immibis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043033">
			March 1, 2013 at 7:02 pm</a>		</div>

		<p>Nitpicky comment: You can&#39;t turn off paging, unless you want every process to run in the same address space.</p>
<p>Nitpicky comment to nitpicky comment: Unless you&#39;re using segmentation, which no modern OS uses, and which doesn&#39;t exist on x86-64.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1042873">
				<div id="div-comment-1042873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1042873">
			March 1, 2013 at 11:11 am</a>		</div>

		<p>&quot;[You&#39;d be surprised how many people ask &#8230;&quot;</p>
<p>I doubt it, actually. One of the hazards of listening to customers is that your dataset is skewed towards customers who don&#39;t understand, don&#39;t like, or don&#39;t think before pushing &quot;Send&quot;. Nevertheless, I suspect that the *proportion* of programmers who are confused by the wording is rather small.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1043053">
				<div id="div-comment-1043053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043053">
			March 2, 2013 at 12:46 am</a>		</div>

		<p>Nitpicky comment x 3: Paging != MMU. You can have separate MMU tables for each process without having a page file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043063">
				<div id="div-comment-1043063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043063">
			March 2, 2013 at 7:35 am</a>		</div>

		<p>@immibis:</p>
<p>How would that work? Leaving aside the fact that protected mode means seperate virtual address spaces for each process, just think about the fact that the standard executable base address is 0x400000 for 32 bit processes, I think it is 0x140000000 for 64 bit processes. So if you think about it, all .exe files will try to load in at the same address (or close to each other if you take ASLR into account) and will overwrite each other. So no, the system relies on the concept that each user mode process has its own address space.</p>
<div class="post">[<em>It&#39;s just confusion over terminology. immibis means &quot;paging&quot; to mean &quot;virtual memory via page tables&quot;, whereas you (and I, and Wikipedia) mean &quot;paging&quot; to mean more specifically &quot;offloading RAM into secondary storage.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1043073">
				<div id="div-comment-1043073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043073">
			March 2, 2013 at 8:29 am</a>		</div>

		<p>@Matt: Would you like to try your hand at obtaining 64 bit fixes for multiple accessibility issues. I have been abusing the pachability of 32 bit linkage on my workstation to fix accessibility bugs. (None of these get shipped anywhere). If I could get a 32 bit EE build of Windows Server 2008 R2 (not shipped), I&#39;d use that (32 bit EE uses all the RAM on the system).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043083">
				<div id="div-comment-1043083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Blahblah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043083">
			March 2, 2013 at 8:38 am</a>		</div>

		<p>Long-time readers of this blog will know this isn&#39;t the first time a MSDN article is deemed by Raymond as &quot;inaccurate&quot;, &quot;prone to confusion&quot;, etc. My question is&#8230; why don&#39;t you fix it? And by &quot;you&quot; I don&#39;t mean Raymond, but Microsoft&#8230;</p>
<div class="post">[<em>It&#39;s not like there is somebody whose job it is to read all the documentation looking for inaccurate or prone-to-confusion parts. (For one thing, just one person is not physically capable of keeping up with all of MSDN. And second, if you&#39;re too close to a document, you can&#39;t see how it could be confusing to others.) Somebody has to point it out first. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1043043">
				<div id="div-comment-1043043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdbsd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043043">
			March 2, 2013 at 12:44 am</a>		</div>

		<p>@Ken Hagan&gt; Nevertheless, I suspect that the *proportion* of programmers who are confused by the wording is rather small.</p>
<p>I&#39;ve even had someone tell me not to disable page file because file mapping will not work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043093">
				<div id="div-comment-1043093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043093">
			March 2, 2013 at 12:04 pm</a>		</div>

		<p>It&#39;s easy to overwrite the content of a running exe, just start it from (virtual) removable media or a (virtual) file share.</p>
<p>The file system can&#39;t guarantee anything.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1043103">
				<div id="div-comment-1043103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">4gb is enough f&#246;r everyone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043103">
			March 2, 2013 at 12:21 pm</a>		</div>

		<p>@Matt: x86 CPUs supported &gt;4gb years (decades?) before x86-64 was avalable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043143">
				<div id="div-comment-1043143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">f0dder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043143">
			March 2, 2013 at 1:46 pm</a>		</div>

		<p>&quot;4gb is enough&quot; &#8211; sure, we&#39;ve had PAE since the Pentium Pro (1995)&#8230; but that&#39;s still an address space of 4GB, which is a lot less convenient than x64 Long Mode (introduced with Opteron in 2003 &#8211; so, yeah, almost a decade).</p>
<p>One thing is convenience, though, but I wonder if anybody has looked at performance of Long Mode address space versus having to re-map a 32bit window into the PAE address space. The required ring3&lt;&gt;ring0 switch and TLB flush has non-zero cost :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1043153">
				<div id="div-comment-1043153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">4gig</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043153">
			March 2, 2013 at 3:15 pm</a>		</div>

		<p>People start to misunderatand when you are talking about FILES, without meaning &quot;things you can click on in explorer and open with an app&quot;. Don&#39;t use the word FILE if it&#39;s not a regular file in the filesystem. Call it something else, because it IS something else.</p>
<p>To allocate shared memory with an API called CreateFileMapping is stupid. You should have called it AllocateSharedMemory instead.</p>
<p>@f0dder: For almost a decade, before x86-64, there was no choice of convenience, there was only the choice of using all memory or not. And the only way windows supported using &gt;4gb was through pae or similar non-conveniece.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043163">
				<div id="div-comment-1043163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043163">
			March 2, 2013 at 11:03 pm</a>		</div>

		<p>@4gig: I rather they called it CreateSection. You&#39;re forgetting that there&#39;s a companion function MapViewOfFile which breathes life into CreateFileMapping, and has no necessary link to sharing memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1043173">
				<div id="div-comment-1043173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jehokim_4000_live.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>jehokim@live.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043173">
			March 3, 2013 at 5:12 am</a>		</div>

		<p>@Raymond: So what is the exact answer for you exercise? I always wanted to know that.</p>
<p>Though, even in user-mode, we could alloc the memory at non-paged pool to prevent page-out by VirtualLock. Couldn&#39;t we?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043193">
				<div id="div-comment-1043193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043193">
			March 3, 2013 at 11:37 am</a>		</div>

		<p>@Jeho Kim</p>
<p>The exact answer has been given already. It is backed by nothing (or still the system page file which has a size of 0).</p>
<p>The line &quot;In other words, &quot;backed by the system paging file&quot; just means &quot;handled like regular virtual memory.&quot;&quot; basically says that the pages you get from CreateFileMapping with the file handle set to INVALID_HANDLE_VALUE work exactly like the pages that you get from VirtualAlloc, and the Windows memory manager uses this as the basis for the heaps, meaning that this is how the memory you normally use in a program that you write acts.</p>
<p>The CreateFileMapping/MapViewOfFile function names imply something here that isn&#39;t true. Windows only guarantees that the contents of memory is written to disk when you use a valid file handle in CreateFileMapping. So this is one of those situations where the function name wasn&#39;t the best choice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1043203">
				<div id="div-comment-1043203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wombat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043203">
			March 3, 2013 at 3:13 pm</a>		</div>

		<p>#Klimax</p>
<p>You said &quot;IIRC exe being locked is side effect of old memory saving measures, so executable can be paged out from memory in case or low free memory.&quot;</p>
<p>That&#39;s not quite true. The executable doesn&#39;t get paged out &#8211; its pages get discarded, and reloaded from the original file when referenced again. That&#39;s why the code has to be read-only.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043223">
				<div id="div-comment-1043223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043223">
			March 4, 2013 at 12:03 am</a>		</div>

		<p>&quot;That&#39;s not quite true. The executable doesn&#39;t get paged out &#8211; its pages get discarded, and reloaded from the original file when referenced again. That&#39;s why the code has to be read-only.&quot;</p>
<p>Paegs that were modified &#8211; are paged out to page file. Pages that were not modified &#8211; are not. The actual protection of pages doesnt matter, its only mean if page <em>can</em> be modified and for pages of image view can be easily changed by VirtualProtect from readonly to copy-on-write and back.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1043453">
				<div id="div-comment-1043453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward #329</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043453">
			March 4, 2013 at 1:00 pm</a>		</div>

		<p>@Random832</p>
<p>Linux, altrough it blocks writing to executable files with ETXTBUSY, does not block writing to libraries: e.g.</p>
<p>$ sudo dd if=/dev/zero of=/lib/i686/cmov/libc.so.6</p>
<p>[ &nbsp;311.941962] Kernel panic &#8211; not syncing: Attempted to kill init!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1043343">
				<div id="div-comment-1043343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1043343">
			March 4, 2013 at 8:56 am</a>		</div>

		<p>@Blahblah: As a long-time reader, I get the impression that Raymond generally *does* ask that the MSDN pages be updated, when he happens to find those pages that are written incorrectly or confusingly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1044063">
				<div id="div-comment-1044063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dennis (not the one above)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130301-00/?p=5093#comment-1044063">
			March 7, 2013 at 11:24 pm</a>		</div>

		<blockquote><p>
  Exercise: What happens if paging is disabled? Where is the memory backed if there is no paging file?
</p></blockquote>
<p>The hibernate file?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

