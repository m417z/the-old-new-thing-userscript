<html>
<head>
<title>Why is it possible to create a toolbar with the wrong HINSTANCE? And what's the right HINSTANCE anyway?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why is it possible to create a toolbar with the wrong HINSTANCE? And what&#8217;s the right HINSTANCE anyway?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 14, 2012 / year-entry #292</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20121214-00/?p=5833</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer observed that all of the following code fragments are successful in creating a toolbar common control: // Fragment 1: Use the process instance // Create the toolbar. HWND hWndToolbar = CreateWindowEx( 0, TOOLBARCLASSNAME, NULL, WS_CHILD | TBSTYLE_WRAPABLE, 0, 0, 0, 0, hWndParent, NULL, g_hInst, NULL); // Fragment 2: Use the comctl32 instance //...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer observed that all of the following code fragments
are successful in creating a toolbar common control:
</p>
<pre>
// <a HREF="http://msdn.microsoft.com/en-us/library/hh298381.aspx">Fragment 1</a>: Use the process instance
    // Create the toolbar.
    HWND hWndToolbar = CreateWindowEx(
        0, TOOLBARCLASSNAME, NULL,
        WS_CHILD | TBSTYLE_WRAPABLE, 0, 0, 0, 0,
        hWndParent, NULL, g_hInst, NULL);
</pre>
<pre>
// <a HREF="http://msdn.microsoft.com/en-us/library/hh298391.aspx">Fragment 2</a>: Use the comctl32 instance
    // Create the toolbar.
    HWND hWndToolbar = CreateWindowEx(
        0, TOOLBARCLASSNAME, L"Toolbar", 
        WS_CHILD | WS_VISIBLE | WS_BORDER,
        0, 0, 0, 0,
        hWndParent, NULL, HINST_COMMCTRL, NULL);
</pre>
<pre>
// Fragment 3: Use NULL!
    // Create the toolbar.
    HWND hWndToolbar = CreateWindowEx(
        0, TOOLBARCLASSNAME, NULL,
        WS_CHILD | WS_VISIBLE, 0, 0, 0, 0,
        hWndParent, NULL, NULL, NULL);
</pre>
<p>
Furthermore, the customer observed that
<code>Get&shy;Class&shy;Info(hinst, TOOLBAR&shy;CLASS&shy;NAME, &amp;wc)</code>
works regardless of whether you pass
the process instance or <code>NULL</code> for the <code>hinst</code> parameter.
</p>
<p>
First of all, what's going on?
And second of all, which of the three methods above is most correct?
</p>
<p>
We can dispatch Fragment&shy;3 easily, because passing
<code>NULL</code> as the instance handle is equivalent
to passing the process instance handle.
Therefore, whatever happens in Fragment&shy;3 is explained by whatever
happens in Fragment&nbsp;1.
(Treating a <code>NULL</code> instance as a synonym for
the process instance is a leftover behavior from 16-bit Windows,
so I'm going to declare it a workaround for
sloppy programming rather than a recommended practice.
If you are doing this from the process module itself, then you already
have your instance handle, so you should just use it.
And if you are doing this from a DLL, then stop doing it,
because you're messing with with somebody else's namespace.)
</p>
<p>
The behavior of Fragment&nbsp;2 is easy to explain:
The class is registered against the <code>comctl32</code>
library, so naturally, if you create it from that library,
you'll get the class.
</p>
<p>
The last case is Fragment&nbsp;1:
Even though we passed the wrong instance handle, we still got
the control from <code>comctl32</code>.
We saw the explanation for this
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2005/04/18/409205.aspx">
some time ago</a>:
In order to allow the common controls classes to be used
in dialog templates,
they are registered as
<code>CS_<wbr>GLOBAL&shy;CLASS</code>.
One could argue that this is the recommended way of creating the window,
since it allows your application to superclass a common control
by registering a private class with the same name in its own namespace.
Only if a custom version is not found in the provided instance
is the list of global classes consulted.
(I'm not saying that <i>I'm</i> arguing that position,
just that it is a valid position.)
</p>
<p>
Okay, so the mystery of the instance handle has been solved.
But why does
<code>Get&shy;Class&shy;Info</code> return the class
even when it's registered against some other instance?
</p>
<p>
Because it found the class!
<code>Get&shy;Class&shy;Info</code> uses the same search algorithm
that <code>Create&shy;Window</code> does,
and it tells you the class it ultimately found.
However, for compatibility reasons,
the <code>WNDCLASS.hInstance</code> member is (usually) a copy
of the <code>HINSTANCE</code> you passed to
<code>Get&shy;Class&shy;Info</code>,
regardless of where the class was ultimately found.
</p>
<p>
The reason for this is that some applications pull tricks like this:
</p>
<pre>
WNDCLASS wc;
GetClassInfo(hinstApp, "something", &amp;wc);
... edit the WNDCLASS structure ...
UnregisterClass("something", hinstApp);
RegisterClass(&amp;wc);
</pre>
<p>
Suppose that <code>something</code> is a global class
and suppose that the
<code>WNDCLASS.hInstance</code> were set to the instance
of the module that registered the global class.
The application then unregisters its private class
and registers what it thinks is a replacement private class.
But instead, it overwrites the global class.
</p>
<p>
Oops.
</p>
<p>
The compatibility fix for this is to return
<code>hinstApp</code>
in the <code>WNDCLASS.hInstance</code>
member.
That way,
these programs are tricked into registering a private class
rather than overwriting a global class.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1026093">
				<div id="div-comment-1026093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121214-00/?p=5833#comment-1026093">
			December 14, 2012 at 12:01 pm</a>		</div>

		<p>@Joshua: GetCurrentPeb()-&gt;ImageBaseAddress is the easiest way of locating an EXE from a Dll.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1026103">
				<div id="div-comment-1026103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121214-00/?p=5833#comment-1026103">
			December 14, 2012 at 12:02 pm</a>		</div>

		<p>Or the slightly more supported GetModuleHandle(NULL).</p>
<p>If it&#39;s so easy to do it right, there&#39;s no need to do it wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1026113">
				<div id="div-comment-1026113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121214-00/?p=5833#comment-1026113">
			December 14, 2012 at 12:57 pm</a>		</div>

		<p>@Matt: I used GetModuleFileName(NULL).</p>
<p>Oh wow the TEB and PEB are now at least partially documented. As far as I can tell they&#39;ve never changed within a build architecture of Windows NT (e.g i386 != amd64 != alpha but i386 3.1 = i386 =6.2).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1026073">
				<div id="div-comment-1026073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121214-00/?p=5833#comment-1026073">
			December 14, 2012 at 8:26 am</a>		</div>

		<p>[Treating a NULL instance as a synonym for the process instance is a leftover behavior from 16-bit Windows, so I&#39;m going to declare it a workaround for sloppy programming rather than a recommended practice.]</p>
<p>It&#39;s the easiest documented way to locate the calling EXE from a DLL (I&#39;m *not* doing this for a security check &#8212; I know that doesn&#39;t work).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1026133">
				<div id="div-comment-1026133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121214-00/?p=5833#comment-1026133">
			December 15, 2012 at 5:26 am</a>		</div>

		<p>@Joshua: The low bytes of the Peb and Teb are contractually set by Microsoft and won&#39;t change because too many people rely on stuff like the peb pointer in the Teb, the IsBeingDebugged value in the teb and the location of the NtTib structure in it.</p>
<p>The high bytes are uncontractual and not only can change between versions of Windows, but <em>DO</em> change between versions of Windows. That&#39;s why MSDN doesn&#39;t give you information about it (but WinDbg .reload; dt nt!_PEB .; will)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

