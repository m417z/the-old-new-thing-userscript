<html>
<head>
<title>The case of the DLL that refuses to load</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The case of the DLL that refuses to load</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 27, 2013 / year-entry #313</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20131127-00/?p=2553</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>17</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer reported that they had a problem that occurred only on some machines but not others. Their application called HINSTANCE hinst = LoadLibraryEx(strModule, LOAD_WITH_ALTERED_SEARCH_PATH); and the call succeeded on some machines, but failed on others with error ERROR_MOD_NOT_FOUND ("The specified module could not be found"). The path was a fully-qualified path to a file...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer reported that they had a problem that occurred
only on some machines but not others.
Their application called
</p>
<pre>
HINSTANCE hinst = LoadLibraryEx(strModule, LOAD_WITH_ALTERED_SEARCH_PATH);
</pre>
<p>
and the call succeeded on some machines, but failed on others
with error 
<code>ERROR_<wbr>MOD_<wbr>NOT_<wbr>FOUND</code>
("The specified module could not be found").
The path was a fully-qualified path to a file that 
was confirmed to exist and be readable.
</p>
<pre>
strModule = 0x09e875b4 "C:\Users\Bob\Desktop\CopyAndRun\Contoso.dll"
</pre>
<p>
If the <code>sxe ld Contoso.dll</code> command was used in the debugger
to break when the DLL loads,
the breakpoint does fire,
but a breakpoint on Contoso's <code>Dll&shy;Main</code> is never hit.
"I think this means that the problem is not that Contoso failed
to initialize,
but what <i>does</i> it mean?"
</p>
<p>
If you get a break from <code>sxeld</code> but no breakpoint on
<code>Dll&shy;Main</code>,
then it means that the DLL was found but couldn't be loaded.
You can use
<a HREF="http://msdn.microsoft.com/en-us/library/windows/hardware/ff556886(v=vs.85).aspx">
loader snaps</a>
will
<a HREF="http://blogs.msdn.com/b/junfeng/archive/2006/11/20/debugging-loadlibrary-failures.aspx">
tell you what went wrong</a>.
"My psychic powers tell me that a dependent DLL could not be found
or initialized."
</p>
<p>
The customer replied,
"Ah, of course. We'll look into that."
</p>
<p>
A short while later, they confirmed the diagnosis.
"The Contoso DLL was dependent on a version of the C runtime library
that was not installed on the machines where it failed to load.
But as a follow-up question:
I would have expected that the standard
<i>The program can't start because XYZ is missing from your computer.</i>
dialog to appear in this case.
Why isn't it?"
</p>
<p>
The reason is there in the error message:
The "missing file" error message is shown only when a program
cannot <i>start</i> due to a missing file.
Specifically, it is raised by the loader only during the initial
DLL resolution phase that occurs as part of process initialization.
These are the DLLs linked implicitly via the module header
because you linked against <code>kernel32.lib</code>, for example.
DLLs loaded explicitly via <code>Load&shy;Library</code> do not
display this error message;
instead, the error is returned back to the program,
where it is expected to take appropriate recovery steps.
By comparison,
if DLL resolution fails during process initialization,
there is nowhere to return the failure code.
You can't return it to the program since the program isn't running yet.
The only place to put the error is on the screen.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1091783">
				<div id="div-comment-1091783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131127-00/?p=2553#comment-1091783">
			November 27, 2013 at 7:50 am</a>		</div>

		<p>I use SysInternals ProcessMonitor utility to diagnose this sort of problem at least once a month. &nbsp; &nbsp; The last time it was the Oracle libraries needed a version of the MS C runtime that wasn&#39;t installed (in the path). &nbsp; </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1091793">
				<div id="div-comment-1091793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thorsten</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131127-00/?p=2553#comment-1091793">
			November 27, 2013 at 8:08 am</a>		</div>

		<p>Somewhat annoying is that when loader shows the &quot;missing file&quot; dialog during the initial loading of the application it uses internal knowledge that is simply not available when calling LoadLibrary.</p>
<p>If the start of the application fails because a DLL is missing that&#39;s 4 dependencies away from the application image, it still tells you exactly what file is missing. But if you call LoadLibrary and a DLL is missing that&#39;s 3 dependencies away from the the DLL you are trying to load, all you get is an error code telling you it couldn&#39;t load the DLL, not why. There probably should be a version of LoadLibrary that returns a more detailed description of the nature of the error than just an error code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1091833">
				<div id="div-comment-1091833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131127-00/?p=2553#comment-1091833">
			November 27, 2013 at 9:51 am</a>		</div>

		<p>Having just read the headline, my psychic debugging powers said the problem was that the program was a .Net executable compiled with AnyCPU that tries to load a 32-bit DLL. The systems where it fails would be 64-bit systems.</p>
<p>Are there any other likely scenarios that cause these symptoms?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1091883">
				<div id="div-comment-1091883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131127-00/?p=2553#comment-1091883">
			November 27, 2013 at 3:31 pm</a>		</div>

		<p>@Gabe: The needed version of the MS Visual C runtime is not installed, and the program was linked against it dynamically (with /MD key).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1091893">
				<div id="div-comment-1091893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131127-00/?p=2553#comment-1091893">
			November 27, 2013 at 6:42 pm</a>		</div>

		<p>I found it&#39;s easier to just run depwalk (the dependency walker) on the EXE to check all dependency at once. Of course it doesn&#39;t work for delay loaded libraries but it usually does do the work. And the best thing is it doesn&#39;t require much explanation on how it works, so a decent tool to ask junior collegues to carry when they&#39;re sent to site for on-site works.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1091923">
				<div id="div-comment-1091923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131127-00/?p=2553#comment-1091923">
			November 27, 2013 at 9:49 pm</a>		</div>

		<p>Joker_vD: As Raymond said, if your program is dynamically linked against a version of the CRT that isn&#39;t installed, you get an error dialog and your program won&#39;t even start.</p>
<p>In this case the program dynamically loaded a DLL that was linked against a version of the CRT that wasn&#39;t installed. The program started but got an error when it tried to load that DLL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1091943">
				<div id="div-comment-1091943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131127-00/?p=2553#comment-1091943">
			November 28, 2013 at 2:54 am</a>		</div>

		<p>@cheong00: I don&#39;t know about depwalk but depends.exe found a DLL loading issue for me quite recently. (A dependent DLL needed to be relinked when two DLLs it depended on were merged but I had skipped the relevant dependency checking.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1091953">
				<div id="div-comment-1091953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131127-00/?p=2553#comment-1091953">
			November 28, 2013 at 3:46 am</a>		</div>

		<p>@cheong00, Dependency Walker has a &quot;profiling&quot; feature that runs an executable and catches runtime library loading errors, so it&#39;s really the best tool.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1092023">
				<div id="div-comment-1092023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131127-00/?p=2553#comment-1092023">
			November 28, 2013 at 8:21 am</a>		</div>

		<p>@Thornsten: I fully agree.</p>
<p>A shame the loader doesn&#39;t maintain/expose a per-thread variable that could be used for such diagnostics, with a function such as GetLastModuleNotFound(LPTSTR, int)&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1092513">
				<div id="div-comment-1092513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Escaper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131127-00/?p=2553#comment-1092513">
			December 2, 2013 at 8:28 am</a>		</div>

		<p>Is it a legacy issue of the LoadLibrary function of sorts? It cannot use exceptions or something? If it can then what is preventing it from throwing an exception with name of the missing file specified in it all they way up to the process trying to load a library?</p>
<div class="post">[<em>So you&#39;re saying that everybody who calls LoadLibrary needs to wrap it inside a try/except? &quot;Why did Microsoft design the LoadLibrary function to raise errors two different ways <span style="text-decoration:underline;">simultaneously</span>? It raises an exception <span style="text-decoration:underline;">and</span> returns an error code. Worst of both worlds!&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1092693">
				<div id="div-comment-1092693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Escaper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131127-00/?p=2553#comment-1092693">
			December 3, 2013 at 7:31 am</a>		</div>

		<p>&gt; So you&#39;re saying that everybody who calls LoadLibrary needs to wrap it inside a try/except?</p>
<p>Whoever wants to handle the missing file exception should catch it, yes. Or am I missing something?</p>
<div class="post">[<em>And I presume that this means that LoadLibrary never returns NULL. I guess you could do that, though this breaks the general rule that in Win32, exceptions are used only for catastrophic failures (for the most part nonrecoverable). Also, it breaks backward compatibility with Win16, but I assume you knew that. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1092763">
				<div id="div-comment-1092763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131127-00/?p=2553#comment-1092763">
			December 3, 2013 at 10:22 am</a>		</div>

		<p>Presumably when Win32 came about with structured exception handling, they could have made a new version of LoadLibrary (LoadLibraryEx?) that throws exceptions instead of returning errors. Of course, if you&#39;re just going to introduce a new API, you can introduce a function called GetLoadLibraryLastError and then not even have to create a new contract.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1092773">
				<div id="div-comment-1092773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Escaper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131127-00/?p=2553#comment-1092773">
			December 3, 2013 at 10:24 am</a>		</div>

		<p>Failure to load a library (which is presumably required to run an application) does seem a bit catastrophic to me as a developer of the application. :) As for Win16, well, if I understand it right, it is old and not used extensively nowadays at all. Keeping backward compatibility has to have its limits so that (inefficient) legacy code does not impact modern development, I think. In any case, recently I tried to run some old 16-bit application on Windows 7 and it didn&#39;t start. So backward compatibility is already somewhat broken for old applications.</p>
<div class="post">[<em>I think you&#39;re missing the big picture. It&#39;s a <a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/09/02/224672.aspx">chain of compatibility</a>. Compatibility with Win16 is important to Windows NT 3.1. Compatibility with Windows NT 3.1 is important to Windows NT 4.0. Compatibility with Windows NT 4.0 is important to Windows 2000. And so on to the present day. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1092803">
				<div id="div-comment-1092803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Escaper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131127-00/?p=2553#comment-1092803">
			December 3, 2013 at 11:09 am</a>		</div>

		<p>&gt; &nbsp;And so on to the present day.</p>
<p>I understand. But this chain has to break at some points in time I believe. Otherwise having to adhere to this paradigm will hold new development back and make it less efficient. The example we just saw &#8211; a function not throwing exception when it&#39;s appropriate to do so because there were no exceptions mechanism the day the function has been written. What I am saying is sometimes it&#39;s worth abandoning something old in favor of letting something new evolve faster. But that&#39;s just my particular developer&#39;s view on it, I am far away from business prospective of all this stuff. :)</p>
<div class="post">[<em>Check out WinRT. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1092853">
				<div id="div-comment-1092853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131127-00/?p=2553#comment-1092853">
			December 3, 2013 at 12:02 pm</a>		</div>

		<p>&quot;The example we just saw &#8211; a function not throwing exception when it&#39;s appropriate to do so because there were no exceptions mechanism the day the function has been written.&quot;</p>
<p>Have you ever used streams from the STL of C++? I just love that when input/output on a stream fails, the stream becomes all sad and emotional and refuses to do anything unless you cheer it up with clear(). And of course, you technically can enable exceptions on streams — but that breaks such a huge amount of third-party library code that you definitely don&#39;t want to do it.</p>
<p>And the absense of any way to know what exactly went wrong whith that DLL is indeed quite stupid. Which reminds me of a related gotcha: if you start a console program with CREATE_NO_WINDOW, the &quot;The program can&#39;t start because XYZ is missing from your computer&quot; dialog won&#39;t appear. Amazing, isn&#39;t it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1092953">
				<div id="div-comment-1092953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131127-00/?p=2553#comment-1092953">
			December 3, 2013 at 10:42 pm</a>		</div>

		<p>Escaper: If a DLL is required to run an application, why would you call LoadLibrary on it? Your DLL would be implicitly linked and your app wouldn&#39;t start without it. You use LoadLibrary to enable optional functionality, whether a plug-in, a COM object, or perhaps to avoid paying for a feature until you know the user wants it.</p>
<p>I&#39;d hate to be unable to use some app just because a plug-in I don&#39;t even intend to use fails to load when the app initializes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1093043">
				<div id="div-comment-1093043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Escaper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131127-00/?p=2553#comment-1093043">
			December 4, 2013 at 6:24 am</a>		</div>

		<p>Gabe, ok, we could have two versions of the LoadLibrary following the well-known pattern: LoadLibrary throws an exception, while TryLoadLibrary returns a value. But that is not the point. The point is LoadLibrary could return name of the missing file one way or another. That would save a lot of time for a lot of people who are trying to find out what particular file is missing.</p>
<div class="post">[<em>This assumes that the only reason LoadLibrary could fail is a missing file. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

