<html>
<head>
<title>Scrollbars part 9 - Maintaining the metaphor</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Scrollbars part 9 &#8211; Maintaining the metaphor</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 9, 2003 / year-entry #52</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20030909-00/?p=42603</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>2</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">When a document is displayed with scrollbars, the metaphor is that the window is a viewport onto the entire document, only a portion of which is visible at the moment. The default behavior of a resize, however, is to maintain the origin at the upper left corner of the client area, which breaks the metaphor...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
        When a document is displayed with scrollbars, the metaphor is that the window is a
        viewport onto the entire document, only a portion of which is visible at the moment.
        The default behavior of a resize, however, is to maintain the origin at the upper
        left corner of the client area, which breaks the metaphor when the window is resized
        at the top or left edge. 
    </p>
<p>
        Suppose, for example, that the top line in the document is line ten. If the user grabs
        the top edge of the window and resizes upwards by one line (in an attempt to view
        line nine), the default behavior is to maintain the origin, which keeps line ten at
        the top of the window. The visual effect is that the window has scrolled upwards one
        line, subverting the user's attempt to view line nine. 
    </p>
<p>
        This is one of the subtleties of scrollbars which users rarely consciously notice,
        but when it doesn't work, it gives the impression that computers never quite get things
        right. 
    </p>
<p>
        Let's fix our scrolling behavior to maintain the viewport metaphor. We'll do it in
        several steps. First, we'll over-preserve the metaphor. Add the following new section
        to <i>OnWindowPosChanging</i>: 
    </p>
<p>    <code>BOOL OnWindowPosChanging(HWND hwnd, LPWINDOWPOS pwp)<br />
    {<br />
    &#160; &#160; if (!(pwp-&gt;flags &amp; SWP_NOMOVE)) {<br />
    &#160; &#160; &#160; &#160; RECT rc;<br />
    &#160; &#160; &#160; &#160; GetWindowRect(hwnd, &amp;rc);<br />
    &#160; &#160; &#160; &#160; int dy = pwp-&gt;y - rc.top;<br />
    &#160; &#160; &#160; &#160; ScrollDelta(hwnd, dy / g_cyLine);<br />
    &#160; &#160; }</p>
<p>    &#160; &#160; <font color="blue">if (!(pwp-&gt;flags &amp; SWP_NOSIZE)) {<br />
    &#160; &#160; &#160; &#160; RECT rc = { 0, 0, pwp-&gt;cx, pwp-&gt;cy };<br />
    &#160; &#160; &#160; &#160; AdjustSizeRectangle(hwnd, WMSZ_BOTTOM, &amp;rc);<br />
    &#160; &#160; &#160; &#160; pwp-&gt;cy = rc.bottom;<br />
    &#160; &#160; }</font> 
    <br />
    &#160; &#160; return 0;<br />
    } </code> </p>
<p>
        Now run the program, move the scrollbar thumb to somewhere in the middle, and resize
        the top edge of the window upwards and downwards. Notice that the existing lines on
        the screen don't move; all that resizing the top of the window does is expose or hide
        lines at the top. You already experience this behavior when resizing the bottom edge;
        now you get it at the top, too. 
    </p>
<p>
        There are several things wrong with this code, however. 
    </p>
<p>
        First, observe that it is trying too hard. Grab the window and move it across the
        screen. Observe that it still tries to preserve the aperture metaphor. (Even worse:
        It depends on how fast you move your mouse. The effect is more noticeable if you disable
        "Show window contents while dragging".) This is probably undesirable. 
    </p>
<p>
        Second, notice all the horrible flicker. 
    </p>
<p>
        We'll address these two problems in turn. 
    </p>
<p>
        Fixing the overzealousness is the easier problem. First, we do the work only if the
        window is simultaneously moving <b>and</b> sizing. This prevents simple moving from
        triggering the metaphor behavior. 
    </p>
<p>    <code>BOOL OnWindowPosChanging(HWND hwnd, LPWINDOWPOS pwp)<br />
    {<br />
    &#160; &#160; if (!(pwp-&gt;flags &amp; SWP_NOSIZE)) {</p>
<p>    &#160; &#160; &#160; &#160; RECT rc = { 0, 0, pwp-&gt;cx, pwp-&gt;cy };<br />
    &#160; &#160; &#160; &#160; AdjustSizeRectangle(hwnd, WMSZ_BOTTOM, &amp;rc);<br />
    &#160; &#160; &#160; &#160; pwp-&gt;cy = rc.bottom;</p>
<p>    &#160; &#160; &#160; &#160; <font color="blue">if (!(pwp-&gt;flags &amp; SWP_NOMOVE))
    {<br />
    &#160; &#160; &#160; &#160; &#160; &#160; RECT rc;<br />
    &#160; &#160; &#160; &#160; &#160; &#160; GetWindowRect(hwnd, &amp;rc);<br />
    &#160; &#160; &#160; &#160; &#160; &#160; int dy = pwp-&gt;y - rc.top;<br />
    &#160; &#160; &#160; &#160; &#160; &#160; ScrollDelta(hwnd, dy / g_cyLine);<br />
    &#160; &#160; &#160; &#160; }</font> 
    <br />
    &#160; &#160; }<br />
    &#160; &#160; return 0;<br />
    } </code> </p>
<p>
        Now if you grab the window and move it around, we don't do the metaphor thing because
        the size didn't change. 
    </p>
<p>
        However, if you maximize a window, the metaphor code kicks in. But that's easy to
        fix: Only do the metaphor if the top edge changes and the bottom edge doesn't. 
    </p>
<p>    <code>BOOL OnWindowPosChanging(HWND hwnd, LPWINDOWPOS pwp)<br />
    {<br />
    &#160; &#160; if (!(pwp-&gt;flags &amp; SWP_NOSIZE)) {<br />
    &#160; &#160; &#160; &#160; RECT rc = { 0, 0, pwp-&gt;cx, pwp-&gt;cy };<br />
    &#160; &#160; &#160; &#160; AdjustSizeRectangle(hwnd, WMSZ_BOTTOM, &amp;rc);<br />
    &#160; &#160; &#160; &#160; pwp-&gt;cy = rc.bottom;</p>
<p>    &#160; &#160; &#160; &#160; if (!(pwp-&gt;flags &amp; SWP_NOMOVE)) {<br />
    &#160; &#160; &#160; &#160; &#160; &#160; RECT rc;<br />
    &#160; &#160; &#160; &#160; &#160; &#160; GetWindowRect(hwnd, &amp;rc);<br />
    &#160; &#160; &#160; &#160; &#160; &#160; <font color="blue">if (rc.bottom == pwp-&gt;y
    + pwp-&gt;cy) {<br />
    &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; int dy = pwp-&gt;y - rc.top;<br />
    &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; ScrollDelta(hwnd, dy / g_cyLine);<br />
    &#160; &#160; &#160; &#160; &#160; &#160; }</font>
    <br />
    &#160; &#160; &#160; &#160; }<br />
    &#160; &#160; }<br />
    &#160; &#160; return 0;<br />
    }</code> </p>
<p>
        We still have a problem with the flicker, though. Before we can fix that, we will
        need a deeper understanding of the <code>WM_NCCALCSIZE</code> message. 
    </p>
<pre></pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (2)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-123533">
				<div id="div-comment-123533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030909-00/?p=42603#comment-123533">
			September 10, 2003 at 9:01 am</a>		</div>

		<p>I believe you&#8217;re now adding really non-standard scrollbar behavior. I have never seen a Windows application that behaves like this. Isn&#8217;t it more logical to view the data as attached to the window?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-510553">
				<div id="div-comment-510553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://smallcode.weblogs.us/2007/06/03/corrections-to-raymond-chens-wheel-scrolling-code/' rel='external nofollow' class='url'>smallcode &raquo; Blog Archive &raquo; Corrections to Raymond Chen&#8217;s wheel scrolling code</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030909-00/?p=42603#comment-510553">
			June 3, 2007 at 12:06 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://smallcode.weblogs.us/2007/06/03/corrections-to-raymond-chens-wheel-scrolling-code/" rel="nofollow">http://smallcode.weblogs.us/2007/06/03/corrections-to-raymond-chens-wheel-scrolling-code/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

