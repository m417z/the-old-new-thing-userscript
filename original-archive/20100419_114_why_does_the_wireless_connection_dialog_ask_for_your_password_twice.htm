<html>
<head>
<title>Why does the wireless connection dialog ask for your password twice?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does the wireless connection dialog ask for your password twice?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 19, 2010 / year-entry #115</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>33</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Martin wonders why the wireless networking dialog asks you to type your password twice when connecting to an existing network. Yeah, that bothers me too, and I don't know why either. But while we're on the topic of wireless networking, I thought I'd share a little program that is just as useless as my answer...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Martin wonders
<a HREF="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#1239342">
why the wireless networking dialog asks you to type your password twice</a>
when connecting to an existing network.
</p>
<p>
Yeah, that bothers me too, and I don't know why either.
</p>
<p>
But while we're on the topic of wireless networking,
I thought I'd share a little program that is just as useless
as my answer above.
(If other people get to hijack the topic, then I want to also.)
</p>
<p>
Back in the early days of Windows&nbsp;XP, I found that my
wireless networking adapter would constantly disconnect and
reconnect.
I never figured out why, but I did have a theory.
(Theory:
The wireless zero configuration service saw another access point
and said,
"Hey, that access point over there looks much nicer than then
one I'm currently connected to.
I'm going to drop my current connection and see if maybe that other
access point will go out with me."
And then it went up to that other access point and asked it out
on a date.
When the other access point said no, it came crawling back to the
original access point.
Repeat.)
</p>
<p>
Anyway, to avoid this problem
(which went away after a while for reasons unclear;
maybe it was fixed, maybe whatever situation triggered the problem
went away, I didn't bother investigating),
I wrote a program which did two very simple things:
</p>
<ol>
<li>If the wireless networking adapter was connected to an access
    point, then turn off the wireless zero configuration service.</p>
<li>If the wireless networking adapter was not connected to an access
    point, then turn on the wireless zero configuration service.
</ol>
<p>
In other words, it automates the process described
<a HREF="http://www.wi-fiplanet.com/tutorials/article.php/3573316">
on this Web page</a>.
(I like how that article was
<a HREF="http://cws.internet.com/article/3115-4447.htm">
copied in its entirety</a> to another site, which replaced the author's
name. Now that's chutzpah.)
</p>
<p>
Mind you,
the program really is no longer interesting in and of itself
any more because the underlying
problem went away, but I thought it could serve as an
illustration of how you can put together some simple things to make
a useful tool.
</p>
<p>
First, I changed the security descriptor on the wireless zero
configuration service so that my account had permission to turn it on
and off.
</p>
<p>
Second, I added this code to
a program that hangs out my Startup group which monitors various things
I like to monitor.
(I have one program that monitors several things just to cut down on the
number of processes hanging around on my machine.)
The code has been compressed and reformatted to get rid of the uninteresting
parts.
</p>
<pre>
class MonitorWireless
{
public:
  MonitorWireless()
    : m_hWait(NULL)
  {
      ZeroMemory(&amp;m_o, sizeof(m_o));
  }

  ~MonitorWireless()
  {
    if (m_hWait) UnregisterWaitEx(m_hWait, INVALID_HANDLE_VALUE);
    if (m_o.hEvent) CloseHandle(m_o.hEvent);
  }

  BOOL Initialize();

protected:
  static void CALLBACK s_OnChange(PVOID lpParameter, BOOLEAN)
  {
    MonitorWireless *self =
               reinterpret_cast&lt;MonitorWireless*&gt;(lpParameter);
    self-&gt;CheckIPAddress(); // something changed - check it again
  }

  void CheckIPAddress();
  static void StartStopService(BOOL fStart);

private:
    HANDLE m_hWait;
    OVERLAPPED m_o;
}
</pre>
<p>
The class definition is all very boring.
Our class has an <code>OVERLAPPED</code> structure which we use
to register for IP address change notifications, and it has a
handle to a registered wait, which takes advantage of the thread
pool to reduce the number of threads used by the process.
</p>
<pre>
BOOL MonitorWireless::Initialize()
{
  m_o.hEvent = CreateEvent(NULL, FALSE, FALSE, NULL);
  if (!m_o.hEvent) return FALSE;
  if (!RegisterWaitForSingleObject(&amp;m_hWait, m_o.hEvent,
                      s_OnChange, this, INFINITE, 0)) return FALSE;
  CheckIPAddress();
  return TRUE;
}
</pre>
<p>
When the object is initialized, it creates the handle that we will
ask to be set whenever the computer's IP address changes, and
then registers a wait on that handle with a callback function.
When the event is signaled, we check the IP address.
And to start the ball rolling, we check the IP address at
initialization.
</p>
<pre>
void MonitorWireless::CheckIPAddress()
{
  ULONG ulSize = 0;
  if (GetIpAddrTable(NULL, &amp;ulSize, 0) ==
                                     ERROR_INSUFFICIENT_BUFFER) {
    PMIB_IPADDRTABLE piat = reinterpret_cast&lt;PMIB_IPADDRTABLE&gt;
                                (LocalAlloc(LMEM_FIXED, ulSize));
    if (piat) {
      if (GetIpAddrTable(piat, &amp;ulSize, 0) == ERROR_SUCCESS) {
        BOOL fFound = FALSE;
        for (DWORD dwIndex = 0; dwIndex &lt; piat-&gt;dwNumEntries;
             dwIndex++) {
          PMIB_IPADDRROW prow = &amp;piat-&gt;table[dwIndex];
          if (prow-&gt;dwAddr == 0) continue;
          if ((prow-&gt;wType &amp; (MIB_IPADDR_DYNAMIC |
                              MIB_IPADDR_DELETED |
                              MIB_IPADDR_DISCONNECTED)) !=
                              MIB_IPADDR_DYNAMIC) continue;
          fFound = TRUE;
          break;
        }
        StartStopService(!fFound);
      }
      LocalFree(piat);
    }
  }

  HANDLE h;
  NotifyAddrChange(&amp;h, &amp;m_o);
}
</pre>
<p>
We start by getting the IP address table (doing the standard two-step
of first asking how much memory we need to hold it, allocating the memory,
and then filling the buffer) and walking through each IP address.
If we find an entry with an IP address that is dynamic,
not deleted, and not disconnected, then we declare ourselves happy;
otherwise we are sad.
If we are happy, then we stop the wireless zero configuration service;
if we are sad, then we start it.
</p>
<pre>
void MonitorWireless::StartStopService(BOOL fStart)
{
  SC_HANDLE sc;
  sc = OpenSCManager(NULL, NULL, SC_MANAGER_CONNECT |
                                 SC_MANAGER_ENUMERATE_SERVICE);
  if (sc) {
    SC_HANDLE scWzcsvc = OpenService(sc, TEXT("wzcsvc"),
                   fStart ? SERVICE_START 
                          : SERVICE_STOP | SERVICE_QUERY_STATUS);
    if (scWzcsvc) {
      if (fStart) StartService(scWzcsvc, 0, NULL);
      else        StopService(scWzcsvc);
      CloseServiceHandle(scWzcsvc);
    }
    CloseServiceHandle(sc);
  }
}
</pre>
<p>
To start or stop the service, we first connect to the service
control manager, open the service we want to start/stop,
and then, well, start or stop it.
</p>
<p>
There is already a <code>Start&shy;Service</code> function,
but no <code>Stop&shy;Service</code> function, so I wrote my own:</p>
<pre>
void StopService(SC_HANDLE sc)
{
 SERVICE_STATUS ss;

 if (QueryServiceStatus(sc, &amp;ss) &amp;&amp;
     ss.dwCurrentState != SERVICE_STOPPED &amp;&amp;
     ss.dwCurrentState != SERVICE_STOP_PENDING)
   ControlService(sc, SERVICE_CONTROL_STOP, &amp;ss);
}
</pre>
<p>
If the service is not already stopped (or stopping),
then we tell it to stop.
</p>
<p>
And there you have it, a program that you don't need any more.
But the point here was more to show how you can put together
some basic elements to solve a simple problem.
</p>
<p>
Techniques illustrated:
</p>
<ul>
<li>Registering a wait in the thread pool.
<li>Registering asynchronously for IP address changes.
<li>Starting and stopping a service.
</ul>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (33)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-826813">
				<div id="div-comment-826813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nerf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-826813">
			April 19, 2010 at 12:17 pm</a>		</div>

		<p>And, of course, the proper way to allocate memory. &nbsp;Failure to do so being the #1 cause of security holes (as determined by me)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826823">
				<div id="div-comment-826823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JJJ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-826823">
			April 19, 2010 at 12:30 pm</a>		</div>

		<p>I&#8217;m going to guess that the person who worked on the wireless networking dialog was someone who was used to working with cryptographic modules that go up for FIPS 140-2 certification, which states that manually entered keying material needs verification. &nbsp;One method of verification is requiring that the user enter the data twice.</p>
<p>Maybe it&#8217;s not necessary, I don&#8217;t know. &nbsp;But they probably figured that providing keying material for the underlying crypto library fell under the standard.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826833">
				<div id="div-comment-826833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-826833">
			April 19, 2010 at 1:09 pm</a>		</div>

		<p>JJJ: The reason you have to type your passphrase twice is presumably because you can&#8217;t see it. The actual problem is that this passphrase is treated as secret like a password when it usually isn&#8217;t. They should just have a checkbox that lets you hide it if necessary, and only make you enter it twice if it&#8217;s hidden.</p>
<p>While we&#8217;re hijacking discussions, I have this cellular modem which requires a little app to connect to the network. At some point my cellular carrier decided that their app should also handle WiFi connections too, which I didn&#8217;t want, so I disabled it. Unfortunately in their eagerness to provide this functionality they stop the wireless zero configuration service even when you have the WiFi part of the app disabled. I&#8217;m sure the app&#8217;s authors were thinking &quot;Why would they ever need to use Windows&#8217; built-in WiFi applet? They have ours which is much better!&quot; (and nobody ever got promoted for not including a feature).</p>
<p>So anyway, I&#8217;ve been wanting to write an app that detected that my WiFi wasn&#8217;t connected and wzcsvc wasn&#8217;t running, but I didn&#8217;t know how. Thank you for one of the most useful code samples you&#8217;ve posted.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826843">
				<div id="div-comment-826843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Malcolm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-826843">
			April 19, 2010 at 1:19 pm</a>		</div>

		<p>I hope praise like the article above has made your day, Raymond :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826853">
				<div id="div-comment-826853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-826853">
			April 19, 2010 at 3:23 pm</a>		</div>

		<p>@Gabe:</p>
<p>&quot;They should just have a checkbox that lets you hide it if necessary, and only make you enter it twice if it&#8217;s hidden.&quot;</p>
<p>I see that you&#8217;ve never set up wireless in Vista+7?</p>
<p>@Nerf:</p>
<p>GetIpAddrTable doesn&#8217;t require LocalAlloc. In fact, the msdn example for it uses plain HeapAlloc.</p>
<p>@Raymond:</p>
<p>Using reinterpret_cast for PVOID casts is not required. static_cast works. Generally, you should be using least forceful cast when possible, to let the compiler warn you of possible errors. reinterpret_cast is a hammer too big for that purpose.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826863">
				<div id="div-comment-826863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-826863">
			April 19, 2010 at 3:26 pm</a>		</div>

		<p>Me: &quot;reinterpret_cast is a hammer too big for that purpose.&quot;</p>
<p>I&#8217;d add that it&#8217;s a kind of hammer for beating a square peg into a round hole.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826873">
				<div id="div-comment-826873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Lineker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-826873">
			April 19, 2010 at 4:02 pm</a>		</div>

		<p>This would be a great app for netbooks if it also detected when the wifi card was disabled and stopped the service then too. But I suspect that detecting the power state of the card would be 1) hard 2) different from model to model</p>
<div class=post>[<i>It was just a demonstration of how you can combine little things to make something interesting. Simply repeat the process for any new features you like. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826883">
				<div id="div-comment-826883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-826883">
			April 19, 2010 at 4:17 pm</a>		</div>

		<p>@Chris Lineker,</p>
<p>Register for GUID_DEVINTERFACE_NET notifications and find out if any of enabled NICs is wireles and powered up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826893">
				<div id="div-comment-826893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-826893">
			April 19, 2010 at 6:07 pm</a>		</div>

		<p>Best. Introduction. Ever.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826903">
				<div id="div-comment-826903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-826903">
			April 19, 2010 at 6:10 pm</a>		</div>

		<p>Recently I was forced to fall back on a wireless connection (via USB dongle) and was plagued by it dropping the connection (and refusing to reconnect due to an unspecified error) every once in a while.</p>
<p>I&#8217;m not sure which component was at fault (though I suspect the drivers), but disabling and then re-enabling the connection from Network Connections invariably fixed it. &nbsp;(Nothing else seemed to.)</p>
<p>If I were forced to use wireless more often then I&#8217;d probably be tempted to write a similar app to this myself. &nbsp;(Or to find an alternate wireless adaptor.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826913">
				<div id="div-comment-826913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Dunn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-826913">
			April 19, 2010 at 9:28 pm</a>		</div>

		<p>The answer to the original question is: Someone copied someone else&#8217;s bad design without thinking it through. It&#8217;s like when a web signup form asks you to enter your email address twice. The email edit boxes don&#8217;t have the password style set, so copy &amp; paste works, thus defeating the supposed error-checking of making you type it twice. But enough people have seen it designed that way that they think it&#8217;s the right thing to do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826923">
				<div id="div-comment-826923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-826923">
			April 19, 2010 at 9:55 pm</a>		</div>

		<p>A similar problem exists in Windows Vista 32 bit. I had to download WLAN Optimizer, and that reduced the problem, but it didnt go away completely. Will give your code a try and how that works out! Thanks!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymuos even thread-even depth-1" id="comment-826933">
				<div id="div-comment-826933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Anonymuos' rel='external nofollow' class='url'>Anonymuos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-826933">
			April 19, 2010 at 10:28 pm</a>		</div>

		<p>Why was the wireless provisioning services feature dropped in Vista/Server 2008? It was very useful for clients to auto configure wireless settings using XML files.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826973">
				<div id="div-comment-826973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-826973">
			April 20, 2010 at 3:45 am</a>		</div>

		<p>So, why does StopService care about whether the service was already started?</p>
<p>@Gabe: There are, or at least were, several wireless drivers which thought that stopping the wireless zero configuration service was the right thing to do when they wanted to use their own UI. (Yes I have multiple wireless NICs.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826983">
				<div id="div-comment-826983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-826983">
			April 20, 2010 at 4:20 am</a>		</div>

		<p>&quot;JJJ: The reason you have to type your passphrase twice is presumably because you can&#8217;t see it.&quot;</p>
<p>I can&#8217;t see my login password, but I only have to type it twice when I <em>change</em> it, not when I <em>use</em> it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826993">
				<div id="div-comment-826993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Grumpy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-826993">
			April 20, 2010 at 4:44 am</a>		</div>

		<blockquote><p>
  (If other people get to hijack the topic, then I want to also.)
</p></blockquote>
<p>Give yourself a star. That was pure gold. Thank you for saving my day.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-827003">
				<div id="div-comment-827003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">!share</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-827003">
			April 20, 2010 at 5:32 am</a>		</div>

		<p>When editing a docx document in sharepoint you have to enter your credentials three times! I love the seamless integration between ms products.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-827013">
				<div id="div-comment-827013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-827013">
			April 20, 2010 at 6:28 am</a>		</div>

		<p>I had a look at the documentation for GetIpAddrTable and it doesn&#8217;t say anything about using LocalAlloc for memory allocation &#8211; is there a technical reason you used LocalAlloc, or is/was it personal preference?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-827023">
				<div id="div-comment-827023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-827023">
			April 20, 2010 at 6:51 am</a>		</div>

		<p>RE: reinterpret_cast/static_cast &#8211; the result of both is unspecified, but in reality they both have the correct effect.</p>
<p>If you&#8217;re a language lawyer type and can&#8217;t stand to use an unspecified result, there is a way to do the conversion in an entirely above board way &#8211; given a suitably aligned void* use &#8216;PMIB_IPADDRTABLE piat = new(voidPtr) MIB_IPADDRTABLE;&#8217;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826953">
				<div id="div-comment-826953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://K.Hagan@thermoteknix.com' rel='external nofollow' class='url'>Ken Hagan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-826953">
			April 20, 2010 at 12:00 am</a>		</div>

		<p>Casts up from void* are dangerous because the void* could have originally been anything. Using reinterpret_cast is an accepted idiom for saying &quot;watch out&quot; in this case, even though the language tolerates the alternative idiom of &quot;assuming you are simply casting back to the type it came from&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-827083">
				<div id="div-comment-827083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fred Thomas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-827083">
			April 20, 2010 at 8:47 am</a>		</div>

		<p>Since you bring up the subject of wireless adapters, here is a question for you. How do you identify which network adapters are wireless and which are fixed? We had this problem a while ago. Essentially we wanted a machine fingerprint which we planned to use, amongst other things, the MAC of the network adapter. However, on a laptop computer, you can never quite be sure which network adapter is first. Sometimes it is the wireless, sometimes the wired one depending on if there is an access point, if wireless is on etc. So our goal was to always use the wired connection.</p>
<p>We discussed with MSDN support, and they basically didn&#8217;t have an answer, so we ended up with an undocumented hack &#8212; ugly. Do you know the &quot;correct&quot; way to do this?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-827133">
				<div id="div-comment-827133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-827133">
			April 20, 2010 at 9:19 am</a>		</div>

		<p>@Fred:</p>
<p>There are wireless-specific NDIS OIDs, which only wireless NICs support. Just query the OID list.</p>
<p>@James:</p>
<p>Unlike most other devices, I&#8217;m not really sure if an application can really register for sound device removal notification, with RegisterDeviceNotification. Only the applications that use the new core audio APIs can use OnDeviceRemoved callback.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-827153">
				<div id="div-comment-827153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Schend</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-827153">
			April 20, 2010 at 9:29 am</a>		</div>

		<p>Alexandre: I do web dev, so I don&#8217;t know all of the details of the Windows API. All I know is that:</p>
<p>1) It&#8217;s certainly possible for apps to compensate for me pulling the USB headset at any random time. World of Warcraft, for example, handles this correctly, although it causes a few dropped frames and a little disk thrashing. (Most other games don&#8217;t.)</p>
<p>2) Despite it being demonstrably possible, most applications screw it up. My &quot;favorite&quot; is a particular media playing application from Microsoft that not only stops playing its media when the USB headset is yanked, but then lies to me in the error message. &quot;No speakers are plugged-in&quot;&#8211; liar!</p>
<p>I have to close and re-open that app every time I either plug, or unplug, the USB headset. If a video game can get it right, you&#8217;d think an application that does nothing but play media could too.</p>
<p>I&#8217;m not trying to pick on any particular app, because the problem is so widespread.</p>
<p>Just&#8230; look, if you write a Windows app that uses audio in any capacity, please go down to OfficeMax or Staples, get a cheap $20 USB headset from Logitech, and see what happens to your app when someone hot-swaps it. Make it part of your QA process. Thank you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-827093">
				<div id="div-comment-827093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-827093">
			April 20, 2010 at 9:01 am</a>		</div>

		<p>@Ken Hagan,</p>
<p>reinterpret_cast doesn&#8217;t say &quot;watch out&quot;. It says to the compiler: don&#8217;t pay attention, nothing to watch here, I don&#8217;t care if I give you an arbitrary crap (even a &#8216;float&#8217;), just take its bits and put them to the pointer, and shut up. If you use reinterpret_cast to cast between float and int, you will get the result you don&#8217;t really want.</p>
<p>static_cast will give a compile error if you try to cast between incompatible types. This is why you should use it.</p>
<p>@Joe:</p>
<p>Placement &#8216;new&#8217; is not implicitly defined by the compiler. When one defines it explicitly, it mostly just returns the argument, being thus no better than a static cast.</p>
<p>I would not say the result of void* to type* cast is unspecified. Otherwise all malloc invocations in all C code in the world would rely on unspecified behavior.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-827103">
				<div id="div-comment-827103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Schend</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-827103">
			April 20, 2010 at 9:12 am</a>		</div>

		<p>Fred, that&#8217;s a bad idea for so many reasons. My desktop has 3 network interfaces, one wired, one wireless (built-in) and one wireless (USB). Which MAC do you use?</p>
<p>Of course, you said you were going to always prefer the wired one&#8230; what if my USB interface was wired? Yes they exist, and yes they&#8217;re cheap and plentiful. Now what do you do? I could remove it at any second, and your &quot;machine fingerprint&quot; goes out the window.</p>
<p>Maybe I get a newer USB network interface and swap it in, or maybe I only have one that I shuttle between 4 computers. (Even worse, now I have 4 computers with the same &quot;fingerprint.&quot;)</p>
<p>I don&#8217;t know what the &quot;correct&quot; way to do this is, but I imagine it&#8217;s along the lines of, &quot;don&#8217;t do it.&quot;</p>
<p>Whatever you do, though, please, *please* make it cope with hot-swappable USB hardware! I still can&#8217;t even count the number of applications that fail in retarded ways when I unplug my USB headset. (Yes, that&#8217;s right application writers: SOUND CARDS CAN BE USB! Get the memo, PLEASE!)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-827123">
				<div id="div-comment-827123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-827123">
			April 20, 2010 at 9:17 am</a>		</div>

		<p>[I would not say the result of void* to type* cast is unspecified.]</p>
<p>You would not say that, but the C++ standard does.</p>
<p>[Otherwise all malloc invocations in all C code in the world would rely on unspecified behavior.]</p>
<p>How are you using static_cast in C?</p>
<p>[When one defines it explicitly, it mostly just returns the argument, being thus no better than a static cast.]</p>
<p>One doesn&#8217;t define it explicitly. One&#8217;s compiler vendor supplies a header which takes advantage of known implementation defined behaviour to implement it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-827303">
				<div id="div-comment-827303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-827303">
			April 20, 2010 at 10:26 pm</a>		</div>

		<p>I suppose the simple way of dealing with hotplug audio is treating it as if it can fail.</p>
<p>Oh, audio playback failed? Close audio device. Reopen, maybe that reset it (does happen). If you don&#8217;t talk to a specific audio device but let Windows choose, reopening it should go to the next device.</p>
<p>If the open fails &#8211; oh so sorry, no audio for you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-827323">
				<div id="div-comment-827323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-827323">
			April 20, 2010 at 10:59 pm</a>		</div>

		<p>@James: I have one of those USB headphones&#8230; Never have any problems with it. You know why? I don&#8217;t yank it out while I&#8217;m using it&#8230; Just a thought :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-827333">
				<div id="div-comment-827333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-827333">
			April 21, 2010 at 1:20 am</a>		</div>

		<p>The reason for asking for a wireless password twice is that windows isn&#8217;t able to verify it: connecting to a WEP network (at least) there&#8217;s no readily-spotted difference between what happens when you get your password wrong and what happens when there&#8217;s nothing on the network that responds to your packets.</p>
<p>Fred: How would you cope with a machine with multiple wired networks? &nbsp;Or none? &nbsp;You can&#8217;t just assume that &quot;the&quot; wired card is somehow magically constant. &nbsp;My machine, for instance, has several virtual network drivers installed that appear to be wired networks. &nbsp;One of the driver options, although I don&#8217;t use it, is to randomly select the MAC at boot time. Some machines have multiple real wired network cards. &nbsp;I have a webcam that when plugged in enumerates as a network device. &nbsp;One of my machines around here doesn&#8217;t have a wired network interface, it only has wireless. How would you stop all these things changing your machine fingerprint?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-827453">
				<div id="div-comment-827453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://K.Hagan@thermoteknix.com' rel='external nofollow' class='url'>Ken Hagan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-827453">
			April 21, 2010 at 8:41 am</a>		</div>

		<p>&quot;reinterpret_cast doesn&#8217;t say &quot;watch out&quot;.&quot;</p>
<p>It does to me, but then again&#8230;</p>
<p>&quot;It says to the compiler: don&#8217;t pay attention, nothing to watch here, &quot;</p>
<p>&#8230;I&#8217;m not a compiler. Sorry if the target of the &quot;watch out&quot; wasn&#8217;t clear. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-827353">
				<div id="div-comment-827353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-827353">
			April 21, 2010 at 1:42 am</a>		</div>

		<p>Joe: &quot;[I would not say the result of void* to type* cast is unspecified.]</p>
<p>You would not say that, but the C++ standard does.&quot;</p>
<p>No, it doesn&#8217;t. &nbsp;It&#8217;s much more complicated than that. &nbsp;Specifically, it gives two instances where the results are specified:</p>
<p>&quot;The null pointer value is converted to the null pointer value of the destination type.&quot;</p>
<p>and</p>
<p>&quot;A value of type pointer to object converted to pointer to cv void and back, possibly with different cv-qualification, shall have its original value.&quot;</p>
<p>It gives an example of the latter:</p>
<p>T* p1 = new T;</p>
<p>const T* p2 = static_cast&lt;const T*&gt;(static_cast&lt;void*&gt;(p1));</p>
<p>bool b = p1 == p2; // b will have the value true.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-827923">
				<div id="div-comment-827923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Florin Teodorescu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-827923">
			April 22, 2010 at 8:34 am</a>		</div>

		<p>&#8230; and actually to give some more historical facts on the actual title of the blog (&quot;Why does the wireless connection dialog ask for your password twice?&quot;), remember the context in which this annoying little &quot;feature&quot; came to be?</p>
<p>In Windows XP it was not there. You could merely enter the WEP key in clear. It was introduced around the XP SP2 time frame.</p>
<p>Remember what was special about XP SP2? Big emphasis on security. Well, with this bias, we were pretty acceptant to much of the users complaints touching or seeming to come from a security / privacy side. Believe it or not, there were actually user complaints indicating that entering the WEP key should not be in clear.</p>
<p>So..</p>
<p>@JJJ (Apr 19 12:30p): No, this was not driven by stubborn stickines to dry specs but a case in which pulling the blanket on one end you uncover the other &#8211; all good intentions throughout :-). However we live in a changing world and you saw this corrected in the next releases..</p>
<p>@Gabe (Apr 19 1:09p): When considering that &quot;feature&quot; actually the scenario was considered to be a password configuration one. Remember, you are expected to enter the WEP key only once, when you connect the first time to the network and not each and every time you get in range.</p>
<p>@Random832 (Apr 20 4:20a): I am not sure I agree. Entering the WEP key is not similar to when you login. It is similar to when you configure say your email account in your client of choice and you enter the account&#8217;s password for the very first time (see above).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-827903">
				<div id="div-comment-827903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Florin Teodorescu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100419-00/?p=14303#comment-827903">
			April 22, 2010 at 8:12 am</a>		</div>

		<p>As one privy to the (XP) Wireless Zero Configuration service (WZC), I can answer some of the questions and hopefully demistify some of the unknowns:</p>
<p>Re: &quot;(Theory: The wireless zero configuration service saw another access point and said, &quot;Hey, that access point over there looks much nicer than then one I&#8217;m currently connected to. I&#8217;m going to drop my current connection and see if maybe that other access point will go out with me.&quot; And then it went up to that other access point and asked it out on a date. When the other access point said no, it came crawling back to the original access point. Repeat.)&quot;</p>
<p>Actually: WZC was never that dumb. According to the initial requirements, WZC had to cover a case that in the early days of wireless connections was deemed to be common and important to solve: seamless connectivity switch betweeen overlapping networks (think different SSIDs, not Access Points). More specifically: you have a subscription to network A you want to use, but happen to be in the coverage of the paid network B. Your configuration includes both network A and B, in this priority order and you are merely connected to B. As you move into an area where A becomes available, while still under the coverage of network B, as per WZC requirements, connection was expected to switch automatically to network A.This is where the &quot;Z&quot; in WZC came from (*zero* configuration).</p>
<p>Now in order to cover this functionality, first WZC configured the wireless NIC with all the settings needed for connecting and holding the connection to network B. Then, every once in a while (1min) two commands were issued to the NIC driver:</p>
<p>1) &#8211; &quot;scan the environment for new wireless beacons&quot;</p>
<p>2) &#8211; &quot;give me the list of beacons detected&quot;.</p>
<p>With these two answered, WZC can make the decision to switch if any better network is available, but if not, no further action was taken and the wireless driver was left untouched with the same settings that were expected to hold the connection to network B active and well.</p>
<p>The ability to scan the environment while retaining the connection to some network was a requirement on the driver implementer, specified in the IEEE 802.11 spec, and WZC was making use of it.</p>
<p>Reallity is that in those early days implementing correctly such behavior at NIC driver level was challenging. The driver had to put shortly on hold the current connection while using the radio to scan all channels. Depending on the NIC manufacturer and driver developer, having the connection dropped in this process was fairly common. When such thing happened, once scan completed, the NIC automatically reattached to the network for which it was configured. Everything happened under the hood, WZC didn&#8217;t have any action to take and this is the reason why the &quot;constant dropping connection&quot; was only happening for some and not for others &#8211; all depending on the kind of wireless NIC and driver you had.</p>
<p>With the facts right, now you can see why the approach described in this blog solves the problem: once you have the connection set, as you stop WZC there is no software component asking for a periodic rescan, hence the driver is not asked to do what it should do and doesn&#8217;t do well, so the connection is retained. However, along with that you loose the functionality described above (seamless switch to the more preferred network) for which the scan was intended. But of course, time proved that&#8217;s a feature not as common as thought..</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

