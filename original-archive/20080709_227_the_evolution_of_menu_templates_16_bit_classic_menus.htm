<html>
<head>
<title>The evolution of menu templates: 16-bit classic menus</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The evolution of menu templates: 16-bit classic menus</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 9, 2008 / year-entry #228</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080709-00/?p=21693</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Menus aren't as complicated as dialogs. There are no fonts, no positioning, it's just a list of menu items and flags. Well, okay, there's the recursive part, when a menu has a submenu. But that's really the only wrinkle. Most of it is pretty boring. The 16-bit classic menu template begins with the following header:...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Menus aren't as complicated as dialogs.
There are no fonts, no positioning,
it's just a list of menu items and flags.
Well, okay, there's the recursive part,
when a menu has a submenu.
But that's really the only wrinkle.
Most of it is pretty boring.
</p>
<p>
The 16-bit classic menu template begins with the following header:
</p>
<pre>
struct MENUHEADER16 {
 WORD wVersion;
 WORD cbHeaderSize;
 BYTE rgbExtra[cbHeaderSize];
};
</pre>
<p>
The version is zero for 16-bit classic menu templates,
and the <code>cbHeaderSize</code> is the number of
extra bytes in the menu header that have to be skipped over
to find the first actual menu item.
In practice, <code>cbHeaderSize</code> is always zero.
This header exists only on the top level menu;
recursive submenus do not have a <code>MENUHEADER16</code>.
</p>
<p>
After the header (and any extra bytes specified by <code>cbHeaderSize</code>)
comes a packed array of menu item templates.
There are two types of menu item templates, normal items and
pop-up submenus.
First, let's look at the normal items:
</p>
<pre>
struct NORMALMENUITEM16 {
 WORD wFlags;       // menu item flags (MFT_*, MFS_*)
 WORD wID;          // menu item ID
 CHAR szText[];     // null terminated ANSI string
};
</pre>
<p>
Normal items represent menu items that are not pop-up submenus,
and they take a pretty straightforward form.
All you get are flags, the item ID, and the menu item text.
The flags are values such as
<code>MFT_STRING</code>,
<code>MFT_MENUBARBREAK</code>,
and <code>MFS_DISABLED</code>.
Of course, the <code>MF_POPUP</code> flag is not allowed,
since this is a normal item template.
The flag <code>MFS_HILITE</code> is also not allowed,
for reasons we will see later.
</p>
<p>
The other type of menu item template is the pop-up submenu.
</p>
<pre>
struct POPUPMENUITEM16 {
 WORD wFlags;       // menu item flags (MFT_*, MFS_*)
 CHAR szText[];     // null terminated ANSI string
};
</pre>
<p>
The pop-up item template
doesn't have an ID, the <code>MF_POPUP</code> flag
must be set in the flags (naturally),
the <code>MFS_HILITE</code> flag must not be set,
and it is immediately followed by... another menu resource,
minus the resource header, which describes the pop-up submenu itself.
(This is the recursive part.)
</p>
<p>
The end of the list of menu item templates is reached
when an item with the <code>MF_END</code> flag is set in its flags.
And now you see why <code>MFS_HILITE</code> is disallowed:
</p>
<pre>
#define MF_END              0x00000080L
#define MF_HILITE           0x00000080L
#define MFS_HILITE          MF_HILITE
</pre>
<p>
If you set the <code>MF_HILITE</code> flag,
it would be mistaken for the end of the menu template.
Fortunately, there's no need to set the <code>MFS_HILITE</code>
flag in the menu item template since highlighting happens at runtime
based on the user's mouse and keyboard activity,
not at menu creation time.
</p>
<p>
To make all this discussion concrete, let's convert
this rather uninteresting menu resource into a menu template:
</p>
<pre>
1 MENU
BEGIN
  POPUP "&amp;File"
  BEGIN
    MENUITEM "&amp;Open\tCtrl+O", 100
    MENUITEM SEPARATOR
    MENUITEM "&amp;Exit\tAlt+X",  101
  END
  POPUP "&amp;View"
  BEGIN
    MENUITEM "&amp;Status Bar", 102, CHECKED
  END
END
</pre>
<p>
The menu template for this classic 16-bit menu would go something
like this:
We start with the header, which always looks the same.
</p>
<pre>
0000  00 00      // wVersion = 0
0002  00 00      // cbHeaderSize = 0
</pre>
<p>
Next comes the list of menu items.
Our first is a pop-up submenu,
so the <code>MF_POPUP</code> flag is set,
indicating that we have a <code>POPUPMENUITEM16</code>:</p>
<pre>
0004  10 00     // wFlags = MF_POPUP
                // no wID
0006  26 46 69 6C 65 00 // "&amp;File" + null terminator
</pre>
<p>
Since this is a pop-up menu, the contents of the pop-up menu
follow.
This is the recursive part of the menu template format:
we have a menu template inside the outer one.
The first item of the pop-up menu is a string and
therefore takes the form of a <code>NORMALMENUITEM16</code>:
</p>
<pre>
000C  00 00     // wFlags = MFT_STRING
000E  64 00     // wID = 100
0010  26 4F 70 65 6E 09 43 74 72 6C 2B 4F 00
                // "&amp;Open\tCtrl+O" + null terminator
</pre>
<p>
The next item of the pop-up menu is a separator.
If you have been following the rules strictly,
you would generate the separator like this:
</p>
<pre>
001D  00 08     // wFlags = MFT_SEPARATOR
001F  00 00     // wID = 0
0021  00        // ""
</pre>
<p>
However, it turns out that there is an alternate form for
separators, namely to pass all zeroes:
</p>
<pre>
001D  00 00     // wFlags = 0
001F  00 00     // wID = 0
0021  00        // ""
</pre>
<p>
The existence of this alternate form is actually an artifact
of history, which we'll look at next time.
But for now, just realize that you can express a separator
in two different ways, either the official way with <code>MFT_SEPARATOR</code>
or the alternate way with <code>wFlags = 0</code>.
Either works just fine.
</p>
<p>
Anyway, let's finish up that submenu with the final item,
which is a string.
We set the <code>MF_END</code> flag to indicate that this is
the end of the (nested) menu.
</p>
<pre>
0022  80 00    // wFlags = MFT_STRING | MF_END
0024  65 00    // wID = 101
0026  26 45 78 69 74 09 41 6C 74 2B 58 00
               // "&amp;Exit\tAlt+X" + null terminator
</pre>
<p>
With the completion of the nested menu, we pop back to the
top-level menu.
Next comes the "View" submenu.
</p>
<pre>
0032  90 00     // wFlags = MF_POPUP | MF_END
                // no wID
0034  26 56 69 65 77 00 // "&amp;View" + null terminator
</pre>
<p>
The <code>MF_POPUP</code> flag marks this as a
<code>POPUPMENUITEM16</code>, which means that there is no
<code>wID</code>.
And look, the <code>MF_END</code> flag is set,
which means that this is the last item on the top-level
menu.
But we're not finished yet, since we still have to read
the nested submenu.
(Notice that the "end of menu" marker is far away from
the actual end of the menu!)
</p>
<pre>
003A  88 00    // wFlags = MFT_STRING | MFS_CHECKED | MF_END
003C  66 00    // wID = 102
003E  26 53 74 61 74 75 73 20 42 61 72 00
                // "&amp;Status Bar" + null terminator
</pre>
<p>
The submenu consists of a single item,
so its first item is also its last (<code>MF_END</code>).
Now that the submenu is complete, we pop back to the main menu again,
but as we saw, the main menu is also complete,
so that concludes the entire menu template.
</p>
<p>
Next time, we'll look at that strange alternate form for
separator items before returning to the history of menu templates.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-645713">
				<div id="div-comment-645713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080709-00/?p=21693#comment-645713">
			July 9, 2008 at 7:30 pm</a>		</div>

		<p>In the day I trawled through the Win3.0 + 3.1 apps looking for hidden menus and/or accelerator keys. And when I say &quot;apps&quot; I mean &quot;games&quot;. And when I say &quot;looking for&quot; I mean &quot;try to cheat&quot;.</p>
<p>Didn&#8217;t help. If an app had a series of menus with ID 101, 102, 104, 106 I&#8217;d create extra menu items with 103 and 105 just to see what happened. Nothing usually (ever) did.</p>
<p>One of the games (was it winmine.exe or reversi.exe?) had extra accelerators without menu items (accelerators needed a menu item to work), but adding corresponding menu items with the same ID didn&#8217;t achieve anything &#8212; I presume the code was #if DEBUG but the templates weren&#8217;t.</p>
<p>I also added or changed accelerators to a few apps that didn&#8217;t have them or were inconsistent (Notepad.exe was a target, the Search box had weird accelerators).</p>
<p>You can still do the same today if you&#8217;re keen, and the app even uses a resource format you can find/edit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-645783">
				<div id="div-comment-645783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jan Ouen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080709-00/?p=21693#comment-645783">
			July 10, 2008 at 9:04 am</a>		</div>

		<p>But there <em>IS</em> a hidden accelerator in Solitaire. Try pressing Alt+@.</p>
<p>Also, don&#8217;t forget what Raymond wrote in 2004 about menus: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2004/05/17/133181.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2004/05/17/133181.aspx</a></p>
<p>Thanks to Raymond for these useful articles! I bow in thy general direction :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-645763">
				<div id="div-comment-645763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">scorpion007</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080709-00/?p=21693#comment-645763">
			July 10, 2008 at 3:28 am</a>		</div>

		<p>Excellent. This sort of thing is going to be a useful reference for anyone learning how menus *really* work under the hood, just like with the Dialog series.</p>
<p>Very interesting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-646013">
				<div id="div-comment-646013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2008/07/11/8719254.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080709-00/?p=21693#comment-646013">
			July 11, 2008 at 1:18 pm</a>		</div>

		<p>Bringing 16-bit classic menus into the 32-bit world.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-646043">
				<div id="div-comment-646043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2008/07/10/8714471.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080709-00/?p=21693#comment-646043">
			July 11, 2008 at 1:20 pm</a>		</div>

		<p>For compatibility with an older version of the menu APIs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-646783">
				<div id="div-comment-646783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2008/07/15/8732375.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080709-00/?p=21693#comment-646783">
			July 15, 2008 at 11:52 am</a>		</div>

		<p>The short form of the long form.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

