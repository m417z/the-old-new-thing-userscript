<html>
<head>
<title>There's a default implementation for WM_SETREDRAW, but you might be able to do better</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>There&#8217;s a default implementation for WM_SETREDRAW, but you might be able to do better</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 24, 2011 / year-entry #17</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110124-00/?p=11683</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If your window doesn't have a handler for the WM_SET­REDRAW message, then Def­Window­Proc will give you a default implementation which suppresses WM_PAINT messages for your window when redraw is disabled, and re-enables WM_PAINT (and triggers a full repaint) when redraw is re-enabled. (This is internally accomplished by making the window pseudo-invisible, but that's an implementation...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>If your window doesn't have a handler for the <code>WM_SET&shy;REDRAW</code> message, then <code>Def&shy;Window&shy;Proc</code> will give you a default implementation which suppresses <code>WM_PAINT</code> messages for your window when redraw is disabled, and re-enables <code>WM_PAINT</code> (and triggers a full repaint) when redraw is re-enabled. (This is internally accomplished by <a href="http://blogs.msdn.com/oldnewthing/archive/2007/02/22/1742084.aspx#1745732"> making the window pseudo-invisible</a>, but that's an implementation detail you shouldn't be concerned with.)</p>
<p> Although the default implementation works fine for simple controls, more complex controls can do better, and in fact they <i>should</i> do better, because that's sort of the point of <code>WM_SET&shy;REDRAW</code>. </p>
<p> The intended use for disabling redraw on a window is in preparation for making large numbers of changes to the window, where you don't want to waste time updating the screen after each tiny little change. For example, if you're going to add a hundred items to a list box, you probably want to disable redraw while adding the items so you don't have to suffer through 100 screen refreshes when only one is enough. You've probably seen the programs that forget to suppress redraw when filling a large list box: The application freezes up except for a list box whose scroll bar starts out with a big thumb that slowly shrinks as the number of items increases. </p>
<p> I say that this is sort of the point of <code>WM_SET&shy;REDRAW</code> for a complex control, because if you have a simple control (like a button), there isn't much in the way of "bulk updates" you can perform on it, so there isn't much reason for anybody to want to disable redraw on it anyway. The types of windows for which people want to disable redraw are the types of windows that would benefit most from a custom handler. </p>
<p> For example, the list view control has a custom handler for <code>WM_SET&shy;REDRAW</code> which sets an internal <i>redraw has been disabled</i> flag. Other parts of the list view control check this flag and bypass complex screen calculations if is set. For example, when you add an item to a list view while redraw is disabled, the list view control doesn't bother recalculating the new scroll bar position; it just sets an internal flag that says, "When redraw is re-enabled, don't forget to recalculate the scroll bars." If the list view is in auto-arrange, it doesn't bother rearranging the items after each insertion or deletion; it just sets an internal flag to remember to do it when redraw is re-enabled. If you have a regional list view, it doesn't bother recalculating the region; it just sets a flag. And when you finally re-enable drawing, it sees all the little Post-It note reminders that it left lying around and says, "Okay, let's deal with all this stuff that I had been putting off." That way, if you add 100 items, it doesn't perform 99 useless scroll bar calculations, 99 useless auto-arrange repositionings, and create, compute, and then destroy 99 regions. Since some of these calculations are <nobr><i>O</i>(<i>n</i>)</nobr>, deferring them when redraw is disabled improves the performance of inserting <i>n</i>&nbsp;items from <nobr><i>O</i>(<i>n&sup2;</i>)</nobr> to <nobr><i>O</i>(<i>n</i>)</nobr>. </p>
<p> Moral of the story: If you have a control that manages a large number of sub-items, you should have a custom <code>WM_SET&shy;REDRAW</code> handler to make bulk updates more efficient. </p>
<p> <b>Bonus chatter</b>: Note that using <a href="http://blogs.msdn.com/b/oldnewthing/archive/2007/02/21/1735472.aspx"> <code>Lock&shy;Window&shy;Update</code></a> as a fake version of <code>WM_SET&shy;REDRAW</code> does not trigger these internal optimizations. Abusing <code>Lock&shy;Window&shy;Update</code> gets you the benefit of not repainting, but you still have to suffer through the various <nobr><i>O</i>(<i>n&sup2;</i>)</nobr> calculations. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-890443">
				<div id="div-comment-890443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110124-00/?p=11683#comment-890443">
			January 24, 2011 at 7:56 am</a>		</div>

		<p>I wish Visual Studio 2008 would use something like this for the toolbox sidebar which takes forever, as it adds each custom control one-by-one to the list while also repeatedly jumping between the topmost, bottommost and currently selected items in the list (for no apparent reason).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-890453">
				<div id="div-comment-890453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110124-00/?p=11683#comment-890453">
			January 24, 2011 at 8:05 am</a>		</div>

		<p>If you think vs2008 is slow, try vs2010.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-890463">
				<div id="div-comment-890463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110124-00/?p=11683#comment-890463">
			January 24, 2011 at 8:52 am</a>		</div>

		<p>Just don&#39;t use the designer and you&#39;ll be fine.</p>
<p>I almost never use it these days. I can do a smaller/faster/better job in code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-890473">
				<div id="div-comment-890473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110124-00/?p=11683#comment-890473">
			January 24, 2011 at 10:15 am</a>		</div>

		<p>I wish Windows Live (DirectActiveX.NET just kidding) Mail programmers worked in the same company as Raymond Chen. Oops, they do. The damn thing doesn&#39;t know to use WM_SETREDRAW when deleting the mails from the list.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-890493">
				<div id="div-comment-890493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110124-00/?p=11683#comment-890493">
			January 24, 2011 at 1:26 pm</a>		</div>

		<p>I wish the commenters would actually complain on the correct blog <a rel="nofollow" target="_new" href="http://windowsteamblog.com/windows_live/b/windowslive/" rel="nofollow">windowsteamblog.com/&#8230;/windowslive</a>. Oops, that would mean they&#39;d have to do something other than complain to someone who has nothing to do with said product. This means I have to read the damn comments that have nothing to do with the post.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-890503">
				<div id="div-comment-890503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110124-00/?p=11683#comment-890503">
			January 24, 2011 at 2:00 pm</a>		</div>

		<p>@Alex I&#39;m not really planning to do anything about it. &nbsp;It&#39;s a minor annoyance, honestly, and only an issue the first time I start up VS for the day. &nbsp;Still&#8230;I wish they had used something like WM_SETREDRAW. &nbsp;Just sayin&#39;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-890523">
				<div id="div-comment-890523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian Frost</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110124-00/?p=11683#comment-890523">
			January 24, 2011 at 2:43 pm</a>		</div>

		<p>I&#39;ve seen the angst over the &#39;wrong&#39; use of LockWindowUpdate in favour of WM_SETREDRAW but my approach to reducing screen flicker in my Delphi Apps is rather empirical. In my tools box I have four possibilities &#8211; DoubleBuffered (writes the bitmap to a backing canvas before painting), BeginUpdate-EndUpdate (ListView, TreeView etc) LockWindowUpdate() and WM_SETREDRAW. I fiddle with each until I find a solution that looks nice. Invariably LockWindowUpdate looks best although I know its naughty. Why is it best?</p>
<div class="post">[<i>It&#39;s not surprising that naughty gives the best results for the person being naughty. If your network card doesn&#39;t implement exponential backoff but instead always retransmits immediately, then you will win all collisions. If you steal from the store, you don&#39;t have to pay. If you grab all the crayons in art class, then you will have an easier time drawing your pictures. Of course, you also screw over everybody else. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-brunopitrus odd alt thread-odd thread-alt depth-1" id="comment-890553">
				<div id="div-comment-890553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kinokijuf' rel='external nofollow' class='url'>kinokijuf</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110124-00/?p=11683#comment-890553">
			January 24, 2011 at 9:25 pm</a>		</div>

		<p>@Alex Grigoriev;@Alex Grigoriev: I bet this is leftover from OE. I see exact same behaviour in winmail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-890563">
				<div id="div-comment-890563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bad api</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110124-00/?p=11683#comment-890563">
			January 24, 2011 at 11:05 pm</a>		</div>

		<p>[It&#39;s not surprising that naughty gives the best results for the person being naughty. If your network card doesn&#39;t implement exponential backoff but instead always retransmits immediately, then you will win all collisions. If you steal from the store, you don&#39;t have to pay. If you grab all the crayons in art class, then you will have an easier time drawing your pictures. Of course, you also screw over everybody else. -Raymond]</p>
<p>Exponential backoff will most likely make collisions worse. Only random backoff will minimize collisions.</p>
<p>To draw flicker free in windows gdi you have to STEAL resources?</p>
<div class="post">[<i>Who said you were stealing resources? I was just giving real-world examples of how bad people get an advantage over people who follow the rules. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-890583">
				<div id="div-comment-890583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian Frost</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110124-00/?p=11683#comment-890583">
			January 24, 2011 at 11:55 pm</a>		</div>

		<p>..and my real point is why should LockWindowUpdate() give a &#39;better&#39; visual effect than WM_SETREDRAW? </p>
<div class="post">[<i>I thought I explained it in the article. WM_SETREDRAW lets the control decide how to redraw. Maybe the control does a bad job. But instead of LockWindowUpdate you can just ShowWindow(SW_HIDE), which is a local solution. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-890593">
				<div id="div-comment-890593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nikos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110124-00/?p=11683#comment-890593">
			January 25, 2011 at 1:45 am</a>		</div>

		<p>talking about the listview control, its implementation of setredraw is very buggy. If I turn redraw off, then add/rearrange a lot of items, chances are that when redraw is re-enabled the control will not paint fully, not scroll correctly or both. The end result leaves much to be admired (especially in LVS_LIST) so usually I request a full redraw with Invalidate() after each WM_SETREDRAW(true)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm odd alt thread-odd thread-alt depth-1" id="comment-890633">
				<div id="div-comment-890633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110124-00/?p=11683#comment-890633">
			January 25, 2011 at 7:46 am</a>		</div>

		<p>Nikos, how is it buggy when it behaves exactly as documented?</p>
<p>This message can be useful if an application must add several items to a list box. The application can call this message with wParam set to FALSE, add the items, and then call the message again with wParam set to TRUE. Finally, the application can call RedrawWindow(hWnd, NULL, NULL, RDW_ERASE | RDW_FRAME | RDW_INVALIDATE | RDW_ALLCHILDREN) to cause the list box to be repainted.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-890723">
				<div id="div-comment-890723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110124-00/?p=11683#comment-890723">
			January 25, 2011 at 9:11 am</a>		</div>

		<p>If you&#39;re trying to avoid flickering, I don&#39;t see how ShowWindow(SW_HIDE) would help. It sounds like you&#39;re suggesting that one should hide the control, perform updates, and show it again. That will definitely cause flickering!</p>
<div class="post">[<i>But it will speed up the update. If you want to get rid of the flickering, you disable redraw on the parent, I guess. Or put up a cover window. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-890753">
				<div id="div-comment-890753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bad api</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110124-00/?p=11683#comment-890753">
			January 25, 2011 at 10:19 am</a>		</div>

		<blockquote><p>
  Nikos, how is it buggy when it behaves exactly as documented?
</p></blockquote>
<p>The listview content is easily provoked to garbage when enabling gridlines and adding items.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-891133">
				<div id="div-comment-891133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bob asking</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110124-00/?p=11683#comment-891133">
			January 27, 2011 at 6:59 am</a>		</div>

		<p>Can you please clarify about WM_SETREDRAW message &#8211; does it allow nesting? I mean if you do SendMsg(WM_SET&shy;REDRAW, FALSE) twice, then SendMsg(WM_SET&shy;REDRAW, TRUE) twice, will it allow repainting only after second SendMsg(WM_SET&shy;REDRAW, TRUE)?</p>
<p>Also, from your post it is not very clear to me how should I implement WM_SET&shy;REDRAW. Are there any examples of how it could be done? For example, should I call default implementation? And what other messages should be handled in specific way while setredraw flag is set?</p>
<div class="post">[<i>WM_SETREDRAW does not nest. I&#39;ll consider &quot;How to implement WM_SETREDRAW&quot; a topic suggestion since I&#39;m not going to try to create a scratch program in a comment. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

