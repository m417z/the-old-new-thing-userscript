<html>
<head>
<title>Applying a permutation to a vector, part 4: What is the computational complexity of the apply_permutation function?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Applying a permutation to a vector, part 4: What is the computational complexity of the apply_permutation function?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 9, 2017 / year-entry #6</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170109-00/?p=95145</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It's linear, though it doesn't look that way at first glance.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
One question left unanswered was the computational complexity
of
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095">
the
<code>apply_permutation</code> function</a>.
</p>
<p>
Here it is again:
</p>
<pre>
template&lt;typename T&gt;
void
apply_permutation(
    std::vector&lt;T&gt;&amp; v,
    std::vector&lt;int&gt;&amp; indices)
{
 using std::swap; // to permit Koenig lookup
 for (size_t i = 0; i &lt; indices.size(); i++) {
  auto current = i;
  while (i != indices[current]) {
   auto next = indices[current];
   swap(v[current], v[next]);
   indices[current] = current;
   current = next;
  }
  indices[current] = current;
 }
}
</pre>
<p>
The outer <code>for</code> loop runs <var>N</var> times;
that's easy to see.
The maximum number of iterations of the
inner <code>while</code> loop is a bit less obvious,
but if you understood the discussion,
you'll see that it runs at most <var>N</var> times
because that's the maximum length of a cycle in the
permutation.
(Of course, this analysis requires that the <code>indices</code>
be a permutation of 0 &hellip; <var>N</var> &minus; 1.)
</p>
<p>
Therefore,
a na&iuml;ve analysis would conclude that this
has worst-case running time of <var>O</var>(<var>N</var>&sup2;)
because the outer <code>for</code> loop runs <var>N</var> times,
and the inner <code>while</code> loop also runs <var>N</var> times
in the worst case.
</p>
<p>
But it's not actually that bad.
The complexity is only <var>O</var>(<var>N</var>),
because not all of the worst-case scenarios can exist
simultaneously.
</p>
<p>
One way to notice this is to observe that each item
moves only once, namely to its final position.
Once an item is in the correct position, it never
moves again.
In terms of indices, observe that each swap corresponds
to an assignment <code>indices[current] = current</code>.
Therefore, each entry in the index array gets set to its
final value.
And the <code>while</code> loop doesn't iterate at all
if <code>indices[current] == current</code>,
so when we revisit an element that has already moved
to its final location, we do nothing.
</p>
<p>
Since each item moves at most only once,
and there are <var>N</var> items, then the total number
of iterations of the inner <code>while</code> loop
is at most <var>N</var>.
</p>
<p>
Another way of looking at this is that the
<code>while</code> loop walks through every cycle.
But mathematics tell us that permutations decompose
into disjoint cycles,
so
the number of elements involved in the cycles cannot
exceed the total number of elements.
</p>
<p>
Either way, the conclusion is that there are most
<var>N</var> iterations of the inner <code>while</code> loop
in total.
Combine this with the fixed overhead of <var>N</var> iterations
of the <code>for</code> loop,
and you see that the total running time complexity is
<var>O</var>(<var>N</var>).
</p>
<p>
(We can determine via inspection that the algorithm consumes
constant additional space.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1279515">
				<div id="div-comment-1279515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170109-00/?p=95145#comment-1279515">
			January 9, 2017 at 9:07 am</a>		</div>

		<p>Friday was &#8220;part 2&#8221; and this is &#8220;part 4.&#8221;  Was &#8220;part 3&#8221; lost or is this just an off-by-one error?</p>
<p>Anyway, I&#8217;ve really enjoyed this recent series.  Thanks!</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1279525">
				<div id="div-comment-1279525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">McBucket</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170109-00/?p=95145#comment-1279525">
			January 9, 2017 at 9:29 am</a>		</div>

		<p>They&#8217;re actually numbered by powers of 2. Next installment would be &#8220;part 8&#8221;.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1279535">
				<div id="div-comment-1279535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170109-00/?p=95145#comment-1279535">
			January 9, 2017 at 9:38 am</a>		</div>

		<p>Look a couple entries previous.  This entry was titled &#8220;Applying a permutation to a vector&#8221;.  The Thursday and Friday articles were about a specific application of the general algorithm.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1279486">
				<div id="div-comment-1279486" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TwelveBaud</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170109-00/?p=95145#comment-1279486">
			January 9, 2017 at 9:46 am</a>		</div>

		<p>Raymond is interleaving the <a href="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095">&#8220;Permutations of a Vector&#8221; series</a> and the <a href="https://blogs.msdn.microsoft.com/oldnewthing/20170105-00/?p=95125">&#8220;Sorting by Indices&#8221; series</a>. You have to read the whole title, not just the suffix.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1279545">
				<div id="div-comment-1279545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170109-00/?p=95145#comment-1279545">
			January 9, 2017 at 1:25 pm</a>		</div>

		<p>Ah, thanks.  I didn&#8217;t realize they were being interleaved.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1279555">
				<div id="div-comment-1279555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rkannan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170109-00/?p=95145#comment-1279555">
			January 9, 2017 at 3:44 pm</a>		</div>

		<p>Another way to look at this is to observe that the permutation of a vector is actually a matrix-vector multiplication operation, with the matrix P being an NxN binary matrix such that P[i][indices[i]] = 1 (and zeros everywhere else). Then, the naive cost of the permutation is the cost of matrix-vector multiple, which is N^2. However, since this is a binary matrix, we don&#8217;t need to multiply entries by 0, only those with a nonzero value. There is exactly one nonzero entry per row, hence the cost is only N. Vector permutations come up all the time in Linear Algebra operations such as Gaussian elimination with pivoting.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1279565">
				<div id="div-comment-1279565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170109-00/?p=95145#comment-1279565">
			January 9, 2017 at 3:55 pm</a>		</div>

		<p>But it takes <var>O</var>(<var>N</var>) operations to find that nonzero value in each row, so if you are using matrix multiplication, the cost is <var>O</var>(<var>N</var>&sup2;).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1279575">
				<div id="div-comment-1279575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">R Kannan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170109-00/?p=95145#comment-1279575">
			January 10, 2017 at 4:57 am</a>		</div>

		<p>Raymond, you don&#8217;t need to search for the nonzero entry because we already have its location: The nonzero entry in row i indices[i]. (although if we carry the matrix analogy through , we&#8217;ll need an additional O(N) storage to store the permuted vector.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1279595">
				<div id="div-comment-1279595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170109-00/?p=95145#comment-1279595">
			January 10, 2017 at 5:59 am</a>		</div>

		<p>If you use a sparse matrix, you only have to operate on the n nonzero values, and it goes back to being O(n)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-1279566">
				<div id="div-comment-1279566" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170109-00/?p=95145#comment-1279566">
			January 10, 2017 at 8:06 am</a>		</div>

		<p>Noting that if you are allowed <var>O</var>(<var>N</var>) additional storage, then the algorithm is trivial, as demonstrated in part 1.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1279625">
				<div id="div-comment-1279625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170109-00/?p=95145#comment-1279625">
			January 11, 2017 at 3:24 am</a>		</div>

		<p>The while loop was a big hint that something was going on.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

