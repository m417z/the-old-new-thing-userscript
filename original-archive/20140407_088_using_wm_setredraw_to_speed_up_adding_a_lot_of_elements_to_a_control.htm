<html>
<head>
<title>Using WM_SETREDRAW to speed up adding a lot of elements to a control</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Using WM_SETREDRAW to speed up adding a lot of elements to a control</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 7, 2014 / year-entry #89</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's Little Program shows one way you can implement a better version of WM_SET­REDRAW. Our first version doesn't use WM_SET­REDRAW at all. Start with the scratch program and make the following changes: HFONT g_hfList; int g_yOrigin; int g_cyLine; int g_cLinesPerPage; int g_cItems = 100; // GetTrackPos incorporated by reference // ScrollTo incorporated by reference //...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program shows one way you can implement
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/01/24/10119211.aspx">
a better version of <code>WM_<wbr>SET&shy;REDRAW</code></a>.
Our first version doesn't use
<code>WM_<wbr>SET&shy;REDRAW</code></a> at all.
</p>
<p>
Start with the
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/07/23/54576.aspx">
scratch program</a>
and make the following changes:</p>
<pre>
HFONT g_hfList;
int g_yOrigin;
int g_cyLine;
int g_cLinesPerPage;
int g_cItems = 100;

// <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/08/05/54602.aspx">GetTrackPos</a> incorporated by reference
// <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/07/31/54601.aspx">ScrollTo</a> incorporated by reference
// <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/07/31/54601.aspx">ScrollDelta</a> incorporated by reference
// <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/07/31/54601.aspx">OnSize</a> incorporated by reference
// <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/07/31/54601.aspx">OnVscroll</a> incorporated by reference + <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/08/05/54602.aspx">modifications</a>
// <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/07/25/54582.aspx">OnCreate</a> incorporated by reference
// <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/07/25/54582.aspx">OnDestroy</a> incorporated by reference

// This is the same as the <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/07/29/54591.aspx">earlier version of PaintSimpleContent</a>
// with one tiny change: Draw the items in reverse order so the effect
// is more noticeable.

void
PaintSimpleContent(HWND hwnd, PAINTSTRUCT *pps)
{
 HFONT hfPrev = SelectFont(pps-&gt;hdc, g_hfList);  /* Use the right font */

 int iMin = max(pps-&gt;rcPaint.top / g_cyLine, 0);
 int iMax = min((pps-&gt;rcPaint.bottom + g_cyLine - 1) / g_cyLine, g_cItems);

 for (int i = iMin; i &lt; iMax; i++) {
  char szLine[256];
  int cch = wsprintf(szLine, "This is line %d", <font COLOR=blue>g_cItems - i</font>);
  TextOut(pps-&gt;hdc, 0, i * g_cyLine, szLine, cch);
 }

 SelectFont(pps-&gt;hdc, hfPrev);
}

// <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/07/31/54601.aspx">PaintContent</a> incorporated by reference

<font COLOR=blue>void AddItem(HWND hwnd)
{
 g_cItems++;
 InvalidateRect(hwnd, 0, TRUE);
 ScrollDelta(hwnd, 0);
}

void OnChar(HWND hwnd, TCHAR ch, int cRepeat)
{
 switch (ch) {
 case TEXT('1'):
  AddItem(hwnd);
  break;

 case TEXT('2'):
  for (int i = 0; i &lt; 10000; i++) {
   AddItem(hwnd);
  }
  break;

 case TEXT('3'):
  SetWindowRedraw(hwnd, FALSE);
  for (int i = 0; i &lt; 10000; i++) {
   AddItem(hwnd);
  }
  SetWindowRedraw(hwnd, TRUE);
  InvalidateRect(hwnd, nullptr, TRUE);
 }
}

 HANDLE_MSG(hwnd, WM_VSCROLL, OnVscroll);
 HANDLE_MSG(hwnd, WM_CHAR, OnChar);</font>
</pre>
<p>
Most of this program was stolen from my scroll bar series.
The interesting new bits are that you can add one new item
by hitting <kbd>1</kbd>,
or you can add ten thousand items by hitting <kbd>2</kbd>,
or you can add ten thousand items with redraw disabled
by hitting <kbd>3</kbd>.
</p>
<p>
I drew the items in reverse order so that adding an item
forces everything to change position, so that the effect
of the redraw is more noticeable.
</p>
<p>
Observe that adding one item is fast,
but adding ten thousand items with redraw enabled is slow;
you can watch the scroll bar as it slowly shrinks.
But adding ten thousand items with redraw disabled is not too bad.
</p>
<p>
But we can do better.
</p>
<pre>
<font COLOR=blue>BOOL g_fRedrawEnabled = TRUE;</font>

void AddItem(HWND hwnd)
{
 g_cItems++;
 <font COLOR=blue>if (g_fRedrawEnabled) {</font>
  InvalidateRect(hwnd, 0, TRUE);
  ScrollDelta(hwnd, 0);
 <font COLOR=blue>}</font>
}

<font COLOR=blue>void OnSetRedraw(HWND hwnd, BOOL fRedraw)
{
 g_fRedrawEnabled = fRedraw;
 if (fRedraw) {
  InvalidateRect(hwnd, 0, TRUE);
  ScrollDelta(hwnd, 0);
 }
}</font>

void
OnPaint(HWND hwnd)
{
 <font COLOR=blue>if (g_RedrawEnabled) {</font>
  PAINTSTRUCT ps;
  BeginPaint(hwnd, &amp;ps);
  PaintContent(hwnd, &amp;ps);
  EndPaint(hwnd, &amp;ps);
 <font COLOR=blue>} else {
  ValidateRect(hwnd, nullptr);
 }</font>
}

 <font COLOR=blue>HANDLE_MSG(hwnd, WM_SETREDRAW, OnSetRedraw);</font>
</pre>
<p>
We have a custom handler for the
<code>WM_<wbr>SET&shy;REDRAW</code> message that updates
a flag that indicates whether redraw is enabled.
When adding an item, we do the visual recalculations
(updating the scroll bar, mostly)
only if redraw is enabled.
If a paint message comes in while redraw is disabled,
we merely validate the window to say "It's all good,
don't worry!"
When redraw is re-enabled, we ask for a fresh repaint
and update the scroll bars.
</p>
<p>
With this version of the program, adding ten thousand items
with redraw disabled is lightning fast.
</p>
<p>
Notice that <code>g_fRedrawEnabled</code> is not
reference-counted.
It's a simply <code>BOOL</code>.
In other words, if you send the
<code>WM_<wbr>SET&shy;REDRAW</code> message twice to disable
redraw,
you still only need to enable it once.
Disabling redraw on a window where redraw is already disabled
has no effect.
</p>
<p>
<b>Exercise</b>:
Compare the behavior of <code>WM_<wbr>SET&shy;REDRAW</code> with
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2007/02/22/1742084.aspx">
(the incorrect)
<code>Lock&shy;Window&shy;Update</code></a>
for this program.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1117683">
				<div id="div-comment-1117683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1117683">
			April 7, 2014 at 9:33 am</a>		</div>

		<p>Why do most controls seem to store the WM_SET&shy;REDRAW state as a bool when a reference counted UINT model would cause a lot less grief for people using a UI toolkit that sits between their code and user32/comctrl. Is it a bitfield internally?</p>
<div class="post">[<em>WM_SET&shy;REDRAW is spec&#39;d as non-refcounted, so implementations must not refcount it. Another thing to add to the list of things to do once that time machine is ready. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1117693">
				<div id="div-comment-1117693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1117693">
			April 7, 2014 at 10:06 am</a>		</div>

		<p>There are some similar items to WM_SETREDRAW in managed code. &nbsp;I believe those are booleans as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1117703">
				<div id="div-comment-1117703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hans</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1117703">
			April 7, 2014 at 10:10 am</a>		</div>

		<p>Ray, why do you in your OnSetRedraw handler invalidate the window if redraw is re-enabled?</p>
<p>On every Windows control, I had to do this manually.</p>
<p>Also on your case TEXT(&#39;3&#39;): code, you invalidate manually the window after calling SetWindowRedraw(hwnd, TRUE). This would match my experience.</p>
<div class="post">[<em>True, technically it is the caller&#39;s responsibility to invalidate the window, but I just do it internally out of habit. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1117723">
				<div id="div-comment-1117723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1117723">
			April 7, 2014 at 1:57 pm</a>		</div>

		<p>[WM_SETÂ­REDRAW is spec&#39;d as non-refcounted, so implementations must not refcount it. Another thing to add to the list of things to do once that time machine is ready. -Raymond]</p>
<p>I found it convenient to refcount it for my own controls anyway but present non-refcount by deduplication when delegating to system controls. He who uses my controls needs to read my manual. If you read this blog you probably don&#39;t use them.</p>
<p>These days I don&#39;t use WM_SETREDRAW much anymore preferring to defer the calculations to the next WM_PAINT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1117733">
				<div id="div-comment-1117733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1117733">
			April 7, 2014 at 1:58 pm</a>		</div>

		<p>In case anyone else was confused and tried to find MSDN documentation for SetWindowRedraw:</p>
<p>SetWindowRedraw() is a macro from &lt;windowsx.h&gt;. &nbsp;It is a convenient way of sending the WM_SETREDRAW message.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1117743">
				<div id="div-comment-1117743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">.dan.g.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1117743">
			April 7, 2014 at 5:22 pm</a>		</div>

		<p>I thought that disabling redraw would obviate the need for the extra handling in OnPaint.</p>
<p>Where are the paint messages coming from if redraw is already disabled?</p>
<div class="post">[<em>Perhaps somebody moved a window that had been obscuring our window. Use your imagination. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1117763">
				<div id="div-comment-1117763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1117763">
			April 8, 2014 at 2:35 am</a>		</div>

		<p>BeginUpdate and EndUpdate on the list and tree views and various other. They just use WM_SETREDRAW and are reference counted internally.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1118013">
				<div id="div-comment-1118013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">.dan.g.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1118013">
			April 8, 2014 at 7:10 pm</a>		</div>

		<p>@Raymond: But that doesn&#39;t explain why _you_ added &nbsp;the extra code since your comment seems to bear no relation to the matter being discussed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1118023">
				<div id="div-comment-1118023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1118023">
			April 8, 2014 at 8:59 pm</a>		</div>

		<p>.dan.g.: I think you understand what WM_SETREDRAW does. It just tells the window not to tell itself to redraw. It does not prevent the window from getting WM_PAINT messages.</p>
<p>In other words, ordinarily what happens when you add an item to a listbox is that it adds the item to its internal data structures and tells itself to redraw. When you turn off redraw, that just prevents the listbox from telling itself to redraw. Windows will still tell the listbox to redraw for all the usual reasons.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1118183">
				<div id="div-comment-1118183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1118183">
			April 9, 2014 at 2:24 pm</a>		</div>

		<p>Oops, I meant to say that I think .dan.g. MISunderstands what WM_SETREDRAW does.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1118213">
				<div id="div-comment-1118213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">.dan.g.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1118213">
			April 9, 2014 at 5:51 pm</a>		</div>

		<p>@Gabe: Since you have decided to speak on behalf of Raymond, perhaps you can answer my question properly then.</p>
<p>The subtext was: How to make a better version of WM_REDRAW, by adding code to the WM_PAINT handler to not draw if redraw is already disabled.</p>
<p>But if redraw is already disabled why is the extra code necessary?</p>
<div class="post">[<em>You might get paint messages when redraw is disabled. For example, somebody might do WM_SETREDRAW(FALSE), then call MessageBox, then re-enable redraw after MessageBox returns. MessageBox will pump messages, including paint messages. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1118233">
				<div id="div-comment-1118233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">.dan.g.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1118233">
			April 10, 2014 at 12:45 am</a>		</div>

		<p>Thx Raymond.</p>
<p>But I still don&#39;t see why it is relevant to your post. Your post, if I may remind you, was all about adding items and drawing them, not about calling MessageBox.</p>
<p>Therefore it seems to me that for the duration of adding new items, and in the absence of any other interference, WM_SETREDRAW(FALSE) ought to have withheld _all_ WM_PAINT messages from needing to be handled. Otherwise it&#39;s not doing its job.</p>
<div class="post">[<em>There are two sides to this demonstration. The control and the client. In this particular demonstration, the client does not pump messages while redraw is disabled, but some other client might, so the control needs to be ready for that. You are confusing the example with the general principle, like saying &quot;Why do you check whether the length is zero? This program never passes a length of zero.&quot; Imagine, for example, the client did WM_SETREDRAW(FALSE), then issues asynchronous I/O to get the new items. While waiting for the I/O to complete, the code is pumping messages while the control has redraw disabled. The control will receive paint messages, and it had better not crash when that happens. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1118273">
				<div id="div-comment-1118273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hans</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1118273">
			April 10, 2014 at 6:09 am</a>		</div>

		<p>THX, Raymond for answering my question, but another thing in question:</p>
<p>Before I had to experience I must call InvalidateRect(), my assumption was if redraw is off for a control the control still accumulates the dirty region, and after re-enabling redraw, only the dirty region will be repainted.</p>
<p>But as I have to call InvalidateRect() myself I invalidate the whole window.</p>
<p>Imagine a list control where mass items are added, so I disable redraw before and re-enable after adding the items. But none of the added ones is visible (they are not in visible range). What I get is one redundant redraw, as I have no other chance than invalidating the whole window. This may be less efficient than not to disabling redraw, and at least the control flickers.</p>
<p>Is there some chance to optimize for this scenario (besides doing dirty region calculation myself)?</p>
<div class="post">[<em>If you want to accumulate dirty regions, then you have to do it yourself. If you have scenarios where somebody makes a lot of changes to offscreen items, then you can opt to add dirty region accumulation to your control as an optimization. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1118333">
				<div id="div-comment-1118333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140407-00/?p=1313#comment-1118333">
			April 10, 2014 at 11:13 am</a>		</div>

		<p>.dan.g.: WM_SETREDRAW(FALSE) tells the *target window* not to send *itself* paint messages. It sounds like you want it to tell *Windows* not to send paint messages to the target window.</p>
<p>In other words, you&#39;re wondering why Windows doesn&#39;t perform the LockWindowUpdate behavior for you. That might be nice, but it may not always be what you want. What if you want to make a list box that shows a progress bar while the updates are happening?</p>
<p>Don&#39;t be fooled by the name. WM_SETREDRAW(FALSE) just means &quot;I&#39;m going to be sending you a batch of updates&quot; and WM_SETREDRAW(TRUE) just means &quot;I&#39;m done sending you updates&quot;. The most likely visible side-effect of this is that the display will not redraw itself, but that&#39;s just one possibility.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

