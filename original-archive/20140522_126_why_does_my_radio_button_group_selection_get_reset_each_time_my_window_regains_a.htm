<html>
<head>
<title>Why does my radio button group selection get reset each time my window regains activation?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does my radio button group selection get reset each time my window regains activation?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 22, 2014 / year-entry #127</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140522-00/?p=933</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer reported (all incomplete information and red herrings preserved): We have an issue related to two radio buttons in a window. The code programmatically checks the second button by sending the BM_SET­CHECK message. We observe that if the user clicks somewhere else on the screen (so that our application loses focus), and then clicks...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer reported (all incomplete information and red herrings preserved):
</p>
<blockquote CLASS=q>
<p>
We have an issue related to two radio buttons in a window.
The code programmatically checks the second button
by sending the <code>BM_<wbr>SET&shy;CHECK</code> message.
We observe that if the user clicks somewhere else on the screen
(so that our application loses focus),
and then clicks on the taskbar icon to return to our application,
the first radio button spontaneously gets selected.
</p>
<p>
We watched all the messages in Spy++, and it appears
that the radio button is receiving a
<code>WM_<wbr>SET&shy;FOCUS</code>
followed by a 
<code>WM_<wbr>SET&shy;CHECK</code>.
</p>
<p>
Is this by design?
If not, what should I be looking for in my code that
is causing this erroneous selection change to occur?
</p>
</blockquote>
<p>
The incomplete information is that the customer
didn't say how they created those radio buttons.
</p>
<p>
The red herring is that the customer said that
they had a problem with their window.
This suggested that they were doing a custom window
implementation (because if they were using the standard
dialog implementation, they would have said <i>dialog</i>).
</p>
<p>
But from the symptoms,
it's clear that what's most likely happening is that
the radio button is created as a
<code>BS_<wbr>AUTO&shy;RADIO&shy;BUTTON</code>.
And automatic radio buttons select themselves
automatically (hence the name) when they receive
focus.
</p>
<p>
That explains the message sequence
of
<code>WM_<wbr>SET&shy;FOCUS</code>
followed by a 
<code>WM_<wbr>SET&shy;CHECK</code>:
The automatic radio button receives focus,
and in response it checks itself.
</p>
<p>
Therefore, the next level of investigation
is why the first radio button is getting focus
when the window is activated.
</p>
<p>
If the application window is a custom window,
then the place to look is their window's
activation and focus code, to see why focus is
going to the first radio button instead of the
second one.
Perhaps it is putting focus on the first radio
button temporarily, and then later realizes,
"Oh wait, I really meant to put it on the second
radio button."
The fix would be to get rid of the temporary
focus change and go straight to the second
radio button.
</p>
<p>
If the application window is a standard dialog,
then we saw last time that
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/05/21/10527168.aspx">
the dialog manager restores focus to the window
that had focus last</a>,
and that you could mimic the same behavior in your
own code.
</p>
<p>
It turns out that the customer was indeed using
a standard dialog,
in which case the problem is that they put the
dialog into an inconsistent state:
They checked the second radio button but
left focus on the first radio button.
This is a configuration that exists nowhere in nature,
and therefore when the dialog manager tries to
recreate it (given its lack of specialized knowledge
about specific controls), it can't.
</p>
<p>
The fix is to put focus on the second radio button
as well as setting the check box.
In fact, you can accomplish both by setting the focus
to the second radio button
(noting that
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/08/02/205624.aspx">
there is a special process for setting focus in a dialog box</a>)
since you already are using automatic radio buttons.
</p>
<p>
Here's a program that demonstrates the problem:
</p>
<pre>
// scratch.rc

1 DIALOGEX 32, 32, 160, 38
STYLE DS_MODALFRAME | DS_SHELLFONT | WS_POPUP | WS_VISIBLE |
      WS_CAPTION | WS_SYSMENU
CAPTION "Test"
FONT 9, "MS Shell Dlg"
BEGIN
CONTROL "First", 100, "Button",
        WS_GROUP | WS_TABSTOP | BS_AUTORADIOBUTTON, 4,  4, 152, 13
CONTROL "Second", 101, "Button",BS_AUTORADIOBUTTON, 4, 20, 152, 13
END

// scratch.cpp

#include &lt;windows.h&gt;
#include &lt;windowsx.h&gt;

INT_PTR CALLBACK DlgProc(
    HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
 switch (uMsg) {
 case WM_INITDIALOG:
  SetFocus(GetDlgItem(hdlg, 100));
  CheckRadioButton(hdlg, 100, 101, 101);
  return FALSE;
 case WM_COMMAND:
  switch (GET_WM_COMMAND_ID(wParam, lParam)) {
  case 100:
  case 101:
    CheckRadioButton(hdlg, 100, 101,
                     GET_WM_COMMAND_ID(wParam, lParam));
    break;
  case IDCANCEL: EndDialog(hdlg, 0); break;
  }
 }
 return FALSE;
}

int WINAPI WinMain(HINSTANCE hinst, HINSTANCE hinstPrev,
                   LPSTR lpCmdLine, int nShowCmd)
{
 DialogBox(hinst, MAKEINTRESOURCE(1), nullptr, DlgProc);
 return 0;
}
</pre>
<p>
Observe that we set focus to the first button
but check the second button.
When the dialog regains focus, the second button will
fire a
<code>WM_<wbr>COMMAND</code> because it thinks it was
clicked on,
and in response the dialog box moves the selection to
the second button.
</p>
<p>
The fix here is actually pretty simple:
Let the dialog manager handle the initial focus.
Just delete the <code>Set&shy;Focus</code> call
and return <code>TRUE</code>,
which means,
"Hey, dialog manager, you do the focus thing,
don't worry about me."
</p>
<p>
Another fix is to remove the code that updates the radio
buttons in response to the <code>WM_<wbr>COMMAND</code> message.
(I.e., get rid of the entire <code>case 100</code> and
<code>case 101</code> handlers.)
Again, just let the dialog manager do the usual thing,
and everything will work out just fine.
</p>
<p>
It's great when you can fix a bug by deleting code.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1125403">
				<div id="div-comment-1125403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140522-00/?p=933#comment-1125403">
			May 22, 2014 at 7:04 am</a>		</div>

		<p>Ah yes auto radio buttons. So many landmines.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1125413">
				<div id="div-comment-1125413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140522-00/?p=933#comment-1125413">
			May 22, 2014 at 7:21 am</a>		</div>

		<p>And just why is Microsoft mucking with the radio buttons in my auto? I can change the station and volume just fine by myself&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1125463">
				<div id="div-comment-1125463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140522-00/?p=933#comment-1125463">
			May 22, 2014 at 10:11 am</a>		</div>

		<p>&quot;This is a configuration that exists nowhere in nature&quot;? How about check the second button, then push down mouse button on the first button then move the mouse pointer away</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125483">
				<div id="div-comment-1125483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@zd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140522-00/?p=933#comment-1125483">
			May 22, 2014 at 12:04 pm</a>		</div>

		<p>Of course it doesn&#39;t exist in nature. It&#39;s man-made if a human is there to push the mouse. Or a cat.</p>
<p>:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1125503">
				<div id="div-comment-1125503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140522-00/?p=933#comment-1125503">
			May 22, 2014 at 12:14 pm</a>		</div>

		<p>&gt;And just why is Microsoft mucking with the radio buttons in my auto?</p>
<p>Only if you have Ford Sync (Badum tschhh). I heard they gave up on MS, though. Not surprising.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zlynx odd alt thread-odd thread-alt depth-1" id="comment-1125523">
				<div id="div-comment-1125523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140522-00/?p=933#comment-1125523">
			May 22, 2014 at 12:57 pm</a>		</div>

		<p>Cats are great for pushing buttons. Focus the &quot;I Agree&quot; button then go off and do something. Come back to the cat sitting on the space bar.</p>
<p>&quot;EULA? What EULA?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1125553">
				<div id="div-comment-1125553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ThomasX</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140522-00/?p=933#comment-1125553">
			May 22, 2014 at 10:53 pm</a>		</div>

		<p>&gt; The fix is to put focus on the second radio button as well as setting the check box. In fact, &gt; you can accomplish both by setting the focus to the second radio button</p>
<p>No. The fix is to separate focus management from the checked state. The concept is called separation of concerns.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125563">
				<div id="div-comment-1125563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140522-00/?p=933#comment-1125563">
			May 23, 2014 at 12:07 am</a>		</div>

		<p>@ThomasX:</p>
<p>The link here is focus management and user input, which indirectly leads to the checked state. Focus changes with keyboard and mouse input, so the question is, did the focus change occur because of user input at a weird time? Unless the dialog box tracks its history to some great deal of depth, it would probably not know this and does what it thinks is best.</p>
<p>The program ended up putting the dialog into an inconsistent state that should only occur with user input, and the dialog box thus acted as it thought was right. So then would you take focus out of the picture altogether and then have possible user complaints?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1125593">
				<div id="div-comment-1125593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140522-00/?p=933#comment-1125593">
			May 23, 2014 at 3:50 am</a>		</div>

		<p>I don&#39;t understand what problem the check on focus behaviour of autoradiobuttons is trying to solve.</p>
<p>The emulation of radio buttons used in Firefox&#39;s dialogs works the other way around, so although you can still use zd&#39;s method to temporarily split the focus from the selection, it will be set back to the selected button the next time the group is focused.</p>
<div class="post">[<em>Letting you change radio buttons with the arrow keys. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125783">
				<div id="div-comment-1125783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140522-00/?p=933#comment-1125783">
			May 24, 2014 at 4:36 am</a>		</div>

		<p>Ah, of course: arrow keys can be used to navigate within a groupbox of controls; I&#39;d forgotten that that feature wasn&#39;t specific to radiobuttons. (I can&#39;t say that I&#39;ve ever used it for other elements.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

