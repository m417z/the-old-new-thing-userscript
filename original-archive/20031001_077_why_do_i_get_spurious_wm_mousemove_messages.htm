<html>
<head>
<title>Why do I get spurious WM_MOUSEMOVE messages?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why do I get spurious WM_MOUSEMOVE messages?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 1, 2003 / year-entry #78</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20031001-00/?p=42343</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In order to understand this properly, it helps to know where WM_MOUSEMOVE messages come from. When the hardware mouse reports an interrupt, indicating that the physical mouse has moved, Windows determines which thread should receive the mouse move message and sets a flag on that thread's input queue that says, "The mouse moved, in case...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>         In order to understand this properly, it helps to know where <code>WM_MOUSEMOVE</code> messages         come from.      </p>
<p>         When the hardware mouse reports an interrupt, indicating that the physical mouse has         moved, Windows determines which thread should receive the mouse move message and sets         a flag on that thread's input queue that says, "The mouse moved, in case anybody cares."         (Other stuff happens, too, which we will ignore here for now. In particular, if a         mouse button event arrives, a lot of bookkeeping happens to preserve the virtual input         state.)      </p>
<p>         When that thread calls a message retrieval function like <code>GetMessage</code>,         and the "The mouse moved" flag is set, Windows inspects the mouse position and does         the work that is commonly considered to be part of mouse movement: Determining the         window that should receive the message, changing the cursor, and determining what         type of message to generate (usually <code>WM_MOUSEMOVE</code> or perhaps <code>WM_NCMOUSEMOVE</code>).      </p>
<p>         If you understand this, then you already see the answer to the question, "Why does         my program not receive all mouse messages if the mouse is moving too fast?"      </p>
<p>         If your program is slow to call <code>GetMessage</code>, then multiple mouse interrupts         may arrive before your program calls <code>GetMessage</code> to pick them up. Since         all that happens when the mouse interrupt occurs is that a flag is set, if two interrupts         happen in succession without a message retrieval function being called, then the second         interrupt will merely set a flag that is already set, which has no effect. The net         effect is that the first interrupt acts as if it has been "lost" since nobody bothered         to pick it up.      </p>
<p>         You should also see the answer to the question, "How fast does Windows deliver mouse         movement messages?"      </p>
<p>         The answer is, "As fast as you want." If you call <code>GetMessage</code> frequently,         then you get mouse messages frequently; if you call <code>GetMessage</code> rarely,         then you get mouse messages rarely.      </p>
<p>         Okay, so back to the original question, "Why do I get spurious WM_MOUSEMOVE messages?"      </p>
<p>         Notice that the delivery of a mouse message includes lots of work that is typically         thought of as being part of mouse movement. Often, Windows wants to do that follow-on         work even though the mouse hasn't actually moved. The most obvious example is when         a window is shown, hidden or moved. When that happens, the mouse cursor may be over         a window different from the window it was over previously (or in the case of a move,         it may be over a different part of the same window). Windows needs to recalculate         the mouse cursor (for example, the old window may have wanted an arrow but the new         window wants a pointy finger), so it <i>artificially sets the "The mouse moved, in         case anybody cares" flag</i>. This causes all the follow-on work to happen, a side-effect         of which is the generation of a spurious <code>WM_MOUSEMOVE</code> message.      </p>
<p>     So if your program wants to detect whether the mouse has moved, you need to add a     check in your <code>WM_MOUSEMOVE</code> that the mouse position is different from     the position reported by the previous <code>WM_MOUSEMOVE</code> message.  </body></p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-126093">
				<div id="div-comment-126093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PeterM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031001-00/?p=42343#comment-126093">
			October 2, 2003 at 2:43 pm</a>		</div>

		<p>Interesting.  I&#8217;m still a bit confused though.  You say that Windows sends extra WM_MOUSEMOVE messages for things like showing, hiding, etc.  However, if you use Spy++ and monitor pretty much any window, you&#8217;ll see that even if the mouse is just sitting over the window (without moving), that window gets about two WM_MOUSEMOVE message every second.  What sort of things does Windows need to do when the mouse is stationary?</p>
<p>So, is this basically a case where new functions got grafted onto the OS and the programmers found that WM_MOUSEMOVE was a convenient place to hook into without causing compatibility problems?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-126103">
				<div id="div-comment-126103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031001-00/?p=42343#comment-126103">
			October 2, 2003 at 4:07 pm</a>		</div>

		<p>I&#8217;m not getting any WM_MOUSEMOVE messages when the machine is idle and the mouse isn&#8217;t moving. Perhaps there is some &quot;mouse enhancement&quot; program that is causing this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-126113">
				<div id="div-comment-126113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.geary.com/' rel='external nofollow' class='url'>Michael Geary</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031001-00/?p=42343#comment-126113">
			October 3, 2003 at 1:24 am</a>		</div>

		<p>I got bit badly by this on a custom project a while back. I needed to detect when the user was not doing anything with the computer, so I installed systemwide hooks to watch for keyboard and mouse messages. It worked fine except in some rare situations. Finally we figured out that my code was getting tripped up when an OpenGL screen saver was running: It was getting WM_MOUSEMOVE messages repeatedly at the same cursor position. So I put in the test to see if the mouse position had actually changed, and all was well after that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-126123">
				<div id="div-comment-126123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PeterM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031001-00/?p=42343#comment-126123">
			October 3, 2003 at 3:08 pm</a>		</div>

		<p>I went and tried the Spy++ experiment again today.  For some reason, I had very little activity.  I will check this out from time to time to see if I can find any reason why I had 2 WM_MOUSEMOVE messages a second yesterday (with the mouse stationary) and only one every few seconds today.  As for &quot;mouse enhancement&quot;, I&#8217;m not running anything I&#8217;m aware of.  I&#8217;ll double check and see what I can find.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-174133">
				<div id="div-comment-174133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Alford</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031001-00/?p=42343#comment-174133">
			May 14, 2004 at 8:22 am</a>		</div>

		<p>I had this problem. I was getting at least 2 WM_MOUSEMOVE messages every second to any window in my application when the mouse was over it, even if the mouse was not moving. </p>
<p>Could not track down the problem any where.</p>
<p>After about an hour or two of trying (and reading this page) I noticed PeterM had the problem go away the next day.</p>
<p>I went for a total restart of my machine, and Dev environment, and the problem went away. I suspect that it was either a problem with the Dev Environment (MSVC++), or something deeper in the OS. </p>
<p>If you get this problem, i sugest you try a restart before spending 2 hours on trying to find the cause.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-443293">
				<div id="div-comment-443293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/11/17/1094116.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031001-00/?p=42343#comment-443293">
			November 17, 2006 at 10:00 am</a>		</div>

		<p>The division of labor.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-508753">
				<div id="div-comment-508753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/lixiong/archive/2007/05/28/how-a-single-shellexecute-call-opens-a-txt-file-with-another-gif-open-unexpectedly.aspx' rel='external nofollow' class='url'>Li Xiong</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031001-00/?p=42343#comment-508753">
			May 28, 2007 at 9:08 pm</a>		</div>

		<p>Problem Description: A customer called in, complained angrily. “A call to ShellExecute API, passing in</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-688733">
				<div id="div-comment-688733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.cnblogs.com/WarrenTang/archive/2008/05/07/1186150.html' rel='external nofollow' class='url'>Warren Tang</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031001-00/?p=42343#comment-688733">
			December 2, 2008 at 2:48 am</a>		</div>

		<p>MessageQueue TheAlgorithmforExtractingMessagesfromaThread&#8217;sQueue</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

