<html>
<head>
<title>Some questions about unflushed data and calling FlushFileBuffers on a new handle to a file</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Some questions about unflushed data and calling FlushFileBuffers on a new handle to a file</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 24, 2017 / year-entry #122</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170524-00/?p=96215</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Will it get flushed out eventually?</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Consider the following sequence of events:
</p>
<ol>
<li>Process A opens a file with <code>Create&shy;File</code>
    with attributes that include <i>neither</i>
    <code>FILE_FLAG_NO_BUFFERING</code>
    nor
    <code>FILE_FLAG_WRITE_THROUGH</code>.
</li>
<li>Process A writes to the file with <code>Write&shy;File</code>.
    These writes are internally buffered since we didn't disable buffering.
</li>
<li>Process A crashes without calling <code>Close&shy;Handle</code>,
    and before the operating system's internal buffers
    are flushed to disk.
</li>
</ol>
<p>
First question:
Under these conditions, will the data written in step&nbsp;2
be lazy-written to disk?
Or is it at risk of being lost forever because the handle wasn't closed?
</p>
<p>
Let's look at the last part first.
Whether the process closed the handle before crashing doesn't affect
the story, because the kernel will close all the handles as part of
process cleanup.
The handle does get closed eventually.
Whether the handle closure was done explicitly by the app or implicitly
by the kernel doesn't affect the answer.
</p>
<p>
Okay, now let's look at the first part:
Yes,
the data written in step&nbsp;2 will eventually be
lazy-written to disk,
assuming your system doesn't crash before then.
</p>
<p>
And that's the middle part of the question:
The data is at risk of being lost forever,
but not because the handle wasn't closed.
It's at risk of being lost forever because the system
might crash before it gets flushed out.
</p>
<p>
Okay, let's extend the scenario:
</p>
<ol>
<li VALUE="4">Before the operating system flushes its internal
    buffers naturally,
    Process B opens the same file, with the same attributes.
</li>
<li>Process B calls <code>Flush&shy;File&shy;Buffers</code>.
</li>
</ol>
<p>
Does this call to <code>Flush&shy;File&shy;Buffers</code>
cause the data written by Process A to be flushed to disk?
</p>
<p>
Yes.
A call to
<code>Flush&shy;File&shy;Buffers</code>
will flush data for that file,
even if the data was written by a different handle.
</p>
<p>
If
<code>Flush&shy;File&shy;Buffers</code>
is never called, then the operating system will flush
the buffer at its convenience.
</p>
<p>
<b>Note</b>: In step 2, the relevant call is
<code>Write&shy;File</code>.
If you write the data to the file using a runtime-provided function like
<code>fwrite</code>,
then that data might be sitting in the runtime's buffer
without ever triggering a
<code>Write&shy;File</code>.
Only when the data is written with
<code>Write&shy;File</code>
does the data actually reach the operating system's buffers.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1297515">
				<div id="div-comment-1297515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170524-00/?p=96215#comment-1297515">
			May 24, 2017 at 8:19 am</a>		</div>

		<p>Different handle to the same open file object or different handle to the same open file object? You should be clearer, even if only one is what you&#8217;ve possibly meant.</p>
<p>Also note that WriteFile has to complete before the system will ensure that the data will not be lost unless the system crashes.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1297535">
				<div id="div-comment-1297535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sergei Vorobiev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170524-00/?p=96215#comment-1297535">
			May 24, 2017 at 1:42 pm</a>		</div>

		<p>Those buffers belong to stream control block, not to file object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1298627">
				<div id="div-comment-1298627" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wombat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170524-00/?p=96215#comment-1298627">
			June 4, 2017 at 10:50 pm</a>		</div>

		<p>&#8220;Different handle to the same open file object or different handle to the same open file object?&#8221;</p>
<p>What&#8217;s the difference? All I can see is one has D for different, and the other has d. Otherwise you have said the same thing twice.</p>
<p>I&#8217;m sure you meant something, but I cannot tell what.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1297525">
				<div id="div-comment-1297525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">StefanH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170524-00/?p=96215#comment-1297525">
			May 24, 2017 at 9:51 am</a>		</div>

		<p>I must have been doing to much Win32 programming, because I usually gain a lot of insight from this blog. Today, however, I already knew the answers and couldn&#8217;t imagine it working any other way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1 parent" id="comment-1297575">
				<div id="div-comment-1297575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170524-00/?p=96215#comment-1297575">
			May 25, 2017 at 1:55 am</a>		</div>

		<p>Need some clarification.</p>
<p>Does it mean &#8220;the handle to Process A and B points to the same file buffer&#8221;, or is it just that &#8220;the call to FlushFileBuffers() will flush all file buffers attached to the underlying file record regardless of which file handle you&#8217;re calling the function from&#8221;?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1297625">
				<div id="div-comment-1297625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">StefanH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170524-00/?p=96215#comment-1297625">
			May 25, 2017 at 9:55 am</a>		</div>

		<p>There is only one file object and hence one file buffer even when multiple processes have multiple handles to it. Hence, if you call FlushFileBuffers(), that&#8217;s the buffer that&#8217;s flushed.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1297835">
				<div id="div-comment-1297835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sergei Vorobiev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170524-00/?p=96215#comment-1297835">
			May 26, 2017 at 10:19 pm</a>		</div>

		<p>As long as you don&#8217;t mind I put on my kernel-colored glasses.</p>
<p>FILE_OBJECT is what HANDLE is in kernel. there are multiple streams in a file. And cache is fully coherent. Therefore there is one Stream Control Block. The File Objects point to it. Your handles are um nicknames for File Objects.</p>
<p>Yes, there is one SCB. You are correct in the assumption that multiple users of the same stream see the same bytes.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1297615">
				<div id="div-comment-1297615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170524-00/?p=96215#comment-1297615">
			May 25, 2017 at 8:13 am</a>		</div>

		<p>Does WriteFile on a file opened with FILE_FLAG_NO_BUFFERING also updates/invalidates any copies of the data in cache? I would expect that for data coherency reasons.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1297666">
				<div id="div-comment-1297666" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Some Handles Don't Flush?</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170524-00/?p=96215#comment-1297666">
			May 25, 2017 at 4:42 pm</a>		</div>

		<p>&#8211;&#8220;Process B opens the same file, with the same attributes&#8221;<br />
But if Process B uses different attributes for the same file, this behavior is not guaranteed?   I could not find anything in FlushFileBuffers, CreateFile, SetFileAttributes, &#8220;Creating and Opening Files&#8221;, that said this.  It seems sensible that Flush&#8221;File&#8221;Buffers would flush all buffers associated with the &#8220;file object&#8221;, no matter which handle was used to invoke the action.  But, if some handles to the file don&#8217;t invoke the same action, because different attributes were specified when the handle was created, that seems like something one should know.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1297845">
				<div id="div-comment-1297845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sergei Vorobiev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170524-00/?p=96215#comment-1297845">
			May 26, 2017 at 10:21 pm</a>		</div>

		<p>It is guaranteed. There is one Stream Control Block.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1297855">
				<div id="div-comment-1297855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sergei Vorobiev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170524-00/?p=96215#comment-1297855">
			May 26, 2017 at 10:26 pm</a>		</div>

		<p>Raymond, can we have the next installment discussing FlushFileBuffers() and network shares?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

