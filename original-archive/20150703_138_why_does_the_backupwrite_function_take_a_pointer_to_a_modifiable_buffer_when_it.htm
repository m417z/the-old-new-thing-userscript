<html>
<head>
<title>Why does the BackupWrite function take a pointer to a modifiable buffer when it shouldn't be modifying the buffer?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does the BackupWrite function take a pointer to a modifiable buffer when it shouldn&#8217;t be modifying the buffer?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 3, 2015 / year-entry #139</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The Backup­Write function takes a non-const pointer to the buffer to be written to the file being restored. Will it actually modify the buffer? Assuming it doesn't, why wasn't it declared const? It would be much more convenient if it took a const pointer to the buffer, so that people with const buffers didn't have...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The
<a HREF="http://msdn.microsoft.com/en-us/library/windows/desktop/aa362511(v=vs.85).aspx">
<code>Backup&shy;Write</code></a>
function takes a non-const pointer to the buffer to be written
to the file being restored.
Will it actually modify the buffer?
Assuming it doesn't,
why wasn't it declared const?
It would be much more convenient if it took a const pointer
to the buffer,
so that people with const buffers didn't have to
<code>const_<wbr>cast</code> every time they called the function.
Would changing the parameter from non-const to const create
any compatibility problems?
</p>
<p>
Okay, let's take the questions in order.
</p>
<p>
Will it actually modify the buffer?
No.
</p>
<p>
Why wasn't it declared const?
My colleague
<a HREF="http://blogs.msdn.com/b/aaron_margosis/">
Aaron Margosis</a>
explained that
the function dates back to Windows NT 3.1,
when const-correctness was rarely considered.
A lot of functions from that area
(particularly in the kernel)
suffer from the same problem.
For example, the computer name passed to the
<code>Reg&shy;Connect&shy;Registry</code> function
is a non-const pointer even though the
function never writes to it.
</p>
<p>
Last question:
Can the parameter be changed from non-const to const
without breaking compatibility?
</p>
<p>
It would not cause problems from a binary compatibility
standpoint, because a const pointer and a non-const pointer
take the same physical form in Win32.
However, it breaks source code compatiblity.
Consider the following code fragment:
</p>
<pre>
BOOL WINAPI TestModeBackupWrite(
  HANDLE hFile,
  LPBYTE lpBuffer,
  DWORD nNumberOfBytesToWrite,
  LPDWORD lpNumberOfBytesWritten,
  BOOL bAbort,
  BOOL bProcessSecurity,
  LPVOID *lpContext)
{
 ... simulate a BackupWrite ...
 return TRUE;
}

BOOL (WINAPI *BACKUPWRITEPROC)(HANDLE, LPBYTE, DWORD,
                 LPDWORD, BOOL, BOOL, LPVOID *);
BACKUPWRITEPROC TestableBackupWrite;

void SetTestMode(bool testing)
{
 if (testing) {
  TestableBackupWrite = TestModeBackupWrite;
 } else {
  TestableBackupWrite = BackupWrite;
 }
}

</pre>
<p>
The idea here is that the program can be run in test mode,
say to do a simulated restore.
(You see this sort of thing a lot with DVD-burning software.)
The program uses <code>Testable&shy;Backup&shy;Write</code>
whenever it wants to write to a file being restored from backup.
In test mode,
<code>Testable&shy;Backup&shy;Write</code> points to the
<code>Test&shy;Mode&shy;Backup&shy;Write</code> function;
in normal mode, it points to the <code>Backup&shy;Write</code>
function.
</p>
<p>
If the second parameter were changed from
<code>LPBYTE</code> to <code>const BYTE *</code>,
then the above code would hit a compiler error.
</p>
<p>
Mind you, maybe it's worth breaking some source code in order
to get better const-correctness,
but for now, the cost/benefit tradeoff biases toward
leaving things alone.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1238836">
				<div id="div-comment-1238836" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238836">
			July 3, 2015 at 8:51 am</a>		</div>

		<p>Speaking of const BYTE*, it&#39;s funny that the core headers do not declare LPCBYTE, but that you have to include winscard.h to get it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1221891">
				<div id="div-comment-1221891" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1221891">
			July 3, 2015 at 9:50 am</a>		</div>

		<p>The cost of not changing the prototype is that anyone who has genuinely read-only data that they wish to add to the backup is forced to allocate a buffer and make a writeable copy to feed to the function. Merely using a cast isn&#39;t sufficient because the API doesn&#39;t promise not to write to the buffer and we&#39;re good programmers who don&#39;t exploit undocumented behaviour (however plausible that behaviour might be).</p>
<p>In contrast, the cost of changing the prototype (at least in the example here) *is* simply a cast.</p>
<p>My guess is that the number of people who would benefit from a change in prototype far exceeds the number who would be inconvenienced and that the benefit greatly exceeds the inconvenience.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1238826">
				<div id="div-comment-1238826" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238826">
			July 3, 2015 at 10:50 am</a>		</div>

		<p>The answer to Ken Hagan&#39;s complaint is simple. Document the buffer is never written to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1238816">
				<div id="div-comment-1238816" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238816">
			July 3, 2015 at 11:58 am</a>		</div>

		<p>Well the SAL annotation on the parameter says it&#39;s an &#39;in&#39;, so I guess it has that going for it in addition to the documentation. Kind of like the annotation on the command line parameter for CreateProcess says in/out, which is not immediately obvious and could perhaps lead one to assume things incorrectly if it were not there. I&#39;m guessing Microsoft would fix any incorrect SAL annotations that they would find or be made aware of.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1221881">
				<div id="div-comment-1221881" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">VinDuv</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1221881">
			July 3, 2015 at 12:02 pm</a>		</div>

		<p>Iâ€™m wondering why the TestableBackupWrite = BackupWrite; assignment is not allowed (after the proposed change to BackupWrite).</p>
<p>The modified BackupWrite is allowed to modify fewer of its arguments than TestableBackupWrite; calls to TestableBackupWrite can be replaced with calls to BackupWrite without introducing compilation issues (since a X* can be silently converted to a const X*). So shouldnâ€™t the compiler allow the assignment? Is it just an arbitrary limitation of the C type checking system, or am I missing something?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1238806">
				<div id="div-comment-1238806" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238806">
			July 3, 2015 at 2:07 pm</a>		</div>

		<p>@VinDuv: Even if that limitation did not exist, people could write stuff like:</p>
<p>auto TestableBackupWrite = BackupWrite;</p>
<p>if (testing) TestableBackupWrite = TestModeBackupWrite;</p>
<p>and that would try to assign the non-const parameter version to a const parameter type.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1238796">
				<div id="div-comment-1238796" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238796">
			July 3, 2015 at 4:57 pm</a>		</div>

		<p>It&#39;s been a while since I&#39;ve done any C, but I think the example code is missing the `typedef` keyword when declaring the function pointer type. &nbsp;Not that it matters much, as I can&#39;t see many people trying to use this sample.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1238776">
				<div id="div-comment-1238776" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238776">
			July 4, 2015 at 12:58 pm</a>		</div>

		<p>@VinDuv: Known bug in C language specification.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1238766">
				<div id="div-comment-1238766" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238766">
			July 6, 2015 at 6:58 am</a>		</div>

		<p>&quot;&#8230;but for now, the cost/benefit tradeoff biases toward leaving things alone&quot;</p>
<p>The chief problem with that line of thinking, and I see it all the time, is that the cost/benefit analysis always ignores the fact that the longer you wait to change something, the harder it becomes.</p>
<p>Better to just be honest and say &quot;&#8230;but the cost/benefit tradeoff will never allow this to be changed.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1221871">
				<div id="div-comment-1221871" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Riccio</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1221871">
			July 6, 2015 at 7:39 am</a>		</div>

		<p>@meh CreateProcess arguments *do* actually need to be writable, as Raymond&#39;s written about before. And no, Microsoft is (with lots of respect!) pretty bad about fixing broken SAL in headers.</p>
<p>Speaking of SAL, there&#39;s a specific annotation for this sort of backwards-compatibility problem: `_Const_`</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1238736">
				<div id="div-comment-1238736" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Timothy Byrd (ETAP)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238736">
			July 6, 2015 at 10:40 am</a>		</div>

		<p>I&#39;ve been in C++ land too long.</p>
<p>Why not add an override that takes a const pointer?</p>
<p>(And have one method call the other.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1221861">
				<div id="div-comment-1221861" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Timothy Byrd (ETAP)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1221861">
			July 6, 2015 at 10:42 am</a>		</div>

		<p>I&#39;ve been in C++ land too long.</p>
<p>Why not add an *overload* that takes a const pointer?</p>
<p>(And have one method call the other.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1238646">
				<div id="div-comment-1238646" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238646">
			July 7, 2015 at 12:39 am</a>		</div>

		<p>Because no matter how hard Microsoft tries to ditch it, C isn&#39;t gone. The function is extern &quot;C&quot; as library functions must be, so it would have to be inline&#8230; which could still cause problems with function pointers.</p>
<p>A worse case where const-correctness is concerned is DrawText and its flag to modify the text, despite taking a const pointer. So does ShellAboutW, but this one isn&#39;t supposed to be caÄºled by user code anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1238616">
				<div id="div-comment-1238616" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238616">
			July 7, 2015 at 7:49 am</a>		</div>

		<p>@Alexander Riccio: As Raymond did indeed write, only CreateProcessW needs to have a writeable input. &nbsp;The ANSI version CreateProcessA can take a read-only input since it constructs a temporary buffer for converting the string to Unicode, which is then writeable.</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2009/06/01/9673254.aspx">blogs.msdn.com/&#8230;/9673254.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1238186">
				<div id="div-comment-1238186" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238186">
			July 8, 2015 at 3:31 pm</a>		</div>

		<p>Seems like this is more of a &quot;const/benefit analysis&quot;&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1238136">
				<div id="div-comment-1238136" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238136">
			July 9, 2015 at 12:21 am</a>		</div>

		<p>For CreateProcessW, the right migration to const correctness would be: Deprecate the current call, and introduce a new one which have separate parameters for the executable path name and for the rest of the command line. This way, there would be no need for CreateProcessW to guess where the executable path name ends (when &quot; is not used as the first character).</p>
<p>Not only could the new parameters be flagged as &quot;const&quot;, also this terrible guessing would be eliminated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1238096">
				<div id="div-comment-1238096" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Burov Dmitry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1238096">
			July 9, 2015 at 6:20 am</a>		</div>

		<p>i think you can have both function declarations in the header-files, making it look like an overloaded by parameters function ?</p>
<p>Somewhat similr to how you have both declarations for CreateProcessW and for CreateProcess while it is not two functions and a single one with an optional shortcut for it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1237976">
				<div id="div-comment-1237976" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150703-00/?p=45221#comment-1237976">
			July 9, 2015 at 8:39 am</a>		</div>

		<p>@CreateProcessW: That&#39;s an awful lot of work for very little benefit, and CreateProcess already takes separate arguments for the executable path and the command line, although using both is optional for callers; perhaps you mean to change the semantics to make them both required? &nbsp;Remember, all features start at -100 points.</p>
<p>@Burov Dmitry: Adding an overload with a const (obviously in C++ only) will help in many situations, but it can cause code which previously compiled correctly to now give compiler errors. &nbsp;For example, if you tried to take the address of CreateProcess in certain contexts, or if you tried to use it as a template parameter, the overload resolution might fail.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

