<html>
<head>
<title>Why does the CreateProcess function modify its input command line?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does the CreateProcess function modify its input command line?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 1, 2009 / year-entry #157</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>27</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">One of the nasty gotchas of the CreateProcess function is that the lpCommandLine parameter must be a mutable pointer. If you pass a pointer to memory that cannot be written to (for example, a pointer to a page that is marked PAGE_READONLY), then you might crash. Commenter Ritchie wonders why this parameter is so weird....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>One of the nasty gotchas of the <code>CreateProcess</code> function is that the <code>lpCommandLine</code> parameter must be a mutable pointer. If you pass a pointer to memory that cannot be written to (for example, a pointer to a page that is marked <code>PAGE_READONLY</code>), then you might crash. Commenter Ritchie  <a href="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#578287"> wonders why this parameter is so weird</a>.</p>
<p> Basically, somebody back in the 1980's wanted to avoid allocating memory. (Another way of interpreting this is that somebody tried to be a bit too clever.) </p>
<p> The <code>CreateProcess</code> temporarily modifies the string you pass as the <code>lpCommandLine</code> in its attempt to figure out where the program name ends and the command line arguments begin. Now, it could have made a copy of the string and made its temporary modifications to the copy, but hey, if you modify the input string directly, then you save yourself an expensive memory allocation operation. Back in the old days, <a href="http://blogs.msdn.com/oldnewthing/archive/2004/08/23/218837.aspx"> people worried about avoiding memory allocations</a>, so this class of micro-optimization is the sort of thing people worried about as a matter of course. Of course, nowadays, it seems rather antiquated. </p>
<p> Now, there may also be good technical reasons (as opposed to merely performance considerations) for avoiding allocating memory on the heap. When a program crashes, the <a href="http://www.microsoft.com/technet/prodtechnol/windows2000serv/reskit/regentry/11498.mspx"> just in time debugger is launched</a> with the <code>CreateProcess</code> function, and you don't want to allocate memory on the heap if the reason the  program crashed is that <i>the heap is corrupted</i>. Otherwise, you can get yourself into a recursive crash loop: While trying to launch the debugger, you crash, which means you try to launch the debugger to debug the new crash, which again crashes, and so on. The original authors of the <code>CreateProcess</code> function were careful to avoid allocating memory off the heap, so that in the case the function is being asked to launch the debugger, it won't get waylaid by a corrupted heap. </p>
<p> Whether these concerns are still valid today I am not sure, but it was those concerns that influenced the original design and therefore the interface. </p>
<p> Why is it that only the Unicode version is affected? Well, because the ANSI version of the function just converts its strings to Unicode and the calls the Unicode version of the function. Consequently, the ANSI version of the function happens to implement the workaround as a side effect of its original goal: The string passed to the Unicode version of the function is a temporary string! </p>
<p> <b>Exercise</b>: Why is it okay for the ANSI version of the <code>CreateProcess</code> to allocate a temporary string from the heap when the Unicode function cannot? </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-740693">
				<div id="div-comment-740693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jmarkp.co.uk' rel='external nofollow' class='url'>jMarkP</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-740693">
			June 1, 2009 at 10:11 am</a>		</div>

		<p>My psychic Microsoft compatibility hack sense is tingling and I&#8217;m guessing the answer has something to do with a program which relies on the Unicode function modifying its parameter somehow.</p>
<p>Am I warm?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-740703">
				<div id="div-comment-740703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://robmanderson.blogspot.com' rel='external nofollow' class='url'>Rob Manderson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-740703">
			June 1, 2009 at 10:20 am</a>		</div>

		<p>I&#8217;d guess the ANSI version can do a string allocate for two reasons:</p>
<p>1 &#8211; It&#8217;s a wrapper &#8211; the allocation is done &#8216;before&#8217; calling into the real CreateProcess.</p>
<p>2 &#8211; The debugger will be launching the Unicode version directly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-740723">
				<div id="div-comment-740723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-740723">
			June 1, 2009 at 10:32 am</a>		</div>

		<p>Since the ANSI version is essentially a shim utility library on top of the UNICODE kernel, a crash in ANSI functions will not cause the recursive crash you talk about.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-740763">
				<div id="div-comment-740763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-740763">
			June 1, 2009 at 10:58 am</a>		</div>

		<p>It looks like CreateProcessW does allocate from Peb-&gt;ProcessHeap to sort out the path. &nbsp;Not sure how long this has been the case, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-740783">
				<div id="div-comment-740783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-740783">
			June 1, 2009 at 12:00 pm</a>		</div>

		<p>I&#8217;ll chime in.</p>
<p>First, CreateProcessA doesn&#8217;t need a mutable string, because it will first be converted to an UNICODE string and then passed to CreateProcessW.</p>
<p>Second, you could allocate temporary storage on stack (using _alloca), or use VirtualAlloc which doesn&#8217;t depend on any usermode locks.</p>
<p>Third, the whole idea of running JIT launcher in a context of a failed process is flawed. At least, I hope it&#8217;s done in context of a dedicated thread (in which case you&#8217;ve got a meg of stack reserved, too, and can use _alloca).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-740843">
				<div id="div-comment-740843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">W</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-740843">
			June 1, 2009 at 1:57 pm</a>		</div>

		<p>Would a 64kB allocation on stack break something?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-740883">
				<div id="div-comment-740883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-740883">
			June 1, 2009 at 3:39 pm</a>		</div>

		<p>Simple, really. &nbsp;Nobody uses Unicode so there&#8217;s no reason to spend time fixing it!</p>
<p>I kid, I kid (well, kinda :)&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-740903">
				<div id="div-comment-740903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-740903">
			June 1, 2009 at 3:57 pm</a>		</div>

		<p>I suspect the length of the argument of CreateProcessA may not exceed MAX_PATH.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-740923">
				<div id="div-comment-740923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-740923">
			June 1, 2009 at 4:56 pm</a>		</div>

		<p>Is there any reason CreateProcessW couldn&#8217;t trap the write-fail exception and only then allocate memory? That would solve the problem of attempting to call it with a string from a page marked PAGE_READONLY, so at least you don&#8217;t get arbitrary failures.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-740973">
				<div id="div-comment-740973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MadQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-740973">
			June 1, 2009 at 8:19 pm</a>		</div>

		<p>Some programs also play around with the input command line. verclsid.exe seems to do this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-740983">
				<div id="div-comment-740983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NickPick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-740983">
			June 1, 2009 at 8:56 pm</a>		</div>

		<p>Exercise:</p>
<p>Explain why a design decision of CreateProcess function was probably not done by &quot;somebody back in the 1980s&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-740913">
				<div id="div-comment-740913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-740913">
			June 1, 2009 at 4:10 pm</a>		</div>

		<p>While we&#8217;re at it, what is the reason *not* to fix the contract for CreateProcess? Even if argument is changed from LPTSTR to LPCTSTR this should be backward compatible. Unless of course CreateProcess *still* modifies that memory&#8230;</p>
<div class=post>[<i>Changing the function prototype breaks existing source code. Try it: </p>
<pre>typedef BOOL (WINAPI *CREATEPROCESSFN)(
 LPCTSTR lpApplicationName,
 LPTSTR lpCommandLine,
 LPSECURITY_ATTRIBUTES lpProcessAttributes,
 LPSECURITY_ATTRIBUTES lpThreadAttributes,
 BOOL bInheritHandles,
 DWORD dwCreationFlags,
 LPVOID lpEnvironment,
 LPCTSTR lpCurrentDirectory,
 LPSTARTUPINFO lpStartupInfo,
 LPPROCESS_INFORMATION lpProcessInformation);

CREATEPROCESSFN DoCreateProcess = MyCreateProcess;

typedef BOOL WINAPI MyCreateProcess(
 LPCTSTR lpApplicationName,
 LPTSTR lpCommandLine,
 LPSECURITY_ATTRIBUTES lpProcessAttributes,
 LPSECURITY_ATTRIBUTES lpThreadAttributes,
 BOOL bInheritHandles,
 DWORD dwCreationFlags,
 LPVOID lpEnvironment,
 LPCTSTR lpCurrentDirectory,
 LPSTARTUPINFO lpStartupInfo,
 LPPROCESS_INFORMATION lpProcessInformation)
{
 if (!RedirectCreateProcess) {
  // disable trappingin in future callers
  DoCreateProcess = CreateProcess;
  return CreateProcess(&#8230;);
 }
 &#8230;
}
</pre>
<p>I learned this lesson the hard way. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-741003">
				<div id="div-comment-741003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-741003">
			June 2, 2009 at 12:31 am</a>		</div>

		<blockquote><p>
  &gt;&gt; Some programs also play around with the input command line. verclsid.exe seems to do this.
</p></blockquote>
<p>Isn&#8217;t command line is a copy? After all, the child process should access it in its own address space.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-741073">
				<div id="div-comment-741073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-741073">
			June 2, 2009 at 9:22 am</a>		</div>

		<blockquote><p>
  Is there any reason CreateProcessW couldn&#8217;t</p>
<p>  trap the write-fail exception and only then</p>
<p>  allocate memory? That would solve the problem</p>
<p>  of attempting to call it with a string from</p>
<p>  page marked PAGE_READONLY, so at least you</p>
<p>  don&#8217;t get arbitrary failures.
</p></blockquote>
<p>Well, I&#8217;d say that no-one gets arbitrary failures today, anyway. &nbsp;People who fail to read the documentation get exactly the failures that the documentation implied they&#8217;d get. &#8216;Unexpected by programmer X&#8217; != &#8216;arbitrary&#8217;.</p>
<p>And in any case, why futz around with an API that has managed to work adequately well for the past 16 years? &nbsp;Sure, it&#8217;s a little odd the first time you bump into it, but aren&#8217;t there better things to work on?</p>
<p>But if we are going to futz with CreateProcess, can we remove the mess that allows you to specify the image name EITHER through a separate parameter or as part of the command line?</p>
<p>(Joking&#8230; it&#8217;s way too late for that).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-741253">
				<div id="div-comment-741253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">peterchen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-741253">
			June 2, 2009 at 5:17 pm</a>		</div>

		<p>@Gabe &#8211; that would be worse: a function that promises not to modify memory, but does. (And if it doesn&#8217;t make that promise, there&#8217;s no point in fixing it).</p>
<p>waleri &#8211; interesting thought! MSDN doesn&#8217;t say anything about a limit, though.</p>
<p>Now, gotta chew through that sample&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-741393">
				<div id="div-comment-741393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brad</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-741393">
			June 2, 2009 at 11:12 pm</a>		</div>

		<p>Since people seem to have danced around the answer, is it:</p>
<p>The JIT debugger is always launched with CreateProcessW? (so that case can never allocate from the heap).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-741443">
				<div id="div-comment-741443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexey Borzenkov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-741443">
			June 3, 2009 at 2:27 am</a>		</div>

		<blockquote><p>
  Why is it okay for the ANSI version of the CreateProcess to allocate a temporary string
</p></blockquote>
<p>I&#8217;m not 100% sure, but from what I seen during numerous debugging sessions I think that all path related ANSI functions use the same thread-local buffer, so it is either already preallocated, or is not allocated at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-741473">
				<div id="div-comment-741473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-741473">
			June 3, 2009 at 4:24 am</a>		</div>

		<p>&#8220;When a program crashes, the just in time debugger is launched with the CreateProcess function, and you don&#8217;t want to allocate memory on the heap if the reason the program crashed is that the heap is corrupted.&#8221;</p>
<p>I do not follow that argument. It would only make sense if that command line memory were the only allocation done by CreateProcess. If so, where would CreateProcess get the process stack or the memory for the debugger image from?</p>
<p>Or is that debugger running in some zombie state all the time, and was CreateProcess hacked to not really launch it, but revive it from the dead? If so, why would one add that code to CreateProcess, rather than creating a new function &#8220;StartJITDebugger&#8221;?</p>
<div class=post>[<i>Um, the debugger is a separate process. Heap corruption is process-local. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-741533">
				<div id="div-comment-741533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-741533">
			June 3, 2009 at 9:45 am</a>		</div>

		<p>@Someone: when dealing with CreateProcess, you really have to think in terms of the calling, parent, process, and the child process it creates.</p>
<p>The article is talking about a buffer that CreateProcess is (not) creating in the context of the calling process. The process&#8217;s initial thread stack is not directly created by CreateProcess but by the process startup code in the kernel, in the context of the new process. The virtual memory for the program code is a shared-memory section backed by the program image file, which is paged in on demand.</p>
<p>I&#8217;m surprised that Kernel32&#8217;s default unhandled-exception code is creating the debugger process directly. I would have thought it would instead send a message to the Win32 subsystem to invoke a debugger on its behalf.</p>
<p>A debugger is just a standard Win32 program which calls DebugActiveProcess to debug another process, or creates a process with one of the DEBUG_PROCESS or DEBUG_ONLY_THIS_PROCESS flags. The debugger then calls WaitForDebugEvent to have Windows tell it about new threads, loaded or unloaded DLLs, debugging messages, thread exits, and exceptions. Breakpoints are set by modifying the code of the target process (with WriteProcessMemory) to place a breakpoint instruction at that location instead; that instruction causes an exception (code STATUS_BREAKPOINT, 0x80000003) to occur in the program, which is reported through WaitForDebugEvent.</p>
<p>To restart, the debugger replaces the breakpoint with the code that should have been at that location, sets the thread&#8217;s processor context to single-step (execute one instruction), then restarts with ContinueDebugEvent. A STATUS_SINGLE_STEP exception is then raised in the program, the debugger rewrites the breakpoint, and again continues execution to continue at full speed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-741833">
				<div id="div-comment-741833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jamie Anderson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-741833">
			June 3, 2009 at 7:08 pm</a>		</div>

		<p>I would hazard a guess that the ANSI wrapper functions in the kernel have their own private heap that they use to allocate memory. That would avoid the matter because any memory allocation will happen on a different heap to the one that&#8217;s been corrupted.</p>
<div class=post>[<i>What if the private heap is corrupted? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-741973">
				<div id="div-comment-741973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ruoldnewthing/archive/2009/06/01/createprocess.aspx' rel='external nofollow' class='url'>Блог Рэймонда Чена (перевод)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-741973">
			June 4, 2009 at 3:49 am</a>		</div>

		<p>Одна из неприятных особенностей функции CreateProcess состоит в том, что параметр lpCommandLine должен</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-742153">
				<div id="div-comment-742153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sarathc.wordpress.com/2009/06/05/why-createprocess-commandline-parameter-should-not-be-read-only-memory/' rel='external nofollow' class='url'>Why CreateProcess commandline parameter should not be read-only memory? &laquo; Sharing my thoughts&#8230;</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-742153">
			June 4, 2009 at 3:09 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://sarathc.wordpress.com/2009/06/05/why-createprocess-commandline-parameter-should-not-be-read-only-memory/" rel="nofollow">http://sarathc.wordpress.com/2009/06/05/why-createprocess-commandline-parameter-should-not-be-read-only-memory/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-742223">
				<div id="div-comment-742223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-742223">
			June 4, 2009 at 5:42 pm</a>		</div>

		<p>@Mike Dimmick: thanks for the explanation. I knew most of what you said, except for what surprised you, too: that, apparently, the &#8216;crashed&#8217; program launches the debugger (or, probably more precisely: the kernel calls CreateProcess to start the debugger while in the context of the crashed application). But even with that, I do not see why one would have to modify the string you pass as the lpCommandLine to figure out where the program name ends and the command line arguments begin.</p>
<p>The first thing I can think of is that it is not the figuring out, but the use of the program name as an argument to some other system call (FindFile?) that requires the modification. I guess the change would be to overwrite a space in the command line with a NULL. I have seen people do the reverse on Unix systems: creating a program&#8217;s command line by replacing the NULLs at the end of all but the last of the argv entries by a space. I doubt that that is guaranteed to work, but it did on the one system where I saw somebody do that.</p>
<p>A second possibility could be that CreateProcess does some Unicode normalization in-place. That would also explain why the the ANSI version never modifies that argument.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-742273">
				<div id="div-comment-742273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-742273">
			June 4, 2009 at 9:32 pm</a>		</div>

		<p>&quot;I guess the change would be to overwrite a space in the command line with a NULL.&quot;</p>
<p>Yes, that&#8217;s what the documentation for CreateProcess says.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-742573">
				<div id="div-comment-742573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-742573">
			June 5, 2009 at 3:04 pm</a>		</div>

		<p>Wait&#8230; what if there is no space between the program name and arguments &#8211; like &quot;cmd/?&quot; (or any /flags generally) &#8211; where does it put the null then?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-742723">
				<div id="div-comment-742723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-742723">
			June 6, 2009 at 6:01 am</a>		</div>

		<p>@Random832: Try typing &quot;cmd/?&quot; into the Run dialog text box and see what happens!</p>
<p>(Tested on Windows XP, can&#8217;t speak for Vista or any other versions&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-742933">
				<div id="div-comment-742933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">teo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090601-00/?p=18083#comment-742933">
			June 8, 2009 at 8:00 am</a>		</div>

		<p>While CreateProcess is peculiar, the real fun is in ShellExecuteEx. Yesterday, I had to code a self-elevating program. Basicaly it boilds down to:</p>
<p>if(!IsUserAnAdmin())</p>
<p>&nbsp;ShellExecute(&quot;runas&quot;, my-own-command-line)</p>
<p>Well, doh! It turns out that Windows (whose mantra used to be &quot;Easy stuff should be easy and hard stuff should be possible&quot;) considers this the hard stuff&#8230;</p>
<p>My first try:</p>
<p>ShellExecute(0, L&quot;runas&quot;, argv[0], GetCommandLine() &#8230; ), nope it won&#8217;t budge</p>
<p>2nd try:</p>
<p>ShellExecute(0, L&quot;runas&quot;, 0, GetCommandLine() &#8230;)</p>
<p>And so on and so forth. At the end I had to write a helper function which goes through the command line of the current process, builds a specially escaped, massaged, tangerine-flavoured, painted-white-and-pink &#8230; command line which after digested by the ShellExecute monstrosity will produce the one I started with. Btw, whoever designed the whole &quot;runas&quot; hack obviously decided that console applications are so out-of-fashion. What window handle a console app is supposed to feed it?</p>
<p>But that is just a minor hack, i fixed it in less than 15 mins. If you want to have a taste of Hell, go compile a program which should run on XP with Vista/2k8 Platform SDK and imports CreateVssBackupComponents() function. Now that is one fine mess. Where to start? The wrong documentation? The fact that on XP it&#8217;s exported as extern &quot;C++&quot;, which makes it exported with C++ mangled name, which obviously differs between 32 and 64 bit compilers and is not natively consumable by any other language in existence, being it another c++ compiler, delphi or what not? The most sickening part is the &quot;fix&quot; &#8211; in the form of an INLINE FUNCTION in the platform sdk headers; making it completely impossible to compile a program targeting XP using the official function name &#8230; Microsoft, Microsoft, what have I done to bring thy wrath upon me?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

