<html>
<head>
<title>The cost of continuously-visible affordances with dynamic states</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The cost of continuously-visible affordances with dynamic states</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 22, 2007 / year-entry #23</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Serge Wautier asks, "Why are the copy/cut/paste buttons not disabled when there's nothing to copy/cut/paste?", noting that the back/forward buttons do disable themselves when navigation is not possible in that direction. To get to this question, we'll first go back in time a bit to a world without toolbars. In those early days, these dynamic...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Serge Wautier asks, "<a href="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#410547">Why are the copy/cut/paste buttons not disabled when there's nothing to copy/cut/paste?</a>", noting that the back/forward buttons do disable themselves when navigation is not possible in that direction.</p>
<p> To get to this question, we'll first go back in time a bit to a world without toolbars. In those early days, these dynamic options such as copy/cut/paste appeared solely on the Edit menu. Since the contents of Edit menu were visible only when the user clicked on it, the cut/copy/paste options needed to be updated only when the menu was visible. In other words, during <code>WM_INITMENUPOPUP</code> handling. </p>
<p> This is also why it is somewhat risky to post <code>WM_COMMAND</code> messages which correspond to a menu item to a window which is not prepared for it. The only way an end-user can generate that <code>WM_COMMAND</code> message is by going through the menu: clicking the top-level menu to show the drop-down menu, then clicking on the menu item itself. Most programs do not maintain the menu item states when the menu is closed since there's no point in updating something the user can't see. Instead, they do it only in response to the <code>WM_INITMENUPOP</code> message. Lazy evaluation means that the user doesn't pay for something until they use it. In this case, paying for the cost of calculating whether the menu item should be enabled or not. Depending on the program, calculating whether a menu item should be enabled can turn out to be rather expensive, so it's natural to avoid doing it whenever possible. ("I can do nothing really fast.") </p>
<p> When toolbars showed up, things got more complicated. Now, the affordances are visible <strong>all the time</strong>, right there in the toolbar. How do you update something continuously without destroying performance? </p>
<p> The navigation buttons disable and enable themselves dynamically because the conditions that control their state satisfy several handy criteria. </p>
<ul>
<li>The program knows when the state has potentially changed.     (The program maintains the navigation history,     so it knows that the button states need to be recalculated     only when a navigation occurs.) </li>
<li>Computing the state is relatively cheap.     (All the program has to check is whether there is a previous     and next page in the navigation history     Since the navigation history is typically maintained as a     list, this is easy to do.) </li>
<li>They change in proportion to user activity within the program.     (Each state change can be tied to a user's actions.     They don't change on their own.) </li>
<li>They change rarely.     (Users do not navigate a hundred times per second.) </li>
</ul>
<p> Since the program knows when the navigation stack has changed, it doesn't have to waste its time updating the button states when nothing has changed. Since recalculating the state is relatively cheap, the end user will not see the main user interface slow down while the program goes off to determine the new button state after each navigation. And finally, the state changes rarely, so that this cheap calculation does not multiply into an expensive one. </p>
<p> The copy/cut/paste buttons, on the other hand, often fail to meet these criteria. First, the copy and cut options: </p>
<ul>
<li>The program knows when the state has potentially changed.     (Whenever the selection changes.) &mdash; good </li>
<li>Computing the state is not always cheap.     (For example, determining whether an item in Explorer     can be cut or copied requires talking to its namespace handler,     which can mean loading a DLL.     If the item on the clipboard is a file on the network,     you may have to access a computer halfway around the world.)     &mdash; often bad </li>
<li>It changes in proportion to user activity within the program.     (Each state change can be traced to the user changing the selection.) </li>
<li>They change with high frequency.     (Dragging a rectangle to make a group selection     changes the selection each time the rectangle encloses a new item.)     &mdash; bad </li>
</ul>
<p> Paste is even worse. </p>
<ul>
<li>The program doesn't know when the state has potentially changed.     (The clipboard can change at any time.     Yes, the program could install a clipboard viewer,     but that comes with its own performance problems.) &mdash; bad </li>
<li>Computing the state is not cheap.     (The program has to open the clipboard, retrieve the data on it,     and see whether it is in a format that can be pasted.     If the clipboard contents are delay-rendered, then the constant     probing of the clipboard defeats the purpose of     delay-rendered clipboard data, which is to defer the cost of     generating clipboard data until the user actually wants it.     For Explorer, it's even worse, because it has to take the data     and ask the selected item whether it can accept the paste.     Doing this means talking to the namespace handler, which can mean     loading a DLL.     And if the file on the clipboard is on the network,     the paste handler may need to open the file to see if it is     in a format that can be pasted.) &mdash; bad </li>
<li>It can change out of proportion to user activity.     (Any time any other program copies something to the clipboard,     the toolbar has to update itself.     Then can happen even when the user is not using the program     that has the toolbar! Imagine if Explorer started saturating your     network because you copied a lot of UNC paths to the clipboard     while editing some text file.)     &mdash; bad </li>
<li>The frequency of change is unknown.     (The clipboard is a shared resource, and who knows what other     people might be using it for.) &mdash; bad </li>
</ul>
<p> This is one of those balancing acts you have to do when designing a program. How much performance degredation are you willing to make the user suffer through in order to get a feature they may never even notice (except possibly in a bad way)? </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-463823">
				<div id="div-comment-463823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Ritchie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323#comment-463823">
			January 22, 2007 at 10:31 am</a>		</div>

		<p>It&#8217;s not clear; but this doesn&#8217;t apply to cut/copy/paste buttons in the general case, just to the affordances in Windows Explorer.</p>
<p>There&#8217;s no reason why a simple application can&#8217;t update their cut &amp; copy buttons in real-time. &nbsp;A paste button would be more work; but, as a clipboard &quot;viewer&quot; it doesn&#8217;t actually have to render anything, just check for supported formats when it&#8217;s notified of render messages.</p>
<p>Sounds like you&#8217;ve explained where things like WM_CLIPBOARDUPDATE and AddClipboardFormatListener were added to Vista&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-463843">
				<div id="div-comment-463843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Koro</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323#comment-463843">
			January 22, 2007 at 12:21 pm</a>		</div>

		<p>The Windows Media Player shell extension opens an .avi file everytime it&#8217;s selected in explorer in order to display the movie length and resolution in the status bar. On my old computer this resulted in ~10sec 100% CPU usage peaks everytime I selected one.</p>
<p>It was also hard to select and delete them too, since they were being &quot;used&quot; by the shell extension.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-463853">
				<div id="div-comment-463853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://patf.net/blogs' rel='external nofollow' class='url'>Patrick Farrell</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323#comment-463853">
			January 22, 2007 at 12:56 pm</a>		</div>

		<p>Very nice essay. &nbsp;I nice investigation of cost/benefit from the inside. &nbsp;The comparison to why navigation does work is really good at illustrating the specifics of the differences between the two assessments.</p>
<p>I have a feeling the quote &quot;I can do nothing really fast.&quot; is going to stick with me in future assessments :).</p>
<p>@Koro, I&#8217;ve had similar problems. &nbsp;Could this be an example of what would be happending if copy/paste were disabled/enabled in real time? &nbsp;Methinks it is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-463863">
				<div id="div-comment-463863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323#comment-463863">
			January 22, 2007 at 2:09 pm</a>		</div>

		<p>This is described here <a rel="nofollow" target="_new" href="http://support.microsoft.com/default.aspx?scid=kb;en-us;822430&amp;Product=winxp" rel="nofollow">http://support.microsoft.com/default.aspx?scid=kb;en-us;822430&#038;Product=winxp</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-463873">
				<div id="div-comment-463873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">swautier</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323#comment-463873">
			January 22, 2007 at 2:26 pm</a>		</div>

		<p>Raymond, thanks for such a detailed explanation.</p>
<p>I don&#8217;t buy every &quot;bad&quot; conclusion you draw but of course your overall point is valid even if I remove these ones.</p>
<p>BTW, I learned a new word today: affordance. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-463913">
				<div id="div-comment-463913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric TF Bat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323#comment-463913">
			January 22, 2007 at 5:11 pm</a>		</div>

		<p>One text editor, TextPad, has a set of clipboard tool buttons that do change in realtime. &nbsp;I don&#8217;t believe it bothers checking the format of the data in the clipboard (perhaps they figured the cost wasn&#8217;t worth the minimal usefulness) but it does enable and disable Cut, Copy and Paste according to the current state of the selection. &nbsp;The result? &nbsp;An irritating and initially-inexplicable flicker out of the corner of your eye, making you think something is buggy until you eventually figure out what&#8217;s going on. &nbsp;Verdict: dumb idea.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-463943">
				<div id="div-comment-463943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeremy Morton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323#comment-463943">
			January 22, 2007 at 5:55 pm</a>		</div>

		<p>Textpad does disable the Paste button when the clipboard&#8217;s format isn&#8217;t text [for example, when you hit PrtScn]. But a text editor scenario does further restrict when state changes and valid clipboard data and may make it worthwhile to do. OTOH Word can potentially paste most any clipboard format, so it may not be worthwhile there, as it isn&#8217;t in Explorer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-463963">
				<div id="div-comment-463963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323#comment-463963">
			January 22, 2007 at 8:05 pm</a>		</div>

		<p>I wonder if there&#8217;s a usability issue in there as well, perhaps it&#8217;s better to have the troika of clipboard buttons always visible and enabled because they are close to the Most Useful Thing To Know (on a PC), and possibly The Only Thing Some People Know (on a PC) and therefore best not to confuse them.</p>
<p>As an example the lady who sits near me couldn&#8217;t work out how to Copy in IE7 last week because it doesn&#8217;t have Copy on the toolbar by default &#8212; if Paste had been visible and grayed out I might have been asked &quot;Why is paste grayed out&quot;.</p>
<p>Anyways, the moral of the story is sometimes it&#8217;s not worth updating the user interface if it degrades the user experience&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-463903">
				<div id="div-comment-463903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323#comment-463903">
			January 22, 2007 at 3:48 pm</a>		</div>

		<p>Thanks for the post.</p>
<p>Off-topic, but regarding the clipboard: &nbsp;Has anyone ever suggested creating a more advanced clipboard manager? &nbsp;Something that retains a history of clipboard items with the ability to place an old item back into the &#8216;current&#8217; buffer? &nbsp;I don&#8217;t know how many times I&#8217;ve wished the clipboard stored old stuff.</p>
<p>This would be a *great* addition to Windows or as a PowerToy for XP/Vista.</p>
<p>(Yes, I know you can pay to do it with Clipmate [<a rel="nofollow" target="_new" href="http://www.thornsoft.com/clipmate7.htm" rel="nofollow">http://www.thornsoft.com/clipmate7.htm</a>], but it&#8217;d be nice as a part of Windows).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-463993">
				<div id="div-comment-463993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323#comment-463993">
			January 23, 2007 at 3:44 am</a>		</div>

		<p>WordPad seems to have solved this in a different way. Even when it is not active it updates the paste button when the mouse is over one of the toolbar buttons.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-464013">
				<div id="div-comment-464013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phylyp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323#comment-464013">
			January 23, 2007 at 6:24 am</a>		</div>

		<p>Nice writeup on the differences between the cost of displaying internal state and external state</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-464063">
				<div id="div-comment-464063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.zabkat.com' rel='external nofollow' class='url'>nikos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323#comment-464063">
			January 23, 2007 at 10:37 am</a>		</div>

		<p>although i agree that &quot;paste&quot; activation handling is more expensive for shell formats, with good (sensible) idle processing and using IsClipboardFormatAvailable(SHIDLIST) the cost is negligible, this is pentium era after all :)</p>
<p>having said that i&#8217;ve noticed that xplorer2 (which implements the above UI strategy) does get the occasional cpu usage spike &#8230; nothing to write home about though</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-464083">
				<div id="div-comment-464083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://microsoft.blognewschannel.com/archives/2007/01/23/why-the-cutcopypaste-buttons-are-not-dynamic/' rel='external nofollow' class='url'>&raquo; Why The Cut/Copy/Paste Buttons Are Not Dynamic&nbsp;&raquo; &nbsp;InsideMicrosoft - part of the Blog News Channel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323#comment-464083">
			January 23, 2007 at 11:16 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://microsoft.blognewschannel.com/archives/2007/01/23/why-the-cutcopypaste-buttons-are-not-dynamic/" rel="nofollow">http://microsoft.blognewschannel.com/archives/2007/01/23/why-the-cutcopypaste-buttons-are-not-dynamic/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-464093">
				<div id="div-comment-464093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Ritchie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323#comment-464093">
			January 23, 2007 at 11:34 am</a>		</div>

		<p>@Nick: do you mean something like the Office Clipboard?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-464373">
				<div id="div-comment-464373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://stephen.wake@gmail.com' rel='external nofollow' class='url'>Steve Wake</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323#comment-464373">
			January 23, 2007 at 7:14 pm</a>		</div>

		<p>Since the clipboard is an internal service, then should not any program making a change to it&#8217;s state be able to send a notification to all other programs that this state has change (e.g. a WM_NOTIFY_CLIPBOARD&#8230;) message, and let other programs decide to handle it or not (doing a query on the new formats available?)</p>
<div class=post>[<i>&#8220;Yes, the program could install a clipboard viewer, but that comes with its own performance problems.&#8221; And that still doesn&#8217;t fix the &#8220;frequency of update is unknown&#8221;. A program that manipulates the clipboard can cause Explorer to consume a lot of CPU. I would think most people would consider that a bug not a feature. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-464383">
				<div id="div-comment-464383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://stephen.wake@gmail.com' rel='external nofollow' class='url'>Steve Wake</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323#comment-464383">
			January 23, 2007 at 7:15 pm</a>		</div>

		<p>Actually, I meant to say the clipboard service sends the norification to other applications (including the one who made the original notification)&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-464813">
				<div id="div-comment-464813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dotnoted.spaces.live.com' rel='external nofollow' class='url'>codekaizen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323#comment-464813">
			January 24, 2007 at 3:32 pm</a>		</div>

		<p>swautier:</p>
<p>The term &#8216;affordances&#8217; originated with a different intent than is used here.</p>
<p>Donald Norman explains here:</p>
<p><a rel="nofollow" target="_new" href="http://www.jnd.org/dn.mss/affordances_and.html" rel="nofollow">http://www.jnd.org/dn.mss/affordances_and.html</a></p>
<p>and here:</p>
<p><a rel="nofollow" target="_new" href="http://www.jnd.org/dn.mss/affordance_conv.html" rel="nofollow">http://www.jnd.org/dn.mss/affordance_conv.html</a></p>
<p>Donald&#8217;s book, &quot;Design of Everyday Things&quot; somewhat popularized the term, and due to it&#8217;s popularity, the meaning has become skewed. This is too bad, since now it obscures the principles of graphical UI design which the skewed usage intends to mean.</p>
<p>UI gestures are often consistent metaphor and convention, with word labeling to get the perceived affordance across. This is different from actual, or real, affordance. In UI design, these are often separate, since you don&#8217;t actually &quot;click&quot; on a screen or &quot;move&quot; the screen when dragging a UI element (though the Wiimote emulates this &#8211; would this be a &#8216;proxied&#8217; affordance?).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-464873">
				<div id="div-comment-464873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070122-05/?p=28323#comment-464873">
			January 24, 2007 at 6:18 pm</a>		</div>

		<p>&quot;the frequency of update is unknown&quot;</p>
<p>I can&#8217;t see how I can put something on the clipboard faster than (say) the PrtSc key autorepeats (if it does) and if some app is constantly rewriting the clipboard then the format change notifications will bring all of my remote desktops to a crawl and it deserves to die.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

