<html>
<head>
<title>You can ask the compiler to answer your calling convention questions</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>You can ask the compiler to answer your calling convention questions</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 20, 2013 / year-entry #49</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>22</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If you want to figure out some quirks of a calling convention, you can always ask the compiler to do it for you, on the not unreasonable assumption that the compiler understands calling conventions. "When a __stdcall function returns a large structure by value, there is a hidden first parameter that specifies the address the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
If you want to figure out some quirks of a calling
convention,
you can always ask the compiler to do it for you,
on the not unreasonable assumption that the compiler
understands calling conventions.
</p>
<p>
"When a <code>__stdcall</code>
function returns a large structure by value,
there is a hidden first parameter that specifies the
address the return value should be stored.
But if the function is a C++ instance method,
then there is also a hidden <code>this</code>
parameter.
Which goes first, the return value parameter
or the <code>this</code> pointer?"
</p>
<p>
This is another case of
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/07/27/10190102.aspx">
You don't need to ask me a question the compiler can answer more accurately</a>.
</p>
<pre>
struct LargeStructure
{
 char x[256];
};

class Something
{
public:
 LargeStructure __stdcall TestMe();
};

void foo(Something *something)
{
 LargeStructure x = something-&gt;TestMe();
}
</pre>
<p>
You could compile this into a program and
then look in the debugger,
or just ask the compiler to generate an assembly
listing.
I prefer the assembly listing, since it saves a few
steps,
and the compiler provides helpful symbolic names.
</p>
<pre>
  00015 mov     eax, DWORD PTR _something$[ebp]

; LargeStructure x = something->TestMe();

  00018 lea     ecx, DWORD PTR _x$[ebp]
  0001e push    ecx
  0001f push    eax
  00020 call    ?TestMe@Something@@<wbr>
                QAG?AULargeStructure@@XZ
                ; Something::TestMe

</pre>
<p>
We see that the last thing pushed onto the stack
(and therefore the top parameter on the stack
at the point of the call)
is the <code>something</code> parameter,
which is the <code>this</code>
for the function.
</p>
<p>
Conclusion:
The <code>this</code> pointer goes ahead of the
output structure pointer.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1040393">
				<div id="div-comment-1040393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040393">
			February 20, 2013 at 8:14 am</a>		</div>

		<p>Now the correct question is what does a COM library do as an internal call can ignore calling conventions. Same procedure to answer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1040403">
				<div id="div-comment-1040403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040403">
			February 20, 2013 at 8:20 am</a>		</div>

		<p>I love it when people proactively answer their own questions like this even when it&#39;s not the whole story &#8212; and then fixate on the answer. When you get around to convincing them that what they&#39;re observing is not actually guaranteed, but an artifact of how the system happens to work right now, and if they want solid guarantees, please read this document over here, they have the rock-solid defense that documents are just words someone babbled one time, and they&#39;ve got the code to prove how it works on their system. Theirs is the Living God!</p>
<p>Now, for a calling convention, this works. But approaches like this need the standard disclaimer of &quot;please make sure you understand in what contexts the answer you have just obtained is valid&quot;. Unfortunately, most people are far too overjoyed at having an answer to consider the burdensome task of considering whether it&#39;s the right one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1040413">
				<div id="div-comment-1040413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040413">
			February 20, 2013 at 8:23 am</a>		</div>

		<p>That&#39;s all very nice when you already have the compiler sitting there somewhere in the PATH eagerly waiting to be run.</p>
<p>Up until Visual Studio 2005, there was no express edition. You could dig a cl.exe from specific SDK versions. Now, you need the express edition for the compiler, as the newer SDKs are no longer packed with it. What a terrific turn of events. Although, I agree with the latter: Visual Studio is subject to software (read, security) updates, the SDK isn&#39;t.</p>
<p>In short, if you really want to, you can get the compiler for free. But I think it&#39;s too much overhead to find out what a calling convention is supposed to do, notwithstanding having to code all possible, interesting or corner-case scenarios.</p>
<p>&quot;What are you talking about?&quot;, you say. Well, more often than not, someone is interested in calling conventions not by mere curiosity or for optimization purposes, but to make a foreign interface support library or define foreign structures and functions (foreign as in not managed, or C-native, or machine raw bit twiddling).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1040423">
				<div id="div-comment-1040423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040423">
			February 20, 2013 at 8:27 am</a>		</div>

		<p>[Up until Visual Studio 2005, there was no express edition. You could dig a cl.exe from specific SDK versions. Now, you need the express edition for the compiler, as the newer SDKs are no longer packed with it. What a terrific turn of events. Although, I agree with the latter: Visual Studio is subject to software (read, security) updates, the SDK isn&#39;t.]</p>
<p>And to make matters worse, while an SDK for an arbitrary version of Windows can still be had, old express editions can&#39;t be. Way to go and make targeting XP forever much more attractive than it should be.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1040443">
				<div id="div-comment-1040443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jasper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040443">
			February 20, 2013 at 9:14 am</a>		</div>

		<p>Well, we&#39;ve only tested one variant of the rules. When I would ask a question like this, I would expect all the ifs, ands, and buts to come as part of the reply. Why should I have to reverse engineer the rules that the compiler already has encoded in it?</p>
<div class="post">[<em>Usually, this question is asked in the context of &quot;I&#39;m trying to call function X but I can&#39;t get the calling convention right. How am I supposed to pass the Y parameter?&quot; In other words, they&#39;re not asking for the general rules; they just want to the rules for one particular instance. Answer: Ask the compiler to do X, and see how it passes the Y parameter. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1040453">
				<div id="div-comment-1040453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rushyo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040453">
			February 20, 2013 at 9:32 am</a>		</div>

		<p>@Jasper It&#39;s not Raymond&#39;s job to provide on-demand training (at least, I&#39;m pretty certain it&#39;s not). If people want to know how it behaves, they can poke it or look up the documentation like everyone else. If something is wrong, then perhaps that&#39;s something for Raymond. Otherwise, it&#39;s probably not something for Raymond.</p>
<p>I do find it peculiar that people think support contracts mean that you can just prod knowledge workers for their knowledge whenever they like and that if there&#39;s a job in the knowledge worker&#39;s domain that&#39;s confusing them, that it&#39;s the knowledge worker&#39;s job to do their job for them. It&#39;s like going up to a chef in a restaurant and demanding they tell you how to make all the dishes and the chemical content of all the ingredients, down to the molecular level. Whilst that might be useful to you, all the chef cares about is that you enjoy the food. If you don&#39;t enjoy the food then he might want to address it. It does not make him a specialised version of Wikipedia.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1040463">
				<div id="div-comment-1040463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040463">
			February 20, 2013 at 9:40 am</a>		</div>

		<p>This is expected, if you remember that the calling conventions are supposed to allow pseudo-member function call from C (for COM compatibility). For this reason, &#39;this&#39; pointer takes place of the first C-style call argument, while the return structure pointer goes even before that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1040473">
				<div id="div-comment-1040473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040473">
			February 20, 2013 at 9:45 am</a>		</div>

		<p>Way back in the olden days, I used to write quite a bit of S/360 Assembler. &nbsp;One of the great things about OS/360 and its follow-ons was that the calling conventions were very consistant and very well documented.</p>
<p>This is not a slam on the calling conventions for Windows. &nbsp;Windows and OS/360 are very different animals serving very different types of developers.</p>
<p>Consistancy was and still is a great thing.</p>
<p>BR R14 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(obscure refernece to saying &quot;goodbye&quot; AND calling conventions)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1040483">
				<div id="div-comment-1040483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henning Makholm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040483">
			February 20, 2013 at 10:20 am</a>		</div>

		<p>@algr1: Aren&#39;t you arguing that the calling convention Raymond shows here is UNEXPECTED? As shown by the assembler, the invisible return struct pointer goes BETWEEN the &quot;this&quot; pointer and the first explicit argument. Remember that arguments are pushed on the stack in reverse of the source order, such that their addresses on the stack will be in the source order.</p>
<p>A more fundamental problem with your analysis is that COM doesn&#39;t care about calling conventions for returning large structures at all, since COM member functions always return HRESULT anyway (or in certain special cases other small types).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1040493">
				<div id="div-comment-1040493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040493">
			February 20, 2013 at 10:57 am</a>		</div>

		<p>@Rushyo, what if the documentation is not enough or is incomplete? What if you really need to know all about calling conventions, because, say, you&#39;re developing a compiler (no matter the language)? Even by your reasoning, this might be something for Raymond.</p>
<p>Even by Raymond&#39;s reasoning, according to the linked post <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2011/07/27/10190102.aspx" rel="nofollow">blogs.msdn.com/&#8230;/10190102.aspx</a> , this is something the compiler can answer you in concrete examples, but it might take you more time to find out all about calling conventions this way than to get a detailed answer or request proper documentation.</p>
<p>BTW, how do you know what is and is not for Raymond? <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2013/02/08/10392028.aspx" rel="nofollow">blogs.msdn.com/&#8230;/10392028.aspx</a> . Anyway, it&#39;s not like the answer would (need to) be &quot;In the beginning, there was a big bang, then &#8230; calling conventions &#8230; meaning of life &#8230;&quot; In the end, I&#39;m sure people become much happier about their spent money on support and/or maintenance from a company that answers even these kind of questions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1040543">
				<div id="div-comment-1040543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040543">
			February 20, 2013 at 2:40 pm</a>		</div>

		<p>Yes, the answer you get will be correct (for today). &nbsp;</p>
<p>How does this square with Microsoft being forced to spend a lot of money on compatibility hacks to accomodate software vendors who &quot;figured out how things work in practice&quot; instead of finding the appropriate contractual behavior? &nbsp;And the clear understanding there is that &quot;figuring out how things work in practice&quot; is inferior to figuring out how things are supposed to work. &nbsp;And if the documentation is hard to find, it&#39;s not the programmers&#39; fault that they went with what they could figure it out.</p>
<p>I think my point is that it&#39;s hard for a programmer to know when he SHOULD look at &quot;how things happen to work right now with my specific machine architecture and memory size and version of Windows&quot; and when he should try really hard to find the correct contractual behavior.</p>
<div class="post">[<em>Suppose you write a program in C++. Now you write another program in assembly language that passes parameters the same way the C++ program does. Those two programs are indistinguishable. Therefore, any dependency you&#39;re making in your assembly language is the same dependency you&#39;re making in C++. Yet nobody stops and says, &quot;Oh, no, what if Microsoft changes the way the Y parameter is passed to function X? Will that break my C++ program?&quot; You&#39;re confusing runtime behavior with compile-time behavior. Compile-time behavior can never change because it&#39;s compiled. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1040563">
				<div id="div-comment-1040563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040563">
			February 20, 2013 at 2:54 pm</a>		</div>

		<p>This is one reason why I have IDA Pro at work &#8211; to disassemble our own stuff and see how the compiler did things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1040573">
				<div id="div-comment-1040573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jolyon.smith_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>jolyon.smith@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040573">
			February 20, 2013 at 3:59 pm</a>		</div>

		<p>Given that the parameters are passed on a/the stack, isn&#39;t it more accurate to say that &quot;this&quot; <strong>goes</strong> (push) behind/after, but <strong>COMES</strong> (pop) before ?</p>
<p>Just asking. &nbsp;:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1040583">
				<div id="div-comment-1040583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040583">
			February 20, 2013 at 6:58 pm</a>		</div>

		<p>@Raymond: What @Henning Makholm is asking for is not an exact struct. He is writing a code generator, so he cannot know in advance the exact struct, and must code for all possible alternatives.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1040503">
				<div id="div-comment-1040503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henning Makholm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040503">
			February 20, 2013 at 12:36 pm</a>		</div>

		<p>@John Doe: I think we must distinguish between at least kinds of information sources here. In order of decreasing utility: (1) An authoritative spec that Microsoft (or whichever vendor we&#39;re talking about) is formally committed to implement; (2) direct observation of what the thing does in practice; (3) ad-hoc answers to concrete questions from people like Raymond.</p>
<p>I take your point to be that having (1) is superior to either of the two others. And I agree fully with that, having recently had the fun experience of extending an in-house compiler to generate code for the Windows Runtime API. Here there&#39;s essentially no answers of class (1) for the abstraction layers that lie between __stdcall and the fully projected &quot;here&#39;s what to write&quot; .NET or C++/CX syntax one finds in MSDN. And yes, that is infuriating.[*]</p>
<p>However, GIVEN a situation where (1) is not available, then Raymond&#39;s point here appears to be that (2) is superior to (3). That is also true, assuming that we&#39;re speaking about questions where (2) CAN logically provide complete answer, modulo some common sense. The concrete question in the posting is of that kind &#8212; &quot;is is this way or that way?&quot;. It&#39;s very hard to imagine that the answer would be &quot;it depends&quot; &#8212; because what would it possibly depend on? Whether the size of the struct is a prime multiple of its alignment? Or whether there are more than 5 parameters EXCEPT the two invisible ones whose order we&#39;re asking about?</p>
<p>Sure, it would be even nicer if there were a complete self-contained description of the entire calling convention somewhere &#8212; but then we&#39;re talking (1) versus (2), not (2) versus (3). There doesn&#39;t seem to be any advantage in waiting for someone at Microsoft to ask the compiler (because assuming that (1) simply doesn&#39;t exist even internally, that&#39;s what they&#39;d do) over doing it oneself.</p>
<p>[*] It would be nice to have a neat conspiracy theory about how Microsoft is deliberately keeping this information secret as part of some convoluted plot to enslave the world, but it doesn&#39;t hold water because everything else indicates that they WANT people to create software using this technology and the absence of specs is simply due to resource constraints rather than actively malicious intent. Probably a lot of details were worked out by a bunch of guys around a whiteboard somewhere in Redmond and then they went each to their desks and implemented their end of the decisions, and nobody cared to write a self-contained description of the whole thing because there&#39;s a ship date looming and most of the sheeple app programmers just want source examples they can cut-and-paste from without understanding it anyway, and who other than us are ever going to care whether a class object for a runtime class without parameterless public constructors is required to implement IActivationFactory nevertheless?</p>
<div class="post">[<em>If you want to remove the variability over things like whether the size of the struct is a prime number (in practice: it can vary depending on whether the size of the struct is 8 or less), just run your test with <span style="text-decoration:underline;">the exact struct you want the answer for</span>. The answer you get from the compiler is necessarily correct because that&#39;s how it would&#39;ve happened if you had simply written a C program. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1040593">
				<div id="div-comment-1040593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040593">
			February 20, 2013 at 9:40 pm</a>		</div>

		<p>@myria:</p>
<p>&#8230;or just use the compiler option to generate the .COD file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1040603">
				<div id="div-comment-1040603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ooh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040603">
			February 21, 2013 at 2:04 am</a>		</div>

		<p>@Henning Makholm: You know the Visual C++ Team Blog, don&#39;t you? They had/are running a series on C++/CX development and compiler transformations (all other parts are linked from the first post):</p>
<p>C++/CX Part 0 of [n]: An Introduction (<a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/vcblog/archive/2012/08/30/cxxcxpart00anintroduction.aspx" rel="nofollow">blogs.msdn.com/&#8230;/cxxcxpart00anintroduction.aspx</a>)</p>
<p>Other stuff (even in MSDN!) is linked from these. Should get you pretty far, and all the missing pieces should be pretty much like COM.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1040643">
				<div id="div-comment-1040643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040643">
			February 21, 2013 at 7:28 am</a>		</div>

		<p>The documentation of calling conventions is very poor, but it tends to be a non-issue because public APIs avoid the corner cases.</p>
<p>Though the reality of what the compiler does with different size structs is quite bizarre:</p>
<p><a rel="nofollow" target="_new" href="http://blog.aaronballman.com/2012/02/describing-the-msvc-abi-for-structure-return-types/" rel="nofollow">blog.aaronballman.com/&#8230;/describing-the-msvc-abi-for-structure-return-types</a></p>
<p>It would be interesting to know if this is consistent across compiler versions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1040653">
				<div id="div-comment-1040653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040653">
			February 21, 2013 at 8:00 am</a>		</div>

		<p>Thanks, Raymond. &nbsp;That explanation helps.</p>
<p>More text goes here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1040693">
				<div id="div-comment-1040693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henning Makholm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040693">
			February 21, 2013 at 9:12 am</a>		</div>

		<p>@Cesar: Actually what I thought I was doing here was to DEFEND Raymond&#39;s point, but I must have done it badly, since it didn&#39;t register with either him or you. The original question was: GIVEN that there&#39;s a hidden parameter that points to memory that the returned struct is written to, will what parameter come before or after the this parameter? I maintain that there&#39;s no reason to expect that the parameters will sometimes come in one order and sometimes in another. Therefore one experiment is enough to settle the question asked. Sometimes one or the other of the pointers won&#39;t BE in the parameter list, but that is a different question.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-1040623">
				<div id="div-comment-1040623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1040623">
			February 21, 2013 at 6:08 am</a>		</div>

		<p>@Ooh: There has been a disturbing trend over the last probably five or six years for things that *should* be documented in Henning&#39;s Type (1) to only be documented in an MSDN blog, i.e. type (3). The contracts *must* be defined in proper official documentation: we can&#39;t be expected to trawl the thousands of MSDN and Technet blogs to find an answer, and then try to discern whether this is a description of how it works now, or an actual contract of how it will continue to work in the future.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1041123">
				<div id="div-comment-1041123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130220-00/?p=5193#comment-1041123">
			February 23, 2013 at 9:54 pm</a>		</div>

		<p>It&#39;s also required to consider all the breaking change documents for all APIs between product A and product B to know if they are compatible.</p>
<p>Promises has been broken in the past.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

