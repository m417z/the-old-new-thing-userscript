<html>
<head>
<title>Printing the contents of the clipboard as text to stdout</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Printing the contents of the clipboard as text to stdout</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 7, 2013 / year-entry #266</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>27</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The clip.exe takes its stdin and puts it on the clipboard. But how do you get it out? That's today's Little Program. (I guess we could call it clop.exe.) #define UNICODE #define _UNICODE #define STRICT #include <windows.h> #include <stdio.h> #include <tchar.h> #include <strsafe.h> void WriteToStdOut(const void *pvBuf, DWORD cbBuf) { DWORD cbWritten; WriteFile(GetStdHandle(STD_OUTPUT_HANDLE), pvBuf, cbBuf,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The <code>clip.exe</code> takes its stdin and puts it on the clipboard.
But how do you get it out?
That's today's Little Program.
(I guess we could call it
<code>clop.exe</code>.)
</p>
<pre>
#define UNICODE
#define _UNICODE
#define STRICT
#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;
#include &lt;tchar.h&gt;
#include &lt;strsafe.h&gt;

void WriteToStdOut(const void *pvBuf, DWORD cbBuf)
{
 DWORD cbWritten;
 WriteFile(GetStdHandle(STD_OUTPUT_HANDLE), pvBuf, cbBuf,
           &amp;cbWritten, nullptr);
}

int __cdecl _tmain(int argc, PTSTR *argv)
{
 if (OpenClipboard(nullptr)) {
  HANDLE h = GetClipboardData(CF_UNICODETEXT);
  if (h) {
   auto pwchText = static_cast&lt;PCWSTR&gt;(GlobalLock(h));
   if (pwchText) {
    SIZE_T cbMemory = GlobalSize(h);

    // arbitrary limit because I am lazy
    cbMemory = min(cbMemory, 0x10000000);

    size_t cbActual;
    if (SUCCEEDED(StringCbLengthW(pwchText, cbMemory,
                                  &amp;cbActual))) {
     if (argc == 2 &amp;&amp; _tcsicmp(argv[1], TEXT("/u")) == 0) {
      WriteToStdOut(pwchText, cbActual);
     } else {
      UINT cp = (argc == 2 &amp;&amp;
                _tcsicmp(argv[1], TEXT("/a")) == 0) ?
                     CP_ACP : CP_OEMCP;
      int cch = WideCharToMultiByte(cp, 0, pwchText,
               cbActual / 2, nullptr, 0, nullptr, nullptr);
      if (cch &gt; 0) {
       auto psz = new(std::nothrow) char[cch];
       if (psz) {
        WideCharToMultiByte(cp, 0, pwchText, cbActual / 2,
                               psz, cch, nullptr, nullptr);
        WriteToStdOut(psz, cch);
        delete[] psz;
       }
      }
     }
    }
    GlobalUnlock(h);
   }
  }
  CloseClipboard();
 }
 return 0;
}
</pre>
<p>
Okay, what do we have here?
</p>
<p>
We open the clipboard and try to get the Unicode text on it.
We then look for the null terminator within the first
0x10000000 bytes.
Why do I stop at 256<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/06/11/9725386.aspx">MB</a>?
Because I'm lazy and this lets me avoid worrying about
integer overflow.
This is a Little Program, remember.
</p>
<p>
If you pass the <code>/U</code> command line switch,
then the output is printed to stdout as the Unicode string itself.
</p>
<p>
If you pass the <code>/A</code> command line switch,
then the output is converted to
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/05/31/144893.aspx">
ANSI</a>.
</p>
<p>
Otherwise the output is converted to the
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2005/08/29/457483.aspx">
OEM</a> code page.
</p>
<p>
<b>Bonus chatter</b>:
You can get most of the same program above (no Unicode output)
in much less code
if you're willing to use C#:
</p>
<pre>
class Program {
  [System.STAThread]
  public static void Main(string[] args)
  {
    string text = System.Windows.Forms.Clipboard.GetText();
    if (args.Length == 1 &amp;&amp; string.Compare(args[0], "/a", true) == 0) {
        System.Console.OutputEncoding = System.Text.Encoding.Default;
        System.Console.Write("changed encoding");
    }
   System.Console.Write(text);
  }
}
</pre>
<p>
Or perl (ANSI output only):
</p>
<pre>
use Win32::Clipboard;
print Win32::Clipboard()->GetText();
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1081153">
				<div id="div-comment-1081153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BOFH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081153">
			October 7, 2013 at 7:12 am</a>		</div>

		<p>It has annoyed me a lot over the years that the clip.exe from the resource kits and later bundled in Windows, could only recieve a pipe of another program&#39;s stdout into the clipboard, but had no way of printing the contents of the clipboard into stdout.</p>
<p>Why this half-measure? :(</p>
<p>At least UnxUtils has had pclip.exe, so with a bit of foresight it has been possible to handle the omission of this (pretty obvious) feature:</p>
<p><a href="http://unxutils.sourceforge.net/" rel="nofollow" target="_new">unxutils.sourceforge.net</a></p>
<p>It&#39;s baby-steps, I guess&#8230;</p>
<p>Maybe we&#39;ll see this feature in a future version of clip.exe? :)</p>
<div class="post">[<em>First you need to work it out with the people who complain that Windows is bloated. (One person&#39;s half-measure is another person&#39;s tightly-focused feature.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1081163">
				<div id="div-comment-1081163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081163">
			October 7, 2013 at 7:25 am</a>		</div>

		<p>Don&#39;t call it clop: <a rel="nofollow" target="_new" href="http://www.foddy.net/CLOP.html">http://www.foddy.net/CLOP.html</a></p>
<p> &nbsp; &nbsp;// arbitrary limit because I am lazy</p>
<p> &nbsp; &nbsp;cbMemory = min(cbMemory, 0x10000000);</p>
<p>Can you really copy 256 MB of text to the clipboard? &nbsp;[Ron_Burgundy]I&#39;m not even mad. &nbsp;That&#39;s amazing.[/Ron_Burgundy]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1081183">
				<div id="div-comment-1081183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roland</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081183">
			October 7, 2013 at 8:00 am</a>		</div>

		<p>I wrote some similar programs, ccopy, ccut and ppaste that will cut/copy/paste text and files to and from the clipboard. The code is available on GitHUb. You can do things like &#39;ccopy *.txt&#39; or &#39;dir | ccopy&#39; </p>
<p><a rel="nofollow" target="_new" href="https://github.com/FigBug/ccopyppaste">github.com/&#8230;/ccopyppaste</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1081203">
				<div id="div-comment-1081203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris L</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081203">
			October 7, 2013 at 8:30 am</a>		</div>

		<p>Be a friendly citizen of the world and make your program output CP_UTF8 instead of anything else.</p>
<div class="post">[<em>You&#39;re making the assumption that all programs accept CP_UTF8. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1081213">
				<div id="div-comment-1081213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081213">
			October 7, 2013 at 8:55 am</a>		</div>

		<p>If clip.exe it for getting text to clipboard, then the tool getting text from clipboard should be board.exe.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo odd alt thread-odd thread-alt depth-1" id="comment-1081223">
				<div id="div-comment-1081223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081223">
			October 7, 2013 at 9:22 am</a>		</div>

		<p>Since the last non-NT Windows dates back to almost 14 years ago, current CRTs don&#39;t support pre-NT Windows since 2008 and you hard-define `UNICODE` and `_UNICODE` on the top of the program, is there some particular reason why you keep using TCHARs &amp; co.? I ask because the rare times I happen to write some Win32 code I always wonder if I should really go on using those unreadable `_tcsXXX` macros, that nowadays seem completely obsolete.</p>
<div class="post">[<em>To make it easier for people to incorporate my code fragments into production code that does not target Unicode. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1081243">
				<div id="div-comment-1081243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081243">
			October 7, 2013 at 11:38 am</a>		</div>

		<p>It is pretty sad that Windows still does not have a proper console write helper. To do this correctly you have to: </p>
<p>1) Check if stdout is the real console (not redirected), if it is you must call WriteConsoleW to get proper Unicode output (You must select a TT font in the console properties as well to really get the full benefit, you will still get some boxes but if you copy/paste to a text editor you will get the correct output) </p>
<p>2) To support clip &gt;&gt; maybeUTF16BOM.txt you have to call GetFileType on stdout, if it is a file you need to seek to the start of the file and check for a BOM. If there is no BOM you output ACP/OEM or whatever your default encoding is&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1081253">
				<div id="div-comment-1081253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/wswiktor_4000_poczta.fm/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>wswiktor@poczta.fm</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081253">
			October 7, 2013 at 12:49 pm</a>		</div>

		<p>It crashes the compiler ;-)</p>
<p> &nbsp; &nbsp;Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 16.00.40219.01 for 80&#215;86</p>
<p> &nbsp; &nbsp;&#8230;</p>
<p> &nbsp; &nbsp;a.cpp(40) : error C2039: &#39;nothrow&#39; : is not a member of &#39;std&#39;</p>
<p> &nbsp; &nbsp;a.cpp(40) : error C2065: &#39;nothrow&#39; : undeclared identifier</p>
<p> &nbsp; &nbsp;a.cpp(40) : fatal error C1060: compiler is out of heap space</p>
<p>#include &lt;new&gt; is missing. But the worse problem is, it displays correct characters only in OEM mode. And yes, I&#39;ve set the console window font to Consolas.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1081263">
				<div id="div-comment-1081263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081263">
			October 7, 2013 at 1:48 pm</a>		</div>

		<p>[You&#39;re making the assumption that all programs accept CP_UTF8. -Raymond]</p>
<p>It&#39;s true that not all programs accept UTF-8, but we&#39;ll never get there if we don&#39;t take any steps in that direction. &nbsp;I&#39;m a strong proponent of UTF-8 everywhere (<a rel="nofollow" target="_new" href="http://www.utf8everywhere.org/">http://www.utf8everywhere.org/</a>).</p>
<p>My version of this little program only outputs UTF-8, it doesn&#39;t have any switches for choosing between ANSI/OEM/UTF-16. &nbsp;The terminal program I use is Cygwin&#39;s MinTTY, and since that supports UTF-8, the output is always Unicode, and I never need to think about code pages.</p>
<p>I realize that Windows uses UTF-16 for historical reasons (UTF-8 not being invented yet yada yada yada), but going forwards, I believe that the best long-term solution for new code is to always use UTF-8 whenever possible, and then convert to/from UTF-16 only when interfacing with Windows API functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm odd alt thread-odd thread-alt depth-1" id="comment-1081273">
				<div id="div-comment-1081273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081273">
			October 7, 2013 at 1:50 pm</a>		</div>

		<p>&quot;If clip.exe it for getting text to clipboard, then the tool getting text from clipboard should be board.exe.&quot;</p>
<p>My first thought was &quot;it&#39;s clip.exe run backwards, so it should be pilc.exe&quot;. &nbsp;:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1081283">
				<div id="div-comment-1081283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081283">
			October 7, 2013 at 2:08 pm</a>		</div>

		<p>&quot;Or perl (ANSI output only):</p>
<p>use Win32::Clipboard;</p>
<p>print Win32::Clipboard()-&gt;GetText();&quot;</p>
<p>Or Delphi</p>
<p>uses clipboard;</p>
<p>clipboard.print;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1081293">
				<div id="div-comment-1081293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">loRg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081293">
			October 7, 2013 at 2:42 pm</a>		</div>

		<p>&quot;Bonus chatter: You can get most of the same program above (no Unicode output) in much less code if you&#39;re willing to use C#:&quot;</p>
<p>You mean what will appear to be less code.</p>
<p>&quot;Or perl (ANSI output only):&quot;</p>
<p>Or in my new language (full unicode support with artificial intelligence just for the kicks)</p>
<p>&quot; &quot;</p>
<p>You shouldn&#39;t measure code quality or goodness by the code length. Lazy talk. You should measure good code by the least amount of bloat binary code it generates to do the task.</p>
<p>Code length fetish exasperates me.</p>
<div class="post">[<em>So you&#39;re saying we should all be writing in assembly language in order to get the best code? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1081323">
				<div id="div-comment-1081323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081323">
			October 7, 2013 at 8:00 pm</a>		</div>

		<p>@Danny: Your code won&#39;t compile because it lacks all kinds of &quot;Program &lt;progname&gt;&quot;, &quot;Begin&quot;, &quot;End.&quot; struct. With Perl, these are not necessary because it&#39;s scripting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1081333">
				<div id="div-comment-1081333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081333">
			October 8, 2013 at 12:04 am</a>		</div>

		<p>[You&#39;re making the assumption that all programs accept CP_UTF8. -Raymond]</p>
<p>The program that doesn&#39;t accept, say, CP-1251, doesn&#39;t accept UTF-8 just as fine, because it still can&#39;t fopen() that file path I copied to the clipboard. Really, the very fact that fopen() can&#39;t reliably open like, half of the files on my machine is apalling.</p>
<p>And if one has to feed a CP-1258-accepting program a UTF-8 string, well, there is iconv, and if you don&#39;t have iconv, you can write a MultiByte-&gt;UTF8/UTF8-MultiByte converter in 10 minutes in C, and I bet every more or less experienced Windows programmer has done it (I personally had to write it at least thrice, on different machines in different places).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1081353">
				<div id="div-comment-1081353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cd-MaN</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081353">
			October 8, 2013 at 4:16 am</a>		</div>

		<p>A quick look at the docs (<a rel="nofollow" target="_new" href="http://search.cpan.org/~jdb/Win32-Clipboard-0.56/Clipboard.pm">search.cpan.org/&#8230;/Clipboard.pm</a>) seems to indicate that Perl can output Unicode like this:</p>
<p>use Win32::Clipboard;</p>
<p>print Win32::Clipboard()-&gt;GetAs(CF_UNICODETEXT);</p>
<p>Don&#39;t quote me on this though &#8211; I don&#39;t have access to a Windows machine right now to test the correctness.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1081363">
				<div id="div-comment-1081363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081363">
			October 8, 2013 at 7:02 am</a>		</div>

		<p>The problem of logic here is because of erroneous decisions by MS that were only visible in hindsight, portable+Unicode+Windows has no intersection.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1081383">
				<div id="div-comment-1081383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random User 572095</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081383">
			October 8, 2013 at 7:24 am</a>		</div>

		<p>skSdnW,</p>
<p>Indeed. Michael Kaplan has written about this a few times. I suppose you could use a variation on &quot;void WriteLineRight(string)&quot; from his Apr 2010 post: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/michkap/archive/2010/04/07/9989346.aspx">blogs.msdn.com/&#8230;/9989346.aspx</a></p>
<p>Actually, is you search his blog for &quot;IsConsoleFontTrueType&quot;, you can find all kinds of interesting info about outputting text in consoles that may or may not be redirected.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1081423">
				<div id="div-comment-1081423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random User 572095</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081423">
			October 8, 2013 at 7:48 am</a>		</div>

		<p>Adam Rosenfield,</p>
<p>I have heard it argued that favoring UTF-8 is biased in favor of languages that can be represented entirely (or mostly) in basic ASCII. Most of Latin-based scripts get one or two bytes per character. Basic Greek, Coptic, Hebrew, and some Arabic gets two bytes per character. Most scripts not already mentioned (Tagalog, more Greek, Chinese, Japanese, Korean, etc) end up with three or more bytes per character.</p>
<p>Meanwhile, if you use UTF-16, just about everything in common use (theoretically) is two bytes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1081473">
				<div id="div-comment-1081473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081473">
			October 8, 2013 at 8:17 am</a>		</div>

		<p>@Random User 572095: Just about the only ones penalized are extended Greek and Japanese. The others are sill reasonably small because they&#39;re one or two symbols per word rather than letter. UTF-16 unfairly penalizes western languages by allocating thousands of codepoints to each asian language but most codepoints are the same size as western languages that get about 60 codepoints.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1081633">
				<div id="div-comment-1081633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081633">
			October 8, 2013 at 10:47 am</a>		</div>

		<p>@Random User 572095: While it&#39;s true that UTF-8 is biased towards Latin-based scripts in terms of memory used, that&#39;s only one (small) argument out of many in favor of UTF-8; did you read the link I posted?</p>
<p>The theoretical advantage of UTF-16 is that it&#39;s a fixed-width encoding, which simplifies a lot of things, except that&#39;s not even true since you have to deal with surrogate pairs for characters outside the BMP. &nbsp;So you still have to deal with a variable-width encoding, or your code doesn&#39;t really support Unicode, and that entire advantage is gone.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1081663">
				<div id="div-comment-1081663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081663">
			October 8, 2013 at 11:39 am</a>		</div>

		<p>My first language is one of those languages that have to use 2 bytes per characters, be it UTF8 or UTF16. And hey, if you used a legacy code page, you could use 1 byte per character and save half the space!</p>
<p>But you know what? It actually doesn&#39;t matter. At all. If you&#39;re concerned about the disk storage and/or network bandwidth — then use a compressor, any compressor, it compresses UTF8-encoded text to the same size it compresses ACP- or UTF16-encoded text. And concerns about RAM usage? An empty DOC-file was 10 KB and an empty DOCX was 12 KB large the last time I checked; in the biggest Word documents I&#39;ve seen had most of the space was spent on pictures and (I belive) markup — 200 MB document turned into ~200 KB text file when saved as plain text. I heavily doubt the character strings eat up most of the memory in application.</p>
<p>So please, stop digging up that &quot;reason&quot;. In the year 2013 we have enough memory, and that memory is fast enough for fiddling around with text.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1081703">
				<div id="div-comment-1081703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/wswiktor_4000_poczta.fm/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>wswiktor@poczta.fm</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081703">
			October 8, 2013 at 12:32 pm</a>		</div>

		<p>UTF-8 is a popular encoding nowadays. I believe Windows should add support for UTF-8 as a MBCS encoding for native applications. There&#39;s no technical reason not to do it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1081713">
				<div id="div-comment-1081713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081713">
			October 8, 2013 at 12:41 pm</a>		</div>

		<p>Many people say that. Michael Kaplan says it&#39;s hard. I say it&#39;s not hard. Code page 65001 is already assigned to it. It almost works as an OEMCP (everything appear to work except batch files don&#39;t run). From what I can find, only AnsiPrev and AnsiNext need to be fixed.</p>
<div class="post">[<em>There is a lot of code that assumes that the maximum number of bytes in a multibyte encoding is 2. (See, for example, any code that finds the start of the current MBCS character. Or which assumes that anything that isn&#39;t a lead byte must be a trail byte.) Everything may appear to work for you, but there&#39;s a lot of stuff that doesn&#39;t work that you simply haven&#39;t run into (or haven&#39;t noticed). -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1081723">
				<div id="div-comment-1081723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random User 572095</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081723">
			October 8, 2013 at 1:15 pm</a>		</div>

		<p>Granted. And you are correct, I accidentally overlooked your link; I apologize.</p>
<p>My purpose was only ensure due thought was given. Clearly you have, or you would not have provided your link. (I have encountered many who have put little or not thought into it. For example, some seem to think UTF-8 somehow magically maps all of Unicode into 8 bits per character.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1081743">
				<div id="div-comment-1081743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">loRg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081743">
			October 8, 2013 at 1:50 pm</a>		</div>

		<p>[So you&#39;re saying we should all be writing in assembly language in order to get the best code? -Raymond]</p>
<p>Of course not and you know it or at least i hope you are.</p>
<p>I&#39;m saying we should not be fooled by gimmicks like &quot;oh look at this new language you can do more with less code. See how stupidly easy it is to use too. Even an intellectually challenged person could use it. Yes, you can make a program.&quot; but they fail to perf test or even mention the mess that goes behind the scenes to make it work or the problems of allowing lazy or intellectually challenged people to code.</p>
<p>Have you ever tried to use windows 8 desktop mode? Charms and other crap popups the moment the mouse is too close to the screen edges. Disrupts and aggravates the user.</p>
<p>To shutdown windows 8 you have to first go into metro than move the mouse to the right edge, wait 5 minutes, hope it doesn&#39;t go away when you move the mouse to the right button, few clicks later windows shuts down.</p>
<p>Why not have it in the same menu as the log out option?</p>
<p>This is the sort of utterly bad design that happens when you let lazy and/or stupid people code.</p>
<p>Other examples: Look at the javascript code sites and ads use on the web. It&#39;s horrible!</p>
<p>Coding should be difficult as an intelligence test.</p>
<p>Just as internet should be. Internet was difficult to access before, it was a peaceful time. Less to no scams, trolls were unheard of, no nonsense elitist views. Ad blockers wasn&#39;t even needed back then because the ads was not hostile.</p>
<div class="post">[<em>Let&#39;s go back to your original statement. &quot;You should measure good code by the least amount of bloat binary code it generates to do the task.&quot; Total binary code size is only one factor in determine whether code is &quot;good&quot;. Others are maintenance cost, deployment cost, <a href="http://xkcd.com/1205/">opportunity cost</a>, and portability. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1081793">
				<div id="div-comment-1081793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081793">
			October 8, 2013 at 5:12 pm</a>		</div>

		<p>You&#39;re right my testing is limited. I have only 3 classes of programs. Those that are compiled Unicode, those that have latent code for UTF-8, and those that will never support MBCS, and most of the third category will pass UTF-8 if no attempt to edit the sequences is made.</p>
<div class="post">[<em>Programs in the third category will run into a lot of problems when they try to do things like word breaking or ellipsis munging. They may end up splitting a three-byte UTF-8 sequence after the second byte. Many programs in categories 1 and 3 also assume that strlen(MBCS) &le; 2 * wcslen(Unicode). Violating this assumption will lead to buffer overflows. -Raymond]</em></div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1081893">
				<div id="div-comment-1081893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131007-00/?p=3023#comment-1081893">
			October 9, 2013 at 7:24 am</a>		</div>

		<p>No category 3 program in my possession makes any Unicode conversion call, and if I could use AppLocale&#39;s method to set 65001 no Category 1 program would ever observe the strange codepage. I know how to fix clipboard to behave with AppLocale and don&#39;t need MS to lift a finger for that piece.</p>
<div class="post">[<em>Category 3 programs assume that 1 byte = 1 character. This is clearly not true with UTF-8. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

