<html>
<head>
<title>The MIPS R4000, part 8: Control transfer</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The MIPS R4000, part 8: Control transfer</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 11, 2018 / year-entry #85</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Branch, but wait, not quite yet.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Let's just get this out of the way.
</p>
<p>
The MIPS R4000 has branch delay slots.
</p>
<p>
Ugh.
</p>
<p>
When you perform a branch instruction,
the instruction after the branch instruction is executed,
<i>even if the branch is taken</i>.
The branch itself is delayed by one instruction.
</p>
<p>
This takes a lot of getting used to.
</p>
<p>
And to make things even more confusing, there are situations
where the instruction in the branch delay slot is ignored,
But lets not get into that yet.
</p>
<p>
Here's a basic example of a branch delay slot:
</p>
<pre>
    BEQ     r1, zero, dest      ; branch if r1 is equal to zero
    OR      r1, zero, zero      ; set r1 = 0; this line executes regardless
    ...
dest:
    ADDI    r2, zero, 1         ; set r2 = 1
</pre>
<p>
The <code>OR</code> instruction sits in the branch delay slot,
and it will execute regardless of whether the branch is taken.
It still executes <i>after</i> the branch instruction,
so don't think of the entire branch instruction
as executing after its delay slot.
Only the control transfer part executes late.
(In the above example, the <code>BEQ</code> tests the previous value of
<var>r1</var>,
not the value set by the <code>OR</code> instruction that sits in the
delay slot.)
</p>
<p>
In the above example, the sequence of events is as follows,
with time proceeding to the right.
</p>
<table BORDER=0 CELLPADDING=3 STYLE="text-align: center">
<tr>
<td STYLE="width: 10pc; border: solid 1px black;">Fetch and decode <code>BEQ</code> instruction.</td>
<td>&rarr;</td>
<td STYLE="width: 10pc; border: solid 1px black;">The condition is true, so
        fetch the next instruction from <code>dest</code>.</td>
<td></td>
<td STYLE="width: 10pc"></td>
<td></td>
<td></td>
</tr>
<tr>
<td STYLE="width: 10pc"></td>
<td></td>
<td STYLE="width: 10pc; border: solid 1px black;">Fetch and decode <code>OR</code> instruction.</td>
<td>&rarr;</td>
<td STYLE="width: 10pc; border: solid 1px black;">Set <var>r1</var> to zero.</td>
<td></td>
<td></td>
</tr>
<tr>
<td STYLE="width: 10pc"></td>
<td></td>
<td STYLE="width: 10pc"></td>
<td></td>
<td STYLE="width: 10pc; border: solid 1px black;">Fetch and decode <code>ADDI</code> instruction.</td>
<td>&rarr;</td>
<td STYLE="width: 10pc; border: solid 1px black;">Set <var>r2</var> to 1.</td>
</tr>
</table>
<p>
When the branch instruction executes, the fetch and decode of the
instruction in the branch delay slot is already under way.
Instead of throwing away that work, the processor says,
"Well, I may as well finish what I've started,
seeing as I've already paid for it,"
and it polishes off its drink before leaving the table
to fetch and decode the instruction at the branch destination.
The result is that the control transfer doesn't happen until
one straggler instruction has already executed.
</p>
<p>
Basically, this is a trick to avoid a pipeline bubble during branching
without needing complicated speculation circuitry.
On a system without branch delay slots,
the processor has a lot of decisions to make
the moment it decodes a branch instruction.
</p>
<ul>
<li>A branch predictor decides whether instruction
    fetching and decoding continues
    from the branch-taken or the branch-not-taken code path.
</li>
<li>Speculation circuitry executes the operations
    from the predicted code path, but doesn't commit
    the results.
    Any side effects (such as register updates, memory updates,
    and exceptions) must be suppressed until the processor
    determines whether the branch is taken.
    If speculation was correct, than all side effects are
    realized.
    If speculation was incorrect, than all side effects are
    discarded.
</li>
</ul>
<p>
Branch delay slots remove all this complexity.
The processor always fetches and executes the straight-line code.
And the processor has determined whether the branch is taken
by the time it needs to fetch an instruction beyond the
the branch delay slot.
This means that you don't need a branch predictor,
return address predictor,
or speculation,
thereby reducing chip complexity.
</p>
<p>
Unfortunately, branch delay slots also expose the internal pipelining.
If a future version of the processor has a different
pipeline depth, it still needs to emulate the old pipeline timing.&sup1;
</p>
<p>
Okay, before we get even more bogged down in the intricacies of branch
delay slots, let's look at the control transfer instructions.
First, the conditional transfers:
</p>
<pre>
    ; all comparisons are signed
    BEQ     rs, rt, dest    ; branch if rs = rt
    BNE     rs, rt, dest    ; branch if rs &ne; rt
    BGEZ    rs, dest        ; branch if rs &ge; 0
    BGTZ    rs, dest        ; branch if rs &gt; 0
    BLEZ    rs, dest        ; branch if rs &le; 0
    BLTZ    rs, dest        ; branch if rs &lt; 0
</pre>
<p>
The branch instructions have a reach of
&plusmn;128<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090611-00/?p=17933">KB</a>.
</p>
<p>
To help prepare for one of the above branch instructions,
you can use one of these instructions:
</p>
<pre>
    ; "set if less than"
    SLT     rd, rs, rt      ; rd = (( int32_t)rs &lt; ( int32_t)rt)    ? 1 : 0
    SLTI    rd, rs, imm16   ; rd = (( int32_t)rs &lt; ( int16_t)imm16) ? 1 : 0
    SLTU    rd, rs, rt      ; rd = ((uint32_t)rs &lt; (uint32_t)rt)    ? 1 : 0
    SLTIU   rd, rs, imm16   ; rd = ((uint32_t)rs &lt; (uint32_t)(int16_t)imm16) ? 1 : 0
</pre>
<p>
The <code>SLT</code> family of instructions compare two values
and set the destination register to 1 if the first comparand is less
than the second; otherwise it sets the destination register to 0.
The <code>I</code> versions compare against a signed 16-bit immediate value
rather than a register,
and
the <code>U</code> versions use an unsigned comparison instead of signed.
Note that <code>SLTIU</code> sign-extends the immediate from a 16-bit value
to a 32-bit value, but the comparison is performed as an unsigned value.
No arithmetic exceptions are raised by these instructions.
</p>
<p>
The assembler provides several pseudo-instructions for other
types of relative branches,
often using one of the <code>SLT</code> instructions to
build the branch condition in the <var>at</var> register.
Here are a few of them:
</p>
<pre>
    BEQ  zero, zero, dest   ; B dest
                            ; branch unconditional

    BEQ  rs, zero, dest     ; BEQZ rs, dest
                            ; branch if rs = 0

    BNE  rs, zero, dest     ; BNEZ rs, dest
                            ; branch if rs &ne; 0

    LI   at, imm32          ; BEQ rs, imm32, dest
    BEQ  rs, at, dest       ; branch if rs = imm32

    LI   at, imm32          ; BNE rs, imm32, dest
    BNE  rs, at, dest       ; branch if rs &ne; imm32

    SLT  at, rs, rt         ; BLT rs, rt, dest
    BNEZ at, dest           ; branch if rs &lt; rt

    SLTI at, rs, imm16      ; BLT rs, imm16, dest
    BNEZ at, dest           ; branch if rs &lt; imm16

    LI   at, imm32          ; BLT rs, imm32, dest
    SLT  at, rs, at         ;
    BNEZ at, dest           ; branch if rs &lt; imm32

    SLT  at, rs, rt         ; BGE rs, rt, dest
    BEQZ at, dest           ; branch if rs &ge; rt

    SLTU at, rs, rt         ; BGEU rs, rt, dest
    BEQZ at, dest           ; branch if rs &ge; rt (unsigned)
</pre>
<p>
And so on. You get the idea.
</p>
<p>
The next batch of control transfer instructions are those which
perform relative branches and
store the return address in the <var>ra</var> register.
The return address is the instruction after the branch delay slot.
</p>
<pre>
    ; all comparisons are signed
    BGEZAL  rs, dest        ; branch if rs &ge; 0 and link
    BLTZAL  rs, dest        ; branch if rs &lt; 0 and link

    ; pseudo-instruction
    BGEZAL  zero, dest      ; BAL dest
                            ; branch unconditional and link
</pre>
<p>
The <code>BAL</code> pseudo-instruction is an unconditional branch
and link, implemented by encoding a conditional branch and link
where the condition is always true (namely 0 &ge; 0).
</p>
<p>
The next batch is the "likely" branch instructions.
These not only
include a hint that the branch should be predicted taken,
but they also have the extra weirdness that the instruction in
the branch delay slot is <i>ignored</i> if the branch is not taken!
</p>
<p>
Note carefully: The instruction in the branch delay slot is ignored
if the branch is <i>not taken</i>.
If the branch is taken, then the instruction in the branch delay
slot executes normally.&sup2;
</p>
<pre>
    ; all comparisons are signed
    BEQL    rs, dest        ; branch if rs = 0, likely
    BNEL    rs, dest        ; branch if rs &ne; 0, likely
    BGEZL   rs, dest        ; branch if rs &ge; 0, likely
    BGTZL   rs, dest        ; branch if rs &gt; 0, likely
    BLEZL   rs, dest        ; branch if rs &le; 0, likely
    BLTZL   rs, dest        ; branch if rs &lt; 0, likely

    BGEZALL rs, dest        ; branch if rs &ge; 0 and link, likely
    BLTZALL rs, dest        ; branch if rs &lt; 0 and link, likely
</pre>
<p>
The MIPS people presumably
reconsidered these instructions,
because later versions of the architecture mark them
as deprecated.
</p>
<p>
The last group are the "jump" instructions.
</p>
<pre>
    J       dest            ; jump
    JAL     dest            ; jump and link
                            ; return address stored in ra

    JR      rs              ; jump register
    JALR    rd, rs          ; jump and link register
                            ; return address stored in rd
</pre>
<p>
The first two instructions encode an absolute jump, sort of.
The <code>J</code> and <code>JAL</code> instructions have room
to express the lower 28 bits of the absolute jump target.
The upper four bits of the jump target are copied from the
program counter of the branch delay slot.
(This is almost always the same as the program counter of the
jump instruction itself; it makes a difference only if the jump
instruction and the branch delay slot are on opposite sides of a
256<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090611-00/?p=17933">MB</a>
boundary.)
</p>
<p>
For example, suppose the program counter is at <code>0x12345678</code>.
This means that the jump instruction can jump to any address in the range
<code>0x10000000</code> through <code>0x1FFFFFFC</code>.
</p>
<p>
This partitioning of the jump target space into 256MB regions means that
in practice,
a DLL cannot exceed 256MB,
and a DLL cannot be relocated so that it straddles a 256MB boundary,
because it would be impossible to fix up the jumps that cross the boundary.
</p>
<p>
The jump register instructions use a register to specify a jump target.
Unlike the absolute jump instructions,
the jump register instructions can jump to any 32-bit address.
</p>
<p>
The <code>JALR</code>
instruction is the only control transfer
instruction that lets you pick the register to receive the return address.
In practice, you always pick <var>ra</var>, but the possibility is
nevertheless available to pick something else,
in case you're doing something wacky.
</p>
<p>
Okay, now back to branch delay slots.
</p>
<p>
One rule about branch delay slots is that you cannot put another
branch instruction in a branch delay slot.
Because that would be
<a HREF="http://www.imdb.com/title/tt1375666/">
<i>Inception</i></a>-level crazy.
</p>
<p>
Another rule about branch delay slots is that if an exception occurs
while executing the instruction in the branch delay slot,
and the kernel decides to resume execution after fixing the problem,
execution will resume <i>at the preceding branch instruction</i>.
</p>
<p>
This is obvious in retrospect, because if execution resumed at
the branch delay slot, well, there's no branch instruction active
when execution resumes,
so execution will fall through,
which is bad
if the original exception had occurred when executing the instruction
in the branch delay slot for a taken branch.
Resuming from the instruction that raised the exception would cause
the taken branch to become not-taken!
</p>
<p>
Therefore, the kernel backs up to the branch instruction and resumes
execution there.
Branch instructions cannot fault, and they
modify at most <var>ra</var>;
in particular, the register being tested by a conditional branch
did not change,
so the resumed execution will take or not-take the branch
in the same way as the original execution,
and the instruction in the branch delay slot
will get another chance to execute.
</p>
<p>
Well, I sort of lied when I said that "the register being tested by
a conditional branch did not change":
If the register being tested <i>is <var>ra</var> itself</i>,
then the branch instruction will indeed modify the register that controls
the conditional branch!
(Similarly if you write
<code>JALR r, r</code>.)
</p>
<p>
So let's just say that it's not allowed by convention.
A branch instruction cannot be conditional on <var>ra</var> if it also
modifies <var>ra</var>,
and
<code>JALR r, r</code> is also not allowed by convention.&sup3;
</p>
<p>
These forbidden instructions are merely software conventions.
The processor will gladly let you do these disallowed things,
but if you try it, and you take an exception on the instruction in the
branch delay slot,
then your program will act all wacky when execution is resumed,
and you got what you deserved.
</p>
<p>
Oh yeah, you also shouldn't put a multi-instruction pseudo-instruction
in the branch delay slot,
because only the first instruction will execute as part of the branch
delay slot.
I never tried it,
but I hope the assembler warns you when this happens.
</p>
<p>
Branch delay slots are a place you are likely to
see <code>NOP</code> instructions.
If the compiler can't find anything to put in the branch delay slot,
it will just dump a boring <code>NOP</code> in there.
</p>
<p>
Next time, we'll look at some of the crazy things you can do
with branch delay slots.
I don't know if any compilers take advantage of them, but
they are technically legal.
</p>
<p>
&sup1;
I'm led to believe that this problem actually occurred.
The original MIPS processor was single-issue with a two-stage pipeline.
Later versions deepened the pipeline and added multi-issue,
which means that a single branch delay slot is not sufficient
to avoid a pipeline bubble.
So they had to add branch prediction circuitry anyway.
</p>
<p>
&sup2;
The story as I heared it is that the MIPS folks noticed that
lots of people were putting <code>NOP</code> instructions in the
branch delay slot because they couldn't find anything useful to go
in there.
So the MIPS people added the "likely" version of the branch instructions
which allows you to front-load the first instruction of the
jump target in the branch delay slot.
If the branch is not taken, the instruction in the branch delay slot
is ignored, which means that you don't have to worry about the
front-loaded instruction interfering with the fall-through code path.
Though they ended up deprecating the instructions,
so who knows what really happened.
Maybe an intrepid reader can dig up a design document.
</p>
<p>
&sup3;
Furthermore,
the Windows NT calling convention requires
that the return address be passed in <var>ra</var>,
so you can cancel your dreams of using <code>JALR</code>
on Windows NT
with a nonstandard return address register.
</p>
<p>
<b>Bonus chatter</b>:
Intrepid reader laonianren 
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332685">
dug up some usenet articles that fill in the background</a>.
</p>
<p>
The branch-likely instructions were added
"<a HREF="https://compilers.iecc.com/comparch/article/00-05-006">only
to make it
easier to populate the branch delay slots in loops</a>":
You can put the first instruction of the loop body in the delay slot,
and branch to the <i>second</i> instruction of the loop body.
If the branch is not taken, then the instruction in the branch delay
slot is converted to a NOP.
(It still consumes a cycle, but nothing happens during that cycle.)
</p>
<p>
The branch-likely instructions were deprecated
because
"<a HREF="https://compilers.iecc.com/comparch/article/03-09-094">conditionally
squashing the result of the delay-slot instruction
is a pain in the neck</a>."
Processors are required to implement the instructions, but they
are not required to implement them <i>efficiently</i>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1332615">
				<div id="div-comment-1332615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332615">
			April 11, 2018 at 7:16 am</a>		</div>

		<p>I guess the use of delay slots allowed them to&#8230; DELAY the introduction of branch prediction logic!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1332635">
				<div id="div-comment-1332635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">VinDuv</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332635">
			April 11, 2018 at 8:22 am</a>		</div>

		<p>What happens if an interrupt occurs during the execution of a branch delay slot? Does the kernel also has to rewind execution in that case?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1332735">
				<div id="div-comment-1332735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332735">
			April 11, 2018 at 12:53 pm</a>		</div>

		<p>Yes. Anything that requires resumption must back up to the branch instruction in order to resume correctly.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1332685">
				<div id="div-comment-1332685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332685">
			April 11, 2018 at 9:23 am</a>		</div>

		<p>[1] claims that the &#8220;likely&#8221; branches offered marginal gains and became harder to implement with high-performance (presumably longer) pipelines.  They were deprecated so CPU implementations could choose correct but slow.</p>
<p>This is not an official document but Tim Olson does seem to be an actual CPU designer.</p>
<p>[1]: <a href="https://compilers.iecc.com/comparch/article/03-09-094" rel="nofollow">https://compilers.iecc.com/comparch/article/03-09-094</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1332715">
				<div id="div-comment-1332715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Louis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332715">
			April 11, 2018 at 11:33 am</a>		</div>

		<p>I don&#8217;t understand how the &#8220;likely&#8221; instructions work. Isn&#8217;t it just as complex to &#8220;not execute the branch delay slot if the branch is not taken&#8221; as it is to &#8220;not execute the branch delay slot if the branch <i>is</i> taken&#8221; (i.e. regular branching with no branch delay slot)?</p>
<p>As I typed this I&#8217;ve come up with a guess: it&#8217;s sort of like a branch predictor where the prediction is always &#8220;taken&#8221; no matter what, and the instruction in the BDS is backed out if the branch is not taken. The only other possibility I can come up with is that the processor stalls until it knows whether or not to take the branch, but that doesn&#8217;t buy anything over a regular branch followed by a NOP.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1332745">
				<div id="div-comment-1332745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332745">
			April 11, 2018 at 1:15 pm</a>		</div>

		<p>The instruction is bubbled if the branch wasn&#8217;t taken. In an in-order processor this will never cause a further stall so it is faster than a NOP in the branch-taken case and no slower in the branch-not-taken case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1332775">
				<div id="div-comment-1332775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332775">
			April 11, 2018 at 2:09 pm</a>		</div>

		<p>The two cases indeed need pretty much the same mechanisms (conditionally nullifying in-flight instructions). But the branch-likely thing saves you a cycle (or, more specifically, lets you put an instruction into a cycle that would otherwise be wasted).</p>
<p>The whole thing about branch delay slots in general is that by the time the branch actually executes, more instructions have entered the pipeline and might have to get cancelled. If you do cancel them on a taken branch, that means the machine is going to be idle for the next few cycles after a branch. The idea with branch delay slots and branch-likely both is to get some value out of the instructions you&#8217;ve already fetched, but the actual use cases are somewhat complementary.</p>
<p>Into a regular branch delay slot, you can only schedule instructions that you _always_ want to execute. What this usually boils down to is trying to find one instruction from the basic block preceding the branch that the branch itself doesn&#8217;t depend on, and moving it into the branch delay slot. That&#8217;s great if you have such an instruction, but often you don&#8217;t.</p>
<p>The branch-likely thing allows you to grab an instruction from the basic block you&#8217;re branching to. Unless that instruction happens to be a branch itself, you can just grab the first instruction of that block (and then branch straight to the second instruction).</p>
<p>So having both branch delay slots and the branch-likely thing increases your pool of instructions you can pick from, and reduce the number of wasted cycles on a taken branch.</p>
<p>All this is nice if your pipeline is short enough that a taken branch only induces one extra cycle of latency (as was the case for the earliest MIPS chips), but by the time of the R4000 the pipeline had gotten longer, there were more cycles to fill, and it had become painfully obvious that clever hacks assuming a particular pipeline and latency were going to be liabilities in the long run. (Both the delay slot and the branch-likely hack are trouble if your pipeline doesn&#8217;t work exactly the same way as the pipeline of the machine they were originally designed for.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1332835">
				<div id="div-comment-1332835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332835">
			April 12, 2018 at 6:44 am</a>		</div>

		<p>I found the best instruction to put there was usually the loop incr instruction because you rarely care after the loop what the value of the counter is.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1332725">
				<div id="div-comment-1332725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332725">
			April 11, 2018 at 12:04 pm</a>		</div>

		<p>If you don&#8217;t want to deal with branch delay slots, always put a NOP after any kind of branch. Maybe the compiler will do that for you with -O0 (or whatever the equivalent was in Visual C++ at the time).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1332755">
				<div id="div-comment-1332755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332755">
			April 11, 2018 at 1:30 pm</a>		</div>

		<p>The earliest MIPS implementations (MIPS I architecture, the original &#8220;Microprocessor without Interlocked Pipeline Stages&#8221;) had a five-stage pipeline (IF, ID, EX, MEM, WB) and, if I remember correctly, had some trickery to evaluate the branch conditions early specifically to make sure that only one cycle is &#8220;burned&#8221; after branches, and then they made that the branch delay slot. (They also had load delay slots, because the result of loads was known by the end of MEM, which finishes at the same time at the succeeding instruction&#8217;s EX cycle, i.e. too late.)</p>
<p>By the R4000 (MIPS III architecture), there were (some) interlocks, load delay slots were gone, load latencies were another cycle longer, and branch delay slots still existed in the ISA but the actual delay was up to 3 cycles by then. (1 cycle covered by the branch delay slot, the next two were inserted speculatively and had to get nullified if the branch was found to be taken.) [Source: <a href="https://people.eecs.berkeley.edu/~kubitron/courses/cs252-S07/handouts/papers/R4000.pdf%5D" rel="nofollow">https://people.eecs.berkeley.edu/~kubitron/courses/cs252-S07/handouts/papers/R4000.pdf%5D</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1332795">
				<div id="div-comment-1332795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Clarkstone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332795">
			April 11, 2018 at 3:38 pm</a>		</div>

		<p>I have considered the possibility of a processor with a variable-length branch-delay slot to let programs be written with branch delay slots that could take advantage of future processors with longer pipelines: a jump would be split into an LJR instruction that loaded the jump-destination register (a specific special-purpose jump-register not a general-purpose register, and it must be in its &#8220;empty&#8221; state before loading), then another XJ instruction that executed the jump and invalidated the contents of the register (effectively the marker for the end of the branch-delay slot). When the instruction-fetcher got to an XJ instruction it would stall if necessary until the instruction-executor loaded the jump register.</p>
<p>A subroutine that did no branches itself could load its return address into the jump register as its first action before doing its main work.</p>
<p>I later noticed that the jump register can be thought of like a queue that could have 0 or 1 elements in it, which suggests the generalisation of a longer queue in later processors of the same ISA, for routines that can tell you what their next few jumps will be, e.g. code like<br />
&#8220;if i++ then p else q&#8221; will become something like:<br />
&#8220;&#8221;&#8221;<br />
LOAD i<br />
LJR_NZ p   // LJR conditional on value loaded being non-zero<br />
LJR_NZ r   // LJR conditional on value loaded being non-zero<br />
LJR_Z q    // LJR conditional on value loaded being zero<br />
INC    // in the branch delay slot<br />
STORE i    // in the branch delay slot<br />
XJ // to p or q<br />
p:<br />
&#8230; // p stuff<br />
XJ // always to r<br />
q:<br />
&#8230; // q stuff<br />
r:<br />
&#8220;&#8221;&#8221;<br />
and the instruction fetching could be all the way to &#8220;r:&#8221; before the &#8220;LOAD i&#8221; had finished.<br />
Code like &#8220;{if b then p else q} ; r; {if b then s else t}; u&#8221; where p/q/r/s do no jumps can happily push 4 addresses onto a jump queue the moment that b is known.</p>
<p>It&#8217;s not clear how this would interact with exceptions or interrupts, and it&#8217;s a bit crippled when you have subroutine call in either branch. For that matter, there&#8217;s probably not much point in mechanisms to let the instruction fetching get so far ahead of the instruction execution when delay slots are *already* hard to fill. Still a fun thing to think about.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1333095">
				<div id="div-comment-1333095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erkin Alp Güney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1333095">
			April 14, 2018 at 2:43 am</a>		</div>

		<p>What makes you believe XJ finalise-jump would be accomplished in single cycle?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1332825">
				<div id="div-comment-1332825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332825">
			April 12, 2018 at 4:00 am</a>		</div>

		<p>So whenever there&#8217;s an unexpected kernel transition, the kernel has to check whether the previous instruction is a branch so that it can resume it correctly? How does the kernel even know that the previous instruction exists? (I&#8217;m thinking you might have just jumped to the first instruction on a page and the previous page doesn&#8217;t exist.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1332845">
				<div id="div-comment-1332845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Giedrius</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332845">
			April 12, 2018 at 8:28 am</a>		</div>

		<p>I&#8217;d guess processor never updates IP to branch delay slot. So if kernel transition happens, kernel still sees the original branch IP.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1332875">
				<div id="div-comment-1332875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332875">
			April 12, 2018 at 9:19 am</a>		</div>

		<p>MIPS is well-documented on the Internet, probably because many schools use it in their assembly language / computer architecture class. Short answer: The processor provides enough information for the kernel to figure out what happened. For example, <a href="http://os161.eecs.harvard.edu/documentation/sys161-1.99.04/mips.html" rel="nofollow">the BD bit is set if the exception occurred in a branch delay slot</a>.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1332865">
				<div id="div-comment-1332865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pietro Gagliardi (andlabs)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180411-00/?p=98485#comment-1332865">
			April 12, 2018 at 8:50 am</a>		</div>

		<p>Could be worse: could be SuperH, where some instructions have branch delay and some don&#8217;t! :D (And in one case, you can even opt in to branch delays with the /s suffix.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

