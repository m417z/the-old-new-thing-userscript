<html>
<head>
<title>You can drag multiple virtual objects, you know</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>You can drag multiple virtual objects, you know</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 31, 2008 / year-entry #104</td></tr>
<tr><td><b>Tags:</b></td><td>code;what-a-drag</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080331-00/?p=22933</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer wanted to know how they could find out the directory that the user dropped a file onto. As we already noted, users can drop files onto things other than directories, so the question itself comes with incorrect hidden assumptions. This is another one of those cases where you have to ask the customer,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer wanted to know how they could find out the
directory that the user dropped a file onto.
As we already noted,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2007/05/07/2453927.aspx">
users can drop files onto things other than directories</a>,
so the question itself comes with incorrect hidden assumptions.
This is another one of those cases where you have to ask the
customer, "What are you really trying to do?"
They have a problem and
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/03/23/558887.aspx">
solved half of it and are asking
you for help with the second half</a>, the part that makes little sense.
</p>
<p>
In this case, what the customer really wanted to do was
create additional supporting files into the
directory that the user dropped the file onto.
To solve the real problem, all you have to do is add
virtual objects to the data object the file being dragged.
</p>
<p>
Let's illustrate this by adding a second file to our
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/03/18/8080183.aspx">
minimal example of dragging a virtual file</a>.
Actually, let's make it more interesting.
We're going to drag one real file plus one virtual file.
Start by adding another file's contents to our list of clipboard formats:
</p>
<pre>
  enum {
    DATA_FILEGROUPDESCRIPTOR,
    <font COLOR=blue>DATA_FILECONTENTS0,
    DATA_FILECONTENTS1,</font>
    DATA_NUM,
    DATA_INVALID = -1,
  };
</pre>
<p>
Of course, we need to initialize the <code>FORMATETC</code>
for the contents of our new virtual file.
</p>
<pre>
CTinyDataObject::CTinyDataObject() : _cRef(1)
{
  SetFORMATETC(&amp;_rgfe[DATA_FILEGROUPDESCRIPTOR],
               RegisterClipboardFormat(CFSTR_FILEDESCRIPTOR));
  SetFORMATETC(&amp;_rgfe[<font COLOR=blue>DATA_FILECONTENTS0</font>],
               RegisterClipboardFormat(CFSTR_FILECONTENTS),
               <font COLOR=blue>TYMED_ISTREAM</font>, /* lindex */ 0);
  <font COLOR=blue>SetFORMATETC(&amp;_rgfe[DATA_FILECONTENTS1],
               RegisterClipboardFormat(CFSTR_FILECONTENTS),
               TYMED_HGLOBAL, /* lindex */ 1);</font>
}
</pre>
<p>
We need to add this second file to our <code>FILEGROUPDESCRIPTOR</code>.
Doing this is trickier because the <code>FILEGROUPDESCRIPTOR</code>
is a variable-size structure, so we have to declare our own version
that has room for two files.
</p>
<pre>
// Hard-coded for expository purposes
// (I can't believe I had to write that.)
#define FILETODRAG TEXT("C:\\windows\\clock.avi")

HRESULT CreateFileGroupDescriptor(HGLOBAL *phglob)
{
  union {
     FILEGROUPDESCRIPTOR fgd;
     BYTE buffer[FIELD_OFFSET(FILEGROUPDESCRIPTOR, fgd[2])];
  } u;
  ZeroMemory(&amp;u, sizeof(u));
  u.fgd.cItems = 2;

  // item 0: the file itself
  WIN32_FILE_ATTRIBUTE_DATA wfad;
  if (!GetFileAttributesEx(FILETODRAG, GetFileExInfoStandard,
                           &amp;wfad)) {
   return E_FAIL;
  }
  u.fgd.fgd[0].dwFlags = FD_ATTRIBUTES | FD_CREATETIME |
                 FD_ACCESSTIME | FD_WRITESTIME | FD_FILESIZE;
  u.fgd.fgd[0].dwFileAttributes = wfad.dwFileAttributes;
  u.fgd.fgd[0].ftCreationTime   = wfad.ftCreationTime;
  u.fgd.fgd[0].ftLastAccessTime = wfad.ftLastAccessTime;
  u.fgd.fgd[0].ftLastWriteTime  = wfad.ftLastWriteTime;
  u.fgd.fgd[0].nFileSizeHigh    = wfad.nFileSizeHigh;
  u.fgd.fgd[0].nFileSizeLow     = wfad.nFileSizeLow;
  StringCchCopy(u.fgd.fgd[0].cFileName,
                ARRAYSIZE(u.fgd.fgd[0].cFileName),
                PathFindFileName(FILETODRAG));

  // item 1: The virtual "tag-along" file
  StringCchCopy(u.fgd.fgd[1].cFileName,
                ARRAYSIZE(u.fgd.fgd[0].cFileName),
                TEXT("TagAlong"));

  return CreateHGlobalFromBlob(&amp;u, sizeof(u),
                               GMEM_MOVEABLE, phglob);
}
</pre>
<p>
The ad-hoc union declares a block of memory large enough
for a <code>FILEGROUPDESCRIPTOR</code> that holds two files.
File zero is the file we are dragging, and as a courtesy
(and in violation of the "doing the absolute least amount of
work necessary" that has guided the series),
we fill in the file attributes so that when the file is dropped
onto Explorer, the resulting file has the right metadata.
On the other hand, our virtual file tries to sneak by
with as little as possible, providing only the mandatory file name.
</p>
<p>
The last thing to do is hand out the <code>FILEGROUPDESCRIPTOR</code>
and the two files when we are asked for them.
</p>
<pre>
HRESULT CTinyDataObject::GetData(FORMATETC *pfe, STGMEDIUM *pmed)
{
  ZeroMemory(pmed, sizeof(*pmed));

  switch (_GetDataIndex(pfe)) {
  case DATA_FILEGROUPDESCRIPTOR:
    pmed-&gt;tymed = TYMED_HGLOBAL;
    <font COLOR=blue>return CreateFileGroupDescriptor(&amp;pmed-&gt;hGlobal);

  case DATA_FILECONTENTS0:
    pmed-&gt;tymed = TYMED_ISTREAM;
    return SHCreateStreamOnFile(FILETODRAG, STGM_READ,
                                &amp;pmed-&gt;pstm);

  case DATA_FILECONTENTS1:
    pmed-&gt;tymed = TYMED_HGLOBAL;
    return CreateHGlobalFromBlob("Dummy", 5, GMEM_MOVEABLE,
                                  &amp;pmed-&gt;hGlobal);</font>
  }

  return DV_E_FORMATETC;
}
</pre>
<p>
There you have it, a data object that consists of a file
(<code>FILETODRAG</code>) and a virtual file.
When the user drops the data object into a folder,
both files are dropped into the destination directory.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-614223">
				<div id="div-comment-614223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fulov Kwesjuns</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080331-00/?p=22933#comment-614223">
			March 31, 2008 at 11:00 am</a>		</div>

		<p>Does the cursor reflect this? Or is there no paper under the arrow anymore since Explorer?</p>
<div class=post>[<i>Remember, the series on dragging virtual content focused on <a href="http://blogs.msdn.com/oldnewthing/archive/2008/03/11/8080077.aspx" rel="nofollow">the least amount</a> <a href="http://blogs.gotdotnet.com/oldnewthing/archive/2008/03/18/8080183.aspx" rel="nofollow">of work necessary</a> to accomplish the task. If you want to add a fancy cursor, then feel free. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-614233">
				<div id="div-comment-614233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080331-00/?p=22933#comment-614233">
			March 31, 2008 at 12:07 pm</a>		</div>

		<p>Interesting declaration; I don&#8217;t remember VC6 allowing that when I tried (I haven&#8217;t had cause to try it in newer versions). I&#8217;d have probably gone for a struct of a FILEGROUPDESCRIPTOR and a FILEDESCRIPTOR.</p>
<p>If windows headers ever get enhanced for C++ then FILEGROUPDESCRIPTOR could be typedef&#8217;d to struct tagFILEGROUPDESCRIPTOR&lt;1&gt;. Or possibly derived from it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-614323">
				<div id="div-comment-614323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fulov Kwesjuns</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080331-00/?p=22933#comment-614323">
			March 31, 2008 at 5:35 pm</a>		</div>

		<p>Sorry Raymond -_-&#8216; Any hint on where to call SetCursor would be appreciated though :) I can make the fancy cursor with some pages sticking under it but actually using it would be superb ;)</p>
<p>And thanks for another interesting episode in this series :)</p>
<div class=post>[<i>As I already noted, fancy drag/drop effects are explicitly excluded from this series. I don&#8217;t have the answer to your question memorized, so I&#8217;d have to go searching for it anyway. I trust you can do that, too. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-614353">
				<div id="div-comment-614353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve Thresher</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080331-00/?p=22933#comment-614353">
			April 1, 2008 at 4:42 am</a>		</div>

		<p>IDropTargetHelper might be what you&#8217;re looking for.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

