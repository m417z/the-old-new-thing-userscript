<html>
<head>
<title>How can I detect whether my PC is in tablet mode?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I detect whether my PC is in tablet mode?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 6, 2016 / year-entry #140</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160706-00/?p=93815</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">You ask for the user interaction mode.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://windows.microsoft.com/en-us/windows-10/getstarted-like-a-tablet">
Tablet Mode</a>, introduced in Windows 10,
is a
blah blah blah blah.
</p>
<p>
Okay, enough with the introduction.
</p>
<p>
From a Store app,
you detect whether you are in tablet mode by
inspecting the <code>User&shy;Interaction&shy;Mode</code>
for your view.
Sample code for this is given in
<a HREF="http://go.microsoft.com/fwlink/p/?LinkId=619894">
the UserInteractionMode sample</a>,
but the short version is that you do this:
</p>
<pre>
UIViewSettings^ uiViewSettings = UIViewSettings::GetForCurrentView();
UserInteractionMode mode = uiViewSettings-&gt;UserInteractionMode;
switch (mode)
{
case UserInteractionMode::Touch:
  // PC is in tablet mode or other touch-first environment
  break;

case UserInteractionMode::Mouse:
  // PC is not in tablet mode or other mouse-first environment
  break;
}
</pre>
<p>
The user interaction mode is a per-view property because
the system may have multiple monitors, some of which are
in tablet mode
and some of which aren't.
An app can detect when the user interaction mode of a view
has changed by listening for the
<code>Size&shy;Changed</code> event.
</p>
<p>
This is a general convention for view properties:
View properties that affect layout generally raise the
<code>Size&shy;Changed</code> event when they change.
The idea behind this is that this gives you a single event
to trigger the recalculation of your app's layout policy.
If multiple things change at once, such as the window size,
the user interaction mode, and the full-screen mode,
then you run only one layout recalculation instead of three.
</p>
<p>
Okay, that's great for a Store app,
but what about your classic desktop app?
How does a classic desktop app learn whether a window
is on a monitor that is in tablet mode?
</p>
<p>
You basically do exactly the same thing as the Store app:
You get the <code>UIView&shy;Settings</code> and ask it
for the user interaction mode.
The gotcha is that
<code>Get&shy;For&shy;Current&shy;View</code>
doesn't make sense in a desktop app because desktop
apps don't have
have a <code>Core&shy;Application&shy;View</code>.
</p>
<p>
The answer is to use the interop interface
<code>IUIView&shy;Settings&shy;Interop</code>.
The general design pattern for the interop interface
is that it each view-related static method has
a corresponding method on the interop interface
that takes a window handle instead of a view.
</p>
<p>
We'll see these as we go through the Little Program.
(Remember, Little Programs do little to no error checking.)
Start with
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20030723-00/?p=43073">
the scratch program</a>
and make these changes:
</p>
<pre>
<font COLOR=blue>#include &lt;wrl/client.h&gt;
#include &lt;wrl/wrappers/corewrappers.h&gt;
#include &lt;windows.ui.viewmanagement.h&gt;
#include &lt;UIViewSettingsInterop.h&gt;
#include &lt;tchar.h&gt; // Huh? Why are you still using ANSI?

namespace WRL = Microsoft::WRL;
namespace vm = ABI::Windows::UI::ViewManagement;

WRL::ComPtr&lt;vm::IUIViewSettings&gt; g_viewSettings;

vm::UserInteractionMode g_mode = vm::UserInteractionMode_Mouse;</font>
</pre>
<p>
So far, we're just declaring some global thingies.
In a real program, these would probably be instance
members of some C++ class,
but I'm being lazy.
</p>
<pre>
<font COLOR=blue>void CheckTabletMode(HWND hwnd)
{
  if (g_viewSettings)
  {
    vm::UserInteractionMode currentMode;
    g_viewSettings-&gt;get_UserInteractionMode(&amp;currentMode);
    if (g_mode != currentMode)
    {
      g_mode = currentMode;
      // This sample just updates some text.
      InvalidateRect(hwnd, nullptr, true);
    }
  }
}</font>
</pre>
<p>
Okay, here's the part where we read the current user
interaction mode from the <code>IUIView&shy;Settings</code>,
and if it changed, we do whatever we do when the user
interact mode changes.
In a real problem, we would do some relayout,
but in this sample program, we're just going to update a string,
so we invalidate our window so we can draw the new string.
</p>
<pre>
BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
  <font COLOR=blue>WRL::ComPtr&lt;IUIViewSettingsInterop&gt; interop;
  Windows::Foundation::GetActivationFactory(WRL::Wrappers::HStringReference(
     RuntimeClass_Windows_UI_ViewManagement_UIViewSettings).Get(),
     &amp;interop);

  interop-&gt;GetForWindow(hwnd, IID_PPV_ARGS(&amp;g_viewSettings));

  CheckTabletMode(hwnd);</font>
  return TRUE;
}
</pre>
<p>
Okay, now things get exciting.
To get the <code>UIView&shy;Settings</code> for a window,
you first get the activation factory (which is where all
the static methods hang out)
and ask for the <code>IUIView&shy;Settings&shy;Interop</code>
interface.
From there,
call
<code>Get&shy;For&shy;Window</code>,
which is the window-based version of
<code>Get&shy;For&shy;Current&shy;View</code>.
</p>
<p>
That's the only wrinkle. Once you have the
CODE>UIView&shy;Settings</code>, you can get its user
interaction mode as usual.
</p>
<pre>
void
OnDestroy(HWND hwnd)
{
  <font COLOR=blue>g_viewSettings.Reset();</font>
  PostQuitMessage(0);
}
</pre>
<p>
Naturally, we need to clean up when we're done.
</p>
<pre>
void
PaintContent(HWND hwnd, PAINTSTRUCT *pps)
{
  <font COLOR=blue>PCTSTR message = TEXT("?");

  // adapt to the new mode! We just update our string.
  switch (g_mode)
  {
  case vm::UserInteractionMode_Mouse: message = TEXT("Mouse"); break;
  case vm::UserInteractionMode_Touch: message = TEXT("Touch"); break;
  }

  TextOut(pps-&gt;hdc, 0, 0, message, _tcslen(message));</font>
}
</pre>
<p>
Our <code>Paint&shy;Content</code> function prints the current
mode.
</p>
<p>
Wait, what about the <code>Size&shy;Changed</code> event?
Oh, right, for classic Win32, you can just use
the
<code>WM_<wbr>WINDOW&shy;POS&shy;CHANGED</code> message,
which will give us a chance to see if we moved to a monitor
that is in a different tablet mode state from where we were before.
</p>
<pre>
<font COLOR=blue>void
OnWindowPosChanged(HWND hwnd, LPWINDOWPOS lpwpos)
{
  CheckTabletMode(hwnd);
}</font>
</pre>
<p>
The last wrinkle is the case where the global tablet mode state
changes.
</p>
<pre>
<font COLOR=blue>void OnSettingsChange(HWND hwnd, LPCTSTR sectionName)
{
  if (sectionName &amp;&amp;
      lstrcmpi(sectionName, TEXT("UserInteractionMode")) == 0)
  {
    CheckTabletMode(hwnd);
  }
}</font>
</pre>
<p>
When the global tablet mode state changes,
the shell broadcasts the
<code>"User&shy;Interaction&shy;Mode"</code> setting change
notification.
</p>
<pre>
<font COLOR=blue>HANDLE_MSG(hwnd, WM_WINDOWPOSCHANGED, OnWindowPosChanged);
HANDLE_MSG(hwnd, WM_WININICHANGE, OnSettingsChange);</font>
</pre>
<p>
And finally, we hook up our message handlers.
</p>
<p>
There you go, a program that knows whether it is in tablet mode.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1255195">
				<div id="div-comment-1255195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160706-00/?p=93815#comment-1255195">
			July 6, 2016 at 8:01 am</a>		</div>

		<p>I notice that you stopped announcing dice rolls on your table of COM smart pointers, but, evidently, the roll is still there.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-2" id="comment-1255196">
				<div id="div-comment-1255196" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160706-00/?p=93815#comment-1255196">
			July 6, 2016 at 8:13 am</a>		</div>

		<p>No? He has used Microsoft::WRL::ComPtr in all WinRT examples IIRC.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1255256">
				<div id="div-comment-1255256" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160706-00/?p=93815#comment-1255256">
			July 6, 2016 at 11:17 am</a>		</div>

		<p>I know of only one COM smart pointer library which supports HSTRING, so there&#8217;s not much point rolling a one-sided die.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1255315">
				<div id="div-comment-1255315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EMB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160706-00/?p=93815#comment-1255315">
			July 6, 2016 at 1:08 pm</a>		</div>

		<p>That&#8217;s the problem with the true random genera&#8230;. oohhhh&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1255266">
				<div id="div-comment-1255266" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nico</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160706-00/?p=93815#comment-1255266">
			July 6, 2016 at 12:08 pm</a>		</div>

		<p>And here I thought it would be:</p>
<p>bool IsWindows10InTabletMode() {<br />
  return true;<br />
}</p>
<p>I&#8217;m kind of surprised there&#8217;s not a window message broadcast when the system changes between tablet and non-tablet modes (or maybe there is?)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1255276">
				<div id="div-comment-1255276" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nico</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160706-00/?p=93815#comment-1255276">
			July 6, 2016 at 12:10 pm</a>		</div>

		<p>Aw, my &#8220;snark&#8221; tags got eaten.  This comment was very tongue-in-cheek.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1255295">
				<div id="div-comment-1255295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://programmerman.net/' rel='external nofollow' class='url'>Nick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160706-00/?p=93815#comment-1255295">
			July 6, 2016 at 12:38 pm</a>		</div>

		<p>Shouldn&#8217;t that be boolean to be compatible with the WRL ABI?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1255335">
				<div id="div-comment-1255335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tihiy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160706-00/?p=93815#comment-1255335">
			July 6, 2016 at 3:18 pm</a>		</div>

		<p>Nobody will use such stinky API when you can just read registry and listen for broadcast.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-raykoopa even depth-2" id="comment-1255347">
				<div id="div-comment-1255347" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Ray+Koopa' rel='external nofollow' class='url'>Ray Koopa</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160706-00/?p=93815#comment-1255347">
			July 7, 2016 at 12:35 am</a>		</div>

		<p>Reading registry? You mean like the sad story of the shell folders key?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt depth-2 parent" id="comment-1255355">
				<div id="div-comment-1255355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160706-00/?p=93815#comment-1255355">
			July 7, 2016 at 3:38 am</a>		</div>

		<p>How does a simple registry query work on something that is tied to a HWND? It might have a per-monitor &#8220;resolution&#8221; now but nothing is stopping MS from adding options to always force a specific mode for a particular window in the future&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-davebacher even depth-3" id="comment-1256525">
				<div id="div-comment-1256525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160706-00/?p=93815#comment-1256525">
			July 18, 2016 at 4:11 pm</a>		</div>

		<p>On the Lumia 950 / 950XL, you can have apps displaying on the phone and on an attached wireless monitor with keyboard/mouse simultaneously.  Presumably, the API would do the right thing for that case, I mean why else would you design it that way?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-the-wench odd alt thread-odd thread-alt depth-1 parent" id="comment-1255365">
				<div id="div-comment-1255365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Monochrome+Wench' rel='external nofollow' class='url'>Monochrome Wench</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160706-00/?p=93815#comment-1255365">
			July 7, 2016 at 3:39 am</a>		</div>

		<p>Everytime I&#8217;ve used extended desktop multimonitor on my Surface Pro 2, tablet mode is disabled. Guessing this api is forward looking?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1255385">
				<div id="div-comment-1255385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Oliver</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160706-00/?p=93815#comment-1255385">
			July 7, 2016 at 8:35 am</a>		</div>

		<p>Yep, that&#8217;s what I thought too. Or maybe it was a feature they dropped, but got left in the docs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1255425">
				<div id="div-comment-1255425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160706-00/?p=93815#comment-1255425">
			July 7, 2016 at 10:28 am</a>		</div>

		<p>Yup. Forward-looking.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

