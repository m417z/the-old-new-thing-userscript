<html>
<head>
<title>The scope of the C# checked/unchecked keyword is static, not dynamic</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The scope of the C# checked/unchecked keyword is static, not dynamic</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 15, 2014 / year-entry #197</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">C# has operators checked and unchecked to control the behavior of the language in the face of integer overflow. There are also checked and unchecked statements which apply the behavior to blocks of statements rather than single expressions. int x; x = checked(a + b); // evaluate with overflow checking y = unchecked(a + b);...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
C# has operators <code>checked</code> and <code>unchecked</code>
to control the behavior of the language in the face of integer overflow.
There are also <code>checked</code> and <code>unchecked</code> statements
which apply the behavior to blocks of statements rather than single
expressions.
</p>
<pre>
int x;

x = checked(a + b); // evaluate with overflow checking
y = unchecked(a + b); // evaluate without overflow checking

checked {
 x = a + b; // evaluate with overflow checking
}

unchecked {
 x = a + b; // evaluate without overflow checking
}
</pre>
<p>
Why, then, doesn't this code below raise an overflow exception?
</p>
<pre>
class Program {
 static int Multiply(int a, int b) { return a * b; }
 static int Overflow() { return Multiply(int.MaxValue, 2); }

 public static void Main() {
  System.Console.WriteLine(checked(Overflow()));
  checked {
    System.Console.WriteLine(Overflow());
  }
 }
}
</pre>
<p>
(Mini-exercise: Why couldn't I have just written
<code>static int Overflow() { return int.MaxValue * 2; }</code>?)
</p>
<p>
The answer is that the scope of the <code>checked</code> or
<code>unchecked</code> keyword is static, not dynamic.
Whether a particular arithmetic is checked or unchecked is
determined at compile time, not at run time.
Since the multiplication in the <code>Multiply</code> function
is not explicitly marked checked or unchecked,
uses the overflow context implied by your compiler options.
Assuming you've left it at the default of
<code>unchecked</code>,
this means that
there is no overflow checking in the <code>Multiply</code> function,
even if you call it from a checked context.
Because once you call the <code>Multiply</code> function,
you have left the checked context.
</p>
<p>
The C# language specification addresses this issue not once,
not twice, but three times!
(But it seems that some people miss it,
possibly because there is
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/04/10/10409822.aspx">
too much documentation</a>.)
</p>
<p>
First, there is an
<a HREF="http://msdn.microsoft.com/en-us/library/aa691349(v=VS.71).aspx">
explicit list</a> of
operations which
are controlled by the <code>checked</code> or <code>unchecked</code>
keyword:
</p>
<blockquote CLASS=q>
<ul>
<li>The predefined <code>++</code> and <code>--</code> unary operators,
    when the operand is of an integral type.</p>
<li>The predefined <code>-</code> unary operator,
    when the operand is of an integral type.</p>
<li>The predefined <code>+</code>, <code>-</code>,
    <code>*</code>, and <code>/</code> binary operators,
    when both operands are of integral types.</p>
<li>Explicit numeric conversions from one integral type to another
    integral type, or from <code>float</code> or <code>double</code>
    to an integral type.
</ul>
</blockquote>
<p>
That's all.
Note that function calls are not on the list.
</p>
<p>
Now, that may have been a bit too subtle (documentation by omission),
so the language specific goes ahead and calls it out.
</p>
<blockquote CLASS=q>
<p>
The <code>checked</code> and <code>unchecked</code> operators
only affect the overflow checking context for those operations
that are textually contained within the "<code>(</code>"
and "<code>)</code>" tokens.
The operators have no effect on function members
that are invoked as a result of evaluating the contained expression.
</p>
</blockquote>
<p>
And then, in case you still didn't get it, the language specification
even includes an example:
</p>
<blockquote CLASS=q>
<pre>
class Test
{
   static int Multiply(int x, int y) {
      return x * y;
   }
   static int F() {
      return checked(Multiply(1000000, 1000000));
   }
}
</pre>
<p>
The use of <code>checked</code> in <code>F</code> does not
affect the evaluation of <code>x * y</code> in
<code>Multiply</code>,
so <code>x * y</code> is evaluated in the default overflow
checking context.
</p>
</blockquote>
<p>
(I wrote my example before consulting the language specification.
That we both chose to use multiplication overflow is just a coincidence.)
</p>
<p>
Even though the language specification
<a HREF="http://www.theotherpages.org/poems/carrol03.html">
says it three times</a>,
in three different ways,
there are still people who are under the mistaken impression that
the scope of the <code>checked</code> keyword is dynamic.
</p>
<p>
Another thing you may have notice is that the <code>checked</code>
and <code>unchecked</code> keywords apply only to the built-in
arithmetic operations on integers.
They do not apply to overloaded operators or to operators on custom
classes.
</p>
<p>
Which makes sense if you think about it,
because in order to define an overloaded operator or an operator
on a custom class,
you need to write the implementation as a separate function,
in which case you have already left the scope of the
<code>checked</code> and <code>unchecked</code> keywords.
</p>
<p>
And now we are leaving the scope of CLR Week.
You can remove your hands from your ears now.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1144643">
				<div id="div-comment-1144643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144643">
			August 15, 2014 at 7:08 am</a>		</div>

		<p>Mini-Exercise &#8211; that would be a constant expression evaluated at compile time, not runtime.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144653">
				<div id="div-comment-1144653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">OldFart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144653">
			August 15, 2014 at 7:44 am</a>		</div>

		<p>I wish one week a month could be CLR Week.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1144663">
				<div id="div-comment-1144663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144663">
			August 15, 2014 at 7:57 am</a>		</div>

		<p>I would like to leave the unmanaged scope.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144673">
				<div id="div-comment-1144673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144673">
			August 15, 2014 at 8:04 am</a>		</div>

		<p>If you think about this from the JIT compiler&#39;s point of view, it&#39;s pretty obvious. &nbsp;If an arithmetic expression is unchecked, compile it directly to an add/mul/whatever opcode. &nbsp;If the expression is checked, compile it to an add/mul and put in a &quot;jo ThrowOverthrowException&quot; instruction afterwards (jump-if-overflow-flag-is-set, or whatever your ISA&#39;s equivalent of that is for non-x86).</p>
<p>x86 doesn&#39;t have any kind of global processor state that says &quot;raise an interrupt if an arithmetic overflow occurs while this flag is set,&quot; which could be used if checked/unchecked were dynamic in scope. &nbsp;And implementing that functionality in software would be prohibitively expensiveâ€”every arithmetic operation would have to check that checked/unchecked state. &nbsp;So now your simple add instruction is now an add, a load (probably from TLS or a dedicated register which can no longer be used by the application), a cmp, and a jCC.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1144683">
				<div id="div-comment-1144683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144683">
			August 15, 2014 at 8:04 am</a>		</div>

		<p>@ OldFart,</p>
<p>I will second that motion.</p>
<p>Question for Raymond: I understand you aren&#39;t the biggest fan of the managed code environment. &nbsp;Can you shed some light on your thoughts in that regard?</p>
<div class="post">[<em>You understand incorrectly. I don&#39;t write about it because&nbsp;managed code is&nbsp;not my area of expertise, and because focusing on Win32 gives me a more exclusive niche; not because I don&#39;t like managed code. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144743">
				<div id="div-comment-1144743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144743">
			August 15, 2014 at 12:26 pm</a>		</div>

		<p>Does C# define int.MinValue / -1 as throwing an exception on all architectures? &nbsp;I don&#39;t know C# well enough to know the rules at this level. &nbsp;(I did write a PE loader in C# using P/Invoke without unsafe types, though, which was pretty crazy.)</p>
<p>Does C# promote everything smaller than &quot;int&quot; to &quot;int&quot;? &nbsp;And if so, does it behave like C/C++, where unsigned integers smaller than &quot;int&quot; promote first to &quot;signed int&quot; rather than &quot;unsigned int&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1144753">
				<div id="div-comment-1144753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144753">
			August 15, 2014 at 12:34 pm</a>		</div>

		<p>@ Raymond, thanks for the clarification!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144763">
				<div id="div-comment-1144763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JamesNT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144763">
			August 15, 2014 at 1:46 pm</a>		</div>

		<p>While I certainly do enjoy Mr. Chen&#39;s articles on unmanaged code, I do assert that I also thoroughly enjoy his articles on Windows&#39; history and I do enjoy CLR week. &nbsp;It would not bother me at all if Mr. Chen &quot;evened things out&quot; a bit more (e.g. there were suddenly three CLR weeks a year and more articles on history).</p>
<p>JamesNT</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1144813">
				<div id="div-comment-1144813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144813">
			August 15, 2014 at 9:58 pm</a>		</div>

		<p>@JamesNT: I almost never work with .NET, but don&#39;t mind Raymond&#39;s occasional forays into Manageland. &nbsp;I always learn interesting things in them! =^-^=</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144823">
				<div id="div-comment-1144823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144823">
			August 16, 2014 at 5:29 am</a>		</div>

		<p>How about a CLR Month?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1144833">
				<div id="div-comment-1144833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smeargle235</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144833">
			August 16, 2014 at 6:10 am</a>		</div>

		<p>@Myria</p>
<p>C# does not define any operators for any type smaller than int (32-bit signed integer). Therefore, any 16- or 8-bit integer, signed or unsigned, will be automatically promoted to int before any arithmetic is done.</p>
<p>uint (unsigned 32-bit int), long (signed 64-bit int), and ulong (unsigned 64-bit int) have their own operators defined, and will return the appropriate type. I can&#39;t tell you off the top of my head what type an operation between a uint and a signed int will return, but the spec makes sure to say that an operation between a signed and unsigned long will cause an error.</p>
<p>Source: ECMA-334 Â§14.7.4</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144843">
				<div id="div-comment-1144843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144843">
			August 16, 2014 at 8:49 am</a>		</div>

		<p>&gt;Which makes sense if you think about it, because in order to define an overloaded operator or an operator on a custom class, you need to write the implementation as a separate function, in which case you have already left the scope of the checked and unchecked keywords. </p>
<p>That does not make sense if you continue thinking.</p>
<p>Theoretically it could allow you to write two different methods for every overloaded operator, one used in the unchecked mode and the other in the checked mode</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1144853">
				<div id="div-comment-1144853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144853">
			August 16, 2014 at 5:04 pm</a>		</div>

		<p>@Smeargle235 c# actually has sane rules for dealing with types of different signedness.</p>
<p>uint + int = long &nbsp; while</p>
<p>ulong + long = compiler error</p>
<p>Knuth be thanked for that, c&#39;s rule for integer promotion are horribly arcane &#8211; the right thing is to force the user to be explicit if you can&#39;t guarantor that the result is intuitively correct.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144863">
				<div id="div-comment-1144863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">user</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144863">
			August 17, 2014 at 8:41 am</a>		</div>

		<p>Off topic</p>
<p>Raymond you always write about bad practices some people take when coding and most of them are funny, I want to thank you for that, but I also like to ask you to tell us about great works you witnessed people outside Microsoft have done.</p>
<p>Thanks.</p>
<div class="post">[<em>Few people contact Microsoft to say, &quot;Here&#39;s something awesome we did. Please review it in order to confirm its awesomeness.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1144873">
				<div id="div-comment-1144873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144873">
			August 18, 2014 at 2:39 am</a>		</div>

		<p>I&#39;d be really nervous if someone could change a global setting like &quot;checked integer operations&quot; before calling my code that was written assuming a different value of the setting</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1144883">
				<div id="div-comment-1144883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">The_Assimilator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144883">
			August 18, 2014 at 4:00 am</a>		</div>

		<p>Raymond, for someone who claims &quot;managed code is not my area of expertise&quot;, you sure do a good job of making the exact opposite appear true. Thanks for CLR Week 2014, and as other posters have noted, a more frequent version would be something greatly appreciated.</p>
<div class="post">[<em>You&#39;re seeing selection bias. I have an entire year to find five things to look smart about. If CLR Week were more frequent, the quality would be lower. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1144893">
				<div id="div-comment-1144893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1144893">
			August 18, 2014 at 6:38 am</a>		</div>

		<p>@Myria, Smeargle235: It becomes nonsensical when you try to add (or worse, apply a bitwise operator to) (u)short or byte numbers. &quot;ushort a=3, b=5, c; c = a &amp; b&quot; will cause a compilation error.</p>
<p>But &quot;ushort a=3, b=5, c; c = a; c &amp;= b&quot; will not: the assignment+operation operators automatically include a cast (meaning the operands will be promoted, the operation evaluated, and then truncated).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1145113">
				<div id="div-comment-1145113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1145113">
			August 18, 2014 at 1:38 pm</a>		</div>

		<p>@medinoc that has nothing to do with signedness &#8211; both java and c# widen input to at least int sizes, which I think mostly has to do with implementation simplicity (also saves byte codes do denser code). </p>
<p>Also tbh I have no idea what c does there, I seriously can&#39;t remember when I had smaller than int sized operands for bit ops. </p>
<p>I agree that the behavior for the compound operands is horrible though! </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1145153">
				<div id="div-comment-1145153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1145153">
			August 18, 2014 at 2:16 pm</a>		</div>

		<p>I don&#39;t really understand how static/dynamic scope applies to the checked statement &#8211; But when you read the documentation it does make sense &#8211; The overflow has already occured in multiply() and a function call is not listed as something checked works on anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1145173">
				<div id="div-comment-1145173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1145173">
			August 18, 2014 at 3:37 pm</a>		</div>

		<p>[Few people contact Microsoft to say, &quot;Here&#39;s something awesome we did. Please review it in order to confirm its awesomeness.&quot; -Raymond]</p>
<p>I could if you wanted. Although in this case it is peverse awesomeness.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1145303">
				<div id="div-comment-1145303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140815-00/?p=233#comment-1145303">
			August 19, 2014 at 7:43 am</a>		</div>

		<p>@voo: C has mostly the same behaviorâ€”for integer types smaller int, it widens the operands to int (or unsigned int in rare cases) as part of the *usual arithmetic conversions* (it also then converts both operands to a common type, in case they differ in signedness or if either operand is wider than int). &nbsp;From C99 Â§6.3.1.8/1:</p>
<p>&quot;First, [some cases about long double, double, and float]. &nbsp;Otherwise, the integer promotions are performed on both operands. Then the following rules are applied to the promoted operands: [&#8230;]&quot;</p>
<p>Â§6.3.1.1/2, on integer promotions:</p>
<p>&quot;If an int can represent all values of the original type, the value is converted to an int; otherwise, it is converted to an unsigned int. These are called the integer promotions.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

