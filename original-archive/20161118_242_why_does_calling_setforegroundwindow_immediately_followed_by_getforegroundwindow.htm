<html>
<head>
<title>Why does calling SetForegroundWindow immediately followed by GetForegroundWindow not return the same window back?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does calling SetForegroundWindow immediately followed by GetForegroundWindow not return the same window back?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 18, 2016 / year-entry #243</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161118-00/?p=94745</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Because it's not the foreground window... yet.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer said that their program used
<code>Find&shy;Window</code> to find a window in the system,
then called <code>Set&shy;Foreground&shy;Window</code>
to set that window to the foreground.
The call succeeds, but if
they enumerate the windows to check the z-order,
the window that they set as foreground is not at the top of the z-order.
And if they call <code>Get&shy;Foreground&shy;Window</code>,
they don't get that window back.
</p>
<p>
So what does it mean when <code>Set&shy;Foreground&shy;Window</code>
succeeds, but doesn't actually set the foreground window?
</p>
<p>
The <code>Set&shy;Foreground&shy;Window</code> function
actually does two things, one immediately and one asynchronously.
</p>
<p>
It immediately sets the input queue associated with the window
as being the foreground input queue.
Among other thing,
it means that keyboard input will be directed to that input queue.
It also means that threads belonging to that input queue now have
permission to call <code>Set&shy;Foreground&shy;Window</code>,
which is why many people affectionately call this
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090220-00/?p=19083">
having the foreground love</a>.
</p>
<p>
The function also notifies the window,
"Hey, you should make yourself the active window
for your queue."
This notification is processed synchronously
if the target window's thread
belongs to the same input queue as the thread that is calling
<code>Set&shy;Foreground&shy;Window</code>,
and it is processed asynchronously if the window belongs
to a different thread group.
This notification is done by roughly
the same internal nudging mechanism that
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20130606-00/?p=4153">
threads sharing an input queue use to coordinate access to input</a>.
In particular, it means that the thread responsible for the target
window needs to process messages in order to receive the nudge.
</p>
<p>
The fact that the "Go make yourself the active window for your
queue" portion is asynchronous (in the cross-thread-group case)
means that at the moment that
<code>Set&shy;Foreground&shy;Window</code>
returns,
the window is <i>becoming</i> the foreground window,
but it is not necessarily the foreground window <i>yet</i>.
If you check the z-order or call
<code>Get&shy;Foreground&shy;Window</code>,
you are likely to see that the target window hasn't activated yet.
</p>
<p>
Let's assume that the customer's program is doing this sort of
<code>Find&shy;Window</code> trickery as part of test automation.
And let's suppose that they want the automation to wait until
the target window has arrived to the foreground, so that it can
continue the next step in the automation.
</p>
<p>
A bad solution would be to use the
<code>Attach&shy;Thread&shy;Input</code> function
to connect the test automation tool's input queue to the
input queue of the target window.
This is a bad solution because it means that if the target
window has stopped responding,
then the test automation will also stop responding.
And it's bad for a test to stop responding.
The purpose of the test is to monitor the main application
reliably, not to
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20130607-00/?p=4143">
get into the same jail</a>.
(Or to use a different earlier analogy, to
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20130619-00/?p=4043">
create a joint bank account with an unreliable chap</a>.)
</p>
<p>
What the test could do is something like this:
</p>
<pre>
    SetForegroundWindow(hwndTarget);

    // Wait up to 5 seconds for the window to process the
    // foreground notification.
    DWORD_PTR result; // unused
    if (!SendMessageTimeout(hwndTarget, WM_NULL,
                            0, 0, 0, 5000, &amp;result)) {
        // Window was unresponsive for 5 seconds, or the
        // window was destroyed, or some other bad thing.
        ReportFailedTest();
    }

    if (GetForegroundWindow() != hwndTarget) {
        // The window did not become foreground for some reason.
        // Maybe there was some interference from elsewhere in the
        // system.
        ReportFailedTest();
    }
</pre>
<p>
Here we take advantage of the
<code>WM_<wbr>NULL</code> message.
This message does nothing, so sending it has no practical effect,
but the fact that we sent a message means that our code waits for
the window to finish processing the <i>previous</i> message,
which was
"Hey, you should make yourself the active window
for your queue."
And that's what we are <i>really</i> waiting for.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1274505">
				<div id="div-comment-1274505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161118-00/?p=94745#comment-1274505">
			November 20, 2016 at 10:15 pm</a>		</div>

		<p>For a second I was wondering why you wouldn&#8217;t just use hwndTarget for your window operations, and then you mentioned test automation.</p>
<p>Interesting article!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1274516">
				<div id="div-comment-1274516" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frerich Raabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161118-00/?p=94745#comment-1274516">
			November 21, 2016 at 2:35 am</a>		</div>

		<p>Interesting article!</p>
<p>Not being aware of the idea to use a `WM_NULL` message to verify that the target window processed any window messages which the `SetForegroundWindow` call may have sent, I resorted to polling `GetForegroundWindow()` in the past (e.g. every 50 ms).</p>
<p>Does this proposed solution remove the need to poll? I wonder whether it&#8217;s possible that some application handles the request to bring a window to the foreground in funny ways, by delaying the handling a bit &#8211; i.e. the fact that `WM_NULL` was processed does not mean that the window finished whatever work it may do to bring a window to the foreground. So you&#8217;d still end up having to poll? Or is this rather a pathological scenario?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-2" id="comment-1274535">
				<div id="div-comment-1274535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161118-00/?p=94745#comment-1274535">
			November 21, 2016 at 6:21 pm</a>		</div>

		<p>This should get rid of the need for a poll.<br />
The messages that go to the window should all be documented to be sent, and not posted. So there are some guarantees you can make from that. The messages that SetForegroundWindow send to the window procedure are in the message queue, so they will be processed in order. This means if you then send another message to that same message queue, then it will be processed after all the previous sent messages. This should mean that if the WM_NULL message is processed, then all previous sent messages by SetForegroundWindow would have been processed and thus the given window should now be the foreground window, assuming no errors occur.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip odd alt depth-2" id="comment-1274545">
				<div id="div-comment-1274545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161118-00/?p=94745#comment-1274545">
			November 21, 2016 at 6:28 pm</a>		</div>

		<p>Also, by delaying any system sent messages would mean the window itself is at fault.<br />
When you process a message, you must notify if the message has been handled. By delaying the processing but lying to Windows by returning 0 or true, and also not calling the DefWindowProc function, then you are generally breaking a contract. Plus there are generally no good places to do the required processing at a later time.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-r-baeriswyl even thread-even depth-1 parent" id="comment-1274525">
				<div id="div-comment-1274525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Roemeeeer' rel='external nofollow' class='url'>Roemeeeer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161118-00/?p=94745#comment-1274525">
			November 21, 2016 at 5:08 am</a>		</div>

		<p>Interesting post. I tried using that approach to wait for keyboard input (using SendInput) until it is processed. Unfortunately the SendMessageTimeout returns too early, before the input is processed.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1274526">
				<div id="div-comment-1274526" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161118-00/?p=94745#comment-1274526">
			November 21, 2016 at 10:42 am</a>		</div>

		<p>I discussed this <a href="https://blogs.msdn.microsoft.com/oldnewthing/20140213-00/?p=1773">earlier</a>. The trick works here because the nudge is sent in the style of a SendMessage, not as a queued message.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

