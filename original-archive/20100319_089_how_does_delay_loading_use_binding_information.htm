<html>
<head>
<title>How does delay-loading use binding information?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How does delay-loading use binding information?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 19, 2010 / year-entry #90</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100319-00/?p=14553</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In the documentation for delay-loading, there's a remark that says that the call to GetProcAddress can be avoided if there is binding information. A customer who received the explanation of why you can't delay-load kernel32 pointed out that paragraph and asked whether this means that you can delay-load kernel32 if you bind to it. (Getting...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>In the documentation for delay-loading, there's a remark that says that  <a href="http://msdn.microsoft.com/en-us/library/hdx9xk46.aspx"> the call to <code>GetProcAddress</code> can be avoided if there is binding information</a>. A customer who received the explanation of <a href="http://blogs.msdn.com/oldnewthing/archive/2010/02/01/9956102.aspx"> why you can't delay-load <code>kernel32</code></a> pointed out that paragraph and asked whether this means that you can delay-load <code>kernel32</code> if you bind to it. (Getting around to answering this question was the point of <a href="http://blogs.msdn.com/oldnewthing/archive/2010/03/17/9980011.aspx"> the past</a> <a href="http://blogs.msdn.com/oldnewthing/archive/2010/03/18/9980802.aspx"> few days</a>.)</p>
<p> Let's take another look at what that <code>GetProcAddress</code>-avoidance optimization does. Actually, it's just another look at what the module loader does when it's time to resolve imports to a bound DLL: At build time, the actual function pointers are precomputed and cached, along with the timestamp of the DLL those precomputed values came from. At run time, the delay-load stubs check the timestamp of the target DLL and compare it against the timestamp that it had cached. If they are the same, then they skip the call to <code>GetProcAddress</code> and use the cached value. </p>
<p> In other words, the delay-load stubs use binding information in exactly the same way the module loader does. </p>
<p> Does this mean that you can now delay-load <code>kernel32</code>? </p>
<p> No. First of all, if the timestamps don't match or if the target DLL was not loaded at its preferred address, then the binding information is of no use&mdash;you have a cache miss. In that case, the module loader (and the delay-load stubs) must obtain the function pointers the old-fashioned way. You can't assume that your binding information will always be accurate. (For example, after your module was bound to <code>kernel32</code>, there may have been a security update which modified <code>kernel32</code>, which invalidates your binding information.) </p>
<p> And besides, even if the binding information were used, you still have to call <code>LoadLibrary</code> to get the target DLL loaded in the first place. Even though binding may have optimized away one call to <code>kernel32</code>, you still have that <code>LoadLibrary</code> to deal with. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-820543">
				<div id="div-comment-820543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DAEngh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100319-00/?p=14553#comment-820543">
			March 19, 2010 at 8:28 am</a>		</div>

		<p>Raymond, thank you for this past series. &nbsp;I&#8217;ve almost always used tools that insulated me from really having to know things in this level of detail, and it&#8217;s interesting to hear imagined details explained.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820583">
				<div id="div-comment-820583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100319-00/?p=14553#comment-820583">
			March 19, 2010 at 9:47 am</a>		</div>

		<p>&#8220;or if the target DLL was not loaded at its preferred address, then the binding information is of no use&#8221;</p>
<p>Couldn&#8217;t the binding information still be used? The loader just has to shift the precomputed addresses by (actual_base &#8211; prefered_base), unless I&#8217;ve missed a detail.</p>
<p>Either way, the rest still stands, so the overall message is still correct; I&#8217;m just wondering about that detail.</p>
<div class=post>[<i>The main purpose of binding is to prevent the page from becoming dirty, and optimizing out the GetProcAddress will still dirty the page. It just creates another code path that needs to be debugged, and it doesn&#8217;t give you much of a benefit over hinting. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820613">
				<div id="div-comment-820613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100319-00/?p=14553#comment-820613">
			March 19, 2010 at 10:07 am</a>		</div>

		<p>&#8220;The main purpose of binding is to prevent the page from becoming dirty, and optimizing out the GetProcAddress will still dirty the page.&#8221;</p>
<p>Fair enough. I was thinking it could still be useful to avoid the GetProcAddress overhead. </p>
<p>(Adding an offset still being much quicker than a linear string-table search, but it&#8217;s not like it takes that long either way so I can definitely accept your argument against making the code more complex.)</p>
<div class=post>[<i>Since the hint is guaranteed to be correct, there is no linear search. All you&#8217;re saving is a single strcmp. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820623">
				<div id="div-comment-820623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100319-00/?p=14553#comment-820623">
			March 19, 2010 at 11:01 am</a>		</div>

		<p>&quot;Since the hint is guaranteed to be correct, there is no linear search&quot;</p>
<p>True and makes sense. I was wrongly reading/assuming that all the optimisations would be dropped, including the hinting info, but you hadn&#8217;t said that at all.</p>
<p>Apologies &amp; thanks for clearing up my confusion.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820633">
				<div id="div-comment-820633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100319-00/?p=14553#comment-820633">
			March 19, 2010 at 11:03 am</a>		</div>

		<p>What are the chances that the DLL in question remains the same?</p>
<p>Every windows update changes a bunch of DLL. Different users run different version of the OS. And on top of that, sometimes when the DLL is changed its entry points remains the same, but timestamp will be different.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-820693">
				<div id="div-comment-820693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100319-00/?p=14553#comment-820693">
			March 19, 2010 at 12:11 pm</a>		</div>

		<p>&quot;Then again, people would most likely still want to try to delay load kernel32 because they are too lazy to deal with multiple Windows versions properly, relying on delay loading to get around the initial symbol check.&quot;</p>
<p>In this case, why not just delay load just the kernel32 symbols in question?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820713">
				<div id="div-comment-820713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Philip</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100319-00/?p=14553#comment-820713">
			March 19, 2010 at 5:45 pm</a>		</div>

		<p>Crescens2k:</p>
<p>The real reason to delay-load kernel32 is to make the usage of functions like CreateFileTransactedW nicer by providing a failure stub in the case of the OS not having the function (XP, etc.)</p>
<p>What I&#8217;m describing is to <em>both</em> statically and delay load kernel32. You statically pick up the functions you want to use in delay loading (LoadLibrary, GetProcAddress, heap functions, no-fail function, etc) and you delay-load the functions you want to have OS-specific behavior for.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820653">
				<div id="div-comment-820653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Philip</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100319-00/?p=14553#comment-820653">
			March 19, 2010 at 11:33 am</a>		</div>

		<p>As noted before, you *can* delay-load kernel32 with some PE editing. You just need to link against it for GetProcessAddress, LoadLibrary, GetModuleHandle, and the interlocked functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820683">
				<div id="div-comment-820683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100319-00/?p=14553#comment-820683">
			March 19, 2010 at 12:07 pm</a>		</div>

		<p>Philip:</p>
<p>Even though you *can* delay-load kernel32 with some PE editing, as what should also be noted along with it, it is a very daft thing to do.</p>
<p>Not only do you end up in the catch 22 situation where you can&#8217;t load kernel32 because you need LoadLibrary from kernel32 but there are other functions in there which are very important. For example, VirtualAlloc and other virtual memory functions are in there, as well as the Heap functions. So you would also lose memory management too.</p>
<p>Then again, people would most likely still want to try to delay load kernel32 because they are too lazy to deal with multiple Windows versions properly, relying on delay loading to get around the initial symbol check.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820723">
				<div id="div-comment-820723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100319-00/?p=14553#comment-820723">
			March 19, 2010 at 10:45 pm</a>		</div>

		<p>If you want to do tricks like that, GetProcAddress() on kernel32.dll is the supported way. And with ASLR, the only way.</p>
<p>Or are people too lazy to do it this way?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

