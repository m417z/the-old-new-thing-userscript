<html>
<head>
<title>I got an array with plenty of nuthin'</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>I got an array with plenty of nuthin&#8217;</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 18, 2009 / year-entry #403</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>24</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer reported a memory leak in the function PropVariantClear: We found the following memory leak in the function PropVariantClear. Please fix it immediately because it causes our program to run out of memory. If the PROPVARIANT's type is VT_ARRAY, then the corresponding SAFEARRAY is leaked and not cleaned up. SAFEARRAY* psa = SafeArrayCreateVector(VT_UNKNOWN, 0,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer reported a memory leak in the function
<code>PropVariantClear</code>:
</p>
<blockquote CLASS=q>
<p>
We found the following memory leak in the function
<code>PropVariantClear</code>.
Please fix it immediately because it causes our program to
run out of memory.
</p>
<p>
If the <code>PROPVARIANT</code>'s type is <code>VT_ARRAY</code>,
then the corresponding <code>SAFEARRAY</code> is leaked and not
cleaned up.
</p>
<pre>
SAFEARRAY* psa = SafeArrayCreateVector(VT_UNKNOWN, 0, 1);
PROPVARIANT v;
v.vt = VT_ARRAY;
v.parray = psa;
PropVariantClear(&v);

// The psa is leaked
</pre>
<p>
Right now, we are temporarily working around this in our program
by inserting code before all calls to
<code>PropVariantClear</code> to free the <code>SAFEARRAY</code>,
but this is clearly an unsatisfactory solution
because it will merely result in double-free bugs once you fix
the bug.
Please give this defect your highest priority as it is holding up
deployment of our system.
</p>
</blockquote>
<p>
The <code>VT_ARRAY</code> value is not a variant type in and of itself;
it is a type <i>modifier</i>.
There are other type modifiers, such as
<code>VT_VECTOR</code>
and <code>VT_BYREF</code>.
The thing about modifiers is that they need to <i>modify something</i>.
</p>
<blockquote CLASS=m><p>
The line
<code>v.vt = VT_ARRAY</code> is incorrect.
You have to say what you have a safe array <i>of</i>.
In this case, you want <code>v.vt = VT_ARRAY | VT_UNKNOWN</code>.
Once you change that, you'll find the memory leak is fixed.
</p>
</blockquote>
<p>
The customer didn't believe this explanation.
</p>
<blockquote CLASS=q>
<p>
I find this doubtful for several reasons.
</p>
<ol>
<li>While this would explain why the
    <code>IUnknown</code>s in the <code>SAFEARRAY</code>
    are not released,
    it doesn't explain why the <code>SAFEARRAY</code> itself is leaked.</p>
<li>The <code>SAFEARRAY</code> already contains this information,
    so it should already know that destroying it entails releasing
    the <code>IUnknown</code> pointers.</p>
<li>If I manually call <code>SafeArrayDestroy</code>,
    then the <code>IUnknown</code>s are correctly
    released, confirming point&nbsp;2.</p>
<li>The function <code>SafeArrayDestroy</code> is never called;
    that is the root cause of the problem.
</ol>
</blockquote>
<p>
The customer's mental model of <code>PropVariantDestroy</code>
appeared to be that it should go something like this:
</p>
<pre>
if (pvt-&gt;vt &amp; VT_ARRAY) {
 switch (pvt-&gt;vt &amp; VT_TYPEMASK) {
 ...
 case VT_UNKNOWN:
  ... release the IUnknowns in the SAFEARRAY...
  break;
 ...
 }
 InternalFree(pvt-&gt;psa-&gt;pvData);
 InternalFree(pvt-&gt;psa);
 return S_OK;
}
</pre>
<p>
In fact what's really going on is that the value of
<code>VT_ARRAY</code> is interpreted as
<code>VT_ARRAY | VT_EMPTY</code>,
because (1)&nbsp;<code>VT_ARRAY</code> is a modifier,
so it has to modify something, and (2)&nbsp;the
numeric value of zero happens to be equal to <code>VT_EMPTY</code>.
In other words, you told OLE automation that your <code>PROPVARIANT</code>
holds a <code>SAFEARRAY</code> filled with <code>VT_EMPTY</code>.
</p>
<p>
It also happens that a <code>SAFEARRAY</code> of <code>VT_EMPTY</code>
is illegal.
Only certain types can be placed in a <code>SAFEARRAY</code>,
and <code>VT_EMPTY</code> is not one of them.
</p>
<p>
The call to <code>PropVariantClear</code> was returning the
error
<code>DISP_E_BADVARTYPE</code>.
It was performing parameter validation and rejecting the property
variant as invalid,
because you can't have an array of nothing.
The customer's response to this explanation was very terse.
</p>
<blockquote CLASS=q><p>
Tx. Interesting.
</p>
</blockquote>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-796533">
				<div id="div-comment-796533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796533">
			December 18, 2009 at 7:29 am</a>		</div>

		<p>They need to level up their psychic debugging skills. Oh yeah, and check yer return values you knuckleheads..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-796573">
				<div id="div-comment-796573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796573">
			December 18, 2009 at 7:59 am</a>		</div>

		<p>nathan: normally, I&#8217;d agree with you, but almost all clean up functions, and certainly all memory deallocation functions I&#8217;ve used return no error value. So I&#8217;m not surprised at all they didn&#8217;t check the return value that they probably didn&#8217;t anticipate.</p>
<p>It does show that good naming is once again central to good and clear APIs. If a bit field contains two types of values, then their naming should reflect that. In this case, it would be clearer if the modifiers were called VT_MODIFIER_ARRAY, VT_MODIFIER_BYREF, etc.</p>
<p>Hindsight still at 100%.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-796603">
				<div id="div-comment-796603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796603">
			December 18, 2009 at 8:42 am</a>		</div>

		<p>Humility is a virtue many programmers lack. &nbsp;If you want to be right most of the time, then always suspect your own code first. &nbsp;Even once you&#8217;re 100% convinced your stuff is right, proceed delicately.</p>
<p>[I&#8217;m not claiming sainthood in this regard, but I try.]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-796613">
				<div id="div-comment-796613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796613">
			December 18, 2009 at 8:44 am</a>		</div>

		<p>One more reason to crash and burn on invalid arguments.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-796633">
				<div id="div-comment-796633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796633">
			December 18, 2009 at 9:20 am</a>		</div>

		<p>@Pierre CloseHandle() can fail. &nbsp;As can fclose() in stdio. &nbsp;I would say it&#8217;s still good to check return codes of functions that release resources.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-796643">
				<div id="div-comment-796643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796643">
			December 18, 2009 at 9:23 am</a>		</div>

		<p>At least the customer&#8217;s response wasn&#8217;t &quot;tl;dr&quot;!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-796673">
				<div id="div-comment-796673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael H.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796673">
			December 18, 2009 at 12:54 pm</a>		</div>

		<p>@Pierre</p>
<p>In testing yes, in distribution, maybe. Because what the hell do you do, other than log an error, when close fails?</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2008/01/07/7011066.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2008/01/07/7011066.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-796683">
				<div id="div-comment-796683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael H.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796683">
			December 18, 2009 at 12:55 pm</a>		</div>

		<p>My apologies, that was meant for the Anonymous commenter a few comments up, not Pierre.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-796693">
				<div id="div-comment-796693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">C Garth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796693">
			December 18, 2009 at 2:04 pm</a>		</div>

		<p>A friend of mine, every time he encounters a bug in his Javascript/HTML code, tells me excitedly that he found a bug in the web browser. (Occam&#8217;s razor tells me that it&#8217;s a bug in the impossible-to-read code he wrote at 3 in the morning, and that he doesn&#8217;t actually encounter a new browser bug every night)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-796703">
				<div id="div-comment-796703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.divelements.co.uk' rel='external nofollow' class='url'>Tim Dawson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796703">
			December 18, 2009 at 4:27 pm</a>		</div>

		<p>You can always spot a real winner when they can&#8217;t be bothered to type &quot;thank you&quot; in full.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-796623">
				<div id="div-comment-796623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dimmick.demon.co.uk/' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796623">
			December 18, 2009 at 8:59 am</a>		</div>

		<p>I&#8217;m kind of with your customer on this one. From the MSDN documentation of SAFEARRAY:</p>
<p>&#8220;The fFeatures flags describe array attributes that can affect how the array is released. This allows freeing the array without referencing its containing variant. The bits are accessed using the following constants.&#8221;</p>
<p>There&#8217;s no need for PropVariantDestroy to switch on the interior type of the SAFEARRAY &#8211; the array *already knows what it is*, at least as far as calling the right deallocation function goes, and can destroy itself happily just by calling SafeArrayDestroy. The call to SafeArrayCreateVector sets fFeatures appropriately (to FADF_UNKNOWN | FADF_HAVEIID).</p>
<p>On the other hand, it&#8217;s necessary to tell VARIANT what kind of SAFEARRAY it is, for regular use, because SAFEARRAY doesn&#8217;t record the type information for straightforward integral types, as opposed to pointers to other structures.</p>
<p>Still, PropVariantDestroy could probably do a better job.</p>
<div class=post>[<i>Said &#8220;better job&#8221; comes at the cost of consistency. &#8220;Sometimes you have to specify the inner type of the array and sometimes you don&#8217;t, and if the two disagree then some functions trust the variant type code and others trust the SAFEARRAY.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-796733">
				<div id="div-comment-796733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796733">
			December 18, 2009 at 9:37 pm</a>		</div>

		<p>Really? To me the &#8216;winner&#8217; detector should have triggered with &quot;Please fix it immediately&quot;.</p>
<p>That statement just oozed ego to me.</p>
<p>Is it just my perception, or are a significant portion of all Microsoft employee blog postings customers having issues with allocation or deallocation of COM data?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-796753">
				<div id="div-comment-796753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796753">
			December 18, 2009 at 10:59 pm</a>		</div>

		<p>There are two problems here. First the whole VARIANT and SAFEARRAY APIs are a giant mess that very few people understand. The second is that some people still (it was 2009 last time I checked) don&#8217;t know that they need to check error codes. Yes this is a &#8216;destructor&#8217; so no errors can safely propagate out of the check but still one ought to check and log/alert/assert if it fails.</p>
<p>With regards to VARIANT/SAFEARRAY APIs, yes they are old, which is a fine excuse for why they are the way they are. What is not excusable is that MS still haven&#8217;t bothered to create a good wrapper for it. Various half baked CYadaYadaVariant classes in ATL and elsewhere are pathetic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-796763">
				<div id="div-comment-796763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796763">
			December 18, 2009 at 11:30 pm</a>		</div>

		<p>The customer&#8217;s attitude is just plain standard for an engineer. &nbsp;</p>
<p>The real fault that I see here is that a developer should not think that there is a leak in PropVariantClear after 15 years and he would be the first one to run into it. &nbsp;It&#8217;s just not rational.</p>
<p>Since they are not reported by the standard C Run Time debug output, there is tons of COM leaks out there.. &nbsp;people are doing terrible things with Variants and BSR. &nbsp;This client probably only saw the leak because it leaked a COM object in his code. &nbsp;Perhaps he had to update a lot of code after this discovery. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-796783">
				<div id="div-comment-796783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://chuckop.spaces.live.com' rel='external nofollow' class='url'>Charles Oppermann</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796783">
			December 19, 2009 at 10:00 am</a>		</div>

		<p>It&#8217;s interesting because the root cause of these issues is really API documentation. &nbsp;The area of &quot;user assistance&quot; in regards to API&#8217;s is fascinating. &nbsp;The .NET Framework did some usability studies with regard to how the class library was presented and made a number of changes based on the feedback.</p>
<p>COM on the other is old enough that the original developers coded to their own perceptions and assumed others would think similarly.</p>
<p>Although it&#8217;s a slow process, Microsoft does do a good job of updating documentation to address common implementer mistakes.</p>
<p>Like other commenters, I rarely think the problem is in Microsoft&#8217;s code &#8211; particularly memory leaks &#8211; as I know that&#8217;s something given a lot of attention to. &nbsp;Given the age of COM and OLE Automation, I&#8217;m sure any memory leak has long since been discovered and fixed.</p>
<p>Shouldn&#8217;t the complier and/or some Lint/Code-correctness tool be warning the implementer whenever a function returns a value that is not evaluated?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-796803">
				<div id="div-comment-796803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">will</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796803">
			December 19, 2009 at 11:34 am</a>		</div>

		<p>I kind of wonder how many messages of this type companies get. &nbsp;</p>
<p>I would of been easy for the guy to try the fix solution and see if that works vs replying back with that message.</p>
<p>This would of been a reasonable conversation if it was taking place with the people talking(by phone or in person) but when using email try the solution before you reply.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-796813">
				<div id="div-comment-796813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796813">
			December 19, 2009 at 6:40 pm</a>		</div>

		<p>@Charles Oppermann: “Shouldn&#8217;t the complier and/or some Lint/Code-correctness tool be warning the implementer whenever a function returns a value that is not evaluated?”</p>
<p>There&#8217;s a lot of functions where evaluating the return value is is rather the exception than the norm. Like printf, MessageBox (with only one button) or SendMessage (for certain messages). You&#8217;d be swamped in false positives.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-796863">
				<div id="div-comment-796863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796863">
			December 20, 2009 at 6:08 am</a>		</div>

		<p>MS never did bother to fix the leak that was present in TransparentBlt in Windows 95/98. &nbsp;So it is possible for 15-year old MS code to leak resources. &nbsp;Though the odds of being the first one to happen upon the leak aren&#8217;t so good.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-796853">
				<div id="div-comment-796853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://K.Hagan@thermoteknix.com' rel='external nofollow' class='url'>Ken Hagan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796853">
			December 20, 2009 at 4:58 am</a>		</div>

		<p>&quot;@Pierre CloseHandle() can fail. &nbsp;As can fclose() in stdio. &nbsp;I would say it&#8217;s still good to check return codes of functions that release resources.&quot;</p>
<p>As can GDI&#8217;s DeleteObject() and COM&#8217;s Release(). In fact, if your API&#8217;s clean-up functions *don&#8217;t* return an error (or throw, or crash), how are they supposed to indicate that you&#8217;ve given them a corrupted object or an already-cleaned-up one?</p>
<p>It is true that if you feed them a well-formed object, nearly all clean-up functions *won&#8217;t* fail, but that&#8217;s all the more reason to assert that they didn&#8217;t, and there are some that have implicit &quot;finish what you are doing first and then die&quot; semantics (like fclose) and these really can fail with just about any error.</p>
<p>I must confess I probably fall short of my own high standards here, but I&#8217;m certain that I&#8217;d have checked the return value before demanding that MS fix the bug that has been lurking in their API for 15 years and I&#8217;m the first person to notice. The original correspondent is nothing like as smart as they think they are.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-796913">
				<div id="div-comment-796913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796913">
			December 20, 2009 at 2:25 pm</a>		</div>

		<p>I&#8217;ll never understand how these queries get all the way to Raymond before somebody thinks to ask &#8220;did you check the return value?&#8221;</p>
<div class=post>[<i>Checking the return value would have changed the question, but the question would still be there. &#8220;Why is PropVariantClear reporting an invalid type for my array?&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-796933">
				<div id="div-comment-796933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Kay</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-796933">
			December 21, 2009 at 5:19 am</a>		</div>

		<p>There really isn&#8217;t any excuse not to check return &nbsp;values, especially once memory errors are encountered.</p>
<p>Having said that, this post has reminded me of the horrors of exchange gateway programming, and having to recode parts of a gateway after finding out that one particular (Microsoft) function appeared to corrupt parts of memory one time in six.</p>
<p>It&#8217;s possible that this was my fault but a) the documentation is awful b) there were (are?) no debug symbols &#8211; assembly level debugging isn&#8217;t fun c) it uses craploads of hard to use structures and d) it teaches the programmer the hard way that reading the function descriptions in sample code is not sufficient, as the actual code has unexpected side effects. Plus add a bonus e) no validation functions, and no errors returned up until and including the point of corruption.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-797113">
				<div id="div-comment-797113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-797113">
			December 21, 2009 at 3:05 pm</a>		</div>

		<p>Ken: Be careful what you wish for! If you insist that programmers assert that all resource release functions don&#8217;t return errors, you&#8217;re going to get code littered with &quot;ASSERT(resource.Release() != ERROR)&quot;. Then you&#8217;ll just have different random memory leaks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-797173">
				<div id="div-comment-797173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-797173">
			December 21, 2009 at 6:15 pm</a>		</div>

		<p>&quot;b) there were (are?) no debug symbols &#8211; assembly level debugging isn&#8217;t fun“</p>
<p>Exchange was one of the MS products where at least some symbols were public, I think.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-797243">
				<div id="div-comment-797243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Kay</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091218-00/?p=15623#comment-797243">
			December 22, 2009 at 6:32 am</a>		</div>

		<p>There may be some Exchange debug symbols, but usually the problem is in MAPI &#8211; and that doesn&#8217;t have debug symbols.</p>
<p>I can&#8217;t speak for Exchange 2007/2010 development, though, because the work I did was for 2000/2003. There were plenty of oddities, though &#8211; unexpected outcomes and instances where the reality didn&#8217;t manage the documentation (such as strongly implying messages *always* had an RTF component, yet then messages without one came through).</p>
<p>I don&#8217;t rule out some of the errors being mine, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

