<html>
<head>
<title>What is the highest numerical resource ID permitted by Win32?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What is the highest numerical resource ID permitted by Win32?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 17, 2011 / year-entry #39</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer asked the following question: What is the maximum legal value of a resource identifier? Functions like Load­String take a UINT as the resource ID, which suggests a full 32-bit range, but in practice, most resource IDs appear to be in the 16-bit range. Is there any particular history/precedent for avoiding large numbers as...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer asked the following question:
</p>
<blockquote CLASS=q><p>
What is the maximum legal value of a resource identifier?
Functions like <code>Load&shy;String</code> take a <code>UINT</code>
as the resource ID, which suggests a full 32-bit range,
but in practice, most resource IDs appear to be in the 16-bit range.
Is there any particular history/precedent for avoiding large numbers
as resource IDs?
(I have a program that autogenerates string IDs,
and having a full 32-bit range gives me some more flexibility in
assigning the IDs, but I want to make
sure I don't run afoul of any limitations either.)
</p>
</blockquote>
<p>
Let's answer the literal question first, and then look at the
misconceptions behind the question.
</p>
<p>
The maximum legal value for an integer resource identifier is 65535.
You don't need any special psychic powers for this; it's right
there in the <code>MAKE&shy;INT&shy;RESOURCE</code> macro:
</p>
<pre>
#define MAKEINTRESOURCEA(i) ((LPSTR)((ULONG_PTR)((WORD)(i))))
#define MAKEINTRESOURCEW(i) ((LPWSTR)((ULONG_PTR)((WORD)(i))))
#ifdef UNICODE
#define MAKEINTRESOURCE  MAKEINTRESOURCEW
#else
#define MAKEINTRESOURCE  MAKEINTRESOURCEA
#endif // !UNICODE
</pre>
<p>
The <code>MAKE&shy;INT&shy;RESOURCE</code> macro takes the integer you passed,
casts it down to a 16-bit <code>WORD</code>,
and then casts the result up to a <code>LPTSTR</code>,
effectively generating a pointer whose top bits are all zero
(a pointer into the first 64KB of the address space).
</p>
<p>
Right off the bat, you can see that integer resources are limited
to 16-bit values, because if you pass anything bigger,
it'll get truncated by the cast to <code>WORD</code>.
</p>
<p>
Why does this limitation exist?
Because most resource loading functions overload a single
<code>lpName</code> parameter (representing the resource identifier or name)
as both an integer (identifier) and a string (name).
You can't have the full range of integers and the full range of
pointers simultaneously if you want to be able to distinguish the two cases,
so you have to choose some rule by which you can tell them apart,
and the rule chosen by Win32 is that
if the value is in the range <code>0..0xFFFF</code>,
then the value is treated as an integer;
otherwise it is treated as a pointer to a string.
</p>
<p>
This convention comes from the days of 16-bit Windows, where
32-bit pointers consisted of a 16-bit selector in the high order word
and a 16-bit offset in the low order word.
The selector <code>0x0000</code> is permanently invalid,
so that's a natural place to "sneak in" the integers:
A "pointer" whose selector is <code>0x0000</code> is really an integer
smuggled inside a pointers.
There was no loss of expressiveness because integers in 16-bit Windows
were, well, only 16-bits wide, so the two parameter spaces
(strings and integer)
neatly meshed with no overlap.
(This partitioning of the address space also happily lines up with
the convention that in Win32, the first 64KB of address space is
permanently invalid.)
</p>
<p>
Okay, so that answers the literal question, but there's more going on.
Fortunately, the customer provided context:
The integer range he's interested in is string identifiers,
not resource identifiers.
</p>
<p>
String identifiers are not resource identifiers.
As we saw earlier,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/01/30/65013.aspx">
strings are gathered in bundles of 16</a>.
The bottom 4 bits of the string identifier specify which string in the
bundle contains the string in question, while the remaining bits
form the resource identifier of the bundle.
We just learned that the resource identifier is a 16-bit value,
so string identifiers can go up to
65536&nbsp;&times&nbsp;16&nbsp;&minus;&nbsp;1.
</p>
<p>
The customer was pleased with this explanation,
contributing the additional insight that
"a corollary to string bundling is that it's more efficient
to use contiguous ranges of string identifiers (at least gathering
them in blocks of 16)
rather than sparsely generated ones."</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-895953">
				<div id="div-comment-895953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-895953">
			February 17, 2011 at 9:09 am</a>		</div>

		<p>Once upon a time, I worked on a very large application that exceeded either the 2^15 or 2^16 limit on string identifiers, and we started to have bugs. &nbsp;Calls to LoadString would simply return the wrong string.</p>
<p>Now, this was a long time ago (Windows 95 was brand new), so maybe it was just a bug in the resource compiler back then, but it was a very real problem for our team. &nbsp;For a while, we managed to split some of the strings out into another DLL, but for various reasons that proved inconvenient. &nbsp;I ended up writing a code-scanning tool that identified unused string resources, gaps in the assigned string IDs, and duplicate strings. &nbsp;We used the output of that to get back under the 2^15 limit.</p>
<p>Although Raymond&#39;s reasoning is correct, I&#39;d be wary of using string IDs over 2^15. &nbsp;Windows may be perfectly fine with it, but I wouldn&#39;t be surprised if a tool, library wrapper, or framework still mangles larger IDs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-895983">
				<div id="div-comment-895983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-895983">
			February 17, 2011 at 10:19 am</a>		</div>

		<p>&quot;&#8230; the convention that in Win32, the first 64KB of address space is permanently invalid&quot;</p>
<p>Useful to know, because it means you do not need to worry about integer overflows when writing</p>
<p>&nbsp; &nbsp;if (pString1 &#8211; 75 &lt;= pString2) &#8230;</p>
<p>to test if pString1 is before or at most 75 characters past pString2.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896023">
				<div id="div-comment-896023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-896023">
			February 17, 2011 at 12:21 pm</a>		</div>

		<p>@Mike: the first 64kB is invalid to catch NULL pointers, for the same reason segment 0 was never used on Win16 (I forget if 0001:0000 was valid or not).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-896033">
				<div id="div-comment-896033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ATZ Man</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-896033">
			February 17, 2011 at 12:40 pm</a>		</div>

		<p>@Joshua:</p>
<p>In real mode 0001:0000 would mean physical address 16 so it would not be valid.</p>
<p>In protected mode 0001:0000 is still the null selector. The selector&#39;s index in its particular table of selectors is 0001 divided by 8, i.e. zero, the null selector. The low 2 bits of the selector, the RPL, being 1 (i.e. 0001&amp;3==1) says you&#39;re trying to run at privilege level one, and the (selector &amp; 4) TI bit determines whether you&#39;re using the local descriptor table to resolve selectors, or the global one. The zero in this bit in your example would have meant the global table.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896043">
				<div id="div-comment-896043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ATZ Man</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-896043">
			February 17, 2011 at 12:43 pm</a>		</div>

		<p>Actually, forget what I said about real mode. In a real true 8088 dereferencing the &quot;long&quot; address 0001:0000 would work. It would access physical address 16. In Virtual 86 mode on a &#39;386 what would happen would depend on the particulars of virtual mode under the OS that you&#39;re running under. Most likely the OS would be supporting a virtual DOS and if an important system variable lived at the location the access to that location would be mediated by the OS&#39;s DOS emulator.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-895993">
				<div id="div-comment-895993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-895993">
			February 17, 2011 at 10:37 am</a>		</div>

		<p>I always thought that the first 64kB of the address space was invalid *because* of this resource ID partitioning. Making zero-value pointers an access violation really only requires the first page to be invalid, though of course VirtualAlloc only reserves in chunks of 64kB.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896073">
				<div id="div-comment-896073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CN</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-896073">
			February 18, 2011 at 1:13 am</a>		</div>

		<p>Address 16 would be part of the interrupt table, so, yeah, some extra handling would probably be in order on the part of the DOS emulator.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-896103">
				<div id="div-comment-896103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-896103">
			February 18, 2011 at 8:23 am</a>		</div>

		<p>This trick is also used in the Linux kernel syscall return value. Only that it overloads the top 4K (the first few negative numbers when treated as signed). The C library converts these to positive numbers and put them in errno.</p>
<p>The top 4K of memory is deep within kernel space (the top 1/4 or 1/2 of the address space is reserved for the kernel), so there is no risk of confusion.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896133">
				<div id="div-comment-896133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Boyd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-896133">
			February 18, 2011 at 1:10 pm</a>		</div>

		<p>The implementation of MAKEINTRESOURCE is an implementation detail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-896173">
				<div id="div-comment-896173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xml dude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-896173">
			February 19, 2011 at 3:56 pm</a>		</div>

		<p>Who&#39;s using ancient file resources anymore? Please store strings in xml files.</p>
<div class="post">[<i>I think you mistook this article for an advocacy post. I was explaining how Win32 resources work. If you prefer to keep your strings somewhere else, then you are more than welcome to. I wonder whether you also go into Honda repair forums telling people to go buy a Toyota. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896183">
				<div id="div-comment-896183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110217-00/?p=11463#comment-896183">
			February 19, 2011 at 3:57 pm</a>		</div>

		<p>&quot;The implementation of MAKEINTRESOURCE is an implementation detail.&quot;</p>
<p>No, it&#39;s not; it&#39;s documented. &quot;The return value is the specified value in the low-order word and zero in the high-order word.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

