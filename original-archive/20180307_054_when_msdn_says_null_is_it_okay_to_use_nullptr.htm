<html>
<head>
<title>When MSDN says NULL, is it okay to use nullptr?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When MSDN says <CODE>NULL</CODE>, is it okay to use <CODE>nullptr</CODE>?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 7, 2018 / year-entry #54</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">One of many equivalent formulations.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In various places, MSDN will talk about the behavior
corresponding to the case where a handle type has the value
<code>NULL</code>.
A customer wanted to know whether it was safe to use
<code>nullptr</code> in such cases,
or whether they have to use <code>NULL</code>.
</p>
<p>
Although the programming languages used by MSDN for documenting Windows
are putatively C and C++, MSDN understands that
a lot of people write
code for Windows in other languages,
and therefore it tries to avoid
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183">
relying on language subtleties</a>.
</p>
<p>
Esoteric definitions for the term <code>NULL</code>
is one of those language subtleties.
</p>
<p>
Formally, the C and C++ languages permit the following
definitions for the <code>NULL</code> macro:
</p>
<table BORDER="1" CLASS="cp3" CELLPADDING="3" STYLE="border-collapse: collapse">
<tr>
<th><code>NULL</code></th>
<th><code>0</code></th>
<th><code>(void*)0</code></th>
<th><code>nullptr</code></th>
</tr>
<tr>
<th>C</th>
<td>allowed</td>
<td>allowed</td>
<td>not allowed&sup1;</td>
</tr>
<tr>
<th>C++</th>
<td>allowed</td>
<td>not allowed&sup2;</td>
<td>allowed</td>
</tr>
</table>
<p>
If <code>NULL</code> is defined as <code>(void*)0</code> in C
or as <code>nullptr</code> in C++,
then it
can be assigned only to a pointer type.
And since MSDN cannot control how the C and C++ header files
define <code>NULL</code>,
it needs to work with any definition that is permitted by the
corresopnding standards.
Which means that saying <code>NULL</code> implies
that the underlying type is a pointer type.
</p>
<p>
Therefore, you are welcome to write <code>nullptr</code> instead
of <code>NULL</code> if you're writing C++ code.
You're also welcome to write anything else that produces a null
pointer, such as
</p>
<pre>
HMUMBLE h1 = HMUMBLE();
HMUMBLE h2 = HMUMBLE{};
HMUMBLE h3 = HMUMBLE(0);
HMUMBLE h4 = (HMUMBLE)0;
HMUMBLE h5 = 3 - 3;
</pre>
<p>
But most people would probably prefer you to write <code>NULL</code>
or <code>nullptr</code>.
</p>
<p>
As noted, MSDN understands that a significant portion of its
readership is not fluent in the subtleties of C and C++.
When it writes <code>NULL</code>, it means the obvious thing:
A null pointer.
You can translate that into the appropriate construction for
the language you are using.
For example, for C#, you can use <code>null</code>,
or if you are operating in raw <code>IntPtr</code>s,
you can use <code>IntPtr.Zero</code>.
</p>
<p>
<b>Bonus chatter</b>:
When MSDN says <code>NULL</code>,
is it okay to use <code>0</code>?
Yes, but you probably don't want to.
Using <code>0</code> as a null pointer constant is
permitted by the C and C++ languages for backward compatbility reasons,
but it's not considered modern style.
</p>
<p>
<b>Bonus bonus chatter</b>:
I'm told that the Visual C++ folks occasionally entertain the possibility
of changing the definition of <code>NULL</code> to <code>nullptr</code>,
which is permitted by the standard.
However, this ends up breaking a lot of code which assumed that
<code>NULL</code> is an integral constant evaluating to zero.
For example:
</p>
<pre>
void foo(char* p)
{
  char c = NULL; // would not work if NULL were defined as nullptr
  *p = NULL;     // would not work if NULL were defined as nullptr
  ...
}
</pre>
<p>
Although that code is technically already broken, it manages to work
if <code>NULL</code> is defined as <code>0</code>,
and updating the definition in the language header files would break
existing (albeit poorly-written) code.
</p>
<p>
&sup1;
C does not have the <code>nullptr</code> keyword.
</p>
<p>
&sup2;
C++ does not allow <code>NULL</code> to be defined as <code>(void*)0</code>
because C++ does not permit implicit conversion from
<code>void*</code> to arbitrary <code>T*</code>.
</p>
<pre>
int* p = (void*)0; // allowed in C but not C++
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1328285">
				<div id="div-comment-1328285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328285">
			March 7, 2018 at 7:30 am</a>		</div>

		<p>I remember trying that someday, only to find there&#8217;s code in MFC headers (or/and windowsx, I don&#8217;t remember) that passes NULL to functions/methods expecting WPARAM or LPARAM.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1328305">
				<div id="div-comment-1328305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">skeeto</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328305">
			March 7, 2018 at 8:11 am</a>		</div>

		<p>Technically &#8220;3 &#8211; 3&#8221; will not reliably produce a NULL pointer since the special rule for 0 only applies to the constant integer literal 0, not an expression that evaluates to zero.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1328345">
				<div id="div-comment-1328345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328345">
			March 7, 2018 at 9:35 am</a>		</div>

		<p>A null pointer constant is &#8220;an <a href="http://port70.net/~nsz/c/c11/n1570.html#6.6p6" rel="nofollow">integer constant expression</a> with the value 0&#8243; (<a href="http://port70.net/~nsz/c/c11/n1570.html#6.3.2.3p3 rel="nofollow">N1570 6.3.2.3p3</a>).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1328435">
				<div id="div-comment-1328435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">skeeto</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328435">
			March 7, 2018 at 4:24 pm</a>		</div>

		<p>There was <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#903 rel="nofollow">some confusion</a> (issue #903) about how exactly to interpret that statement, concluding: &#8220;There was a strong consensus among the CWG that only the literal 0 should be considered a null pointer constant, not any arbitrary zero-valued constant expression as is currently specified.&#8221; The C++14 specification is much more specific: &#8220;A null pointer constant is an integer literal with value zero&#8221; (N4296 4.10p1). Neither Clang nor GCC will compile that line with &#8220;3 &#8211; 3&#8221; as C++11 or later.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1328575">
				<div id="div-comment-1328575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://stackoverflow.com/users/1708801/shafik-yaghmour' rel='external nofollow' class='url'>Shafik Yaghmour</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328575">
			March 8, 2018 at 2:21 pm</a>		</div>

		<p>It looks like both gcc and clang implemented this change as a defect against C++11 <a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=52145#c8" rel="nofollow">https://gcc.gnu.org/bugzilla/show_bug.cgi?id=52145#c8</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1328445">
				<div id="div-comment-1328445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Seth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328445">
			March 7, 2018 at 6:47 pm</a>		</div>

		<p>Current versions of the C++ standard say a null pointer constant is &#8220;an integer literal with the value 0 [&#8230;]&#8221;, so expressions like &#8216;3 &#8211; 3&#8217; don&#8217;t qualify in C++.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1328335">
				<div id="div-comment-1328335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328335">
			March 7, 2018 at 9:11 am</a>		</div>

		<p>I remember when HANDLE was an integer type and HANDLE h = 1; compiled.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1328475">
				<div id="div-comment-1328475" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328475">
			March 8, 2018 at 1:07 am</a>		</div>

		<p>&#8220;I remember when HANDLE was an integer type and HANDLE h = 1; compiled.&#8221;</p>
<p>In Unix like OSs handles are traditionally integers. I wonder why Windows makes them a pointer? It seems like an index into a handle table and a pointer into that table are the same thing.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1328585">
				<div id="div-comment-1328585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Beldantazar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328585">
			March 8, 2018 at 6:23 pm</a>		</div>

		<p>Handles are usually not true pointers either, they&#8217;re an opaque vaue that has no meaning except for specific sentinel values.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1328615">
				<div id="div-comment-1328615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328615">
			March 9, 2018 at 7:06 am</a>		</div>

		<p>It permits the C compiler to yield warnings and the C++ compiler to yield errors on passing the wrong handle types to functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1328625">
				<div id="div-comment-1328625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328625">
			March 9, 2018 at 7:25 am</a>		</div>

		<p>So that the C compiler can issue warnings and the C++ compiler errors on passing the incorrect handle type to API calls.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher odd alt depth-3" id="comment-1329845">
				<div id="div-comment-1329845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1329845">
			March 16, 2018 at 10:44 am</a>		</div>

		<p>Usually the integer approach is because of an array or table based implementation.  I have a vector of some data structure, and I&#8217;m returning the index into that.<br />
In addition to what Joshua talks about with the compiler, using a pointer gives me the option of using some approach other than a table, array, or vector.  That can help separate security concerns, and it can sometimes help performance or simplify code.  I still have the option (since its an opaque value) of returning anything that floats my boat and fits into the variable, but if I can keep things separated off it is generally better than if I have things together in one spot.<br />
So as an example, if I have a process boundary, I can use malloc and I can put a security structure and book keeping structure at the pointer, followed by whatever data the handle is tracking, and I can return that pointer &#8211; and so then all my security code can be completely uniform, even if the data structures I&#8217;m tracking are non-uniform in size.  If you think about it in C++ terms &#8211; I can have a base class with the security stuff, another base class with the handle tracking stuff, and then some class hierarchy for what I&#8217;m pointing at.  With the traditional array approach, I&#8217;d allocate an array and then put a pointer to that in the array &#8211; and so I&#8217;m potentially saving a page operation, saving some memory on the CPU caches, etc. and so there could be a potential performance gain there when the system is under stress.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1328365">
				<div id="div-comment-1328365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328365">
			March 7, 2018 at 10:50 am</a>		</div>

		<p>Regarding your insider info on changing NULL to be nullptr, there is <a href="https://youtu.be/AKtHxKJRwp4?t=3397" rel="nofollow">this source</a> (from 2013) corroborating that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1328375">
				<div id="div-comment-1328375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328375">
			March 7, 2018 at 11:22 am</a>		</div>

		<p>Whatever happened to reading the documentation? (OK, we all know how that has worked out, over the years, but still.)</p>
<p>If I&#8217;m programming in a version of C++ that has defined semantics for <b>nullptr</b>, I use <b>nullptr</b> &#8230; even if I happen to know that the current version of the current compiler silently treats <b>nullptr</b> as <b>NULL</b> or even as <b>0</b>.  And then I get to the API barrier &#8230;</p>
<p>&#8230; which is where I convert (not cast: actually convert) the semantics of my chosen language to the semantics of the API.  If the API guarantees correct behaviour with <b>NULL</b>, then so be it.  Who am I to disagree?  I don&#8217;t even care if <b>NULL</b> is defined in a BCPL-ish sort of way as <b>-1</b>.</p>
<p>Anybody who bothers to ask this sort of question (&#8220;Do I really need to supply a <b>NULL</b>?&#8221;) has clearly never done much string manipulation in the old days.  Pascal strings, <b>BSTRs</b> ,  Multi-char &#8230; shudder.</p>
<p>Obey the Semantics, Luke.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1328635">
				<div id="div-comment-1328635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">McBucket</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328635">
			March 9, 2018 at 7:26 am</a>		</div>

		<p>&#8220;Anybody who bothers to ask this sort of question (“Do I really need to supply a NULL?”) has clearly never done much string manipulation in the old days. Pascal strings, BSTRs , Multi-char … shudder.&#8221;</p>
<p>Semantically, NULL is meant to represent a null pointer. Let&#8217;s not conflate/confuse this with the null-terminator used in C and C++, which, for ASCII strings is 0, which is named in ASCII as NUL. Yes, terminating a string with NULL will probably work, but:</p>
<p>&#8220;Obey the Semantics, Luke.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1328385">
				<div id="div-comment-1328385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nico</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328385">
			March 7, 2018 at 12:36 pm</a>		</div>

		<p>After using other languages, I find myself missing &#8220;nil&#8221; now as the non-value keyword when using C# or C++ (and nullptr is even more verbose than NULL!).  And then there&#8217;s Obj-C where you can use use both&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1328405">
				<div id="div-comment-1328405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328405">
			March 7, 2018 at 2:53 pm</a>		</div>

		<p>Talking of subtleties, sometimes I find myself writing `WNDCLASSEX wc = { sizeof(wc) };` when initializing structures with size as their first field.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-3 parent" id="comment-1328415">
				<div id="div-comment-1328415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328415">
			March 7, 2018 at 3:17 pm</a>		</div>

		<p>This is wasteful on structs like OSVERSIONINFO where only the first field is input and the rest is output only. You might end up with a pointless call to memset in there when a simple MOV was all you really needed.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-4" id="comment-1328425">
				<div id="div-comment-1328425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328425">
			March 7, 2018 at 4:09 pm</a>		</div>

		<p>And then you have fun diagnosing problems when out only parameters or members of a structure randomly try to use any non zero values in that parameter or structure. There is a reason why initialising variables to a known value is so widely taught.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1328565">
				<div id="div-comment-1328565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://stackoverflow.com/users/1708801/shafik-yaghmour' rel='external nofollow' class='url'>Shafik Yaghmour</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1328565">
			March 8, 2018 at 2:04 pm</a>		</div>

		<p>I once answered a Stack Overflow question about the compatibility of nullptr and NULL when using C function <a href="https://stackoverflow.com/a/25656153/1708801" rel="nofollow">https://stackoverflow.com/a/25656153/1708801</a></p>
<p>I found it interesting that the C++ standard says that <a href="http://eel.is/c++draft/support.types.nullptr#2" rel="nofollow">http://eel.is/c++draft/support.types.nullptr#2</a></p>
<p>&#8220;The macro NULL is an implementation-defined null pointer constant&#8221;</p>
<p>but only says this for cstdlib and it is an exception to it being the same as stdlib.h. The wording has changed a big between C++11 and the current draft but it would be nice if the standard spelled this out more clearly for other headers. There is some non-normative wording in Appendix C which extends what it says is a null pointer constant for more headers but none of them .h files.</p>
<p>Basically, if you include a .h file from the C standard library the standard does not seem to give you are guarantee but the C++ versions of those headers it does.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1329955">
				<div id="div-comment-1329955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180307-00/?p=98175#comment-1329955">
			March 17, 2018 at 3:53 pm</a>		</div>

		<p>&#8220;I&#8217;m told that the Visual C++ folks occasionally entertain the possibility of changing the definition of NULL to nullptr, which is permitted by the standard. However, this ends up breaking a lot of code which assumed that NULL is an integral constant evaluating to zero.&#8221;</p>
<p>I think it would be nice if there were a way to opt-in to such a definition.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

