<html>
<head>
<title>Debugging a hang: Chasing the wait chain inside a process</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Debugging a hang: Chasing the wait chain inside a process</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 24, 2014 / year-entry #252</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>32</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today we're going to debug a hang. Here are some of the (redacted) stacks of the process. I left some red herrings and other frustrations. 0: kd> !process ffffe000045ef940 7 PROCESS ffffe000045ef940 SessionId: 1 Cid: 0a50 Peb: 7ff6b661f000 ParentCid: 0a0c DirBase: 12e5c6000 ObjectTable: ffffc0000288ae80 HandleCount: 1742. Image: contoso.exe THREAD ffffe000018d68c0 Cid 0a50.0a54 Teb: 00007ff6b661d000 Win32Thread:...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today we're going to debug a hang.
Here are some of the (redacted) stacks of the process.
I left some red herrings and other frustrations.
</p>
<pre>
0: kd&gt; !process ffffe000045ef940 7
PROCESS ffffe000045ef940
    SessionId: 1  Cid: 0a50    Peb: 7ff6b661f000  ParentCid: 0a0c
    DirBase: 12e5c6000  ObjectTable: ffffc0000288ae80  HandleCount: 1742.
    Image: contoso.exe

        THREAD ffffe000018d68c0  Cid 0a50.0a54  Teb: 00007ff6b661d000 Win32Thread: fffff90143635a90 WAIT: (WrUserRequest) UserMode Non-Alertable
            ffffe000046192c0  SynchronizationEvent

        nt!KiSwapContext+0x76
        nt!KiSwapThread+0x14c
        nt!KiCommitThreadWait+0x126
        nt!KeWaitForSingleObject+0x1cc
        nt!KeWaitForMultipleObjects+0x44e
        0xfffff960`0038bed0
        0x1
        0xffffd000`24257b80
        0xfffff901`43635a90
        0xd
        0xffffe000`00000001
        0xfffff803`ffffff00

        THREAD ffffe000045f88c0  Cid 0a50.0a8c  Teb: 00007ff6b64ea000 Win32Thread: 0000000000000000 WAIT: (UserRequest) UserMode Non-Alertable
            ffffe000041c1830  SynchronizationEvent

        nt!KiSwapContext+0x76
        nt!KiSwapThread+0x14c
        nt!KiCommitThreadWait+0x126
        nt!KeWaitForSingleObject+0x1cc
        nt!NtWaitForSingleObject+0xb1
        nt!KiSystemServiceCopyEnd+0x13 (TrapFrame @ ffffd000`248ebc40)
        ntdll!ZwWaitForSingleObject+0xa
        ntdll!RtlpWaitOnCriticalSection+0xe1
        ntdll!RtlEnterCriticalSection+0x94
        ntdll!LdrpAcquireLoaderLock+0x2c
        ntdll!LdrShutdownThread+0x64
        ntdll!RtlExitUserThread+0x3e
        KERNELBASE!FreeLibraryAndExitThread+0x4c
        combase!CRpcThreadCache::RpcWorkerThreadEntry+0x62
        KERNEL32!BaseThreadInitThunk+0x30
        ntdll!RtlUserThreadStart+0x42

        THREAD ffffe00003c46080  Cid 0a50.0a9c  Teb: 00007ff6b64e6000 Win32Thread: fffff90143713a90 WAIT: (UserRequest) UserMode Non-Alertable
            ffffe000041c1830  SynchronizationEvent

        nt!KiSwapContext+0x76
        nt!KiSwapThread+0x14c
        nt!KiCommitThreadWait+0x126
        nt!KeWaitForSingleObject+0x1cc
        nt!NtWaitForSingleObject+0xb1
        nt!KiSystemServiceCopyEnd+0x13 (TrapFrame @ ffffd000`367ece40)
        ntdll!ZwWaitForSingleObject+0xa
        ntdll!RtlpWaitOnCriticalSection+0xe1
        ntdll!RtlEnterCriticalSection+0x94
        ntdll!LdrpAcquireLoaderLock+0x4c
        ntdll!LdrpFindOrMapDll+0x75d
        ntdll!LdrpLoadDll+0x394
        ntdll!LdrLoadDll+0xc6
        kernelbase!LoadLibraryExW+0x142
        kernelbase!LoadLibraryExA+0x26
        contoso!__delayLoadHelper2+0x2b
        contoso!_tailMerge_Winmm_dll+0x3f
        contoso!PolarityReverser::OnCompleted+0x28
        contoso!PolarityReverser::Reverse+0xf4
        contoso!ListItem::ReversePolarity+0x7e
        contoso!View::OnContextMenu+0x8
        contoso!View::WndProc+0x25e
        user32!UserCallWinProcCheckWow+0x13a
        user32!DispatchClientMessage+0xf8
        user32!__fnEMPTY+0x2d
        ntdll!KiUserCallbackDispatcherContinue
        user32!ZwUserMessageCall+0xa
        user32!RealDefWindowProcWorker+0x1e2
        user32!RealDefWindowProcW+0x52
        uxtheme!_ThemeDefWindowProc+0x33e
        uxtheme!ThemeDefWindowProcW+0x11
        user32!DefWindowProcW+0x1b6
        comctl32!CListView::WndProc+0x25e
        comctl32!CListView::s_WndProc+0x52
        user32!UserCallWinProcCheckWow+0x13a
        user32!SendMessageWorker+0xa72
        user32!SendMessageW+0x10a
        comctl32!CLVMouseManager::HandleMouse+0xd10
        comctl32!CLVMouseManager::OnButtonDown+0x27
        comctl32!CListView::WndProc+0x1a4186
        comctl32!CListView::s_WndProc+0x52
        user32!UserCallWinProcCheckWow+0x13a
        user32!DispatchMessageWorker+0x1a7

        THREAD ffffe0000462b8c0  Cid 0a50.0ac0  Teb: 00007ff6b64dc000 Win32Thread: 0000000000000000 WAIT: (UserRequest) UserMode Non-Alertable
            ffffe0000462c980  NotificationEvent

        nt!KiSwapContext+0x76
        nt!KiSwapThread+0x14c
        nt!KiCommitThreadWait+0x126
        nt!KeWaitForSingleObject+0x1cc
        nt!NtWaitForSingleObject+0xb1
        nt!KiSystemServiceCopyEnd+0x13 (TrapFrame @ ffffd000`201e9c40)
        ntdll!ZwWaitForSingleObject+0xa
        KERNELBASE!WaitForSingleObjectEx+0xa5
        contoso!CNetworkManager::ThreadProc+0x94
        KERNEL32!BaseThreadInitThunk+0x30
        ntdll!RtlUserThreadStart+0x42

        THREAD ffffe000046ad340  Cid 0a50.0b38  Teb: 00007ff6b64b6000 Win32Thread: 0000000000000000 WAIT: (UserRequest) UserMode Non-Alertable
            ffffe000049108c0  Thread

        nt!KiSwapContext+0x76
        nt!KiSwapThread+0x14c
        nt!KiCommitThreadWait+0x126
        nt!KeWaitForSingleObject+0x1cc
        nt!NtWaitForSingleObject+0xb1
        nt!KiSystemServiceCopyEnd+0x13 (TrapFrame @ ffffd000`2563bc40)
        ntdll!ZwWaitForSingleObject+0xa
        KERNELBASE!WaitForSingleObjectEx+0xa5
        litware!CDiscovery::Uninitialize+0x8c
        litware!CApiInstance::~CApiInstance+0x48
        litware!CApiInstance::`scalar deleting destructor'+0x14
        litware!std::tr1::_Ref_count_obj&lt;CApiInstance&gt;::_Destroy+0x31
        litware!std::tr1::_Ref_count_base::_Decref+0x1b
        litware!std::tr1::_Ptr_base&lt;CApiInstance&gt;::_Decref+0x20
        litware!std::tr1::shared_ptr&lt;CApiInstance&gt;::{dtor}+0x20
        litware!std::tr1::shared_ptr&lt;CApiInstance&gt;::reset+0x3c
        litware!CSingleton&lt;CApiInstance&gt;::ReleaseRef+0x97
        litware!LitWareUninitialize+0xed
        fabrikam!CDoodadHelper::~CDoodadHelper+0x67
        fabrikam!_CRT_INIT+0xda
        fabrikam!__DllMainCRTStartup+0x1e5
        ntdll!LdrpCallInitRoutine+0x57
        ntdll!LdrpProcessDetachNode+0xfe
        ntdll!LdrpUnloadNode+0x77
        ntdll!LdrpDecrementNodeLoadCount+0xd0
        ntdll!LdrUnloadDll+0x34
        KERNELBASE!FreeLibrary+0x22
        combase!CClassCache::CDllPathEntry::CFinishObject::Finish+0x28
        combase!CClassCache::CFinishComposite::Finish+0x80
        combase!CClassCache::FreeUnused+0xda
        combase!CoFreeUnusedLibrariesEx+0x2c
        combase!CDllHost::MTAWorkerLoop+0x7d
        combase!CDllHost::WorkerThread+0x122
        combase!CRpcThread::WorkerLoop+0x4e
        combase!CRpcThreadCache::RpcWorkerThreadEntry+0x46
        KERNEL32!BaseThreadInitThunk+0x30
        ntdll!RtlUserThreadStart+0x42

        THREAD ffffe000046db8c0  Cid 0a50.0b50  Teb: 00007ff6b64aa000 Win32Thread: fffff9014370da90 WAIT: (UserRequest) UserMode Non-Alertable
            ffffe000046dcae0  NotificationEvent
            ffffe000046dd3c0  SynchronizationEvent

        nt!KiSwapContext+0x76
        nt!KiSwapThread+0x14c
        nt!KiCommitThreadWait+0x126
        nt!KeWaitForMultipleObjects+0x22b
        nt!ObWaitForMultipleObjects+0x1f8
        nt!NtWaitForMultipleObjects+0xde
        nt!KiSystemServiceCopyEnd+0x13 (TrapFrame @ ffffd000`21801c40)
        ntdll!ZwWaitForMultipleObjects+0xa
        KERNELBASE!WaitForMultipleObjectsEx+0xe1
        USER32!MsgWaitForMultipleObjectsEx+0x14e
        contoso!EventManagerImpl::MessageLoop+0x32
        contoso!EventManagerImpl::BackgroundProcessing+0x134
        ntdll!TppWorkpExecuteCallback+0x2eb
        ntdll!TppWorkerThread+0xa12
        KERNEL32!BaseThreadInitThunk+0x30
        ntdll!RtlUserThreadStart+0x42

        THREAD ffffe000049108c0  Cid 0a50.06cc  Teb: 00007ff6b6470000 Win32Thread: 0000000000000000 WAIT: (UserRequest) UserMode Non-Alertable
            ffffe000041c1830  SynchronizationEvent

        nt!KiSwapContext+0x76
        nt!KiSwapThread+0x14c
        nt!KiCommitThreadWait+0x126
        nt!KeWaitForSingleObject+0x1cc
        nt!NtWaitForSingleObject+0xb1
        nt!KiSystemServiceCopyEnd+0x13
        ntdll!ZwWaitForSingleObject+0xa
        ntdll!RtlpWaitOnCriticalSection+0xe1
        ntdll!RtlEnterCriticalSectionContended+0x94
        ntdll!LdrpAcquireLoaderLock+0x2c
        ntdll!LdrShutdownThread+0x64
        ntdll!RtlExitUserThread+0x3e
        KERNEL32!BaseThreadInitThunk+0x38
        ntdll!RtlUserThreadStart+0x42
</pre>
<p>
Since debugging is an exercise in optimism,
let's ignore the stacks that didn't come out properly.
If we can't make any headway, we can try to fix them,
but let's be hopeful that the stacks that are good
will provide enough information.
</p>
<p>
Generally speaking, the deeper the stack,
the more interesting it is,
because uninteresting threads tend to be hanging
out in their message loop or event loop,
whereas interesting threads are busy doing something
and have a complex stack trace to show for it.
</p>
<p>
Indeed, one of the deep stacks belongs to thread
<code>0a9c</code>,
and it also has a very telling section:
</p>
<pre>
        ntdll!RtlpWaitOnCriticalSection+0xe1
        ntdll!RtlEnterCriticalSection+0x94
        ntdll!LdrpAcquireLoaderLock+0x4c
        ntdll!LdrpFindOrMapDll+0x75d
        ntdll!LdrpLoadDll+0x394
        ntdll!LdrLoadDll+0xc6
        kernelbase!LoadLibraryExW+0x142
        kernelbase!LoadLibraryExA+0x26
        contoso!__delayLoadHelper2+0x2b
        contoso!_tailMerge_Winmm_dll+0x3f
</pre>
<p>
The polarity reverser's completion handler is trying to
load <code>winmm</code> via delay-load.
That load request is waiting on a critical section,
and it should be clear both from the scenario and the function names
that the critical section it is trying to claim is the loader lock.
In real life, I just proceeded with that conclusion, but
but just for demonstration purposes, here's how we can double-check:
</p>
<pre>
0: kd&gt; .thread ffffe00003c46080
0: kd&gt; kn
  *** Stack trace for last set context - .thread/.cxr resets it
 # Call Site
00 nt!KiSwapContext+0x76
01 nt!KiSwapThread+0x14c
02 nt!KiCommitThreadWait+0x126
03 nt!KeWaitForSingleObject+0x1cc
04 nt!NtWaitForSingleObject+0xb1
05 nt!KiSystemServiceCopyEnd+0x13 (TrapFrame @ ffffd000`367ece40)
06 ntdll!ZwWaitForSingleObject+0xa
07 ntdll!RtlpWaitOnCriticalSection+0xe1
08 ntdll!RtlEnterCriticalSection+0x94
09 ntdll!LdrpAcquireLoaderLock+0x4c
0a ntdll!LdrpFindOrMapDll+0x75d
0b ntdll!LdrpLoadDll+0x394
0c ntdll!LdrLoadDll+0xc6
0d kernelbase!LoadLibraryExW+0x142
0e kernelbase!LoadLibraryExA+0x26
0f contoso!__delayLoadHelper2+0x2b
10 contoso!_tailMerge_Winmm_dll+0x3f
</pre>
<p>
We need to grab the critical section passed to
<code>Rtl&shy;Enter&shy;Critical&shy;Section</code>,
but since this is an x64 machine, the parameter was passed
in registers, not on the stack, so we need to figure out where
the <code>rcx</code> register got stashed.
</p>
<p>
I'm going to assume that the same critical section is
the first (only?) parameter to
<code>Rtlp&shy;Wait&shy;On&shy;CriticalSection</code>.
I don't know this for a fact, but it seems like a reasonable guess.
The guess might be wrong; we'll see.
</p>
<p>
We disassemble the function look to see where it stashes <code>rcx</code>.
</p>
<pre>
0: kd&gt; u ntdll!RtlpWaitOnCriticalSection
    mov     qword ptr [rsp+18h],rbx
    push    rbp
    push    rsi
    push    rdi
    push    r12
    push    r13
    push    r14
    push    r15
    mov     rax,qword ptr [ntdll!__security_cookie (000007ff`3099d020)]
    xor     rax,rsp
    mov     qword ptr [rsp+80h],rax
    mov   r14,qword ptr gs:[30h]
    xor     r12d,r12d
    lea     rax,[ntdll!LdrpLoaderLock (00007fff`d4f51cb8)]
    mov     r15d,r12d
    cmp     rcx,rax
    mov     ebp,edx
    sete    r15b
    <font COLOR=blue>mov     rbx,rcx</font> // &lArr; Bingo
</pre>
<p>
Awesome, we can suck <code>rbx</code> out of the trap frame.
</p>
<pre>
0: kd&gt; .trap ffffd000`367ece40
rax=0000000000000000 rbx=<font COLOR=blue>00007fffd4f51cb8</font> rcx=000007f8136f2c2a
rdx=0000000000000000 rsi=00000000000001e8 rdi=0000000000000000
rip=000007f8136f2c2a rsp=000000000cf7f798 rbp=0000000000000000
 r8=000000000cf7f798  r9=0000000000000000 r10=0000000000000000
r11=0000000000000344 r12=0000000000000000 r13=0000000000000000
r14=000007f696870000 r15=000000007ffe0382
iopl=0         nv up ei pl zr na po nc
cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246
ntdll!ZwWaitForSingleObject+0xa:
000007f8`136f2c2a c3              ret
</pre>
<p>
Okay, let's see if that value in <code>rbx</code> pans out.
</p>
<pre>
0: kd&gt; !cs 0x00007fff`d4f51cb8
-----------------------------------------
Critical section   = 0x00007fffd4f51cb8 (ntdll!LdrpLoaderLock+0x0)
DebugInfo          = 0x00007fffd4f55228
LOCKED
LockCount          = 0x8
WaiterWoken        = No
OwningThread       = 0x0000000000000b38
RecursionCount     = 0x1
LockSemaphore      = 0x1A8
SpinCount          = 0x0000000004000000
</pre>
<p>
Hooray, we confirmed that this is indeed the loader lock.
I would have been surprised if it had been anything else!
(If you had been paying attention, you would have noticed
the <code>lea rax,[ntdll!LdrpLoaderLock (00007fff`d4f51cb8)]</code>
in the disassembly which already confirms the value.)
</p>
<p>
We also see that the owning thread is 0xb38.
Here's its stack again:</p>
<pre>
        nt!KiSwapContext+0x76
        nt!KiSwapThread+0x14c
        nt!KiCommitThreadWait+0x126
        nt!KeWaitForSingleObject+0x1cc
        nt!NtWaitForSingleObject+0xb1
        nt!KiSystemServiceCopyEnd+0x13 (TrapFrame @ ffffd000`2563bc40)
        ntdll!ZwWaitForSingleObject+0xa
        KERNELBASE!WaitForSingleObjectEx+0xa5
        litware!CDiscovery::Uninitialize+0x8c
        litware!CApiInstance::~CApiInstance+0x48
        litware!CApiInstance::`scalar deleting destructor'+0x14
        litware!std::tr1::_Ref_count_obj&lt;CApiInstance&gt;::_Destroy+0x31
        litware!std::tr1::_Ref_count_base::_Decref+0x1b
        litware!std::tr1::_Ptr_base&lt;CApiInstance&gt;::_Decref+0x20
        litware!std::tr1::shared_ptr&lt;CApiInstance&gt;::{dtor}+0x20
        litware!std::tr1::shared_ptr&lt;CApiInstance&gt;::reset+0x3c
        litware!CSingleton&lt;CApiInstance&gt;::ReleaseRef+0x97
        litware!LitWareUninitialize+0xed
        fabrikam!CDoodadHelper::~CDoodadHelper+0x67
        fabrikam!_CRT_INIT+0xda
        fabrikam!__DllMainCRTStartup+0x1e5
        ntdll!LdrpCallInitRoutine+0x57
        ntdll!LdrpProcessDetachNode+0xfe
        ntdll!LdrpUnloadNode+0x77
        ntdll!LdrpDecrementNodeLoadCount+0xd0
        ntdll!LdrUnloadDll+0x34
        KERNELBASE!FreeLibrary+0x22
        combase!CClassCache::CDllPathEntry::CFinishObject::Finish+0x28
        combase!CClassCache::CFinishComposite::Finish+0x80
        combase!CClassCache::FreeUnused+0xda
        combase!CoFreeUnusedLibrariesEx+0x2c
        combase!CDllHost::MTAWorkerLoop+0x7d
        combase!CDllHost::WorkerThread+0x122
        combase!CRpcThread::WorkerLoop+0x4e
        combase!CRpcThreadCache::RpcWorkerThreadEntry+0x46
        KERNEL32!BaseThreadInitThunk+0x30
        ntdll!RtlUserThreadStart+0x42
</pre>
<p>
Reading from the bottom up, we see that this thread is doing
some work on behalf of COM;
specifically, it is freeing unused libraries.
The <code>fabrikam</code> library presumably responded
<code>S_OK</code> to
<code>Dll&shy;Can&shy;Unload&shy;Now</code>,
so COM says,
"Okay, then out you go."
</p>
<p>
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/10/17/10565302.aspx">
As part of
<code>DLL_<wbr>PROCESS_<wbr>DETACH</code> processing,
the C++ runtime library runs global destructors</a>.
The
<code>CDoodadHelper</code> destructor calls into
the <code>Lit&shy;Ware&shy;Uninitialize</code> function in
<code>litware.dll</code>.
That function decrements a reference count, and it appears
that the reference count went to zero because it's destructing
the <code>CApi&shy;Instance</code> object.
The destructor for that function calls
<code>CDiscovery::<wbr>Uninitialize</code>,
and that function waits on a kernel object.
</p>
<p>
The debugger was kind enough to tell us what the object is:</p>
<pre>
        THREAD ffffe000046ad340  Cid 0a50.0b38  Teb: 00007ff6b64b6000 Win32Thread: 0000000000000000 WAIT: (UserRequest) UserMode Non-Alertable
            ffffe000049108c0  Thread
</pre>
<p>
It's a thread.
</p>
<!--</p>
<p>
But in case we didn't know that,
here's how we could have figured it out anyway:
Look at the handle that was passed to
<code>Wait&shy;For&shy;Single&shy;Object</code>:
</p>
<pre>
0: kd&gt; kn
  *** Stack trace for last set context - .thread/.cxr resets it
 # Call Site
00 nt!KiSwapContext+0x76
01 nt!KiSwapThread+0x14c
02 nt!KiCommitThreadWait+0x126
03 nt!KeWaitForSingleObject+0x1cc
04 nt!NtWaitForSingleObject+0xb1
05 nt!KiSystemServiceCopyEnd+0x13 (TrapFrame @ ffffd000`2563bc40)
06 ntdll!ZwWaitForSingleObject+0xa
07 KERNELBASE!WaitForSingleObjectEx+0xa5
08 litware!CDiscovery::Uninitialize+0x8c
0: kd&gt; .frame 7
07 KERNELBASE!WaitForSingleObjectEx+0xa5
0: kd&gt; dv
        hHandle = 0x00000000`000016e8
 dwMilliseconds = 0xffffffff
     bAlertable = 0n0
...
</pre>
<p>
The code is waiting infinitely (<code>0xffffffff</code>)
for handle <code>0x16e8</code>.
Let's see what that handle refers to.
</p>
<pre>
0: kd&gt; !handle 16e8 f
PROCESS ffffe000045ef940
    SessionId: 1  Cid: 0a50    Peb: 7ff6b661f000  ParentCid: 0a0c
    DirBase: 12e5c6000  ObjectTable: ffffc0000288ae80  HandleCount: 1742.
    Image: contoso.exe

Handle table at ffffc0000288ae80 with 1742 entries in use

16e8: Object: ffffe000049108c0  GrantedAccess: 001fffff (Protected) Entry: ffffc00002b8aba0
Object: ffffe000049108c0  Type: (ffffe000001fff20) Thread
    ObjectHeader: ffffe00004910890 (new version)
        HandleCount: 2  PointerCount: 32770
</pre>
<p>
That value <code>ffffe000049108c0</code>
matches the value reported by the
thread dump at the start.
</p>
<p>-->
<p>
Going back to the thread dump at the start, we also can see what thread
<code>ffffe000049108c0</code> is doing.
Here it is again:
</p>
<pre>
        nt!KiSwapContext+0x76
        nt!KiSwapThread+0x14c
        nt!KiCommitThreadWait+0x126
        nt!KeWaitForSingleObject+0x1cc
        nt!NtWaitForSingleObject+0xb1
        nt!KiSystemServiceCopyEnd+0x13
        ntdll!ZwWaitForSingleObject+0xa
        ntdll!RtlpWaitOnCriticalSection+0xe1
        ntdll!RtlEnterCriticalSectionContended+0x94
        ntdll!LdrpAcquireLoaderLock+0x2c
        ntdll!LdrShutdownThread+0x64
        ntdll!RtlExitUserThread+0x3e
        KERNEL32!BaseThreadInitThunk+0x38
        ntdll!RtlUserThreadStart+0x42
</pre>
<p>
That thread is trying to acquire the loader lock so it can
send <code>DLL_<wbr>THREAD_<wbr>DETACH</code> notifications.
But the loader lock is held by the
<code>Free&shy;Library</code>.
Result: Deadlock, as the two threads are waiting for each other.
(You can also see that thread <code>0xa8c</code> is stuck
in the same place because it too is trying to exit.)
</p>
<p>
The underlying problem is that the
Fabrikam DLL is waiting on a thread (indirectly via LitWare)
while inside its own <code>Dll&shy;Main</code>.
</p>
<p>
The Fabrikam code could avoid this problem by calling
<code>Lit&shy;Ware&shy;Uninitialize</code>
when its last object is destroyed
rather than when the DLL is unloaded.
(Of course, it also has to remember to call
<code>Lit&shy;Ware&shy;Initialize</code> when its first
object is created.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (32)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1157443">
				<div id="div-comment-1157443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157443">
			October 24, 2014 at 7:07 am</a>		</div>

		<p>[&#8230; optimism &#8230;] And the crash I debugged yesterday had a stack trace not come through for one thread because RSP was pointing to unallocated RAM. Guess which stack trace I was after.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1157453">
				<div id="div-comment-1157453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157453">
			October 24, 2014 at 7:08 am</a>		</div>

		<p>That&#39;s what Internet Explorer loves to do. Or used to do: I gave up on IE a couple years ago. The fault may be with Flash, or other plugin.</p>
<div class="post">[<em>Everybody wants a Web browser to have a plug-in model, but they don&#39;t realize that having a plug-in model means that plug-ins can screw up. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1157483">
				<div id="div-comment-1157483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157483">
			October 24, 2014 at 7:35 am</a>		</div>

		<p>And this is why I&#39;ll stick to web programming. &nbsp;Although I guess poring over Fiddler logs isn&#39;t really any better, maybe I&#39;m just used to it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1157493">
				<div id="div-comment-1157493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157493">
			October 24, 2014 at 7:35 am</a>		</div>

		<p>Raymond, Microsoft needs to increase the support cost for Contoso a whole bunch. &nbsp;Seems like their code is always causing you problems.</p>
<p>:)</p>
<p>P.S. Thanks for the debugging lesson.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1157513">
				<div id="div-comment-1157513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157513">
			October 24, 2014 at 7:51 am</a>		</div>

		<p>[Everybody wants a Web browser to have a plug-in model, but they don&#39;t realize that having a plug-in model means that plug-ins can screw up. -Raymond]</p>
<p>And many years later we finally learned to host plug-ins in their own processes as much as possible (flash is a great example of one that can be and should be). </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1157523">
				<div id="div-comment-1157523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157523">
			October 24, 2014 at 8:18 am</a>		</div>

		<p>So Thread 1 is inside the loader lock waiting for Thread B to exit, but Thread B can&#39;t exit because it is waiting on the loader lock that Thread 1 holds?</p>
<p>I kinda saw that coming when I saw LdrpAcquireLoaderLock and figured that the earlier posts this week were leading up to this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1157583">
				<div id="div-comment-1157583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KyleJ61782</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157583">
			October 24, 2014 at 10:07 am</a>		</div>

		<p>And this is the reason why Raymond always says that doing anything substantial in DllMain is usually a bad idea.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1157593">
				<div id="div-comment-1157593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">not important</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157593">
			October 24, 2014 at 10:35 am</a>		</div>

		<p>What about destructors for global objects? When are these executed? If they are executed when the DLL is unloaded then these destructors cannot call LitewareUninitialize. Maybe the moral of the story includes: do not do &quot;big&quot; things in your destructor (like call into third party code. Or wait on a thread. etc&#8230;). Because sometimes you do not control when the destructor is executed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1157603">
				<div id="div-comment-1157603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157603">
			October 24, 2014 at 2:23 pm</a>		</div>

		<p>Very interesting post, I like these type of debugging sessions.</p>
<p>Used to read Mark Russinovich excellent step by step debugging, lots of useful things I learned there, sad that he stopped posting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1157503">
				<div id="div-comment-1157503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157503">
			October 24, 2014 at 7:47 am</a>		</div>

		<p>One of the problems I have with this blog is it shakes my belief that I&#39;m the awesomest programmer in the land. I sure has heck can&#39;t read assembler or a stack dump like this. Thanks for another humility lesson, Raymond.</p>
<p>&lt;eyes crossed in confusion while bowing and proclaiming *I&#39;m not worthy!*&gt;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1157613">
				<div id="div-comment-1157613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Boyd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157613">
			October 24, 2014 at 9:16 pm</a>		</div>

		<p>IE would love non-binary plugins (cf. another browsers). And with IE (and other browser) hosting each page in separate Low Mandatory Integrity Level processes, plugins can do zero damage and require no binaries to secure (only HTML and JavaScript).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1157623">
				<div id="div-comment-1157623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157623">
			October 25, 2014 at 11:58 am</a>		</div>

		<p>@Joshua: Are you proposing that instead of injecting plugins&#39; code inside our address space, giving it a few pointers to our internal structures, we run them in separate processes, maybe even with different rights, giving them a few pipes for data exchange and RPC and stuff?</p>
<p>That sounds like a great idea: if a plugin crashes, its process handle is signaled (and the pipe is broken, but it may break on its own). And if the host crashes, simmetrically, the plugin sees the broken pipe, and should exit. Unfortunately, plugins are not written well, so they don&#39;t account for host crashes, so they don&#39;t exit. Yay, zombie plugins!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1157633">
				<div id="div-comment-1157633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157633">
			October 25, 2014 at 4:00 pm</a>		</div>

		<p>@Joker_vD: easily solved; put the plugin process into a job object with the JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE flag.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1157663">
				<div id="div-comment-1157663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157663">
			October 26, 2014 at 3:53 am</a>		</div>

		<p>Bah, I had a loader lock hang this morning but I wasn&#39;t running a symbols build so I was too lazy to debug it. (Also when I killed it and ran the debug build it didn&#39;t lock. Sigh.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command even thread-even depth-1" id="comment-1157653">
				<div id="div-comment-1157653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157653">
			October 26, 2014 at 1:21 am</a>		</div>

		<p>– &quot;Everybody wants a Web browser to have a plug-in model, but they don&#39;t realize that having a plug-in model means that plug-ins can screw up.&quot;</p>
<p>Oh, believe me, everyone does realize that. Only the majority consensus is to accept it as part of the ecosystem and deal with it, because it is beneficiary. Mozilla Foundation and Google have succeeded. Ask yourself: Why Microsoft hasn&#39;t come up with an &quot;app-free OS&quot; concept yet!? (Office-free Windows! *Chuckle*)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1157673">
				<div id="div-comment-1157673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157673">
			October 26, 2014 at 4:49 pm</a>		</div>

		<p>@Harry Johnston: Oh, but the host process is already in a job object. What do I do now? Nested jobs were introduced in Windows 8 only.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1157683">
				<div id="div-comment-1157683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157683">
			October 26, 2014 at 6:27 pm</a>		</div>

		<p>@Joshua: Maybe, may not.</p>
<p>In old model when some Flash Ad. screw up, it just crashed the current process. Now when it blows up, it crashes all the Flash plugins in IE, Firefox and Chrome, no matter I run them in protected mode (or equivalent) or not. That means it&#39;s not safe to do equity trading on web while surfing websites that may have Flash Ad., and I have no way to evade it except by running the thing inside a VM.</p>
<p>Talk about usability.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1157693">
				<div id="div-comment-1157693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157693">
			October 26, 2014 at 6:53 pm</a>		</div>

		<p>@Joker_vD: I think the only common scenario where the browser would be in a job object is when it is launched from the Startup menu, and in that case you can use CREATE_BREAKAWAY_FROM_JOB to escape. &nbsp;But if you&#39;re in a non-breakaway job for some reason, then IMO the job owner is responsible for worrying about leftover processes.</p>
<p>On the other hand, I don&#39;t see that zombie plugins are likely to do much harm anyway. &nbsp;You can always kill them when the user restarts the browser. &nbsp;So perhaps there was no need for a job object in the first place. &nbsp;(I wonder what Chrome does?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1157703">
				<div id="div-comment-1157703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157703">
			October 26, 2014 at 10:27 pm</a>		</div>

		<p>@cheong00: that&#39;s an implementation detail. &nbsp;There&#39;s no need for different browsers to share the same plugin process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1157713">
				<div id="div-comment-1157713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157713">
			October 26, 2014 at 11:28 pm</a>		</div>

		<p>@cheong00: Or, you could simply uninstall Flash completely. I haven&#39;t had it on my PC for a couple of years now, and I don&#39;t feel I&#39;m missing out :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1157723">
				<div id="div-comment-1157723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157723">
			October 26, 2014 at 11:59 pm</a>		</div>

		<p>@Drak: Or I should have changed my bank, except that trading fee is only waived if you put your salary paying bank account in the same bank, and not all banks offer something like this. Btw, seems the equity price update component is offered by 3rd party as well.</p>
<p>@Harry: Agreed. Just that their current implementation make me feel more inconvenient than the old way. And honestly speaking, I smell the possibility of unexpected information leakage if some hole is found in the shared process. Not feeling very comfortable about that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1157733">
				<div id="div-comment-1157733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157733">
			October 27, 2014 at 5:12 am</a>		</div>

		<p>Honestly, I&#39;m still astonished, that this problem hasn&#39;t been addressed long ago.</p>
<p>So far there still is no way to initialize a DLL without publishing a second method which MUST be called after loading it (and and cleanup method which MUST be called before cleanup).</p>
<p>This in turn requires that the dll itself contains a second reference count (initialize will increase, cleanup will decrease it) or that the client does some reference counting (good luck if you have other dll&#39;s dependent on that dll too).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1157773">
				<div id="div-comment-1157773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157773">
			October 27, 2014 at 10:09 am</a>		</div>

		<p>@Harry:</p>
<p>&gt;I think the only common scenario where the browser would be in a job object is when it is launched from the Startup menu, and in that case you can use CREATE_BREAKAWAY_FROM_JOB to escape.</p>
<p>The browser needs to create a job object and attach the plugin processes to it. When the browser exits or crashes, it implicitly or explicitly closes the last handle to the job, and that would kill the remaining plugin processes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1157783">
				<div id="div-comment-1157783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157783">
			October 27, 2014 at 10:18 am</a>		</div>

		<p>@Daniel:</p>
<p>Just one method needed:</p>
<p>BOOL ComponentInitialize (BOOL bConstructing);</p>
<p>Pass 1 and DLL constructs its stuff.</p>
<p>Pass 0 and DLL destructs its stuff.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1157813">
				<div id="div-comment-1157813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157813">
			October 27, 2014 at 12:23 pm</a>		</div>

		<p>@Harry Johnston: Zombie plugins are a problem. I&#39;ve seen plugins that open some important files in exclusive mode, so the second copy of the plugin can not work. And how do I kill zombie plugins on restart? Run through the list of all processes and kill everything that has the image file inside my &quot;Plugins&quot; folder and has parent process &quot;[System]&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1157893">
				<div id="div-comment-1157893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157893">
			October 27, 2014 at 7:50 pm</a>		</div>

		<p>@Harry: Wait, so if I start two browsers, one crashes, I restart it, then it will see a bunch of plugins that don&#39;t have his current PID and terminate them all—including the plugins of the first copy that are working fine. Or worse, it restarts with the same PID, and now things get very interesting&#8230;</p>
<p>Also, a DLL can start another process which won&#39;t be killed by the watchdog thread, and why would the plugin do it? Maybe it starts tor.exe and uses it to provide access to the .onion sites, whatever. It would be much easier if I could just reliably ask the OS to &quot;If I die, kill every process I spwaned, yes, even those ones that specifically asked not to kill them in this scenario&quot;.</p>
<p>Well, I guess I can make the watchdog to put a breakpoint on the CreateProcess, and instead spawn a separate watchdog that will launch the requested executable and will monitor the first watchdog&#8230; I wonder what does Cygwin do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-harry-johnston even thread-even depth-1" id="comment-1157873">
				<div id="div-comment-1157873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Harry+Johnston' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157873">
			October 27, 2014 at 4:31 pm</a>		</div>

		<p>@alegr1: yes, exactly &#8211; but if the browser was launched from the Startup folder, it already belongs to a job created by Explorer, so you can&#39;t put your child processes in *your* job unless you use CREATE_BREAKAWAY_FROM_JOB. &nbsp;(Or you could use nested jobs in Windows 8 or later.)</p>
<p>@Joker_vD: all the plugins would normally use the same executable, e.g., Firefox&#39;s plugin-container.exe, so you can enumerate the candidates easily enough. &nbsp;You could perhaps create an event object matching each plugin process, with the process ID as part of the name; any candidate process without a corresponding event object is a zombie. &nbsp;But in retrospect it would be easier for each of the plugin processes to have a thread dedicated to watching the parent process. &nbsp;If you launch the watchdog thread *before* you load the plugin DLL, it should be reliable enough no matter what the DLL does.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1157903">
				<div id="div-comment-1157903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anomymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1157903">
			October 28, 2014 at 2:06 am</a>		</div>

		<p>@Joker_vD: that would quickly lead to a &quot;If my parent dies, don&#39;t kill me, yes, even if the parent specified the &#39;If I die, kill every process I spawned, yes, even those ones that specifically asked not to kill them in this scenario&#39; flag&quot; flag.</p>
<p>And then a `If I die, kill every process I spawned, yes, even those ones that specified the &quot;If my parent dies, don&#39;t kill me, yes, even if the parent specified the &#39;If I die, kill every process I spawned, yes, even those ones that specifically asked not to kill them in this scenario&#39; flag&quot; flag` flag.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-harry-johnston even thread-even depth-1" id="comment-1158133">
				<div id="div-comment-1158133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Harry+Johnston' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1158133">
			October 28, 2014 at 6:38 pm</a>		</div>

		<p>@Joker_vD: no, in the model I described the other browser&#39;s plugin processes will not be affected, because the associated event objects will still exist. &nbsp;Nor will it matter if the browser gets the same process ID it had before; we&#39;re associating the event objects with the process IDs of the plugin processes, not that of the parent process. &nbsp;(The watchdog model is still preferable, IMO.)</p>
<p>Regarding the possibility that the plugin creates a subprocess itself: personally, I would be inclined to explicitly prohibit doing so. &nbsp;If I *had* to allow it, though, the plugin would be responsible for shutting down the children and itself cleanly when signaled by the watchdog thread; if it failed to do so in a timely manner, the watchdog thread would kill the plugin process and the user would have to deal with the child manually. &nbsp;(That shouldn&#39;t happen frequently, and if it does, it&#39;s the plugin author&#39;s fault: my advice to the user would be to uninstall the plugin.)</p>
<p>It wouldn&#39;t really be safe to simply kill the entire process tree as soon as the browser dies; what if one of the children is in the middle of writing to a file? &nbsp;But we can do so if we want to, using a job object. &nbsp;(We can&#39;t do that if we&#39;re in Windows 7 or earlier, and the process already belongs to a job object and isn&#39;t allowed to use CREATE_BREAKAWAY_FROM_JOB. &nbsp;But that shouldn&#39;t ever happen, so we don&#39;t really need to worry about it too much.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1158533">
				<div id="div-comment-1158533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1158533">
			October 29, 2014 at 3:55 pm</a>		</div>

		<p>@Anonymous Coward: No, it wouldn&#39;t. It would be simply &quot;I don&#39;t care about my children processes&quot;, &quot;I want my children processes to terminate when I terminate&quot;, and &quot;I want my children processes to terminate when I terminate except those children processes that asked to not suffer this fate&quot;; plus a special &quot;I&#39;d like to escape from the impeding doom if you please&quot; call for children processes, and that&#39;s it.</p>
<p>@Harry Johnston: Well, I don&#39;t know if it&#39;s possible to prohibit a process to create another processes on Windows. And &quot;plugin would be responsible&#8230;&quot; is BS. We moved plugins from DLLs into separate processes exactly because they&#39;re irresponsible, aren&#39;t we? Yes, if the plugin process writes to a file, and the main process crashes, it will cause incomplete write — but it&#39;s no different from when the DLL writes to a file, and the host process crashes. We don&#39;t lose any guarantees we had.</p>
<p>&quot;We can&#39;t do that if we&#39;re in Windows 7 or earlier&quot; is sad, because our clients are not going to move from Windows 7 and Windows Server 2008 for at least another couple of years. After all, we already wrote a BAT-file around taskkill.exe which can be used for cleaning after crashes in our use scenarios, so while it&#39;s not anywhere near perfect, it works well enough to justify not &quot;upgrading&quot; to Windows 8.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-harry-johnston even thread-even depth-1" id="comment-1158563">
				<div id="div-comment-1158563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Harry+Johnston' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1158563">
			October 29, 2014 at 5:41 pm</a>		</div>

		<p>@Joker_vD: we put the plugin into a separate process so it can&#39;t crash the browser as easily, and to reduce the risk of the plugin and the browser interfering with each other. &nbsp;Recognizing that the quality of plugins isn&#39;t always as good as that of the browser doesn&#39;t mean that we can&#39;t expect some minimal level of correct behaviour. &nbsp;Terminating it the instance the browser crashes is no worse than the all-in-one-process model, but it&#39;s no better either; why not give the plugin a few seconds to shut down cleanly if it can? &nbsp;If it can&#39;t, *then* we can terminate it.</p>
<p>If a plugin launches a subprocess when we&#39;ve prohibited doing so, or if it is allowed to create subprocesses but fails to properly clean them up when it is told to exit, we can enforce the rules by adding the plugin in question to the browser&#39;s blacklist.</p>
<p>All that said, we *can* still do the kill-all-the-children thing if we want to, even in Windows 7, or Windows XP for that matter, as I&#39;ve already pointed out more than once. &nbsp;We just use a job object, combined with CREATE_BREAKAWAY_FROM_JOB to escape Explorer&#39;s job object if it is present. &nbsp;It&#39;s not trivial, but it isn&#39;t rocket science.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1158713">
				<div id="div-comment-1158713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141024-00/?p=43773#comment-1158713">
			October 30, 2014 at 5:43 am</a>		</div>

		<p>Even under the old model of hosting a plugin within the main process, if the plugin creates a child process and the host crashes, we&#39;re still left with the child orphaned. &nbsp;So, switching to an out of process plugin model changes nothing in regards to that issue. &nbsp;(And the issue shouldn&#39;t be used as an argument against an out of process plugin model.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

