<html>
<head>
<title>Nasty gotcha: VarCmp vs VariantCompare</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Nasty gotcha: VarCmp vs VariantCompare</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 18, 2016 / year-entry #38</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160218-00/?p=93051</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Similar names, different return values.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
There are two functions for comparing
<code>VARIANT</code>s.
One comes from the COM team,
called
<code>VarCmp</code>.
Assuming a successful comparison, it returns
</p>
<table BORDER="1" CELLPADDING="3" STYLE="border-collapse: collapse">
<tr>
<th>Comparison</th>
<th>Return value</th>
</tr>
<tr>
<td>Less than</td>
<td>0 = <code>VARCMP_LT</code></td>
</tr>
<tr>
<td>Equal to</td>
<td>1 = <code>VARCMP_EQ</code></td>
</tr>
<tr>
<td>Greater than</td>
<td>2 = <code>VARCMP_GT</code></td>
</tr>
</table>
<p>
This is consistent with the other <code>Var&shy;Xxx</code> functions.
</p>
<p>
On the other hand, the
<code>Variant&shy;Compare</code> function comes
from the shell,
and it returns
</p>
<table BORDER="1" CELLPADDING="3" STYLE="border-collapse: collapse">
<tr>
<th>Comparison</th>
<th>Return value</th>
</tr>
<tr>
<td>Less than</td>
<td ALIGN="right">&minus;1</td>
</tr>
<tr>
<td>Equal to</td>
<td ALIGN="right">0</td>
</tr>
<tr>
<td>Greater than</td>
<td ALIGN="right">+1</td>
</tr>
</table>
<p>
Yuck.
</p>
<p>
So be careful which one you're calling
and how you're testing the result.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1227401">
				<div id="div-comment-1227401" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160218-00/?p=93051#comment-1227401">
			February 18, 2016 at 7:26 am</a>		</div>

		<p>Nah, it&#8217;s easy. See, you just remember that VarCmp behaves like CompareString, and VariantCompare behaves like strcmp.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1227402">
				<div id="div-comment-1227402" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160218-00/?p=93051#comment-1227402">
			February 18, 2016 at 7:58 am</a>		</div>

		<p>I was about to disagree with your conclusion about which one was &#8220;yuck&#8221;, with reference to the decades of precedence set by memcmp(), str*cmp(), strcoll() and wcs*cmp(), when I decided to have a look at the docs for each function (yeah, I know!).</p>
<p>I think you miss off two important details about VarCmp()&#8217;s return values. The first is that they&#8217;re not just an enum, they&#8217;re also a valid HRESULT, which is useful in many ways but happens to rule out the possibility of using -1 as a &#8220;success&#8221; value. The second detail is the 4th possible return value which you elided: if either expression is NULL, the result is 3 = VARCMP_NULL, for which VariantCompare() does not have a documented behaviour.</p>
<p>(That said, I would have made VARCMP_EQ = 0, with _LT and _GT both positive, to maintain the &#8220;0 == match&#8221; precedent. Although, that might have been more confusing for devs who would then expect the -1/+1 values by extension.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1227412">
				<div id="div-comment-1227412" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">FS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160218-00/?p=93051#comment-1227412">
			February 18, 2016 at 9:29 am</a>		</div>

		<p>I disagree with the &#8220;Yuck&#8221;. IMO: It makes more sense to explain equality with zero because it allows you to interpret any negative value (smaller than zero) as &#8220;less than&#8221;, and any positive value (greater than zero) as &#8220;greater than&#8221;. You could even go crazy and return the difference of the comparison (for example, 5 &gt; 3 returns +2, and 4 &lt; 10 returns -6 &#8212; not sure why you would want to do it; it won&#039;t give you the best performance and it is problematic because of a high chance to produce overflow, but still it gives you the idea of thinking of comparion as a vector on a number scale). Maybe I&#039;ve written too much .NET code&#8230; it makes me put the &quot;Yuck&quot; on the COM solution.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1227451">
				<div id="div-comment-1227451" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160218-00/?p=93051#comment-1227451">
			February 18, 2016 at 12:08 pm</a>		</div>

		<p>The Yuck wasn&#8217;t saying that âˆ’1/+1 is yucky. The Yuck was saying that having two different ways of expressing the result is yucky.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1227511">
				<div id="div-comment-1227511" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160218-00/?p=93051#comment-1227511">
			February 19, 2016 at 6:54 am</a>		</div>

		<p>Ah, I misread that too.</p>
<p>The line directly under the VarCmp() result table is a comment on that very table, judging it, and approving of it due to its consistency with other functions. The line directly under the VariantCompare() result table is also a judgement, although negative, but due to example set with the VarCmp() comment appears to be similarly related directly to the contents of the VariantCompare() table, and not to the existence of two different result tables.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1227491">
				<div id="div-comment-1227491" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160218-00/?p=93051#comment-1227491">
			February 18, 2016 at 2:01 pm</a>		</div>

		<p>and thus -2147483648 &gt; 1 (in a 32-bit signed-arithmetic system)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1227423">
				<div id="div-comment-1227423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160218-00/?p=93051#comment-1227423">
			February 18, 2016 at 10:50 am</a>		</div>

		<p>I wonder what these do if the variants are of utterly different types, say a word document and a date.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-matteo odd alt depth-2" id="comment-1227471">
				<div id="div-comment-1227471" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160218-00/?p=93051#comment-1227471">
			February 18, 2016 at 12:31 pm</a>		</div>

		<p>VariantCompare explicitly states that in such a case the result is undefined and should be ignored. VarCmp doesn&#8217;t seem to say anything about it. A possibility (implemented e.g. in Python 2) can be to define some strict ordering between the different types, and use it in comparisons between values of different types. This allows sorting and sorted data structures (e.g. RB trees) to work correctly even with non-homogeneous data.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1227481">
				<div id="div-comment-1227481" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160218-00/?p=93051#comment-1227481">
			February 18, 2016 at 12:37 pm</a>		</div>

		<p>@Joshua The Word document is certainly going to be bigger!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1227501">
				<div id="div-comment-1227501" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nikos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160218-00/?p=93051#comment-1227501">
			February 19, 2016 at 12:04 am</a>		</div>

		<p>thanks for this tip, I was using a PROPVARIANT class from the MSDN SHELL SAMPLES, and it looks like it has the bug! (PropVariant.h, class CComPropVariant). It looks somebody from MS copy/pasted code from CComVariant so propvariant comparison code is wrong! </p>
<p>return PropVariantCompare(*this, varSrc) == static_cast(VARCMP_EQ);</p>
<p>according to the docs PropVariantCompare behaves like strcmp so checking it agains VARCMP_EQ is wrong</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-p_christidis even depth-2" id="comment-1227504">
				<div id="div-comment-1227504" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/__klg' rel='external nofollow' class='url'>__klg</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160218-00/?p=93051#comment-1227504">
			February 19, 2016 at 5:21 am</a>		</div>

		<p>Yeah, all the operators accepting PROPVARIANTs look broken.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

