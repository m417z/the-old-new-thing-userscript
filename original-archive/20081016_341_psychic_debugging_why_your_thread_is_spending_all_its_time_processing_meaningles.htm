<html>
<head>
<title>Psychic debugging: Why your thread is spending all its time processing meaningless thread timers</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Psychic debugging: Why your thread is spending all its time processing meaningless thread timers</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 16, 2008 / year-entry #342</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20081016-00/?p=20543</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">I was looking at one of those "my program is consuming 100% of the CPU and I don't know why" bugs, and upon closer investigation, the proximate reason the program was consuming 100% CPU was that one of the threads was being bombarded with WM_TIMER messages where the MSG.hWnd is NULL. The program was dispatching...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>I was looking at one of those "my program is consuming 100% of the CPU and I don't know why" bugs, and upon closer investigation, the proximate reason the program was consuming 100% CPU was that one of the threads was being bombarded with <code>WM_TIMER</code> messages where the <code>MSG.hWnd</code> is <code>NULL</code>. The program was dispatching them as fast as it could, but the messages just kept on coming. Curiously, the <code>LPARAM</code> for these messages was zero.</p>
<p> This should be enough information for you to figure out what is going on. </p>
<p> First, you should refresh your memory as to what a null window handle in a <code>WM_TIMER</code> message means: These are thread timers, timers which are associated not with a window but with a thread. You create a thread timer by calling the <code>SetTimer</code> function and passing <code>NULL</code> as the window handle. Thread timer messages arrive in the message queue, and the <code>DispatchMessage</code> function calls the timer procedure specified by the message <code>LPARAM</code>. If the <code>LPARAM</code> of a thread timer message is zero, then dispatching the message consists merely of throwing it away. (If there were a window handle, then the message would be delivered to the window procedure, but there isn't one, so there's nothing else that can be done.) </p>
<p> The program was spending all its time retrieving <code>WM_TIMER</code> messages from its queue and throwing them away. The real question is how all these thread timers ended up on the thread when they don't do anything. Who would create a timer that didn't do anything? And who would create dozens of them? </p>
<p> One of the more common patterns for creating a window timer is to write <code>SetTimer(hwnd, idTimer, dwTimeout, NULL)</code>. This creates a window timer whose identifier is <code>idTimer</code>. Since the timer procedure is <code>NULL</code>, the <code>WM_TIMER</code> message is dispatched to the window procedure, which in turn will have a <code>case WM_TIMER</code> statement followed by a  <code>switch (wParam)</code> to handle the timer message. </p>
<p> But what if <code>hwnd</code> is <code>NULL</code>, say because you forgot to check the return value of a function like <code>CreateWindow</code>? Well, then you just created a thread timer by mistake. And if you make this mistake several times in a row, you've just created several thread timers. Now you might think that the code that created the thread timer by mistake will also destroy the thread timer by mistake when it finally gets around to calling <code>KillTimer(hwnd, idTimer)</code> and passes <code>NULL</code> for the <code>hwnd</code>. But it doesn't. </p>
<p> One reason is that in many cases, it's the timer that turns itself off. In other words, the <code>KillTimer</code> happens inside the <code>WM_TIMER</code> message handler. But if the <code>WM_TIMER</code> message  isn't associated with that window, then that window procedure never gets a chance to turn off the timer. </p>
<p> Another reason is more insidious. Recall that the <code>idTimer</code> parameter to the <code>SetTimer</code> function is ignored when you create a thread timer. Since you can't predict what other thread timers may exist, you can't know which timer identifiers are in use and which are free. Instead, the <code>SetTimer</code> function creates a unique thread timer identifier and returns it, and it is that timer identifier you must use when destroying the thread timer. Of course, the code that accidentally created the thread timer thought it was creating a window timer (which uses the timer identifier you specify), so it didn't bother saving the return value. Result: Thread timer is created and becomes orphaned. </p>
<p> The machine I was asked to look at was running a stress scenario, so it was entirely likely that a low memory condition caused a function like <code>CreateWindow</code> to fail, and the program most likely neglected to check the return value. I never did hear back to find out if that indeed was the source of the problem, but seeing as they didn't come back for more help, I suspect I put them on the right track. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-675653">
				<div id="div-comment-675653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081016-00/?p=20543#comment-675653">
			October 16, 2008 at 2:16 pm</a>		</div>

		<p>Stress scenarios.. Yuk.</p>
<p>Driver Verifier had such tools, IIRC, in the win2k ddk.. Problem is, while it&#8217;s always good to do, you can quickly triple or more your coding to test for failures of functions that should always work.</p>
<p>Of course, when you&#8217;re the OS, you don&#8217;t have that nice assumption of, &quot;if this function fails, we have bigger problems&quot; (almost an exact quote I&#8217;ve seen in a comment in code..)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-675683">
				<div id="div-comment-675683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081016-00/?p=20543#comment-675683">
			October 16, 2008 at 6:26 pm</a>		</div>

		<p>I guess they didn&#8217;t expect CreateWindow() to fail :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-675713">
				<div id="div-comment-675713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">barrkel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081016-00/?p=20543#comment-675713">
			October 16, 2008 at 8:17 pm</a>		</div>

		<p>And this is one reason why exceptions are better than error codes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-675723">
				<div id="div-comment-675723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Reginald Wellington III</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081016-00/?p=20543#comment-675723">
			October 16, 2008 at 8:26 pm</a>		</div>

		<p>People write empty catch(&#8230;) blocks just as often as they don&#8217;t check error codes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-675733">
				<div id="div-comment-675733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Siebe Tolsma</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081016-00/?p=20543#comment-675733">
			October 16, 2008 at 9:21 pm</a>		</div>

		<p>@Reginald: Perhaps, but it is much easier to spot empty catch blocks than error codes which aren&#8217;t being handled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-675743">
				<div id="div-comment-675743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081016-00/?p=20543#comment-675743">
			October 17, 2008 at 2:21 am</a>		</div>

		<p>Is using SetTimer() to create a thread timer better than using WaitForSingleObject() with timeout (waiting on an event which kills the timer) in a loop?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-675753">
				<div id="div-comment-675753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081016-00/?p=20543#comment-675753">
			October 17, 2008 at 2:42 am</a>		</div>

		<p>John: Um, yes?</p>
<p>I don&#8217;t see under what circumstance you&#8217;d expect the answer to be &quot;no&quot;&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-675763">
				<div id="div-comment-675763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081016-00/?p=20543#comment-675763">
			October 17, 2008 at 3:31 am</a>		</div>

		<p>@Dean: depends on the app.</p>
<p>If the thread is handling messages, then WM_TIMER is great. But if the thread isn&#8217;t handling messages, the Wait* functions are better. (Perhaps it&#8217;s a thread that does some background work and responds to signals and events &#8211; a server thread, perhaps).</p>
<p>@Siebe: The programmers who do empty catch blocks also often use the design pattern &quot;exception flow&quot;, where try-catch is used as normal flow control constructs.</p>
<p>e.g.</p>
<p>try</p>
<p>{</p>
<p>&nbsp;int count = 10;</p>
<p>&nbsp;int dummy;</p>
<p>&nbsp;int result;</p>
<p>&nbsp;while(1)</p>
<p>&nbsp;{</p>
<p>&nbsp; &nbsp;count&#8211;;</p>
<p>&nbsp; &nbsp;// do stuff</p>
<p>&nbsp; &nbsp;dummy = 1 / count; // abort when done</p>
<p>&nbsp;}</p>
<p>}</p>
<p>catch (&#8230;)</p>
<p>{</p>
<p>&nbsp; &nbsp;// do more stuff on last iteration</p>
<p>}</p>
<p>// continue with rest of code</p>
<p>This is somewhat contrived, but there are plenty of examples of using try-catch as a program-flow-control structure at the dailywtf.com&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-675793">
				<div id="div-comment-675793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081016-00/?p=20543#comment-675793">
			October 17, 2008 at 5:32 am</a>		</div>

		<p>Worf: but that was kind of my point, you would use WaitForSingleObject when SetTimer was not appropriate. But if SetTimer is appropriate, you wouldn&#8217;t use WaitForSingleObject&#8230;</p>
<p>It&#8217;s like asking &quot;should I use a tennis racket to play tennis, or a baseball bat to play baseball?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-675803">
				<div id="div-comment-675803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AndyB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081016-00/?p=20543#comment-675803">
			October 17, 2008 at 8:23 am</a>		</div>

		<blockquote><p>
  plenty of examples of using try-catch as a program-flow-control
</p></blockquote>
<p>yes, the EndOfStreamException and EndOfFile Exceptions to name just two.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-675893">
				<div id="div-comment-675893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081016-00/?p=20543#comment-675893">
			October 17, 2008 at 10:58 pm</a>		</div>

		<p>Dean: You may want to read between the lines, where the question is: I want to create a worker thread that does some work once per second. Is SetTimer more appropriate than WaitForSingleObject, and if so, why?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-675913">
				<div id="div-comment-675913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081016-00/?p=20543#comment-675913">
			October 18, 2008 at 3:39 am</a>		</div>

		<p>@Andy: Perhaps I wasn&#8217;t being explicit enough &#8211; my example was common &#8211; you deliberately throw an exception (either using throw, or cause one (divide by zero, null pointer) to break from the loop.</p>
<p>There are catch blocks that test the exception for deliberate loop-breaking throws and other exceptions they could catch (which they then re-throw).</p>
<p>The exception isn&#8217;t, basically (despite the fact that exception handling is extremely expensive compared with the proper way).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

