<html>
<head>
<title>Just change that 15 to a 1</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Just change that 15 to a 1</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 5, 2006 / year-entry #301</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>51</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It would be nice and easy to just change that 15 to a 1. If only it were that simple. In the case described in that article, it's not that a single operation was attempted fifteen times in a loop. Rather, the fifteen operations were scattered all over the program. Suppose, for example, that the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/11/07/489807.aspx#489918">
It would be nice and easy to just change that 15 to a 1</a>.
</p>
<p>
If only it were that simple.
</p>
<p>
In the case described in that article, it's not that a single
operation was attempted fifteen times in a loop.
Rather, the fifteen operations were scattered all over the program.
Suppose, for example, that the network operation was
"Get the attributes of this file."
The program might be filling in a file listing with several
columns, one for the icon, another for the file name,
another for the file author, and the last one for the last-modified time.
</p>
<pre>
for each filename in directory {
 list.Add(new ListElement(filename));
}
</pre>
<p>
Well, that doesn't access the same file fifteen times.
Oh wait, there's more.
What happens when it comes time to draw that list element?
</p>
<pre>
ListElement::DrawIcon()
{
 if (m_whichIcon == don't know)
 {
  m_whichIcon = GetIcon(m_filename);
 }
 draw the icon for the element
}

// with this common helper function
GetIcon(filename)
{
 if (filename is a directory) {
  return FolderIcon;
 } else {
  return PieceOfPaper;
 }
}
</pre>
<p>
Okay, getting the icon accesses the file once.
You can imagine a similar exercise for getting the file's
last-modified time.
What else?
</p>
<pre>
ListElement::GetAuthor()
{
 if (m_author == don't know) {
  AuthorProvider = LoadAuthorProvider();
  m_author = AuthorProvider-&gt;GetFileAuthor(m_filename);
 }
 return m_author;
}

// where the author provider is implemented in a
// separate component
GetFileAuthor(filename)
{
 if (filename is offline) {
  return "";
 } else {
  ... open the file and get the author ...
 }
}
</pre>
<p>
Getting the author accesses the file once to see if it
is offline, then again to get the actual author (if the
file is online).
</p>
<p>
So in this simple sketch, we accessed the file a total
of five times.
It's not like there's a 5 in this program you can change to a 1.
Rather, it's a bunch of 1's spread all over the place.
(And one of the 1's is in a separate component,
the hypothetical Author Provider.)
</p>
<p>
It reminds of a story I may have read in
John Gall's
<i><a HREF="http://www.generalsystemantics.com/Systemantics.htm">Systemantics</a></i>:
There was a server product that was
having problems under load.
Once there were more than thirty simultaneous users,
the system slowed to a crawl,
but the customer needed to support fifty users.
At a meeting convened to discuss this problem,
an engineer joked,
"Well, we just have to search the source code for
the <code>#define</code> that says thirty and change it to fifty."
</p>
<p>
All the people at the meeting laughed, except one,
who earnestly asked, "Yeah, so why don't we do that?"</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (51)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-416593">
				<div id="div-comment-416593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416593">
			September 5, 2006 at 10:09 am</a>		</div>

		<p>Oh, the memories.</p>
<p>I&#8217;ve had to fix code like this before. &nbsp;The sad part is, the same developer made the exact same mistakes on the next version of the program. &nbsp;When will people learn that just because it is easy to code something, it doesn&#8217;t mean that executing that code won&#8217;t be expensive. &nbsp;</p>
<p>I doubt the developer in the article even worried about performance. &nbsp;Preoptimization might be bad, but uniformly slow software due to no consideration for performance has cost the company I work for a large amount of money.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-416603">
				<div id="div-comment-416603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416603">
			September 5, 2006 at 11:24 am</a>		</div>

		<p>I recently had a problem where any ShellExecute wouldn&#8217;t return for over a half-hour. Since the taskbar clock didn&#8217;t change, I got used to seeing the one particular time, so when it eventually changed I immediately noticed and computed the difference.</p>
<p>The difference was 34 minutes. I could imagine a timeout of 30 minutes somewhere, or maybe even 32 (power of 2). But 34? Then I realized that 2048 is just 8 seconds more than 34 minutes.</p>
<p>Of course nobody (hopefully) is stupid enough to put in a 2048 second timeout somewhere. Unfortunately it&#8217;s quite likely that there&#8217;s a 16 second timeout, which is retried 7 more times, and when that function fails is retried 3 more times, and when that function fails is retried 3 more times.</p>
<p>Eventually I found the one app that wasn&#8217;t responding to messages and was causing the whole system to not work. Killing that app made ShellExecutes complete immediately and allowed the system to go to sleep.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-416623">
				<div id="div-comment-416623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416623">
			September 5, 2006 at 12:13 pm</a>		</div>

		<p>That great story you&#8217;re remembering about going into the code and increasing the &quot;thrashing limit&quot; comes from none other than Douglas Hofstadter. &nbsp;I think it was in one of this Scientific American columns in the early &#8217;80s. &nbsp;It&#8217;s a good example of what evolutionary biology calls a &quot;spandrel,&quot; an accidentally emergent phenomenon.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-416633">
				<div id="div-comment-416633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dominicself.co.uk' rel='external nofollow' class='url'>Dominic Self</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416633">
			September 5, 2006 at 2:22 pm</a>		</div>

		<p>I wouldn&#8217;t comment elsewhere but I know you&#8217;re a language geek and I&#8217;m a pedant and also reading blogs to avoid doing any homework, so:</p>
<p>&quot;Rather, it&#8217;s a bunch of 1&#8217;s spread all over the place.&quot;</p>
<p>That apostrophe&#8230; burns&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-416643">
				<div id="div-comment-416643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Jones</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416643">
			September 5, 2006 at 2:23 pm</a>		</div>

		<p>It would be nice if the programmer could write the program in a logical and the OS should help him/her out. &nbsp;If a file is accessed a few times it should be cached by the OS so it should be the same thing as the programmer only accessing it once. &nbsp;Maybe this isn&#8217;t the way with Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-416653">
				<div id="div-comment-416653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephen Jones</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416653">
			September 5, 2006 at 2:44 pm</a>		</div>

		<p>&#8212;-&quot;Rather, it&#8217;s a bunch of 1&#8217;s spread all over the place.&quot;</p>
<p>That apostrophe&#8230; burns&#8230;&quot;&#8212;</p>
<p>Actually, it&#8217;s more a question of changing fashions. Forty years ago it would have been quite common but now the only time the apostrophe is recemmended for use in plurals is after individual letters, and possibly words such as &quot;if&#8217;s and but&#8217;s&quot;. The use of the apostrophe after numerals &#8212; 1&#8217;s and 2&#8217;s &#8211;, &nbsp; decades &#8212; the 1990&#8217;s, and initialism &#8212; TV&#8217;s, CD&#8217;s&#8211; is now deprecated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-416663">
				<div id="div-comment-416663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dominicself.co.uk' rel='external nofollow' class='url'>Dominic Self</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416663">
			September 5, 2006 at 4:15 pm</a>		</div>

		<p>I&#8217;d argue it may have been fashionable, but simply grammatically incorrect :P </p>
<p>&#8216;1&#8217;s status as a number is assured&#8217; is fine, as is &#8216;1&#8217;s a most excellent digit&#8217; &#8211; either as possessive or substitutive. To use it in plurals is just&#8230; a mistake? </p>
<p>See &#8211; <a href="http://en.wikipedia.org/wiki/Grocer%27s_apostrophe#Greengrocers.27_apostrophes" target=_new rel=nofollow rel="nofollow">http://en.wikipedia.org/wiki/Grocer%27s_apostrophe#Greengrocers.27_apostrophes</a></p>
<div CLASS=post>[<i>Call me old-fashioned, but I grew up with such quaint rules as &#8220;spell out numbers less than 100&#8221; and &#8220;to form the plural of numbers, add an apostrophe and s&#8221; (which is I believe still the recommendation of the MLA though I haven&#8217;t checked recently.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-416673">
				<div id="div-comment-416673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mailto:Nekto2@gmail.com' rel='external nofollow' class='url'>Nekto2</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416673">
			September 5, 2006 at 4:34 pm</a>		</div>

		<p>That&#8217;s pity that none of programming languages has paradigm like:</p>
<p>time=GetExecTimeEsctimate(func(param));<br />
<br />if(time &lt; reasonable)<br />
<br /> &nbsp; &nbsp;func(param);</p>
<p>or better it whould be<br />
<br /> time=func(param,GET_EXEC_TIME);<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-416683">
				<div id="div-comment-416683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew Feldstein</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416683">
			September 5, 2006 at 4:37 pm</a>		</div>

		<p>Nekto2, um, er, can you say halting problem?</p>
<p>In other words, how do you implement GetExecTimeEstimate without actually executing func?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-416693">
				<div id="div-comment-416693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">db48x</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416693">
			September 5, 2006 at 5:31 pm</a>		</div>

		<p>Andrew: it&#8217;s still a pity we can&#8217;t do that though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-416703">
				<div id="div-comment-416703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Day</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416703">
			September 5, 2006 at 5:52 pm</a>		</div>

		<p>That #define is amusing. At work we have a case where the solution is to dramatically decrease the define to improve performance. Too much mutex contention because of overly broad protected data areas. Finer-grained protected areas look likely to fix the problem. The joys you a can have with code that makes safe assumptions for Pentium IIIs and RAM maximums from that era when it&#8217;s run on 4 or 8 modern cores with tens of gigabytes to protect.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-416713">
				<div id="div-comment-416713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416713">
			September 5, 2006 at 6:33 pm</a>		</div>

		<p>Mike&#8217;s right &#8211; the first call to the file should load up its metadata, and the next one (within reasonable timeouts) should just hit the cache. I admit that I&#8217;m inured to windows&#8217; weirdness and initially considered writing a File object cache in my app. At least I can be sure that will behave consistently.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-416723">
				<div id="div-comment-416723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416723">
			September 5, 2006 at 6:40 pm</a>		</div>

		<p>It&#8217;s not grammatically incorrect, it&#8217;s orthographically incorrect. &nbsp;We&#8217;re talking about a writing convention here, which has nothing to do with the grammar of English (which doesn&#8217;t concern itself with punctuation).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-416743">
				<div id="div-comment-416743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416743">
			September 5, 2006 at 6:54 pm</a>		</div>

		<p>Even if the local computer utilized the cache, what if the file was on the network. &nbsp;You would still have to spend the time to talk over the network just to get the other values from the networked computer&#8217;s cache.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-416753">
				<div id="div-comment-416753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">djimi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416753">
			September 5, 2006 at 7:30 pm</a>		</div>

		<p>&#8212; That apostrophe&#8230; burns&#8230; &#8212;</p>
<p>If that apostrophe burns, your skin must be melting because you ended a sentence with an ellipsis but without a period. Check it out:<br />
<br /> <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Ellipsis#Ellipsis_in_English" rel="nofollow">http://en.wikipedia.org/wiki/Ellipsis#Ellipsis_in_English</a></p>
<p>If you don&#8217;t believe me, read any of the opening crawls of the Star Wars movies&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-416773">
				<div id="div-comment-416773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dustin Long</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416773">
			September 5, 2006 at 11:30 pm</a>		</div>

		<p>The Hofstadter story is also from Chapter 10 of GEB.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-416793">
				<div id="div-comment-416793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dominicself.co.uk' rel='external nofollow' class='url'>Dominic Self</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416793">
			September 6, 2006 at 2:48 am</a>		</div>

		<p>djimi, I think it&#8217;s impolite to criticise without leaving at least one appropriate mistake of your own. Seems like a writing convention of the Internet anyway! ;-) Thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-416803">
				<div id="div-comment-416803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mailto:Nekto2@gmail.com' rel='external nofollow' class='url'>Nekto2</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416803">
			September 6, 2006 at 4:44 am</a>		</div>

		<p>Andrew Feldstein: there are some cases when you do. OS knows is the files resides on HDD, network or mem-fs. Also is has info about last access to whole network resource or even if network cable was plugged-out &#8211; you could ask of estimate access to any file on that resource and that would be the same. And the language and libs just made specially that way to hide this information from you.<br />
<br /> Imho <a rel="nofollow" target="_new" href="http://joelonsoftware.com/articles/LeakyAbstractions.html" rel="nofollow">http://joelonsoftware.com/articles/LeakyAbstractions.html</a> describes it.<br />
<br /> There should be some access to that info &#8211; you can&#8217;t time-optimize timeouts when you have no info to base optimization decisions on.</p>
<p>ps. Ok that function could return &#8211; &quot;Estimate time is uknown&quot; ;)<br />
<br />pps. Actually it should be:<br />
<br />GetTimeEstimate(&#8230;);<br />
<br />TestTimeEstimate(&#8230;);<br />
<br />And try to implemet those so GetTimeEstimate(TestTimeEstimate(&#8230;)); will always return a value ;)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-416813">
				<div id="div-comment-416813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416813">
			September 6, 2006 at 5:39 am</a>		</div>

		<blockquote><p>
  At a meeting convened to discuss this<br />
  <br />&gt; problem, an engineer joked, &quot;Well, we just<br />
  <br />&gt; have to search the source code for the<br />
  <br />&gt; #define that says thirty and change it to<br />
  <br />&gt; fifty.&quot;<br />
  <br />&gt;<br />
  <br />&gt; All the people at the meeting laughed,<br />
  <br />&gt; except one, who earnestly asked, &quot;Yeah, so<br />
  <br />&gt; why don&#8217;t we do that?&quot;</p>
<p>What kind of meeting was this? &nbsp;With just one manager in attendance?<br />
  <br /> &nbsp;<br />
  <br />Tuesday, September 05, 2006 4:37 PM by Andrew Feldstein<br />
  <br />&gt; Nekto2, um, er, can you say halting problem?<br />
  <br />&gt; In other words, how do you implement<br />
  <br />&gt; GetExecTimeEstimate without actually<br />
  <br />&gt; executing func?</p>
<p>Mr. Feldstein, if you can say halting problem, then you know that the implementation or non-implementation of GetExecTimeEstimate does have to be without actually executing func. &nbsp;If you perform a limited analysis only considering hypothetical cases which execute func, then you don&#8217;t prove that GetExecTimeEstimate reduces to the halting problem.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-416833">
				<div id="div-comment-416833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416833">
			September 6, 2006 at 5:45 am</a>		</div>

		<p>I just found out the Winzip&#8217;s shell Context menu extension does just that &#8211; it calls GetFileAttributes() several times, presumably once for each menu item. Over a slow share, it takes several seconds, during which Explorer&#8217;s window is frozen.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-416843">
				<div id="div-comment-416843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416843">
			September 6, 2006 at 5:46 am</a>		</div>

		<p>Mike, please RTFA. This is a timeout on a network file we&#8217;re talking about &#8211; on a distributed network that tried a bit too hard to hide transient failures. The operation never succeeds, the information never gets a chance to be cached. The operation fails N times, each because of a timeout (if the connection was dropped, every attempt tries to reconnect and has to time out)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-416863">
				<div id="div-comment-416863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416863">
			September 6, 2006 at 6:12 am</a>		</div>

		<p>In such a situation, the application should have a cache of everything, and a reasonable expiration policy. For example, in an Explorer-like application, the cache would expire when the user hits F5. </p>
<p>The application is also responsible for not doing slow operations unless explicitly asked. It is common knowledge that it is a bad idea to access shell namespace items with SFGAO_ISSLOW attribute; similarly, Explorer and other file management applications should not attempt to extract icons from .exe and other such files when the files are accessed over the network. (Especially because there might be a vulnerability in the icon extraction code, in which case it becomes remotely exploitable.) I’m not even talking of image and video preview over the network.</p>
<div class=post>[<i>&#8220;A cache of everything&#8221;? How much of &#8220;everything&#8221; is &#8220;everything&#8221;? Remember that Explorer is a combination of multiple components, many of which aren&#8217;t written by Microsoft (e.g. that WinZip context menu extension mentioned above). If a context menu extension reads the file, should it also talk to the &#8220;everything cache&#8221; and say &#8220;Hey, please cache these 500 bytes I read from the file&#8221;? Building a thumbnail reads the entire file. Should the entire file go into the &#8220;everything cache&#8221;? Note also that blocking icon extraction over the network will result in some corporate networks never extracting icons! (They keep everything on the network.) A Start menu with no icons looks kind of, well, lame. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-416873">
				<div id="div-comment-416873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephen Jones</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416873">
			September 6, 2006 at 6:53 am</a>		</div>

		<p>&#8212;-&quot;djimi, I think it&#8217;s impolite to criticise without leaving at least one appropriate mistake of your own. Seems like a writing convention of the Internet anyway! ;-&quot;&#8212;-</p>
<p>The principle is known as Hartman&#8217;s Law of Prescriptive Retaliation which states that &quot;any article or statement about correct grammar, punctuation, or spelling is bound to contain at least one eror&quot;. </p>
<p>The point you fail to understand about the apostrophe being used in the three cases where it is now deprecated, is that it was the orthographic convention some forty or fifty years ago and change has come about gradually</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-416883">
				<div id="div-comment-416883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dominicself.co.uk' rel='external nofollow' class='url'>Dominic Self</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416883">
			September 6, 2006 at 7:16 am</a>		</div>

		<p>&#8212;- &quot;The point you fail to understand about the apostrophe being used in the three cases where it is now deprecated, is that it was the orthographic convention some forty or fifty years ago and change has come about gradually&quot; &#8212;-</p>
<p>Which I&#8217;ve now discovered thanks to this discussion I hijacked slightly :-) (Sorry about that btw.) It&#8217;s interesting because I can certainly see the use for making the plurals of lowercase letters, although I&#8217;d be tempted to write &#8216;a&#8217;s, however silly that might look. I can&#8217;t not cringe at the sign outside the nearest Internet caf&#233; boasting of 50 PC&#8217;s though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-416893">
				<div id="div-comment-416893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TCLIU</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416893">
			September 6, 2006 at 8:02 am</a>		</div>

		<p>Norman Diamond, Nekto2: Estimating the runtime of a function based on analysis of its code is possible, but brutally difficult. Doing it based on already compiled code is even harder. Besides OS scheduling problems, the estimator may have to figure out the complexity of the operations the function performs and how those relate to the input parameters. </p>
<div class="post">[<i>Consider this function:</p>
<p>void f()<br />
{<br />
&nbsp;if (GetTimeEstimate(f()) != INFINITE) Sleep(INFINITE);<br />
}</p>
<p>What is the value of GetTimeEstimate(f())? How about this function:</p>
<p>void g()<br />
{<br />
&nbsp;Sleep(getch() * 1000);<br />
}</p>
<p>What is GetTimeEstimate(g())? -Raymond</i>]</div>
<p>For example: Computing the Fibonacci sequence recursively vs. iteratively vs. recursively with memoization. One is exponential and the other two are linear in complexity.</p>
<p>What I would try for instead would be to use the thread context to set a timeout and then have a function that can test if a timeout has been exceeded:</p>
<p>Calling code:<br />
<br />// The thread has 3 seconds to reach the<br />
<br />// ClearThreadTimeout line from here.<br />
<br />SetThreadTimeout (3000); </p>
<p>LengthyOp ();</p>
<p>ClearThreadTimeout ();</p>
<p>Called code:<br />
<br />void LengthyOp ()<br />
<br />{<br />
<br /> &nbsp; &nbsp;while (!ThreadTimeoutExceeded()) {<br />
<br /> &nbsp; &nbsp; &nbsp; &nbsp;DoAQuickOperation ();<br />
<br /> &nbsp; &nbsp;}<br />
<br />}</p>
<p>The above does not account for functions that ignore the timeout, nor does it account for exceptions thrown, OS scheduling and lots of other things. But it would provide a way to delineate a region of code and allow the passing of a &#8220;deadline&#8221; up the call stack without making the deadline an explicit parameter. And I think that while this isn&#8217;t a total and absolute solution, it would allow for some rudimentary real-time control.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-416903">
				<div id="div-comment-416903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">required</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-416903">
			September 6, 2006 at 8:33 am</a>		</div>

		<blockquote><p>
  I grew up with such quaint rules as &#8220;spell out numbers less than 100&#8221; </p>
<p>Like in &#8220;change that 15 to a 1&#8221;, you mean?</p>
<div CLASS=post>[<i>That was intentional, because the hypothetical line of code doesn&#8217;t say <code>#define LIMIT fifteen</code>. Would you be happier if I had written &#8220;Change that &#8217;15&#8217; to a &#8216;1&#8217;&#8221;? -Raymond</i>]</div>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-417013">
				<div id="div-comment-417013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417013">
			September 6, 2006 at 11:33 am</a>		</div>

		<p>2Raymond </p>
<p>&gt; If a context menu extension reads the file, should it <br />&gt; also talk to the &#8220;everything cache&#8221; and say &#8220;Hey, <br />&gt; please cache these 500 bytes I read from the file&#8221;? </p>
<p>If getting file attributes is so expensive that we are talking of a cache, reading the file is out of the question. </p>
<p>&gt; Building a thumbnail reads the entire file. Should <br />&gt; the entire file go into the &#8220;everything cache&#8221;? </p>
<p>First of all, if reading the file is expensive, we shouldn’t be doing it without user’s request. Second, if the user requests and we get to read the file, yes, we should hold onto it for as long as plausible, at least until the user leaves the directory. Because when (s)he sees the thumbnail, (s)he may want the entire image, and it would be rude to lose it and have to redownload it. (It would also be rude to download all the 1000 4-megapixel photos in the directory and fill up the whole memory and %temp%.) </p>
<p>&gt; Note also that blocking icon extraction over the <br />&gt; network will result in some corporate networks <br />&gt; never extracting icons! (They keep everything on <br />&gt; the network.) A Start menu with no icons looks <br />&gt; kind of, well, lame. </p>
<p>Then it should be a matter of policy. A registry setting of a list of file path prefixes on which to disable implicit file access would be just fine. (Extracting icons from a floppy isn’t very exciting, either.) If the domain administrator considers the local network capable of handling the extra load, he does not include &#8216;\&#8217; in this list by default.</p>
<div CLASS=post>[<i>You&#8217;re the one who proposed a cache, not me. Are you saying that if the user asks for a thumbnail of a 2MB image on the network, we should cache the entire file in memory? Yet you also say it&#8217;s rude to fill memory with these cached files. I&#8217;m confused. You&#8217;re simultaneously saying that cache is preferred and also discouraged&#8230; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-417083">
				<div id="div-comment-417083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417083">
			September 6, 2006 at 1:46 pm</a>		</div>

		<p>Spake Raymond&gt; &#8220;A cache of everything&#8221;? How much of &#8220;everything&#8221; is &#8220;everything&#8221;? Remember that Explorer is a combination of multiple components, many of which aren&#8217;t written by Microsoft </p>
<p>Spake Raymond&gt; You&#8217;re the one who proposed a cache, not me. Are you saying that if the user asks for a thumbnail of a 2MB image on the network, we should cache the entire file in memory? Yet you also say it&#8217;s rude to fill memory with these cached files. I&#8217;m confused. You&#8217;re simultaneously saying that cache is preferred and also discouraged. </p>
<p>What they (and I) and I are advocating is commonly known as a buffer cache, it would appear. This lives in the kernel and uses whatever memory isn&#8217;t used for some other thing. That means that you do cache the whole 2M image if you can find space. If you care to argue about caching policy, take a look at the discussions centered around buffer caches, as the arguments you&#8217;re making have already been discussed for the most part.</p>
<div CLASS=post>[<i>Oh, you&#8217;re just talking about file system cacheing. I thought you wanted an application-level cache. Note that for cache coherency reasons, network files cannot be cached once the handle is closed. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-417133">
				<div id="div-comment-417133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417133">
			September 6, 2006 at 4:15 pm</a>		</div>

		<p>I was talking about an application-level cache for things that are reasonable to cache, like file names, attributes and WIN32_FIND_DATA. For file content, I argue for gracefully degrading Explorer functionality when the file in question is not local — by disabling all implicit behavior that requires opening the remote file.</p>
<p>There already is a mode like this in Internet Explorer, when you uncheck “Show pictures” in Internet Options | Advanced | Multimedia. The user gets placeholders in place of images, but can request that an image be retrieved by right-clicking and selecting “Show image”. The image is then cached on the local disk, until it expires, is explicitly redownloaded, or is replaced by other cached files.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-417143">
				<div id="div-comment-417143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417143">
			September 6, 2006 at 4:16 pm</a>		</div>

		<p>I would prefer an fs level cache, but since I don&#8217;t have that sort of sway with MS, I&#8217;ll settle for caching File data at the app level.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-417193">
				<div id="div-comment-417193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417193">
			September 6, 2006 at 5:27 pm</a>		</div>

		<p>I the case the original article is referring to, my post was about eliminating automatic retries. The problem isn&#8217;t with a slow network; the problem is that programs know networks are unreliable and therefore automatically retry operations N times.</p>
<p>Although it wasn&#8217;t clear originally, this slow (because it&#8217;s retried 50 times) operation isn&#8217;t retried 15 times, it&#8217;s the same operation done in 15 places. A cache wouldn&#8217;t actually help for this, though, because there&#8217;s no data to cache. If there was data to cache, the network operation would return immediately and we wouldn&#8217;t be complaining about automatic retries.</p>
<p>All you could do at this point is cache the failure, which means that the other 14 operations will immediately fail. The problem then is how long do you cache the fact that you couldn&#8217;t access that network resource?</p>
<p>DNS has this same problem. A DNS query which resolved successfully will be cached and will return quickly for some time in the future. A query which fails to resolve has nothing to cache, and you have to wait for it to timeout every single time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-417273">
				<div id="div-comment-417273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417273">
			September 6, 2006 at 9:51 pm</a>		</div>

		<blockquote><p>
  I would prefer an fs level cache, but since I don&#8217;t have that sort<br />
  <br />&gt; of sway with MS, I&#8217;ll settle for caching File data at the app level.</p>
<p>There already is a file system cache. Your computer would be unusable without it. However, for a general-purpose file system cache, you can&#8217;t cache data from the network longer than the file handle is open for anyway, because the system has no way to know when the file&#8217;s data changed otherwise (meaning it won&#8217;t be able to keep the cache coherent).</p>
<p>Now, an application-level cache might be able to say &quot;I don&#8217;t care if the data has changed on the server since the last time I accessed this file&quot; (which it most certainly WOULD say if you&#8217;re getting various attributes over-and-over while populating the explorer view or a popup menu.</p>
<p>The problem with an application-level cache is that you need it to work across multiple components, most of which are NOT controlled by Microsoft. Because it&#8217;s application-level, that means you need to put some hooks for those components to call instead of the regular system APIs, and then you can&#8217;t force the component developers not to use the system APIs anyway.<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-417303">
				<div id="div-comment-417303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417303">
			September 6, 2006 at 11:44 pm</a>		</div>

		<p>Wednesday, September 06, 2006 8:02 AM by TCLIU</p>
<p>&gt; Norman Diamond, Nekto2: Estimating the<br />
<br />&gt; runtime of a function based on analysis of<br />
<br />&gt; its code is possible, but brutally difficult.</p>
<p>In order to prove that a problem reduces to the halting problem, it doesn&#8217;t matter how brutally difficult some hypothetical tool might be. &nbsp;You still have to prove that all such hypothetical tools leave the problem unanswered.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-417383">
				<div id="div-comment-417383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417383">
			September 7, 2006 at 6:02 am</a>		</div>

		<blockquote><p>
  You still have to prove that all such hypothetical tools leave the problem unanswered.</p>
<p>The halting problem is not always unanswerable. It&#8217;s only certain programs for which you can&#8217;t answer it.</p>
<p>GetExecTimeEstimate is probably not in exactly the same class, because you only need an &quot;estimate&quot; (e.g. &quot;short&quot;, &quot;medium&quot; and &quot;long&quot; are probably good enough answers in this case) but the cost of implmenting it (certainly in the general case) is probably far outweight by it&#8217;s actual usefulness.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-417393">
				<div id="div-comment-417393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417393">
			September 7, 2006 at 6:05 am</a>		</div>

		<blockquote><p>
  cost of implmenting it is probably far outweight [sic] by it&#8217;s actual usefulness.</p>
<p>Oops, I meant the other way around&#8230;
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-417463">
				<div id="div-comment-417463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mailto:Nekto2@gmail.com' rel='external nofollow' class='url'>Nekto2</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417463">
			September 7, 2006 at 9:55 am</a>		</div>

		<blockquote><p>
  Norman Diamond, Nekto2: Estimating the<br />
  <br />&gt; runtime of a function based on analysis of<br />
  <br />&gt; its code is possible, but brutally difficult.</p>
<p>Ops.. I have not propose to implemennt universal function which could measure the time of any function execution. :) (Still some solution whould be to gather statistics &#8211; profiling, but that is not universal solution either).</p>
<p>I just propose to implement special function which will help in case of measuring some set of operations. The main is &#8211; file handling operations. Even is shoud return 3 values &#8211; fist is minimum time it could take for the given parameters (say for file on network N: drive which is not in cache it never could be less then 1ms), second &#8211; maximum time (which includes firing all the timeouts there and the third is most likely time. &nbsp;This values could not be calculated from code or any utomatic way . I should be calculated manually. Still this time may be inaccurate. The reason is to know is it 1ms or 30minutes :)</p>
<p> Yet another solution (do not know is it possible) to create independent threads for operations which could hang or slow and update info on screen every 100ms with new data avaliable from all those threads. This should be used for calling extensions.</p>
<p> The fist solutions will help developer to rewrite software to be aware of possible problems, the second will deal with software which are not so nice to implemet that awareness ;)</p>
<p>ps. The icons in start menu is drawn that way AFAIK. On slow computers you see default icons the fist time you open it and then those redrawnd with custom icons.</p>
<div CLASS=post>[<i>The &#8220;maximum time&#8221; will nearly always be approximately <code>INFINITE</code>. You read from a file but, oops, a hard I/O error occurred and the kernel prompts the user to remove the CD, clean it, and reinsert it. The &#8220;do everything on a background thread&#8221; theory creates compatibility problems for extensions that assume they&#8217;re running on the main thread. -Raymond</i>]</div>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-417613">
				<div id="div-comment-417613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mailto:Nekto2@gmail.com' rel='external nofollow' class='url'>Nekto2</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417613">
			September 7, 2006 at 11:25 am</a>		</div>

		<blockquote><p>
  The &#8220;maximum time&#8221; will nearly always be approximately INFINITE. </p>
<p>It for general case. But the reason for this all is &#8211; OS knows more then app should. It knows that there are CD and network and HDDs. And it knows of the HW state &#8211; is a cable pluged out or is a CD in drive. So if you call the: <br />struct {long min, max, expected;} est; <br />est=fopen_estimate(&#8220;d:fldfile&#8221;,&#8221;r&#8221;); </p>
<p>You could get the INFINIT for CD and some reasonable 2 minutes for HDD (response or error will be returned before 2min). And still the program will be correct in the future if some new device or feature (say &#8211; &#8220;ask user if he allows the program to open the file on HDD in his home dir&#8221;) will be created. <br />At now you could detect type of storage (cd/hdd/net), but you have no idea about future possible types there would be. Still the only thing you need to know is the one &#8211; could you access it freely to please a user with nice icons or better not to try because timeouts could made him angry. :) <br />Or should you try to use N: for temp files if the minimum response time for file operations is 5 second (some webdav disk with VPN access on opposit side of Earth). MSWord tends to create temp file at the same location as original file is. </p>
<p>&gt; compatibility problems for extensions <br />I know that is the reason, but for popular apps such as &#8220;WinZIP&#8221; every time new OS is out the new version of app is out also ;) Why not to allow them implement better interface. </p>
<div CLASS=post>[<i>Even for hard drives, the worst case is INFINITE. In the time between you call GetTimeEstimate and you actually access the file, the file is archived to tape. When you access the file, a message appears in the data center asking for the tape to be mounted. This can take a long time if the data center is closed for the holidays. Or the hard drive might encounter a bad sector and hang. -Raymond</i>]</div>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-417683">
				<div id="div-comment-417683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mailto:Nekto2@gmail.com' rel='external nofollow' class='url'>Nekto2</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417683">
			September 7, 2006 at 1:00 pm</a>		</div>

		<p>:)))<br />
<br />Thanks for clarification and nice example.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-417723">
				<div id="div-comment-417723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417723">
			September 7, 2006 at 1:55 pm</a>		</div>

		<p>Norman Diamond&gt; However, for a general-purpose file system cache, you can&#8217;t cache data from the network longer than the file handle is open for anyway, because the system has no way to know when the file&#8217;s data changed otherwise (meaning it won&#8217;t be able to keep the cache coherent). </p>
<p>Sure you can. Keep the file data in a buffer and return it the next time someone wants it. Since this is a local disk, you can control taht completely. If it&#8217;s a network drive, then things get complicated; you can probably cache a lot of metadata for up to a second or two. Dunno about the data. I generally don&#8217;t rely on network FSes for any sort of multiple access anyway, since I don&#8217;t trust it. </p>
<p>&gt; The problem with an application-level cache is that you need it to work across multiple components, most of which are NOT controlled by Microsoft. </p>
<p>The app-level cache is a hack to get around the suboptimal behavior with network drives (in this case, it may only cache metadata). If some component developer bypasses it, then their stuff is slower, that&#8217;s all. </p>
<p>&gt; you can&#8217;t force the component developers not to use the system APIs anyway. </p>
<p>Heh, sure you can. They don&#8217;t have any choice.</p>
<div CLASS=post>[<i>Not sure why you introduced local disks; the remark was regarding network drives. Caching network data without an open handle can give database programs (who are real sticklers for data consistency &#8211; go figure) the heebie-jeebies. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-417783">
				<div id="div-comment-417783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417783">
			September 7, 2006 at 3:31 pm</a>		</div>

		<blockquote><p>
  Not sure why you introduced local disks </p>
<p>If it&#8217;s an OS level cache, then local disks are a given, and are handled differently from network disks. </p>
<p>&gt; Caching network data without an open handle can give database programs </p>
<p>I admitted this in my comment, but if you run a database over a network link, you deserve what you get.</p>
<div class=post>[<i>I didn&#8217;t think there was any concern over the local machine caching its local hard drives. It was the network case that was the issue. So you&#8217;re saying that people who rely on cache coherency over the network deserve what they get when it breaks? Why do we bother with file locking again? -Raymond</i>]</div>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-417793">
				<div id="div-comment-417793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417793">
			September 7, 2006 at 4:15 pm</a>		</div>

		<blockquote><p>
  So you&#8217;re saying that people who rely on cache coherency over the network deserve what they get when it breaks? </p>
<p>No, running a database over the network is sinful , and will be punished. Network filesystems are a balance between acceptable performance and consistency. I don&#8217;t expect miracles and design apps accordingly. </p>
<div class=post>[<i>How is &#8220;sinful and will be punished&#8221; different from &#8220;they deserve what they get&#8221;? -Raymond</i>]</div>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-417803">
				<div id="div-comment-417803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417803">
			September 7, 2006 at 4:31 pm</a>		</div>

		<p>Simple: sinful and will be punished means that running a DB with its datafiles on a network share is fundamentally broken and will, err, break. You deserve what you get means that I will have no sympathy, nor will I pretend to be surprised. </p>
<p>Just a bit of hyperbole to ease the tedium of breaking software.</p>
<div CLASS=post>[<i>Is it possible for something to be &#8216;sinful and will be punished&#8217; while not &#8216;deserving what they get&#8217;? I&#8217;m just confused by that &#8216;No&#8217; two comments ago. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-417813">
				<div id="div-comment-417813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417813">
			September 7, 2006 at 4:40 pm</a>		</div>

		<p>Why yes, glad you asked ;) </p>
<p>Sinful and will be punished: you did something bad and it&#8217;ll come back to you. </p>
<p>Deserve what you get: you should&#8217;ve known better. </p>
<p>Two aspects of the same thing, really. Of course, my definition of sin isn&#8217;t tied to morality, as I don&#8217;t consider myself any sort of paragon.</p>
<div CLASS=post>[<i>Okay, so then by &#8216;No&#8217; you meant &#8216;Yes&#8217;. Now I&#8217;m not confused. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-417823">
				<div id="div-comment-417823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417823">
			September 7, 2006 at 4:44 pm</a>		</div>

		<p>To clarify the database vs. cache coherency comment, databases are different animals from most things, especially when talking about consistency. A db will stress any sort of protocol well beyond what you can expect other applications to do. Expecting cache coherency in a windows share is bad, but you&#8217;ll mostly get away with it. Do that with a db and you <em>will</em> pay.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-417883">
				<div id="div-comment-417883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417883">
			September 7, 2006 at 8:42 pm</a>		</div>

		<p>Cooney: I think you&#8217;re thinking of SQL Server or Oracle here. Those sort of programs will simply refuse to run off a network share.</p>
<p>But &quot;Access&quot; is also a database. Many people open Access *.mdb files off network shares, and Access relies on file locking to provide coherency (and it works, too, mostly)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-417973">
				<div id="div-comment-417973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mailto:Nekto2@gmail.com' rel='external nofollow' class='url'>Nekto2</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417973">
			September 8, 2006 at 3:46 am</a>		</div>

		<blockquote><p>
  Windows X11<br />
  <br />Actually &quot;X Window System&quot;. There is no &quot;s&quot; on the end of &quot;window&quot; ;)</p>
<p><a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/X_Window_System" rel="nofollow">http://en.wikipedia.org/wiki/X_Window_System</a><br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-417893">
				<div id="div-comment-417893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-417893">
			September 7, 2006 at 8:56 pm</a>		</div>

		<p>Thursday, September 07, 2006 6:02 AM by Dean Harding<br />
<br />&gt; The halting problem is not always<br />
<br />&gt; unanswerable.</p>
<p>I was about to answer starting with &quot;True, but &#8230;&quot; but then noticed that your used exactly the wording that makes your statement false.</p>
<p>Indeed there are halting problems for other classes of machines besides Turing machines. &nbsp;But &quot;The&quot; halting problem means the halting problem for Turing machines.[*] &nbsp;If you&#8217;re talking about a different halting problem then you have to specify which halting problem you&#8217;re talking about.</p>
<p>And you didn&#8217;t say &quot;Some&quot; halting problems are not always unanswerable, you said &quot;The&quot; halting problem.</p>
<p>[* It&#8217;s sort of like Windows, if you just say &quot;Windows&quot; then everyone knows you&#8217;re not talking about Windows X11 or Windows that are sold by Hardware stores (for sufficiently antique definitions of Hardware).]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-418213">
				<div id="div-comment-418213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-418213">
			September 8, 2006 at 11:36 am</a>		</div>

		<blockquote><p>
  Many people open Access *.mdb files off<br />
  <br />&gt;network shares, and Access relies on file<br />
  <br />&gt;locking to provide coherency (and it works,<br />
  <br />&gt;too, mostly) </p>
<p>If by &quot;works&#8230;mostly&quot; you mean that it corrupts the database on a regular basis, especially when notebook computers are unplugged from the network and reconnected while Access (or other applicaton using the Jet ODBC component) is open in the background, requiring that everyone be told to exit the program so that the database can be repaired, then yes, that&#8217;s true.</p>
<p>However, I don&#8217;t think that&#8217;s a meaning of &quot;works&#8230;mostly&quot; that most people would recognize.<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-418573">
				<div id="div-comment-418573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-418573">
			September 10, 2006 at 5:29 pm</a>		</div>

		<p>&gt; If by &quot;works&#8230;mostly&quot; you mean that it corrupts the database on a regular<br />
<br />&gt; basis&#8230;requiring that everyone be told to exit the program so that the<br />
<br />&gt; database can be repaired, then yes, that&#8217;s true.</p>
<p>Ah, my job description at my previous place of employment. Manifest tracking with an Access 97 database shared over a LAN and VPN via dial-up connections. I will say that at least Access was *usually* able to repair the database.</p>
<p>Move to a SQL server? Gods man, we&#8217;re not made of money here! It doesn&#8217;t matter that we&#8217;ve lost an entire day&#8217;s worth of entering and modifying shipping manifests every two weeks for the last 5 years!</p>
<p>Oh, the fun never ceased.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-421143">
				<div id="div-comment-421143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-421143">
			September 16, 2006 at 10:52 pm</a>		</div>

		<p>Funny how programmers tend to fix the wrong thing and to expect that OS cover for them. I would like to see all improperly written applications crash and burn until they get fixed or replaced by better written ones.</p>
<p>It would be nice to have an API like this:</p>
<p>QueryFileInformation(hFile, lpStruct);</p>
<p>lpStruct should point to a structure with fields like name, size, attributes, thumbnail bitmap, ID3 tag, x and y size of an image, length of a song in seconds, video bitrate, document title, md5 checksum, etc, and it should be extensible. It should also have flags which you set if you are interested in particular piece of information. OS could then collect and return all that info by accessing the file only once.</p>
<div CLASS=post>[<i>That doesn&#8217;t fix anything. Fifteen functions call this new <code>QueryFileInformation</code> function, so the disk is accessed 15 times. You&#8217;re back where you started. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-421233">
				<div id="div-comment-421233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mailto:Nekto2@gmail.com' rel='external nofollow' class='url'>Nekto2</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060905-27/?p=29853#comment-421233">
			September 17, 2006 at 2:38 pm</a>		</div>

		<blockquote><p>
  Fifteen functions call this new QueryFileInformation function, so the disk is accessed 15 times.</p>
<p>But why OS is not marking this disk as &#8220;inaccessible&#8221;. That means &#8211; why it not caches negative answer? Then only 1st call will wait and next 14 to other files on same device (disk) would return immediately with same error. There should be the reason? ;)</p>
<div CLASS=post>[<i>As noted in the linked article, the file is on a network drive. Accessing a network drive means sending network packets around the world. And you can&#8217;t cache network data without an open handle that denies write. -Raymond</i>]</div>
<p>Thus repeat count will transform to wait timer &#8211; &#8220;how much to wait before retry&#8221;. So any call to same device will get cached error until that time alapsed. And if there would be new call after timer expired then again it will wait (but only the fisrt one (actually thouse wich are in between 1st_call_start to 1st_call_retry_timeout)).<br />
  <br />This cache time should be selected on basis of expected UI response. How much user could wait after he detects failure and fix it. It should be something from 1sec to 5 sec. (For example OS detects that Ethernet cable is pluged-in in ~2-3 sec and it is normal).</p>
<p>ps. I know that if HDD has permanent errors it will be removed from list of devices attached (I have seen this on some computer when network share periodically dissapear untill restart). But I do not know exatly when :)<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

