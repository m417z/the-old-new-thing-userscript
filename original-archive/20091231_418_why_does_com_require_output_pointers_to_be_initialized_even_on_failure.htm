<html>
<head>
<title>Why does COM require output pointers to be initialized even on failure?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does COM require output pointers to be initialized even on failure?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 31, 2009 / year-entry #419</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20091231-00/?p=15463</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">One of the rules of COM is that if a parameter is marked as an output pointer, then you have to initialize the thing it points to, even if your function failed and you have nothing to return. For example, we saw the problems that can occur if you forget to set the output pointer...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>One of the rules of COM is that if a parameter is marked as an output pointer, then you have to initialize the thing it points to, even if your function failed and you have nothing to return. For example, we saw the problems that can occur if you <a href="http://blogs.msdn.com/oldnewthing/archive/2009/10/07/9904040.aspx"> forget to set the output pointer to <code>NULL</code> in the <code>IUnknown::QueryInterface</code> method</a>. Why does COM have this rule? Doesn't it know that a failure is a failure?</p>
<p> Because there are failures and there are sort-of failures. </p>
<p> A function can return an error code despite having partially succeeded. For example, if a function receives a buffer that is too small to hold all the data that is available, it might fill the buffer as much as possible, and then return an error like <code>ERROR_MORE_DATA</code> to say, "Hey, I gave you what I could, but there's more out there." The COM enumerator pattern specifies that if the caller asks for more items than there are remaining in the enumeration, then the <code>IEnumXXX::Next</code> method should return as many items as it can and return <code>S_FALSE</code>. </p>
<p> The COM library itself doesn't know the details and semantics of every method and interface. It doesn't know that your <code>IFlipper::Frob</code> method has a special return value of <code>E_PENDING</code> which means "I started the operation and here is a provisional result, but the final result will come later." </p>
<p> Why does COM even care about your method calls anyway? After all, isn't a COM method just a C++ virtual function? I'm just calling a function in some other part of my program; why does COM get involved? </p>
<p> COM indeed doesn't get involved, except when it needs to, such as when the object is being marshalled between apartments or processes. In those cases, a COM method call does not go directly to the C++ virtual method of the target object but rather goes through a proxy which packages up the input parameters and ships them to the final destination, a process known as marshalling. On the other side, a receiver proxy unpacks the parameters (unmarshals) and calls the destination object. When the destination object completes executing the method, the process repeats but this time with the output parameters: The output parameters are packaged up and sent back to the calling thread, where they are unpackaged and returned to the original caller. (Parameters which are in/out end up being marshalled in both directions.) </p>
<p> The code that does the marshalling and unmarshalling doesn't know any special behaviors of your method. It doesn't know that when the method returns <code>E_PENDING</code> then the first and third output parameters contain values that should be returned to the caller, but the second does not. It just packages up all the output parameters and sends them back. </p>
<p> A related scenario is the method where one input parameter controls whether another input parameter is ignored. In those cases, you still can't pass garbage as the second input parameter even though it is ignored, because the COM marshaller doesn't know the special semantics of the first parameter with respect to the interpretation of the second. </p>
<p> Now, you might say, "Well, I know that I'm not using any of the cases where the COM marshaller gets involved, so I'm going to break these rules because there is nobody around to enforce them!" </p>
<p> Except that you yourself are relying on this behavior; you just don't realize it. More about that next time. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-799243">
				<div id="div-comment-799243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091231-00/?p=15463#comment-799243">
			December 31, 2009 at 10:24 am</a>		</div>

		<p>Does the same apply to any RPC interface? &nbsp;</p>
<p>I would expect the proxy/stub code to initialize the output parameters to NULL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-799263">
				<div id="div-comment-799263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dgt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091231-00/?p=15463#comment-799263">
			December 31, 2009 at 10:57 am</a>		</div>

		<p>I remember the case where we pulled the object out of one process and moved it into another one. All the places where this COM rule was shortcutted blew up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-799273">
				<div id="div-comment-799273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Tandetnik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091231-00/?p=15463#comment-799273">
			December 31, 2009 at 11:14 am</a>		</div>

		<p>S_FALSE is a success code, not a failure code, so that&#8217;s not a very good example. And I can&#8217;t think of any case where E_PENDING comes with some partial results.</p>
<p>Is there an example in MS-defined interfaces where an actual error code (with the high bit set) is returned together with some partial results? I can&#8217;t seem to recall any.</p>
<div class=post>[<i>IExtractIcon::GetIconLocation returns E_PENDING with provisional icon information. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-799473">
				<div id="div-comment-799473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Tandetnik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091231-00/?p=15463#comment-799473">
			January 1, 2010 at 2:53 pm</a>		</div>

		<p>Are you sure about IExtractIcon::GetIconLocation? The documentation doesn&#8217;t seem to suggest that any [out] parameters should be returned with E_PENDING. I&#8217;m probably missing something obvious.</p>
<div class=post>[<i>I&#8217;ll see what I can do about making the docs clearer. There are other error cases that return valid data, such as ERROR_MORE_DATA from NetServerEnum. Don&#8217;t get fixated on the specific example &#8211; look at the bigger picture. Sometimes I wonder why I give examples any more. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

