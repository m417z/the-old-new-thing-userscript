<html>
<head>
<title>Why do member functions need to be "static" to be used as a callback?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why do member functions need to be &#8220;static&#8221; to be used as a callback?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 9, 2004 / year-entry #11</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040109-00/?p=41133</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>17</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">As we learned yesterday, nonstatic member functions take a secret "this" parameter, which makes them incompatible with the function signature required by Win32 callbacks. Fortunately, nearly all callbacks provide some way of providing context. You can shove the "this" pointer into the context so you can reconstruct the source object. Here's an example: class SomeClass...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p><a HREF=http://weblogs.asp.net/oldnewthing/archive/2004/01/08/48616.aspx>
As we learned yesterday</a>,
nonstatic member functions take a secret "this" parameter, which makes
them incompatible with the function signature required by Win32 callbacks.
Fortunately, nearly all callbacks provide some way of providing context.
You can shove the "this" pointer into the context so you can reconstruct
the source object.  Here's an example:</p>
<p>
<pre>
class SomeClass {
 ...
 static DWORD CALLBACK s_ThreadProc(LPVOID lpParameter)
 {
  return ((SomeClass*)lpParameter)-&gt;ThreadProc();
 }
 DWORD ThreadProc()
 {
  ... fun stuff ...
 }
};
</pre>
</p>
<p>
Some callback function signatures place the context parameter
(also known as "reference data") as the first parameter.  How
convenient, for the secret "this" parameter is also the first
parameter.  Looking at
<a HREF=http://weblogs.asp.net/oldnewthing/archive/2004/01/08/48616.aspx>
the various calling conventions available to us</a>,
it sure
looks like the <code>__stdcall</code> calling convention 
for <b>member functions</b> matches our desired stack layout
rather well.
Let's take <code><a HREF=http://msdn.microsoft.com/library/en-us/dllproc/base/waitortimercallback.asp>WAITORTIMERCALLBACK</a></code>
for example:
</p>
<table BORDER=0>
<col STYLE="padding-left: 1pc; padding-right: 1pc">
<col STYLE="padding-right: 1pc">
<col STYLE="padding-left: 1pc; padding-right: 1pc">
<col STYLE="padding-right: 1pc">
<col STYLE="padding-left: 1pc; padding-right: 1pc">
<tr>
<th COLSPAN=2>__stdcall callback</th>
<th COLSPAN=2>__stdcall method call</th>
<th COLSPAN=2>thiscall method call</th>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">.. rest of stack ..</td>
<td></td>
<td STYLE="border: solid 1px buttonshadow">.. rest of stack ..</td>
<td></td>
<td STYLE="border: solid 1px buttonshadow">.. rest of stack ..</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">TimerOrWaitFired</td>
<td></td>
<td STYLE="border: solid 1px buttonshadow">TimerOrWaitFired</td>
<td></td>
<td STYLE="border: solid 1px buttonshadow">TimerOrWaitFired</td>
<td>&lt;- ESP</td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">lpParameter</td>
<td>&lt;- ESP</td>
<td STYLE="border: solid 1px buttonshadow">this</td>
<td>&lt;- ESP</td>
</tr>
</table>
<p>
Well, "thiscall" doesn't match, but the two "__stdcall"s do.
Fortunately the compiler is smart enough to recognize this and
can optimize the <code>s_ThreadProc</code> static method to
nothing if you just give it enough of a nudge:</p>
<p>
<pre>
class SomeClass {
 ...
 static DWORD CALLBACK s_ThreadProc(LPVOID lpParameter)
 {
  return ((SomeClass*)lpParameter)-&gt;ThreadProc();
 }
 DWORD <font COLOR=red>__stdcall</font> ThreadProc()
 {
  ... fun stuff ...
 }
};
</pre>
</p>
<p>
If you look at the code generation for the <code>s_ThreadProc</code>
function, you'll see that has been reduced to nothing but a
jump instruction, since the compiler has realized that the two
calling conventions coincide here so there is no actual translation
to do.
</p>
<p>
<pre>
?s_ThreadProc@SomeClass@@SGKPAX@Z PROC NEAR
  jmp     ?ThreadProc@SomeClass@@QAGKXZ
?s_ThreadProc@SomeClass@@SGKPAX@Z ENDP
</pre>
<p>
Now some people would take this one step further and just
cast the second parameter to <code>CreateThread</code>
to <code>LPTHREAD_START_ROUTINE</code>
and get rid of the helper <code>s_ThreadProc</code> function
entirely.
<b>I strongly advise against this.</b>
I have seen too many people cause trouble by miscasting
function pointers; more on this in a future entry.
</p>
<p>
Although we took advantage above of a coincidence between the two
<code>__stdcall</code> calling conventions,
we did not <b>rely</b> on it.
If the coincidence in calling conventions fails to occur,
the code is still correct.
This is important when it comes time to port this code to
another architecture, one where the coincidence may longer
be true!</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-121233">
				<div id="div-comment-121233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040109-00/?p=41133#comment-121233">
			January 9, 2004 at 9:23 am</a>		</div>

		<p>I would smack any fool around that tried to depend on how the assembly works.  Just BEGGING for trouble.</p>
<p>The good thing is, there are now very, very few programmers who understand assembly to this level, and they are all old enough to know better.  Or one would hope.</p>
<p>Grin.</p>
<p>Now, passing a non-static member function in for a callback, I&#8217;ve seen fools try that.  But it never makes it out of programmer testing, because nothing works&#8230;..<br />
<br />(Duh, why am I getting a visit from the Doctor?)</p>
<p>Course, passing objects in WM_ type stuff can cause other problems with deleted objects.  Those can get amusing to prevent.<br />
<br />What if there is already a message in the queue with that object reference as an LPARAM when you clean things up in the destructor?  Can you say trap on shutdown?<br />
<br />You really need to have some form of validation for the &quot;this&quot; pointer.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-121253">
				<div id="div-comment-121253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.microsoft.com/' rel='external nofollow' class='url'>Willaim H. Gates</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040109-00/?p=41133#comment-121253">
			January 9, 2004 at 11:35 am</a>		</div>

		<p>Hello Raymon,</p>
<p>You shouldn&#8217;t disregard our precious software in public.</p>
<p>Bill.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-121283">
				<div id="div-comment-121283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve Sheppard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040109-00/?p=41133#comment-121283">
			January 9, 2004 at 12:38 pm</a>		</div>

		<p>Stupid and illiterate too! </p>
<p>Bill, </p>
<p>You seem to have a real problem with names, both RaymonDs and your own -&gt; Willaim != William.</p>
<p>Thanks for playing,</p>
<p>Steve</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-121303">
				<div id="div-comment-121303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040109-00/?p=41133#comment-121303">
			January 9, 2004 at 3:53 pm</a>		</div>

		<p>Woah, wtf? A new BOOLEAN type? What happened to BOOL?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-121313">
				<div id="div-comment-121313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.rotd.org' rel='external nofollow' class='url'>Andreas Magnusson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040109-00/?p=41133#comment-121313">
			January 9, 2004 at 3:55 pm</a>		</div>

		<p>Most of the callbacks seems to allow user-data, but not the Service-API, which is too bad because when you put several services in one exe, it would be nice to have a class for each.<br />
<br />Do you know why the Service-API lacks this (no pun intended), is there a good reason or was it just &quot;missed&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-121323">
				<div id="div-comment-121323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040109-00/?p=41133#comment-121323">
			January 9, 2004 at 4:01 pm</a>		</div>

		<p>BOOLEAN, like UNICODE_STRING, dates back to the days when Windows NT was called &quot;OS/2 3.0 NT&quot;.</p>
<p>Andreas: I don&#8217;t know what the deal is with the service APIs. You can always fake it be instancing your callbacks. There are some other callbacks which frustratingly fail to pass reference data, like AbortProc, all the Windows hooks&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-121343">
				<div id="div-comment-121343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040109-00/?p=41133#comment-121343">
			January 9, 2004 at 6:16 pm</a>		</div>

		<p>Andreas: Service callbacks take user-data.  Put your this pointer in the lpContext.</p>
<p>DWORD WINAPI HandlerEx(<br />
<br />  DWORD dwControl,<br />
<br />  DWORD dwEventType,<br />
<br />  LPVOID lpEventData,<br />
<br />  LPVOID lpContext<br />
<br />);<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-121393">
				<div id="div-comment-121393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040109-00/?p=41133#comment-121393">
			January 10, 2004 at 3:36 am</a>		</div>

		<p>What if SomeClass was derived from SomeParentClass and ThreadProc was a virtual member function? Would the compiler still do the stack optimization?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-121403">
				<div id="div-comment-121403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040109-00/?p=41133#comment-121403">
			January 10, 2004 at 7:53 am</a>		</div>

		<p>Try it and see! (and see if you can explain the codegen)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-121413">
				<div id="div-comment-121413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.whirlingdervishes.com' rel='external nofollow' class='url'>Henk Devos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040109-00/?p=41133#comment-121413">
			January 10, 2004 at 8:16 am</a>		</div>

		<p>I&#8217;m wondering what&#8217;s happened to this in Win64.<br />
<br />Have all user data parameters been widened to 64 bit?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-121423">
				<div id="div-comment-121423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040109-00/?p=41133#comment-121423">
			January 10, 2004 at 8:24 am</a>		</div>

		<p>I mentioned this briefly in my old blog</p>
<p><a target="_new" href="http://blogs.gotdotnet.com/raymondc/permalink.aspx/d29da767-5c07-48ec-9b9c-5f514b7d1f6b" rel="nofollow">http://blogs.gotdotnet.com/raymondc/permalink.aspx/d29da767-5c07-48ec-9b9c-5f514b7d1f6b</a></p>
<p>There&#8217;s more information on Win64 data types on MSDN, like here for example.</p>
<p><a target="_new" href="http://msdn.microsoft.com/library/en-us/dnnetserv/html/ws03-64-bitwindevover.asp" rel="nofollow">http://msdn.microsoft.com/library/en-us/dnnetserv/html/ws03-64-bitwindevover.asp</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-135453">
				<div id="div-comment-135453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ebbe Kristensen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040109-00/?p=41133#comment-135453">
			January 12, 2004 at 2:56 am</a>		</div>

		<p>   return ((SomeClass*)lpParameter)-&gt;ThreadProc();</p>
<p>really should be:</p>
<p>   return reinterpret_cast&lt;SomeClass*&gt;(lpParameter)-&gt;ThreadProc();</p>
<p>Using new-style casts makes the code safer. Also it is easier to find casts in the source using a simple search.</p>
<p>See also B. Stroustrup, The C++ Programming Language 3rd edition, pg 819. No, C-style casts are not deprecated &#8211; yet&#8230;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-135853">
				<div id="div-comment-135853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://baby.homeip.net/patrick/archives/000142.php' rel='external nofollow' class='url'>Simply Patrick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040109-00/?p=41133#comment-135853">
			January 13, 2004 at 1:19 pm</a>		</div>

		<p>??????,??????????? ?????????? calling convention: The history of calling conventions, part 1 The history of calling conventions, part 2 The history of calling conventions, part 3 The history of calling conventions, part 4: ia64 Why do member functions need to be&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-137303">
				<div id="div-comment-137303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://alexpojoga@yahoo.com' rel='external nofollow' class='url'>Alex</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040109-00/?p=41133#comment-137303">
			January 19, 2004 at 6:00 pm</a>		</div>

		<p>Isn&#8217;t this passed in ebx?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-137313">
				<div id="div-comment-137313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040109-00/?p=41133#comment-137313">
			January 19, 2004 at 6:06 pm</a>		</div>

		<p>Try it and see. My remarks applied to the Microsoft Visual C++ compiler &#8211; other compilers will probably do things differently.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196213">
				<div id="div-comment-196213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/07/19/187415.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040109-00/?p=41133#comment-196213">
			July 19, 2004 at 10:02 am</a>		</div>

		<p>Thereby ensuring that you match the calling convention.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-202173">
				<div id="div-comment-202173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040109-00/?p=41133#comment-202173">
			August 10, 2004 at 9:38 am</a>		</div>

		<p>Commenting closes after two weeks.</p>
<p><a target="_new" href="http://weblogs.asp.net/oldnewthing/archive/2004/02/21/77681.aspx" rel="nofollow">http://weblogs.asp.net/oldnewthing/archive/2004/02/21/77681.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

