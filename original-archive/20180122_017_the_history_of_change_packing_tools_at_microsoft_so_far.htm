<html>
<head>
<title>The history of change-packing tools at Microsoft (so far)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The history of change-packing tools at Microsoft (so far)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 22, 2018 / year-entry #17</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">They all say "pack" for one reason or another.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Self-proclaimed "Author of unremarkable code"
<a HREF="https://twitter.com/jaybazuzi">Jay Bazuzi</a>
posted a
<a HREF="https://twitter.com/jaybazuzi/status/923408581356957698">
brief history of change-packing tools at Microsoft</a>.
</p>
<p>
First of all, what is change-packing?
</p>
<p>
After you make some changes to code,
you may want to save those changes without checking them in.
Some source control systems have native support for this
operation, variously called <i>shelving</i> or <i>stashing</i>.
But first lets look at the requirements of change-packing.
</p>
<p>
First, a packed change needs to take the form of a single file.
This allows the file to be added as an attachment to a bug,
or saved away in a "Things I
abandoned, but which I still want to keep around for reference"
directory somewhere.
</p>
<p>
For example, you might make a change and then realize
that it doesn't solve the problem.
On the other hand, there was some good stuff in that change,
like a new technique you discovered, and you don't want to lose
the record of that change,
in case you need to use that technique later.
Keeping it in a single file makes it easier to manage.
(A variant of this is where the bug you're trying to fix was
rejected by Ship Room, so you want to save the fix away so you
can bring it back at a more propitious time.)
</p>
<p>
Other use-cases for change packing are to get another developer's
opinion on code you've written,
either informally as a sanity check before getting in too deep,
or formally as a pre-checkin code review.
Or you can send the packaged change for pre-checkin validation:
In the old days, you would send the changes
to your buddy to verify that the code compiles,
known as a <i>buddy build</i>.
(The most common reason it wouldn't compile is that you forgot to
include all the affected files in the package.)
Your buddy would unpack the change into their local repository
and try to build it.
In somewhat newer days, you would send the changes to a dedicated
change verification system.
</p>
<p>
Second, the contents of a packed change must be viewable
on a non-developer machine.
This means that you cannot assume that there is a local repository,
but you are allowed to assume network connectivity.
This requirement permits the packed change that you attached
to a bug to be opened in Ship Room so everybody can view the
change and review it.
(For bonus points,
your packed change could remove the requirement that it have
network access, so that it is usable even when offline.)
</p>
<p>
In the early days, Microsoft used a homemade source control
system formally called Source Library Manager, but which was
generally abbreviated SLM, and pronounced <i>slime</i>.
It was a simple system that did not support branching.
Files were centrally stored, and clients cooperated in updating
the files.&sup1;
The Windows team didn't have a change-packing tool for SLM.
You typically sent around changes by just copying them to a shared
location.
If you wanted a code review, you brought someone to your office,
and you reviewed the code in person.
</p>
<p>
Shortly after Windows 2000 shipped,
the Windows source code transitioned to a source control system
known as Source Depot,
which was an authorized fork of Perforce.
Microsoft made changes to the code base to do things like
improve scalability and add new features.
</p>
<p>
It was during this era that I wrote a change-packing tool for Source Depot,
which I named <code>bbpack</code> because its primary purpose was to pack
changes for the purpose of a <u>b</u>uddy <u>b</u>uild.
(Its secondary purpose was to facilitate code reviews.)
The package itself was a batch file that did the necessary work of
applying the changes to the source code on the machine that ran the script,
or if running in code review mode, to unpack the files into a temporary
directory and then run a diff tool.
I chose a batch file because I
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20060322-24/?p=31823">
didn't want to solve the problem by creating a bigger problem</a>:
If I wanted somebody to run a buddy build for me,
I wanted it to be as simple as possible:
"Run this batch file, and then build this directory."
Not
"First, install this tool..."
</p>
<p>
Since the two purposes for the <code>bbpack</code> tool cared
only about the difference in the package,
I didn't pay attention to replaying the pending operations
with full fidelity.
As long as the source code after unpacking matched the source code
that was packed, that was good enough.
That means that if the original package was created via an integration
(which is the Source Depot name for what everybody else calls a merge),
the unpacked file was reported as an edit, not a merge.
Similarly for other exotic file states like "undo".
</p>
<p>
Meanwhile,
the Office team were also in the process of transitioning
from SLM to Source Depot,
and when they learned about this <code>bbpack</code> thing,
Office tools magician&sup2; Stephan Mueller
exchanged email with me to learn about <code>bbpack</code>,
its design,
its strengths and weaknesses,
and based on this and his own powerful brain
wrote a comparable change-packing tool for SLM,
which he called <code>slmpack</code>.
And then when Office completed their transition to Source Depot,
he wrote it again, called <code>sdpack</code>.
The Office team used these packages for the same thing
that Windows did:
Sharing changes between developers and
viewing proposed changes in the Ship Room meeting.
</p>
<p>
Okay, here's where Jay Bazuzi enters the story.
</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">While we&#39;re talking awesome tools, here&#39;s ff.exe from <a href="https://twitter.com/JohnWintellect?ref_src=twsrc%5Etfw">@JohnWintellect</a>: <a href="https://t.co/8kzy7yQj17">https://t.co/8kzy7yQj17</a> - like dir /s, but faster and more awesome! I use it many times daily.</p>
<p>&mdash; Kirill Osenkov (@KirillOsenkov) <a href="https://twitter.com/KirillOsenkov/status/923349202423259136?ref_src=twsrc%5Etfw">October 26, 2017</a></p>
</blockquote>
<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr">How do I get jjpack mentioned as an awesome tool. But, you know, organically?</p>
<p>&mdash; Jay Bazuzi (@jaybazuzi) <a href="https://twitter.com/jaybazuzi/status/923408581356957698?ref_src=twsrc%5Etfw">October 26, 2017</a></p>
</blockquote>
<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr">remind me what it was? I have vague memories of bbpack, jjpack and other xxpacks. Did you write jjpack? What&#39;s the history there?</p>
<p>&mdash; Kirill Osenkov (@KirillOsenkov) <a href="https://twitter.com/KirillOsenkov/status/923546925772578816?ref_src=twsrc%5Etfw">October 26, 2017</a></p>
</blockquote>
<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr">bbpack was Raymond Chen. Used to send your SLM changes to another computer for a buddy build.</p>
<p>&mdash; Jay Bazuzi (@jaybazuzi) <a href="https://twitter.com/jaybazuzi/status/923802908499501057?ref_src=twsrc%5Etfw">October 27, 2017</a></p>
</blockquote>
<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr">When Source Depot came along, he ported it over, but it only supported add/edit/delete, and not integrations.</p>
<p>&mdash; Jay Bazuzi (@jaybazuzi) <a href="https://twitter.com/jaybazuzi/status/923803051235819521?ref_src=twsrc%5Etfw">October 27, 2017</a></p>
</blockquote>
<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr">I was running the team gated build (before &quot;CI&quot; was a thing!). We used bbpack to send changes to the system, and needed integration support.</p>
<p>&mdash; Jay Bazuzi (@jaybazuzi) <a href="https://twitter.com/jaybazuzi/status/923803308027920385?ref_src=twsrc%5Etfw">October 27, 2017</a></p>
</blockquote>
<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr">I started a thread where the 2 SD devs debated for a week about how integrations worked, and wrote down what they said in JJPack.</p>
<p>&mdash; Jay Bazuzi (@jaybazuzi) <a href="https://twitter.com/jaybazuzi/status/923803490513690624?ref_src=twsrc%5Etfw">October 27, 2017</a></p>
</blockquote>
<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr">It spread across the company, except for Windows and Office (the latter had SDPack). Surprisingly popular for a side project.</p>
<p>&mdash; Jay Bazuzi (@jaybazuzi) <a href="https://twitter.com/jaybazuzi/status/923803734550880256?ref_src=twsrc%5Etfw">October 27, 2017</a></p>
</blockquote>
<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr">In my first month at Tableau I was getting to know my coworkers and awkwardly injected jjpack in the convo. They both knew it.</p>
<p>&mdash; Jay Bazuzi (@jaybazuzi) <a href="https://twitter.com/jaybazuzi/status/923804119684472833?ref_src=twsrc%5Etfw">October 27, 2017</a></p>
</blockquote>
<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr">Today I use Perforce and it&#39;s built-in shelve feature is not as good as JJPack. :-(</p>
<p>&mdash; Jay Bazuzi (@jaybazuzi) <a href="https://twitter.com/jaybazuzi/status/923804189582491648?ref_src=twsrc%5Etfw">October 27, 2017</a></p>
</blockquote>
<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr">The name is a vain riff on bbpack. The other vanity name was JRC, Jay&#39;s Resource Compiler. Only ever used in the VS Debugger.</p>
<p>&mdash; Jay Bazuzi (@jaybazuzi) <a href="https://twitter.com/jaybazuzi/status/923804359678246912?ref_src=twsrc%5Etfw">October 27, 2017</a></p>
</blockquote>
<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr">Fixes a bunch of the headaches with merging resource string changes. <br><br>Pronounced &quot;jerk&quot;. :-)</p>
<p>&mdash; Jay Bazuzi (@jaybazuzi) <a href="https://twitter.com/jaybazuzi/status/923804503857438720?ref_src=twsrc%5Etfw">October 27, 2017</a></p>
</blockquote>
<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr">love this history lesson! I remember JRC too, didn&#39;t know what it stood for!</p>
<p>&mdash; Kirill Osenkov (@KirillOsenkov) <a href="https://twitter.com/KirillOsenkov/status/923923185069731840?ref_src=twsrc%5Etfw">October 27, 2017</a></p>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>
One sign that you wrote a useful tool is that people
started using it for things that you didn't originally consider.
Jay was using my <code>bbpack</code> tool to submit jobs into a gated
build system, which was totally not the intended use.
More than once, I received reports from people saying,
"We're using your <code>bbpack</code> tool to transport changes
between machines, and we find that it doesn't work reliably
when there are more than 50,000 files in the package,"
or some other ridiculous thing.
Dude, that is nowhere near what <code>bbpack</code> is for.
No developer is going to change 50,000 files and send it out
for code review.
</p>
<p>
There was no rivalry among the three of us over
whose change-packing tool was best.
Indeed,
I considered
<code>jjpack</code> and <code>sdpack</code> to be
"next generation" packing tools and did what I could to deprecate
<code>bbpack</code> and steer people toward
<code>jjpack</code> and <code>sdpack</code>.
</p>
<p>
What probably settled the not-really-a-battle between
<code>jjpack</code> and <code>sdpack</code>
was when another team wrote
<a HREF="https://news.microsoft.com/2012/01/05/a-bar-an-idea-and-a-garage-the-story-of-codeflow/">
a code review tool that became wildly popular all over
Microsoft</a>.
That tool used
<code>sdpack</code> files as its interchange format.
From then on,
<code>sdpack</code> was the change-packing tool of choice,
and the other tools were also-rans.
</p>
<p>
Now that Windows is using git as its source control system,&sup3;
combined with
<a HREF="https://www.visualstudio.com/team-services/">
Visual Studio Team Services</a>
for its online presence,
the question arises of how to package changes in git.
</p>
<ul>
<li>Sending changes to another developer to get their opinion:
    Push your changes to a branch on VSTS.
    The other developer can view the branch online, or fetch
    it to their local machine for a closer look.
</li>
<li>Sending changes to another developer to get a buddy build:
    Push your changes to a branch on VSTS.
    The other developer can fetch it to their machine to build it.
    Or even better, let
    <a HREF="https://www.visualstudio.com/team-services/continuous-integration/">
    continuous integration</a>
    do the work of the buddy build.
</li>
<li>Sending changes to another developer to get a code review:
    Push your changes to a branch on VSTS,
    and then create a pull request.
</li>
<li>Packing changes and attaching it to a bug:
    Push your changes to a branch on VSTS,
    create a pull request,
    and put a link to the pull request in the bug.
    Ship Room can open the link and view the pull request online.
    From there, they can add comments to the PR,
    or approve it via the Web page.
</li>
</ul>
<p>
The one case that I still don't have a good solution for is the one
where you have some changes
that you decided not to commit, but you want to keep them in case
they come in handy later.
</p>
<p>
Option 1:
Put a commit at the tip of the branch summarizing what this branch is about,
and then abandon the branch but don't delete it.
You can always come back to it later.
The downside is that the name of all your "things that didn't work"
sit there cluttering your <code>git branch</code> output.
You can mitigate this by using a naming pattern like
<code>w/raymond/archive/blahblah</code>.
push the branch to the server, and then delete the local version.
But the branches still show up in your daily workflow.
</p>
<p>
Option 2:
Create a patch and save that.
The downside of this is that patches decay as the code changes,
and eventually one of the hunks will fail to apply, and now you're stuck.
Since patches record only a few lines of context on either side
of the change, there isn't enough information to figure out where
the hunk moved to.
And even though the patch is the diff itself,
you often want to see more context around the changes than was
recorded in the patch.
Patches also don't record the base revision from which they were
generated;
you'll have to add that information to the patch file.
</p>
<p>
Option 3:
Create a bundle.
The bundle is a compact representation of the objects related
to your branch that aren't in the main branch.
However, looking at the contents of a bundle is cumbersome
because you have to fetch it into a live repo and then
remember the starting point for the diff.
You cannot view the contents of a bundle without a live repo.
</p>
<p>
Option 4:
Push the changes to a branch on VSTS,
create a pull request,
and immediately reject it.
Save a link to the pull request.
You can delete the branch; the pull request will remain,
with your commits.
Bonus feature: You can annotate your changes
by commenting on the pull request.
("This was my attempt to do X.
It basically works, but there's a bug when a Y occurs
at the same time.
See additional discussion at line 123.")
</p>
<p>
I haven't found a good answer to this yet.
As a stopgap, I have a script that generates an <code>sdpack</code>
from a commit (or commit range),
and I use the <code>sdpack</code> as my unit of cold storage.
</p>
<p>
If you have any other ideas, please share.
</p>
<p>
&sup1;
This source control system somehow got turned into a product,
named
<a HREF="https://winworldpc.com/product/microsoft-delta/10">
Microsoft Delta</a>.
It was very short-lived.
</p>
<p>
&sup2;
If you're lucky, your project has a tools magician.
This is the person who somehow has their hands in everything
that makes your life better,
whether it's improving the build system,
managing the gated check-in system,
setting up the automated static analysis tool,
or fixing build breaks in the middle of the night
so your team has a working build in the morning.
</p>
<p>
&sup3;
Another consequence of Windows moving to git as its source
control system is that I no longer get email from people
asking for help with <code>bbpack</code>.
Finally I succeeded in getting people to stop using it!
</p>
<p>
(Stephan hasn't been so lucky, though.
He tells me that he has a customer who is packing and reapplying
gigabytes of changes and cares more about speed than package size.
So he's making still more changes to <code>sdpack</code> to
support that scenario.
"The customer is used to <code>jjpack</code>'s speed,
so it's fun to have that bar to shoot for.")</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (57)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1321776">
				<div id="div-comment-1321776" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Quinlan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321776">
			January 22, 2018 at 7:21 am</a>		</div>

		<p>Did Microsoft ever use Team Foundation Server internally?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1322575">
				<div id="div-comment-1322575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322575">
			January 26, 2018 at 10:13 am</a>		</div>

		<p>Yes, there are some teams who chose TFS as their source control system. (I don&#8217;t know if they&#8217;re still on it, or whether they have since switched to git.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1321785">
				<div id="div-comment-1321785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321785">
			January 22, 2018 at 7:24 am</a>		</div>

		<p>Re: &#8220;I still don&#8217;t have a good solution for [&#8230;] changes that you decided not to commit, but you want to keep [&#8230;]&#8221;</p>
<p>When using Git, I&#8217;ve seen people use personal remotes for this (you have multiple remotes). You push your branch, but it doesn&#8217;t show up for anyone else who is using the shared remote in their, as you say, &#8220;daily workflow&#8221;.</p>
<p>Personally, I try to avoid keeping anything temporary at all for any reason. I know it&#8217;s going to get stale and fill up secondary storage that noone ever cleans up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1321795">
				<div id="div-comment-1321795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321795">
			January 22, 2018 at 7:30 am</a>		</div>

		<p>&#8220;Patches also don&#8217;t record the base revision from which they were generated; you&#8217;ll have to add that information to the patch file.&#8221;</p>
<p>They should, if you use the patch-generation function of your source control tool, instead of a standalone diff program.</p>
<p>In my experience at least TortoiseSVN and TortoiseGIT, as well as the include base revision information in generated patch files&#8230; and I believe this capability comes from the underlying library rather than being specific to the particular client.   Just double-checked using the Git for Windows command-line client, and yes the base revision information is there too.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1322725">
				<div id="div-comment-1322725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322725">
			January 27, 2018 at 3:28 am</a>		</div>

		<p>But not using `git diff`; you have to use something clunkier like `git format-patch` instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-2 parent" id="comment-1322785">
				<div id="div-comment-1322785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322785">
			January 27, 2018 at 11:55 am</a>		</div>

		<p>To apply a patch, git doesn&#8217;t really need its commit ID, or its parent&#8217;s commit ID . It only needs a blob ID of the base version of the file(s) being patched, and that ID is actually recorded in diff output.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-3 parent" id="comment-1322815">
				<div id="div-comment-1322815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322815">
			January 27, 2018 at 1:38 pm</a>		</div>

		<p>But &#8220;git am&#8221; doesn&#8217;t take that base into account when merging, nor does it show you the standard merge conflict markers. Furthermore, there is no tool (that I see) which takes a patch file and produces the before and after files, suitable for display in your favorite diff tool.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-4" id="comment-1322835">
				<div id="div-comment-1322835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322835">
			January 27, 2018 at 9:27 pm</a>		</div>

		<p>git-am is just a combination of clever parsing of the mail-patch file, and running a sequence of &#8220;git apply&#8221; commands and &#8220;git commit&#8221; commands.<br />
&gt;But “git am” doesn’t take that base into account when merging<br />
The base blob ID? oh yes, it does, this is how git-apply works.<br />
&gt;nor does it show you the standard merge conflict markers<br />
This is what &#8211;3way git-am (and git-apply) command option (and git config am.threeWay) is for.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1321815">
				<div id="div-comment-1321815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken in NH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321815">
			January 22, 2018 at 7:53 am</a>		</div>

		<p>Does this help?</p>
<p><a href="https://superuser.com/questions/409228/how-can-i-share-a-git-stash" rel="nofollow">https://superuser.com/questions/409228/how-can-i-share-a-git-stash</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-chazste odd alt thread-even depth-1" id="comment-1321825">
				<div id="div-comment-1321825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Charles+H.+Stevens' rel='external nofollow' class='url'>Charles H. Stevens</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321825">
			January 22, 2018 at 8:03 am</a>		</div>

		<p>Thanks for the history. I had wondered for a very long time if Source Depot was actually Perforce. Cool story!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-odd thread-alt depth-1 parent" id="comment-1321835">
				<div id="div-comment-1321835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321835">
			January 22, 2018 at 8:12 am</a>		</div>

		<p>Well, once you grok Git, it&#8217;s the best thing after sliced bread.<br />
I&#8217;ve lived through a few version control systems. The first one I used was PVCS. It was a terrible kludge, which didn&#8217;t even support directories in the project directory (later versions did, though). SourceSafe was quite useable, though could be fragile and terribly slow on non-Windows file servers. Perforce used that strange concept of workspaces, which made collaboration quite awkward. Concept of branches in P4 was so strange I never mastered it.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1321855">
				<div id="div-comment-1321855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321855">
			January 22, 2018 at 8:19 am</a>		</div>

		<p>So how do you pack changes?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev even depth-3 parent" id="comment-1321895">
				<div id="div-comment-1321895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321895">
			January 22, 2018 at 9:02 am</a>		</div>

		<p>&gt;So how do you pack changes?<br />
It depends. For backup or archiving, I can push as a personal branch to common repo. For collaboration &#8211; push as a draft to Gerrit. Useful personal patches I keep in the local repository clone as branches. Don&#8217;t use stash &#8211; it&#8217;s not as manageable as branches. Stashes really are one-commit branches, anyway.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4 parent" id="comment-1321925">
				<div id="div-comment-1321925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321925">
			January 22, 2018 at 9:20 am</a>		</div>

		<p>Is the repo you push to the same as the one you regularly work from? How do you keep these &#8220;cold storage&#8221; changes from cluttering your normal workflow? For the local-only changes, do you worry about a hard drive crash wiping out your archived changes? Pushing to a separate repo is not practical for the Windows repo, seeing as the Windows repo is <a href="https://blogs.msdn.microsoft.com/bharry/2017/05/24/the-largest-git-repo-on-the-planet/" rel="nofollow">ridiculously huge</a>.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev even depth-5" id="comment-1321935">
				<div id="div-comment-1321935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321935">
			January 22, 2018 at 9:57 am</a>		</div>

		<p>No. Ridiculously huge is my product repo, which is 80000+ files, 10GB worktree checked out, and 10+ GB .git directory (70000+ commits). Windows rep, though, is humongously huge.</p>
<p>We push to a master server with Gerrit code review, and a few replica servers (fetch only). Personal branches have refs/heads/personal// path prefix. I push my work as a personal branch as a backup against the hard drive crash. After it&#8217;s all debugged, I do some &#8220;rebase -i&#8221; commit surgery to combine (and split when necessary) changes to clean patches, which I then push to the codebase.</p>
<p>Anyway, I&#8217;m spearheading an effort to split it (by using a custom variant of git-filter-branch command) into smaller self-containing repos per buildable binary, while preserving all history for each deliverable. Microsoft needs to do the same. If you don&#8217;t want to renormalize files (normalize all EOLs to LF), it&#8217;s pretty fast. It can be done incrementally per deliverable, not necessarily in one big shot.<br />
The filter-branch command can convert 1-3 commits per second, fewer when re-normalization is done. Full renormalization of this 70000 commit repository takes some 50 hours, only because it cannot be parallelized much. Straight filter-branch for a subdirectory is pretty fast. I&#8217;m modifying filter-branch to allow incremental conversion.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-5" id="comment-1321945">
				<div id="div-comment-1321945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321945">
			January 22, 2018 at 10:12 am</a>		</div>

		<p>Also, all my work machines now have SSD, less likely to crash.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1322455">
				<div id="div-comment-1322455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322455">
			January 25, 2018 at 2:05 pm</a>		</div>

		<p>10 GB while not exactly small is anything but &#8220;ridiculously huge&#8221;. The Windows Kernel is 300 GB and Google&#8217;s repo is several TB (yup I know) large.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-4 parent" id="comment-1322075">
				<div id="div-comment-1322075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon Chick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322075">
			January 23, 2018 at 5:24 am</a>		</div>

		<p>&gt;So how do you pack changes?</p>
<p>Maybe I am missed something in the discussion, but aren&#8217;t you creating a diff, storing the diff (text file) and applying the patch later? </p>
<p>Example:<br />
git diff commit_a..commit_b &gt; change.diff<br />
git apply change.diff</p>
<p>Better write up here: <a href="https://www.thegeekstuff.com/2014/03/git-patch-create-and-apply" rel="nofollow">https://www.thegeekstuff.com/2014/03/git-patch-create-and-apply</a></p>
<p>Cherry-picking is effective if you have network access the the buddy branch. No pull request required. Or use git to generate pull request text and send it per email, no need to put up a pull request on VSTS and cancel.</p>
<p>Binary artifacts are a plague on source code control systems. How are binary artifacts, e.g icons, handled in bbpack?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-5" id="comment-1322605">
				<div id="div-comment-1322605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322605">
			January 26, 2018 at 10:30 am</a>		</div>

		<p>Diffs decay over time. Take a diff generated two years ago to a high-churn file and try to apply it. You&#8217;ll likely get a bunch of patch failures, and no way to fix them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-5" id="comment-1322805">
				<div id="div-comment-1322805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322805">
			January 27, 2018 at 12:03 pm</a>		</div>

		<p>To apply a text patch you need to have the base versions of the changed files, as well. Not necessarily the parent commits, though.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even depth-3" id="comment-1321905">
				<div id="div-comment-1321905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321905">
			January 22, 2018 at 9:10 am</a>		</div>

		<p>Oh, and I wrote a script to use Git repository as a source server for Windbg. The script runs on every build of a binary. Also installs the PDB to the local store. Very handy when you need to juggle multiple SUTs which can be running different builds of the binary.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-prshaw odd alt thread-even depth-1 parent" id="comment-1321845">
				<div id="div-comment-1321845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/prshaw' rel='external nofollow' class='url'>prshaw</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321845">
			January 22, 2018 at 8:17 am</a>		</div>

		<p>I actually used Delta, my first Microsoft source control package. And yes it was very short lived. I would be interested in hearing the history of the product. Before Delta I used a product called TLib I think, it had the advantage in that it worked with WORM drives.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1321985">
				<div id="div-comment-1321985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GerryC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321985">
			January 22, 2018 at 1:37 pm</a>		</div>

		<p>I remember &#8220;evaluating&#8221; MS Delta for a smallish Foxpro project circa 1992, and deciding it&#8217;s UI was terrible. Instead we went for tool from a small company called One Tree Software. The product was called SourceSafe. We tried to get some additional licenses and found it had been acquired by MS. The local rep had no idea what we were talking about. Then they acquire Foxpro as well.<br />
I think Delta may have been a bit of overkill!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1322035">
				<div id="div-comment-1322035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Randy Orrison</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322035">
			January 23, 2018 at 3:09 am</a>		</div>

		<p>&#8220;Some drunk guy at Microsoft&#8221;? Sigh.</p>
<p>Delta was an attempt to productize SLM.  SLM being good enough for large scale production use in Microsoft, it was thought that it would be good enough to sell.  Of course it was command-line only, and it needed to have a GUI to be marketable. Rather than re-implementing the SLM functionality in Windows, we developed device driver I/O redirection hooks between a hidden DOS box and the GUI so that the commands could be run from from the Windows interface, and the returned text output interpreted.  Until recently I had the SLM source around, and I still have a shrink-wrapped copy Delta on my bookshelf.</p>
<p>Ever hear of Microsoft Tutor?  That was an attempt at productizing DOT (Daughter of TED); unlike Delta it didn&#8217;t even make it out the door. It was close; I did see pre-production proofs of the manual.  That ended when the LSD and THC groups got re-organized.</p>
<p>Randy</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev even depth-3" id="comment-1322795">
				<div id="div-comment-1322795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322795">
			January 27, 2018 at 12:00 pm</a>		</div>

		<p>&gt; That ended when the LSD and THC groups got re-organized.<br />
That was a bad trip, dude.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1321865">
				<div id="div-comment-1321865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mantas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321865">
			January 22, 2018 at 8:28 am</a>		</div>

		<p>Option 1a would be to use an annotated tag (&#8220;git tag -a &#8230;&#8221;).</p>
<p>Option 1b, avoid creating a local branch entirely: start with a detached head (e.g. &#8220;git checkout &#8211;detach&#8221; or &#8220;git checkout @^{}&#8221; if you&#8217;re into punctuation), do your closing commit, and finish with &#8220;git push origin @:w/raymond/archive/blahblah&#8221;.</p>
<p>Option 1b-prime, if you only want a local copy of that branch, finish with &#8220;git branch refs/archive/blahblah&#8221; instead. Refs not under &#8220;refs/heads/&#8221; won&#8217;t be considered branches, and won&#8217;t show up in the list.</p>
<p>(&#8220;@&#8221; being a relatively recent alias for &#8220;HEAD&#8221;)</p>
<p>Option 2a, record the original commit (patch base) with &#8211;base.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1321875">
				<div id="div-comment-1321875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Piotr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321875">
			January 22, 2018 at 8:35 am</a>		</div>

		<p>I remember sendig the whole source code to my buddy and telling him to &#8220;windiff it yourself&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1321885">
				<div id="div-comment-1321885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy Schott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321885">
			January 22, 2018 at 8:53 am</a>		</div>

		<p>Have you considered using git stash (<a href="https://git-scm.com/docs/git-stash" rel="nofollow">https://git-scm.com/docs/git-stash</a>)? The main downside is that stash changes are local only. They are standard commits in git, so they do keep track of the commit they were based off of.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1322585">
				<div id="div-comment-1322585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322585">
			January 26, 2018 at 10:23 am</a>		</div>

		<p>Stashes being local-only means that you can&#8217;t attach them to bugs for review in Ship Room.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1321915">
				<div id="div-comment-1321915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sam Harrington</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321915">
			January 22, 2018 at 9:16 am</a>		</div>

		<p>My pack of choice these days is git diff -U99999. It doesn&#8217;t have the base commit, but has the benefit of having all the file context, at least. I mostly used sd pack as a poor man&#8217;s git branch, though, so I don&#8217;t reach for a pack equivalent very often anymore.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-thals1992 even thread-odd thread-alt depth-1" id="comment-1321955">
				<div id="div-comment-1321955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/thals1992' rel='external nofollow' class='url'>thals1992</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321955">
			January 22, 2018 at 10:26 am</a>		</div>

		<p>I never would have thought Ray would reference WinWorldPC here.<br />
The details about the application there is great, haha.<br />
&#8220;Vendor &#8211; Some drunk guy at Microsoft&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1321975">
				<div id="div-comment-1321975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Emil M</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321975">
			January 22, 2018 at 12:44 pm</a>		</div>

		<p>VSTS PRs can be opend as CodeFlow reviews and I always assumed that it uses the same format as sdpack &#8211; just like with sd repos.<br />
Btw Raymond: I will be forrever grateful for some tips you authored about how to clone Sd repos faster &#8211; I got back a few years from that :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1321995">
				<div id="div-comment-1321995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">roeland</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321995">
			January 22, 2018 at 3:56 pm</a>		</div>

		<p>“The downside of this is that patches decay as the code changes”</p>
<p>But that&#8217;s a downside in general of storing a packed change, not specific to diffs or any other format. Or what did I miss?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1322595">
				<div id="div-comment-1322595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322595">
			January 26, 2018 at 10:26 am</a>		</div>

		<p>All of the change-packing tools discussed in this article create packages that do not decay over time, so it&#8217;s not a problem inherent to packing.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1 parent" id="comment-1321997">
				<div id="div-comment-1321997" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1321997">
			January 22, 2018 at 7:08 pm</a>		</div>

		<p>&#8220;Shelving&#8221; was one of my favorite feature in TFS back in one of my previous companies. It allows me to share sample code on how to solve a blocking issue quickly without checking in.</p>
<p>And it also allow me to conveniently temporarily shelf all the changes I&#8217;m working on while I need to deploy the application. (Yup, we didn&#8217;t have a central build machine, and we publish code to production server via *horror* development machine.) This together with XSLT transformation for config files kind of work for us without experiencing any problem.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong odd alt depth-2" id="comment-1322005">
				<div id="div-comment-1322005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322005">
			January 22, 2018 at 8:34 pm</a>		</div>

		<p>Apparently Git version of TFS have shelveset support too.<br />
<a href="https://github.com/git-tfs/git-tfs/blob/master/doc/usecases/working_with_shelvesets.md" rel="nofollow">https://github.com/git-tfs/git-tfs/blob/master/doc/usecases/working_with_shelvesets.md</a></p>
<p>Not sure whether they added it to Git version of VSTS too.<br />
<a href="https://docs.microsoft.com/en-us/vsts/tfvc/suspend-your-work-manage-your-shelvesets" rel="nofollow">https://docs.microsoft.com/en-us/vsts/tfvc/suspend-your-work-manage-your-shelvesets</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1322045">
				<div id="div-comment-1322045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dox.com.au' rel='external nofollow' class='url'>Ian Yates</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322045">
			January 23, 2018 at 3:12 am</a>		</div>

		<p>TFS  source control isn&#8217;t bad for the style of system it is &#8211; centralised. Shelving is handy. It&#8217;s also dead simple, which for a small team is nice.<br />
I admire GIT, and think it&#8217;s awesome for the open source software I follow and for larger teams, but TFS is doing pretty well for us at the moment. Had I started our repo today I probably would  have picked Git, but don&#8217;t regret (yet) choosing TFS several years ago.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1322065">
				<div id="div-comment-1322065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322065">
			January 23, 2018 at 4:33 am</a>		</div>

		<p>As far as I can see (and I sadly had to suffer with TFSVC myself in the past) shelving is nothing but an incredibly, incredibly limited version of git&#8217;s branch system. You can do anything you want with branches that you can do with shelvesets.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1322085">
				<div id="div-comment-1322085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jaloopa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322085">
			January 23, 2018 at 5:34 am</a>		</div>

		<p>Shelving is one of the main reasons my team and I are reluctant to move off TFS onto Git as some people are proposing. Every supposed benefit of Git is either irrelevant to us (offline working means nothing when your development machine is permanently connected via a network cable) or is a slightly different way to do something we already do fine. Shelving, though, appears to have no real equivalent in Git and we use it a lot.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1322745">
				<div id="div-comment-1322745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322745">
			January 27, 2018 at 4:42 am</a>		</div>

		<p>I don&#8217;t understand why you wouldn&#8217;t just use branches for sharing code between people. </p>
<p>Branches in git are:<br />
&#8211; as fast to create as shelvesets with TFSVC<br />
&#8211; can have more than a single commit<br />
&#8211; applying them to another branch is much easier than doing so with shelvesets (go and try to apply a shelveset if you&#8217;ve moved a file, good luck)</p>
<p>The only reason I can see why TFSVC has shelvesets and branches is because creating new branches for TFSVC takes ages while shelvesets can be created with a single button click. But that&#8217;s just applying a bandaid &#8211; just make creating new branches as fast as creating a shelveset!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even depth-2" id="comment-1322145">
				<div id="div-comment-1322145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322145">
			January 24, 2018 at 1:47 am</a>		</div>

		<p>So the &#8220;git&#8221; equivalent of &#8220;shelving&#8221; is &#8220;stash&#8221; ( <a href="https://docs.microsoft.com/en-us/vsts/git/tutorial/howto#stash" rel="nofollow">https://docs.microsoft.com/en-us/vsts/git/tutorial/howto#stash</a> )</p>
<p>But it doesn&#8217;t provide convenient way to share it to others without committing. The closest thing you can get is to push it to remote branch. ( <a href="https://superuser.com/questions/409228/how-can-i-share-a-git-stash" rel="nofollow">https://superuser.com/questions/409228/how-can-i-share-a-git-stash</a>  )</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt depth-2" id="comment-1322235">
				<div id="div-comment-1322235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322235">
			January 25, 2018 at 1:42 am</a>		</div>

		<p>One feature I feel is really missing from TFS&#8217;s shelving system is unshelve-and-merge-changes (specifically for the case where you &#8220;store some changes for later&#8221;, then some other changes are made to the file, and then you decide to unshelve your changes to try and integrate them).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1322015">
				<div id="div-comment-1322015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322015">
			January 22, 2018 at 9:36 pm</a>		</div>

		<p>When generating patches, I sometimes find it useful to pass a -U9999 option. This preserves all the context. (For ridiculously big files, add a single 9. For humongous files, add two.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1322025">
				<div id="div-comment-1322025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322025">
			January 23, 2018 at 2:36 am</a>		</div>

		<p>I&#8217;ve used both Mercurial and git. Mercurial has two diff output formats, patch (which doesn&#8217;t support binary files etc.) and git. The patch format includes the base revision, but the git format doesn&#8217;t (&#8220;because git doesn&#8217;t&#8221;, sadly). The alternative is the export format, but that requires you to commit first, which then means having to uncommit later, if you don&#8217;t want it to clutter up your clone. Meanwhile with git you&#8217;re basically forced to commit to do anything useful, but at least uncommitting is easier.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1322715">
				<div id="div-comment-1322715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322715">
			January 27, 2018 at 3:25 am</a>		</div>

		<p>Sorry for the duplicate post; it looked as if the original attempt didn&#8217;t go through.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-3" id="comment-1322775">
				<div id="div-comment-1322775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322775">
			January 27, 2018 at 7:46 am</a>		</div>

		<p>There&#8217;s a problem with the blog system right now where all comments are being flagged as spam, and I have to go fish them out of the spam bin. Sorry for the delay.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1322055">
				<div id="div-comment-1322055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322055">
			January 23, 2018 at 4:31 am</a>		</div>

		<p>Huh, I think I might just be able to help Raymond for once :-) </p>
<p>Haven&#8217;t tried this myself, because all my tools support a folder structure for branches (so having everything in private/name/archive/ works just fine &#8211;  I just keep the archive folder minimized). </p>
<p>Git generally works with refs which are pointers to specific commits. Everything under refs/heads is by default considered to be a branch. Simple tags for example are pretty much the same, they&#8217;re just listed under refs/tags. </p>
<p>So one solution might just be to tag your feature branches and then delete the branch &#8211; you can easily create a branch from the tag later on. That&#8217;s not perfect either if you use tags for real purposes, so instead just create your own folder structure!</p>
<p>git update-ref refs/hidden/foo foo # create a new ref that won&#8217;t show up as a branch from foo branch<br />
git branch -D foo # delete the foo branch , since we don&#8217;t want it any more</p>
<p>You can see what refs exist with git show-ref. </p>
<p>You&#8217;ll want to push the refs up to the server to make sure they won&#8217;t get lost if your computer crashes. To get them back you&#8217;ll have to explicitly tell git to fetch them &#8211; so it&#8217;s not like you&#8217;ll create unnecessary garbage for everyone else either. </p>
<p>As I said, never needed this, but <a href="https://git-scm.com/book/en/v2/Git-Internals-The-Refspec" rel="nofollow">https://git-scm.com/book/en/v2/Git-Internals-The-Refspec</a> should be a good starting point for more details.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1322095">
				<div id="div-comment-1322095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Groß</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322095">
			January 23, 2018 at 6:05 am</a>		</div>

		<p>Did you consider git merge &#8211;ours experimental/branch to merge experiments into some kind of storage branch but immediately undo all the effects of experimental/branch? This would allow you to trace back the experiment, but not clutter your (remote) branches with more and more experiments being stashed away.</p>
<p>git merge &#8211;ours works like a normal merge, that also includes the git revert of the merged branch&#8217;s changes, so these changes actually won&#8217;t end up in your integration branch. You can write a custom commit message making it easier to find things later.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1322615">
				<div id="div-comment-1322615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322615">
			January 26, 2018 at 10:33 am</a>		</div>

		<p>That&#8217;s an interesting idea. Each commit in the experimental branch is an archived branch. It does make searching for stuff harder, and you can&#8217;t delete an archived branch. This would mess up a workflow where the archived branches are &#8220;Bug fixes I want to take once the tree opens back up&#8221;, because you would have to have some other way of keeping track of which bug fixes have been taken and which are still waiting to be done.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1322105">
				<div id="div-comment-1322105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322105">
			January 23, 2018 at 8:31 am</a>		</div>

		<p>Huh, I think I might just be able to help Raymond for once :-) </p>
<p>Haven&#8217;t tried this myself, because all my tools support a folder structure for branches (so having everything in private/name/archive/ works just fine &#8211;  I just keep the archive folder minimized). </p>
<p>Git generally works with refs which are pointers to specific commits. Everything under refs/heads is by default considered to be a branch. Simple tags for example are pretty much the same, they&#8217;re just listed under refs/tags. </p>
<p>So one solution might just be to tag your feature branches and then delete the branch &#8211; you can easily create a branch from the tag later on. That&#8217;s not perfect either if you use tags for real purposes, so instead just create your own folder structure!</p>
<p>git update-ref refs/hidden/foo foo # create a new ref that won&#8217;t show up as a branch from foo branch<br />
git branch -D foo # delete the foo branch , since we don&#8217;t want it any more</p>
<p>You can see what refs exist with git show-ref. </p>
<p>You&#8217;ll want to push the refs up to the server to make sure they won&#8217;t get lost if your computer crashes. To get them back you&#8217;ll have to explicitly tell git to fetch them &#8211; so it&#8217;s not like you&#8217;ll create unnecessary garbage for everyone else either. </p>
<p> <a href="https://git-scm.com/book/en/v2/Git-Internals-The-Refspec" rel="nofollow">https://git-scm.com/book/en/v2/Git-Internals-The-Refspec</a> should be a good starting point for more details.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1322565">
				<div id="div-comment-1322565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322565">
			January 26, 2018 at 10:02 am</a>		</div>

		<p>Even though the branches can be collapsed in the UI, they still show up in &#8220;git branch -a&#8221;. And the tags trick assumes that your repo allows users to create their own tags. (Often, tag-creation is restricted to release teams.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1322125">
				<div id="div-comment-1322125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Petteri Aimonen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322125">
			January 23, 2018 at 10:19 am</a>		</div>

		<p>While reading all of this, I was thinking &#8220;what&#8217;s wrong with a simple diff&#8221;. So I guess I don&#8217;t understand everything about the problem.</p>
<p>But as for the reasons mentioned why saving a patch is not enough, it seems to boil down to &#8220;not enough context&#8221;. So just use &#8220;git diff -U20&#8221; to get more context?</p>
<p>Also if later turns out patch doesn&#8217;t apply and you can&#8217;t figure out what the code used to look like, it will have the git hash in the header so you can find the old revision it was based on.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1322165">
				<div id="div-comment-1322165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322165">
			January 24, 2018 at 7:55 am</a>		</div>

		<p>&gt; Option 1: Put a commit at the tip of the branch summarizing what this branch is about, and then abandon the branch but don&#8217;t delete it.</p>
<p>Option 1b is to do the same thing with a tag.</p>
<p>To me that seems to fit the use cases of the two things better in a generic sense, but whether it fits *your* use of those features I can&#8217;t answer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1322275">
				<div id="div-comment-1322275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SoonerRoadie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322275">
			January 25, 2018 at 7:30 am</a>		</div>

		<p>I&#8217;m very curious about bbpack. Were the source files embedded within the batch file? How would one go about doing that? It seems like a very useful think to be able to do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1322415">
				<div id="div-comment-1322415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322415">
			January 25, 2018 at 1:01 pm</a>		</div>

		<p>[I thought I submitted this yesterday, but maybe I didn&#8217;t.]</p>
<p>&#8220;Option 1: Put a commit at the tip of the branch summarizing what this branch is about, and then abandon the branch but don&#8217;t delete it.&#8217;</p>
<p>Option 1b, very similar, is to use a tag instead of a branch.</p>
<p>As generic advice that seems to fit the use cases of each better, but whether it does in any individual case is kind of up to the conventions you already have for using them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1322485">
				<div id="div-comment-1322485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322485">
			January 25, 2018 at 5:08 pm</a>		</div>

		<p>For less complicated things, I just use `git add -p` to walk around my broken junk or cut-save-commit-undo to check in good stuff while keeping broken stuff local.</p>
<p>For more complex feature, since VS2017&#8217;s refactor support is smart enough to read comments, I generally leave in/commit my half-baked broken code commented out in my dev branch. I usually have one or more &#8220;cleanup&#8221; or &#8220;remove stale code&#8221; commits before merging to master or doing a PR (and, if needed, will squash those commits in a fast-forwarded/cherry-picked &#8220;implementfeature&#8221; branch* so as not to advertise my stupid idea), so I&#8217;ll remove it all then. In the end, my commented-out code, in whatever branch, will get matched in VS refactoring and won&#8217;t go &#8220;out of sight, out of mind&#8221; unless I decide to stop using the branch with the commented code in it and that branch need never be seen by anyone working off master.</p>
<p>* As opposed to my usual &#8220;implement_feature&#8221; name scheme.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1322525">
				<div id="div-comment-1322525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180122-00/?p=97855#comment-1322525">
			January 26, 2018 at 3:43 am</a>		</div>

		<p>I&#8217;ve used both Mercurial and git. Mercurial has two diff output formats, patch (which doesn&#8217;t support binary files etc.) and git. The patch format includes the base revision, but the git format doesn&#8217;t (&#8220;because git doesn&#8217;t include it in its diff output&#8221;, sadly). The alternative is the export format, but that requires you to commit first, which then means having to uncommit later, if you don&#8217;t want it to clutter up your clone. Meanwhile with git you&#8217;re basically forced to commit to do anything useful, but at least uncommitting is easier.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

