<html>
<head>
<title>Playing with the Windows Animation Manager: Fixing a sample</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Playing with the Windows Animation Manager: Fixing a sample</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 14, 2013 / year-entry #73</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130314-00/?p=4953</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Windows 7 provides a component known as the Windows Animation Manager, known to some people by its acronym WAM, pronounced "wham". There are some nice sample programs for WAM on MSDN, but for some reason, the authors of the samples decided to animate the three color components of a resultant color. Because apparently the authors of...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Windows&nbsp;7 provides a component known as the
<a HREF="http://msdn.microsoft.com/en-us/library/dd371981.aspx">
Windows Animation Manager</a>,
known to some people by its acronym WAM, pronounced "wham".
There are
<a HREF="http://archive.msdn.microsoft.com/animationmanager">
some nice sample programs for WAM on MSDN</a>,
but for some reason, the authors of the samples decided
to animate the three color components of a resultant color.
</p>
<p>
Because apparently the authors of those sample programs
can look at a color and say,
"Oh, clearly the red component of this color increases
gradually at first, then speeds up its rate of increase,
and then slows back down until it reaches its final value;
while simultaneously the blue component is doing the opposite,
but over a shorter time span,
and the green component is remaining fixed."
</p>
<p>
Today's exercise is to fix the sample program so you can actually
<i>see</i> and <i>understand</i> what WAM is doing,
rather than just watching psychedelic colors change
and saying,
"Gee, that's pretty."
</p>
<p>
But first, some background:
</p>
<p>
Windows Animation is a component which manipulates <i>variables</i>.
A <i>variable</i> is a number which varies over time.
You tell Windows Animation things like
"I would like you to animate this variable from 1 to 10 over
the next 7 seconds."
You can then interrogate the variable for its current value,
and it might say "Right now, the value is 6."
</p>
<p>
The idea is that each of these variables is connected to some
visual property, like the position of an object.
When you paint the object, you consult the current value of the
variable to find out where you should draw it.
</p>
<p>
One of the annoying bits about Windows Animation is that you have
to set up a bunch of stuff just to get things started.
You need an <i>animation manager</i>,
which is the object that runs the show.
You also need an <i>animation timer</i>
whose job is to tell the animation manager what time it is.
(Under normal circumstances, you would use the default timer,
which records real-world time,
but you might want to replace it with
a special timer for debugging that runs at half-speed,
or maybe one which
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/04/07/9534758.aspx">
varies its speed based on how fast you clap</a>.)
</p>
<p>
Okay, back to fixing the sample.
</p>
<p>
Start with the
<a HREF="http://archive.msdn.microsoft.com/animationmanager">
Timer-Driven Animation</a>
and make these changes:
</p>
<pre>
                // disable the initial animation
                <font COLOR=red><strike>// Fade in with Red</strike>
                <strike>// hr = ChangeColor(COLOR_MAX, COLOR_MIN, COLOR_MIN);</strike></font>

HRESULT CMainWindow::DrawBackground(
    Graphics &amp;graphics,
    const RectF &amp;rectPaint
    )
{
    // Get the RGB animation variable values

    INT32 red;
    HRESULT hr = m_pAnimationVariableRed-&gt;GetIntegerValue(
        &amp;red
        );
    if (SUCCEEDED(hr))
    {
        INT32 green;
        hr = m_pAnimationVariableGreen-&gt;GetIntegerValue(
            &amp;green
            );
        if (SUCCEEDED(hr))
        {
            INT32 blue;
            hr = m_pAnimationVariableBlue-&gt;GetIntegerValue(
                &amp;blue
                );
            if (SUCCEEDED(hr))
            {
                <font COLOR=blue>// Replace the drawing code as follows
                SolidBrush brushBackground(Color(255, 255, 255));
                hr = HrFromStatus(graphics.FillRectangle(
                    &amp;brushBackground,
                    rectPaint
                    ));

                SolidBrush brushCircle(Color(0, 0, 0));
                hr = HrFromStatus(graphics.FillEllipse(
                    &amp;brushCircle,
                    red, green, 10, 10
                    ));</font>
            }
        }
    }

    return hr;
}
</pre>
<p>
Instead of drawing a psychedelic background color,
I draw a small
<a HREF="http://www.piday.org/">
circle</a>
using the old <code>red</code> value
as the x-coordinate, and the old <code>green</code> value
as the y-coordinate.
I didn't rename the variables or get rid of the unused
<code>blue</code> variable
because I wanted to make as few changes as possible.
</p>
<p>
Run this program, and click to make the circle move.
Observe that when the circle moves, it starts slowly,
then accelerates, and then decelerates as it gets closer
to its final location.
What's more, if you click while the circle is still moving,
the circle demonstrates <i>inertia</i> as it turns to
head toward its new target location.
</p>
<p>
I bet you never noticed the acceleration, deceleration, or
inertia
in the original background-color version.
</p>
<p>
With a little bit of work, you can make the sample even more
interesting by making the circle go to <i>where you clicked</i>.
It looks like a lot of work when I spell it out below,
but most of it consists of <i>deleting</i> code.
</p>
<p>
First, do a search/replace and rename
<code>m_pAnimationVariableRed</code> to
<code>m_pAnimationVariableX</code>,
and rename
<code>m_pAnimationVariableGreen</code> to
<code>m_pAnimationVariableY</code>.
Delete
<code>m_pAnimationVariableBlue</code> entirely,
as well as any references to it.
I decided to just bite the bullet and deal with the
consequences of renaming/deleting variables.
</p>
<p>
Now we can simplify the
<code>CMain&shy;Window::<wbr>Create&shy;Animation&shy;Variables</code>
method so all it does is create the two coordinate variables.</p>
<pre>
HRESULT CMainWindow::CreateAnimationVariables()
{
    <font COLOR=blue>HRESULT hr = m_pAnimationManager-&gt;CreateAnimationVariable(
        0,
        &amp;m_pAnimationVariableX
        );
    if (SUCCEEDED(hr))
    {
        hr = m_pAnimationManager-&gt;CreateAnimationVariable(
            0,
            &amp;m_pAnimationVariableY
            );
    }</font>

    return hr;
}
</pre>
<p>
We want the circle to move when you click the mouse,
so let's do that.
Delete <code>CMain&shy;Window::<wbr>On&shy;LButton&shy;Down</code>
and change the window procedure so that clicks move the circle.
</p>
<pre>
LRESULT CALLBACK CMainWindow::WndProc(
    HWND hwnd,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam
    )
{
    ...
        case WM_LBUTTONDOWN:
            {
                pMainWindow-&gt;<font COLOR=blue>ChangePos(
                    (SHORT)LOWORD(lParam),
                    (SHORT)HIWORD(lParam)
                 </font>);
            }
            return MESSAGE_PROCESSED;
    ...
}
</pre>
<p>
And rename the member function
<code>Change&shy;Color</code> to
<code>Change&shy;Pos</code>,
and instead of taking red and green,
have it take x and y.
</p>
<pre>
HRESULT CMainWindow::<font COLOR=blue>ChangePos(
    INT x,
    INT y</font>
    )
{
    const UI_ANIMATION_SECONDS DURATION = 0.5;
    const DOUBLE ACCELERATION_RATIO = 0.5;
    const DOUBLE DECELERATION_RATIO = 0.5;

    // Create a storyboard

    IUIAnimationStoryboard *pStoryboard = NULL;
    HRESULT hr = m_pAnimationManager-&gt;CreateStoryboard(
        &amp;pStoryboard
        );
    if (SUCCEEDED(hr))
    {
        // Create transitions for the <font COLOR=blue>position</font> animation variables

        IUIAnimationTransition *pTransition<font COLOR=blue>X</font>;
        hr = m_pTransitionLibrary-&gt;CreateAccelerateDecelerateTransition(
            DURATION,
            <font COLOR=blue>x</font>,
            ACCELERATION_RATIO,
            DECELERATION_RATIO,
            &amp;pTransition<font COLOR=blue>X</font>
            );
        if (SUCCEEDED(hr))
        {
            IUIAnimationTransition *pTransition<font COLOR=blue>Y</font>;
            hr = m_pTransitionLibrary-&gt;CreateAccelerateDecelerateTransition(
                DURATION,
                <font COLOR=blue>y</font>,
                ACCELERATION_RATIO,
                DECELERATION_RATIO,
                &amp;pTransition<font COLOR=blue>Y</font>
                );
            <font COLOR=red>// delete former "blue" transition</font>
            if (SUCCEEDED(hr))
            {
                // Add transitions to the storyboard

                hr = pStoryboard-&gt;AddTransition(
                    m_pAnimationVariable<font COLOR=blue>X</font>,
                    pTransition<font COLOR=blue>X</font>
                    );
                if (SUCCEEDED(hr))
                {
                    hr = pStoryboard-&gt;AddTransition(
                        m_pAnimationVariable<font COLOR=blue>Y</font>,
                        pTransition<font COLOR=blue>Y</font>
                        );
                    <font COLOR=red>// delete former "blue" transition</font>
                    if (SUCCEEDED(hr))
                    {
                        // Get the current time and schedule the storyboard for play
                        UI_ANIMATION_SECONDS secondsNow;
                        hr = m_pAnimationTimer-&gt;GetTime(
                            &amp;secondsNow
                            );
                        if (SUCCEEDED(hr))
                        {
                            hr = pStoryboard-&gt;Schedule(
                                secondsNow
                                );
                        }
                    }
                }

                <font COLOR=red>// delete former "blue" transition</font>

                pTransition<font COLOR=blue>Y</font>-&gt;Release();
            }

            pTransition<font COLOR=blue>X</font>-&gt;Release();
        }

        pStoryboard-&gt;Release();
    }

    return hr;
}
</pre>
<p>
Now you can click the mouse on the client area,
and the dot will chase it like a puppy.
</p>
<p>
The basic idea behind the Windows Animation Library
is that for each property you want to animate,
you associate an animation variable,
and when you want to perform the animation,
you create a transition for each variable describing
how you want the animation to proceed,
put all the transitions into a storyboard,
and then schedule the storyboard.
</p>
<p>
Of course, you can build optimizations on top of the basic idea.
For example, you might not create the animation variable until
the first time you need to animate the property.
Another optimization is invalidating only the parts of the window
that need repainting,
rather than invalidating the entire client area.
You can do this by registering a change handler on your variables:
When the change handler notifies you that a value changed,
invalidate the old position and the new position.
This will erase the old location and draw at the new location.
</p>
<p>
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/03/15/10399700.aspx">
Next time</a>, I'll build a program that animates a hundred objects,
just for fun.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1045273">
				<div id="div-comment-1045273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130314-00/?p=4953#comment-1045273">
			March 14, 2013 at 7:24 am</a>		</div>

		<p>&nbsp; &nbsp;hr = m_pAnimationVariableRed-&gt;GetIntegerValue(&amp;red);</p>
<p>&nbsp; &nbsp;if (SUCCEEDED(hr))</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;hr = m_pAnimationVariableGreen-&gt;GetIntegerValue(&amp;green);</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;if (SUCCEEDED(hr))</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;hr = m_pAnimationVariableBlue-&gt;GetIntegerValue(&amp;blue);</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (SUCCEEDED(hr))</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Draw()</p>
<p>If you&#39;re going to animate 100 objects then I&#39;m going to need a wider monitor.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1045293">
				<div id="div-comment-1045293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130314-00/?p=4953#comment-1045293">
			March 14, 2013 at 7:54 am</a>		</div>

		<p>&quot;One of the annoying bits about Windows Animation is that you have to set up a bunch of stuff just to get things started. You need an animation manager, which is the object that runs the show. You also need an animation timer whose job is to tell the animation manager what time it is.&quot;</p>
<p>Welcome to 3D world Microsoft. You need a &quot;scene&quot; where the show takes places. You need a &quot;camera&quot;, the very thing that you see things through. You need light(s) to illuminate the objects / or you can embed the lights inside the objects. So NO Ray, those annoying bits are necessary. Use Ray&#39;s example on WMA folks, and you will make one step closer to 3D programming. I hardly can wait to shed off all the controls in WinForms and the only thing left in the world to be WPF (or the equivalent in other OS&#39;es)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1045303">
				<div id="div-comment-1045303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kawa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130314-00/?p=4953#comment-1045303">
			March 14, 2013 at 9:22 am</a>		</div>

		<p>I don&#39;t usually write in C++, but when I do I have experts like Chen hold my hand for every line.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1045323">
				<div id="div-comment-1045323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">S&#246;k&#246;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130314-00/?p=4953#comment-1045323">
			March 14, 2013 at 10:10 am</a>		</div>

		<p>@Danny: &quot;annoying&quot; != &quot;unnecessary&quot;. Also, Direct3D (<a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Microsoft_Direct3D" rel="nofollow">en.wikipedia.org/&#8230;/Microsoft_Direct3D</a>). You (apparently) heard it here first.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1045333">
				<div id="div-comment-1045333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dsn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130314-00/?p=4953#comment-1045333">
			March 14, 2013 at 10:14 am</a>		</div>

		<p>@jon</p>
<p>If only there was some kind of looping mechanism in C that Raymond could use :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1045343">
				<div id="div-comment-1045343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130314-00/?p=4953#comment-1045343">
			March 14, 2013 at 11:21 am</a>		</div>

		<p>@Jon: All of my COM-related code looks like that. I tried some rather elaborate alternatives having to do with templates and exceptions, but the results tended to be slower, more fragile, more difficult for other developers to modify &amp; understand, or some combination of all the preceding. It ends up being simpler the way Raymond coded it above, I think.</p>
<p>One alternative I do use, if the nesting gets too deep or modifications are likely in the middle, is to use goto.</p>
<p>(Now I&#39;ve done it. I&#39;ve started a holy war. Sorry, Raymond.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1045363">
				<div id="div-comment-1045363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130314-00/?p=4953#comment-1045363">
			March 14, 2013 at 12:05 pm</a>		</div>

		<p>COM is just ugly to program. &nbsp;Personally I use a rather simple macro to convert HR failures to exceptions as well as logging the line of code where the error occurred. &nbsp;</p>
<p>Something like:</p>
<p>HR(m_pAnimationVariableRed-&gt;GetIntegerValue(&amp;red));</p>
<p>HR(m_pAnimationVariableGreen-&gt;GetIntegerValue(&amp;green));</p>
<p>HR(m_pAnimationVariableGreen-&gt;GetIntegerValue(&amp;blue));</p>
<p>I find much easier to read, if performance isn&#39;t critical and I am already using exceptions.</p>
<p>Note: &nbsp;If you don&#39;t want exceptions, you can get the same effect without all the indenting by simply:</p>
<p>hr = m_pAnimationVariableRed-&gt;GetIntegerValue(&amp;red);</p>
<p>if (SUCCEEDED(hr))</p>
<p>&nbsp; &nbsp;hr = m_pAnimationVariableGreen-&gt;GetIntegerValue(&amp;green);</p>
<p>if (SUCCEEDED(hr))</p>
<p>&nbsp; &nbsp;hr = m_pAnimationVariableBlue-&gt;GetIntegerValue(&amp;blue);</p>
<p>if (SUCCEEDED(hr))</p>
<p>&nbsp; &nbsp;Draw()</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1045393">
				<div id="div-comment-1045393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130314-00/?p=4953#comment-1045393">
			March 15, 2013 at 12:01 am</a>		</div>

		<p>@Paul M. Parks:</p>
<p>The use of goto won&#39;t turn into a big a thing as you may think, especially not in this situation. The issues with goto stemmed from people using it everywhere resulting in unreadable code. The use of goto here allows you to jump over all of the function calls that will never get executed when you are in a failed condition, so it simplifies the code and doesn&#39;t make it any harder to read or follow. I really don&#39;t think you will get attacked by a velociraptor here.</p>
<p>I also think the situation has changed drastically since goto obtained the stigma that it still has. Modern languages are a totally different beast. This means that the need for goto has decreased dramatically too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1045403">
				<div id="div-comment-1045403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon R</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130314-00/?p=4953#comment-1045403">
			March 15, 2013 at 5:35 am</a>		</div>

		<p>if (!SUCCEEDED(hr))</p>
<p>&nbsp; &nbsp;return hr;</p>
<p>(Assuming the function signature allows it to return the status)</p>
<p>???</p>
<div class="post">[<em>That requires RAII, which the sample code doesn&#39;t use. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1045413">
				<div id="div-comment-1045413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130314-00/?p=4953#comment-1045413">
			March 15, 2013 at 7:07 am</a>		</div>

		<p>@Simon R: &nbsp;That&#39;s usually a safe assumption with COM programming. &nbsp;COM strongly encourages you to make your COM-related functions return HRESULTs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1045423">
				<div id="div-comment-1045423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130314-00/?p=4953#comment-1045423">
			March 15, 2013 at 8:47 am</a>		</div>

		<p>@Crescens2k: Yeah, that&#39;s pretty much what I was saying.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1045433">
				<div id="div-comment-1045433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130314-00/?p=4953#comment-1045433">
			March 16, 2013 at 2:23 am</a>		</div>

		<p>@SÃ¶kÃ¶</p>
<p>Pff, you missed my post by a mile. Read again and tell me when you stumble upon &quot;WPF&quot; word then go to your snarky comment about Direct3D and cry. Oh, you might read this as well: <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Windows_Presentation_Foundation" rel="nofollow">en.wikipedia.org/&#8230;/Windows_Presentation_Foundation</a></p>
<p>But lemme quote from the beginning of article: &quot;Rather than relying on the older GDI subsystem, WPF utilizes DirectX&quot;. Now you can go and cry.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

