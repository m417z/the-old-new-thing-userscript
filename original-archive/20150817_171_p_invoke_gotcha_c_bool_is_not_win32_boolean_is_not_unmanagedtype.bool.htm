<html>
<head>
<title>p/invoke gotcha: C++ bool is not Win32 BOOLEAN is not UnmanagedType.Bool</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>p/invoke gotcha: C++ bool is not Win32 BOOLEAN is not UnmanagedType.Bool</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 17, 2015 / year-entry #172</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Welcome to CLR Week. I hope you enjoy your stay. A customer reported that their p/invoke was not working.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Welcome to CLR Week.
I hope you enjoy your stay.
</p>
<p>
A customer reported that their p/invoke was not working.
<span id="more-91801"></span>
</p>
<blockquote CLASS=q>
<p>
We aren't getting the proper return codes from the
<code>Audit&shy;Set&shy;System&shy;Policy</code>.
When the call succeeds, the return code is 1, as expected.
But in our tests,
when we force the call to fail (insufficient access),
the return code is not zero.
Instead, the return code is some value of the form 0xFFxxxxxx,
where the x's vary, but the high byte is always 0xFF.
</p>
<p>
For reference, the DllImport declaration we are using is</p>
<pre>
[DllImport("advapi32.dll", SetLastError=true)]
public static extern UInt32 AuditSetSystemPolicy(
    IntPtr pAuditPolicy,
    UInt32 policyCount);
</pre>
<p>
The corresponding Win32 declaration is
</p>
<pre>
BOOLEAN WINAPI <a HREF="http://msdn.microsoft.com/en-us/library/windows/desktop/aa375712(v=vs.85).aspx">AuditSetSystemPolicy</a>(
  _In_  PCAUDIT_POLICY_INFORMATION pAuditPolicy,
  _In_  ULONG PolicyCount
);
</pre>
</blockquote>
<p>
Alas, the customer fell into one of the
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/08/13/9867383.aspx">
common gotchas when writing p/invoke</a>:
They confused <code>BOOLEAN</code>
and
<code>BOOL</code>.
</p>
<p>
<code>BOOL</code> is a 32-bit integer,
whereas
<code>BOOLEAN</code> is an 8-bit integer.
</p>
<p>
Since they were marshaling the return code as a
<code>UInt32</code>,
they were getting the byte returned by the function,
plus three bonus uninitialized garbage bytes.
If they studied more closely, they would have found that
the erroneous return codes were all of the form
<code>0xFFxxxx00</code> where the bottom 8 bits are all zero.
That's because the bottom 8 bits are the actual value;
the rest are garbage.
</p>
<p>
The correct declaration is to use
<code>Unmanaged&shy;Type.U1</code>
aka <code>byte</code>
rather than
<code>Unmanaged&shy;Type.U4</code>
aka <code>UInt32</code>.
</p>
<pre>
[DllImport("advapi32.dll", SetLastError=true)]
public static extern byte AuditSetSystemPolicy(
    IntPtr pAuditPolicy,
    UInt32 policyCount);
</pre>
<p>
The customer confirmed that switching to
<code>Unmanaged&shy;Type.U1</code>
fixed the problem.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1208581">
				<div id="div-comment-1208581" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208581">
			August 17, 2015 at 7:12 am</a>		</div>

		<p>I tend to call it a NT BOOLEAN to differentiate it from a Win32 BOOL. It always seemed to me like they unintentionally leaked out from the NT API to the public Win32 API on the usermode side&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1208571">
				<div id="div-comment-1208571" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208571">
			August 17, 2015 at 7:15 am</a>		</div>

		<p>&gt; BOOL is a 32-bit integer, whereas BOOLEAN is an 8-bit integer.</p>
<p>I&#39;d expect 8-bit values to be zero-extended or sign-extended when returned in the EAX register. Where is the garbage coming from? Or is the Win32 ABI one which doesn&#39;t have the &quot;small values passed in registers are zero-extended or sign-extended&quot; rule?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208561">
				<div id="div-comment-1208561" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr&#237;guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208561">
			August 17, 2015 at 7:20 am</a>		</div>

		<p>@Cesar: afaik, no calling convention in x86/x64 sign-extends values smaller than the register whre they are passed, so the garbage comes from whatever the function has left in EAX before storing the return value.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1208551">
				<div id="div-comment-1208551" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208551">
			August 17, 2015 at 7:24 am</a>		</div>

		<p>@Cesar: The garbage probably comes from instructions like SETZ AL where only the LSB of EAX is changed.</p>
<p>@Raymond: Do you know why BOOL is INT sized and not BYTE sized? Alignment? Avoiding having to use &quot;return !!ptrThatIsNullOnFailure;&quot;? (Before the 64-bit era)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208541">
				<div id="div-comment-1208541" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scott F</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208541">
			August 17, 2015 at 7:24 am</a>		</div>

		<p>Or you could set the return type as bool in your P/Invoke definition and set the MashalAsAttribute on the return as UnmanagedType.I1. &nbsp;That would give you a more natural interface on the managed side.</p>
<p>[DllImport(&quot;advapi32.dll&quot;, SetLastError=true)]</p>
<p>[return: MarshalAs(UnmanagedType.I1)]</p>
<p>public static extern bool AuditSetSystemPolicy(</p>
<p> &nbsp; &nbsp;IntPtr pAuditPolicy,</p>
<p> &nbsp; &nbsp;UInt32 policyCount);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1208531">
				<div id="div-comment-1208531" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208531">
			August 17, 2015 at 7:27 am</a>		</div>

		<p>@Myself: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2011/03/28/10146459.aspx">blogs.msdn.com/&#8230;/10146459.aspx</a> so I guess MS did not really make the choice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208521">
				<div id="div-comment-1208521" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208521">
			August 17, 2015 at 7:37 am</a>		</div>

		<p>I&#39;m going to leave this here: <a rel="nofollow" target="_new" href="http://pinvoke.net/">http://pinvoke.net/</a></p>
<p>Don&#39;t write your own error-filled DllImport declarations from scratch when someone else already figured it out!</p>
<p>Of course some of those aren&#39;t optimal (for example, some enums are typed as ints) and might require some refactoring or cleanup, but it&#39;s a good starting point and can at least help you determine if your p/invoke call is wrong or the way you&#39;re calling the function is wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1208511">
				<div id="div-comment-1208511" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208511">
			August 17, 2015 at 7:46 am</a>		</div>

		<p>Couldn&#39;t Microsoft simply release ready-made p/invoke declarations for their win32 headers?</p>
<p>(That&#39;s a question, not a hidden request. I have no idea about .NET stuff)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208501">
				<div id="div-comment-1208501" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208501">
			August 17, 2015 at 7:49 am</a>		</div>

		<p>So I went and took a look at the latest version of the AMD64 ABI. It has no mention of zero or sign extension on function call/return, other than _Bool (C++&#39;s bool) being zero-extended&#8230; to 8 bits (and says in a footnote that the rest of the register is garbage). I&#39;d guess Microsoft&#39;s x86 ABIs are similar.</p>
<p>I probably got confused by a RISC ABI I&#39;ve been reading recently, which does require zero/sign extension. The difference is probably because x86 processors have a lot of instructions which operate directly in the lower byte of a register, while in RISC processors most instructions can only operate in the whole register.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1208491">
				<div id="div-comment-1208491" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wear</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208491">
			August 17, 2015 at 9:15 am</a>		</div>

		<p><a rel="nofollow" target="_new" href="https://msdn.microsoft.com/en-us/library/ms182206.aspx">msdn.microsoft.com/&#8230;/ms182206.aspx</a></p>
<p>Huh, I wonder if they originally had it returning a bool and then changed it to UInt32 to remove the warning.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com0003bffda225a672 even thread-even depth-1" id="comment-1208481">
				<div id="div-comment-1208481" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/jnm236' rel='external nofollow' class='url'>jnm236</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208481">
			August 17, 2015 at 9:22 am</a>		</div>

		<p>@The MAZZTer: I can&#39;t count the number of times the p/invoke definitions on pinvoke.net were inconsistent or subtly incorrect. As someone who has uses p/invoke heavily, I&#39;ve found it usually more efficient to type it out from the MSDN documentation by hand.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1208471">
				<div id="div-comment-1208471" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208471">
			August 17, 2015 at 9:44 am</a>		</div>

		<p>@jnm236 &#8211; I completely agree. &nbsp;I do check pinvoke.net when I need something, but I&#39;ve found errors in nearly every pinvoke signature that I&#39;ve used from that site &#8211; usually errors that only show up in 64 bit apps. &nbsp;I just fixed a bug that had lain dormant in the code since 2006 &#8211; only to manifest on Windows 8.1. &nbsp;This was a pinvoke.net signature for a win32 structure that was wrong in so many ways, I&#39;m truly shocked that it &quot;worked&quot; for 9 years before I tracked it down.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208451">
				<div id="div-comment-1208451" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208451">
			August 17, 2015 at 10:26 am</a>		</div>

		<p>@CarlD: I tell junior developers, &quot;Borrowed code is like borrowed underwear: it should be thoroughly examined before use, and even then should be assumed to harbor viruses.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1208441">
				<div id="div-comment-1208441" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208441">
			August 17, 2015 at 10:43 am</a>		</div>

		<p>I too echo AC&#39;s question (and I realize this isn&#39;t the correct place for it and don&#39;t mean to thread-crap).</p>
<p>Often times if Microsoft had released an officially sanctioned P/Invoke Signature many bugs would have been avoided (or at least had a place to point at to show why they were doing it wrong). However to play devils advocate there are plenty of reasons why they wouldn&#39;t do it:</p>
<p>* Programmers should be trusted to do the right thing and understand their libraries (as avid readers of this blog know this was asking for too much)</p>
<p>* Who should maintain it? (The .NET Group? &quot;Why show favoritism towards the Win32API and play favorites?&quot; I can hear the Slashdot screams now!)</p>
<p>* Microsoft&#39;s resources are not limitless, the time is probably better spent writing a &quot;Native&quot; managed library that better conforms to the &quot;DotNet-ness look and feel&quot;</p>
<p>I do know at one time there was a little utility released on Microsoft Downloads that automated the generation of such signatures, but I suspect it was much like TweakUI in the sense that it was &quot;without warranty&quot; and probably got canned in the last great cleansing of tools that did not have full support.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208431">
				<div id="div-comment-1208431" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scott Brickey</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208431">
			August 17, 2015 at 11:17 am</a>		</div>

		<p>@John / @AC</p>
<p>VB4 through VB6 included a nice little utility that would write the import statements for the Win32 APIs&#8230; it was wonderful.</p>
<p>As far as .Net goes, I would imagine that the header files could generate the first 80% of the code&#8230; and a little static analysis could fill in the rest (which I assume would be primarily bit flags and constants)&#8230; perhaps a table for mapping internal names to more &quot;publically understandable&quot; field names would be necessary&#8230; but I doubt it&#39;d be too terrible</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aegis03 odd alt thread-odd thread-alt depth-1" id="comment-1208421">
				<div id="div-comment-1208421" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/dmex' rel='external nofollow' class='url'>dmex</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208421">
			August 17, 2015 at 12:06 pm</a>		</div>

		<p>@John @AC</p>
<p>Funny enough, I personally added over 3000 pinvoke signatures on the msdn pages after meticulously creating the signatures&#8230; Then received a letter signed by two teams (who shall remain nameless per Raymonds Ground Rules) stating that these contributions were spam and would be deleted &#8211; after some conversations I was told to stop adding pinvoke signatures on msdn.</p>
<p>Every single one of those community contributions where removed from my profile but are still visible on the documentation:</p>
<p><a rel="nofollow" target="_new" href="https://msdn.microsoft.com/en-us/library/aa363639.aspx">msdn.microsoft.com/&#8230;/aa363639.aspx</a></p>
<p><a rel="nofollow" target="_new" href="https://msdn.microsoft.com/en-us/library/ms646303.aspx">msdn.microsoft.com/&#8230;/ms646303.aspx</a></p>
<p><a rel="nofollow" target="_new" href="https://msdn.microsoft.com/en-us/library/ms646303.aspx">msdn.microsoft.com/&#8230;/ms646303.aspx</a></p>
<p>Google also shows these pvinoke contributions:</p>
<p><a rel="nofollow" target="_new" href="https://www.google.com/search?q=site:msdn.microsoft.com+dmex">http://www.google.com/search</a></p>
<p>Just a shame they don&#39;t appear on my profile :(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aegis03 even thread-even depth-1" id="comment-1208411">
				<div id="div-comment-1208411" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/dmex' rel='external nofollow' class='url'>dmex</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208411">
			August 17, 2015 at 12:13 pm</a>		</div>

		<p>Edit: It might not be obvious but the google search link opens the msdn site results correctly :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1208391">
				<div id="div-comment-1208391" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208391">
			August 17, 2015 at 12:39 pm</a>		</div>

		<p>The number of bugs that can be traced to incorrect P/Invokes for Win32 API functions is ridiculous.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208361">
				<div id="div-comment-1208361" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208361">
			August 17, 2015 at 3:53 pm</a>		</div>

		<p>PInvoke.net is a wonderful place to get started, but, people who use it really need to know that the code there is often incorrect, or often what I consider to be inelegant code (the .NET API just &quot;feels&quot; like a literal translation from Win32, rather than something that &quot;feels&quot; like .NET).</p>
<p>When you do start with PInvoke.Net and come up with a better solution, make sure to add it back (so that I can use your better solution).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1208341">
				<div id="div-comment-1208341" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208341">
			August 17, 2015 at 6:51 pm</a>		</div>

		<p>For people who wonder whether Microsoft should release their own P/Invoke header equivalents for C#, they have done a huge part of it in form of wrapper libraries. (For example, the System.Drawing namespace is wrapper of GDI+ functions) Just that not all functions are included.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208321">
				<div id="div-comment-1208321" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Sowul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208321">
			August 17, 2015 at 8:22 pm</a>		</div>

		<p>I too have found pinvoke.net too unreliable; MSDN magazine published an article with a tool that creates the signatures (you can paste in the unmanaged signature and it will generate the pinvoke signature). &nbsp;</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/vbteam/archive/2008/03/14/making-pinvoke-easy.aspx">blogs.msdn.com/&#8230;/making-pinvoke-easy.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1208311">
				<div id="div-comment-1208311" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208311">
			August 17, 2015 at 10:50 pm</a>		</div>

		<p>@Mark Sowul: Nice to know that. I&#39;m still using the &quot;API Viewer&quot; that primary designed for VB6 and added VB.NET/C# later.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208301">
				<div id="div-comment-1208301" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jerome</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208301">
			August 17, 2015 at 11:15 pm</a>		</div>

		<p>Microsoft released something called the WindowsAPICodePack years ago, and I used it for a while but it was never updated. I used it for Win32 shell thumbnails but found it better in the end to do the pinvoke myself.</p>
<p>@Mark Sowul: I had no idea. Will check it out. What I&#39;ve done up until now is use pinvoke.net and then run Visual Studio code analysis on the code. It generally picks up the platform-related issues of code that will not work on 64-bit apps. And once you&#39;ve written a fair amount of pinvoke it gets easier, but it can be time-consuming and laborious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1208291">
				<div id="div-comment-1208291" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Crowther @ Work</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208291">
			August 18, 2015 at 12:24 am</a>		</div>

		<p>I find PInvoke.Net a great place to crib off&#8230;you just have to check the actual docs for the function, just to make sure it&#39;s not being wildly wrong again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1208231">
				<div id="div-comment-1208231" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150817-00/?p=91801#comment-1208231">
			August 18, 2015 at 9:27 am</a>		</div>

		<p>@dmex</p>
<p>Haha yes, I recognize your profile picture from many MSDN pages (shame about their redesign, makes MSDN practically unusable but I digress).</p>
<p>@Mark Sowul</p>
<p>Yes that is the tool I remember</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

