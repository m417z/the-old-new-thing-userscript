<html>
<head>
<title>Why is the maximum number of TLS slots 1088? What a strange number.</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why is the maximum number of TLS slots 1088? What a strange number.</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 12, 2017 / year-entry #159</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170712-00/?p=96585</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It's a little less strange in binary.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Commenter Max noted that
the maximum number of TLS slots is 1088
and wondered
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20160610-00/?p=93645#comment-1252095">
why such a strange number</a>.
"I mean, it does not look like a perfect number in terms of
2-based numeric system."
</p>
<p>
It looks a little better in base 2. The value is
<code>10001000000</code>
which breaks down as
1024 + 64.
</p>
<p>
When TLS was first introduced, the number of available TLS slots was
64,
and those slots were pre-allocated as part of the thread control block.
Over time, 64 slots turn out not to be enough, so the kernel team
modified the code to allocate a page of data per thread once the 65th
request for a TLS slot was made.
A page of data is 4KB, which has enough room for 1024 32-bit values.
That's why the total is 1088.
It's the original 64 slots, plus an addition 1024 slots.
</p>
<p>
Note that the statement that "the maximum number of slots is 1088"
is a statement of current implementation,
not a contractual obligation.
The contractual obligation is that there will always be at least
<code>TLS_</code><code>MINIMUM_</code><code>AVAILABLE</code> slots available.
Any more than that is just gravy.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-archangelpip even thread-even depth-1" id="comment-1301895">
				<div id="div-comment-1301895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170712-00/?p=96585#comment-1301895">
			July 12, 2017 at 7:47 am</a>		</div>

		<p>Well, my understanding of the maximum number of TLS slots available is that you know you hit it when you get TLS_OUT_OF_INDEXES or FLS_OUT_OF_INDEXES. It is also hard to put a value on how many slots have been allocated because this is a function that can be called in a DLL&#8217;s DllMain function.<br />
After digging through the CRT&#8217;s source, the CRT uses TLS slots to store per thread data too. So you just can&#8217;t assume that you will get all of the slots available anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1301905">
				<div id="div-comment-1301905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pm100</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170712-00/?p=96585#comment-1301905">
			July 12, 2017 at 8:08 am</a>		</div>

		<p>aha Thread Local Storage not Transport Layer Security.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1301935">
				<div id="div-comment-1301935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JChrisCompton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170712-00/?p=96585#comment-1301935">
			July 12, 2017 at 12:25 pm</a>		</div>

		<p>Thanks for TLS == Thread Local Storage.<br />
Saved me the trouble of looking it up  :-)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-iboyd odd alt thread-even depth-1" id="comment-1301915">
				<div id="div-comment-1301915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/IanBoyd' rel='external nofollow' class='url'>IanBoyd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170712-00/?p=96585#comment-1301915">
			July 12, 2017 at 9:34 am</a>		</div>

		<p>Because 1087 slots is insufficient, and 1089 would just be rediculous.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1301925">
				<div id="div-comment-1301925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170712-00/?p=96585#comment-1301925">
			July 12, 2017 at 10:38 am</a>		</div>

		<p>Another case of &#8220;if you have to ask what the limit is, you are doing something wrong&#8221;.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1301945">
				<div id="div-comment-1301945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170712-00/?p=96585#comment-1301945">
			July 12, 2017 at 5:56 pm</a>		</div>

		<p>64 was enough in the days of shared msvcrt but no more. Each DLL may well have its own libc thus one slot for each, and I have seen 64 DLLs in one process.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1301997">
				<div id="div-comment-1301997" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170712-00/?p=96585#comment-1301997">
			July 13, 2017 at 7:12 am</a>		</div>

		<p>Right. One slot per DLL (or component, using the broader sense of the word). Using a few tens (or even hundreds) of TLS slots is reasonable. But my point was different: if you have to ask how many slots are available, you are probably allocating more than you need (perhaps allocating several slots from the same component, or some nonsense like that).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1301955">
				<div id="div-comment-1301955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Guteniev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170712-00/?p=96585#comment-1301955">
			July 13, 2017 at 1:22 am</a>		</div>

		<p>If you have already dropped Windows XP support, then you don&#8217;t much care since you can use static TLS in all the cases.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1301985">
				<div id="div-comment-1301985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170712-00/?p=96585#comment-1301985">
			July 13, 2017 at 4:02 am</a>		</div>

		<p>Back in the days when virtual address space was a potential limiting factor on the number of threads, I once wondered what sort of issues you would run into if each thread&#8217;s stack was in its own thread local storage.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-the-wench odd alt depth-2 parent" id="comment-1301995">
				<div id="div-comment-1301995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Monochrome+Wench' rel='external nofollow' class='url'>Monochrome Wench</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170712-00/?p=96585#comment-1301995">
			July 13, 2017 at 4:22 am</a>		</div>

		<p>Would have some annoying issues attempting to share pointers to objects on the stack between threads. Whether or not you should do this sort of thing in the first place is a different matter but if you can ensure that the object stays in scope in the owner thread until all the other threads are using the object complete their work, it is a relatively safe thing to do. This would obviously break and would need to be replaced with a heap allocation if the stack was in tls.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1302006">
				<div id="div-comment-1302006" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170712-00/?p=96585#comment-1302006">
			July 13, 2017 at 7:14 am</a>		</div>

		<p>Sharing a pointer to a stack-based object with a different thread is disaster waiting to happen: stack-based objects get freed when the function that allocated them returns, and the other thread can try to access them afterwards.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1302035">
				<div id="div-comment-1302035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170712-00/?p=96585#comment-1302035">
			July 13, 2017 at 11:01 am</a>		</div>

		<p>Every time I use a TLS object the code could have been implemented with the MMU handling it &#8212; that is the address is the same across threads. Passing a TLS object to another thread is a bad idea.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1302037">
				<div id="div-comment-1302037" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170712-00/?p=96585#comment-1302037">
			July 13, 2017 at 3:25 pm</a>		</div>

		<p>I agree. Local objects are local. In general, it&#8217;s often a bad idea to share with another thread or process anything that hasn&#8217;t been intended and designed explicitly for sharing. Doing so, also, helps to keep interfaces defined and tidy, which, in turn, eases debugging and expanding the system. That&#8217;s the idea behind the whole objects-communicating-by-message-passing thing implemented in most modern UIs.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

