<html>
<head>
<title>What can I do with the HINSTANCE returned by the ShellExecute function?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What can I do with the HINSTANCE returned by the ShellExecute function?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 5, 2006 / year-entry #157</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060505-08/?p=31293</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>17</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">As we saw earlier, in 16-bit Windows, the HINSTANCE identified a program. The Win32 kernel is a complete redesign from the 16-bit kernel, introducing such concepts as "kernel objects" and "security descriptors". In particular 16-bit Windows didn't have "process IDs"; the instance handle served that purpose. That is why the WinExec and ShellExecute functions returned...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>As we saw earlier, <a href="http://blogs.msdn.com/oldnewthing/archive/2004/06/14/155107.aspx"> in 16-bit Windows, the <code>HINSTANCE</code> identified a program</a>. The Win32 kernel is a complete redesign from the 16-bit kernel, introducing such concepts as "kernel objects" and "security descriptors". In particular 16-bit Windows didn't have "process IDs"; the instance handle served that purpose. That is why the <code>WinExec</code> and <code>ShellExecute</code> functions returned an <code>HINSTANCE</code>. But in the 32-bit world, <code>HINSTANCE</code>s do not uniquely identify a running program since it is merely the base address of the executable. Since each program runs in its own address space, that value is hardly unique across the entire system.</p>
<p> So what can you do with the <code>HINSTANCE</code> returned by the <code>ShellExecute</code> function? You can check if it greater than 32, indicating that the call was successful. If the value is less than 32, then it is an error code. The precise value of the <code>HINSTANCE</code> in the greater-than-32 case is meaningless. </p>
<p> Why am I bothering to tell you things that are already covered in MSDN? Because people still have trouble putting two and two together. I keep seeing people who take the <code>HINSTANCE</code> returned by the <code>ShellExecute</code> function and hunt through all the windows in the system looking for a window with a matching <code>GWLP_HINSTANCE</code> (or <code>GWL_HINSTANCE</code> if you're still living in the unenlightened non-64-bit-compatible world). This doesn't work for the two reasons I described above. First, the precise value of the <code>HINSTANCE</code> you get back is meaningless, and even if it were meaningful, it wouldn't do you any good since the <code>HINSTANCE</code> is not unique. (In fact, the <code>HINSTANCE</code> for a process is nearly always 0x00400000, since that is the default address most linkers assign to program executables.) </p>
<p> The most common reason people want to pull this sort of trick in the first place is that they want to do something with the program that was just launched, typically, wait for it to exit, indicating that the user has closed the document. Unfortunately, this plan comes with its own pitfalls. </p>
<p> First, as we noted, the <code>HINSTANCE</code> that you get from the <code>ShellExecute</code> function is useless. You have to use the <code>ShellExecuteEx</code> function and set the <code>SEE_MASK_NOCLOSEPROCESS</code> flag in the <code>SHELLEXECUTEINFO</code> structure, at which point a handle to process is returned in the <code>hProcess</code> member. But that still doesn't work. </p>
<p> A document can be executed with no new process being created. The most common case (but hardly the only such) in which you will encounter this is if the registered handler for the document type requested a DDE conversation. In that case, an existing instance of the program has accepted responsibility for the document. Waiting for the process to exit is not the same as waiting for the user to close the document, because closing the document doesn't exit the process. </p>
<p> Just because the user closes the document doesn't mean that the process exits. Most programs will let you open a new document from the "File" menu. Once that new document is opened, the user can close the old one. (Single-document programs implicitly close the old document when the new one is opened.) What's more, closing all open windows associated with the document need not result in the program exiting. Some programs run in the background even after you've closed all their windows, either to provide some sort of continuing service, or just because they are just anticipating that the user will run the program again soon so they delay the final exit for a few minutes to see if they will be needed. </p>
<p> Just because the process exits doesn't mean that the document is closed. Some programs detect a previous instance and hand off the document to that instance. Other programs are stubs that launch another process to do the real work. In either case, the newly-created process exits quickly, but the document is still open, since the responsibility for the document has been handed off to another process. </p>
<p> There is no uniform way to detect that a document has been closed. Each program handles it differently. If you're lucky, the program exposes properties that allow you to monitor the status of an open document. <a href="http://blogs.msdn.com/oldnewthing/archive/2005/07/05/435657.aspx">As we saw earlier</a>, Internet Explorer exposes properties of its open windows through the <code>ShellWindows</code> object. I understand that Microsoft Office also exposes a rather elaborate set of automation interfaces for its component programs. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-377513">
				<div id="div-comment-377513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dotsql.dyndns.org:8674/weblog/' rel='external nofollow' class='url'>Damit</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060505-08/?p=31293#comment-377513">
			May 5, 2006 at 11:27 am</a>		</div>

		<p>This seems like a plus point for &quot;everything is a file&quot; or something like AppleScript.</p>
<p>I&#8217;m curious, will there ever be any kind of standardization (whether by Microsoft or a third party) in terms of the way programs should respond to ShellExecute?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-377523">
				<div id="div-comment-377523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.guyswithtowels.com' rel='external nofollow' class='url'>Tim</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060505-08/?p=31293#comment-377523">
			May 5, 2006 at 11:42 am</a>		</div>

		<p>Out of interest, I checked the MSDN page for ShellExecute to see if it was &#8216;obvious&#8217;, or &#8216;obvious if you&#8217;re Raymond&#8217; :-), and it fell firmly into the first camp, specifically saying that numbers above 32 are essentially meaningless and it&#8217;s not a proper instance. &nbsp;Which is nice.</p>
<p>On that subject, can you prod the DirectX team to have a similar level of rigourousness in their docs?</p>
<p>For example, one of the cases I came across in the past week or so, SetStreamSource():</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/directx9_c/IDirect3DDevice9__SetStreamSource.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/directx9_c/IDirect3DDevice9__SetStreamSource.asp</a></p>
<p>Given you can have multiple streams, and that streams can be deleted and therefore their interface pointers are no longer valid, how would you tell the Direct3D device that, e.g. stream 1 should be detached now? &nbsp;Using that documentation, I mean. &nbsp;And following your own rules about not using undocumented parameter values, etc.</p>
<p>(If you care, the correct answer is to pass in a NULL pointer as the stream &#8211; nowhere is this definitively documented; it&#8217;s only mentioned in passing by being in some sample code elsewhere in the docs, and no reference is made in the accompanying text to the NULL value of the stream interface pointer. &nbsp;And knowing how reliable sample code can be in terms of correctness, this is the kind of thing that can drive you nuts when dealing with DirectX).</p>
<p>And I know you have no power whatsoever to control the DX team&#8217;s behaviour &#8211; I&#8217;m just making a point that sometimes people assume things about APIs because so many times in the past it&#8217;s the only way they&#8217;ve been able to accomplish anything, if you see what I mean.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kjkhyperion even thread-even depth-1" id="comment-377533">
				<div id="div-comment-377533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060505-08/?p=31293#comment-377533">
			May 5, 2006 at 11:46 am</a>		</div>

		<p>Damit: OLE was proposed, but it didn&#8217;t catch on. OLE lets you, among many many other features, query globally all the opened documents in all running applications, and it&#8217;s how Explorer can tell you what application keeps a document open so that it cannot be moved/deleted/etc. (of course, since it mostly only works with Office, you&#8217;d be inclined to think it&#8217;s evil Microsoft and their evil hidden APIs)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kjkhyperion odd alt thread-odd thread-alt depth-1" id="comment-377543">
				<div id="div-comment-377543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060505-08/?p=31293#comment-377543">
			May 5, 2006 at 11:49 am</a>		</div>

		<p>Tim: use the feedback link at the bottom. I swear it works</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-377563">
				<div id="div-comment-377563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.winehq.org' rel='external nofollow' class='url'>Steven Edwards</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060505-08/?p=31293#comment-377563">
			May 5, 2006 at 12:10 pm</a>		</div>

		<p>Damit:</p>
<p>There is a good regression test for ShellExecute here. It should catch most behavior changes in programs from one version of windows to another.</p>
<p><a rel="nofollow" target="_new" href="http://cvs.winehq.org/cvsweb/wine/dlls/shell32/tests/shlexec.c?rev=1.9&amp;content-type=text/x-cvsweb-markup" rel="nofollow">http://cvs.winehq.org/cvsweb/wine/dlls/shell32/tests/shlexec.c?rev=1.9&#038;content-type=text/x-cvsweb-markup</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-patriotb odd alt thread-odd thread-alt depth-1" id="comment-377743">
				<div id="div-comment-377743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PatriotB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060505-08/?p=31293#comment-377743">
			May 6, 2006 at 2:07 am</a>		</div>

		<p>KJK::Hyperion: &nbsp;Ah yes, the Running Object Table (ROT)! &nbsp;It would be nice if the Windows Shell documentation would remind people that putting their open files in the ROT will get them the &quot;nicer&quot; file-in-use handling.</p>
<p>It would also be nice if the SDK team would stop dropping valuable tools from the SDK, such as IROTVIEW which let you see all the objects currently registered in the ROT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kjkhyperion even thread-even depth-1" id="comment-377763">
				<div id="div-comment-377763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060505-08/?p=31293#comment-377763">
			May 6, 2006 at 6:40 am</a>		</div>

		<p>Norman: just ditch ShellExecute and use ShellExecuteEx, then. Has nicer error handling and generally nicer everything. As for INT_PTR, I&#8217;ll just say beware, beware sign extension</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kjkhyperion odd alt thread-odd thread-alt depth-1" id="comment-377773">
				<div id="div-comment-377773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060505-08/?p=31293#comment-377773">
			May 6, 2006 at 6:45 am</a>		</div>

		<p>and, Norman, the result cannot &quot;happen&quot; to be larger than that. Rigorousness OK, but it doesn&#8217;t take a lot of psychic skills to understand what goes on behind the curtain. The return value is obviously born as a positive int and casted into an HINSTANCE with IntToPtr(). And int is always 32 bit, even on Win64, so there&#8217;s no kind of trickery that could make it overflow</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-377723">
				<div id="div-comment-377723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060505-08/?p=31293#comment-377723">
			May 6, 2006 at 1:20 am</a>		</div>

		<p>&gt; You can check if it greater than 32,<br />
<br />&gt; indicating that the call was successful. If<br />
<br />&gt; the value is less than 32, then it is an<br />
<br />&gt; error code.</p>
<p>Your employer disagrees with you, very firmly.</p>
<p>The MSDN page says to cast it to an int and then compare the resulting value to 32. &nbsp;So for example if the value of the HINSTANCE happens to equal 2**33 + 1 then you cast it to an int, look at the result of 1, and conclude that the HINSTANCE value represented an error.</p>
<p>Last month I posted in Microsoft&#8217;s public newsgroup on kernel issues, asking if maybe programs should cast the HINSTANCE to INT_PTR instead of int. &nbsp;Your colleagues kindly, politely, and firmly provided proof that no, MSDN is right, it should be cast to int.</p>
<p>&gt; [some defective programs] looking for a<br />
<br />&gt; window with a matching GWLP_HINSTANCE (or<br />
<br />&gt; GWL_HINSTANCE if you&#8217;re still living in the<br />
<br />&gt; unenlightened non-64-bit-compatible world).</p>
<p>Yup, well I tried to be enlightened and 64-bit aware, but I was wrong. &nbsp;INT_PTR is correct SOMETIMES. &nbsp;(Of course the primary defect that you described in those programs is somewhat worse.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-377803">
				<div id="div-comment-377803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.viksoe.dk/code/' rel='external nofollow' class='url'>bviksoe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060505-08/?p=31293#comment-377803">
			May 6, 2006 at 4:23 pm</a>		</div>

		<p>Oh no, you said: DDE.<br />
<br />And here I thought you weren&#8217;t allowed to swear or use obscene words on this blog! Well, good thing the topic was filed under Historic. So many bad memories&#8230; </p>
<p>Could it be that Windows Explorer is the only application on the face of this earth to use this technology still?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-377793">
				<div id="div-comment-377793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060505-08/?p=31293#comment-377793">
			May 6, 2006 at 11:52 am</a>		</div>

		<p>It&#8217;s okay to cast to an int because, as both the linked article and the documentation for ShellExecute note, the error code is an integer, cast to HINSTANCE for compatibility. The return value will never be 2**33+1 since that doesn&#8217;t fit in an int.</p>
<p>When I wrote, &quot;You can check if it is greater than 32,&quot; I mean &quot;You can check if it is greater than 32 after casting it to an int&quot; &#8211; but I assumed that was obvious since I&#8217;m assuming people reading the entry are already familiar with ShellExecute. Do I have to spell out very last excruciating detail? Do you spell out every last excruciating detail when you talk with your friends?</p>
<p>&quot;When you get to the gas station, turn left.&quot;</p>
<p>&quot;Even if the traffic light is red?&quot;</p>
<p>&quot;Sigh. Turn left *when safe and legal*.&quot;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-377853">
				<div id="div-comment-377853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.winehq.org' rel='external nofollow' class='url'>Steven Edwards</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060505-08/?p=31293#comment-377853">
			May 7, 2006 at 5:18 am</a>		</div>

		<p>To go even more off topic.</p>
<p>bviksoe: Some programs that try to be compatible on the oldest Windows version possible such as Win9x still use DDE. I tracked down a bug in firefox recently that was causing a hang during DDE communication.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-377953">
				<div id="div-comment-377953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060505-08/?p=31293#comment-377953">
			May 7, 2006 at 9:43 pm</a>		</div>

		<blockquote><p>
  When I wrote, &quot;You can check if it is greater<br />
  <br />&gt; than 32,&quot; I mean &quot;You can check if it is<br />
  <br />&gt; greater than 32 after casting it to an int&quot;<br />
  <br />&gt; [&#8230;] Do I have to spell out very last<br />
  <br />&gt; excruciating detail?</p>
<p>In this case there was a reason. &nbsp;In the base note you also wrote this:</p>
<p>&gt; GWLP_HINSTANCE (or GWL_HINSTANCE if you&#8217;re<br />
  <br />&gt; still living in the unenlightened non-64-bit-<br />
  <br />&gt; compatible world).</p>
<p>As stated, I thought it might be appropriate to be 64-bit aware and cast the HINSTANCE to an INT_PTR instead of to an int. &nbsp;Your employer said no, and here you agree with your colleague, but it&#8217;s still not completely obvious. &nbsp;It is good that MSDN is literally correct here. &nbsp;In fact if MSDN were literally correct in enough other places then I wouldn&#8217;t have wondered whether to doubt this one. &nbsp;But your base note didn&#8217;t say int, and any 64-bit-aware person who reads your base note might not be aware that they should only test the low-order 32 bits.</p>
<p>Saturday, May 06, 2006 6:45 AM by KJK::Hyperion<br />
  <br />&gt; Rigorousness OK, but it doesn&#8217;t take a lot of<br />
  <br />&gt; psychic skills to understand what goes on<br />
  <br />&gt; behind the curtain. The return value is<br />
  <br />&gt; obviously born as a positive int and casted<br />
  <br />&gt; into an HINSTANCE with IntToPtr().</p>
<p>Um, since the HINSTANCE used to be an address sometimes, it&#8217;s not obvious to me that it&#8217;s always born as an int. &nbsp;I only would have guessed that error returns were born as ints &#8230; sometimes. &nbsp;Considering that 64-bit-aware programs must cast it down to 32 bits, obviously even some error returns are born as long longs but have the error value shown in the low-order 32 bits.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-377963">
				<div id="div-comment-377963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060505-08/?p=31293#comment-377963">
			May 8, 2006 at 12:54 am</a>		</div>

		<p>Cast it to int, cast it to INT_PTR, it won&#8217;t make any difference. (I&#8217;m not sure what you&#8217;re referring to in that last sentence. What error codes are born as long longs?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-378303">
				<div id="div-comment-378303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060505-08/?p=31293#comment-378303">
			May 8, 2006 at 8:58 pm</a>		</div>

		<p>&gt; Cast it to int, cast it to INT_PTR, it won&#8217;t<br />
<br />&gt; make any difference.</p>
<p>That is obvious only to someone who either knows or has reverse engineered the code. &nbsp;MSDN isn&#8217;t quite sure about that, your colleagues seem sure about the opposite, and even you didn&#8217;t quite seem so sure a few replies back.</p>
<p>&gt; What error codes are born as long longs?</p>
<p>I don&#8217;t know, but the responses of both you (prior to this one) and your colleagues made it obvious that there are some.</p>
<p>In a 64-bit program, HINSTANCE is 64 bits. &nbsp;Now consider a case where ShellExecute has set that field to the value 2**33 + 1. &nbsp;If the program casts this to type INT_PTR then the result of the cast will be greater than 32 and the program will think that it represents success. &nbsp;If the program obeys MSDN and your colleagues, casts this to type int, and sees the result of 1, then the program will observe that it represents failure. &nbsp;Since your company is so firm about the incorrecness of casting this to INT_PTR, it must be because some failure returns will be misinterpreted as successes unless they get cast down to int.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-379663">
				<div id="div-comment-379663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/pranavwagh/archive/2006/05/11/595184.aspx' rel='external nofollow' class='url'>Pranav ... Blogging</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060505-08/?p=31293#comment-379663">
			May 11, 2006 at 3:21 am</a>		</div>

		<p>When you are talking about office programs what happens when you open a new document seems to depend&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-440553">
				<div id="div-comment-440553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/11/08/1035971.aspx' rel='external nofollow' class='url'>The Old New Thing : How do I test that return value of ShellExecute against 32?</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060505-08/?p=31293#comment-440553">
			November 8, 2006 at 10:00 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2006/11/08/1035971.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2006/11/08/1035971.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

