<html>
<head>
<title>Understanding the consequences of WAIT_ABANDONED</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Understanding the consequences of WAIT_ABANDONED</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 12, 2005 / year-entry #258</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>27</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">One of the important distinctions between mutexes and the other synchronization objects is that mutexes have owners. If the thread that owns a mutex exits without releasing the mutex, the mutex is automatically released on the thread's behalf. But if this happens, you're in big trouble. One thing many people gloss over is the WAIT_ABANDONED...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
One of the important distinctions between mutexes and the other
synchronization objects is that mutexes have owners.
If the thread that owns a mutex exits without releasing the mutex,
the mutex is automatically released on the thread's behalf.
</p>
<p>
But if this happens, you're in big trouble.
</p>
<p>
One thing many people gloss over is the
<code>WAIT_ABANDONED</code> return value
from the synchronization functions such as
<a HREF="http://msdn.microsoft.com/library/en-us/dllproc/base/waitforsingleobject.asp">
<code>WaitForSingleObject</code></a>.
They typically treat this as a successful wait,
because it does mean that the object was obtained,
but it also tells you that the previous owner left the
mutex abandoned and that the system had to release it on
the owner's behalf.
</p>
<p>
Why are you in big trouble when this happens?
</p>
<p>
Presumably, you created that mutex to protect multiple threads
from accessing a shared object while it is an unstable state.
Code enters the mutex, then starts manipulating the object,
temporarily making it unstable, but eventually restabilizing
it and then releasing the mutex so that the next person can access
the object.
</p>
<p>
For example, you might have code that manages an
anchored doubly-linked list
in shared memory that goes like this:
</p>
<pre>
void MyClass::ReverseList()
{
 WaitForSingleObject(hMutex, INFINITE);
 int i = 0; // anchor
 do {
  int next = m_items[i].m_next;
  m_items[i].m_next = m_items[i].m_prev;
  m_items[i].m_prev = next;
  i = next;
 } while (i != 0);
 ReleaseMutex(hMutex);
}
</pre>
<p>
There is nothing particularly exciting going on.
Basic stuff, right?
</p>
<p>
But what if the program crashes while holding the mutex?
(If you believe that your programs are bug-free,
consider the possiblity that the program is running
over the network and the network goes down, leading
to an in-page exception.
Or simply that the user went to Task Manager
and terminated your program while this function is running.)
</p>
<p>
In that case, the mutex is automatically released
by the operating system,
leaving the linked list in a corrupted state.
The next program to claim
the mutex will receive <code>WAIT_ABANDONED</code> as the
status code.
If you ignore that status code,
you end up operating on a corrupted linked list.
Depending on how that linked list is used, it may
result in a resource leak or the system creating an
unintended second copy of something, or perhaps even a crash.
The unfortunate demise of one program causes other programs
to start behaving strangely.
</p>
<p>
Then again, the question remains,
"What do you do, then, if you get <code>WAIT_ABANDONED</code>?"
The answer is, "Good question."
</p>
<p>
You might try to repair the corruption, if you keep enough
auxiliary information around to recover a consistent state.
You might even design your data structures to be transactional,
so that the death of a thread manipulating the data structures
does not leave them in a corrupted state.
Or you might just decide that since things are corrupted,
you should throw away everything and start over,
losing the state of work in progress, but at least allowing
new work to proceed unhindered.
</p>
<p>
Or you might simply choose to ignore the error and continue
onwards with a corrupt data structure, hoping that whatever
went wrong won't result in cascade failures down the line.
This is what most people do, though usually without even being
aware that they're doing it.
And it's really hard to debug the crashes that result from this
approach.
</p>
<p>
<strong>Exercise</strong>:
Why did we use indices instead of pointers in our
linked list data structure?
</p>
<p>
[Raymond is currently away; this message was pre-recorded.]</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-305143">
				<div id="div-comment-305143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305143">
			September 12, 2005 at 10:03 am</a>		</div>

		<p>When using shared memory in user space, the address of the section will be different for each process.  Thus using absolute addressing doesn&#8217;t work.  Using indices is a form a relative addressing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-305153">
				<div id="div-comment-305153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305153">
			September 12, 2005 at 10:16 am</a>		</div>

		<p>Tim Smith wrote: &quot;When using shared memory in user space, the address of the section will be different for each process&quot;.</p>
<p>That is almost correct. The only nitpick to make is that that &#8216;will&#8217; is not correct; this should read &quot;When using shared memory in user space, the address of the section <em>can</em> be different for each process.&quot;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-305163">
				<div id="div-comment-305163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305163">
			September 12, 2005 at 10:34 am</a>		</div>

		<p>I use &quot;will&quot; because even thought it is technically true that &quot;can&quot; is more correct, as far as programming goes, &quot;can&quot; holds no functional weight.  It is best to assume from the start that they won&#8217;t be the same&#8230; ever.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-305173">
				<div id="div-comment-305173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.differentpla.net/' rel='external nofollow' class='url'>Roger Lipscombe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305173">
			September 12, 2005 at 10:40 am</a>		</div>

		<p>Tim Smith wrote: &quot;Thus using absolute addressing doesn&#8217;t work.&quot;</p>
<p>Well, there&#8217;s always __based pointers (only half-joking).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-grantri even thread-even depth-1" id="comment-305203">
				<div id="div-comment-305203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Grant+Richins' rel='external nofollow' class='url'>Grant Richins</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305203">
			September 12, 2005 at 12:17 pm</a>		</div>

		<p>This may not be what Raymond is looking for, but using 32-bit integer indices will use less memory for the data structure than using pointers when run on a 64-bit processor.  Also on a 32-bit processor you&#8217;re going to be &#8216;wasting&#8217; the low order 2 or even 3 bits (depending on the size of each element) of each pointer.  By using integer indices you could bit-pack in a few boolean fields for each element.</p>
<p>The more I think about it, I think I&#8217;ve got the real answer: a relocatable linked list (without using __based pointers).  The list is allocated in an array (for good data locality), but the array must be moved occasionally if it is to grow.  When it moves, you either have to move each element individually and update all those pointers, or just memmove the whole thing including indices and be done with it.</p>
<p>Lastly it&#8217;s a correctness issue.  You can easily validate or range check an index, unlike a pointer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-305223">
				<div id="div-comment-305223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305223">
			September 12, 2005 at 12:34 pm</a>		</div>

		<p>&quot;It is best to assume from the start that they won&#8217;t be the same&#8230; ever.&quot;</p>
<p>Hm, I&#8217;d say it&#8217;s best to assume that you don&#8217;t know.  Otherwise you might be tempted to do something like testing the value of an address against a stored one to see if you&#8217;re in the same process.  (still, it&#8217;s safer than assuming they&#8217;ll be the same by far)</p>
<p>If you know something is always true, there&#8217;s usually a way to exploit it. You want to keep track of what things you know and don&#8217;t know.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-305243">
				<div id="div-comment-305243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">microbe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305243">
			September 12, 2005 at 2:45 pm</a>		</div>

		<p>So..a thread crashes probably due to a software bug, and other threads now are so smart that they try to &quot;fix&quot; whatever the thread has corrupted.</p>
<p>I&#8217;m a bit suspicious of this &quot;software fixes itself&quot; approach. If you&#8217;ve got a corruption, you&#8217;ve got it anyway. Nothing else in the same process is reliable anyway.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-305183">
				<div id="div-comment-305183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zahical</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305183">
			September 12, 2005 at 11:48 am</a>		</div>

		<p>I don&#8217;t think shared memory has something to do with the use of subscript vs. pointers in this case. </p>
<p>First, WAIT_ABANDONED is returned when the _thread_ (which is not necessarily in another process) is aborted or exited. So this scenario can happen even within a single multithreaded process.</p>
<p>And second, as the MSDN C++ specs state &#8216;the result of a subscript expression e1[ e2 ] is given by: *( (e2) + (e1) )&#8217; so no matter if you write m_items[i] or *(m_items+i) you are still dealing with pointers.</p>
<p>Unfortunately, though, I’m not sure what the answer to Raymond’s puzzle is…<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-305323">
				<div id="div-comment-305323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kbiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305323">
			September 12, 2005 at 6:59 pm</a>		</div>

		<p>&amp;#8800; is supposed to be the not equal symbol, but blogs.msdn.com lack a certain functionality.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-305193">
				<div id="div-comment-305193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Trent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305193">
			September 12, 2005 at 12:01 pm</a>		</div>

		<p>&gt; And second, as the MSDN C++ specs state &#8216;the result of a subscript expression e1[ e2 ] is given by: *( (e2) + (e1) )&#8217; so no matter<br />
<br />&gt; if you write m_items[i] or *(m_items+i) you are still dealing with pointers. </p>
<p>The difference is that, using the most typical thread local storage method of mapping shared memory objects, e1 will be different in the 2 processes, and so the index version *will* work (at least it *can* be made to work if you&#8217;re reasonably careful).</p>
<p>The pointer version can&#8217;t be made to work across process boundries, period.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-305343">
				<div id="div-comment-305343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305343">
			September 12, 2005 at 7:58 pm</a>		</div>

		<p>While the shared memory thing is valid, I think Raymond was probably looking for a simpler answer than that (although, we&#8217;re talking about Raymond  [I can dig it] so maybe not).</p>
<p>Anyway, to that end, I&#8217;d go with what grantri said, in that you&#8217;d use arrays to take advantage of data locality.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-305353">
				<div id="div-comment-305353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305353">
			September 12, 2005 at 9:24 pm</a>		</div>

		<p>There&#8217;s another thing you can do if you get WAIT_ABANDONED: pack up your toys and go home.  If you&#8217;re writing, say, a filesystem or a DB server, and you&#8217;re forced to handle non-transactional structures at a particular point in the app, and they&#8217;ve been left inconsistent, then you&#8217;d probably rather have the server grind to a halt than blunder ahead corrupting customers&#8217; data.</p>
<p>(With some qualifications: (1) you might perform some kind of consistency checks after the WAIT_ABANDONED and decide it&#8217;s safe to go on if they pass, (2) it might be that only specific threads have to pack up their toys and others can be assumed safe.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-305363">
				<div id="div-comment-305363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.yafla.com/dforbes/index.html' rel='external nofollow' class='url'>Dennis Forbes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305363">
			September 12, 2005 at 9:35 pm</a>		</div>

		<p>The shared memory/thread local storage thing sounds like a non-starter &#8212; we&#8217;re talking about multithreading access to common memory, so I can&#8217;t imagine there&#8217;s any pointer base issues involved here, or I&#8217;ve been very wrong about pointers and multithreaded access.</p>
<p>So thinking of other possibility &#8211; is it something to do with PAE or extended memory support? By using indices you&#8217;re effectively using old-school segments, with a size of the size of your object. Indices can be positive or negative, and don&#8217;t have to refer to contiguous blocks of memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-305253">
				<div id="div-comment-305253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305253">
			September 12, 2005 at 3:16 pm</a>		</div>

		<p>&gt;&gt;&gt;&gt;<br />
<br />The difference is that, using the most typical thread local storage method of mapping shared memory objects, e1 will be different in the 2 processes, and so the index version *will* work (at least it *can* be made to work if you&#8217;re reasonably careful).<br />
<br />&gt;&gt;&gt;&gt;</p>
<p>Your saying e1[ e2 ] and *( (e2) + (e1) ) are NOT always semantically equivalent for basic types?</p>
<p>Can you give an example of where two different values would be returned?  Im cornfused.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-305273">
				<div id="div-comment-305273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305273">
			September 12, 2005 at 3:34 pm</a>		</div>

		<p>Aaron &#8212; it&#8217;s not a difference between e1[ e2 ] and *( (e2) + (e1) ).  It&#8217;s a difference between e1[ e2 ] and *ptr.</p>
<p>With base+offset, you can change the base in different processes.  With *ptr (and the pointers held in shared memory), you can&#8217;t change the base ever.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-305283">
				<div id="div-comment-305283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kbiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305283">
			September 12, 2005 at 3:36 pm</a>		</div>

		<p>&quot;Your saying e1[ e2 ] and *( (e2) + (e1) ) are NOT always semantically equivalent for basic types? Can you give an example of where two different values would be returned?&quot;</p>
<p>Imagine two have processes, process 1 (p1) and process 2 (p2), and e1 and e2 in shared memory.</p>
<p>p1: *( (e2) + (e1) ) &amp;#8800; p2: *( (e2) + (e1) )</p>
<p>So,</p>
<p>p1: *( (e2) + (e1) ) &amp;#8800; p2: e1[e2]</p>
<p>and vice versa, but since e2 is relative to e1,</p>
<p>p1: e1[e2] = p2: e1[e2]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-305293">
				<div id="div-comment-305293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305293">
			September 12, 2005 at 5:02 pm</a>		</div>

		<p>To be more concrete than my last reply:  If your list is declared like so (pardon the lack of indentation):</p>
<p>struct list_item {<br />
<br />struct list_item *next;<br />
<br />struct list_item *prev;<br />
<br />int val;<br />
<br />};</p>
<p>and the head of the list is declared like so:</p>
<p>struct list_item *head;</p>
<p>then imagine p1 sets up the shared memory area.  For simplicity, assume that head points to the base address of the shared memory area, also, so it doesn&#8217;t have to be stored in the area anywhere.  p1 creates the area, and sticks a few list_items in it, linked in order.  If the base address is 0x10000000 in p1&#8217;s address space, then perhaps head-&gt;next&#8217;s value will be 0x10000000C.  This value is stored in the shared memory area (since it&#8217;s part of *head).</p>
<p>But now p2 maps the same area in at 0x20000000 (so that&#8217;s the value of head in p2), and looks at head-&gt;next.  It&#8217;s value is still 0x1000000C, because that&#8217;s what p1 set it to.  But if p2 tries to dereference that (head = head-&gt;next, printf(&quot;%dn&quot;, head-&gt;val);), it&#8217;ll either get an access violation, or a different random piece of memory that it owns.</p>
<p>Whereas, if you store offsets into the shared memory area, then *((head)+(8)) or head[8] in p1 is the same byte as *((head)+(8)) or head[8] in p2 (the addresses are different in each process, unless the shared memory area was mapped at the same address in each).  So you never get an access violation or random memory bytes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-305373">
				<div id="div-comment-305373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305373">
			September 13, 2005 at 1:14 am</a>		</div>

		<p>Tim Smith wrote:<br />
<br />&gt; I use &quot;will&quot; because even thought it is<br />
<br />&gt; technically true that &quot;can&quot; is more correct,<br />
<br />&gt; as far as programming goes, &quot;can&quot; holds no<br />
<br />&gt; functional weight. It is best to assume from<br />
<br />&gt; the start that they won&#8217;t be the same&#8230;<br />
<br />&gt; ever. </p>
<p>Huh? Why assume a demonstrable falsehood?</p>
<p>From a coding viewpoint, their equaility (or inequality) either /matters/, or it does not matter. If it matters, you should get it right! If it does not matter, you do not care one way or the other.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-305403">
				<div id="div-comment-305403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DL</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305403">
			September 13, 2005 at 5:04 am</a>		</div>

		<p>Saving indices instead of pointers allows the linked list to be serialized &quot;as-is&quot; (e.g. saved to a file).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-305453">
				<div id="div-comment-305453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.yafla.com/dforbes' rel='external nofollow' class='url'>Dennis Forbes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305453">
			September 13, 2005 at 9:35 am</a>		</div>

		<p>Ahh&#8230;you know I really didn&#8217;t absorb the whole &quot;killing the process&quot; thing, or what it implied. Okay, disregard my post.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-305463">
				<div id="div-comment-305463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305463">
			September 13, 2005 at 10:11 am</a>		</div>

		<p>TC, coding for the case where the pages map at the same location is functionally a subset of coding for when the pages map at different locations.  By coding for the more generic case, we fully cover the more specialized case.</p>
<p>Thus, &quot;can&quot; has no functional weight.  That case buys you nothing that isn&#8217;t already covered by the more generic case.</p>
<p>(I am sure there are some obsure cases where you can do some really uber neato l33t stuff when the pages map to the same location, but &#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-305683">
				<div id="div-comment-305683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Lamb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305683">
			September 13, 2005 at 1:38 pm</a>		</div>

		<p>Back to school&#8230;</p>
<p>MAY is the correct word here in a technical document. Programmers need to be aware that</p>
<p>#1 The addresses probably won&#8217;t be the same, so they can&#8217;t use an address from one context in a context which may have a different address map.</p>
<p>AND</p>
<p>#2 On the other hand the addresses could be the same anyway either by chance or because of some COW tricks, so they can&#8217;t rely on the addresses being different to trigger some test somewhere (e.g. trying to detect the context in which your function was called by looking at the addresses used&#8230;)</p>
<p>This is what is implied by the MAY keyword in technical documents, as an implementor you are free to do either, and therefore as a user of an implementation you mustn&#8217;t assume anything.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-305443">
				<div id="div-comment-305443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305443">
			September 13, 2005 at 8:21 am</a>		</div>

		<p>Dennis:<br />
<br />&gt; we&#8217;re talking about multithreading access to common memory</p>
<p>I don&#8217;t think we necessarily are.  Raymond said:</p>
<p>&gt; But what if the program crashes while holding<br />
<br />&gt; the mutex? (If you believe that your programs<br />
<br />&gt; are bug-free, consider the possiblity that<br />
<br />&gt; the program is running over the network and<br />
<br />&gt; the network goes down, leading to an in-page<br />
<br />&gt; exception. Or simply that the user went to<br />
<br />&gt; Task Manager and terminated your program<br />
<br />&gt; while this function is running.)<br />
<br />&gt;<br />
<br />&gt; In that case, the mutex is automatically<br />
<br />&gt; released by the operating system, leaving the<br />
<br />&gt; linked list in a corrupted state. *The next<br />
<br />&gt; program to claim the mutex* will receive<br />
<br />&gt; WAIT_ABANDONED&#8230;</p>
<p>He&#8217;s talking about multiple processes, not multiple threads.  (Killing a process from task manager ends all its threads.)</p>
<p>But even if Raymond&#8217;s specific example used only one process, the APIs in question (to create and map shared memory, and to create and manipulate mutexes) all work across process boundaries too.  So it&#8217;s a good idea to not discount multi-processing, even if the program as it&#8217;s written today only uses one process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-305883">
				<div id="div-comment-305883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305883">
			September 13, 2005 at 10:28 pm</a>		</div>

		<p>Tim Smith, I beg to disagree still. If you assume that two things A and B &quot;won&#8217;t be the same&#8230; ever&quot;, then you have the right to write code such as this:</p>
<p>if A = B then<br />
<br />   &#8216; we have two copies of the same thing;<br />
<br />   &#8216; we DO NOT have two different things!</p>
<p>But if your assumption is incorrect, and the two things /can/ be the same, sometimes, then the code above is incorrect. The bad assumption has led to a bug.</p>
<p>It&#8217;s a general logical principle that you can prove anything, if you start with a falsehood. Assuming a demonstrable falsehood, in a programming context, is asking for trouble, IMHO.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-305923">
				<div id="div-comment-305923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://brummerfamily.com/blogs/andy/archive/2005/09/14/698.aspx' rel='external nofollow' class='url'>Visualizing Physics</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-305923">
			September 14, 2005 at 1:07 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-306743">
				<div id="div-comment-306743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Trent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-306743">
			September 16, 2005 at 3:54 pm</a>		</div>

		<p>&quot;Your saying e1[ e2 ] and *( (e2) + (e1) ) are NOT always semantically equivalent for basic types?</p>
<p>Can you give an example of where two different values would be returned? Im cornfused.&quot;</p>
<p>No, I&#8217;m not saying that at all. Your statement will still be true, assuming you interpret it correctly. I think the easiest way of stating this is:</p>
<p>I&#8217;m saying that typically e1 is just a pointer stored somewhere in the process, not in the shared memory. Since the base address of a shared memory block can be different in different processes, it&#8217;s important that the pointer stored in e1 can have a value that differs in different processes.</p>
<p>If, on the other hand, you use pointers that are themselves stored *in* the shared memory (i.e. in the linked list itself rather than in a per-process location), they can&#8217;t have different values in different processes&#8230;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-677643">
				<div id="div-comment-677643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2008/10/27/9017413.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050912-14/?p=34253#comment-677643">
			October 27, 2008 at 3:31 pm</a>		</div>

		<p>You can choose the consequences, but you need to know that there are consequences.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

