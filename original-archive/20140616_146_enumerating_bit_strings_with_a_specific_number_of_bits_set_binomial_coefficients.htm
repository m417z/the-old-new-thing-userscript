<html>
<head>
<title>Enumerating bit strings with a specific number of bits set (binomial coefficients strike again)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Enumerating bit strings with a specific number of bits set (binomial coefficients strike again)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 16, 2014 / year-entry #147</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140616-00/?p=733</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's Little Program prints all bit strings of length n subject to the requirement that the string have exactly k 1-bits. For example, all bit strings of length 4 with 2 bits set are 0011, 0101, 0110, 1001, 1010, and 1100. Let's write BitString(n, k) to mean all the bit strings of length n with exactly...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program prints all bit strings of length&nbsp;<var>n</var>
subject to the requirement that the string have exactly <var>k</var>
1-bits.
For example, all bit strings of length 4 with 2 bits set are
0011, 0101, 0110, 1001, 1010, and 1100.
Let's write
BitString(<var>n</var>, <var>k</var>) to mean all the bit strings
of length <var>n</var> with exactly <var>k</var> bits set.
</p>
<p>
Let's look at the last bit of a typical member of
BitString(<var>n</var>, <var>k</var>).
If it is a zero, then removing it leaves a string one bit shorter
but with the same number of bits set.
Conversely every BitString(<var>n</var> &minus; 1, <var>k</var>) string
can be extended to a BitString(<var>n</var>, <var>k</var>) string
by adding a zero to the end.
</p>
<p>
If the last bit is a one, then
removing it leaves a bit string of 
length <var>n</var> &minus; 1 with exactly <var>k</var> &minus; 1 bits set,
and conversely every bit string of length <var>n</var> &minus; 1 with
exactly <var>k</var> &minus; 1 bits set can be extended to a bit string of
length <var>n</var> with exactly <var>k</var> bits set by adding a one to the end.
</p>
<p>
Therefore, our algorithm goes like this:
</p>
<ul>
<li>Handle base cases.
<li>Otherwise,
<ul>
<li>Recursively call
    BitString(<var>n</var> &minus; 1,
    <var>k</var>) and add a 0 to the end.</p>
<li>Recursively call
    BitString(<var>n</var> &minus; 1,
    <var>k</var> &minus; 1) and add
    a 1 to the end.
</ul>
</ul>
<p>
This algorithm may look awfully familiar.
The overall recursive structure is the same as
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/04/14/10516909.aspx">
enumerating subsets with binomial coefficients</a>;
we just decorate the results differently.
</p>
<p>
That's because this problem is the same as the problem of
enumerating subsets.
You can think of the set bits as selecting which elements
get put into the subset.
</p>
<p>
It's not surprising, therefore, that the resulting code
is identical except for how we report the results.
(Instead of generating arrays, we generate strings.)
</p>
<pre>
function repeatString(s, n) {
 return new Array(n+1).join(s);
}

function BitString(n, k, f) {
 if (k == 0) { f(repeatString("0", n)); return; }
 if (n == 0) { return; }
 BitString(n-1, k, function(s) { f(s + "0"); });
 BitString(n-1, k-1, function(s) { f(s + "1"); });
}
</pre>
<p>
If <code>k</code> is zero, then that means we are looking
for strings of length <code>n</cODE>
that contain no bits set at all.
There is exactly one of those, namely the string consisting
of <code>n</code> zeroes.
</p>
<p>
If <code>k</code> is nonzero but <code>n</code> is zero,
then that means we want strings of length zero with some bits set.
That's not possible, so we return without generating anything.
</p>
<p>
Finally, we handle the recursive case by generating the shorter
strings and tacking on the appropriate digits.
</p>
<p>
Since this is the same algorithm as subset generation,
we should be able to write one in terms of the other:
</p>
<pre>
function BitString(n, k, f) {
 Subsets(n, k, function(s) {
  var str = "";
  for (var i = 1; i &lt;= n; i++) {
   str += s.indexOf(i) &gt;= 0 ? "1" : "0";
  }
  f(str);
 });
}
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1131333">
				<div id="div-comment-1131333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Abhi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140616-00/?p=733#comment-1131333">
			June 16, 2014 at 7:25 am</a>		</div>

		<p>First Comment. First time commenter</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1131343">
				<div id="div-comment-1131343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tester</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140616-00/?p=733#comment-1131343">
			June 16, 2014 at 8:38 am</a>		</div>

		<p>Uncaught ReferenceError: Subsets is not defined.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1131353">
				<div id="div-comment-1131353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140616-00/?p=733#comment-1131353">
			June 16, 2014 at 9:54 am</a>		</div>

		<p>Subsets is defined in the previous little program blog entry about binomial coefficients: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2014/04/14/10516909.aspx">blogs.msdn.com/&#8230;/10516909.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1131363">
				<div id="div-comment-1131363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140616-00/?p=733#comment-1131363">
			June 16, 2014 at 10:01 am</a>		</div>

		<p>I am amused by the way that BitString(0, 0, f) works.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1131373">
				<div id="div-comment-1131373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140616-00/?p=733#comment-1131373">
			June 16, 2014 at 10:11 am</a>		</div>

		<p>Can we have Gosper&#39;s Hack yet?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1131383">
				<div id="div-comment-1131383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140616-00/?p=733#comment-1131383">
			June 16, 2014 at 10:18 pm</a>		</div>

		<p>Would you not consider the case when k == n also to be a base case?</p>
<p>if (k == n) { f(repeatString(&quot;1&quot;, n)); return; }</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1131393">
				<div id="div-comment-1131393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140616-00/?p=733#comment-1131393">
			June 17, 2014 at 1:42 am</a>		</div>

		<p>Drak, that&#39;s a potential optimisation that could be included, but not necessary &#8211; the recursion will take care of it, eventually.</p>
<p>Another optimisation would be to change the &quot;return nothing&quot; condition from &quot;n == 0&quot; to &quot;n &lt; k&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1131403">
				<div id="div-comment-1131403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140616-00/?p=733#comment-1131403">
			June 17, 2014 at 1:50 am</a>		</div>

		<p>I know this is just an example, but can I ask why you&#39;d want to count how many bits are set in the real world? &nbsp;I can see testing individual bits is useful, but not sure the count is much use?</p>
<div class="post">[<em>Um, this program does not count bits. It generates bits. For example, for test cases. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1131493">
				<div id="div-comment-1131493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140616-00/?p=733#comment-1131493">
			June 17, 2014 at 8:22 am</a>		</div>

		<p>&gt; why you&#39;d want to count how many bits are set in the real world</p>
<p>One example is to verify that WAVEFORMATEXTENSIBLE.Format.nChannels == BitsSetIn(WAVEFORMATEXTENSIBLE.dwChannelMask).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

