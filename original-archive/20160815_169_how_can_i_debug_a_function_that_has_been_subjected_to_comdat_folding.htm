<html>
<head>
<title>How can I debug a function that has been subjected to COMDAT folding?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I debug a function that has been subjected to COMDAT folding?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 15, 2016 / year-entry #170</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160815-00/?p=94085</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The easy way is to mutate the function.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Suppose you want to set a breakpoint on a function,
but you find that
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113">
the function has been subjected to COMDAT folding</a>,
so your attempt to set a breakpoint on the function
ends up setting a breakpoint on some other function,
and your breakpoint ends up firing when either your
desired function or the other identical function gets called.
How can you get your breakpoint to fire only on the function
you are debugging?
</p>
<p>
One way to do this is to disable COMDAT folding temporarily
and rebuild.
Mind you, this may result in your binary size exploding,
but since you're just debugging,
this probably doesn't bother you that much.
On the other hand, there may be parts of the program that
are relying on COMDAT folding,
or it may be hard to find the build setting that controls
COMDAT folding,
and you run the risk of forgetting to change the setting
back and accidentally committing a change that disables
COMDAT folding!
</p>
<p>
The easy way is to mutate the function.
Add a call to a harmless function like
<code>Get&shy;Tick&shy;Count()</code>.
Note that the harmless function must be something
the compiler can't optimize out,
so don't try <code>free(nullptr)</code> because
the compiler is allowed to take advantage of the fact
that <code>free(nullptr)</code> is required by the
language standard to have no effect
and can consequently optimize the call out entirely.
</p>
<p>
Then again,
if you're going to mutate the function,
you may as well mutate it in a way that makes
debugging easier.
For example, you might add
</p>
<pre>
bool breakpoint = false;

void TheFunction()
{
 if (breakpoint) DebugBreak();
 ... rest of function ...
}
</pre>
<p>
Then you can patch the breakpoint variable to <code>true</code>
and boom, there's your breakpoint.
</p>
<p>
If you can't recompile the binary,
then your options are more limited.
If the set of callers is manageable,
you could try setting a breakpoint
on each of the callers.
Or if there is something in the function that
lets you detect which identical function you're
in,
you can use that.
For example, maybe the two functions are
</p>
<pre>
class Circle
{
public:
   virtual int GetRadius() { return m_radius; }
private:
  int m_radius;
  int m_xcenter;
  int m_ycenter;
};

class Channel
{
public:
   int GetId() { return m_id; }
private:
  HANDLE m_signal;
  int m_id;
};
</pre>
<p>
Since
<code>Circle::<wbr>Get&shy;Radius</code>
and
<code>Channel::<wbr>Get&shy;Id</code>
compile to the same code, they will get
COMDAT-folded.
But you can still figure out which
method you're in by looking at other
parts of the <code>this</code> pointer.
In the example above,
you see that <code>Circle</code>
has a virtual method, hence a vtable,
so you can use a conditional breakpoint to
check whether the vtable matches.
</p>
<p>
If you use a boring debugger, it might be something
like this:
</p>
<pre>
0:001&gt; bp Circle::GetRadius "j poi(ecx)==0x10014270 r;g"
</pre>
<p>
If you use a fancy debugger,
then use your fancy debugger's conditional breakpoint
facility.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1260305">
				<div id="div-comment-1260305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160815-00/?p=94085#comment-1260305">
			August 15, 2016 at 9:58 am</a>		</div>

		<p>Just last week, I was helping someone debug a problem that was aggravated by COMDAT folding.  The software had a test that purposely mutates a function at runtime.  Because of cool optimizations, the target function was COMDAT-folded into another function that never should have been mutated.  It took a while to figure out what was actually happening.</p>
<p>Interestingly, COMDAT folding, while an important optimization, leads to C++ standard violations which requires function to have unique identities.  (You should be able to take the pointer of a function and know that it won&#8217;t match any pointer to another function, even if that other function is byte-for-byte identical.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1261076">
				<div id="div-comment-1261076" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160815-00/?p=94085#comment-1261076">
			August 18, 2016 at 2:08 am</a>		</div>

		<p>While true (which is why it is disabled it you compile with strict standards compliance from what I remember), self modifying code is a maintenance nightmare in any case. I&#8217;ve yet to come across a situation where there wasn&#8217;t a better solution available (except for some rare performance optimisations that is)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-odd thread-alt depth-1" id="comment-1260435">
				<div id="div-comment-1260435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160815-00/?p=94085#comment-1260435">
			August 15, 2016 at 9:10 pm</a>		</div>

		<p>One stupid thing DDK/WDK (and maybe VC) was doing was enabling ICF in the debug build.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

