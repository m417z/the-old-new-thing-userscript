<html>
<head>
<title>Enumerating the ways of choosing teams in a group of players</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Enumerating the ways of choosing teams in a group of players</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 4, 2014 / year-entry #186</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Suppose you have a bunch of people, and you want to break them up into m teams of size n. (Therefore you have a total of nm people.) Today's Little Program will enumerate the ways this can be done. Formally, let's say that you have a collection of size nm, and you want to enumerate...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Suppose you have a bunch of people,
and you want to break them up into <var>m</var> teams of size <var>n</var>.
(Therefore you have a total of <var>nm</var> people.)
Today's Little Program will enumerate the ways this can be done.
</p>
<p>
Formally, let's say that you have a collection of size <var>nm</var>,
and you want to enumerate the ways of partitioning the collection
into <var>m</var> subsets, each subset of size <var>n</var>.
The order of elements within each subset does not matter,
and the order of the subsets doesn't matter.
That's saying that
a team of Alice and Bob is the same as a team of Bob and Alice,
and Alice-Bob versus Charlie-David is the same as
Charlie-David versus Alice-Bob.
</p>
<p>
The number of ways of doing this is
(<var>nm</var>)!/<var>n</var>!<sup><var>m</var></sup><var>m</var>!.
You can see this by first taking all permutations of the players,
then dividing out by the things that cause us to overcount:
The number of ways of ordering players within each team is <var>n</var>!,
and there are <var>m</var> teams, and there are <var>m</var>! ways of
ordering the teams themselves.
(Note that this is a cute way of expressing the result,
but
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/05/08/10416823.aspx">
you shouldn't use it for computation</a>.
A slightly better way for computation would be
(<var STYLE="font-style: normal">&Pi;</var><sub>1 &le; <var>k</var> &le; <var>n</var></sub><var>C</var>(<var>mk</var>, <var>m</var>))/<var>m</var>!.
</p>
<p>
Okay, but how do you generate the teams themeselves?
</p>
<p>
Let's first see how to generate the first team.
Well, that's easy.
You just select <var>n</var> players and call them <i>Team 1</i>.
</p>
<p>
This leaves you <var>n</var>(<var>m</var> &minus; 1) players with
which to form <var>m</var> &minus; 1 teams,
which you can do recursively.
</p>
<pre>
function Teams(n, m, f) {
 var a = [];
 for (var i = 1; i &lt;= n * m; i++) {
  a.push(i);
 }

 if (m == 1) { f([a]); return; }

 <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/04/14/10516909.aspx">Subsets</a>(n * m, n, function(s) {
  var rest = a.filter(function(i) { return s.indexOf(i) &lt; 0; });
  Teams(n, m - 1, function(t) {
    f([s].concat(t.map(function(team) {
        return team.map(function(i) { return rest[i-1]; });
       })));
  });
 });
}

Teams(2, 3, logToConsole);
</pre>
<p>
The first part of this function builds an array of the form
<code>[1, 2, 3, ..., n * m]</code>.
If we are asking for only one team, then everybody is on the
same team.
Otherwise, for all possible choices of <code>n</code>-member teams,
first see which people haven't yet been picked for a team.
Then generate all remaining possible team arrangements for
those leftovers,
and combine them to form the final team rosters.
</p>
<p>
The combination step is tricky because the recursive call
generates subsets in the range <code>[1, 2, 3, ..., n * (m-1)]</code>,
and we need to convert those values into indices into the
array of people waiting to be picked.
</p>
<p>
Note that this algorithm over-counts the possibilities since
it generates both
<code>[[1,2],[3,4]]</code> and
<code>[[3,4],[1,2]]</code>.
In other words, it assumes that team order is important
(say, because the first team will wear red jerseys and the second
team will wear blue jerseys).
In the original problem statement,
the order of the teams is not significant.
(Maybe we'll let them pick their own jersey colors.)
</p>
<p>
To solve that, we impose a way of choosing one such arrangement
as the one we enumerate, and ignore the rest.
The natural way to do this is to select a representative player from each team
in a predictable manner
(say, the one whose name comes first alphabetically),
and then arranging the representatives in a predictable manner
(say, by sorting them alphabetically).
</p>
<p>
The revised version of our algorithm goes like this:
</p>
<pre>
function Teams(n, m, f) {
 var a = [];
 for (var i = 1; i &lt;= n * m; i++) {
  a.push(i);
 }

 if (m == 1) { f([a]); return; }

 a.shift();
 Subsets(n * m - 1, n - 1, function(s) {
  var firstTeam = [1].concat(s.map(function(i) { return i+1; }))
  var rest = a.filter(function(i) { return s.indexOf(i) &lt; 0; });
  Teams(n, m - 1, function(t) {
    f([firstTeam].concat(t.map(function(team) {
      return team.map(function(i) { return rest[i-1]; });
     })));
  });
 });
}

Teams(2, 3, logToConsole);
</pre>
<p>
The first part of the function is the same as before,
but the recursive step changes.
</p>
<p>
We remove the first element from the array.
That guy needs to belong to <i>some</i> team,
and since he's the smallest-numbered guy,
he will be nominated as the team representative
of whatever team he ends up with,
and since he's the smallest-numbered guy of all,
he will also be the first team representative when they
are placed in sorted order.
So we pick him right up front.
</p>
<p>
We then ask for his <code>n - 1</code> teammates,
and together they make up the first team.
The combination is a little tricky because
the <code>Subsets</code> function assumes that the
underlying set is <code>[1, 2, ..., n-1]</code> but we
actually want the subset to be of the form
<code>[2, 3, ..., n]</code>;
we fix that by adding 1 to each element of the subset.
</p>
<p>
We then find all the people who have yet to be assigned to a team
and recursively ask for <code>m - 1</code> more teams to be generated
from them.
We then combine the first team with the recursively-generated teams.
Again, since the recursively-generated teams are numbered
starting from 1, we need to convert the returned subsets into
the original values we saved away in the <code>rest</code> variable.
</p>
<p>
Renumbering elements is turning into a bit of a bother,
so let's tweak our original
<code>Subsets</code> function.
For example, we would prefer to pass the set explicitly
rather than letting <code>Subsets</code> assume that the set is
<code>[1, 2, 3, ..., n]</code>,
forcing us to convert the indices back to the original set members.
It's also convenient if the callback also included the elements that
are not in the subset.
</p>
<pre>
function NamedSubsets(a, k, f) {
 if (k == 0) { f([], a); return; }
 if (a.length == 0) { return; }
 var n = a[a.length - 1];
 var rest = a.slice(0, -1);
 NamedSubsets(rest, k, function(chosen, rejected) {
  f(chosen, rejected.concat(n));
 });
 NamedSubsets(rest, k-1, function(chosen, rejected) {
  f(chosen.concat(n), rejected);
 });
}

function takeAndLeave(chosen,rejected) {
 console.log("take " + chosen + ", leave " + rejected);
}

NamedSubsets(["alice", "bob", "charlie"], 2, takeAndLeave);
</pre>
<p>
The <code>Named&shy;Subsets</code> function
takes the last element from the source set
and either rejects it (adds it to the "rejected" parameter)
or accepts it (adds it to the "chosen" parameter).
</p>
<p>
With the <code>Named&shy;Subsets</code> variant,
we can write the <code>Teams</code> function
much more easily.
</p>
<pre>
function Teams(a, m, f) {
 var n = a.length / m;
 if (m == 1) { f([a]); return; }

 var p = a[0];
 NamedSubsets(a.slice(1), n - 1, function(teammates, rest) {
  var team = [p].concat(teammates);
  Teams(rest, m - 1, function(teams) {
    f([team].concat(teams));
  });
 });
}

Teams([1,2,3,4,5,6], 3, logToConsole);
</pre>
<p>
Assuming we're not in one of the base cases,
we grab the first person <code>p</code>
so he can be captain of the first team.
We then ask <code>Named&shy;Subsets</code> to generate his teammates
and add them to <code>p</code>'s team.
We then recursively generate all the other teams
from the people who haven't yet been picked,
and our result is our first team plus the recursively-generated teams.
</p>
<p>
There is a lot of potential for
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2012/11/13/10367904.aspx">
style points</a> with the
<code>Named&shy;Subsets</code> function.
For example, we can avoid generating temporary copies of the
<code>a</code> array just to remove an element
by instead passing slices
(an array and indices marking the start and end of the elements
we care about).
</p>
<pre>
function NamedSubsetsSlice(a, begin, end, k, f) {
 if (k == 0) { f([], a.slice(begin, end)); return; }
 if (begin == end) { return; }
 var n = a[end - 1];
 NamedSubsetsSlice(a, begin, end - 1, k, function(chosen, rejected) {
  f(chosen, rejected.concat(n));
 });
 NamedSubsetsSlice(a, begin, end - 1, k-1, function(chosen, rejected) {
  f(chosen.concat(n), rejected);
 });
}

function NamedSubsets(a, k, f) {
 NamedSubsetsSlice(a, 0, a.length, k, f);
}
</pre>
<p>
We could use an accumulator to avoid having to generate closures.
</p>
<pre>
function AccumulateNamedSubsets(a, begin, end, k, f, chosen, rejected) {
 if (k == 0) { f(chosen, rejected.concat(a.slice(begin, end))); return; }
 if (begin == end) { return; }
 var n = a[begin];
 AccumulateNamedSubsets(a, begin + 1, end, k-1, f, chosen.concat(n), rejected);
 AccumulateNamedSubsets(a, begin + 1, end, k, f, chosen, rejected.concat(n));
}

function NamedSubsetsSlice(a, begin, end, k, f) {
 AccumulateNamedSubsets(a, begin, end, k, f, [], []);
}

function NamedSubsets(a, k, f) {
 NamedSubsetsSlice(a, 0, a.length, k, f);
}
</pre>
<p>
For bonus style points, I recurse on the start of the range rather
than the beginning so that
the results are in a prettier order.
</p>
<p>
We can also get rid of the temporary accumulator objects by manipulating the
accumulators destructively.
</p>
<pre>
function AccumulateNamedSubsets(a, begin, end, k, f, chosen, rejected) {
 if (k == 0) { f(chosen, rejected.concat(a.slice(begin, end))); return; }
 if (begin == end) { return; }
 var n = a[begin];
 <font COLOR=blue>chosen.push(n);</font>
 AccumulateNamedSubsets(a, begin + 1, end, k-1, f, <font COLOR=blue>chosen</font>, rejected);
 <font COLOR=blue>chosen.pop();
 rejected.push(n);</font>
 AccumulateNamedSubsets(a, begin + 1, end, k, f, chosen, <font COLOR=blue>rejected</font>);
 <font COLOR=blue>rejected.pop();</font>
}
</pre>
<p>
And then we can take advantage of the accumlator version to
pre-select the first player when building teams.
</p>
<pre>
function Teams(a, m, f) {
 var n = a.length / m;
 if (m == 1) { f([a]); return; }

 AccumulateNamedSubsetsSlice(a, 1, a.length, n - 1, function(team, rest) {
  Teams(rest, m - 1, function(teams) {
    f([team].concat(teams));
  });
 }, [a[0]], []);
}
</pre>
<p>
There is still a lot of potential for improvement here.
For example, you can switch to the iterative version of
<code>Subsets</code> to avoid the recursion on subset generation.
You can use an accumulator in <code>Teams</code> to avoid
generating closures.
And
if you are really clever, you can eliminate many more temporary arrays
by reusing the elements in the various
recursively-generated arrays by shuffling them around.
But I've sort of lost interest in the puzzle by now, so I won't bother.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1142513">
				<div id="div-comment-1142513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142513">
			August 4, 2014 at 8:35 am</a>		</div>

		<p>All well and good, but this fails to take into account desireability of individual players, because, you know, no one wants that dorky kid who spends all his time writing little programs on their sports team.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1142533">
				<div id="div-comment-1142533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142533">
			August 4, 2014 at 9:36 am</a>		</div>

		<p>Well, what&#39;s also been interesting about these set of enumeration problems is that at least one or two of them are a variant of some interview questions I was asked when applying to work at MSFT. This one in particular, though I didn&#39;t work out in the time provided how to eliminate the duplicates (alice-bob same as bob-alice)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1142543">
				<div id="div-comment-1142543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142543">
			August 4, 2014 at 9:42 am</a>		</div>

		<p>This solution seems vastly overcomplicated. Once you know the number of the teams, you know the number of people on each team and the rest is cake.</p>
<div class="post">[<em>There are <var>m</var> teams and <var>n</var> players on each team. Now go bake some cake! -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1142553">
				<div id="div-comment-1142553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142553">
			August 4, 2014 at 10:10 am</a>		</div>

		<p>My point is that you make the calculation of m and n and then chop up the array, which is certainly going to be much faster than the solutions shown.</p>
<div class="post">[<em>But deciding how to chop up the array is the hard part. Maybe you can just post a blog entry showing the easy way, then link to it here. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1142583">
				<div id="div-comment-1142583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142583">
			August 4, 2014 at 10:57 am</a>		</div>

		<p>@Brian_EE: But this can be used for much more than for sports teams! Perhaps one wants to make teams for a math or trivia competition, or even a really exciting sport like Robotics.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1142593">
				<div id="div-comment-1142593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142593">
			August 4, 2014 at 11:28 am</a>		</div>

		<p>@ pc:</p>
<p>The members of the team need not be humans. &nbsp;Not all &nbsp;&quot;games&quot; are sports designed to be played by people.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1142643">
				<div id="div-comment-1142643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142643">
			August 4, 2014 at 2:56 pm</a>		</div>

		<p>@12BitSlab: Presumably, non-humans don&#39;t wear colored jerseys. Following the basic tenants of Raymond&#39;s &quot;Psychic Debugging&quot; technique, I equated colored jerseys with sports (for most cases). When it comes to sports, the nerdy kids always get picked last.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1142653">
				<div id="div-comment-1142653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142653">
			August 4, 2014 at 4:57 pm</a>		</div>

		<p>It would be interesting to generalize this to the situation where you are choosing from a pool of p &gt; mn players, for which the number of solutions is C(p, mn) * (number of solutions for problem as stated).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1142603">
				<div id="div-comment-1142603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Katie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142603">
			August 4, 2014 at 11:33 am</a>		</div>

		<p>I may be misunderstanding him, but I think Joe is ignoring the &quot;enumerate&quot; part of the problem, and suggesting something like this:</p>
<p>for i = 1..m</p>
<p> &nbsp;print &quot;Players %((m-1)*n+1) through %(m*n) are on team %(m).&quot;</p>
<p>I guess he is right about it being simpler and faster&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1142673">
				<div id="div-comment-1142673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142673">
			August 4, 2014 at 7:08 pm</a>		</div>

		<p>The problem states that the set equals m * n. The player issue is irrelevant, so is the enumerate issue; all that matters is calculating the values for m and n. Reduce the problem, folks.</p>
<div class="post">[<em>Not sure why you&#39;re saying that the enumeration is irrelevant. The problem is to &quot;enumerate all the ways this can be done.&quot; The values of m and n are part of the problem statement. &quot;Given <var>m</var> and <var>n</var>, enumerate all the ways of breaking <var>nm</var> players into <var>m</var> teams of size <var>n</var>.&quot; For example, given <var>n=2</var> and <var>m=2</var>, the answer is &quot;There are three ways of breaking 4 players into two equal teams: (1+2 vs 3+4), (1+3 vs 2+4), and (1+4 vs 2+3).&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1142623">
				<div id="div-comment-1142623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142623">
			August 4, 2014 at 2:11 pm</a>		</div>

		<p>I think he&#39;s right about faster but *that&#39;s* not simpler. Maybe he thinks  is a constant.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1142693">
				<div id="div-comment-1142693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142693">
			August 5, 2014 at 12:28 am</a>		</div>

		<p>My fault. I completely misinterpreted the challenge. I hang my head in shame. So, forget everything I said. Hey look, a squirrel!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1142733">
				<div id="div-comment-1142733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142733">
			August 5, 2014 at 3:32 am</a>		</div>

		<p>@Maruits I think you would just vary the first team member over the range 0 .. p &#8211; mn, then recurse as before; it looks like the code would cope with that quite happily.</p>
<div class="post">[<em>You just wrap the function inside another loop that uses Subsets to generate all ways of choosing <var>nm</var> items from a pool of <var>p</var>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1142773">
				<div id="div-comment-1142773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">frenchguy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142773">
			August 5, 2014 at 7:58 am</a>		</div>

		<p>@Neil: you need to recurse that first choice as long as the number of players to choose from is greater than the number of players remaining to choose. Say you have 11 players and want to make 2 teams of 4. If you choose player #2 initially, you still have to choose 7 players out of 9.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1142983">
				<div id="div-comment-1142983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RandomInternetDude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1142983">
			August 6, 2014 at 5:49 am</a>		</div>

		<p>First thing I thought when I saw this: use MiniZinc. &nbsp;Hakan Kjellerstrand posted two different models in response (choosing_teams, under &#39;Combinatorial Problems&#39;). &nbsp;<a rel="nofollow" target="_new" href="http://www.hakank.org/minizinc/">http://www.hakank.org/minizinc</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1143553">
				<div id="div-comment-1143553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140804-00/?p=343#comment-1143553">
			August 7, 2014 at 10:35 pm</a>		</div>

		<p>Looks like a bug in the first version: rest is taking everyone not in &#39;s&#39;, when it should be looking in &#39;first_team&#39; or looking for &#39;i + 1&#39;.</p>
<p>I&#39;ve been trying to convert these to C++14, lots of interesting tradeoffs with value by default and the way lambdas work there. Sometimes the C++ comes out ahead!</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

