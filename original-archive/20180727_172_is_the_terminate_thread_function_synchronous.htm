<html>
<head>
<title>Is the Terminate­Thread function synchronous?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Is the <CODE>Terminate&shy;Thread</CODE> function synchronous?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 27, 2018 / year-entry #172</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>30</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Nope. It merely starts the termination but does not wait for the termination to complete.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer wanted to know whether the
<code>Terminate&shy;Thread</code> function was synchronous.
In other words, does the
<code>Terminate&shy;Thread</code> function
wait until the target thread has definitely terminated
before returning?
</p>
<p>
No.
The <code>Terminate&shy;Thread</code> function
queues a termination to the target thread but does not
wait for confirmation that the termination has occurred.
</p>
<p>
If you want to wait until the target thread has
definitely terminated, wait for the thread object
to become singnaled,
say by calling
<code>Wait&shy;For&shy;Single&shy;Object</code>.
</p>
<p>
But please,
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20150814-00/?p=91811">
stop calling <code>Terminate&shy;Thread</code></a>.
There are no valid use cases for it.
Any time you call it, you will corrupt the target process,
so you may as well just terminate
the entire process and be done with it.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (30)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1353915">
				<div id="div-comment-1353915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1353915">
			July 27, 2018 at 7:11 am</a>		</div>

		<p>To answer the unasked followup question: TerminateProcess is also asynchronous (as documented on MSDN); use WaitForSingleObject with a handle to the process to wait for it to definitely terminate.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1353935">
				<div id="div-comment-1353935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1353935">
			July 27, 2018 at 8:08 am</a>		</div>

		<p>Scooped.</p>
<p>I spent a long time debugging Process.Kill() being asynchronous. The .NET Documentation didn&#8217;t tell you this back then. (I haven&#8217;t checked since if they fixed it or not.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1353955">
				<div id="div-comment-1353955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://eskamation.de' rel='external nofollow' class='url'>Stefan Kanthak</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1353955">
			July 27, 2018 at 10:15 am</a>		</div>

		<p>Except for the edge cases: TerminateProcess(GetCurrentProcess(), 0xBADCODEL) and TerminateThread(GetCurrentThread(), 0xBADCODEL)</p>
<p>JFTR: contrary to (the undocumented) NtTerminateThread(NtCurrentThread(), 0L) which yields an NTSTATUS 0x000000DB alias STATUS_CANT_TERMINATE_SELF when called on the primary/last thread of a process, the former can be called on the last thread.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mzzt odd alt thread-odd thread-alt depth-1 parent" id="comment-1353945">
				<div id="div-comment-1353945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/The+MAZZTer' rel='external nofollow' class='url'>The MAZZTer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1353945">
			July 27, 2018 at 10:04 am</a>		</div>

		<p>.NET had a Thread.Abort method but NET Core got rid of it entirely for the reason Raymond specified. The use of CancellationToken is the recommended way to shut down a thread.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1354045">
				<div id="div-comment-1354045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Osexpert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354045">
			July 28, 2018 at 1:58 am</a>		</div>

		<p>Dont think that was the reason. Thread.Abort does not terminate the thread by using TerminateThread, it just trigger the throw of ThreadAbort exception in target thread. This can be catched and termination can be aborted. This is totalty different than TerminateThread.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1354355">
				<div id="div-comment-1354355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wyatt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354355">
			July 30, 2018 at 12:08 pm</a>		</div>

		<p>No, a ThreadAbortException is &#8220;special&#8221;.  You can catch it, but it&#8217;s just going to be rethrown.  Thread.Abort had some of the same problems TerminateThread did, it might as well have been named, RandomlyCorruptMyProcess.  For instance, if you called Thread.Abort on a thread that was in the right spot of a SQL Server call, you could screw up your SQL Server connection pool to the point where you got the execution results from the previous statement executed by that connection pool instead of the current one.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1354375">
				<div id="div-comment-1354375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">osexpert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354375">
			July 30, 2018 at 1:38 pm</a>		</div>

		<p>&#8220;You can catch it, but itâ€™s just going to be rethrown&#8221;<br />
Not if you call Thread.ResetAbort.<br />
&#8221; you called Thread.Abort on a thread that was in the right spot of a SQL Server call&#8230;&#8221;<br />
No different from normal exceptions. You must use finally blocks so state is not corrupted if an exception happens, eg. NullReferenceException, OutOfMemoryException or ThreadAbortException.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1353965">
				<div id="div-comment-1353965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1353965">
			July 27, 2018 at 10:15 am</a>		</div>

		<p>Except for the edge cases: TerminateProcess(GetCurrentProcess(), 0xBADCODEL) and TerminateThread(GetCurrentThread(), 0xBADCODEL)</p>
<p>JFTR: contrary to (the undocumented) NtTerminateThread(NtCurrentThread(), 0L) which yields an NTSTATUS 0x000000DB alias STATUS_CANT_TERMINATE_SELF when called on the primary/last thread of a process, the former can be called on the last thread.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1353985">
				<div id="div-comment-1353985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1353985">
			July 27, 2018 at 10:42 am</a>		</div>

		<p>Not sure how this is an exception. The function never returns so the question of the state of the thread after it returns is meaningless.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1354005">
				<div id="div-comment-1354005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354005">
			July 27, 2018 at 6:10 pm</a>		</div>

		<p>If terminating the current thread/process behaved the same way as terminating another thread/process, I would expect it to be possible for the function to return and for execution to continue for a hopefully short but indeterminate period of time.  So assuming it is true that there is a guarantee that the function will not return in this case I think that counts as an exception.</p>
<p>(Incidentally, this behaviour doesn&#8217;t appear to be documented.)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1354065">
				<div id="div-comment-1354065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://eskamation.de' rel='external nofollow' class='url'>Stefan Kanthak</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354065">
			July 28, 2018 at 6:18 am</a>		</div>

		<p>According to their documentation these functions always return.<br />
When given their own handle, I&#8217;d expect them to fail and set the last error to the equivalent of STATUS_CANT_TERMINATE_SELF</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1354055">
				<div id="div-comment-1354055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://eskamation.de' rel='external nofollow' class='url'>Stefan Kanthak</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354055">
			July 28, 2018 at 6:03 am</a>		</div>

		<p>| The function never returns &#8230;<br />
Exactly this is the edge case which is missed by the documentation (or just undocumented behaviour?):</p>
<p>| <b>Return Value</b><br />
| If the function succeeds, the return value is nonzero.<br />
| If the function fails, the return value is zero.<br />
There is no 3rd case &#8220;If the own thread/process is terminated, the function never returns.&#8221;</p>
<p>| <b>Remarks</b><br />
| TerminateProcess is asynchronous; it initiates termination and returns immediately.<br />
This remark is (still) missing from the documentation of TerminateThread()</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1354095">
				<div id="div-comment-1354095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rutger Ellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354095">
			July 28, 2018 at 10:57 am</a>		</div>

		<p>You are shooting yourself in your head and you still want to see the evidence that you shot yourself? Come on :).<br />
BTW I think it was a way too easy optimization to have a known function point when you terminate your own thread, no need to inject anything, just cleanup and leave the process in an unstable state.</p>
<p>Also in our source code the terminatethread  wrapper just calls terminateprocess, much easier to just give up</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1354145">
				<div id="div-comment-1354145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354145">
			July 29, 2018 at 2:43 pm</a>		</div>

		<p>I would not expect TerminateThread to be guaranteed to return when terminating the current thread, but with the documentation as currently written I would not expect it to be safe to assume that it does not.  It does <b>seem</b> to be an undocumented special case.</p>
<p> &#8230; although I can imagine reasons why it might work out that way even if it wasn&#8217;t intended to be part of the contract.  For example, perhaps a transition from kernel mode back to user mode always causes the thread to terminate if it is scheduled to do so.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1354035">
				<div id="div-comment-1354035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tanveer Badar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354035">
			July 28, 2018 at 1:11 am</a>		</div>

		<p>Can someone please do this</p>
<p>#define TerminateThread(tHandle) InitiateSystemShutdownA(NULL, NULL, 0, TRUE, FALSE)</p>
<p>and be done with it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kirbyfcf2 odd alt thread-even depth-1 parent" id="comment-1354075">
				<div id="div-comment-1354075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Kirby+FC' rel='external nofollow' class='url'>Kirby FC</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354075">
			July 28, 2018 at 7:04 am</a>		</div>

		<p>&#8221; stop calling TerminateÂ­Thread&#8221; &#8212; &#8220;Originally, there was no TerminateÂ­Thread function. The original designers felt strongly that no such function should exist because there was no safe way to terminate a thread&#8221;</p>
<p>This would be a good topic for an article &#8212; Why is there no &#8220;safe&#8221; way to terminate a thread?  What are the problems?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1354085">
				<div id="div-comment-1354085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354085">
			July 28, 2018 at 9:28 am</a>		</div>

		<p>Basically, the same problems that UNIX signals and asynchronous exceptions have: either you have several well-defined execution points in the thread where it can be aborted, or the thread can be aborted between any two machine instructions. In the first case, it&#8217;s trivial to come up (sometimes even accidentally: i.e., infinite loop) with an un-abortable thread which defies the whole idea. In the second case, there is no bloody way to reliably get the process to be in a consistent state after a thread was aborted: if you allow OnTermination handler to run arbitrary code, you&#8217;re back to the Problem One (some threads are un-abortable).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1354155">
				<div id="div-comment-1354155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">viila</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354155">
			July 29, 2018 at 4:03 pm</a>		</div>

		<p>I feel that probably for most people who are abusing TerminateThread() a soft cooperative AskThreadNicelyToTerminate() function would be the correct solution to their problem. They don&#8217;t *really* care whether the rug gets immediately yanked out from under the thread, or whether it will run for an extra hundred millisecond until the next well defined abort point. If the thread never gets to one and it&#8217;s un-nice-abortable, well, they&#8217;re in a position to fix it, since it&#8217;s their thread.</p>
<p>Of course they really should be building that abort mechanism themselves, but&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1354225">
				<div id="div-comment-1354225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354225">
			July 29, 2018 at 10:30 pm</a>		</div>

		<p>Yes, and it already exists and is called a manual reset event. As soon as you accept that it&#8217;s got to be done in cooperation with the target thread then you see that plenty of inter-thread signalling mechanisms already exist here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1354255">
				<div id="div-comment-1354255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354255">
			July 30, 2018 at 3:30 am</a>		</div>

		<p>What you propose is not that difficult and have been re-implemented, with some variations, by probably all Windows developer: make the thread run &#8220;while (WaitForSingleObject(hCancellationEvent, 0) == WAIT_TIMEOUT) { &#8230; }&#8221; loop, optionally also checking for the event inside it. To stop this thread (or even a group of threads), you call SetEvent(hCancellationEvent).</p>
<p>Of course, this doesn&#8217;t quite work if the thread can block indefinitely in a system call, or foreign code, or whatever â€” and there is no way the author of the thread could fix it. So, you need at least the way to cancel the blocked system call, and&#8230; there doesn&#8217;t seem to be a general way to do it. On UNIX, there are signals: you send a signal to the thread, and whatever syscall is in progress stops and returns EINTR, so the thread has a chance to react and notice the &#8220;please stop&#8221; notification. On Windows, there is a whole bunch of non-compatible ways to cancel things, varying from version to version (later versions got better at it, naturally, but they still wouldn&#8217;t recognize &#8220;general&#8221; API even if it was in the uniform with three stars on the shoulders).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1354115">
				<div id="div-comment-1354115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354115">
			July 29, 2018 at 1:31 am</a>		</div>

		<p>Long before cancelable i/o, there were only poor mans TerminateThread. Many libraries that deal with i/o still doesnâ€™t support cancelable i/o, the best you can do in those cases is to block a thread in an i/o-call and later terminate it if desired, most robust is of course if this is delegated to its own process, but windows had traditionally, and still has, sub-par performance when it comes to starting processes i.e. Until this is fixed in windows, TerminateThread has still its valid use cases.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1354135">
				<div id="div-comment-1354135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354135">
			July 29, 2018 at 2:38 pm</a>		</div>

		<p>So &#8230; instead of having a thread that isn&#8217;t able to do anything useful right now, but is otherwise harmless, you&#8217;d prefer to sabotage the entire process?</p>
<p>I guess there may be edge cases where that makes sense.  Can&#8217;t think of any right now.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1355825">
				<div id="div-comment-1355825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1355825">
			August 7, 2018 at 11:40 am</a>		</div>

		<p>Oh man he actually did it! There is a valid use for TerminateThread().</p>
<p>1) Create thread.<br />
2) Thread enters synchronous system call.<br />
3) To abort system call, call TerminateThread() on that thread. Since the thread can&#8217;t be anywhere else but in the system call or in the process of saving its result back to global vars, terminating it is safe now that the stuff allocated by CreateThread() gets freed.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4" id="comment-1355845">
				<div id="div-comment-1355845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1355845">
			August 7, 2018 at 3:10 pm</a>		</div>

		<p>Not all the stuff allocated by CreateThread gets freed. Only the big chunks of garbage. DLLs didn&#8217;t get a chance to run their DLL_THREAD_DETACH code, for example.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-4 parent" id="comment-1355855">
				<div id="div-comment-1355855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1355855">
			August 7, 2018 at 6:28 pm</a>		</div>

		<p>Is there any guarantee that an arbitrary synchronous system call can be safely terminated anyway?  I mean, what if it owns a lock?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1355885">
				<div id="div-comment-1355885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1355885">
			August 8, 2018 at 8:11 am</a>		</div>

		<p>Putting on my kernel-colored glasses, I&#8217;d assume that the kernel takes care of ensuring that any kernel-mode locks are released if the thread is terminated inside a system call.</p>
<p>For user-mode locks, it&#8217;s the same as if the thread were terminated while running in user mode: it&#8217;s still a terrible idea, and the lock will be leaked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1356005">
				<div id="div-comment-1356005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1356005">
			August 8, 2018 at 2:58 pm</a>		</div>

		<p>I would imagine that the thread won&#8217;t be terminated until it exits kernel mode, though perhaps some kernel-mode code checks for a pending termination at certain carefully chosen and well-defined checkpoints.  But I think the behaviour of a kernel-mode thread isn&#8217;t relevant as far as the contract goes, because when we call an API function we don&#8217;t know how much (if any) of the work will be done in kernel mode anyway.</p>
<p>I mean, I&#8217;d *guess* that terminating a thread that is doing simple file I/O won&#8217;t break anything other than (perhaps) the file handle in question and/or the integrity of the file contents.  But I don&#8217;t think that&#8217;s contractual.  </p>
<p>I also don&#8217;t think terminating a thread will necessarily be any more effective at cancelling the I/O than the supported methods are.  I mean, if the underlying drivers don&#8217;t support cancellation, then the kernel pretty much HAS to let it run to completion, no?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1354165">
				<div id="div-comment-1354165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354165">
			July 29, 2018 at 6:20 pm</a>		</div>

		(The content was deleted per user request)
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-odd thread-alt depth-1" id="comment-1354175">
				<div id="div-comment-1354175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354175">
			July 29, 2018 at 6:23 pm</a>		</div>

		<p>It&#8217;s nice to see the TerminateThread reference in the &#8220;Best Practice&#8221; mentioned in the linked post for removed, and the downloadable version got linked to view.officeapps.live.com for online viewing. Not sure if it&#8217;s added by the forum admins during data migration or not, and whether it&#8217;s okay to link to office documents this way for other external sites.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1354785">
				<div id="div-comment-1354785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lessthan.16mb.com' rel='external nofollow' class='url'>Dmitry Onoshko</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180727-00/?p=99355#comment-1354785">
			July 31, 2018 at 3:34 pm</a>		</div>

		<p>Using TerminateThread to terminate a thread that shut down too slow was exactly the sin of the code I had to maintain at my first workplace. To make things even worse, they somehow managed to make it work almost always, except for a few random unhandled exceptions once in a while. The threads were worker threads that performed network activity with WinSocks. When I started to write the next version of the product (obigated to reuse as much code as possible) exceptions started to manifest themselves in a more frequent manner. I had to waste the whole day, â€™cause my boss didnâ€™t want to believe what was written in MSDN, in clever books on Win32 programming, in clever articlesâ€”he wanted me to write a little program that would mimick what the big program did and thus to prove that TerminateThread was the reason. You may guess how difficult it is to make bugs that are random by their nature manifest in a predictable way.</p>
<p>Needless to say, I didnâ€™t stay there long.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

