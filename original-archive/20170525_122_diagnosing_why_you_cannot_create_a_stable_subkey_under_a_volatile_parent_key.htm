<html>
<head>
<title>Diagnosing why you cannot create a stable subkey under a volatile parent key</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Diagnosing why you cannot create a stable subkey under a volatile parent key</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 25, 2017 / year-entry #123</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170525-00/?p=96225</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">You can't do it, but why is the parent volatile?</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer encountered crashes in their program's
initialization code.
They weren't able to reproduce the problem in-house,
but their failure logs suggested it was coming from here:
</p>
<pre>
var settingsKey =
    Registry.CurrentUser.CreateSubKey(
        "Software\\Contoso\\Common Settings\\Drawing Preferences");
</pre>
<p>
The call was failing with
<code>System.IO.IO&shy;Exception:
Cannot create a stable subkey under a volatile parent key</code>.
The corresponding Win32 error code is
<code>ERROR_CHILD_MUST_BE_VOLATILE</code>.
</p>
<p>
First of all, what does this error mean?
</p>
<p>
This error means exactly what is says:
You cannot create a stable (non-volatile) subkey under a volatile
parent key.
All children of a volatile key must themselves be volatile.
</p>
<p>
Okay, but why is the parent key volatile?
</p>
<p>
We don't know for sure which key is the volatile parent,
but it's one of
<code>Software</code>,
<code>Software\\&shy;Contoso</code>,
or
<code>Software\\&shy;Contoso\\&shy;Common Settings</code>.
We can probably rule out <code>Software</code> since that key
is pre-created by the system.
That leaves the other two Contoso keys.
But they are intended to hold persistent settings.
Why would anybody create those keys as volatile?
That would defeat the purpose of the keys.
</p>
<p>
Ah, but perhaps the parent keys were created volatile by mistake.
An often-overlooked detail of the
<code>Reg&shy;Create&shy;Key&shy;Ex</code> function
(which is therefore also a detail of the
<code>Create&shy;Sub&shy;Key</code> CLR method)
is that if you ask for the key to be created as volatile,
then the volatility applies to <i>all</i> keys created
by the call.
This means two things:
</p>
<ul>
<li>If the key already exists, then its stability is unchanged.
    If it was volatile before, then it remains volatile.
    If it was stable before, then it remains stable.
</li>
<li>If the key doesn't already exist, then not only is
    the new key volatile, but the volatility also applies to
    any parent keys that didn't already exist.
</li>
</ul>
<p>
By searching the code for any attempts to create volatile keys,
we found this one that seemed suspicious:
</p>
<pre>
var sessionSettings =
    Registry.CurrentUser.CreateSubKey(
        "Software\\Contoso\\Common Settings\\Current Session",
        RegistryOptions.Volatile);
</pre>
<p>
The intent of this code was to create a volatile
<code>Current Session</code> key to hold the user's temporary
settings that should be discarded when the user logs off.
However, if the <code>Contoso\\Common Settings</code>
key doesn't yet exist,
this will create not only a volatile <code>Current Session</code>,
but also a volatile
<code>Common Settings</code> key,
and possibly even a volatile
<code>Contoso</code> key!
</p>
<p>
My theory as to what is going on is that the failures are occurring
on machines where the call to create the <code>Current Session</code> key
(1)&nbsp;occurs when the <code>Common Settings</code> key does not
already exist,
(2)&nbsp;comes before the call to create the <code>Drawing Preferences</code>
key,
and (3)&nbsp;ends up being the call that creates the
<code>Common Settings</code> key as a volatile key.
One possibility is that this is the first time any program developed
by Contoso has been run by this user,
which means that none of the Contoso keys exist
at the point the program starts.
Another possibility is that the user, in a perhaps misguided attempt
to fix a problem with a Contoso-developed program,
deleted the entire <code>Common Settings</code> key,
or possibly even the entire <code>Contoso</code> key.
</p>
<p>
The code to create the <code>Current Session</code> key should
do so in two steps.
First, create the stable parent key.
Second, create the volatile subkey.
</p>
<pre>
var commonSettings =
    Registry.CurrentUser.CreateSubKey(
        "Software\\Contoso\\Common Settings");
var sessionSettings = commonSettings.CreateSubKey(
        "Current Session",
        RegistryOptions.Volatile);
</pre>
<p>
(Translating this to raw Win32 is left as an exercise for the reader.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1297675">
				<div id="div-comment-1297675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170525-00/?p=96225#comment-1297675">
			May 25, 2017 at 6:24 pm</a>		</div>

		<p>This explains why the documentation of some application said when it fails some way, you need to delete the registry key for application then run the configure program again. </p>
<p>Btw, is there any way support staffs can figure out a key is volatile or not? There seems no difference in RegEdit for HKLM\SYSTEM\CurrentControlSet on the display and the exported file. The &#8220;reg flags  QUERY&#8221; command only works for subkey of HKLM\Software and yet it seems doesn&#8217;t say anything regarding volatility.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1297696">
				<div id="div-comment-1297696" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">The_Assimilator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170525-00/?p=96225#comment-1297696">
			May 25, 2017 at 11:12 pm</a>		</div>

		<p>Raymond, consider using C# verbatim strings (the special character @) to make your registry strings less clunky to type, e.g.: </p>
<p>var settingsKey =<br />
    Registry.CurrentUser.CreateSubKey(<br />
        @&#8221;Software\Contoso\Common Settings\Drawing Preferences&#8221;);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ranta even thread-even depth-1" id="comment-1297775">
				<div id="div-comment-1297775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ranta' rel='external nofollow' class='url'>ranta</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170525-00/?p=96225#comment-1297775">
			May 26, 2017 at 10:43 am</a>		</div>

		<p>I read from NTDEV that RegCreateKeyEx in earlier versions of Windows would return ERROR_CHILD_MUST_BE_VOLATILE, but in Windows 2000 and XP, it would silently make the child key volatile. Now that I tried it on Windows 7 SP1 (both x64 and WOW64), it returned the error. Was it changed back in Windows Vista or 7, then?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

