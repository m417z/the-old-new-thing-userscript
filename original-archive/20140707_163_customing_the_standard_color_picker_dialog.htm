<html>
<head>
<title>Customing the standard color-picker dialog</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Customing the standard color-picker dialog</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 7, 2014 / year-entry #164</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140707-00/?p=563</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A custom template, or possibly a custom hook function.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program does a little bit of customization
of the <code>Choose&shy;Color</code> dialog.
We do this by, um,
<a HREF="http://msdn.microsoft.com/library/ms646951">
doing what the documentation says</a>.
</p>
<p>
For the color dialog, we take the template in
<code>color.dlg</code> and modify it.
Just to get our feet wet, we won't customize anything at all!
This ensures that we have the basics down
before we start trying anything fancy.
</p>
<p>
<b>Handy tip</b>:
Before trying to customize something,
first write code that does it uncustomized.
That way, you have a known working starting point.
</p>
<pre>
#include &lt;windows.h&gt;

#include &lt;colordlg.h&gt;

1 DIALOG LOADONCALL MOVEABLE DISCARDABLE 2, 0, 298, 184
STYLE WS_BORDER | DS_MODALFRAME | WS_CAPTION | WS_POPUP | WS_SYSMENU |
      DS_3DLOOK
CAPTION "Color"
FONT 8 "MS Shell Dlg"
BEGIN
    LTEXT           "&amp;Basic colors:", -1, 4, 4, 140, 9
    CONTROL         "", COLOR_BOX1, "static",
                    SS_SIMPLE | WS_CHILD | WS_TABSTOP | WS_GROUP,
                    4, 14, 140, 86

    LTEXT           "&amp;Custom colors:", -1, 4, 106, 140, 9
    CONTROL         "",  COLOR_CUSTOM1, "static",
                    SS_SIMPLE | WS_CHILD | WS_TABSTOP | WS_GROUP,
                    4, 116, 140, 28

    PUSHBUTTON      "&amp;Define Custom Colors &gt;&gt;" COLOR_MIX, 4, 150, 138, 14,
                    WS_TABSTOP | WS_GROUP

    DEFPUSHBUTTON   "OK", IDOK, 4, 166, 44, 14, WS_GROUP | WS_TABSTOP
    PUSHBUTTON      "Cancel", IDCANCEL, 52, 166, 44, 14, WS_GROUP | WS_TABSTOP
    PUSHBUTTON      "&amp;Help", pshHelp, 100, 166, 44, 14, WS_GROUP | WS_TABSTOP

    CONTROL         "", COLOR_RAINBOW, "static",
                    SS_SUNKEN | SS_SIMPLE | WS_CHILD, 152, 4, 118, 116

    CONTROL         "", COLOR_LUMSCROLL, "static",
                    SS_SUNKEN | SS_SIMPLE | WS_CHILD, 280, 4, 8, 116

    CONTROL         "", COLOR_CURRENT, "static",
                    SS_SUNKEN | SS_SIMPLE | WS_CHILD, 152, 124, 40, 26

    PUSHBUTTON      "&amp;o", COLOR_SOLID, 300, 200, 4, 14, WS_GROUP
    RTEXT           "Color", COLOR_SOLID_LEFT, 152, 151, 20, 9
    LTEXT           "|S&amp;olid", COLOR_SOLID_RIGHT, 172, 151, 20, 9

    RTEXT           "Hu&amp;e:", COLOR_HUEACCEL, 194, 126, 20, 9
    EDITTEXT,       COLOR_HUE, 216, 124, 18, 12, WS_GROUP | WS_TABSTOP

    RTEXT           "&amp;Sat:", COLOR_SATACCEL, 194, 140, 20, 9
    EDITTEXT,       COLOR_SAT, 216, 138, 18, 12, WS_GROUP | WS_TABSTOP

    RTEXT           "&amp;Lum:", COLOR_LUMACCEL, 194, 154, 20, 9
    EDITTEXT,       COLOR_LUM, 216, 152, 18, 12, WS_GROUP | WS_TABSTOP

    RTEXT           "&amp;Red:", COLOR_REDACCEL, 243, 126, 24, 9
    EDITTEXT,       COLOR_RED, 269, 124, 18, 12, WS_GROUP | WS_TABSTOP

    RTEXT           "&amp;Green:", COLOR_GREENACCEL, 243, 140, 24, 9
    EDITTEXT,       COLOR_GREEN, 269, 138, 18, 12, WS_GROUP | WS_TABSTOP

    RTEXT           "Bl&amp;ue:", COLOR_BLUEACCEL, 243, 154, 24, 9
    EDITTEXT,       COLOR_BLUE, 269, 152, 18, 12, WS_GROUP | WS_TABSTOP

    PUSHBUTTON      "&amp;Add to Custom Colors", COLOR_ADD, 152, 166, 142, 14,
                    WS_GROUP | WS_TABSTOP
END
</pre>
<p>
Our resource file is just a copy of the original
<code>color.dlg</code> file with no customizations.
We stick a
<code>windows.h</cODE> in front,
and assign it a custom resource ID of 1.
Let's see if we can display it.
</p>
<pre>
#define UNICODE
#define <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/02/12/71851.aspx">_UNICODE</a>
#define STRICT
#include &lt;windows.h&gt;
#include &lt;commdlg.h&gt;

int WINAPI wWinMain(
    HINSTANCE hinst, HINSTANCE hinstPrev,
    LPWSTR lpCmdLine, int nCmdShow)
{
 COLORREF rgCustColors[16] = { 0 };
 CHOOSECOLOR cc = { sizeof(cc) };
 cc.hInstance = reinterpret_cast&lt;HWND&gt;(hinst);
 cc.lpTemplateName = MAKEINTRESOURCE(1);
 cc.Flags = CC_ENABLETEMPLATE;
 cc.lpCustColors = rgCustColors;
 if (ChooseColor(&amp;cc)) {
  MessageBox(nullptr, TEXT("Thank you"), TEXT("Sample"), MB_OK);
 }
 return 0;
}
</pre>
<p>
The <code>hInstance</code> member of the
<code>CHOOSE&shy;COLOR</code>
structure is incorrectly declared as <code>HWND</code>,
so we need to stick in a cast to keep everybody happy.
</p>
<p>
Run this program, and... everything looks perfectly normal.
Good!
Now we can customize it.
</p>
<p>
First, let's just add a message to the dialog.
</p>
<pre>
1 DIALOG LOADONCALL MOVEABLE DISCARDABLE 2, 0, 298, <font COLOR=blue>198</font>
...

    <font COLOR=blue>LTEXT           "Don't forget to smile!",
                    -1, 4, 166, 138, 14</font>

    DEFPUSHBUTTON   "OK", IDOK, 4, <font COLOR=blue>180</font>, 44, 14, WS_GROUP | WS_TABSTOP
    PUSHBUTTON      "Cancel", IDCANCEL, 52, <font COLOR=blue>180</font>, 44, 14, WS_GROUP | WS_TABSTOP
    PUSHBUTTON      "&amp;Help", pshHelp, 100, <font COLOR=blue>180</font>, 44, 14, WS_GROUP | WS_TABSTOP
...
</pre>
<p>
Rebuild the program and run it.
Hey look, a happy message!
Note that in order to fit the message in the dialog box,
we had to make the dialog box taller
and move some buttons out of the way.
</p>
<p>
Just adding static text is nice,
but it's not particularly interesting.
So let's add a check box to the dialog too.
</p>
<pre>
    <font COLOR=blue>AUTOCHECKBOX    "I remembered to s&amp;mile",
                    1000</font>, 4, 166, 138, 14<font COLOR=blue>, WS_TABSTOP</font>
</pre>
<p>
In addition to remembering the color the user chose,
we also want to remember whether they checked the box that
says that they smiled.
The documentation says that when the hook procedure receives a
<code>WM_<wbr>INIT&shy;DIALOG</code>,
the <code>lParam</code> points to the
<code>CHOOSE&shy;COLOR</code> dialog.
We therefore have two options for passing extra data to the
hook procedure.
</p>
<ul>
<li>We can pass a pointer to extra data in the
    <code>lCust&shy;Data</code> member.
    This is the traditional method.</p>
<li>We can append our custom data to the
    <code>CHOOSE&shy;COLOR</code> structure.
    This is
    <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/12/17/10106259.aspx">
    the technique used by the <code>OVERLAPPED</code> structure</a>.
</ul>
<p>
I'll use the traditional method for now.
The <code>lCust&shy;Data</code> is a pointer to a <code>BOOL</code>
that receives the checkbox state on exit.
</p>
<pre>
<font COLOR=blue>UINT_PTR CALLBACK CCHookProc(
    HWND hdlg, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
  switch (uMsg)
  {
  case WM_INITDIALOG:
    {
      auto pcc = reinterpret_cast&lt;CHOOSECOLOR*&gt;(lParam);
      auto pfSmiled = reinterpret_cast&lt;BOOL*&gt;(pcc-&gt;lCustData);
      SetProp(hdlg, TEXT("SmileResult"), pfSmiled);
    }
    break;

  case WM_DESTROY:
    {
      auto pfSmiled = reinterpret_cast&lt;BOOL*&gt;(
           GetProp(hdlg, TEXT("SmileResult")));
      if (pfSmiled) {
       *pfSmiled = IsDlgButtonChecked(hdlg, 1000);
      }
      RemoveProp(hdlg, TEXT("SmileResult"));
    }
  }
  return 0;
}</font>

int WINAPI wWinMain(
    HINSTANCE hinst, HINSTANCE hinstPrev,
    LPWSTR lpCmdLine, int nCmdShow)
{
 COLORREF rgCustColors[16] = { 0 };
 <font COLOR=blue>BOOL fSmiled = FALSE;</font>
 CHOOSECOLOR cc = { sizeof(cc) };
 cc.hInstance = reinterpret_cast&lt;HWND&gt;(hinst);
 cc.lpTemplateName = MAKEINTRESOURCE(1);
 cc.Flags = CC_ENABLETEMPLATE <font COLOR=blue> | CC_ENABLEHOOK</font>;
 cc.lpCustColors = rgCustColors;
 <font COLOR=blue>cc.lCustData = reinterpret_cast&lt;LPARAM&gt;(&amp;fSmiled);
 cc.lpfnHook = CCHookProc</font>;
 if (ChooseColor(&amp;cc) <font COLOR=blue>&amp;&amp; !fSmiled</font>) {
  MessageBox(nullptr, TEXT("<font COLOR=blue>You forgot to smile.</font>"),
             TEXT("Sample"), MB_OK);
 }
 return 0;
}
</pre>
<p>
Now, the program displays a message if you selected a color
but did not check the
<i>I remembered to smile</i>
box.
</p>
<p><iframe width="420" height="315"
src="https://www.youtube.com/embed/J6zJ42u7Ahw" frameborder="0" allowfullscreen>
</iframe></p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1136523">
				<div id="div-comment-1136523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140707-00/?p=563#comment-1136523">
			July 7, 2014 at 7:31 am</a>		</div>

		<p>You may want to review the post title&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1136533">
				<div id="div-comment-1136533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140707-00/?p=563#comment-1136533">
			July 7, 2014 at 7:41 am</a>		</div>

		<p>Perhaps Raymond couldn&#39;t decide between customizing and customising and so took an unusual way out of the dilemma. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1136593">
				<div id="div-comment-1136593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140707-00/?p=563#comment-1136593">
			July 7, 2014 at 10:25 am</a>		</div>

		<p>Nice!</p>
<p>I once hooked the color dialog to real-time changes of color.</p>
<p>User makes a selection in dialog controls or just drags the slider and color</p>
<p>changes are seen in real-time without closing the color dialog.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1136603">
				<div id="div-comment-1136603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140707-00/?p=563#comment-1136603">
			July 7, 2014 at 10:28 am</a>		</div>

		<p>&quot;Just to get our feet wet, we won&#39;t customize anything at all! This ensures that we have the basics down before we start trying anything fancy&quot;</p>
<p>Sometimes I try to take a shortcut by skipping this step when coding something new. That&#39;s pretty much always a mistake.</p>
<p>PS: look for an upcoming episode of Microspeak: &quot;Customing&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1136613">
				<div id="div-comment-1136613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12Bitslab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140707-00/?p=563#comment-1136613">
			July 7, 2014 at 10:50 am</a>		</div>

		<p>I think that is supposed to be Custombing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1136623">
				<div id="div-comment-1136623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henrik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140707-00/?p=563#comment-1136623">
			July 7, 2014 at 11:08 am</a>		</div>

		<p>Think it&#39;s costuming.</p>
<p>Putting on a new costume for the Color dialog :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-1136663">
				<div id="div-comment-1136663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140707-00/?p=563#comment-1136663">
			July 7, 2014 at 1:29 pm</a>		</div>

		<p>I believe that private extension of CHOOSECOLOR should not be encouraged. What if there will be new standard data fields in 2024 version of Choose­Color dialog? When the documented API provides a special dedicated pointer to user-defined data, it&#39;s safer and cleaner.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1136683">
				<div id="div-comment-1136683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Csaboka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140707-00/?p=563#comment-1136683">
			July 7, 2014 at 1:53 pm</a>		</div>

		<p>Alex: Well, CHOOSECOLOR starts with an lStructSize member just like most of the structures defined by the Windows API. Even in 2024, Windows will be able to tell that you are using the 2014 version of the struct from the fact that its first member contains the size of the 2014 version. Whatever custom data you choose to store after it will be left alone by Windows, and you can spare the (admittedly small) overhead of an extra malloc call.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1136703">
				<div id="div-comment-1136703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140707-00/?p=563#comment-1136703">
			July 7, 2014 at 3:26 pm</a>		</div>

		<p>I bet Raymond has an open bet on how many comments will be written about the typo. &nbsp;I wonder if this one counts&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1136743">
				<div id="div-comment-1136743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DebugErr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140707-00/?p=563#comment-1136743">
			July 8, 2014 at 5:02 am</a>		</div>

		<p>On another note, I&#39;d like to replace the old-school color picker dialog system-wide&#8230; ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-1137053">
				<div id="div-comment-1137053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140707-00/?p=563#comment-1137053">
			July 9, 2014 at 8:59 am</a>		</div>

		<p>@Csaboka: in real life scenario, your hookProc may receive messages that did not originate from your customization. You will need to decide if the extra bytes come from your code or not; some may only go _through_ your code. With lCustData, chaining customizations is a couple of bits easier.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

