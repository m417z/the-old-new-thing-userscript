<html>
<head>
<title>Is it legal to have a cross-process parent/child or owner/owned window relationship?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Is it legal to have a cross-process parent/child or owner/owned window relationship?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 12, 2013 / year-entry #100</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130412-00/?p=4683</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer liaison asked whether it was legal to use Set­Parent to create a parent/child relationship between windows which belong to different processes. "If I remember correctly, the documentation for Set­Parent used to contain a stern warning that it is not supported, but that remark does not appear to be present any more. I have...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer liaison asked whether it was legal to use <code>Set&shy;Parent</code> to create a parent/child relationship between windows which belong to different processes. "If I remember correctly, the documentation for <code>Set&shy;Parent</code> used to contain a stern warning that it is not supported, but that remark does not appear to be present any more. I have a customer who is reparenting windows between processes, and their application is experiencing intermittent instability."</p>
<p> Is it technically legal to have a parent/child or owner/owned relationship between windows from different processes? </p>
<p> Yes, it is technically legal. </p>
<p> It is also technically legal to <a href="https://www.youtube.com/watch?v=ti3MkTt5qv4"> juggle chainsaws</a>. </p>
<p> Creating a cross-thread parent/child or owner/owned window relationship implicitly attaches the input queues of the threads which those windows belong to, and this attachment is transitive: If one of those queues is attached to a third queue, then all three queues are attached to each other. More generally, queues of all windows related by a chain of parent/child or owner/owned or shared-thread relationships are attached to each other. </p>
<p> <b>Exercise</b>: What are the equivalence classes generated by taking the transitive closure of parent/child windows, and what would be a natural choice of class representative? What about the equivalence classes generated by the transitive closure of parent/child and owner/owned windows? </p>
<p> This gets even more complicated when the parent/child or owner/owned relationship crosses processes, because cross-process coordination is even harder than cross-thread coordination. Sharing variables within a process is much easier than sharing variables across processes. On top of that, some window messages are blocked between processes. </p>
<p> So yes, it is technically legal, but if you create a cross-process parent/child or owner/owned relationship, the consequences can be very difficult to manage. And they become near-impossible to manage if one or both of the windows involved is unaware that it is participating in a cross-process window tree. (I often see this question in the context of somebody who wants to grab a window belonging to another process and forcibly graft it into their own process. That other process was totally unprepared for its window being manipulated in this way, and things may stop working. Indeed, things will <i>definitely</i> stop working if you change that other window from a top-level window to a child window.) </p>
<p> The existing text was probably removed when somebody pointed out that the action is technically legal (though not recommended for beginners), and instead of trying to come up with new text that describes the situation, merely removed the text that was incorrect. The problem with coming up with new text that describes the situation is that it only leads to more questions from people who want to do it in spite of the warnings. (It's one of those "if you don't already know what the consequences are, then you are not smart enough to do it correctly" things. You must first become the master of the rules before you can start breaking them.) </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1049833">
				<div id="div-comment-1049833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130412-00/?p=4683#comment-1049833">
			April 12, 2013 at 7:14 am</a>		</div>

		<p>I used a similar rule when I told a colleague to always write &quot;new T()&quot; instead of &quot;new T&quot; in C++.</p>
<p>Unless you know what you&#39;re doing, the former is the correct in the cases there&#39;s a difference at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1049843">
				<div id="div-comment-1049843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130412-00/?p=4683#comment-1049843">
			April 12, 2013 at 7:49 am</a>		</div>

		<p>It&#39;s funny you should mention this, because I was able to close a monitoring software&#39;s window by setting its parent to an explorer window and closing that. I sent it in along with the more severe ones that were found. The CEO was really nice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1049863">
				<div id="div-comment-1049863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130412-00/?p=4683#comment-1049863">
			April 12, 2013 at 8:01 am</a>		</div>

		<p>The review panel of twelve-year-old boys should have taken a look at this title.</p>
<p><!-- p>(Also, there seems to be a spurious "call")
</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1049893">
				<div id="div-comment-1049893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Douglas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130412-00/?p=4683#comment-1049893">
			April 12, 2013 at 8:20 am</a>		</div>

		<p>Can you explain what it means for input queues from two different threads to be &quot;attached&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1049903">
				<div id="div-comment-1049903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130412-00/?p=4683#comment-1049903">
			April 12, 2013 at 8:27 am</a>		</div>

		<p>@Chris Sounds like they&#39;ve likely chosen to ignore Windows&#39; built in user account security (eg run the software as a service where a limited user can&#39;t stop it) and install their own screendoor on the submarine. &nbsp;Good luck to them patching that up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1049943">
				<div id="div-comment-1049943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Tandetnik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130412-00/?p=4683#comment-1049943">
			April 12, 2013 at 9:29 am</a>		</div>

		<p>OLE in-place activation relies on cross-process parent-child relationship (embed an Excel spreadsheet into a Word document, double-click it to activate, inspect the window hierarchy with Spy++). Of course in this case both parties are aware of what&#39;s going on.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1049953">
				<div id="div-comment-1049953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130412-00/?p=4683#comment-1049953">
			April 12, 2013 at 10:08 am</a>		</div>

		<p>I&#39;m guessing that the way web browsers implement tabs with different processes is an example of cross-process relationships.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1049983">
				<div id="div-comment-1049983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran Mitrovic</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130412-00/?p=4683#comment-1049983">
			April 12, 2013 at 4:13 pm</a>		</div>

		<p>Oh, this reminds me on a Windows bug I&#39;ve encountered&#8230;</p>
<p>I&#39;ve had a following situation:</p>
<ol>
<li>Parent process creates a main window.</li>
<li>
<p>Child process creates a child window that gets SetParented into the main window.</p>
</li>
<li>
<p>In the &#39;parent&#39; process, PrintWindow is called on a main window.</p>
</li>
<li>
<p>&#39;Child&#39; process in child window&#39;s WM_PAINT does UpdateWindow on a parent window (that is, it goes back to the &#39;parent&#39; process).</p>
</li>
</ol>
<p>Win7 blue screen on this.</p>
<p>Note that I do not work on this project any more and mine part was only point 3; I didn&#39;t have sources for other points, but I&#39;ve figured out eventually how it works and what causes the blue screen. I&#39;ve managed to do some workaround for this (don&#39;t remember any more what), but Windows shouldn&#39;t really crash.</p>
<p>Neat.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1049993">
				<div id="div-comment-1049993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130412-00/?p=4683#comment-1049993">
			April 12, 2013 at 4:42 pm</a>		</div>

		<p>I agree with Goran Mitrovic on one point. Any bluescreen except MANUALLY_INITIATED_CRASH (or one along the lines of I can&#39;t boot) is a kernel bug or hardware problem, and almost all of them are at least trivial DOS level security bugs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1050023">
				<div id="div-comment-1050023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130412-00/?p=4683#comment-1050023">
			April 13, 2013 at 3:31 am</a>		</div>

		<p>@AC: No, it is new T that would be correct in places where new T() would be wrong. (I seem to remember that VC6 had a compiler bug where it would incorrectly compile new T() as new T in certain circumstances but that particular code got rewritten anyway.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1050033">
				<div id="div-comment-1050033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">APZ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130412-00/?p=4683#comment-1050033">
			April 13, 2013 at 5:30 am</a>		</div>

		<p>Agree with Neil, every C++ book I&#39;ve read clearly says, for default constructors, use: new T. Reason is, new T() can be sometimes ambiguous as to whether it&#39;s a constructor call or function declaration.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1050103">
				<div id="div-comment-1050103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jake</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130412-00/?p=4683#comment-1050103">
			April 15, 2013 at 6:14 am</a>		</div>

		<p>@APZ &amp; @AC &#8211; (OT) I suspect the reason AC wants to use &#39;new T()&#39; always, is that is guarantees initialization even for POD, which &#39;new T&#39; does not, leading to fewer &#39;surprises&#39;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1050113">
				<div id="div-comment-1050113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130412-00/?p=4683#comment-1050113">
			April 15, 2013 at 6:21 am</a>		</div>

		<p>Another case where a child window belongs to a different process than the parent is the screensaver preview.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1050123">
				<div id="div-comment-1050123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/petr.minar_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>petr.minar@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130412-00/?p=4683#comment-1050123">
			April 15, 2013 at 6:44 am</a>		</div>

		<p>I always wondered how exactly it works&#8230; For example when SetParent(hWnd, NULL) is called then desktop windows is the new parent. But the input queues should not be attached (at least I see it as big technical problem if they were). But desktop window is special, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

