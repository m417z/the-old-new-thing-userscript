<html>
<head>
<title>If I zero out my memory pages, does that make them page in faster?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If I zero out my memory pages, does that make them page in faster?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 7, 2016 / year-entry #190</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Not really.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143">
an earlier discussion of discardability</a>,
I noted that if you allocate some zero-initialized pages
and never modify them, then the memory manager can just
throw the memory away because it can "recover" the page
full of zeros by simply zeroing out some memory.
Commenter L wanted to know if this means that
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20120712-00/?p=7143#comment-997693">
zeroing out memory can help program performance</a>.
</p>
<p>
No, zeroing out memory does not help.
</p>
<p>
The reason the memory manager knows that it can throw
the zero-filled memory away is that the page is not dirty.
</p>
<p>
When a page faults in (either because it's a zero-initialized
page being accessed for the first time,
or because it needs to be loaded from disk),
the memory manager assigns a physical page,
fills the page with the appropriate data
(zeroes or data from disk),
and points the page table entry at the page.
It also clears the dirty bit, which is a special bit in the
page table entry.
</p>
<p>
When you write to memory, the CPU sets the
dirty bit in the page table entry for the page you wrote to.
This bookkeeping is done automatically by the CPU and requires
no effort from the operating system.
When it comes time to page out the memory, the memory manager
can do a quick check of the dirty bit, and if it's clear,
then it knows that the memory was not modified since it was
originally faulted in, which means that there are no changes
that need to be written to disk.
The next time the page faults in,
it can be initialized the same way it was last time
(filled with zeroes or loaded from disk).
</p>
<p>
If you manually zero out the page, then you set the dirty bit,
and the memory manager will say,
"Well, it looks like the program modified the memory,
so I'll have to write it out to the page file so I don't lose it."
</p>
<p>
Now, in theory, the memory manager could add an extra step:
Check if the page consists entirely of zeroes,
and if so, then mark it as a zero-initialized page and discard it.
The memory manager doesn't do this because it's such a low
probability shot.
The savings in the rare cases where a page being paged out happens
to be a dirty page full of zeroes
are outweighed by the cost of checking the page in all the cases
where the page is not filled with zeroes.
</p>
<p>
In a sense, this is a self-fulfilling prophecy.
The memory manager doesn't perform this check because
it pays off so rarely as not to be worth the effort of checking.
But since the memory manager doesn't perform the check,
programs don't bother zeroing out pages when they are done
with them.
This creates a feedback loop and the net result is that
nobody zeroes out pages because it doesn't help.
</p>
<p>
You can imagine an alternate universe where a positive feedback
loop exists:
The memory manager performs this check because it pays off,
and the fact that the memory manager performs the check
induces more programs to zero out their pages,
which increases the payoff.
But that's not the world we live in today.
</p>
<p>
And we're likely never to enter that world:
Programs which want to tell the memory manager,
"Don't bother paging this memory back out because I don't
care what's in it" can convey this message by passing the
<code>MEM_<wbr>RESET</code> flag to the
<code>Virtual&shy;Alloc</code> function.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1264155">
				<div id="div-comment-1264155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264155">
			September 7, 2016 at 7:39 am</a>		</div>

		<p>I wonder how quick the all-zeros check would be in the average case for a dirty, non-zero-filled page? Remember, you can stop scanning as soon as you find any non-zero byte, and the checks would be embarrassingly parallelable with e.g. SSE instructions.</p>
<p>Or, for an average dirty, non-zero-filled page, what are the odds that the first, say, 64 bytes are all zeros? Almost certainly a lot more likely than 2^-64, as the average dirty page is not random, but probably still fairly unlikely. Alternatively, for the worst case, what are the odds that all but the last 64 bytes are zero?</p>
<p>In comparison, what&#8217;s the speed difference between scanning a page of physical memory, and writing a page to disk? Note, this would have been much higher in the past with spinning rust, especially on a system that&#8217;s I/O bound because it&#8217;s doing lots of swapping due to memory pressure &#8211; i.e. at the time that the most paging will be happening!</p>
<p>It&#8217;s might not end up being a win, but the benchmarks (if they had existed) might have proved interesting.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1264175">
				<div id="div-comment-1264175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eduardo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264175">
			September 7, 2016 at 8:18 am</a>		</div>

		<p>@Karellen, the cost is low, but not as low is any gains.</p>
<p>Resetting a page is simpler and more informative to the memory manager than zeroing it.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1264195">
				<div id="div-comment-1264195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264195">
			September 7, 2016 at 9:17 am</a>		</div>

		<p>I find the MEM_RESET flag a little confusing.  What happens if I call VirtualAlloc(MEM_RESET) and then later write to the page?  Does the memory manager realize that this is an interesting page again?  (The MEM_RESET_UNDO flag isn&#8217;t available until Windows 8.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1264205">
				<div id="div-comment-1264205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IInspectable</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264205">
			September 7, 2016 at 9:23 am</a>		</div>

		<p>Since it is the CPU that sets the dirty flag, the memory manager will know, that you have written to the page. When it comes time to page out that memory page, the memory manager presumably checks both the dirty flag and the MEM_RESET flag to evaluate, whether it needs to be paged out to disk or not. However interesting the page may be, if the MEM_RESET flag is set, it simply gets thrown out the window.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1264235">
				<div id="div-comment-1264235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Douglas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264235">
			September 7, 2016 at 10:19 am</a>		</div>

		<p>Well, the VirtualAlloc documentation says this:<br />
&#8220;Using this value does not guarantee that the range operated on with MEM_RESET will contain zeros.&#8221;</p>
<p>So I imagine what happens is that the memory manager just clears the dirty bit.</p>
<p>Then if you read before the page gets paged out (sorry, discarded. It would be paged out normally.), you read the old values.<br />
If you read from the page after it&#8217;s been discarded, it&#8217;s as if you&#8217;re reading from a freshly committed page, you read zeros.<br />
Whenever you write to the page, the dirty bit gets set, so from then on, the page gets paged out instead of discarded.</p>
<p>Ergo, there is no &#8220;MEM_RESET flag&#8221; that is kept around. Passing the MEM_RESET flag to VirtualAlloc just clears the dirty bit flag (which is undone by writing to the page again).</p>
<p>@Peter:<br />
As said above, writing to the page sets the dirty bit again, so it won&#8217;t get discarded. However, if it&#8217;s been discarded in the meantime, the old data was lost.</p>
<p>The purpose of MEM_RESET_UNDO, as far as I can tell, is twofold:<br />
1) Set the dirty bit without modifying the page contents. Naturally, if you can just say &#8220;*x = *x;&#8221;, it doesn&#8217;t matter.<br />
2) Tell you if any pages were discarded, or if they just happened to be kept around. You might have trouble telling this on your own.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1264305">
				<div id="div-comment-1264305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264305">
			September 7, 2016 at 11:53 am</a>		</div>

		<p>That sounds reasonable to me, but I wish the documentation spelled this out.  The way the documentation is written, it sounds like the memory won&#8217;t ever be paged again.  (Which would make re-using it extremely dangerous.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mzzt even thread-even depth-1 parent" id="comment-1264225">
				<div id="div-comment-1264225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/The+MAZZTer' rel='external nofollow' class='url'>The MAZZTer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264225">
			September 7, 2016 at 9:44 am</a>		</div>

		<p>I would imagine the better way to do this is simply deallocate your memory when you would want to fill it with zeroes, then reallocate it when you would want to use it again. Then you&#8217;re giving the memory manager all the information it needs to manage your memory as efficiently as possible, including deallocating the page and reallocating you a page full of zeroes with no dirty bit later.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1264365">
				<div id="div-comment-1264365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264365">
			September 8, 2016 at 7:25 am</a>		</div>

		<p>I would imagine that if you would find MEM_RESET to be easier if you are managing your own memory allocations from a larger arena: you would keep your allocator but gain the benefits that the VM memory manager gives you. Whether this applies to your program likely has more to do with the language and libraries that you use rather than any particular philosophical viewpoint you have regarding memory allocation, IMO.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1264255">
				<div id="div-comment-1264255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264255">
			September 7, 2016 at 10:56 am</a>		</div>

		<p>But but!  Zeros weigh less than ones, don&#8217;t they?   So, zero-filled pages should be brought in faster.  </p>
<p>Also, if you zero out your entire hard drive, it will weigh slightly less, right?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1264295">
				<div id="div-comment-1264295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264295">
			September 7, 2016 at 11:27 am</a>		</div>

		<p>Of course not. Reed–Solomon coding replace you zeroes with something else, so you need to find exact pattern.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1264615">
				<div id="div-comment-1264615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bmm6o</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264615">
			September 9, 2016 at 5:19 pm</a>		</div>

		<p>Reed-Solomon is a linear code, so the all zero message should get mapped to the all zero codeword.  It&#8217;s longer, but it will weight the same.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt depth-2 parent" id="comment-1264315">
				<div id="div-comment-1264315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264315">
			September 7, 2016 at 12:50 pm</a>		</div>

		<p>I think it&#8217;s the other way around, since 0&#8217;s are fat and 1&#8217;s are skinny.</p>
<p>Anyway, the secret to data compression is to stack the 0&#8217;s up like tires and stuff all the 1&#8217;s inside them.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1264455">
				<div id="div-comment-1264455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264455">
			September 8, 2016 at 9:47 am</a>		</div>

		<p>I hadn&#8217;t thought of sticking the 1&#8217;s inside the zeros!  That&#8217;s genius.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1264625">
				<div id="div-comment-1264625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom West</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264625">
			September 10, 2016 at 10:23 am</a>		</div>

		<p>&gt; That&#8217;s genius</p>
<p>Indeed.  I blame not thinking of it on the fact that I&#8217;m a software engineer, and stacking 1&#8217;s and 0&#8217;s is perilously close to a hardware concern.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command even thread-even depth-1 parent" id="comment-1264285">
				<div id="div-comment-1264285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264285">
			September 7, 2016 at 11:27 am</a>		</div>

		<p>Those so-called RAM defragmentation apps&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1264325">
				<div id="div-comment-1264325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264325">
			September 7, 2016 at 3:19 pm</a>		</div>

		<p>But Dr. Reimu&#8217;s patented snake oi&#8211; I mean RAM defragmenter solves all PC Ills! Buy now!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1264335">
				<div id="div-comment-1264335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264335">
			September 8, 2016 at 12:40 am</a>		</div>

		<p>Only some apps are concerned with the performance hit that heavy memory fragmentation brings to their use case, but usually they manage it themselves (ie. AAA video games with their own memory manager/allocators).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1264495">
				<div id="div-comment-1264495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Koopa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264495">
			September 9, 2016 at 12:01 am</a>		</div>

		<p>There&#8217;s this feeling again after reading your article, being surprised how trivial it was to answer the question in the title.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1264506">
				<div id="div-comment-1264506" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264506">
			September 9, 2016 at 1:24 am</a>		</div>

		<p>To me it looks like memory manager do checking zero.<br />
<a href="https://msdn.microsoft.com/en-us/library/dn613877.aspx" rel="nofollow">https://msdn.microsoft.com/en-us/library/dn613877.aspx</a><br />
&#8220;In addition, the memory manager now checks for zeroed pages before it reads or writes.&#8221;<br />
&#8220;the memory manager simply puts the page on the zero-page list and marks the page as demand-zero in the page table.&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1264885">
				<div id="div-comment-1264885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160907-00/?p=94265#comment-1264885">
			September 13, 2016 at 3:02 pm</a>		</div>

		<p>The memory manager as of Vista does indeed check for all zeroes before writing to the pagefile. I wrote the original prototype that showed that it was worth it. Some of this was due to apps dirtying their zero-init pages with inits to zero. Some of it was due to user mode zeroing pages for security reasons (not kernel mode &#8211; pages on its free lists don&#8217;t get paged out). But it was common enough to make it worthwhile.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

