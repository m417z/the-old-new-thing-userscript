<html>
<head>
<title>You can't leave a critical section you never entered</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>You can&#8217;t leave a critical section you never entered</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 19, 2009 / year-entry #183</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090619-00/?p=17823</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If you call LeaveCriticalSection on a critical section you never entered, the behavior is undefined. Critical sections are an extremly high-traffic code path. Intense work goes into making them as fast as possible. Customers like to ask questions like "Exactly how many cycles does it take to enter a critical section? We're not going to...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>If you call <code>LeaveCriticalSection</code> on a critical section you never entered, the behavior is undefined.</p>
<p> Critical sections are an extremly high-traffic code path. Intense work goes into making them as fast as possible. Customers like to ask questions like "Exactly how many cycles does it take to enter a critical section? We're not going to use them if they're too slow." They don't say what they are going to do if critical sections are too slow for them, but the threat is real (even if the justification is bogus). I've seen programmers respond to code feedback of the form "You need a critical section here" with "No, I'm not going to bother. I'm afraid it'll slow down my code." </p>
<p> Given that critical sections are so heavily used, the algorithm gets tweaked regularly in order to improve performance. Sometimes the tweaks are minor; other times, the algorithm gets a major overhaul. Of course, the hope is that <a href="http://blogs.msdn.com/oldnewthing/archive/2004/05/25/141253.aspx"> by changing only the insides, nobody will notice</a>. On the other hand, <a href="http://blogs.codegear.com/abauer/2008/02/06/38855/"> people who relied on undefined behavior</a> (like exiting a critical section they never entered and hoping that something meaningful would happen) are going to see changes in behavior. </p>
<p> I don't know the precise reasons why the internals of critical sections changed, but I suspect it had to do with <a href="http://www.bluebytesoftware.com/blog/PermaLink,guid,e40c2675-43a3-410f-8f85-616ef7b031aa.aspx"> mitigating the effect of lock convoy</a>. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-748193">
				<div id="div-comment-748193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090619-00/?p=17823#comment-748193">
			June 19, 2009 at 4:13 pm</a>		</div>

		<p>Chuck Norris can leave a critical section he never entered, but he can also divide by zero so I guess it&#8217;s not THAT impressive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-748253">
				<div id="div-comment-748253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt [C++ MVP]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090619-00/?p=17823#comment-748253">
			June 19, 2009 at 5:57 pm</a>		</div>

		<p>For these kind of questions, it&#8217;s Jon Skeet who is given supernatural powers.</p>
<p>For example, &quot;Jon Skeet never leaves a critical section, the critical section goes wherever he is.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-748313">
				<div id="div-comment-748313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090619-00/?p=17823#comment-748313">
			June 19, 2009 at 8:10 pm</a>		</div>

		<p>Bruce Schneier can enter a critical section in 0 cycles. But as no-one has ever dared to enter into a race condition against him, it is unknown if he bothers to use them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-748363">
				<div id="div-comment-748363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090619-00/?p=17823#comment-748363">
			June 19, 2009 at 10:25 pm</a>		</div>

		<p>@configurator</p>
<p>Starting with Windows Server 2003 SP1</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms682530" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms682530</a>(VS.85).aspx</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-748383">
				<div id="div-comment-748383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090619-00/?p=17823#comment-748383">
			June 20, 2009 at 1:01 am</a>		</div>

		<p>OK, it sounds like the problem is that fair locking requires that the next thread waiting be given the lock, then wait to be scheduled. This can cause threads that try to acquire locks more frequently than a context switch can take place to end up in live-lock. The solution to this is to allow threads that ask for a lock after a waiting thread has been given it, but before it has had a chance to execute, to steal said lock. Right?</p>
<p>And so the lesson is that solving problems like that could require changes to critical sections such that undefined behavior may be different than before. Right?</p>
<p>However, solving such a problem is critical to Windows scaling to many-core CPUs, so we can&#8217;t rely on such undefined behavior to remain unchanged. Right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-748333">
				<div id="div-comment-748333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">configurator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090619-00/?p=17823#comment-748333">
			June 19, 2009 at 8:22 pm</a>		</div>

		<p>When was this change made? I assume between versions of Windows; in that case, between which versions?</p>
<p>I don&#8217;t suppose anyone relied on this behavior intentionally; there&#8217;s probably a function that does something and exits a critical section &#8211; and they called it even when not in a critical section due to laziness. The bug exists in the software, but is *completely undetectable*. It is understandable how that bug could be introduced by mistake; that is why, if you don&#8217;t allow something to happen, you should actually not allow it to happen in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-748353">
				<div id="div-comment-748353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090619-00/?p=17823#comment-748353">
			June 19, 2009 at 10:24 pm</a>		</div>

		<p>Perhaps my googling (or binging) skills need to be refined (or I just need to wait for the latest edition of Windows Internals to arrive in the post), but I couldn&#8217;t readily find the answer to my query&#8230; exactly how fair/unfair are mutexes, critical sections, et. al. in Vista and Server 2008 (and even Win7)? Is there any mechanism in place to prevent absolute starvation?</p>
<p>I saw an interview done a short time ago with Mark Russinovich where he talked about dealing with hot locks and reducing contention in the kernel (for Win7 I believe) to make it scalable to something like 256 cores, but he didn&#8217;t go into implementation details.</p>
<p>Was anything like the following ever considered?</p>
<p>Take the existing Vista/Server 2003 sp1 algorithm (non-FIFO/unfair) and add a second queue, SHORTLIST. Threads are only added to SHORTLIST if a dequeued thread wakes up to find that its lock was taken by a new thread during the context switch. Then (designer&#8217;s choice) either:</p>
<p>A) treat SHORTLIST as strictly FIFO (new threads can take the lock before threads in the primary queue ONLY if SHORTLIST is empty &#8211; essentially making SHORTLIST a single-item &quot;on deck&quot; position); or</p>
<p>B) add a member to the QueueItem structure that is incremented each time a thread is queued onto SHORTLIST (or holds the total number of ticks the thread has been waiting), and if that value has reached a certain threshold when a thread is dequeued from SHORTLIST, then it basically goes into an &quot;on deck&quot; position where its place in line for the lock can no longer be pre-empted.</p>
<p>My first thought was something like (A), but quickly realized that a convoy could still form due to the second wake-up time. Though, I don&#8217;t know if the additional overhead of (B) would have a significant enough performance cost such that the trade-off between a convoy vs. total starvation would be infeasible. i.e. the number of threads per time-frame required to hit a single critical section at a rate high enough to cause absolute or nearly-absolute starvation (using the existing unfair algorithm) either* suggests an additional synchronizer at a higher level in the application (like a threadpool with a max size appropriate to the workload), or describes a system that will not exist any time in the near future (ex: 1024-core Larrabee-cousin descendant).</p>
<p>*assuming, of course, that the application/system is well written and doesn&#8217;t do silly things like Sleep() while holding the lock.</p>
<p>Should I just wait for Windows Internals 5th Edition to show up?</p>
<p>Am I answering my own questions? LOL</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-748603">
				<div id="div-comment-748603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://stackoverflow.com/users/2230/euro-micelli' rel='external nofollow' class='url'>Euro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090619-00/?p=17823#comment-748603">
			June 22, 2009 at 10:35 am</a>		</div>

		<p>Coincidentally, This weekend I witnessed a real life case that bears some resemblance to this scenario (although not quite the same).</p>
<p>At a popular burger vendor at the Nats&#8217; ballpark, customers were buying their burgers and were given receipts with numbers &#8212; standard stuff. What&#8217;s interesting is that the burgers were completed in batches of about 6 to 8 and sent together in a tray to the front counter.</p>
<p>With half a dozen people in front of her ready for their orders, the attendant was spending more time trying to find the &quot;next&quot; consecutive number among the burgers than actually handing the burgers out. In the interest of &quot;fairness&quot;, the whole process took a lot longer than if she had simply picked up the orders randomly (or in &quot;tray order&quot;) from the tray. I seriously doubt anybody would have been upset.</p>
<p>The cause was not the same (&quot;thread sorting&quot; is not the same as &quot;thread scheduling&quot;), but the effect was similar: the process of setting up the &quot;next fair one&quot; took a substantial amount of time compared to just picking one that was &quot;ready now&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-748783">
				<div id="div-comment-748783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090619-00/?p=17823#comment-748783">
			June 22, 2009 at 2:22 pm</a>		</div>

		<p>@Euro,</p>
<p>My opinion is, that it doesn&#8217;t make sense to *guarantee* 100% fairness. There are always some corner cases that the guarantee may be very expensive. What makes sense is to make it fair most of the time (like wait implementation in Windows does). Anyway, as soon as you have a multithreaded (and even more, multiprocessor) system, the concept of strict ordering between threads doesn&#8217;t exist amymore. 100% fairness is then pointless.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-749333">
				<div id="div-comment-749333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://stackoverflow.com/users/2230/euro-micelli' rel='external nofollow' class='url'>Euro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090619-00/?p=17823#comment-749333">
			June 23, 2009 at 12:25 pm</a>		</div>

		<p>@Alexandre:</p>
<p>Agree &#8211; no arguments from me. Did it sound like I was supporting &#8216;fairness at all costs&#8217;? Maybe I need to clarify this one sentence:</p>
<p>&quot;&#8230; I seriously doubt anybody would have been upset [if she had just handed out the burgers out of sequence, thereby making the overall process faster at the expense of &#8216;fairness&#8217;].&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-749633">
				<div id="div-comment-749633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://K.Hagan@thermoteknix.com' rel='external nofollow' class='url'>Ken Hagan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090619-00/?p=17823#comment-749633">
			June 24, 2009 at 3:36 pm</a>		</div>

		<p>&#8216;I&#8217;ve seen programmers respond to code feedback of the form &quot;You need a critical section here&quot; with &quot;No, I&#8217;m not going to bother. I&#8217;m afraid it&#8217;ll slow down my code.&quot;&#8217;</p>
<p>To which the obvious response is, &quot;Well if you don&#8217;t care about actually working properly, then you can make it run *much* faster by omitting the rest of the code as well.&quot;. Still, I&#8217;ve got to admire their gall in so openly espousing such reckless disregard for their jobs.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

