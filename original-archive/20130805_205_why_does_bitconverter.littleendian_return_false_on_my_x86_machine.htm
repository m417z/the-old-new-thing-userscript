<html>
<head>
<title>Why does BitConverter.LittleEndian return false on my x86 machine?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does BitConverter.LittleEndian return false on my x86 machine?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 5, 2013 / year-entry #206</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>27</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Welcome to CLR Week 2013, returned from its two-year hiatus. A customer reported that when they checked with the debugger, Bit­Converter.Little­Endian reported false even though they were running on an x86 machine, which is a little-endian architecture. ushort foo = 65280; 65280 BitConverter.IsLittleEndian false BitConverter.GetBytes(foo) {byte[2]} [0]: 0 [1]: 255 The bytes are extracted in...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Welcome to CLR Week 2013,
returned from its
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2012/07/30/10334554.aspx">
two-year hiatus</a>.
</p>
<p>
A customer reported that when they checked with the debugger,
<code>Bit&shy;Converter.<wbr>Little&shy;Endian</code>
reported <code>false</code>
even though they were running on an x86 machine,
which is a little-endian architecture.
</p>
<pre>
ushort foo = 65280;
<i>65280</i>
BitConverter.IsLittleEndian
<i>false</i>
BitConverter.GetBytes(foo)
<i>{byte[2]}
[0]: 0
[1]: 255</i>
</pre>
<p>
The bytes are extracted in little-endian order,
despite the claim that the machine is big-endian.
"I don't get it."
</p>
<p>
I didn't know the answer,
but I knew how to use a search engine,
and a simple search quickly found
<a HREF="http://stackoverflow.com/q/2023672/">this explanation</a>:
</p>
<p>
Reading a member from the debugger merely reads the value of the member
from memory.
</p>
<p>
That simple statement hides the answer by saying what happens
and leaving you to figure out what doesn't happen.
Here's what doesn't happen:
Reading a member from the debugger
<i>does not execute the code to initialize that member</i>.
</p>
<p>
In the case of
<code>Bit&shy;Converter</code>,
the <code>Little&shy;Endian</code> member
is initialized by the static constructor.
But when are static constructors run?
For C#, static constructors are run
<a HREF="http://msdn.microsoft.com/en-us/library/k9x6w0hc%28v=vs.80%29.aspx">
before the first instance is created or any static members are referenced</a>.
Therefore, if you never create any <code>Bit&shy;Converter</code> objects
(which you can't since it is a static-only class),
and if you never access any static members,
then its static constructor is not guaranteed to have run,
and consequently
anything that is initialized by the static constructor
is not guaranteed to have been initialized.
</p>
<p>
And then when you go looking at in the debugger,
you see the uninitialized value.
</p>
<p>
Why doesn't the debugger execute static constructors
before dumping a value from memory?
Probably because the debugger wants to avoid surprises.
It would be weird if you tried to dump a value from the debugger
and the program resumed execution!
</p>
<p>
Now, when you ask the debugger to evaluate
<code>Bit&shy;Converter.<wbr>Get&shy;Bytes(<wbr>foo)</code>,
the debugger has no choice but to execute application code,
but that's okay because you explicitly told it to.
But let's continue that debugging session:
</p>
<pre>
ushort foo = 65280;
<i>65280</i>
BitConverter.IsLittleEndian
<i>false</i>
BitConverter.GetBytes(foo)
<i>{byte[2]}
[0]: 0
[1]: 255</i>
BitConverter.IsLittleEndian
<i>true</i> &larr; hey look
</pre>
<p>
Your call to
<code>Bit&shy;Converter.<wbr>Get&shy;Bytes(<wbr>foo)</code>
caused code to execute,
and then the CLR said,
"Okay, but before I call this member function, I am required
to run the static constructor, because those are the rules,"
and that resulted in the <code>Is&shy:Little&shy;Endian</code>
field being initialized to <code>true</code>.
</p>
<p>
The customer replied,
"Thanks.
The trick was finding the correct search terms."
</p>
<p>
I didn't think my choice of search terms was particularly
devious.
I simply searched for
<a HREF="http://www.bing.com/search?q=bitconverter.islittleendian+false">
bit&shy;converter.<wbr>is&shy;little&shy;endian false</a>.
</p>
<p>
<b>Bonus reading</b>:
<a HREF="http://commandcenter.blogspot.com/2012/04/byte-order-fallacy.html">
The byte order fallacy</a> by
<a HREF="http://en.wikipedia.org/wiki/Rob_Pike">Rob Pike</a>.
"Whenever I see code that asks what the native byte order is,
it's almost certain the code is either wrong or misguided."</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1070673">
				<div id="div-comment-1070673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/msteppat_4000_arcor.de/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>msteppat@arcor.de</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070673">
			August 5, 2013 at 7:09 am</a>		</div>

		<p>IsLittleEndian being a field and not a trivially inlinable property (returning a constant value) is a design mistake to begin with.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1070683">
				<div id="div-comment-1070683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/raceprouk_4000_hotmail.co.uk/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>raceprouk@hotmail.co.uk</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070683">
			August 5, 2013 at 7:17 am</a>		</div>

		<p>@xor88: It is, but only if you ignore the fact that .NET is designed to run on multiple architectures (x86/x64/ARM/PowerPC at least).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1070703">
				<div id="div-comment-1070703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070703">
			August 5, 2013 at 7:54 am</a>		</div>

		<p>I&#39;ll disagree with the assertion &quot;almost certain&quot; in the Bonus Reading section (after having duly read the linked article).</p>
<p>It is common in our multi-processor embedded systems that one of them is big-endian while the others are little-endian. Several years ago I did an FPGA that implemented a communications pipe between them using the 16-bit native data busses, connecting them bit-for-bit through a 1K-deep FIFO. The BE processor wrote it&#39;s 16-bit words one way, and the LE processor the other way.</p>
<p>That project had a heated argument over who was going to do byte-swapping (SW or HW).</p>
<p>Byte order doesn&#39;t matter&#8230;. only if you 1) send data only as 8-bit bytes, and 2) agree ahead of time on the order in which bytes are transferred.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1070713">
				<div id="div-comment-1070713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070713">
			August 5, 2013 at 8:00 am</a>		</div>

		<p>I would have assumed that this is property is exposing an intrinsic constant of the runtime engine, so there is no need to run a static constructor to get this value. (At least, the runtime engine should know the endianess of the processor it emits machine instructions for.)</p>
<p>In pseudo-VB.NET:</p>
<p>ReadOnly Class Property IsLittleEndian as Boolean</p>
<p>Get</p>
<p> &nbsp;return Environment.IsLittleEndian</p>
<p>End Get</p>
<p>This is still trivially inlinable, und would work also in the Debugger. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1070723">
				<div id="div-comment-1070723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/msteppat_4000_arcor.de/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>msteppat@arcor.de</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070723">
			August 5, 2013 at 8:06 am</a>		</div>

		<p>The source code if the .NET framework could just have</p>
<p>#if x86 || x64</p>
<p>return true;</p>
<p>#else</p>
<p>return false;</p>
<p>#end</p>
<p>as the property body.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1070733">
				<div id="div-comment-1070733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070733">
			August 5, 2013 at 8:13 am</a>		</div>

		<p>Rob Pike needs to learn about the hton? family of functions (htons, htonl, htonq).</p>
<p>@Hm: I would have done it with a static initializer inside #ifdef, which results in the behavior actually observed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1070753">
				<div id="div-comment-1070753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">McKay</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070753">
			August 5, 2013 at 8:46 am</a>		</div>

		<p>@Karellen</p>
<p>You want a debugger to run all static constructors each time? The number of static constructors is theoretically infinite. Maybe what you want is just a certain subset of them? If that&#39;s the case, put those in program startup.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1070763">
				<div id="div-comment-1070763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Julien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070763">
			August 5, 2013 at 8:56 am</a>		</div>

		<p>@Karellen, adding to what McKay said, this also opens things up for some interesting Heisenbugs, where the program you&#39;re debugging behaves differently in the debugger than in the normal runtime. Yeah, it should not actually behave differently in that case, but if your program would not have any bugs you probably would not run it in the debugger in the first place&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1070773">
				<div id="div-comment-1070773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070773">
			August 5, 2013 at 8:58 am</a>		</div>

		<p>Java also has a similar stipulation, where class static constructors are run before the first instance is created or before the first static method is called. &nbsp;If the class static constructor throws an exception, then it terminates the program, since it&#39;s impossible to catch that exception anywhere &#8212; you&#39;d have to put a try/catch block around every usage of the class, which would be totally insane.</p>
<p>Also, CLR Week &gt;&gt; Batch File Week</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1070783">
				<div id="div-comment-1070783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Julien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070783">
			August 5, 2013 at 9:02 am</a>		</div>

		<p>@McKay, by the way, why are you saying that the number is theoretically infinite? While it is theoretically unbounded (meaning that there may be arbitrary many static constructors, practical considerations like available resources aside), I&#39;m (genuinely!) curious when a program may have infinitely many static constructors. Generics/templates maybe?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1070793">
				<div id="div-comment-1070793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070793">
			August 5, 2013 at 9:28 am</a>		</div>

		<p>I totally agree with rob on this one. Management think it&#39;s trivial to detect bit endianness, architecture, os version, dot net framework version etc&#8230; But my experience has shown that this type of code will invariably fail in different environnements.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1070853">
				<div id="div-comment-1070853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070853">
			August 5, 2013 at 11:10 am</a>		</div>

		<p>And because you referenced that stackoverflow article here somebody from here added a new answer there to this postmaking a circular reference :).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1070863">
				<div id="div-comment-1070863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070863">
			August 5, 2013 at 11:48 am</a>		</div>

		<p>Glad to see CLR week make a return.</p>
<p>It would be remiss not to mention the great series on static constructors that Eric Lippert did earlier this year: <a rel="nofollow" target="_new" href="http://ericlippert.com/2013/02/06/static-constructors-part-one/">ericlippert.com/&#8230;/static-constructors-part-one</a> &nbsp;It helped me clarify how and when static initialization happens in .NET.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1070873">
				<div id="div-comment-1070873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070873">
			August 5, 2013 at 11:49 am</a>		</div>

		<p>Next best thing after byte-order is alignment.</p>
<p>Curiously, many (most? all?) binary RPC formats have been devised with specific machine performance in mind. They must all be wrong, somehow.</p>
<p>XDR-style RPC message formats will always be a waste of time for little-endian machines. It will also be a waste of time for other-than-4 aligned machines (these were rare back in 2006 (?), see for yourself: <a rel="nofollow" target="_new" href="http://tools.ietf.org/html/rfc4506#page-16">tools.ietf.org/&#8230;/rfc4506</a> )</p>
<p>NDR-style RPC message formats seem to take the best and worst of both worlds. When encoding the message, indicate whatever endianess and alignment/packing the message was built with, allowing C/C++ structs be sent directly to the network. The receiving end must have all the code necessary to decode the message in a generic way, but when the architectural configuration (again, endianess and alignment/packing) are the same as the message&#39;s, it can again just read from the network. This makes reads and writes across the network may be the most efficient when possible, and it still allows for cases where something is common e.g. same-alignment-different-endianess to be a bit optimized. One might think that the worst case of decoding is server-side only, but that&#39;s not true, as the messages from the server to the client are done exactly the same way, so both have to have generic decoders.</p>
<p>But NDR in MSRPC might just mean little-endian, depending if type serialization is version 1 ( <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/cc243890.aspx">msdn.microsoft.com/&#8230;/cc243890.aspx</a> ) or 2 ( <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/cc243889.aspx">msdn.microsoft.com/&#8230;/cc243889.aspx</a> ). Attaboy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1070903">
				<div id="div-comment-1070903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CornedBee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070903">
			August 5, 2013 at 12:31 pm</a>		</div>

		<p>Or the debugger could take a third option and somehow indicate that it is displaying a static member of a class whose static constructor has not yet run.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1070913">
				<div id="div-comment-1070913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070913">
			August 5, 2013 at 1:23 pm</a>		</div>

		<p>@CornedBee: Is the debugger smart enough to know all the code executions paths that could have taken place while the process was running (before being halted)? Is it smart enough to know if members have been initialized yet?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1070743">
				<div id="div-comment-1070743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070743">
			August 5, 2013 at 8:23 am</a>		</div>

		<p>I can&#39;t tell for certain from that link, but do the static constructors have to run *immediately before* the first instance is created or any static members are referenced, or can they run *any time before* the first instance is created or any static members are referenced? Bullet point 4 (&quot;The user has no control on when the static constructor is executed in the program.&quot;) suggests the latter.</p>
<p>If it is the case, it seems it would be permissible for the debugger to run all static constructors immediately on program startup/library load time/attach time. Yes, it could slow start-up time somewhat, but *you&#39;re in the debugger*, and can probably afford the hit in that situation. Or, it could be an optional behaviour, or a command you could give the debugger at any time (&quot;run all un-executed static initialisers now&quot;)</p>
<p>Is there a reason that this is not done? (Other than &quot;the default state of all possible features is &quot;not implemented&quot;, and they start with -100 points&quot;)</p>
<p>(@Joshua &#8211; did you read the linked article? Also, Rob Pike may well have *written* the [hn]to[nh][lsq](3) family of calls :-))</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1070933">
				<div id="div-comment-1070933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070933">
			August 5, 2013 at 3:27 pm</a>		</div>

		<p>@Brian_EE, it&#39;s smart enough to tell if a class&#39;s static constructor has run: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/cbrumme/archive/2003/04/15/51348.aspx">blogs.msdn.com/&#8230;/51348.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1070943">
				<div id="div-comment-1070943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070943">
			August 5, 2013 at 4:09 pm</a>		</div>

		<p>@John Doe: My guess is that POD readonly getters are optimized away, so there&#39;s no method to run: in that case, you&#39;d just have a plain variable with no magic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1070823">
				<div id="div-comment-1070823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070823">
			August 5, 2013 at 10:23 am</a>		</div>

		<p>&quot;For C#, static constructors are run before the first instance is created or any static members are referenced&quot;</p>
<p>Note though that as usual the as-if rule applies. </p>
<p>class Foo {</p>
<p> &nbsp; &nbsp;public static int x;</p>
<p> &nbsp; &nbsp;public static int y = 5;</p>
<p> &nbsp; &nbsp;static { // Java syntax because I&#39;m way too lazy to look up how that worked again in C#</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;x = 1;</p>
<p> &nbsp; &nbsp;}</p>
<p>}</p>
<p>If the only thing you&#39;re doing is read y, the compiler/JIT are perfectly fine to *not* call the static constructor (as a matter of fact at least javac will inline Foo.y &#8211; a really stupid decision by the spec &#8211; so this is not even as theoretic as you&#39;d think). Which makes this whole thing potentially even more surprising to people.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-1070843">
				<div id="div-comment-1070843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070843">
			August 5, 2013 at 10:52 am</a>		</div>

		<p>The declaration in Rotor (Shared Source CLI) 2.0 has a #if BIGENDIAN and sets &#39;public static readonly bool IsLittleEndian&#39; to true or false as appropriate. The CLR rules say to initialise static members in the static constructor.</p>
<p>You can&#39;t use &#39;const&#39; because the CLR rules say that the compiler must replace uses of that symbolic constant with that value. This means that if the declaration *had* used const, you would get different results depending on whether you compiled your C# program to IL on a big- or little-endian machine. And that would be bad.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1070963">
				<div id="div-comment-1070963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070963">
			August 6, 2013 at 12:57 am</a>		</div>

		<p>From embedded software side I totally disagree with Rob: In fact he presents the two lines you would enclose in #ifdef BIGENDIAN and says you won&#39;t need more than that. But it is important to know the encoding of the byte stream (or whatever) and the encoding of the machine your code is running on. Otherwise you&#39;ll never get usable values out of the stream. And for the most time it is not sufficient just to say &quot;whoohoo I&#39;ve got an int, what matters the content?&quot;</p>
<p>Also the point of being able to address a single byte of an int or not: this is point the compiler has to take care of. Maybe it will produce massive overhead, but the compiler will get the job done.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1070973">
				<div id="div-comment-1070973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070973">
			August 6, 2013 at 2:02 am</a>		</div>

		<p>@ErikF, then guess again.</p>
<p>First, this is not a getter, it&#39;s a public static field: <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/system.bitconverter.islittleendian.aspx">msdn.microsoft.com/&#8230;/system.bitconverter.islittleendian.aspx</a></p>
<p>Second, CLR&#39;s rules of static class constructor invocation are very clear, any access to a static or instance member (field, method) will trigger it. But remember that we&#39;re inspecting this static field in the debugger which probably uses reflection or a lower level mechanism, not in normal evaluation.</p>
<p>There&#39;s also a slight difference between having a static constructor or not, even if there are field initializers: <a rel="nofollow" target="_new" href="http://www.yoda.arachsys.com/csharp/beforefieldinit.html">http://www.yoda.arachsys.com/&#8230;/beforefieldinit.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1070983">
				<div id="div-comment-1070983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carsten</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070983">
			August 6, 2013 at 5:00 am</a>		</div>

		<p>Lots of people here have misunderstood Rob Pike&#39;s article. What he is essentially saying is that endianness is only an issue when you&#39;re doing I/O. After you&#39;ve done your I/O, you do not need to care about endianness. So yes, the stream you&#39;re reading must have defined an order of the bytes coming in. You can read these bytes with 100% portable code (as he demonstrates) without knowing the machine&#39;s byte order. #ifdef&#39;s are not necessary.</p>
<p>If you find yourself disagreeing with Rob, you really, really need to go back and re-read the post and understand what he&#39;s saying.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1070993">
				<div id="div-comment-1070993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mockmyberet</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1070993">
			August 6, 2013 at 6:27 am</a>		</div>

		<p>#Carsten:: Amen.</p>
<p>I thought it was brilliant. &quot;//Computer// byte order&quot; should never matter to you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1071003">
				<div id="div-comment-1071003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mockmyberet</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1071003">
			August 6, 2013 at 6:35 am</a>		</div>

		<p>And to whomever didn&#39;t agree with the assertion of &quot;almost certain,&quot; that &quot;assertion&quot; wasn&#39;t an &quot;assertion,&quot; that&#39;s why he says &quot;almost.&quot; &quot;Almost&quot; is the opposite of assertion. Assertion is definite, he states &quot;almost certain&quot; _because_ there are exceptions and, in that statement of &quot;almost,&quot; he is qualifying that. A qualifying statement is quite the opposite of an asserted statement. Most programmers being in their right minds would refrain from making solid, blanket or definitive statements.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071033">
				<div id="div-comment-1071033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130805-00/?p=3623#comment-1071033">
			August 6, 2013 at 8:33 am</a>		</div>

		<p>It would have been nice if the hton? and ntoh? family took char * and dealt with all the machine alignment problems as well as byte order.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

