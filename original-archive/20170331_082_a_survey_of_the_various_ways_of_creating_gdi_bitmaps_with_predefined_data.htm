<html>
<head>
<title>A survey of the various ways of creating GDI bitmaps with predefined data</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A survey of the various ways of creating GDI bitmaps with predefined data</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 31, 2017 / year-entry #83</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>24</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">So many to choose from.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Suppose you have a buffer full of pixels and you
want to create a GDI bitmap that contains those pixels.
</p>
<p>
We'll start with the
<a HREF="https://msdn.microsoft.com/library/dd183485(v=vs.85).aspx">
<code>Create&shy;Bitmap</code> function</a>.
This creates a device-dependent bitmap
with the pixels you provide.
The weird thing about this function is that it's
a device-dependent bitmap, but there's no parameter
that specifies the device!
As a result, the bitmap has the format you specify,
but you can select it only into device contexts
that are compatible with the bitmap format.
For example, if you create a 4bpp bitmap,
then you can select it only into 4bpp device contexts.&sup1;
</p>
<p>
Next up is the misleadingly-named
<a HREF="https://msdn.microsoft.com/library/dd183491(v=vs.85).aspx">
<code>Create&shy;DI&shy;Bitmap</code> function</a>.
Even though the <i>DI</i> stands for device independent,
this function does not create a device-independent bitmap.
It creates a device-dependent bitmap that is compatible
with the provided device context.
The reason it's called <i>DI</i> is that you can provide
pixels in a device-independent format,
and those pixels will be used to initialize the bitmap.
As noted in the documentation, the behavior is
functionally equivalent to
<code>Create&shy;Compatible&shy;Bitmap</code>
followed by
<code>Set&shy;DI&shy;Bits</code>.
</p>
<p>
If it's a device-independent bitmap you want, then
the function to use is
<a HREF="https://msdn.microsoft.com/library/dd183494(v=vs.85).aspx">
<code>Create&shy;DIB&shy;Section</code></a>.
The simplest use of this function creates a device-independent
bitmap and gives you a pointer to the in-memory pixel buffer.
You can then manipulate the pixel buffer directly,
say, by <code>memcpy</code>ing the bytes from your original buffer.
</p>
<p>
The fancier use of this function creates a device-independent
bitmap <i>around existing memory</i>.
The memory needs to be in a file mapping object,
either a file mapping object created from a file
or (more often) a file mapping object created from
the page file (in other words, a shared memory block).
You can then specify the byte offset within the file mapping
at which the pixel buffer starts.
In this case, the memory is not copied;
the memory in the file mapping object is the backing memory
for the bitmap.
If you modify the bitmap, then the contents of the file mapping object change;
if you modify the contents of the file mapping object,
you modify the bitmap.
</p>
<p>
Here's the table:
</p>
<table BORDER=1
    BORDERCOLOR=black
    STYLE="border-collapse: collapse"
    CELLPADDING=3>
<tr>
<th>Function</th>
<th>Type of bitmap</th>
<th>Resulting format</th>
<th>Source pixels</th>
<th>Must format match?</th>
</tr>
<tr>
<td><code>Create&shy;Bitmap</code></td>
<td>Device-dependent</td>
<td>As specified</td>
<td>Copied</td>
<td>Yes</td>
</tr>
<tr>
<td><code>Create&shy;DI&shy;Bitmap</code></td>
<td>Device-dependent</td>
<td>Device-compatible</td>
<td>Copied</td>
<td>No</td>
</tr>
<tr>
<td><code>Create&shy;DIB&shy;Section</code> without <code>hSection</code></td>
<td>Device-independent</td>
<td>As specified</td>
<td>Uninitialized (copy them yourself)</td>
<td>Yes</td>
</tr>
<tr>
<td><code>Create&shy;DIB&shy;Section</code> with <code>hSection</code></td>
<td>Device-independent</td>
<td>As specified</td>
<td>Shared</td>
<td>Yes</td>
</tr>
</table>
<p>
In the above table,
the
<i>Resulting format</i> column describes
the pixel format of the returned bitmap.
The <i>Source pixels</i> column describes
what happens to the pixels you pass as the
source pixels: Are they copied into the bitmap,
or does the bitmap share the memory with the
source pixels?
The <i>Must format match?</i> column
specifies whether the format of the source pixels
must match the pixel format of the returned bitmap.
If <i>Must format match?</i> is <i>No</i>,
then the system will perform a format conversion.
</p>
<p>
&sup1;
Monochrome bitmaps are compatible with any
device context
and have
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20061114-01/?p=29013">
special behavior when selected into color device contexts</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1291016">
				<div id="div-comment-1291016" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291016">
			March 31, 2017 at 11:02 am</a>		</div>

		<p>What about Bitmap::GetHBITMAP from GDI+?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1291025">
				<div id="div-comment-1291025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291025">
			March 31, 2017 at 11:14 am</a>		</div>

		<p>A more precise title would be &#8220;A survey of the various ways of creating GDI bitmaps <b>with GDI</b> with predefined data&#8221;. I&#8217;m not going to try to cover every API that happens to spit out GDI bitmaps.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-odd thread-alt depth-1 parent" id="comment-1291035">
				<div id="div-comment-1291035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291035">
			March 31, 2017 at 12:00 pm</a>		</div>

		<p>The annoying thing with Create­DIB­Section+hSection is that the offset must be DWORD aligned and that is usually not the case in .bmp files.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fredericmagnyf odd alt depth-2" id="comment-1291156">
				<div id="div-comment-1291156" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291156">
			April 3, 2017 at 4:08 am</a>		</div>

		<p>Ah, the BITMAPFILEHEADER throws the BITMAPINFO&#8217;s alignment out of sync? That&#8217;s unfortunate.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1291045">
				<div id="div-comment-1291045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291045">
			March 31, 2017 at 3:05 pm</a>		</div>

		<p>A somewhat related question for anybody in the know: I&#8217;ve written a 68k emulator which includes a frame buffer, so I need constant and fast direct pixel access. When porting it from DOS to Windows 20 years ago I went with the DirectDraw3 interface, which amazingly still works to this day but graphics driver support finally seems to diminish. Now I&#8217;m looking for a newer API which fits the criteria a) fast, b) smooth/filtered hardware stretching, c) usable from C and Win7. GDI is fast enough but stretching looked a lot worse here (even with StretchBltMode HALFTONE). SDL uses GDI and does stretching in software (shudder). OpenGL is not designed for direct pixel access or at least makes it sound very slow. Direct2D looks amazingly complicated and also seem to be geared towards vectors and not pixel access. D3D with a USAGE_DYNAMIC texture sounds hopeful, but I shudder at the thought of learning D3D just to draw one flat texture.</p>
<p>Any suggestions?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-2 parent" id="comment-1291055">
				<div id="div-comment-1291055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291055">
			April 1, 2017 at 4:13 am</a>		</div>

		<p>My suggestion is to try things out because it may surprise you.<br />
For example, Direct2D can deal with pixel based stuff, but there is no convenient wrapper for it. You will be updating the individual pixels in your process&#8217; address space and then updating the Direct2D bitmap.<br />
But anyway, the thing to remember is that something that may &#8220;seem slow&#8221; may not actually be slow. Since you are going to be updating the bitmap pixel by pixel, this is going to have to reside in system memory, not graphics memory, because you need to access it from the CPU. Once it is ready to display, it is then going to be transferred to the graphics memory. I don&#8217;t remember DirectDraw&#8217;s API, but for it to be accessible by the GPU but editable by the CPU, this is how it must have worked under the surface. (Pun intended :3)<br />
So just try things out, you may be surprised.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1291126">
				<div id="div-comment-1291126" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Newby</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291126">
			April 2, 2017 at 4:37 am</a>		</div>

		<p>If you&#8217;re modifying a CPU pixel array and wanting to generate D2D or GDI compatible bitmaps from that on a &#8220;frame by frame&#8221; basis, then WIC can help.  D2D can do this, but modifying the same texture repeatedly through D2D pixel by pixel might actually be slower than creating a new D2D bitmap for your target device from memory via WIC every frame, (and doing so for an accelerated device if you&#8217;re not maintaining a CPU side copy already certainly will be).</p>
<p>Using D3D for this is very easy, and may even be easier than using D2D.  You need to create the D3D device and swap chain (D3D11CreateDeviceAndSwapChain), map the correct back buffer view, memcpy your pixels, unmap and present.  The same caveats apply as with accelerated D2D.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1291145">
				<div id="div-comment-1291145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291145">
			April 3, 2017 at 12:37 am</a>		</div>

		<p>Thanks for the reply Darren. I&#8217;ll have a look at Direct2D then, though it seems a pain to use from C. But so was DirectDraw ;)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude even depth-4 parent" id="comment-1291165">
				<div id="div-comment-1291165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291165">
			April 3, 2017 at 5:19 am</a>		</div>

		<p>Direct2D and DirectWrite cannot be used from C, the interfaces are not exported in a C compatible way.</p>
<p>It is geared towards vectors because it does the drawing and scaling for you so you can support high DPI displays easily.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-msn odd alt depth-5" id="comment-1291195">
				<div id="div-comment-1291195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/poizan42' rel='external nofollow' class='url'>poizan42</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291195">
			April 3, 2017 at 8:01 am</a>		</div>

		<p>What do you mean by that? Right in the introduction of the Direct2D API Overview it says:</p>
<p>&gt; Direct2D provides an API, similar to Direct3D, for use with C or C++.</p>
<p>There&#8217;s clearly a plain C API in there, you don&#8217;t have to use the C++ wrappers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-5" id="comment-1291205">
				<div id="div-comment-1291205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291205">
			April 3, 2017 at 9:05 am</a>		</div>

		<p>They removed the C interfaces from the Windows SDK starting from 14393, up until then they were there.<br />
Because Direct2D is COM, it must be possible to access it from C, if the definitions are available. COM provides binary compatibility to access these interfaces from multiple languages, including C after all.<br />
So, with the 10586 Windows SDK, it will be possible to get the C style definitions and maybe even write your own for those added in newer versions. This obviously wouldn&#8217;t be technically supported but it is possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip odd alt depth-5" id="comment-1291235">
				<div id="div-comment-1291235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291235">
			April 3, 2017 at 9:16 am</a>		</div>

		<p>Also, yes, it is geared towards vectors, but that doesn&#8217;t make it unable to access pixels directly.<br />
ID2D1Bitmap gave you CopyFromMemory, so you could update the bitmap from a block of memory. This bitmap resided in the graphics memory. ID2D1Bitmap1 gave you the ability to create it in a CPU writable way, so you could then map it and write to or read from it.<br />
There is nothing more that you need really. For the rest of it you would essentially treat the bitmaps as something sprite based.<br />
So it may be geared towards vectored, but this is only because the sprite based stuff doesn&#8217;t need that much work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude even depth-5" id="comment-1291245">
				<div id="div-comment-1291245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291245">
			April 3, 2017 at 10:30 am</a>		</div>

		<p>@Darran Rowe, I would say that D2D is &#8220;COMLike.&#8221; It is not COM by any stretch of the term as it does not require a CoInitializeEx call</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip odd alt depth-5" id="comment-1291246">
				<div id="div-comment-1291246" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291246">
			April 3, 2017 at 11:55 am</a>		</div>

		<p>Of course, that is neither here nor there because Direct2D uses a factory function to create the factory interface. Unless you have reversed engineered this function, how do you know the factory function itself doesn&#8217;t call CoInitializeEx?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude even depth-5" id="comment-1291255">
				<div id="div-comment-1291255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291255">
			April 3, 2017 at 12:42 pm</a>		</div>

		<p>Because I did some Direct2D recently and OLE was not loaded</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-msn odd alt depth-5" id="comment-1291275">
				<div id="div-comment-1291275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/poizan42' rel='external nofollow' class='url'>poizan42</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291275">
			April 3, 2017 at 1:45 pm</a>		</div>

		<p>It may be worth pointing out that even a &#8220;C++ only&#8221; API can actually be called from C if you want to go through some (possible a lot) of hoops. You can get at the decorated function names by either telling the linker to map the C indentifiers to the mangled names, or by using GetProcAddress. You can get __thiscall on x86 by declaring the functions as __fastcall and inserting a second dummy argument (it goes into edx, which isn&#8217;t used by __thiscall) &#8211; on x64 __thiscall, __stdcall and __cdecl are luckily all the same, so the this pointer just goes into the first argument. You may have to figure details about the layout of stdlib classes out and hope they don&#8217;t change (but that would also break binary compatibility, so would probably be avoided)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-5" id="comment-1291286">
				<div id="div-comment-1291286" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291286">
			April 3, 2017 at 3:37 pm</a>		</div>

		<p>@kantos:<br />
Then if that is the case, if they are following the rules of COM to make it COM like, then again it is still perfectly usable from C. The compiler would still lay out the vtable in the same way regardless. As an example of this, Direct3D and DXGI uses factory functions to start things off, so they have the potential to be COM like, as you describe it. Yet they still have all of the C definitions available and they are still usable through C.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip odd alt depth-5" id="comment-1291296">
				<div id="div-comment-1291296" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291296">
			April 3, 2017 at 3:39 pm</a>		</div>

		<p>And if COM was not initialised on the thread when you used Direct2D, then since Direct2D depends on Direct3D and DXGI, then neither of these are COM, but COM like API.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude even depth-5" id="comment-1291326">
				<div id="div-comment-1291326" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291326">
			April 4, 2017 at 5:43 am</a>		</div>

		<p>@poizan42 despite my pedantry Darren Rowe is right. It is &#8220;COMLike&#8221; enough you can use COM for parts of it (I nearly did when writing a custom text renderer for DirectWrite until I realized that was dumb).</p>
<p>@Darran Rowe I suspect they are &#8220;COMLike&#8221; and not actual COM for performance reasons, given all that Raymond has elucidated on the pitfalls of getting yourself in the wrong apartment for the component you&#8217;re loading it makes little sense to do that in an API that is always multi-threaded, performance oriented, and deliberately not designed to be used with automation. If I was to guess they used the COM style classes and idioms because it allowed them many of the benefits of COM: implementation hiding, interface versioning, reference counting, etc. and just dumped what didn&#8217;t make sense for their use case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1291357">
				<div id="div-comment-1291357" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291357">
			April 4, 2017 at 10:57 am</a>		</div>

		<p>Apparently raymond thinks anything using vtables are not just comlike, but actually true COM.<br />
<a href="https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20111221-00/?p=8843</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-5" id="comment-1291365">
				<div id="div-comment-1291365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291365">
			April 4, 2017 at 11:20 am</a>		</div>

		<p>I said the opposite. I said, &#8220;I will not get dragged into a game of no true Scotsman.&#8221; You are the one who is going on about what is &#8220;true&#8221; COM.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1291375">
				<div id="div-comment-1291375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291375">
			April 4, 2017 at 3:24 pm</a>		</div>

		<p>IUnknown says hi.<br />
DirectX is COM API. Maybe not pure nor using most of it, but it is basic COM and almost always was. For one, early versions required CoInitialize(Ex). (IIRC Up to DirectX 8 or so)<br />
Second, documentation is unambiguous. In Direct3D 9 it says outright: &#8220;The IDirect3DDevice9 interface is obtained by calling the IDirect3D9::CreateDevice method. (<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb174336" rel="nofollow">https://msdn.microsoft.com/en-us/library/windows/desktop/bb174336</a>)</p>
<p>This interface, like all COM interfaces, inherits the IUnknown interface methods.&#8221;<br />
And Direct3D 11 has &#8220;The ID3D11Device interface inherits from the IUnknown interface.&#8221; (<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ff476379" rel="nofollow">https://msdn.microsoft.com/en-us/library/windows/desktop/ff476379</a>) And links to <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms680509" rel="nofollow">https://msdn.microsoft.com/en-us/library/windows/desktop/ms680509</a> Which is part of &#8220;COM Fundamentals&#8221;.</p>
<p>There you have it. Any questions?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-5" id="comment-1291426">
				<div id="div-comment-1291426" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291426">
			April 5, 2017 at 3:06 am</a>		</div>

		<p>I was only really in this because of a silly assumption which made me misunderstand something. That is why I gave up part way through, that and the fact that I noticed how silly things were. In the end, the only important thing is the binary layout, it doesn&#8217;t matter if you call it COM or COM like.<br />
The biggest misunderstanding that I had originally was I felt that there was an implication of it not being a COM compatible layout. This would be a bad thing because of compatibility. The COM binary interface is still the only standard class like interface on Windows, so not using this would be bad for other compilers. But then I realised that I misunderstood this so I made my biggest point and left it there. I will still call it the COM interface though, because it involves less typing and it is descriptive enough to imply the IUnknown base and vtable layout. :P</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jan-devaan odd alt thread-odd thread-alt depth-1" id="comment-1291155">
				<div id="div-comment-1291155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cSharpFanboy' rel='external nofollow' class='url'>cSharpFanboy</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170331-00/?p=95875#comment-1291155">
			April 3, 2017 at 2:49 am</a>		</div>

		<p>I mostly use GDI from C#. Does anybody know when the above functions are called from the GDI+ .net code?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

