<html>
<head>
<title>Why does FindExecutable behave erratically for files with extensions longer than three characters? (And what can you do about it?)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does FindExecutable behave erratically for files with extensions longer than three characters? (And what can you do about it?)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 8, 2016 / year-entry #75</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Short file names strike again.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The <code>Find&shy;Executable</code> function looks up the
executable responsible for launching a particular file.
This is a dubious undertaking, because it assumes that
the thing that launches a file is an executable.
There are other things capable of launching a file,
such as
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2007/02/26/1763683.aspx">
a DDE command</a>,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/09/20/231739.aspx">
a context menu shell extension</a>,
or a
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/05/03/10006065.aspx">
custom drop target</a>.
What should <code>Find&shy;Executable</code> return in those cases?
</p>
<p>
Okay, so if <code>Find&shy;Executable</code> is based upon a flawed
assumption,
why does it even exist?
</p>
<p>
Because at the time it was originally introduced,
the assumption was valid.
</p>
<p>
The
<code>Find&shy;Executable</code> function comes from
16-bit Windows,
and back in those days, there were no context menu shell extensions
or custom drop targets.
(There was DDE, but that's okay, because programs still have to register
an executable to be used in the fallback case when
nobody responds to the DDE message.)
</p>
<p>
In the port to 32-bit Windows, the
<code>Find&shy;Executable</code> function remains,
but it works only in the case where files were registered
in the 16-bit way; that is,
with a command line executable.
It so happens that most file types are still registered
that way, so
the
<code>Find&shy;Executable</code> function basically still works.
</p>
<p>
Since
the
<code>Find&shy;Executable</code> function
is basically a throwback to 16-bit Windows,
there is another attempt to accommodate the 16-bit world
that is not as obvious:
The
<code>Find&shy;Executable</code> function
takes the thing you pass and
converts it into a short file name before trying to look up
the handler.
</p>
<p>
The effect of the conversion to a short file name
depends on a bunch of things.
</p>
<p>
If the volume does not have short file name autogeneration enabled,
then the conversion to a short file name has no effect.
But if the volume does have short file name autogeneration enabled,
then the net effect is that the extension gets truncated
to
three characters.
<code>foo.abcde</code> becomes <code>foo~1.abc</code>.
And then <code>Find&shy;Executable</code> looks up and returns
the handler for the <code>.abc</code> extension instead of
the <code>.abcde</code> extension.
</p>
<p>
Back in the days before long file names,
all file extensions were truncated to 3 characters.
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2007/12/17/6785519.aspx">
if you asked for <code>foo.abcde</code>,
you got <code>foo.abc</code></a>.
The <code>Find&shy;Executable</code> function tries to maintain
this compatibility with older applications.
Newer applications shouldn't be using
<code>Find&shy;Executable</code> anyway,
seeing as the handler for a file type may not even be an executable.
</p>
<p>
<b>I accept that the concept of finding the executable
associated with a file is flawed in the face of handlers
that do not take the form of an executable,
but I still want to get the executable associated with a file,
if possible, with the understanding that the answer may be incorrect.</b>
</p>
<p>
You can use the <code>Assoc&shy;Query&shy;String</code> function
to get the executable associated with the default verb of a file
extension, if one exists.
</p>
<pre>
HRESULT FindExecutableAssociatedWithFileExtension(
    _In_ PCWSTR extension,
    _Out_ PWSTR resultBuffer,
    _In_ DWORD bufferLength)
{
 return AssocQueryString(ASSOCF_INIT_INGORENUNKNOWN,
                         ASSOCSTR_EXECUTABLE,
                         fullPath,
                         nullptr,
                         resultBuffer,
                         &amp;bufferLength);
}
</pre>
<p>
The <code>ASSOCF_INIT_UNKNOWN</code> flag says
that if the file extension has no handler,
don't return the "Open unknown file" handler.
</p>
<p>
This is not exactly the same as <code>Find&shy;Executable</code>
because that function has special-case code for
when you pass in, for example, <code>excel.exe</code>.
In those cases, the <code>Find&shy;Executable</code> function
just returns the file itself, since executables are their own handlers.
</p>
<p>
The <code>ASSOCF_INIT_UNKNOWN</code> flag was
added in Windows&nbsp;7.
What do you do for older versions of Windows?
Well, you're in luck.
Older versions of Windows didn't have the "Open unknown file" handler,
so if there is no registered handler, the call will simply fail.
(Indeed, the introduction of the "Open unknown file" handler is what
most likely prompted the creation of the
<code>ASSOCF_INIT_UNKNOWN</code> flag in the first place.)
As a second mark of good fortune, the flag is ignored by older
versions of Windows,
so you can go ahead and pass the flag unconditionally:
On versions of Windows that support it, it does what you want.
And on versions of Windows that don't support it,
they already behave the way you want by default.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1232741">
				<div id="div-comment-1232741" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232741">
			April 8, 2016 at 7:40 am</a>		</div>

		<p>&#8220;As a second mark of good fortune, the flag is ignored by older versions of Windows, so you can go ahead and pass the flag unconditionally&#8221;</p>
<p>It&#8217;s good fortune in this case, and certainly used to be common everywhere, but is the behaviour of ignoring unknown flags recommended/allowed for new APIs?</p>
<p>I know that some library vendors have had issues where they&#8217;ve ignored unknown flags before, and users of the library have ended up passing in garbage values, because that worked. However, when new flags are defined for future API-/ABI-compatible library updates, those users end up enabling them, and getting behaviour they didn&#8217;t actually want.</p>
<p>Conversely, if code using the new API flags ends up getting (dynamically?) linked against an old version of the library, where the library *doesn&#8217;t* know about those flags &#8211; some of which might enable security features the client is relying on &#8211; the client also doesn&#8217;t get the behaviour they asked for, but silently. They&#8217;d rather get a &#8220;not supported&#8221; error in that case.</p>
<p>It&#8217;s another one of those times when Postel&#8217;s Law, which was great for helping get new technologies off the ground, ends up causing unintended problems further down the line. See also: tag soup.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1232764">
				<div id="div-comment-1232764" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232764">
			April 8, 2016 at 9:58 am</a>		</div>

		<p>The AssocQueryString function did the wrong thing (accepting invalid flags), but we got lucky and it happens to work out in our favor. Most of the time, these mistakes lead to sadness.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1232773">
				<div id="div-comment-1232773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232773">
			April 8, 2016 at 1:08 pm</a>		</div>

		<p>Um, yeah. That&#8217;s why I was asking if this behaviour is still recommended/allowed for new APIs.</p>
<p>?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1232781">
				<div id="div-comment-1232781" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232781">
			April 8, 2016 at 2:21 pm</a>		</div>

		<p>So in a world where you can&#8217;t pass invalid flags to functions, and where you can&#8217;t reliably get the OS version, what is the recommended way to write code that targets different versions?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1232803">
				<div id="div-comment-1232803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232803">
			April 9, 2016 at 9:56 am</a>		</div>

		<p>You declare that your app has been tested with Windows XP, Windows Vista, and Windows 7. Then you ask what version you are running on. If running on Windows 7 or higher, you will be told Windows 7. At which point you know that the UNKNOWN flag is supported.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1233053">
				<div id="div-comment-1233053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RKZENITH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1233053">
			April 12, 2016 at 1:57 pm</a>		</div>

		<p>Who do we ask about the version?  The user?  Because, as Ivo says, we&#8217;re repeatedly told not to ask Windows.</p>
<p>Specifically, from the MSDN page for VerifyVersionInfo:<br />
&#8220;Identifying the current operating system is usually not the best way to determine whether a particular operating system feature is present. This is because the operating system may have had new features added in a redistributable DLL.&#8221;</p>
<p>And the MSDN page for GetVersionEx:<br />
&#8220;With the release of Windows 8.1, the behavior of the GetVersionEx API has changed in the value it will return for the operating system version. The value returned by the GetVersionEx function now depends on how the application is manifested.  Applications not manifested for Windows 8.1 or Windows 10 will return the Windows 8 OS version value (6.2). Once an application is manifested for a given operating system version, GetVersionEx will always return the version that the application is manifested for in future releases.&#8221;</p>
<p>The way that I read those two pages, starting with 8.1, Windows will return the version that you tell it to return, not the version that&#8217;s actually running, completely defeating the point of doing a version check in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1233605">
				<div id="div-comment-1233605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1233605">
			April 15, 2016 at 9:03 pm</a>		</div>

		<p>Apparently, I can&#8217;t reply to RKZENITH. This is a stupid threading model. Anyway&#8230;</p>
<p>The point of doing a version check is to verify the behaviour of the OS. The manifest says &#8220;I have verified my application with the behaviour of .&#8221;<br />
If you&#8217;re using APIs that only exist in Windows 8 and are manifested for Vista/7/8, and you get back &#8220;Win7&#8221;, you know not to use those APIs. </p>
<p>If you&#8217;re depending on behaviour that existed in Win7 and you get back &#8220;Win7,&#8221; you know you&#8217;re at least running in a compatibility layer for Win7.</p>
<p> If you&#8217;re depending on bugs that existed in Win7, you should stop because that&#8217;s stupid.</p>
<p>If you want to know if you&#8217;re on a newer OS version than you&#8217;ve tested on, you should stop. There&#8217;s no valid reason to do that. If you *are* doing it, you&#8217;re probably trying to annoy the user by telling them that your application doesn&#8217;t work on their OS, despite it probably working perfectly fine.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1232751">
				<div id="div-comment-1232751" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232751">
			April 8, 2016 at 7:56 am</a>		</div>

		<p>| Older versions of Windows didn’t have the “Open unknown file” handler</p>
<p>Of course they have: see HKCR\unknown\shell\openas, introduced with Windows 95</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1232753">
				<div id="div-comment-1232753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RP</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232753">
			April 8, 2016 at 8:18 am</a>		</div>

		<p>&#8220;This is not exactly the same as Find­Executable because that function has special-case code for when you pass in, for example, excel.exe. In those cases, the Find­Executable function just returns the file itself, since executables are their own handlers.&#8221;</p>
<p>I find that kind of surprising.  Excel.exe isn&#8217;t really its own handler, since you don&#8217;t get useful results if you run excel.exe excel.exe (i.e. if you pass excel.exe as a parameter to excel.exe).</p>
<p>If the .exe really must return a handler (as GetExecutable decided to), I&#8217;d expect the handler for excel.exe to be something more like cmd.exe (since you can do cmd.exe /cexcel.exe) or explorer.exe (since explorer.exe excel.exe seems to work) (obviously I know in 16-bit Windows it would have been command.com and progman.exe &#8211; I haven&#8217;t got a 16-bit installation handy to see what happens when these are passed exes as parameters).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ted-2 odd alt thread-odd thread-alt depth-1 parent" id="comment-1232763">
				<div id="div-comment-1232763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Glassware' rel='external nofollow' class='url'>Glassware</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232763">
			April 8, 2016 at 8:19 am</a>		</div>

		<p>I&#8217;m amazed to discover that DDE still exists.</p>
<p>I wrote a DDE library for Windows 3.0 so that I could connect to a program that shared its log data via DDE; and I remember at the time thinking that DDE really seemed quite half-baked.  Does it still function today?  Is it still technically supported or has it been fully replaced by OLE Automation?</p>
<p>I am fascinated however with the interesting collection of metaphors in windows.  Originally, all communication was done via messages that would get sent to your message loop.  Nowadays you have a ton of different methods of getting callback via remote procedure invocation.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-yuhong-bao even depth-2" id="comment-1232791">
				<div id="div-comment-1232791" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232791">
			April 8, 2016 at 5:38 pm</a>		</div>

		<p>DDE is still supported. Win32 even has special support for the DDE messages in addition to DDEML. It is probably better to use the messages directly so that for example timeouts on DDE broadcasts are possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1232793">
				<div id="div-comment-1232793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232793">
			April 9, 2016 at 2:06 am</a>		</div>

		<p>I have written DDE code only once 15 years ago or so, but it&#8217;s still in use today: jumping to a specific target in a PDF using Adobe Reader for our internal help feature.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hankhein even thread-even depth-1 parent" id="comment-1232771">
				<div id="div-comment-1232771" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Henri+Hein' rel='external nofollow' class='url'>Henri Hein</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232771">
			April 8, 2016 at 12:51 pm</a>		</div>

		<p>The code snip says ASSOCF_INIT_INGORENUNKNOWN.  The comments say ASSOCF_INIT_UNKNOWN.  I think in both cases you mean   ASSOCF_INIT_IGNOREUNKNOWN.  It&#8217;s the only ASSOCF flag with both INIT and UNKNOWN in it, that I could find.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1232813">
				<div id="div-comment-1232813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232813">
			April 10, 2016 at 8:08 pm</a>		</div>

		<p>I was wondering about that. Also about why we might wish to ignore known nuns.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-dwalker-wk even depth-3" id="comment-1232911">
				<div id="div-comment-1232911" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232911">
			April 11, 2016 at 11:50 am</a>		</div>

		<p>You should NEVER ignore known nuns!  Didn&#8217;t you see the movie The Blues Brothers?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt depth-2" id="comment-1232814">
				<div id="div-comment-1232814" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160408-00/?p=93274#comment-1232814">
			April 10, 2016 at 10:55 pm</a>		</div>

		<p>It seems to me that the description of this flag on MSDN is somewhat problematic too.</p>
<p>&#8220;Introduced in Windows 7. Specifies that the &#8220;Unknown&#8221; ProgID should be ignored; instead, fail.&#8221;</p>
<p>Sounds to me that if &#8220;unknown&#8221; and &#8220;known&#8221; handler both exist, it&#8217;ll still return error (i.e.: fail).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

