<html>
<head>
<title>How can I find all objects of a particular type?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I find all objects of a particular type?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 12, 2010 / year-entry #229</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>28</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">More than one customer has asked a question like this: I'm looking for a way to search for all instances of a particular type at runtime. My goal is to invoke a particular method on each of those instances. Note that I did not create these object myself or have any other access to them....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
More than one customer has asked a question like this:
</p>
<blockquote CLASS=q><p>
I'm looking for a way to search for all instances of a particular
type at runtime.
My goal is to invoke a particular method on each of those instances.
Note that I did not create these object myself or have any other
access to them.
Is this possible?
</p>
</blockquote>
<p>
Imagine what the world would be like if it were possible.
</p>
<p>
For starters, just imagine the fun you could have if you could
call <code>typeof(Secure&shy;String).Get&shy;Instances()</code>.
Vegas road trip!
</p>
<p>
More generally, it breaks the semantics of App&shy;Domain
boundaries,
since grabbing all instances of a type lets you get objects from
another App&shy;Domain,
which fundamentally violates the point of App&shy;Domains.
(Okay, you could repair this by saying that the <code>Get&shy;Instances</code>
method only returns objects from the current App&shy;Domain.)
</p>
<p>
This imaginary <code>Get&shy;Instances</code> method might return
objects which are awaiting finalization,
which violates
one of the fundamental assumptions of a finalizer, namely that there
are no references to the object:
If there were, then it wouldn't be finalized!
(Okay, you could repair this by saying that the <code>Get&shy;Instances</code>
method does not return objects which are awaiting finalization.)
</p>
<p>
On top of that, you break
<a HREF="http://www.codeproject.com/KB/books/monitor_csharp_lock.aspx?display=Print#SyncRootPattern">
the syncRoot pattern</a>.
</p>
<pre>
class Sample {
 private object syncRoot = new object();
 public void Method() {
  lock(syncRoot) { ... };
 }
}
</pre>
<p>If it were possible to get all objects of a particular class,
then anybody could just reach in and grab your private <code>sync&shy;Root</code>
and call <code>Monitor.Enter()</code> on it.
Congratuations, the private synchronization object you created
is now a public one that anybody can screw with,
defeating the whole purpose of having a private syncRoot.
You can no longer reason about your syncRoot because you are no longer
in full control of it.
(Yes, this can already be done with reflection, but at least when
reflecting, you know that you're grabbing somebody's private field
called <code>sync&shy;Root</code>, so you already recognize that you're
doing something dubious.
Whereas with
<code>Get&shy;Instances</code>,
you don't know what each of the returned objects is being used for.
Heck, you don't even know if it's being used!
It might just be garbage lying around waiting to be collected.)</p>
<p>
More generally, code is often written on the expectation that
an object that you never give out a reference to is not accessible
to others.
Consider the following code fragment:
</p>
<pre>
using (StreamWriter sr = new StreamWriter(fileName)) {
 sr.WriteLine("Hello");
}
</pre>
<p>
If it were possible to get all objects of a particular class,
you may find that your customers report that they are getting an
<code>Object&shy;Disposed&shy;Exception</code>
on the call to <code>Write&shy;Line</code>.
How is that possible?
The disposal doesn't happen until the close-brace, right?
Is there a bug in the CLR where it's disposing an object too soon?
</p>
<p>
Nope, what happened is that some other thread did exactly what the
customer was asking for a way to do:
It grabbed all existing <code>Stream&shy;Writer</code> instances and
invoked <code>Stream&shy;Writer.Close</code> on them.
It did this immediately after you constructed the <code>Stream&shy;Writer</code>
and before you did your <code>sr.Write&shy;Line()</code>.
Result: When your <code>sr.Write&shy;Line()</code> executes, it finds
that the stream was already closed, and therefore the write fails.
</p>
<p>
More generally, consider the graffiti you could inject into all output
files by doing
</p>
<pre>
foreach (StreamWriter sr in typeof(StreamWriter).GetInstances()) {
 sr.Write("Kilroy was here!");
}
</pre>
<p>
or even crazier
</p>
<pre>
foreach (StringBuilder rb in typeof(StringBuilder).GetInstances()) {
 sb.Insert(0, "DROP TABLE users; --");
}
</pre>
<p>
Now no <code>String&shy;Builder</code> is safe&mdash;the contents of
any <code>String&shy;Builder</code> can be corrupted at any time!
</p>
<p>
If you could obtain all instances of a type,
the fundamental logic behind computer programming breaks down.
It effectively becomes impossible to reason about code
because anything could happen to
your objects <i>at any time</i>.
</p>
<p>
If you need to be able to get all instances of a class,
you need to add that functionality to the class itself.
(<code>GC&shy;Handle</code> or <code>Weak&shy;Reference</code> will
come in handy here.)
Of course, if you do this, then you clearly opted into
the "anything can happen to your object at any time outside
your control" model and presumably your code operates accordingly.
You made your bed; now you get to lie in it.
</p>
<p>
(And I haven't even touched on thread safety.)
</p>
<p>
<b>Bonus reading</b>:
<a HREF="http://blogs.msdn.com/b/brada/archive/2003/09/28/50391.aspx">
Questionable value of SyncRoot on Collections</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (28)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-853323">
				<div id="div-comment-853323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gordon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853323">
			August 12, 2010 at 7:19 am</a>		</div>

		<blockquote><p>
  foreach (StringBuilder rb in typeof(StringBuilder).GetInstances()) {</p>
<p>  sb.Insert(0, &quot;DROP TABLE users; &#8211;&quot;);</p>
<p>  }
</p></blockquote>
<p>Oh yes, the famed &quot;Bobby Tables&quot; attack: <a rel="nofollow" target="_new" href="http://xkcd.com/327/" rel="nofollow">http://xkcd.com/327/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853333">
				<div id="div-comment-853333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853333">
			August 12, 2010 at 7:20 am</a>		</div>

		<p>The answer that is closest to what the customer wants:</p>
<p>Use reflection to grab the objects you are looking for, assuming you know where you want to look already and it&#39;s just a matter of not having access (ie private).</p>
<p>The sane answer:</p>
<p>Request the author make changes to expose the functionality you require. &nbsp;If it&#39;s open source code, even better; make the change yourself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853343">
				<div id="div-comment-853343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853343">
			August 12, 2010 at 7:28 am</a>		</div>

		<p>Nice article, Raymond, but I&#39;d like to know more about exactly what the customers are trying to accomplish. &nbsp;I presume that they don&#39;t want to inject graffiti into random files or to run around locking private objects willy nilly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853363">
				<div id="div-comment-853363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853363">
			August 12, 2010 at 7:52 am</a>		</div>

		<p>Given that C# allows pointers in certain scenarios (unsafe/full-trust), there&#39;s no reason you couldn&#39;t write your own lame brute-force implementation of this. Giving us a proper implementation would merely prevent us from having to do it ourselves (poorly). Of course you would never want to write application logic that relies on such a feature, but having used similar features in Python, it&#39;s easy to see where it would be useful for unit tests, diagnostics, or benchmarking.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853373">
				<div id="div-comment-853373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheetah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853373">
			August 12, 2010 at 7:53 am</a>		</div>

		<p>This sounds like part of what memory leak debuggers / tracers do (minus the calling methods part). &nbsp;If one combined the memory debugger with some features from a &quot;normal&quot; debugger, one could do this.</p>
<p>Of course, always running an app under such a tool will have some pretty heinous performance implications, and the problem statement definitely reeks of deserving a &quot;don&#39;t do that&quot; response.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853393">
				<div id="div-comment-853393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Betts</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853393">
			August 12, 2010 at 8:12 am</a>		</div>

		<p>In Ruby, this is absolutely possible via ObjectSpace#each_object. Yes, I think it&#39;s crazy too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-853403">
				<div id="div-comment-853403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853403">
			August 12, 2010 at 8:17 am</a>		</div>

		<p>Your SQL injection string is missing a &#39;);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853413">
				<div id="div-comment-853413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853413">
			August 12, 2010 at 8:23 am</a>		</div>

		<p>It doesn&#39;t need one because it&#39;s being inserted at the beginning of the string, not into an SQL literal string.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853423">
				<div id="div-comment-853423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853423">
			August 12, 2010 at 8:39 am</a>		</div>

		<p>I now eagerly expect rants to start appearing in the internet about Raymond posting non-working code in his blog with APIs that don&#39;t exist.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-853433">
				<div id="div-comment-853433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853433">
			August 12, 2010 at 8:50 am</a>		</div>

		<p>Gabe, Cheetah: that&#39;s what the CLR Profiling API is for. It&#39;s acceptable that something looking in from outside can see things that aren&#39;t exposed inside the sandbox.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853453">
				<div id="div-comment-853453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Manu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853453">
			August 12, 2010 at 9:13 am</a>		</div>

		<p>Like Cheetah, I&#39;d say this is useful to have when debugging situation where the garbage collection should be able to collect some objects but for some reasons this is not happening.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853463">
				<div id="div-comment-853463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mmmh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853463">
			August 12, 2010 at 10:12 am</a>		</div>

		<p>I agree that such a feature would be of dubious utility, would have a performance impact and needs much more thinking, and I especially agree that this is more a signal that the customer is searching for the answer of the wrong part of the question. A bad idea in general.</p>
<p>However, I find the examples you brought to the table quite preposterous (I hope it&#39;s the right term, I&#39;m italian :)).</p>
<p>In the end is code operating on the same AppDomain (and process space) of the application.. is your code. Yes, it would be a nice way to shoot yourself on the foot but there are plenty ways of doing that. You could Invoke on the main form to have it waiting forever on a ad-hoc mutex. Or you could launch a format of the hard drive. Or you can drop tables without the need of being malicious and going to find StringBuilders.</p>
<p>The point is, I think, the big violation of OOP principles, not much security issues.</p>
<p>And now of course the ranting part :)</p>
<p>I think having &quot;every object is a monitor&quot; as a very bad choice (for performance, complexity, design cleanliness, etc.); a proper Monitor object would have been much much better. Now of course if MS only had a time machine.. (and Sun too).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853473">
				<div id="div-comment-853473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853473">
			August 12, 2010 at 10:27 am</a>		</div>

		<p>@Mmmh: I seem to recall Joe Duffy making a comment along the lines that monitors seemed like a good idea at the time. &nbsp;Anyway, hindsight is always 20/20.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853483">
				<div id="div-comment-853483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CPDaniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853483">
			August 12, 2010 at 11:11 am</a>		</div>

		<p>@Mmmh: &nbsp;ISTR that &quot;evert object IsA monitor is not true&quot;. &nbsp;&quot;Every object can act like a Monitor if someone asks it to&quot; is more accurate. &nbsp;Under the covers, the CLR doesn&#39;t allocate any of the Monitor machinery for an object unless code tries to use it in a synchronization operation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853493">
				<div id="div-comment-853493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leonel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853493">
			August 12, 2010 at 1:08 pm</a>		</div>

		<p>Imagine a world where all the fields are public and all the methods virtual! The madness, the chaos!</p>
<p><a rel="nofollow" target="_new" href="http://steve-yegge.blogspot.com/2010/07/wikileaks-to-leak-5000-open-source-java.html" rel="nofollow">steve-yegge.blogspot.com/&#8230;/wikileaks-to-leak-5000-open-source-java.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853503">
				<div id="div-comment-853503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tobi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853503">
			August 12, 2010 at 1:24 pm</a>		</div>

		<p>I believe that this would indeed be a very useful debugging tool in full trust. Alas the potential for misuse is extreme.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853513">
				<div id="div-comment-853513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853513">
			August 12, 2010 at 3:23 pm</a>		</div>

		<p>I actually do this (find all objects of a given type).</p>
<p>I do so when hunting for memory leaks.</p>
<p>The code required to do so is in sos.dll.</p>
<p>Oh, and this is one time where GC.Collect() is useful as the lie about infinite memory causes real problems when hunting managed memory leaks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853523">
				<div id="div-comment-853523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miral</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853523">
			August 12, 2010 at 6:52 pm</a>		</div>

		<p>@Joshua:</p>
<p>I do the same thing, but that doesn&#39;t really count as &quot;at runtime&quot;. &nbsp;It&#39;s more &quot;post mortem&quot;. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853533">
				<div id="div-comment-853533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mirobin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853533">
			August 13, 2010 at 12:27 am</a>		</div>

		<p>If they wanted to be particularly evil, they could probably use the .Net profiling API to accomplish this&#8230; &nbsp;but it&#39;d still be a bad idea. &nbsp;:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853543">
				<div id="div-comment-853543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mmmh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853543">
			August 13, 2010 at 12:54 am</a>		</div>

		<p>@CPDaniel &nbsp;</p>
<p>I find at which time they will be detected to be interesting: at compile-time most uses are undetectable (but the syncroot is detectable already here), at jit-time most are detectable but some can only be detected at run-time (for example if loading an assembly manually). I hope they use multiple methods to avoid unnecessary overhead at runtime. I&#39;ll try to find some info about.</p>
<p>@Peter</p>
<p>Most of the CLR design &quot;recalls&quot; (so to speak :)) Java design &#8211; with plenty of corrections where Java, in the years, demonstrated having taken a bad choice.</p>
<p>The similarities are struggling from the macro level (Object as a root of all hierarchies, interfaces vs abstract classes, String is immutable, etc.) and the differences are exactly in a thousand of those &quot;tiny&quot; details that made generations of Java programmers screaming (automatic boxing, enums, operators overloading, etc.). I guess in the case of &quot;every-object-could-be-a-monitor&quot; this inspiration lead a bit too far &#8211; probably because Java programmers were not complaining about that point.</p>
<p>@Blog software owners &#8211; I know it&#39;s not Raymond ;)</p>
<p>The Post button seems to be more of &quot;Take-a-random-action-one-of-which-is-Post&quot; :) Most of the times it does not seem to work (Firefox) and simply makes me going to the top of the page.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853553">
				<div id="div-comment-853553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853553">
			August 13, 2010 at 1:59 am</a>		</div>

		<p>Stunningly bad idea.</p>
<p>foreach(IDisposable obj in typeof(IDisposable ).Get­Instances())</p>
<p>{</p>
<p>&nbsp;obj.Dispose();</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853563">
				<div id="div-comment-853563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Omer Raviv</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853563">
			August 13, 2010 at 2:02 am</a>		</div>

		<p>Here&#39;s an example of how to do this, from Sasha Goldstein&#39;s blog:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.microsoft.co.il/blogs/sasha/archive/2009/08/17/gc-helper-for-obtaining-live-instances-of-a-type-or-how-i-implemented-gc-getaliveinstancesof-lt-t-gt.aspx" rel="nofollow">blogs.microsoft.co.il/&#8230;/gc-helper-for-obtaining-live-instances-of-a-type-or-how-i-implemented-gc-getaliveinstancesof-lt-t-gt.aspx</a></p>
<p>I definitely agree that using this outside of debugging/profiling scenarios is a very bad idea.</p>
<div class="post">[<i>This falls into the &quot;you need to add that functionality to the class itself&quot; category, since that&#39;s what happened. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853623">
				<div id="div-comment-853623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard Cox</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853623">
			August 13, 2010 at 8:19 am</a>		</div>

		<p>If you are outside the process with the right permissions (either Windows Debug privilege or process owner) you can do this with WinDBG and SOS: !dumpheap -type &lt;name&gt;.</p>
<p>This is of course violating the &quot;from inside the .NET process&quot; requirement.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853663">
				<div id="div-comment-853663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853663">
			August 13, 2010 at 8:43 am</a>		</div>

		<p>@Richard:</p>
<p>Nobody said a full trust .NET application can&#39;t spawn child processes. For instnace, spawning a native bzip2.exe in pipe is four times faster than using the ICSharp library (I measured it). Therefore I do that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853733">
				<div id="div-comment-853733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853733">
			August 13, 2010 at 10:07 am</a>		</div>

		<p>@Mmmh: &quot;The point is, I think, the big violation of OOP principles, not much security issues.&quot;</p>
<p>In some situations the two are indistinguishable. &nbsp;A lot of recent developments in both sandboxing and operating system design theory rely on language access rules to enforce security principles. &nbsp;</p>
<p>For example, we can set up a sandbox around a user-provided module, preventing it accessing any objects that it can use to damage the environment, but if it can interfere with the objects owned by the API layer between it and the sandbox then it can quite possibly trick the sandbox into granting it more access than it should.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-853953">
				<div id="div-comment-853953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clovis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853953">
			August 15, 2010 at 11:43 am</a>		</div>

		<p>Can we also have typeof(Secure­String).Get­Instances(URL url) to look these up on other machines too?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-853963">
				<div id="div-comment-853963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mmmh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-853963">
			August 16, 2010 at 1:31 am</a>		</div>

		<p>@Jules</p>
<p>Raymond supposed this : (Okay, you could repair this by saying that the Get­Instances method only returns objects from the current App­Domain.) before getting to talking about security issues.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-854663">
				<div id="div-comment-854663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100812-00/?p=13163#comment-854663">
			August 18, 2010 at 9:13 am</a>		</div>

		<p>I agree that being able to get all instances of an object is madness, but being able to test to see if my own object can be garbage collected (held via a WeakReference) seems reasonable. Java has a function to do this called assertGC() for use in unit tests etc. Given the information above, can this StackOverflow question be answered as &#39;this is impossible in .NET&#39;?</p>
<p><a target="_new" href="http://stackoverflow.com/questions/3476064/net-version-of-javas-assertgc-unit-tesing-memory-leaks" rel="nofollow">stackoverflow.com/&#8230;/net-version-of-javas-assertgc-unit-tesing-memory-leaks</a></p>
<div class="post">[<i>Florian&#39;s answer looks correct. Remember that depending on your build switches, the GC behaves differently. (For example, in Florian&#39;s example, the </i><i>handler</i> isn&#39;t nulled out, which means that you&#39;re relying on the JIT performing certain optimizations which it may not do depending on how you compiled). -Raymond]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

