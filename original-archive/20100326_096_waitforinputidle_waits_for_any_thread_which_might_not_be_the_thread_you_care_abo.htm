<html>
<head>
<title>WaitForInputIdle waits for any thread, which might not be the thread you care about</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>WaitForInputIdle waits for any thread, which might not be the thread you care about</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 26, 2010 / year-entry #97</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100326-00/?p=14483</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">We saw last time that the WaitForInputIdle function waits only once for a process to go input idle. Even if the process later stops processing messages, WaitForInputIdle will return immediately and say, "Yeah, he's idle." The way a process is determined to be input idle is that it is waiting for user input when there...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>We saw last time that <a href="http://blogs.msdn.com/oldnewthing/archive/2010/03/25/9984720.aspx"> the <code>WaitForInputIdle</code> function waits only once</a> for a process to go input idle. Even if the process later stops processing messages, <code>WaitForInputIdle</code> will return immediately and say, "Yeah, he's idle."</p>
<p> The way a process is determined to be input idle is that it is waiting for user input when there is none. This translates into the process sitting in a function like <code>GetMessage</code> or <code>WaitMessage</code> when there are no messages. But what if a process has more than one thread? And what if one of the threads is waiting for input, while the other is busy and unresponsive? The <code>WaitForInputIdle</code> function will treat the process as having gone input idle, even if the ready thread is just displaying your splash screen and the busy thread is the one preparing the main window. The <code>WaitForInputIdle</code> function doesn't know that the main window is more important than the splash screen; as far as the window manager is concerned, you've got two threads, each with a window. </p>
<p> What this means for your application is that you need to know that, if you create multiple threads, then the moment any of them goes input idle, the entire process is treated as input idle, and you need to be ready for people who were waiting for you via <code>WaitForInputIdle</code> to start trying to talk to your application. </p>
<p> As I noted last time, the <code>WaitForInputIdle</code> function is really just a stopgap to help with the transition from 16-bit Windows to 32-bit Windows. Whereas 16-bit programs could just charge ahead knowing that the program it launched is ready (because if it weren't ready, then it would still have control of the CPU), 32-bit programs need to wait for this faked-up version of <code>Yield</code>. And since it was created merely to aid in porting 16-bit programs, the <code>WaitForInputIdle</code> function didn't really worry about multiple threads. After all, 16-bit Windows didn't support multiple threads per process, so all 16-bit programs were necessarily single-threaded. If you're porting one of these programs, your initial 32-bit version is also going to be single-threaded. (At least I hope you're not going to try to add multiple threads right off the bat. The first step in porting is just to get the program to run without adding any new features!) </p>
<p> In fact, back in the old days, the <code>WaitForInputIdle</code> function tried a bit too hard to emulate the <code>Yield</code> behavior from 16-bit Windows. When the target application received a message, it was taken <i>out of</i> the input idle state, and went back into the state when it once again reached a state where it was waiting for input. In other words, <a href="http://blogs.msdn.com/michkap/archive/2008/09/24/8963238.aspx"> the one-line summary of the <code>WaitForInputIdle</code> function was actually correct at the time it was written</a>. </p>
<p> The old mechanism for <code>WaitForInputIdle</code>, taking the process in and out of the input idle state, mirrored the 16-bit behavior of Windows, but <i>only if you had a single-threaded application</i>. If you had multiple threads, then the input-idle state starts getting all wonky as each thread updates the global idle state: </p>
<table>
<tr>
<td></td>
<td>Thread&nbsp;1</td>
<td>Thread&nbsp;2</td>
</tr>
<tr>
<td>1</td>
<td>Busy</td>
<td>Busy</td>
</tr>
<tr>
<td>2</td>
<td>Idle</td>
<td></td>
</tr>
<tr>
<td> </td>
<td colspan="2">(application marked as idle)</td>
</tr>
<tr>
<td>3</td>
<td></td>
<td>Idle</td>
</tr>
<tr>
<td> </td>
<td colspan="2">(application marked as idle)</td>
</tr>
<tr>
<td>4</td>
<td></td>
<td>Busy</td>
</tr>
<tr>
<td> </td>
<td colspan="2">(application marked as busy)</td>
</tr>
<tr>
<td>5</td>
<td>Busy</td>
<td></td>
</tr>
<tr>
<td> </td>
<td colspan="2">(application marked as busy)</td>
</tr>
</table>
<p> There is only one state that gets updated by each thread as they go idle or busy. All you really know is that if all threads are busy, then the input idle state will be <i>busy</i> and that if all threads are idle, then the input idle state will be <i>idle</i>. But if one thread is idle and the other is busy, then the process idle state is unpredictable; it depends on what the most recent transition was. For example, notice that at step&nbsp;2, we have one idle thread (thread&nbsp;1) and one busy thread (thread&nbsp;2), and the process is marked <i>idle</i>. On the other hand, at step&nbsp;4, we also have one idle thread (thread&nbsp;2) and one busy thread (thread&nbsp;1), but this time, the process is marked <i>busy</i>. </p>
<p> Of course, since this behavior was intended to mimic the 16-bit programming model, the fact that it got all confused when applications created multiple threads was "out of scope". Creating multiple threads meant that you have gone past the simple "Just trying to get it to work" stage and have moved on to adding Win32-specific enhancements. You were creating a situation that the <code>WaitForInputIdle</code> function was not designed to handle. </p>
<p> My guess is that the unpredictable nature of the original design led the window manager folks to take a deep breath and go back to the spirit of the <code>WaitForInputIdle</code> function: To tell when a program has finished its initialization. </p>
<p> So now it decides that when you've finished initialization, you've finished initialization. It's a one-way door. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-822523">
				<div id="div-comment-822523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100326-00/?p=14483#comment-822523">
			March 26, 2010 at 8:15 am</a>		</div>

		<p>I don&#8217;t have the knowledge pool of hundreds of application (MS might have a better clue on this) but I would have thought that, in the case of multiple threads having windows, the initial thread could be chosen as the real one to wait to go idle.</p>
<p>I&#8217;m sure there is some wily software out there where the main window thread ends up being some other thread and the initial thread handles the splash screen, but for most software, my guess is that the initial thread ends up being the main window thread.</p>
<p>I know that&#8217;s how I&#8217;ve coded it in the past (the startup code launching a thread to display the spalsh screen).</p>
<p>It&#8217;s a small improvement to an aguably unfixable function, but an improvement nonetheless.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-822533">
				<div id="div-comment-822533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matthew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100326-00/?p=14483#comment-822533">
			March 26, 2010 at 9:05 am</a>		</div>

		<p>@ Pierre:</p>
<p>There is a class of programs that invalidates your assumption that the initial thread is most likely to be the &quot;main&quot; thread: those which operate based primarily on modular plugins, with minimal built-in functionality. Here, the more usual case is that the initial thread performs fairly minimal activities, as the &quot;real&quot; thread is launched via a desired plug-in DLL.</p>
<p>Trying to apply extremely broad assumptions where there is no actual, logical constraint is a very, very bad practice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-822573">
				<div id="div-comment-822573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://henning.makholm.net/' rel='external nofollow' class='url'>Henning Makholm</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100326-00/?p=14483#comment-822573">
			March 26, 2010 at 11:33 am</a>		</div>

		<p>Is there a &#8220;not&#8221; too many in the first paragraph?</p>
<div class=post>[<i>Indeed there is. Fixed, thanks. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-822583">
				<div id="div-comment-822583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://twitter.com/deskin' rel='external nofollow' class='url'>Deskin Miller</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100326-00/?p=14483#comment-822583">
			March 26, 2010 at 12:02 pm</a>		</div>

		<p>Back when the global busy/idle state was updated by each thread, would the state get updated (and how) when a thread exited? I&#8217;m envisioning a program where both threads are idle, then one becomes busy and the global state indicates busy; then that thread exits while still busy, leaving only one thread, which is in fact idle, but the global status indicates busy. </p>
<div class=post>[<i>No such cleanup took place when a thread exited. So you can&#8217;t even say that &#8220;busy&#8221; means that there is at least one busy thread! The flag was basically garbage for multi-threaded programs. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-822593">
				<div id="div-comment-822593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100326-00/?p=14483#comment-822593">
			March 26, 2010 at 1:41 pm</a>		</div>

		<p>I don&#8217;t understand the &quot;WaitForSingleObject&quot; reference. The link points to a post about GetDateFormat and this post is about WaitForInputIdle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-822613">
				<div id="div-comment-822613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Messiant R</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100326-00/?p=14483#comment-822613">
			March 26, 2010 at 8:20 pm</a>		</div>

		<p>@ Gabe</p>
<p>Surely WaitForInputIdle is meant instead of WaitForSingleObject.</p>
<p>And the link simply explains another case of description changing as a result of changes in functionality, the actual functions don&#8217;t matter.</p>
<div class=post>[<i>Fixed the function name, thanks. And the link target is correct, as you figured out. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

