<html>
<head>
<title>When should your destructor be virtual?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When should your destructor be virtual?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 7, 2004 / year-entry #178</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">When should your C++ object's destructor be virtual? First of all, what does it mean to have a virtual destructor? Well, what does it mean to have a virtual method? If a method is virtual, then calling the method on an object always invokes the method as implemented by the most heavily derived class. If...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>When should your C++ object's destructor be virtual? </p>
<p>First of all, what does it mean to have a virtual destructor? </p>
<p>Well, what does it mean to have a virtual method? </p>
<p>If a method is virtual, then calling the method on an object always invokes the method as implemented by the most heavily derived class. If the method is not virtual, then the implementation corresponding to the compile-time type of the object pointer. </p>
<p>For example, consider this: </p>
<pre>class Sample {
public:
 void f();
 virtual void vf();
};

class Derived : public Sample {
public:
 void f();
 void vf();
}

void function()
{
 Derived d;
 Sample* p = &amp;d;
 p-&gt;f();
 p-&gt;vf();
}
</pre>
<p>The call to <code>p-&gt;f()</code> will result in a call to <code>Sample::f</code> because <code>p</code> is a pointer to a <code>Sample</code>. The actual object is of type <code>Derived</code>, but the pointer is merely a pointer to a <code>Sample</code>. The pointer type is used because <code>f</code> is not virtual. </p>
<p>On the other hand, the call to The call to <code>p-&gt;vf()</code> will result in a call to <code>Derived::vf</code>, the most heavily derived type, because <code>vf</code> is virtual. </p>
<p>Okay, you knew that. </p>
<p>Virtual destructors work exactly the same way. It's just that you rarely invoke the destructor explicitly. Rather, it's invoked when an automatic object goes out of scope or when you <code>delete</code> the object. </p>
<pre>void function()
{
 Sample* p = new Derived;
 delete p;
}
</pre>
<p>Since <code>Sample</code> does not have a virtual destructor, the <code>delete p</code> invokes the destructor of the class of the pointer (<code>Sample::~Sample()</code>), rather than the destructor of the most derived type (<code>Derived::~Derived()</code>). And as you can see, this is the wrong thing to do in the above scenario. </p>
<p>Armed with this information, you can now answer the question. </p>
<p>A class must have a virtual destructor if it meets both of the following criteria: </p>
<ul>
<li>You do a <code>delete p</code>. 
<li>It is possible that <code>p</code> actually points to a derived class. </li>
</ul>
<p>Some people say that you need a virtual destructor if and only if you have a virtual method. This is wrong in both directions. </p>
<p>Example of a case where a class has no virtual methods but still needs a virtual destructor: </p>
<pre>class Sample { };
class Derived : public Sample
{
 CComPtr&lt;IStream&gt; m_p;
public:
 Derived() { CreateStreamOnHGlobal(NULL, TRUE, &amp;m_p); }
};

Sample *p = new Derived;
delete p;
</pre>
<p>The <code>delete p</code> will invoke <code>Sample::~Sample</code> instead of <code>Derived::~Derived</code>, resulting in a leak of the stream <code>m_p</code>. </p>
<p>And here's an example of a case where a class has virtual methods but does not require a virtual destructor. </p>
<pre>class Sample { public: virtual void vf(); }
class Derived : public Sample { public: virtual void vf(); }

Derived *p = new Derived;
delete p;
</pre>
<p>Since the object deletion occurs from the pointer type that matches the type of the actual object, the correct destructor will be invoked. This pattern happens often in COM objects, which expose several virtual methods corresponding to its interfaces, but where the object itself is destroyed by its own implementation and not from a base calss pointer. (Notice that no COM interfaces contain virtual destructors.) </p>
<p>The problem with knowing when to make your destructor virtual or not is that you have to know how people will be using your class. If C++ had a "sealed" keyword, then the rule would be simpler: If you do a "<code>delete p</code>" where <code>p</code> is a pointer to an unsealed class, then that class needs have a virtual destructor. (The imaginary "sealed" keyword makes it explicit when a class can act as the base class for another class.) </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-172103">
				<div id="div-comment-172103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike G.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-172103">
			May 7, 2004 at 7:50 am</a>		</div>

		<p>&quot;Some people say that you need a virtual destructor if and only if you have a virtual method. This is wrong in both directions.&quot;</p>
<p>Well, almost.</p>
<p>If the sizeof or layout of your class is a concern for some reason, making the destructor virtual &quot;costs nothing&quot; if your base class already has a virtual method.  You&#8217;re already carrying a vptr at that point.</p>
<p>There&#8217;s rarely a reason NOT to make the destructor virtual if you already have a virtual method, I think.  (I guess it&#8217;s possible you&#8217;re going to create a LOT of temporary Derived&#8217;s, so the ~Derived virtual call becomes a bottleneck, but that seems very unlikely&#8230;)</p>
<p>An empty virtual destructor for your last sample class would hardly be a maintenance headache, and opens the possibility for the use case to change down the road without base class changes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-172113">
				<div id="div-comment-172113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-172113">
			May 7, 2004 at 8:14 am</a>		</div>

		<p>If you really don&#8217;t want a virtual destructor, you should probably make the base class&#8217; destructor protected, to prevent mistakes.</p>
<p>Also, there&#8217;s a small mistake &#8211; Derived isn&#8217;t derived in the last bit of code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-172123">
				<div id="div-comment-172123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-172123">
			May 7, 2004 at 8:48 am</a>		</div>

		<p>Fixed, thanks Daniel.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-172133">
				<div id="div-comment-172133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-172133">
			May 7, 2004 at 8:49 am</a>		</div>

		<p>Mike G.: Most COM objects do not have a virtual destructor since they are destructed from the derived class (inside the Release() methods). Yes, it doesn&#8217;t cost you much (an etra pointer in the vtable), but if your object architecture already encapsulates object destruction in a virtual method (like COM does), then virtualizing the destructor may end up creating confusion.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-172153">
				<div id="div-comment-172153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-172153">
			May 7, 2004 at 9:08 am</a>		</div>

		<p>I can&#8217;t think of one offhand.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-172173">
				<div id="div-comment-172173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aarrgghh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-172173">
			May 7, 2004 at 9:15 am</a>		</div>

		<p>Marc Wallace: You might want to do that if you&#8217;re testing the debug heap&#8217;s memory-leak detection.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-172183">
				<div id="div-comment-172183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizza</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-172183">
			May 7, 2004 at 9:31 am</a>		</div>

		<p>&quot;There&#8217;s rarely a reason NOT to make the destructor virtual if you already have a virtual method, I think. (I guess it&#8217;s possible you&#8217;re going to create a LOT of temporary Derived&#8217;s, so the ~Derived virtual call becomes a bottleneck, but that seems very unlikely&#8230;) &quot;</p>
<p>One reason is that it needn&#8217;t be necessary.</p>
<p>Consider for example:</p>
<p>struct Base<br />
<br />{<br />
<br />    arbitraryType arbitraryMemberVariable;<br />
<br />    virtual void doSomething() = 0;<br />
<br />    ~Base() {}<br />
<br />};<br />
<br />struct Derived : Base<br />
<br />{<br />
<br />    arbitraryType arbitraryMemberVariable;<br />
<br />    virtual void doSomething() { blahblahblah; }<br />
<br />    ~Derived() {}<br />
<br />};</p>
<p>// any old block for any old reason<br />
<br />{<br />
<br />    const Base&amp; b((Derived()));<br />
<br />}</p>
<p>In this case the Derived d-tor will be called in spite of being bound to a reference to Base, because the compiler uses the static type of the temporary to figure out which destructor to call.</p>
<p>Esoteric?  Sure.  Useless?  Hell no, as anyone who&#8217;s seen ScopeGuard will know.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-172163">
				<div id="div-comment-172163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.extragroup.de/weblog/hmk/archives/000807.html' rel='external nofollow' class='url'>HMK's Spurious Thoughts</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-172163">
			May 7, 2004 at 12:08 pm</a>		</div>

		<p>When should your destructor be virtual?&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-172243">
				<div id="div-comment-172243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thomas Maeder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-172243">
			May 7, 2004 at 2:50 pm</a>		</div>

		<p>Slight inaccuracy:</p>
<p>The statement</p>
<p>The delete p will invoke Sample::~Sample instead of Derived::~Derived, resulting in a leak of the stream m_p.</p>
<p>is wrong. If a delete expression is evaluated on a base class pointer that points to an instance of a derived class, the behavior is undefined; anything can happen.</p>
<p>It is possible that the base class destructor is invoked and the derived clas destructor isn&#8217;t, but that&#8217;s just an instance of undefined behavior. Other instances are a program crash or the computer catching fire.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-172253">
				<div id="div-comment-172253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-172253">
			May 7, 2004 at 3:10 pm</a>		</div>

		<p>Ah, excellent point Thomas.</p>
<p>5.3.5.3: &quot;If the static type of the operand is different from its dynamic type, the static type shall be a base class of the operand&#8217;s dynamic type and the static type shall have a virtual destructor or the behavior is undefined.&quot;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-172143">
				<div id="div-comment-172143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc Wallace</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-172143">
			May 7, 2004 at 8:58 am</a>		</div>

		<p>Are there any cases where you would *not* want to invoke the destructor of the most derived class that has it?</p>
<p>In other words: somewhere, something knows that p isa Derived.  Are there cases when Derived::~Derived() is defined, but you would actually want &quot;delete p&quot; to do a Simple::~Simple()?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-172373">
				<div id="div-comment-172373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jeffdav' rel='external nofollow' class='url'>jeffdav</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-172373">
			May 9, 2004 at 8:27 pm</a>		</div>

		<p>There you go giving away my interview questions again, Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-172733">
				<div id="div-comment-172733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://en.wikipedia.org/wiki/Slashdot_trolling_phenomena' rel='external nofollow' class='url'>Troll Buster</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-172733">
			May 10, 2004 at 8:29 pm</a>		</div>

		<p>Don&#8217;t click on the link in Gary Niger&#8217;s post.  It&#8217;s a GNAA troll link.  Like goatse.cx only a thousand times worse.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-172743">
				<div id="div-comment-172743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-172743">
			May 10, 2004 at 8:45 pm</a>		</div>

		<p>Thanks, Mr. Troll Buster. I deleted the comment. It was also a clipboard stealer. Whatever text was on your clipboard got uploaded to the site, and then you got redirected to something unpleasant&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-172783">
				<div id="div-comment-172783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Florin POPA</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-172783">
			May 11, 2004 at 3:40 am</a>		</div>

		<p>Hi,</p>
<p>I think the rule about &quot;When should your destructor be virtual? &quot; can be:</p>
<p>The DTOR of base class is:<br />
<br />&#8211; public and MUST be virtual<br />
<br />&#8211; protected and then should be non-virtual</p>
<p>And by the way, is not a good ideea to  inherit public from a class without any virtual method.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-172993">
				<div id="div-comment-172993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">The Other John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-172993">
			May 12, 2004 at 6:20 am</a>		</div>

		<p>Wow, a clipboard stealer&#8230; never heard of that one before.  Amazing the things that are possible.</p>
<p>I wonder if we could perform a DNS attack on him by copying gigantic bitmaps into our clipboard, then visiting his site :)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-174973">
				<div id="div-comment-174973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://vin_patel2004@yahoo.co.in' rel='external nofollow' class='url'>vinod</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-174973">
			May 18, 2004 at 3:06 am</a>		</div>

		<p>Graphics means use of graphics function<br />
<br />like circle(),line() etc., like Turbo c++.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-178303">
				<div id="div-comment-178303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Atul Malhotra</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-178303">
			May 28, 2004 at 1:33 am</a>		</div>

		<p>Yupp, it means drawing objects using graphics functions using standard graphics library as well as using user defined classes which may or may not be inherited from the standard classes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-185223">
				<div id="div-comment-185223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-185223">
			June 18, 2004 at 11:45 am</a>		</div>

		<p>Commenting on this article has been closed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-397483">
				<div id="div-comment-397483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://kiranu.wordpress.com/2006/07/06/why-virtual-destructors/' rel='external nofollow' class='url'>Kiran&#8217;s Blog &raquo; Blog Archive &raquo; Why virtual destructors&#8230;</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040507-00/?p=39443#comment-397483">
			July 6, 2006 at 1:00 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://kiranu.wordpress.com/2006/07/06/why-virtual-destructors/" rel="nofollow">http://kiranu.wordpress.com/2006/07/06/why-virtual-destructors/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

