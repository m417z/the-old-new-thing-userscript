<html>
<head>
<title>If I'm going to store a SID in a file, should I store the string form or the binary form?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If I&#8217;m going to store a SID in a file, should I store the string form or the binary form?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 22, 2016 / year-entry #17</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160122-00/?p=92913</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Pros and cons.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer needed to save some user SIDs into a file
and wanted guidance on whether to use string format
or binary format.
</p>
<p>
Here are some pros and cons.
</p>
<p>
String format:
To save the SID, use the
<code>Convert&shy;Sid&shy;To&shy;String&shy;Sid</code> function,
then save the string to the file.
To load the SID, read the string from the file,
then call
<code>Convert&shy;String&shy;Sid&shy;To&shy;Sid</code>.
The conversion may fail if the string is corrupted (either
accidentally or maliciously).
</p>
<ul>
<li>Pro: Hard to get wrong.
    The heavy lifting is done by the two helper functions.
    In particular a corrupted string SID will be detected by
    <code>Convert&shy;String&shy;Sid&shy;To&shy;Sid</code>.</p>
<li>Pro: Strings are well-known quantities.
    You probably already have code to load and save strings.
    They are also easy to see in memory dumps or in file viewers.</p>
<li>Con: Takes up more space.
    The string format is larger than the binary format.</p>
<li>Con: The conversion cost can add up if you have to do it a lot.
<li>Worst-case size is large:
    S-255-281474976710655-4294967295-4294967295-4294967295-4294967295-4294967295-4294967295-4294967295-4294967295-4294967295-4294967295-4294967295-4294967295-4294967295-4294967295-4294967295 =
    188 characters,
    if you also include the null terminator.
</ul>
<p>
Binary format:
To save the SID, use the <code>Get&shy;Length&shy;Sid</code>
function, then save the raw bytes to the file.
To load the SID, read the bytes from the file,
then validate the SID to ensure it was not corrupted
(either accidentally or maliciously).
</p>
<ul>
<li>Cons: Validating a SID is tricky. (Details below.)
    If you mess up, you may have a security vulnerability.</p>
<li>Cons: Binary format is harder to spot in a memory dump
    or in a file viewer.</p>
<li>Pro: Takes up less space.
<li>Worst-case size is
    <code>SECURITY_MAX_SID_SIZE</code> =
    68 bytes, so you might even just allocate
    a fixed buffer for the SID and avoid the variable-length problem.
</ul>
<p>
The tricky part is validating that a chunk of memory is a valid SID.
</p>
<p>
You might think that the <code>Is&shy;Valid&shy;Sid</code>
function would do that for you, but it can't
because the function doesn't have a <code>cbSize</code> parameter,
so it cannot validate that the purported SID fits inside the
buffer.
The
<code>Is&shy;Valid&shy;Sid</code> function does logical validation,
not physical validation.
(It assumes that the memory is formatted like a SID,
and it's checking whether the formatting is legal.)
</p>
<p>
Therefore, you have to do the length validation yourself,
and then let
<code>Is&shy;Valid&shy;Sid</code> do the semantic validation
only after you have verified that the length is correct.
</p>
<pre>
BOOL IsValidUntrustedSid(PSID psid, size_t cbSize)
{
    // First make sure the SID is at least the minimum size.
    // This ensures that we can read the revision and subauthority
    // count.
    if (cbSize &lt; SECURITY_SID_SIZE(0)) return FALSE;

    // Now that we know the header is readable, we can calculate
    // the length the SID claims to be and make sure it is actually
    // that length.
    if (cbSize != GetLengthSid(psid)) return FALSE;

    // Now that we know the entire memory block is the right size,
    // we can use IsValidSid.
    return IsValidSid(psid);
}
</pre>
<p>
Using strings is more convenient, and as long as the
conversion isn't a bottleneck,
and the disk space is not an issue, it would probably be
a more convenient choice for
a persistence format.
</p>
<p>
Note that the
<code>Convert&shy;String&shy;Sid&shy;To&shy;Sid</code>
function parses abbreviations for well-known SIDs.
For example, you can pass <tt>BA</tt> and out will
come the Builtin Administrators group.
If you want to block that,
you can first check that the string being converted
begins with <tt>S-</tt>.
</p>
<p>
On the other hand, the security people tell me that
defending against shorthand SIDs like <tt>BA</tt> isn't all that
interesting.
Since the attacker controls the string, they could just
use the raw format <tt>S-1-5-32-544</tt> instead.
Some shorthand SIDs expand to include the domain SID.
For example <tt>EA</tt> expands to
<tt>S-1-5-21-X-519</tt>,
where <tt>X</tt> is the domain RID.
Even if you blocked the shorthand SID,
the attacker could still pass the full string
<tt>S-1-5-21-X-519</tt>.
(From a security-theoretical point of view,
the SID for the domain is not considered sensitive data.
You should assume that attackers already know your domain SID.)
</p>
<p>
But wait, we got all distracted with answering the question and forgot
to solve the problem.
</p>
<p>
In general, it is rare to save just the SID all by itself.
Usually a SID is part of a security descriptor,
so you should be saving the entire security descriptor.
(We saw this some time ago when we discussed how
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/11/28/10576639.aspx">
the SID history is used when a user's SID changes</a>.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1224511">
				<div id="div-comment-1224511" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160122-00/?p=92913#comment-1224511">
			January 22, 2016 at 7:16 am</a>		</div>

		<p>Probably not that relevant anymore but Convert足Sid足To足String足Sid does not exist on NT4 and IIRC ConvertStringSidToSid does not support abbreviations on 2000.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1224532">
				<div id="div-comment-1224532" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160122-00/?p=92913#comment-1224532">
			January 22, 2016 at 10:00 am</a>		</div>

		<p>I don&#8217;t think this code works. Consider what happens if it&#8217;s called with S-1-5-? where ? is the start of an unallocated memory block. That is, we arrange so that the SID is truncated, and the truncation is at the end of the file, and aligned to a 4k boundary.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1224551">
				<div id="div-comment-1224551" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160122-00/?p=92913#comment-1224551">
			January 22, 2016 at 12:58 pm</a>		</div>

		<p>In that case, cbSize would be less than GetLengthSid(), so we return FALSE at the second test.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1224561">
				<div id="div-comment-1224561" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">McBucket</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160122-00/?p=92913#comment-1224561">
			January 22, 2016 at 1:53 pm</a>		</div>

		<p>A bit of a Catch-22 here, isn&#8217;t there? From the GetLengthSid function docs:</p>
<p>Return value</p>
<p>If the SID structure is valid, the return value is the length, in bytes, of the SID structure.<br />
If the SID structure is not valid, the return value is undefined. Before calling GetLengthSid, pass the SID to the IsValidSid function to verify that the SID is valid.</p>
<p>OK, so it&#8217;s unlikely that an undefined value will match cbLen, but still.</p>
<p>Frankly, though &#8212; if the SID crosses an allocation boundary, the problem is outside of the scope of IsValidUntrustedSid() function anyhow, is my feeling.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1224582">
				<div id="div-comment-1224582" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://harryjohnston.wordpress.com' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160122-00/?p=92913#comment-1224582">
			January 22, 2016 at 3:55 pm</a>		</div>

		<p>I would hazard a guess that in practice GetLengthSid() returns the size the SID would be if the subauthority count was correct, which should also be the maximum number of bytes that IsValidSid() might read.  If so, the code is OK &#8211; in practice.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt thread-even depth-1" id="comment-1224563">
				<div id="div-comment-1224563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160122-00/?p=92913#comment-1224563">
			January 22, 2016 at 2:38 pm</a>		</div>

		<p>Seems to me that the pros of the string type and the cons of the binary type are really negligible.<br />
1. &#8220;Strings are well-known quantities&#8221; but the binary form is dominant data I read and write. (Well, not myself; my apps.) Since I am very Unicode-conscious, I often read the strings as raw binary before calling the proper conversion routines.<br />
2. One has to deal with detecting binary SIDs anyway, so long as they are not consumed in the string form. Apps tend to crash after the conversion, when they are doing something meaningful.<br />
3. What you call tricky is less than the average amount of day-to-day trickiness. I often add a checksum to files that have such important pieces of information.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1224572">
				<div id="div-comment-1224572" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160122-00/?p=92913#comment-1224572">
			January 22, 2016 at 2:54 pm</a>		</div>

		<p>The documentation for GetLengthSid says &#8220;Before calling GetLengthSid, pass the SID to the IsValidSid function to verify that the SID is valid.&#8221;. So doesn&#8217;t IsValidUntrustedSid technically invoke undefined behavior?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1224581">
				<div id="div-comment-1224581" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160122-00/?p=92913#comment-1224581">
			January 22, 2016 at 3:08 pm</a>		</div>

		<p>It&#8217;s a catch-22. IsValidSid assumes that the memory is valid, but you don&#8217;t know how much memory needs to be valid until you call GetLengthSid. Turns out that GetLengthSid requires only that the header be present. I&#8217;ll see if I can patch up the documentation.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1224584">
				<div id="div-comment-1224584" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160122-00/?p=92913#comment-1224584">
			January 22, 2016 at 4:07 pm</a>		</div>

		<p>Ah there we go.</p>
<p>On a related note, this is a good example of how easy it is to end up relying on undocumented things.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-even depth-1" id="comment-1224641">
				<div id="div-comment-1224641" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160122-00/?p=92913#comment-1224641">
			January 25, 2016 at 1:39 am</a>		</div>

		<p>I&#8217;ve seen people directly validate what would be the cbSize here against &#8220;sizeof(SID)&#8221;, that reading the macro defination of SECURITY_SID_SIZE(), would be equivalent of assuming there will be at least 1 sub authority specified there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1224751">
				<div id="div-comment-1224751" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://killprog.com' rel='external nofollow' class='url'>Killer{R}</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160122-00/?p=92913#comment-1224751">
			January 25, 2016 at 2:20 pm</a>		</div>

		<p>IMHO if you seriously worried about possibility of SID corruption then using stringsid conversion to guard against that is not best idea. Likely its a worse idea. Hashing should be used against such issues. And hashing able (and should) protect not just single entity (SID) but whole storage where it saved probably with some other important information.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

