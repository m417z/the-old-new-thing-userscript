<html>
<head>
<title>The relationship between module resources and resource-derived objects in 16-bit Windows</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The relationship between module resources and resource-derived objects in 16-bit Windows</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 2, 2013 / year-entry #263</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20131002-00/?p=3053</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">As we saw last time, in 16-bit Windows, resources attached to an EXE or DLL file (which I called module resources for lack of a better term) were recorded in memory as discardable global memory blocks, and the window manager accessed them directly as needed. For example, if you had an icon or a cursor,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p><a href="http://blogs.msdn.com/b/oldnewthing/archive/2013/10/01/10453238.aspx"> As we saw last time</a>, in 16-bit Windows, resources attached to an EXE or DLL file (which I called <i>module resources</i> for lack of a better term) were recorded in memory as discardable global memory blocks, and the window manager accessed them directly as needed. For example, if you had an icon or a cursor, the <code>HICON</code> or <code>HCURSOR</code> was really a resource handle, and when the window manager needed to draw the icon or cursor, it would cast the icon or cursor handle to a global handle (since that's what it was under the hood), then call <code>Lock&shy;Resource</code> to access the raw resource data in order to copy the pixels onto the screen.</p>
<p> Similarly, accelerator tables were simply locked and accessed directly. </p>
<p> On the other hand, some resources were actually templates for other objects. As suggested by their names, dialog and menu templates were just the blueprints for creating a dialog or menu. When you called <code>Create&shy;Dialog</code> or <code>Load&shy;Menu</code>, the template was read from memory, and a fresh new dialog or menu was created based on the template. Once that was done, the template was no longer used. You could modify the resulting dialog or menu all you want, and you were also on the hook for making sure it is destroyed. (Either by destroying it yourself or by transferring that obligation to somebody else.) </p>
<p> Bitmap resources worked the same way. The resource data is a template for a new bitmap, and each time you called <code>Load&shy;Bitmap</code> (or one of its moral equivalents), a brand new bitmap was created using the resource as a template. Once that was done, the template was no longer used, and you could modify the copy to your heart's content. (And you were also responsible for destroying it when you were done.) </p>
<p> String resources were typically copied out of the resource section, either by the <code>Load&shy;String</code> function or explicitly by <a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/01/30/65013.aspx"> your custom string extractor</a>. The lifetime of the copied string was therefore controlled by you, and you could modify the copied string all you like since it was just a copy. </p>
<p> If your custom string extractor simply returned a direct pointer to the resource rather than copying, then the pointer became invalid when the module was unloaded. </p>
<p> Okay, let's summarize in a table: </p>
<table border="1" style="border-collapse: collapse">
<caption>     <b>16-bit Resources</b>     </caption>
<tr>
<th>Resource type</th>
<th>Operation</th>
<th>Result</th>
</tr>
<tr>
<td>Icon</td>
<td><code>Load&shy;Icon</code>, etc.</td>
<td>Reference</td>
</tr>
<tr>
<td>Cursor</td>
<td><code>Load&shy;Cursor</code>, etc.</td>
<td>Reference</td>
</tr>
<tr>
<td>Accelerator</td>
<td><code>Load&shy;Accelerator</code>, etc.</td>
<td>Reference</td>
</tr>
<tr>
<td>Dialog</td>
<td><code>Create&shy;Dialog</code>, etc.</td>
<td>Copy</td>
</tr>
<tr>
<td>Menu</td>
<td><code>Load&shy;Menu</code>, etc.</td>
<td>Copy</td>
</tr>
<tr>
<td>Bitmap</td>
<td><code>Load&shy;Bitmap</code>, etc.</td>
<td>Copy</td>
</tr>
<tr>
<td>String</td>
<td><code>Load&shy;String</code></td>
<td>Copy</td>
</tr>
<tr>
<td>String</td>
<td><code>Find&shy;Resource</code></td>
<td>Reference</td>
</tr>
</table>
<p> Some of these rules changed in the conversion from 16-bit Windows to 32-bit Windows, but in a way that tried to preserve the semantics of the operations. We'll look at those changes <a href="http://blogs.msdn.com/b/oldnewthing/archive/2013/10/03/10453905.aspx"> next time</a>. </p>
<p> But even before you get to that article, you have enough information to answer this customer's question: </p>
<blockquote class="q"><p> How do I recover the dialog ID from a dialog if I have the dialog's window handle? </p>
</blockquote>
<p> This is like asking, "How do I recover the recipe book that a particular cake was made from?" The cake does not know what recipe book it was made from. You might be able to do a chemical analysis followed by a thorough survey of all cookbooks in existence to try to find a match, but even if you do, it's merely a best-guess. (And if the dialog was modified after being created, then you will never find a match. Just like you will never find a cake recipe match if somebody decided to modify the cake after it came out of the oven.) </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1080883">
				<div id="div-comment-1080883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131002-00/?p=3053#comment-1080883">
			October 2, 2013 at 5:34 pm</a>		</div>

		<p>Well, the obvious way would be to enumerate through the dialog resources and compare the window and all child windows with the DIALOGTEMPLATE(EX) and all of the DIALOGITEMTEMPLATE(EX) structures that follow it.</p>
<p>If comparing these gives a match (taking into account things like the conversion of the dialog unit/pixel conversion, the x and y point of the window changing, and if the window is resizable, the width and height changing and the contents of certain controls changing like edit controls and check/radio buttons) then you can return it as a possible ID.</p>
<p>But you would also have to be aware of the possibility of coincidentally very similar dialog resources and other complications like this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1080893">
				<div id="div-comment-1080893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131002-00/?p=3053#comment-1080893">
			October 2, 2013 at 5:41 pm</a>		</div>

		<p>I forgot to mention, you could also mention that they could help themselves by adding the dialog template as a window property in WM_INITDIALOG if it is important. This way, instead of guesswork, you can recover the ID with very high certainty.</p>
<div class="post">[<em>This question is usually asked in the context of some sort of tool that is trying to identify windows it didn&#39;t create. For example, a macro recorder or a localization verification tool. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00034001a5381f07 even thread-even depth-1" id="comment-1080903">
				<div id="div-comment-1080903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Georg_Rottensteiner' rel='external nofollow' class='url'>Georg_Rottensteiner</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131002-00/?p=3053#comment-1080903">
			October 2, 2013 at 10:12 pm</a>		</div>

		<p>Ah LoadString. Why was there never a LoadString variant that allowed loading from a specific language table? I had to manually traverse the string table to get a string from a different language.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1080913">
				<div id="div-comment-1080913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131002-00/?p=3053#comment-1080913">
			October 3, 2013 at 12:23 am</a>		</div>

		<p>@Georg_Rottensteiner:</p>
<p>Vista added native handling for this. This is why you see those language directories around in places with the .mui files in them. The resource loading functions look in the module resource table, notice that it is a language neutral resource, then redirects to the preferred UI language directory to load the corresponding .mui file.</p>
<p>For earlier versions of Windows, this is why applications used satellite libraries as resources.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-1081073">
				<div id="div-comment-1081073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131002-00/?p=3053#comment-1081073">
			October 4, 2013 at 1:56 pm</a>		</div>

		<p>@Georg_Rottensteiner:</p>
<p>Because string table is not the only &lt;s&gt;language&lt;/s&gt; culture dependent resource. Dialog templates, menus, bitmaps, icons, accelerators, whatnot…</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1081343">
				<div id="div-comment-1081343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ender</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131002-00/?p=3053#comment-1081343">
			October 8, 2013 at 1:22 am</a>		</div>

		<p>While it&#39;s nice that Windows allows all kinds of resources to be localized, it&#39;s handling of localized strings leaves a lot to be desired (at least if you&#39;re not localizing to English).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

