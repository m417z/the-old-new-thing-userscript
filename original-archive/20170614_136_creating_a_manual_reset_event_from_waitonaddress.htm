<html>
<head>
<title>Creating a manual-reset event from WaitOnAddress</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Creating a manual-reset event from WaitOnAddress</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 14, 2017 / year-entry #137</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170614-00/?p=96395</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A diversion, in the form of a different exercise.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last time,
we
<!-- backref: Creating a semaphore from WaitOnAddress -->
created a semaphore with a maximum count from
<code>Wait&shy;On&shy;Address</code></a>.
Related to semaphores are events, so let's do
a manual-reset event.
</p>
<pre>
struct ALT_MEVENT
{
  LONG State;
};

void InitializeAltManualEvent(ALT_MEVENT* Event,
                              bool InitialState)
{
  Semaphore-&gt;State = InitialState;
}

void SetAltManualEvent(ALT_MEVENT* Event)
{
 if (InterlockedCompareExchange(&amp;Event-&gt;State,
                                true, false) == false) {
  WakeByAddressAll(&amp;Event-&gt;State);
 }
}

void ResetAltManualEvent(ALT_MEVENT* Event)
{
 InterlockedCompareExchange(&amp;Event-&gt;State,
                            false, true);
}

void WaitForAltManualEvent(ALT_MEVENT* Event)
{
 while (!Event-&gt;State) {
  LONG Waiting = 0;
  WaitOnAddress(&amp;Event-&gt;State,
                &amp;Waiting,
                sizeof(Waiting),
                INFINITE);
 }
}
</pre>
<p>
To set the event, we try to transition it from <code>false</code>
to <code>true</code>.
If that succeeds, then we wake anybody who was waiting for the event.
(If it fails, then it means that the event was already set, so there
is nothing to do.)
Similarly, to reset the event, we try to transition it from
<code>true</code> to <code>false</code>.
In this case, there is no need to signal that the value changed
because there will never be anyone waiting for the state to change
to <code>false</code>.
</p>
<p>
To wait for the event,
we check whether it is currently set.
If not, then we use <code>Wait&shy;On&shy;Address</code> to wait
for its state to change.
When we think its state may have changed, we go back and check.
</p>
<p>
Pretty simple.
Next time, the auto-reset event.
</p>
<p>
<b>Bonus chatter</b>:
Although this usage pattern doesn't have anybody waiting for the
state to change to <code>false</code>,
you can imagine a case where you want some type of synchronization
object that signals when something becomes unavailable.
For example, you might want one side to run as long as the event
is signaled, and the other side to run as long as the event is
unsignaled.
The traditional way is to have a pair of events, and alternately
signal them.
But with <code>Wait&shy;On&shy;Address</code>,
we can combine them into a single synchronization object.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-mcressey even thread-even depth-1" id="comment-1299765">
				<div id="div-comment-1299765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Michael+Release' rel='external nofollow' class='url'>Michael Release</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170614-00/?p=96395#comment-1299765">
			June 14, 2017 at 8:43 am</a>		</div>

		<p>Is this line of code correct?  Semaphore-&gt;State = InitialState;     Should perhaps be  Event-&gt;State=InitialState;       Or I&#8217;m very confused.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1299795">
				<div id="div-comment-1299795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ismo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170614-00/?p=96395#comment-1299795">
			June 14, 2017 at 9:19 pm</a>		</div>

		<p>How does these self invented semaphores and events compare with their kernel mode counterparts in performance ?<br />
I suppose that if no kernel mode transition is required these should be much faster ?  or are equivalent code currently in some user mode library and usually no kernel mode is needed ? (that would be obvious thing to do if not yet done).<br />
Fairness is of course sacrificed but who cares :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1299805">
				<div id="div-comment-1299805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170614-00/?p=96395#comment-1299805">
			June 15, 2017 at 3:16 am</a>		</div>

		<p>Is there any particular advantage of `WakeByAddressAll` over `WakeByAddressSingle` in this case?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1299845">
				<div id="div-comment-1299845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170614-00/?p=96395#comment-1299845">
			June 15, 2017 at 1:32 pm</a>		</div>

		<p>The semantics of a manual-reset event is that when the event is signaled, all waiters are released.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1299835">
				<div id="div-comment-1299835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170614-00/?p=96395#comment-1299835">
			June 15, 2017 at 11:34 am</a>		</div>

		<p>What happens if someone calls SetEvent followed quickly by ResetEvent? Waiters may never observe the event being set.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1299836">
				<div id="div-comment-1299836" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170614-00/?p=96395#comment-1299836">
			June 15, 2017 at 1:32 pm</a>		</div>

		<p>Yup. Kernel events have the same behavior.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

