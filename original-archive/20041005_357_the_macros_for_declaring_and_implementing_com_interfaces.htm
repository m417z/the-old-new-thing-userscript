<html>
<head>
<title>The macros for declaring and implementing COM interfaces</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The macros for declaring and implementing COM interfaces</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 5, 2004 / year-entry #358</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20041005-00/?p=37653</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">There are two ways of declaring COM interfaces, the hard way and the easy way. The easy way is to use an IDL file and let the MIDL compiler generate your COM interface for you. If you let MIDL do the work, then you also get __uuidof support at no extra charge, which is a...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
There are two ways of declaring COM interfaces, the hard way
and the easy way.
</p>
<p>
The easy way is to use an IDL file and let the MIDL compiler
generate your COM interface for you.
If you let MIDL do the work, then you also get
<a HREF="http://msdn.microsoft.com/library/en-us/vccelng/htm/key_s-z_7.asp">
__uuidof</a> support at no extra charge, which is a very nice bonus.
</p>
<p>
The hard way is to do it all by hand.  If you choose this route,
your interface will look something like this:
</p>
<pre>
#undef  INTERFACE
#define INTERFACE   ISample2

DECLARE_INTERFACE_(ISample2, ISample)
{
    BEGIN_INTERFACE

    // *** IUnknown methods ***
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void **ppv) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    // ** ISample methods ***
    STDMETHOD(Method1)(THIS) PURE;
    STDMETHOD_(int, Method2)(THIS) PURE;

    // *** ISample2 methods ***
    STDMETHOD(Method3)(THIS_ int iParameter) PURE;
    STDMETHOD_(int, Method4)(THIS_ int iParameter) PURE;

    END_INTERFACE
};
</pre>
<p>
What are the rules?
</p>
<ul>
<li>You must set
the <code>INTERFACE</code> macro to the name of the interface being
declared.
Note that you need to <code>#undef</code> any previous value before you
<code>#define</code> the new one.</p>
<li>
You must use the <code>DECLARE_INTERFACE</code>
and <code>DECLARE_INTERFACE_</code> macros
to generate the preliminary bookkeeping for an interface.
Use <code>DECLARE_INTERFACE</code> for interfaces that have no base class
and <code>DECLARE_INTERFACE_</code> for interfaces that
derive from some other interface.  In our example, we
derive the <code>ISample2</code> interface from <code>ISample</code>.
<strong>Note</strong>: In practice, you will never find
the plain <code>DECLARE_INTERFACE</code> macro because all interfaces
derive from IUnknown if nothing else.</p>
<li>
You must list all the methods of the base interfaces in exactly
the same order that they are listed by that base interface;
the methods that you are adding in the new interface must go last.</p>
<li>
You must use the <code>STDMETHOD</code> or <code>STDMETHOD_</code>
macros to declare the
methods.  Use <code>STDMETHOD</code> if the return value is
<code>HRESULT</code> and
<code>STDMETHOD_</code> if the return value is some other type.</p>
<li>
If your method has no parameters, then the argument list must
be <code>(THIS)</code>.
Otherwise, you must insert <code>THIS_</code> immediately after
the open-parenthesis of the parameter list.</p>
<li>
After the parameter list and before the semicolon,
you must say <code>PURE</code>.</p>
<li>
Inside the curly braces, you must say
<code>BEGIN_INTERFACE</code> and
<code>END_INTERFACE</code>.
</ul>
<p>
There is a reason for each of these rules.  They have to do with
being able to use the same header for both C and C++ declarations
and with interoperability with different compilers and platforms.
</p>
<ul>
<li>
You must set the <code>INTERFACE</code> macro because its value is used
by the <code>THIS</code> and <code>THIS_</code> macros later.</p>
<li>
You must use one of the <code>DECLARE_INTERFACE*</code> macros to ensure that
the correct prologue is emitted for both C and C++.
For C, a vtable structure is declared, whereas for C++
the compiler handles the vtable automatically; on the other hand,
since C++ has inheritance, the macros need to specify the base
class so that upcasting will work.</p>
<li>
You must list the base class methods in exactly the same order
as in the original declarations so that the C vtable structure
for your derived class matches the structure for the base class
for the extent that they overlap.  This is required to preserve
the COM rule that a derived interface can be used as a base
interface.</p>
<li>
You must use the <code>STDMETHOD</code> and
<code>STDMETHOD_</code> macros to ensure that
the correct calling conventions are declared for the function
prototypes.
For C, the macro creates a function pointer in the vtable;
for C++, the macro creates a virtual function.</p>
<li>
The <code>THIS</code> and <code>THIS_</code> macros
are used so that the C declaration
explicitly declares the "this" parameter which in C++ is implied.
Different versions are needed depending on the number of parameters
so that a spurious trailing comma
is not generated in the zero-parameter case.</p>
<li>
The word <code>PURE</code> ensures that the C++ virtual function is pure,
because one of the defining characteristics of COM interfaces
is that all methods are pure virtual.</p>
<li>
The <code>BEGIN_INTERFACE</code> and
<code>END_INTERFACE</code> macros
emit compiler-specific goo which the compiler vendor provides
in order to ensure that the generated interface matches
<a href="http://blogs.msdn.com/oldnewthing/archive/2004/02/05/68017.aspx">
the COM vtable layout rules</a>.
Different compilers have historically required different goo,
though the need for goo is gradually disappearing over time.
</ul>
<p>
And you wonder why I called it "the hard way".
</p>
<p>
Similar rules apply when you are implementing an interface.
Use the <code>STDMETHODIMP</code> and
<code>STDMETHODIMP_</code> macros to declare your
implementations so that they get the proper calling convention
attached to them.
We'll see examples of this
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/10/06/238630.aspx">
next time</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-215003">
				<div id="div-comment-215003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041005-00/?p=37653#comment-215003">
			October 5, 2004 at 7:17 am</a>		</div>

		<p>a even easier way is to use #import</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-215023">
				<div id="div-comment-215023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.differentpla.net/' rel='external nofollow' class='url'>Roger Lipscombe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041005-00/?p=37653#comment-215023">
			October 5, 2004 at 8:02 am</a>		</div>

		<p>&#8230;or you could use attributed C++, which will generate the TLB and the header file (suitable for C and C++).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-215053">
				<div id="div-comment-215053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeproject.com/script/articles/list_articles.asp?userid=152' rel='external nofollow' class='url'>Mike Dunn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041005-00/?p=37653#comment-215053">
			October 5, 2004 at 8:33 am</a>		</div>

		<p>Note that the ATL wizard in VC 6 has a bug, it generates header files with STDMETHOD when it should be STDMETHODIMP. This isn&#8217;t a problem in practice because the difference is that STDMETHOD includes &quot;virtual&quot;, which is harmless to repeat in the impl class.</p>
<p>Attributed C++ is about the worst thing I&#8217;ve ever encountered in my life. I have <em>never</em> gotten an attrib C++ ATL project to work in VC 7.1. Well, the wizard-generated code compiles, but as soon as I try to add my own stuff to the class, things break; and since the logic is hidden in attributes, there&#8217;s no way to debug it. (Things like: the class&#8217;s RGS file isn&#8217;t processed at registration time.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-215063">
				<div id="div-comment-215063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041005-00/?p=37653#comment-215063">
			October 5, 2004 at 8:33 am</a>		</div>

		<p>However, this assumes that one wants a header that compiles both in C++ and C. Of course thatâ€™s a sensible thing to want. However, none of that macroing will give a declaration valid for other languages such as Object Pascal. Meanwhile, going the IDL way will likely yield a type library which is easily imported by other systems.</p>
<p>Borland Delphi and C++ Builder have a somewhat perverse way of defining interfaces; namely, you first make a type library by the use of a visual (and a pretty brittle at that) editor, and then the IDE generates or updates you the headers and the implementation. Also, you have the option of exporting the IDL for the type library.</p>
<p>Also, while generating the headers and the implementation, BCB insists on turning all interface pointer parameters into smart pointers that, among other things, automatically AddRef and Release. An unsuspecting victim is then forced to mentally step through different modes of a method call ([in], [out] and [in, out]) to understand why the object is suddenly gone after handing it to a method.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-215073">
				<div id="div-comment-215073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041005-00/?p=37653#comment-215073">
			October 5, 2004 at 9:51 am</a>		</div>

		<p>Mike Dunn: I think that the problem with Attributed C++ isn&#8217;t that it doesn&#8217;t work, but rather that the documentation is nearly nonexistant.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-215083">
				<div id="div-comment-215083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041005-00/?p=37653#comment-215083">
			October 5, 2004 at 11:27 am</a>		</div>

		<p>&gt; I think that the problem with Attributed C++<br />
<br />&gt; isn&#8217;t that it doesn&#8217;t work,</p>
<p>Actually, I&#8217;ve heard a lot of information that some parts of the generated code has memory leaks in some dispatch/invoke type stuff, and various other problems which of course are pretty hard to fix when they are automatically generated.</p>
<p>These are mentioned frequently on the microsoft.public.vc.atl newsgroup, such as this post for example:</p>
<p><a target="_new" href="http://groups.google.com/groups?q=attributed+bug+%22Alexander+Nickolov%22&amp;hl=en&amp;lr=&amp;ie=UTF-8&amp;group=microsoft.public.vc.atl&amp;safe=off&amp;selm=%23RNWlozzDHA.556%40TK2MSFTNGP11.phx.gbl&amp;rnum=3" rel="nofollow">http://groups.google.com/groups?q=attributed+bug+%22Alexander+Nickolov%22&#038;hl=en&#038;lr=&#038;ie=UTF-8&#038;group=microsoft.public.vc.atl&#038;safe=off&#038;selm=%23RNWlozzDHA.556%40TK2MSFTNGP11.phx.gbl&#038;rnum=3</a></p>
<p>It seems like attributes were sort of a short-lived and unsuccessful experiment by the  Visual Studio team. They haven&#8217;t even stood by them enough to fix these problems that are mentioned on the newsgroup.</p>
<p>Of course, to &quot;help you out&quot;, attributed is turned on by default when you create a new ATL project&#8230;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-215093">
				<div id="div-comment-215093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Conti</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041005-00/?p=37653#comment-215093">
			October 5, 2004 at 1:05 pm</a>		</div>

		<p>Centaur:  I&#8217;ve always wished that MIDL had on option to not generate the C compatible code (i.e. generate C++  only)  OK-this is a minor point, and what does it hurt to generate both &#8230;</p>
<p>Isn&#8217;t it humorous that the visual studio team picked the same &#8216;perverse&#8217; backwards method for generating wsdl code?</p>
<p>I&#8217;ve also been disappointed that microsoft has never provided an idl-&gt;.NET tool (relying instead on the lossy #import style tlbimp)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-215103">
				<div id="div-comment-215103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob Kennedy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041005-00/?p=37653#comment-215103">
			October 5, 2004 at 1:24 pm</a>		</div>

		<p>Raymond, could you please make sure that a copy of today&#8217;s post is sent to the people in charge of the Platform SDK&#8217;s TextServ.h? That file is a perfect example of why people declaring interfaces in C or C++ should use the COM macros. The ITextServices and ITextHost interfaces in that unit are declared using &quot;unmacroed&quot; C++, and that makes them totally incompatible with anything else, especially languages that don&#8217;t understand Microsoft&#8217;s default thiscall calling convention.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-215113">
				<div id="div-comment-215113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041005-00/?p=37653#comment-215113">
			October 5, 2004 at 1:29 pm</a>		</div>

		<p>I agree that textserv.h is broken but it&#8217;s too late now. If you changed it to use the COM macros then you&#8217;d be changing the calling convention and existing clients would start crashing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-215033">
				<div id="div-comment-215033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041005-00/?p=37653#comment-215033">
			October 5, 2004 at 8:07 am</a>		</div>

		<p>But how many compilers support #import and attributed C++? Remember, the point of these macros is to admit a *compiler-independent* way of expressing COM interfaces. It&#8217;s great that there are shortcuts you can use that work only on certain compilers, but that&#8217;s not the issue here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-215123">
				<div id="div-comment-215123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://br.thespoke.net/MyBlog/fabiog/MyBlog.aspx' rel='external nofollow' class='url'>Fabio Galuppo</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041005-00/?p=37653#comment-215123">
			October 5, 2004 at 4:08 pm</a>		</div>

		<p>This comment is not about the macros&#8230;</p>
<p>Your posts are cool!</p>
<p>Raymond, do you plan compile these technical information (posts from COM, Win32, Win64) in a book? A lot of real Microsoft developers will be grateful!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-215233">
				<div id="div-comment-215233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041005-00/?p=37653#comment-215233">
			October 6, 2004 at 2:40 pm</a>		</div>

		<p>Raymond&gt; But how many compilers support #import and attributed C++?</p>
<p>&#8230;or __uuidof?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-215243">
				<div id="div-comment-215243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041005-00/?p=37653#comment-215243">
			October 6, 2004 at 2:53 pm</a>		</div>

		<p>It&#8217;s one thing to make a compiler-specific feature available. It&#8217;s another to require it.</p>
<p>If your compiler doesn&#8217;t support __uuidof then including the header file gets you the interfaces but you don&#8217;t get any __uuidof magic &#8211; but at least the interfaces work and you can use them.  Whereas if your compiler doesn&#8217;t support #import and the header file uses it, then you&#8217;re stuck.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-215373">
				<div id="div-comment-215373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2004/10/07/239318.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041005-00/?p=37653#comment-215373">
			October 7, 2004 at 1:51 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-216253">
				<div id="div-comment-216253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041005-00/?p=37653#comment-216253">
			October 12, 2004 at 7:14 pm</a>		</div>

		<p>Why are IDL and ODL almost but not quite compatible?  What are the criteria for choosing one or the other?  What is the method for switching from one to the other if the programmer&#8217;s actions in VC++ happened to generate the less appropriate choice?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-216273">
				<div id="div-comment-216273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041005-00/?p=37653#comment-216273">
			October 12, 2004 at 8:58 pm</a>		</div>

		<p>Beats me, I&#8217;ve never heard of ODL.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

