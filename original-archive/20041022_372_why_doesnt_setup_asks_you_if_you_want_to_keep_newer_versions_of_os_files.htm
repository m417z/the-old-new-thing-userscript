<html>
<head>
<title>Why doesn't Setup asks you if you want to keep newer versions of OS files?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why doesn&#8217;t Setup asks you if you want to keep newer versions of OS files?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 22, 2004 / year-entry #373</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>34</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Windows 95 Setup would notice that a file it was installing was older than the file already on the machine and would ask you whether you wanted to keep the existing (newer) file or to overwrite it with the older version. Asking the user this question at all turned out to have been a bad idea....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Windows&nbsp;95 Setup would notice that a file it was installing was older than the file already on the machine and would ask you whether you wanted to keep the existing (newer) file or to overwrite it with the older version.</p>
<p> Asking the user this question at all turned out to have been a bad idea. It's one of those <a href="http://blogs.msdn.com/oldnewthing/archive/2004/04/26/120193.aspx"> dialogs that ask the user a question they have no idea how to answer</a>. </p>
<p> Say you're installing Windows&nbsp;95 and you get the file version conflict dialog box. "The file Windows is attempting to install is older than the one already on the system. Do you want to keep the newer file?" What do you do? </p>
<p> Well, if you're like most people, you say, "Um, I guess I'll keep the newer one," so you click Yes. </p>
<p> And then a few seconds later, you get the same prompt for some other file.  And you say Yes again. </p>
<p> And then a few seconds later, you get the same prompt for yet another file.  Now you're getting nervous. Why is the system asking you all these questions? Is it second-guessing your previous answers? Often when this happens, it's because you're doing something bad and the computer is giving you one more chance to change your mind before something horrible happens. Like in the movies when you have to type Yes five times before it will launch the nuclear weapons. </p>
<p> Maybe this is one of those times. </p>
<p> Now you start saying No.  Besides, it's always safer to say No, isn't it? </p>
<p> After a few more dialogs (answering No this time), Setup finally completes.  The system reboots, and... it bluescreens. </p>
<p> Why? </p>
<p> Because those five files were part of a matched set of files that together form your video driver. By saying Yes to some of them and No to others, you ended up with a mishmash of files that don't work together. </p>
<p> We learned our lesson.  Setup doesn't ask this question any more. It always overwrites the files with the ones that come with the operating system.  Sure, you may lose functionality, but at least you will be able to boot.  Afterwards, you can go to Windows Update and update that driver to the latest version. </p>
<p> Note, however, that this rule <a href="http://blogs.msdn.com/LarryOsterman/archive/2004/08/17/215857.aspx"> does not apply to hotfixes and Service Packs</a>. </p>
<p> [Raymond is currently on vacation; this message was pre-recorded.] </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (34)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-220343">
				<div id="div-comment-220343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ignas MikalajÅ«nas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220343">
			October 22, 2004 at 8:24 am</a>		</div>

		<p>And where is the option &quot;Yes to all&quot; gone ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-220353">
				<div id="div-comment-220353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.spectresoftware.com' rel='external nofollow' class='url'>Pete King</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220353">
			October 22, 2004 at 8:32 am</a>		</div>

		<p>Its also on vacation ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-220383">
				<div id="div-comment-220383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RJ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220383">
			October 22, 2004 at 9:22 am</a>		</div>

		<p>Sure, not sharing dlls is great for not breaking things, but then the GDI+ update comes along and no one has a clue if they are &quot;fully patched&quot; or not.  And people have to write tools to search the whole harddrive for instances of that dll.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-220393">
				<div id="div-comment-220393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220393">
			October 22, 2004 at 9:32 am</a>		</div>

		<p>Also keep in mind that most developers see setup/deployment as a nuisance.  The system is in a very weird state while running setup &#8211; the system is kind of there but kind of isn&#8217;t.</p>
<p>When setup breaks, the mentality still persists within Windows that it&#8217;s the setup team&#8217;s fault.  Nevermind that someone introduced a new dependency which never would have possibly made it through setup in the first place, the setup team has to triage these issues before the dev teams get involved.</p>
<p>As people familliar with large organizations will already know, the problem with having centralized cost centers like this is that you start optimizing to reduce your cost.</p>
<p>So the end result is that anything which might make setup less likely to work (e.g. the machine crashes as Raymond says) is stopped.</p>
<p>We&#8217;re working on fundamentally rethinking/reworking how os/product setup works so that we&#8217;re less dependent on such crutches but then the next obvious thing to people in large orgs comes into play: after you&#8217;ve centralized a cost, it&#8217;s hard to re-distribute it back out to the profit centers which really should own the cost associated with their decisions.  It&#8217;s really hard to get the XYZ team to write 2 less features so that they can instead own their own setup story.</p>
<p>Fortunately upper management, while maybe not seeing/believing the organizational issues, does see the effectiveness issues that affect real live customers and is supporting changing these patterns.</p>
<p>Re: shared DLLs:</p>
<p>When you think of shared DLLs as some random optimization over static linking, what you say is true.</p>
<p>The truth of the matter is different.</p>
<p>First, code page sharing is very important for performance reasons, especially on systems with lots of processes (e.g. terminal server).</p>
<p>Second, when code manages some system-wide resource it has to line up across all processes.  Most intra-system communications protocols do not receive the level of design or scrutiny that inter-system communications protocols do, and it&#8217;s a fundamentally hard problem for the small number of implementations of those to interoperate such that there are usually 3rd party interop testing/validation facilities.</p>
<p>Third, it&#8217;s a fundamental part of the Windows platform value proposition that we fix problems in the platform for you.  If there&#8217;s a bug in comctl32.dll, we fix it and we get the fix onto the user&#8217;s machine.  If every app had its own static copy there would be no way to service it.</p>
<p>There are counter arguments to each of these, but in the context of Windows and how/why it has been successful, all three are vital.  Maybe #2 should be solved by having more services/daemons running but now you&#8217;re inflicting cost that wasn&#8217;t necessary.  Maybe someday #1 goes away when everyone is running 128 bit processors TS machines can scale to 100,000 sessions because everyone has 20TB of main memory but that&#8217;s not the case yet.  #3 is harder to counter; it&#8217;s more of a core value proposition about us being a platform.  The counter-argument is of course about the so-called monoculture but the fact is that the industry expects us to take responsibility for all the code we write regardless of whether it&#8217;s statically linked or dynamically linked.</p>
<p>Any solution that &quot;fixes&quot; this problem for statically linked code would smell close enough to DLLs so that you&#8217;d just be creating a lot of churn/dust to try to address it.</p>
<p>Finding the right balance here is the single biggest engineering problem facing Windows in the future.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-220403">
				<div id="div-comment-220403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lowercase josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220403">
			October 22, 2004 at 10:34 am</a>		</div>

		<p>I care if you waste my memory and disk space&#8230;  It&#8217;s probably not entirely rational, but I care.  (lessee&#8230;  x5 for multiple copies, &#8217;cause no one cares.  x10 for bloated code, &#8217;cause no one cares.  x5 for bloated data formats, &#8217;cause&#8230; no one cares.  x10 for eye candy, &#8217;cause no one cares.  I got a bigger drive to put more stuff on, not because I don&#8217;t care!)</p>
<p>Anyway, whenever I saw these, I always thought &quot;Why on earth would I ever want to install older versions?&quot;  Knowing the computer&#8217;s penchant for blindly repeating things with no compelling reason, I was fortunately unwavering in that position.  Now I guess I don&#8217;t have that option&#8230;  Unless it&#8217;s just the OS installer, that actually makes sense.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-220413">
				<div id="div-comment-220413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://pinterkr@freemail.hu' rel='external nofollow' class='url'>krisztian pinter</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220413">
			October 22, 2004 at 11:34 am</a>		</div>

		<p>Few points.</p>
<p>1. The problem arises not only when user clicks inconsistently, but even if chooses the old dll one single time, and this dll is used by someone else. Even the smartest users, save by the author of the program, can not avoid messing up the system, only if never choose the old one. </p>
<p>2. If the backward compatibility was always provided, the problem would not exist, always the newest file had to be kept.</p>
<p>3. If the system was designed to support multiple dll versions, the problem would not exist. Of course this change is now almost impossible, since affects the way windows locates and loads dlls, and it is a lot of work to do. (Note: it can be implemented with full backword compatibility, though)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-220443">
				<div id="div-comment-220443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220443">
			October 22, 2004 at 3:51 pm</a>		</div>

		<p>&quot;Third, it&#8217;s a fundamental part of the Windows platform value proposition that we fix problems in the platform for you. If there&#8217;s a bug in comctl32.dll, we fix it and we get the fix onto the user&#8217;s machine. If every app had its own static copy there would be no way to service it.&quot;</p>
<p>Maybe for some APIs but not all of them. When Microsoft fixes a bug or adds features, they don&#8217;t tend to put the fixes in the earlier versions. This leads to workarounds in the code if you care to target customers using these older platforms. Coding your own functions to emulate AlphaBlend and TransparentBlt for Windows 95 compatibility and to work around the memory leak in Windows 98 comes to mind. A lot of programs end up having a static copy of a function anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-220373">
				<div id="div-comment-220373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Trent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220373">
			October 22, 2004 at 9:00 am</a>		</div>

		<p>I think this is a bit of an oversimplification. I&#8217;m usually the first one to say that users can&#8217;t read (not don&#8217;t, can&#8217;t). But that&#8217;s not really fair. The problem is more complex than this.</p>
<p>Why does the user read the &quot;replace this existing file you saved with the new one you&#8217;re now trying to save&quot; dialog, and not the &quot;should I replace the newer file with this older one during this installation&quot; dialog? It&#8217;s because they *care* about the first one. Additionally, it&#8217;s a choice where the 2 options are both entirely reasonable from the perspective of the user. </p>
<p>A user can *get* the fact that s/he might not want to overwrite an existing file with something they just created themselves (assuming they weren&#8217;t editing that very file, of course). It&#8217;s a valid question. Maybe they do, maybe they don&#8217;t. Both options are &quot;right&quot;.</p>
<p>The *biggest* problem with the installer&#8217;s &quot;replace newer file with old?&quot; dialog was that the overall functionality was broken. It should have scanned *all* the files, and offered *1* choice, and that choice should be a real choice that the user might actually have an opinion about. In this particular example, it is *clearly* wrong for the user to say &quot;yes&quot; to one of these and &quot;no&quot; to another one. But is it wrong to ask them if they are sure they want to install an older driver package? I&#8217;m not so sure. </p>
<p>&quot;This file or that file&quot; isn&#8217;t something they will know how to answer, nor do they care. &quot;You have newer version of this program already installed. Do you want to install this older version?&quot; is not an unreasonable question. Better still, both answers lead to reasonable results. Even if a user always says yes or no, it won&#8217;t matter. If they say no, and they really did want the package, at least it will be clear what happened and they can run setup again. If they say yes and they didn&#8217;t want it, well they also ran the install program when they didn&#8217;t want it, so you&#8217;re no worse off than if you did it automatically. </p>
<p>Frankly, though, in many cases even that&#8217;s asking the wrong question. The true solution isn&#8217;t to figure out that answer without asking. The solution is to make it not matter. Shared DLLs were a clever idea in their day. They are an abomination now except when they are truly identical. No one cares if you waste a few meg of their $.10/GB hard disk. They don&#8217;t even care if you waste a bit of their memory. And they certainly won&#8217;t care if you waste a bit of the CPU. They care whether the machine works. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-220423">
				<div id="div-comment-220423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nate Silva</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220423">
			October 22, 2004 at 12:06 pm</a>		</div>

		<p>Thank you. This is the right thing to do. Part of a developer&#8217;s job is to *make reasonable decisions* instead of dumping that responsibility on the user. For the 1% of people who really wanted the alternate (probably wrong) versions of those files, do it yourself instead of inconveniencing the 99% of people who just want it to work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-220463">
				<div id="div-comment-220463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.foxyshadis.com' rel='external nofollow' class='url'>foxyshadis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220463">
			October 22, 2004 at 10:29 pm</a>		</div>

		<p>krizstian, I have a pointer for your #3: If you have XP or 2003, open up c:/Windows/WinSxS, and look through the subfolders, or even check the very descriptive folder names. Somehow or another, probably some monumental software engineering, Windows now supports multiple dll versions simultaneously.</p>
<p>(btw, don&#8217;t ever get clever and delete the folder, figuring it&#8217;s just another dllcache. &gt;_&lt;)</p>
<p>Not that there&#8217;s much in there yet. Most apps and system support dlls still don&#8217;t use it; I don&#8217;t have a clue how to, but I haven&#8217;t researched it since I don&#8217;t put out shared system dlls. I hope Raymond or someone else here talks about it someday.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-220503">
				<div id="div-comment-220503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220503">
			October 23, 2004 at 2:06 pm</a>		</div>

		<p>You have way to many vacations man..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-220533">
				<div id="div-comment-220533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CiNN</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220533">
			October 23, 2004 at 5:58 pm</a>		</div>

		<p>same with path&#8230;why do software keeps changing their way of naming, for example<br />
<br />somecompagnie softwarethe best soft<br />
<br />in another software<br />
<br />somecompagnie software Incthe best soft2<br />
<br />again<br />
<br />some compagnie software Incthe best soft3<br />
<br />so the same compagny has 3 folders for himself<br />
<br />as well in registry as in program files<br />
<br />program files introduced someway of sorting your software so that you dont end up with lots of folder&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-220543">
				<div id="div-comment-220543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ryanmy/' rel='external nofollow' class='url'>Ryan Myers</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220543">
			October 23, 2004 at 7:31 pm</a>		</div>

		<p>foxyshadis, that folder is, indeed, a way for you to specify that an app should use a specific version of a DLL.  The functionality is called &quot;side-by-side&quot; or SxS for short, and was introduced in XP and Server03 as an answer to DLL Hell &#8212; but, as you correctly pointed out, nobody seems to want to use it :-</p>
<p>You enable it by creating an XML file for every DLL you want to use SxS with, and an XML file for every application that requires a specific version.</p>
<p><a target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/sbscs/setup/isolated_applications_and_side_by_side_assemblies_start_page.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/sbscs/setup/isolated_applications_and_side_by_side_assemblies_start_page.asp</a></p>
<p>An alternative which also works on 95/98/ME is using local isolation using .local files.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-220553">
				<div id="div-comment-220553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220553">
			October 24, 2004 at 12:27 pm</a>		</div>

		<p>We very strongly recomment /against/ .local files at this time.  The feature was developed when app compat issues dominated.  Security and bug fixes dominate now and .local lets you escape bug fixes.</p>
<p>The sxs store is the beginnings of the preferred approach.  (My team did this work for XP.)  We&#8217;ll be moving the model forwards in Longhorn to bring some of the same values to non-sxs components and in a future OS to introduce a more full featured app model including robust deployment (my team also did the infrastructure for clickonce on Whidbey) and a usable shared component / servicing / versioning model.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-220583">
				<div id="div-comment-220583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220583">
			October 24, 2004 at 9:43 pm</a>		</div>

		<p>The basic question of whether or not to replace an existing file caused additional problems because the question was broken in several ways.</p>
<p>1.  If clearly worded, there are essentially two ways to ask this, &quot;do you want to keep the existing file&quot; or &quot;do you want to install the file from whatever thing you&#8217;re installing now&quot;.  Yes to one is the same as no to the other, and vice versa.  In order to figure out the answer, you have to fully read the question AND know which file is newer AND know if you really want the newer one.  Both in Japanese and in English I&#8217;ve seen the question asked both ways.</p>
<p>2.  If the question is not clearly worded, it is impossible for the reader to figure out which of &quot;yes&quot; or &quot;no&quot; will get the newer file, and/or which file (the existing one or the one in the package being installed) is newer.  For some reason I haven&#8217;t seen this level of impossibility in English language installations, but in Japanese there were cases when Japanese software engineers and I both together could not figure which answer would keep the newer file in place.</p>
<p>3.  Sometimes the newer file is a different language version, and then sometimes it doesn&#8217;t matter whether you take it or not because you can&#8217;t get a file that&#8217;s compatible with another file you already accepted.</p>
<p>4.  Sometimes there&#8217;s a &quot;yes to all&quot;, sometimes there&#8217;s a &quot;no to all&quot;, but I haven&#8217;t seen both.  Both would be kind of useful.  In cases where the user figures out the right answer is &quot;yes to all&quot; but the thing doesn&#8217;t offer a &quot;yes to all&quot;, this is really frustrating.</p>
<p>5.  If a driver gets broken by this, going to Windows Update is not a reliable way to fix it.  Sure, some drivers from Windows Update really are fixes.  If my experience is anything to go by, a majority are.  Now, the difference between a majority and 100% makes the difference between unreliability and reliability.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-220593">
				<div id="div-comment-220593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizza</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220593">
			October 25, 2004 at 3:29 am</a>		</div>

		<p>Shared libraries are great.</p>
<p>But the way Windows handles them is weak.  Version numbers are incorporated into filenames on a random basis (sometimes they are, sometimes they aren&#8217;t, no rhyme or reason to it).</p>
<p>Unix has got this right; it handles multiple versions cleanly and effectively.</p>
<p>Windows doesn&#8217;t, and uses extraordinarily complicated things like SxS to try to remedy the situation.</p>
<p>Windows could, and should, use the Unix model.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-220603">
				<div id="div-comment-220603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220603">
			October 25, 2004 at 4:50 am</a>		</div>

		<p>DrPizza: There are serious problems with the Unix model, too, though. Symbol names are not resolved to libraries at static link time, so it is entirely possible for symbol names to clash and to be resolved unpredictably at dynamic link time. (This also makes dynamic linking relatively slow, especially for C++ programs.) This can be avoided by using versioned symbols and being selective in the use of RTLD_GLOBAL, but that currently takes a lot of effort so it isn&#8217;t done as a matter of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-220613">
				<div id="div-comment-220613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220613">
			October 25, 2004 at 5:30 am</a>		</div>

		<p>The UNIX shared library thing, from what I could see as someone who toyed far too briefly with developing apps for Unix, seems to not be enforced or enabled in any way by the OS. It seems to be rather a purely voluntary standard adhered to by most Unix developers. </p>
<p>Well, the general principle behind it seemed rather easy for any Win32 vendor to implement should they choose to do so as a means to version their own dlls.</p>
<p>It seemed in practice to be essentially the same way COM objects are versioned &#8211; which seemto offer the same &#8211; link to explicit or latest version type functionality.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-220623">
				<div id="div-comment-220623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vorn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220623">
			October 25, 2004 at 6:33 am</a>		</div>

		<p>When I was at Nebraska (2001-2002), I met someone who worked in the computer equipment department.</p>
<p>One day he came into possession of a broken monitor.  He wrote on the screen in permanent marker: &quot;BAD&quot;</p>
<p>A few days later someone else in the department had apparently plugged in and attempted to turn on the monitor, and asked why the word &quot;BAD&quot; was written on it.</p>
<p>This happened several times, until finally my friend became annoyed and thought up a solution.</p>
<p>The monitor, when he was done with it, said &quot;NAZI BAD&quot; on it.</p>
<p>Nobody ever asked again about that monitor.</p>
<p>Vorn</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-220733">
				<div id="div-comment-220733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Trent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220733">
			October 25, 2004 at 9:43 am</a>		</div>

		<p>Yes, well, I wasn&#8217;t sufficiently clear about my dislike for simple shared DLLs, since I was more talking about the underlying issue of making things work rather than asking the user.</p>
<p>Anyway, to be more clear: unversioned shared DLLs are an abomination. COM is a step in the right direction, but Microsoft put so much other garbage into that model that it&#8217;s a bloated hard to use mess. </p>
<p>These days, processors are fast enough that you could even get away with them all being out-of-process, which would isolate them even more and lead to fewer bugs of the shared-memory-vs-thread-local-storage type and vastly simplify the apartment threading models (like, get rid of them). </p>
<p>But the way things actually played out, COM turned into a monster. A really simple versioning mechanism layered on top of a pure interface DLL would be a beautiful thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-220903">
				<div id="div-comment-220903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-220903">
			October 25, 2004 at 11:07 pm</a>		</div>

		<p>Put every component in its own address space?  The marshaling requirements would be outrageous.  People barely understand how to author communications protocols when they realize it&#8217;s a communications protocol let alone when it&#8217;s &quot;just an API&quot;.</p>
<p>The problem isn&#8217;t that you just want to isolate each component, but rather that you want isolated stacks of components (I&#8217;d call these entities &quot;applications&quot;).</p>
<p>Working out how you have a valuable platform (and possibly more importantly, a platform for others to write valuable platforms on because in the platform biz it&#8217;s all about client adoption) while providing the right balance between innovation, support costs, compatibility costs, etc. is not trivial.  Working this issue out in an economic context is absolutely vital to our business however so you can be sure we&#8217;ll be looking for the simplest solution which meets the requirements.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-221123">
				<div id="div-comment-221123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Craig Ringer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-221123">
			October 27, 2004 at 2:33 am</a>		</div>

		<p>Chris Becke: Regarding UNIX .so versioning, it&#8217;s semi-voluntary and does have OS support.  I&#8217;ll attempt to explain in more detail, but I&#8217;m far from an expert on the matter so authorative sources should be consulted for details.</p>
<p>Nothing stops a library developer from releasing every version of their library as &#8216;libblah.so.0&#8217; . They&#8217;re not forced to version the library soname.</p>
<p>In practice, it&#8217;s rare to see unversioned libraries at least on the open source *nix side of things. Most library maintainers seem to increment the soname (library version number) sensibly, so when they break compatibility they release &#8216;libblah.so.1&#8217;, etc. More minor changes are generally indicated by a more specific version on the soname, eg &#8216;libblah.so.1.2&#8217; .</p>
<p>The versioning scheme does rely on the library maintainer to properly increment the soname when releasing incompatible changes.</p>
<p>The dynamic linker supports this scheme by permitting applications to choose how specific they wish to be about library versions and automatically locating a matching library.</p>
<p>If I have an application that links against &#8216;libblah.so.0&#8217;, ld.so will correctly link it to &#8216;libblah.so.0.1.2.3&#8217; but will refuse to link it to &#8216;libblah.so.1&#8217; . Another application might know that it requires exactly &#8216;libblah.so.0.1&#8217; and can specify this. Unfortunately, I don&#8217;t think it is possible for an application to specify that it requires &#8216;libblah.so.0.2&#8217; but permit its self to be linked to &#8216;libblah.so.0.3&#8217; or greater.</p>
<p>This mechanism makes it possible for libblah.so.0 and libblah.so.1 to be installed at the same time, and for applications linked against both to load and run without conflicts. Both can be in the same directory &#8211; there is no need for tricks with dynamic linker search paths.</p>
<p>Unfortunately, this scheme does not usually cover symbol versioning. Witness the horror that is Berkley DB on UNIX. It is not uncommon for an application to require a newer version of Berkley DB than is shipped with the system. This works fine, and both the old and new versions can be in use at the same time. Problems appear when the app that requires the newer Berkley DB links to a system library that in turn links to the older Berkley DB. *boom*.</p>
<p>This issue can be worked around with symbol versioning, but few libraries seem to bother with it. It would be nice if symbol versioning was handled more automatically by the compiler, linker, and dynamic linker. Of course, that&#8217;s just my opinion as a sysadmin and beginner programmer who&#8217;s had to deal with Berkley DB conflicts far too many times.</p>
<p>As a mostly-UNIX user who deals with Windows at times (and is delighted to see how much nicer it&#8217;s becoming), I&#8217;ve always been puzzled by the lack of DLL versioning. The UNIX approach is far from perfect, but if it was extended to cover symbol versioning and supported by tools to help detect things like incompatible function prototype changes, it could be very interesting indeed. Windows also has standard ways of storing metadata within executables, so it wouldn&#8217;t be forced to use simple filename tricks for versioning.</p>
<p>The day I can see an application installing DLL files into the system directories without a twinge of &quot;will my system boot tomorrow&quot; horror, I&#8217;ll be awfully happy.</p>
<p>Of course, any versioning scheme probably couldn&#8217;t help older apps, so it&#8217;d take quite some time to see the benefits. Oh well &#8211; better long term and done right than short term and ugly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-221213">
				<div id="div-comment-221213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vorn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-221213">
			October 27, 2004 at 10:22 am</a>		</div>

		<p>Way I figure it, the best way to ask the user a question like this is this:</p>
<p>&quot;Windows has detected that the following DLLs are already installed with newer versions than the ones on the setup CD.  It is generally a good idea to let newer versions stay; however, you may wish to use the older version for some of them (for instance, unstable or compromised DLLs should be replaced with the older versions).  Please check the DLLs you want to use the older version of, and then hit &#8216;OK&#8217;.&quot;</p>
<p>Followed by a list of DLLs that you can check (like IE&#8217;s advanced preferences pane), with none of them checked.</p>
<p>Vorn</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-221283">
				<div id="div-comment-221283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-221283">
			October 27, 2004 at 3:34 pm</a>		</div>

		<p>Like any normal human being is going to read a dialog box the size of &quot;War and Peace&quot;&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-221363">
				<div id="div-comment-221363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vorn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-221363">
			October 28, 2004 at 1:08 am</a>		</div>

		<p>Better than asking over and over about DLLs that the user doesn&#8217;t know the name of.</p>
<p>Vorn</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-221483">
				<div id="div-comment-221483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.robertmoir.co.uk' rel='external nofollow' class='url'>Robert Moir</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-221483">
			October 28, 2004 at 8:19 am</a>		</div>

		<p>Vorn, how does asking a user about a whole list of DLLs they don&#8217;t know about, and presenting them with a long intimidating list,  come out better than asking them about each individual one. </p>
<p>If I don&#8217;t understand the question (and we can be sure that many users don&#8217;t) then I can&#8217;t provide a useful answer either way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-221553">
				<div id="div-comment-221553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vorn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-221553">
			October 28, 2004 at 10:20 am</a>		</div>

		<p>Simple:  My way actually gives experts all the details they need, recommends a default course of action, prevents absurd repetition, and gives enough information that anyone can act on it.  From what I can tell, half the problem with asking, originally, is that it didn&#8217;t give any actual information (no DLL name&#8230;) so it was just &quot;Oh, Windows is being stupid and repetitious.&quot;  Which isn&#8217;t a nice thing to have happen.</p>
<p>The point is this:  certainly, a novice computer user doesn&#8217;t need this kind of information; a short summary will do.  For the expert, on the other hand, the ability to go in there and choose specific files to overwrite comes in mighty handy.  The problem with the original setup method was, at least in part, that each DLL replacement dialog came with no actual information.  The user, whether expert or novice, has no clue what is being replaced, or if the setup has fallen into an infinite loop.  The solution, then, is to create a single dialog (so we only see it once on a reinstall and never get worried that we may have broken the installer) that describes the problem (so we know what the machine is trying to do) and gives information that allows people who have some idea as to what&#8217;s going on the ability to make a decision.</p>
<p>A useful example in this is the configuration program that comes with an installation of perl: it asks specific questions, describes what the answers are used for, provides a default (often gleaned from system environment information), and explains clearly conditions (that it generally can&#8217;t determine itself) that would cause the default to be inappropriate.</p>
<p>Vorn</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-221613">
				<div id="div-comment-221613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vorn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-221613">
			October 28, 2004 at 3:46 pm</a>		</div>

		<p>&quot;the problem is that the user doesn&#8217;t have the background knowledge to make an informed decision&quot;</p>
<p>Then give it to him, right in the dialog.</p>
<p>Also you must be talking about a different dialog than I am &#8211; the last time I saw one it didn&#8217;t tell me what it was trying to replace&#8230; which is extremely aggravating &#8211; I didn&#8217;t know if it was trying to deal with kernel32.dll or lookashinydllthatdoesshinythings.dll .</p>
<p>Old MacOS had enough of a problem with that sort of thing that people use it as a common complaint.  Eric Raymond talks about it, too, in that horror story involving CUPS, so it&#8217;s not constrained to there, either.</p>
<p>Also I&#8217;m aiming those blahs at the expert user, not the one that doesn&#8217;t have a clue, because I know that the one who doesn&#8217;t have a clue isn&#8217;t going to read them.  Also also good UI design puts the action to be performed on the button: &quot;replace the new files with the old ones (recommended)&quot; (default) &quot;don&#8217;t replace&quot; so that you can&#8217;t pick a button without reading them, but also have a good idea of what it wants you to do.  Also also also this is what the &quot;more details&quot; button is for.</p>
<p>Vorn</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-221633">
				<div id="div-comment-221633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-221633">
			October 28, 2004 at 4:21 pm</a>		</div>

		<p>&quot;Then give it to him, right in the dialog.&quot;</p>
<p>That&#8217;s just shouting louder.</p>
<p>The point is that the user doesn&#8217;t WANT to learn. They just want to surf the web and send email to their grandchildren. Whatever you put in the dialog, they simply won&#8217;t read it. And if the dialog box has multiple buttons, users will pick them randomly in the hopes of making the dialogs go away.</p>
<p>Even people like you and me, the propeller heads, don&#8217;t necessarily have enough information to know whether we should keep version 4.12.5.101 of nv4vb9.dll or downgrade it to 4.12.4.8.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-221643">
				<div id="div-comment-221643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-221643">
			October 28, 2004 at 5:49 pm</a>		</div>

		<p>The dialog might as well read:</p>
<p>I can&#8217;t figure out what is wrong.  If you answer &quot;Yes&quot; below, your app might work but it might be that no other apps work including explorer and login.  If you answer &quot;no&quot; below, your app probably won&#8217;t work.</p>
<p>Yes / No / [Cancel]</p>
<p>(one of those situations where Cancel should be the default&#8230;)</p>
<p>This is just because software deployment sucks today.  Simplistic answers work for simplistic situations which isn&#8217;t what happens on real world consumer machines.  At the end of the day all the authenticode etc. dialogs might as well be rolled into a single one:</p>
<p>&#8212;</p>
<p>Do you want:</p>
<p>a) that app you just downloaded or bought to work or<br />
<br />b) your system to keep working</p>
<p>a / [b]</p>
<p>&#8212;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-221593">
				<div id="div-comment-221593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-221593">
			October 28, 2004 at 2:18 pm</a>		</div>

		<p>All the information you describe and more was given in the file conflict dialog. The problem isn&#8217;t that the user wasn&#8217;t given enough information. The problem is that the user *doesn&#8217;t have the background knowledge* to make an informed decision.</p>
<p>To a user, the dialog looks like this:</p>
<p>A problem blah blah blah blah blah.</p>
<p>File: blahblah blah<br />
<br />Description: blah blah blah<br />
<br />blah version: blah blah blah<br />
<br />blah blah: blah blah<br />
<br />blah blah: blah blah<br />
<br />blah blah: blah blah</p>
<p>If you blah blah blah blah blah blah blah blah. Otherwise blah blah blah blah.</p>
<p>Yes, No, Yes to All, Cancel</p>
<p>Making the dialog longer just increases the number of blahs.  It&#8217;s like trying to communicate with someone who doesn&#8217;t speak your language by repeating yourself louder and more slowly.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-221833">
				<div id="div-comment-221833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vorn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-221833">
			October 29, 2004 at 1:10 pm</a>		</div>

		<p>okay, you win.  The question shouldn&#8217;t be asked.</p>
<p>If the question DOES need to be asked, however, I think a list is far preferable to asking essentially the same question over and over and over.</p>
<p>Vorn</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-221873">
				<div id="div-comment-221873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.robertmoir.co.uk' rel='external nofollow' class='url'>Robert Moir</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-221873">
			October 29, 2004 at 2:28 pm</a>		</div>

		<p>I don&#8217;t think asking the question over and over is a good model at all. If you want to call that the worst option out of the list of possible compromises then I&#8217;ll agree with you.</p>
<p>Users don&#8217;t read dialogue boxes, users don&#8217;t want to learn how a computer works, and &quot;technical people&quot; are very much in the minority.</p>
<p>And if they answer the question wrong they&#8217;ll consider it your fault for asking it no matter what.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-225513">
				<div id="div-comment-225513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041022-00/?p=37503#comment-225513">
			November 12, 2004 at 4:12 pm</a>		</div>

		<p>You don&#8217;t necessarily have to make the dialog complicated.  The dialog could say e.g. 17 files were newer on your system .. And present three options Keep/Replace/More details (Advanced) .. If you indicate which of keep/replace was recommended and keep the long list off the screen you </p>
<p>1. Don&#8217;t have people picking &#8216;keep&#8217; to some files and &#8216;replace&#8217; for other files solely due to repetitious dialog fatigue<br />
<br />2. You give more information to the user about what is happening, and optionally more control if they need to take advantage of the flexibility (without overwhelming people that aren&#8217;t interested) .. The &#8216;more options&#8217; type of expanding dialog is used in other places, seems like it might be appropriate here.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

