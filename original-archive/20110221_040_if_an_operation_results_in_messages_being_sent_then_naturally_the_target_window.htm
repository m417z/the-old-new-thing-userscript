<html>
<head>
<title>If an operation results in messages being sent, then naturally the target window must be processing messages for the operation to complete</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If an operation results in messages being sent, then naturally the target window must be processing messages for the operation to complete</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 21, 2011 / year-entry #41</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110221-00/?p=11443</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If an operation includes as part of its processing sending messages, then naturally the target window for those messages must be processing messages (or more precisely, the thread which owns the target window must be processing messages) in order for the operation to complete. Why? Because processing messages is the only way a window can...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>If an operation includes as part of its processing sending messages, then naturally the target window for those messages must be processing messages (or more precisely, the thread which owns the target window must be processing messages) in order for the operation to complete. Why? Because processing messages is the only way a window can receive messages!</p>
<p> It's sort of tautological yet not obvious to everyone. </p>
<p> Generally you run into this problem when you try to manipulate a window from a thread different from the one which created the window. Since windows have thread affinity, operations from off-thread typically need to get moved <i>onto</i> the thread which owns the window because that's where the window really "lives". </p>
<p> The window manager will often try to see how much it can do without marshalling to the thread which owns the window, but when message traffic is involved, you are pretty much stuck. Messages are delivered to a window on the thread to which the window belongs, and there's no way around that. </p>
<p> There are subtle ways in which a function called off-thread can result in message traffic. Generally speaking, you should just assume that any operation on a window may generate messages: Even if they don't do so today, they may do so in the future. For example, changing a window's style did not generate message traffic in early versions of Windows, but in Windows&nbsp;95, it began generating <code>WM_STYLECHANGING</code> and <code>WM_STYLECHANGED</code> messages. <a href="http://blogs.msdn.com/oldnewthing/archive/2007/12/28/6882760.aspx#6937173"> This isn't called out explicitly in the documentation for <code>SetWindowLong</code></a> but it's implied by the documentation for <code>WM_STYLECHANGING</code> and <code>WM_STYLECHANGED</code>. </p>
<p> Why isn't there an explicit callout in the documentation for <code>SetWindowLong</code>? At the time the <code>SetWindowLong</code> documentation was originally written, the <code>WM_STYLECHANGING</code> and <code>WM_STYLECHANGED</code> messages did not exist. Therefore the documentation was complete at the time of writing. Circumstances changed elsewhere in the system that had secondary effects on <code>SetWindowLong</code>, but nobody bothered to update the documentation, probably because it didn't even occur to anybody that these effects existed. And then these secondary effects lead to tertiary effects: <code>SetScrollInfo</code> may change the window style to add or remove the <code>WS_HSCROLL</code> or <code>WS_VSCROLL</code> style, which in turn results in a call to <code>SetWindowLong</code> which in turn results in sending the <code>WM_STYLECHANGING</code> and <code>WM_STYLECHANGED</code> messages. Next come quaternary effects on functions like <code>FlatSB_SetScrollInfo</code>, since they call <code>SetScrollInfo</code> as part of their functioning. And so on, and so on. Just tracking down the full ripple effect of those two new messages is probably impossible. </p>
<p> But the root cause of all these ripple effects is operating on a window (particularly <i>modifying</i> a window) from a thread different from the thread that owns the window. Avoid that, and you'll avoid the whole issue of which operations generate messages and which manage to sneak by without needing to send any messages (at least not yet). </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-896343">
				<div id="div-comment-896343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110221-00/?p=11443#comment-896343">
			February 21, 2011 at 8:58 am</a>		</div>

		<p>In other words, why documentation is always incomplete.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-896383">
				<div id="div-comment-896383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt [Visual C++ MVP]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110221-00/?p=11443#comment-896383">
			February 21, 2011 at 10:24 am</a>		</div>

		<p>The glaring exception being calling SendMessage from the thread that owns the window, or is that not considered sending a message?</p>
<p>(Yes, I know that much of the post makes it clear we&#39;re talking about cross-thread messages, but the highly quotable first sentence omits that constraint.)</p>
<div class="post">[<i>That&#39;s already covered by the rule &quot;a thread can receive incoming sent messages if it is waiting for an outbound sent message to complete.&quot; If a thread is sending a message to itself, then the conditions are met. (The incoming and outbound messages happen to be the same message.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896393">
				<div id="div-comment-896393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110221-00/?p=11443#comment-896393">
			February 21, 2011 at 10:35 am</a>		</div>

		<p>Isn&#39;t there a problem even if you send messages from the thread that owns the window? What if you decide to call SetScrollInfo in your WM_STYLECHANGING handler?</p>
<div class="post">[<i>See Ben&#39;s comment. A thread can respond to messages that it sends to itself since it meets the criteria for receiving them. So much for trying to cover advanced topics in the blog&#8230; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-896403">
				<div id="div-comment-896403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110221-00/?p=11443#comment-896403">
			February 21, 2011 at 11:28 am</a>		</div>

		<p>I suppose my comment was a bit off-topic. I meant to say that the fact functions can send undocumented messages can cause trouble even in the same thread. Though in many situations the window manager probably works around recursive calls etc.</p>
<p>&quot;So much for trying to cover advanced topics in the blog&#8230;&quot;</p>
<p>Those messaging and user interface topics are the ones I enjoy most, so keep on sharing them with us!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896433">
				<div id="div-comment-896433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clipboarder Gadget</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110221-00/?p=11443#comment-896433">
			February 21, 2011 at 2:20 pm</a>		</div>

		<p>@rs</p>
<p>Before SetWindowLong wasn&#39;t sending WM_STYLECHANGING messages you couldn&#39;t call SetWindowLong from WM_STYLECHANGING because WM_STYLECHANGING wasn&#39;t invented yet&#8230; If I understand you right&#8230;</p>
<p>But you could have called SetWindowLong for every incoming message on your own window. That&#39;s why I&#39;m quite impressed that that message made it into Windows 95.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-896463">
				<div id="div-comment-896463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miral</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110221-00/?p=11443#comment-896463">
			February 21, 2011 at 7:16 pm</a>		</div>

		<p>Presumably, with access to the source, it wouldn&#39;t have been hard to comprehensively identify the docs that would need to be updated, if not necessarily so to actually do the update. &nbsp;After all, WM_STYLECHANGING could only be generated in response to some SetWindowLong(GWL_STYLE, &#8230;), so any function that calls that would need its help updated accordingly (and then cascade).</p>
<p>The trick lies in recognising that a doc change is needed at the time the new feature is introduced &#8212; which sounds like it should be easy, but often isn&#39;t, especially when the doc team and the development team are separate. &nbsp;(Now where&#39;s that time machine?)</p>
<p>(And do please keep talking about this sort of stuff. &nbsp;It&#39;s fascinating.)</p>
<div class="post">[<i>Okay, let&#39;s try it. Let&#39;s find all the functions that call SetWindowLong(GWL_STYLE, &#8230;). Oh, there are 10,000 of them. Most of them are not public APIs, but that doesn&#39;t preclude them from being called indirectly from a public API. And it&#39;s not just the transitive call closure; you have to do data tracing, too. Say, a function that calls SetWindowLong(GWL_STYLE) is called only conditionally from function X, which is called from function Y only when a certain flag is set. That flag is set by function Z, which is called from a public API. Aha, so the public API needs to be documented as &quot;This may result in WM_STYLECHANGING being sent to the window.&quot; Trick question! The way that the public API calls function Z is in such a way that the code path that sets the flag is never hit. Oh, did I mention that your 10,000 hits didn&#39;t catch all the possible callers? (It didn&#39;t find people who do &quot;int which = GWL_STYLE; SetWindowLong(which, &#8230;).&quot;) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896483">
				<div id="div-comment-896483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110221-00/?p=11443#comment-896483">
			February 21, 2011 at 10:35 pm</a>		</div>

		<p>I agree with Raymond here. Even in our (smaller than Windows :) products, trying to figure out where a certain function is called and from what locations is extremely difficult. And somehow you always manage to miss some places until after it goes to &#39;testing&#39;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-896523">
				<div id="div-comment-896523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110221-00/?p=11443#comment-896523">
			February 22, 2011 at 3:39 am</a>		</div>

		<p>I find the assertion in the title of the post surprising. Are there not fire-and-forget cases where you don&#39;t require that the message is actually received, just that it is sent and if it doesn&#39;t get through &#8211; because the recipient isn&#39;t processing messages &#8211; that&#39;s the recipient&#39;s &quot;too bad&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896533">
				<div id="div-comment-896533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110221-00/?p=11443#comment-896533">
			February 22, 2011 at 5:28 am</a>		</div>

		<p>@Chris &#8211; perhaps the reader is expected to gather that this is specifically about Sending messages, as opposed to Posting messages. SendMessage doesn&#39;t return until the target window procedure has finished processing the message.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-896593">
				<div id="div-comment-896593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110221-00/?p=11443#comment-896593">
			February 22, 2011 at 7:40 am</a>		</div>

		<p>Another can of worms those hidden SendMessage calls open is the fact that those calls also dispatch any queued sent messages from another thread (including messages sent by hidden SendMessage calls). This may cause undesired and undocumented reentrancy.</p>
<p>Unless SendMessageTimeout(,,,SMTO_BLOCK) is used in every case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896623">
				<div id="div-comment-896623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110221-00/?p=11443#comment-896623">
			February 22, 2011 at 8:32 am</a>		</div>

		<p>Of course, prior to Win32, it didn&#39;t really matter if some operation resulted in messages being sent &#8212; the mere fact that your code is executing means that every other window in the system is processing messages.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-896633">
				<div id="div-comment-896633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt [Visual C++ MVP]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110221-00/?p=11443#comment-896633">
			February 22, 2011 at 9:36 am</a>		</div>

		<p>@Raymond: Does the behavior Alex describes (sent messages from other threads get processed) occur when a thread sends its own window a message? &nbsp;I&#39;m pretty sure it does not, contrary to the rule you&#39;ve said applies. &nbsp;(NB: The SendMessage page on MSDN says &quot;If the specified window was created by the calling thread, the window procedure is called immediately as a subroutine.&quot;)</p>
<p>It&#39;s not that you can&#39;t cover advanced topics on your blog, it&#39;s that a few of your readers are familiar enough with the topic to know when there&#39;s even more complexity (or inconsistency) than your explanation accounts for.</p>
<div class="post">[<i>I&#39;m assuming that people who understand the complexity can fill in the details themselves. Remember the Nitpicker&#39;s Corner? (And the inbound sends are processed while waiting, and if you send to yourself there is no wait. But you knew that, so why bring it up?) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896653">
				<div id="div-comment-896653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110221-00/?p=11443#comment-896653">
			February 22, 2011 at 11:35 am</a>		</div>

		<p>Remember kids. Don&#39;t mess with other threads&#39; windows. And everything will be OK. Seriously. &quot;Can of worms&quot; applies completely to cross-thread windowing calls.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-896663">
				<div id="div-comment-896663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt [Visual C++ MVP]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110221-00/?p=11443#comment-896663">
			February 22, 2011 at 11:45 am</a>		</div>

		<p>@Alex: Unless you&#39;re trying to use message passing to simplify parallel programming. &nbsp;Which is a VERY good idea. &nbsp;But then you should use PostMessage, not SendMessage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896713">
				<div id="div-comment-896713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miral</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110221-00/?p=11443#comment-896713">
			February 22, 2011 at 9:48 pm</a>		</div>

		<p>[Oh, did I mention that your 10,000 hits didn&#39;t catch all the possible callers? (It didn&#39;t find people who do &quot;int which = GWL_STYLE; SetWindowLong(which, &#8230;).&quot;) -Raymond]</p>
<p>You could find all functions that call SetWindowLong, and then filter that list by those that also refer to GWL_STYLE. &nbsp;Should catch most of them. &nbsp;(Granted, there are still potential pathological cases, but they&#39;re unlikely to occur outside of contrived examples &#8212; at least in this case.)</p>
<p>But your response basically agrees with what I was trying (perhaps not very well) to say: identifying the docs that *might* need to be updated would be relatively easy &#8212; figuring out which of those actually need to be updated and in which way is the tricky bit.</p>
<p>It&#39;s much easier (from an application perspective) to follow Alex &amp; Ben&#39;s advice and avoid using SendMessage from any thread other than the one that owns the window. &nbsp;Makes life much simpler. :)</p>
<div class="post">[<i>You&#39;re assuming that the SetWindowLong and GWL_STYLE are in the same function.</p>
<pre>void UpdateBits(int nIndex, LONG lMask, LONG lValue)
{
 LONG lCurrent = GetWindowLong(m_hwnd, nIndex);
 LONG lNew = (lValue &amp; lMask) | (lCurrent &amp; ~lMask);
 SetWindowLong(m_hwnd, nIndex, lNew);
}
UpdateBits(GWL_STYLE, WS_CAPTION, 0);
</pre>
<p>This is hardly a contrived example. UpdateBits is actually a quite handy function. But we&#39;re still in basic agreement: Identifying all the functions that are affected is not practical in a large code base. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-897473">
				<div id="div-comment-897473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110221-00/?p=11443#comment-897473">
			February 26, 2011 at 12:35 pm</a>		</div>

		<p>It&#39;s fine to argue that keeping documentation up to date is a tough task, but it is now known by Microsoft employees that calling SetWindowLong will generate WM_STYLECHANGING and WM_STYLECHANGED messages and the official documentation for SetWindowLong still doesn&#39;t mention this. &nbsp;(Though, it is mentioned in the Community Content section.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

