<html>
<head>
<title>Don't just grab the foreground window and host UI on it</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Don&#8217;t just grab the foreground window and host UI on it</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 27, 2007 / year-entry #274</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>58</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">I was asked to look at an application compatibility bug in a program from a major vendor. But that's actually irrelevant; what I'm writing about today has nothing to do with application compatibility. That's just what drew my attention to the program in the first place. At some point during the install, the setup program...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>I was asked to look at an application compatibility bug in a program from a major vendor. But that's actually irrelevant; what I'm writing about today has nothing to do with application compatibility. That's just what drew my attention to the program in the first place.</p>
<p> At some point during the install, the setup program encountered an error and wanted to display an error message. When it called <code>DialogBox</code> to display the error message, it didn't pass the setup program's main window as the <code>hwndParent</code>. Instead it passed <code>GetForegroundWindow()</code>. They chose the wrong owner for modal UI. (I've also seen people try <a href="http://groups.google.com/groups?selm=1137555956.884180.219270@g49g2000cwa.googlegroups.com"><code>GetTopWindow(0)</code></a>.) </p>
<p> It so happened that the foreground window was Task Manager, since I had switched to Task Manager to look at various statistics of their installer as it ran. </p>
<p> I hope you can see where this is going. </p>
<p> They passed Task Manager as their modal owner, and since modal dialog boxes disable the owner, they ended up disabling Task Manager. (Meanwhile, their main setup program remained enabled, so I could have clicked on the Cancel button if I wanted to, <a href="http://blogs.msdn.com/oldnewthing/archive/2005/02/24/379635.aspx"> which would have led to the "stack without support" problem</a>.) </p>
<p> Now I can't terminate their broken setup program from Task Manager since they <strong>inadvertently disabled Task Manager</strong>. </p>
<p> But why did the programmers choose to use the foreground window anyway? </p>
<p> One possibility is the programmer's version of <a href="http://blogs.msdn.com/oldnewthing/archive/2007/02/26/1763692.aspx"> the politician's fallacy</a>. </p>
<ul>
<li>We must pass a window. </li>
<li>The foreground window is a window. </li>
<li>Therefore, we must pass it. </li>
</ul>
<p> Another possibility is that they did this on purpose in order to ensure that their error message steals focus. Because their program is the most important program in the history of mankind. </p>
<p> Unfortunately, I see this a lot. People who think their program is so important that they will abuse the rest of the system in order to get what they want instead of just waiting their turn. Of course, these people also fail to realize that setting a window as the owner for UI creates its own problems. As already noted, you disabled a random program. What's more, you've now attached the two input queues and tied your fates together. If the program that owns the foreground window stops responding to messages, then your program will also stop responding to messages. </p>
<p> But primarily it's just rudeness. You took somebody else's window and started acting as if you owned the place. It's like looking up somebody's address in the phone book and using it as your own. That's not your house, and that's not your window. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (58)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-531033">
				<div id="div-comment-531033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://Donthaveone' rel='external nofollow' class='url'>Rune</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531033">
			July 27, 2007 at 10:32 am</a>		</div>

		<p>Hilarious! &#8230;That&#8217;s not your house, and that&#8217;s not your window. Classic. Thanks for the laugh</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531043">
				<div id="div-comment-531043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531043">
			July 27, 2007 at 10:47 am</a>		</div>

		<p>I&#8217;ve seen these mistakes in the making. &nbsp;I think Raymond is attributing to malice what was probably incompetance (or ignorance). &nbsp;The devs probably found themselves in a place where they needed to display an error and didn&#8217;t have the window handle of the installer&#8217;s main window. &nbsp;The architecture was probably too complex to pass the parameter all the way down the call stack (or perhaps even to another process).</p>
<p>Somebody probably stumbled upon the idea of using GetForegroundWindow and didn&#8217;t think it through. &nbsp;99% of users probably don&#8217;t switch tasks during an install, so it might not have occurred to the devs that the foreground window might be anything other than their application. &nbsp;Ignorant, sure, but not necessarily arrogant.</p>
<p>Assuming that fixing the architecture wasn&#8217;t feasible at the time, what would have been the right way to get the proper window handle? &nbsp;GetActiveWindow? &nbsp;FindWindow?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531053">
				<div id="div-comment-531053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CGomez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531053">
			July 27, 2007 at 10:57 am</a>		</div>

		<p>Not to mention that many times the install would not encounter an error, and the rude code would not run.</p>
<p>I think most developers I have ever encountered don&#8217;t really understand how Windows works&#8230; at all (not asking for Raymond&#8217;s level of expertise, even). &nbsp;If you described the behavior above to them, they would simply say: &quot;That&#8217;s a bug in Windows. &nbsp;It can&#8217;t recognize that I want my own foreground window.&quot; or &quot;There should be an easier API to get my own top window, then&quot; or &quot;Windows is too complicated because MSFT is a monopolist.&quot;</p>
<p>I really don&#8217;t think I&#8217;m making any of these answers up&#8230; and the list is not complete.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531063">
				<div id="div-comment-531063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.kcwatch.net' rel='external nofollow' class='url'>Ray Kinsella</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531063">
			July 27, 2007 at 11:27 am</a>		</div>

		<blockquote><p>
  &gt; I think Raymond is attributing to malice what was probably incompetance (or ignorance). &nbsp;
</p></blockquote>
<p>I would agree with Adrian 100%, having written a few programs when I started out that where all modal and stole window focus from everywhere. I approached the development like my software was only software that would need to run on the machine, in retrospect it was a combination of pressure to deliver and incompetance that did it.</p>
<p>Would I do it today, hell no!</p>
<p>Chen is 100% correct, its damn rude!/</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531073">
				<div id="div-comment-531073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe Bruno</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531073">
			July 27, 2007 at 11:28 am</a>		</div>

		<p>Under what circumstances is it a Good Thing for one program to use another program&#8217;s window as the parent for DialogBox?</p>
<p>I&#8217;m curious, because I can&#8217;t think of any possible case; and yet, if there weren&#8217;t, there would have been nothing to stop MS disallowing this usage (eg. silently converting the window handle to NULL in this case). The general MS strategy seems to be to preserve potential bug-causing scenarios if the correct behaviour of an application might depend on them. This is good; but I&#8217;m wondering what &#8220;correct behaviour&#8221; would depend on cross-process DialogBox().</p>
<div class="post">[<i>Consider two programs which are working together to display what appears to the user as one application. This happens a lot more than you think. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-531093">
				<div id="div-comment-531093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531093">
			July 27, 2007 at 11:40 am</a>		</div>

		<p>In general, when you call DialogBox, you&#8217;re doing it in response to some event that you&#8217;ve received on a particular window. The obvious window to pass to DialogBox/MessageBox as the owner for the dialog is the window that received the event!</p>
<p>If you have a worker thread doing the work while your UI thread is showing a progress window of some sort, you have to have the window handle of the progress window to inform it of progress. Well, if you&#8217;ve programmed it sanely, you do &#8211; you call PostMessage with a custom window message to inform it of progress, and when the process is complete. If you need to show an error, you send a message back to the progress window that tells it to raise a message box.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-531103">
				<div id="div-comment-531103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531103">
			July 27, 2007 at 11:44 am</a>		</div>

		<p>@Adam: unfortunately most of the people who have these problems would never open the book.</p>
<p>Books I would recommend to anyone who actually wanted to learn the technology rather than just guess: &quot;Programming Windows&quot; (Petzold), &quot;Programming Applications for Microsoft Windows, 4th Edition&quot; (Richter), &quot;Windows Internals, 4th Edition&quot; (Russinovich &amp; Solomon). If you&#8217;re going to write a server application, also read &quot;Programming Server-Side Applications for Microsoft Windows&quot; (Richter &amp; Clark). All very useful if you&#8217;re going to be writing .NET applications too, because you still have Windows underneath &#8211; Windows Forms largely uses the standard Windows controls and common controls library.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531113">
				<div id="div-comment-531113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob H</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531113">
			July 27, 2007 at 12:10 pm</a>		</div>

		<p>I see this is an inexperience thing. Hey, my installer&#8217;s running, so that&#8217;s what the user is looking at, right? They wouldn&#8217;t be running the installer if it weren&#8217;t on top. (Except for all the exceptions!) I would have made the same mistake if you asked me to write an installer two years ago. Heck, I might have made the same mistake next week if I hadn&#8217;t been reading this.</p>
<p>I won&#8217;t argue that the books cited aren&#8217;t good and useful but you can&#8217;t just read them and come out an expert. You have to read, write programs for practice, and make mistakes to gain experience and eventually write less-buggy programs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531123">
				<div id="div-comment-531123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.patentlystupid.com' rel='external nofollow' class='url'>Richard Ahlquist</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531123">
			July 27, 2007 at 12:11 pm</a>		</div>

		<p>Arrg I can remember back during the 98 beta when it first came up in the beta newsgroups about disabling the ability to steal focus in the OS altogether. Ahh it was a grand dream. Nothing ticks me off worse than to be typing away at 80wpm and blammmo some app has to toss up a dialog right in the middle of some important point. Let alone when your blissfully coding along and this happens, since a lot of the time I write and code with my eyes shut (touch typing is grand) then I don&#8217;t always even know its happened. That said, I guess I shouldn&#8217;t be typing up a 30 line vb or vfp utility while installing software..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531133">
				<div id="div-comment-531133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Schend</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531133">
			July 27, 2007 at 12:12 pm</a>		</div>

		<blockquote><p>
  Somebody probably stumbled upon the idea of</p>
<p>  using GetForegroundWindow and didn&#8217;t think it</p>
<p>  through. &nbsp;99% of users probably don&#8217;t switch</p>
<p>  tasks during an install,
</p></blockquote>
<p>Calling BS on that one. I want to see the raw data here.</p>
<p>Installers are long and slow. There&#8217;s no way in hell 99% of people stop everything they were doing to wait for the installer to finish it&#8217;s long and slow process. &quot;Sorry, Bob, I didn&#8217;t respond to your IM because the World of Warcraft installer was only on disk 2, and god forbid I switch apps to reply to you.&quot;</p>
<p>Unless you&#8217;ve done usability tests that show this, you (the programmer of this installer) should make NO assumptions about what users do while your app is running.</p>
<p>One of my hugest pet peeves is installer programs that create a giant window that takes over the whole screen to show a teeny progress bar in the middle. Actually, one of my hugest pet peeves is that all programs don&#8217;t just use .msi installers which work well all the time instead of their crazy third-party installers that don&#8217;t.</p>
<p>Another huge pet peeve is applications that steal focus. Not going to name name, as per blog rules, but I installed a anti-virus product recently that stole focus from my IM windows three times in a row to inform me that it was updating itself. Sure, anti-virus updates are important, but they&#8217;re not THAT important. It could easily have been a notification manager thing. (Tons of apps do this&#8230; try putting a DVD in an OS X machine while typing something. It&#8217;ll steal your focus twice, with just enough gap in-between to switch back to the window you want.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531163">
				<div id="div-comment-531163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PeterK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531163">
			July 27, 2007 at 12:41 pm</a>		</div>

		<p>Of course, this begs the question of why the installer dialog is able to disable another app in the first place. Isn&#8217;t it part of the responsibility of the OS to give programs an isolated space to work? I&#8217;m sure there&#8217;s lots of Win16 history and compatibility that limits the options, but then let&#8217;s give the poor programmer a break&#8211;it may not be ignorance or malice but just struggling with design flaws of the environment.</p>
<div class=post>[<i>There are legitimate reasons for one program to disable another program&#8217;s window (e.g. as I noted in a previous comment). <a href="http://blogs.msdn.com/oldnewthing/archive/2005/10/21/483438.aspx" rel="nofollow">Windows assumes that programmers know what they are doing</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531173">
				<div id="div-comment-531173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Skip</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531173">
			July 27, 2007 at 12:42 pm</a>		</div>

		<p>This is actually a subset of the whole &#8216;my application is the most important thing in the world&#8217; class of UI problems.</p>
<p>User applications should force themselves to the foreground, approximately never. &nbsp;</p>
<p>OS applications should only force themselves to the foreground in the case of critical notifications.</p>
<p>And in any case, if you force yourself to the foreground, don&#8217;t put any one-key shortcut keys or default action on the dialog.</p>
<p>This is probably my biggest pet peeve in the XP UI. &nbsp;I&#8217;m not running vista anywhere yet so I don&#8217;t know if that&#8217;s changed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531203">
				<div id="div-comment-531203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://divmod.org/' rel='external nofollow' class='url'>Allen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531203">
			July 27, 2007 at 1:03 pm</a>		</div>

		<p>How long until we get serious, as a profession, about building systems that don&#8217;t allow applications to stomp all over each other and core functionality in this fashion?</p>
<div class=post>[<i>If you prevent programs from doing stupid things, then you also prevent them from doing clever things. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531223">
				<div id="div-comment-531223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Diastrophism</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531223">
			July 27, 2007 at 1:25 pm</a>		</div>

		<p>I vote ignorance. The programmer needed a window handle but did not have one handy (deep in a call stack or InstallScript) and thought that the foreground window must be the installer &#8211; wrong answer.</p>
<p>The deeper problem is that it is too easy to get a reference to a different application and mess it up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531233">
				<div id="div-comment-531233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://http' rel='external nofollow' class='url'>Myron A. Semack</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531233">
			July 27, 2007 at 1:27 pm</a>		</div>

		<p>Maybe I just don&#8217;t understand the issue, but isn&#8217;t this a security issue for the Task Manager? &nbsp;I would think that if an application can interfere with Task Manager, it becomes very difficult to kill a misbehaving program. Of course, at that point the user has already run the offending program, so the battle is already somewhat lost.</p>
<p>Or is there something else I&#8217;m missing?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531243">
				<div id="div-comment-531243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KenW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531243">
			July 27, 2007 at 1:28 pm</a>		</div>

		<p>Adam: &quot;So, would MS really lose that many sales of Visual Studio by selling it for $330 and including a decent tutorial &#8211; Programming Windows &#8211; with it?&quot;</p>
<p>Expecting MS to include a book to teach you to program makes as much sense as expecting the manufacturer of a woodworking lathe to send a trainer to your workshop to show you how to turn a piece of wood into a table leg. Or the rifle manufacturer to send a marksman to your house to make sure you know how to shoot safely.</p>
<p>Just because you provide the tools doesn&#8217;t mean you have to teach someone to use them. The end-user has that responsibility.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531253">
				<div id="div-comment-531253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Dunn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531253">
			July 27, 2007 at 1:47 pm</a>		</div>

		<p>ATL makes this mistake all too easy to do when you call DoModal. The param to DoModal is the window to use as the dialog&#8217;s owner, and it defaults to GetActiveWindow(). If you just write &quot;DoModal()&quot; it will usually work, except in the cases when it doesn&#8217;t.</p>
<p>I ran into this a while ago, I had a worker thread doing some long operations (on the order of minutes), and if it hit an error, it posted a message to the main thread saying &quot;show error message #123 now&quot;. The trouble was that the user probably minimized the app or switched away in the intervening time, and the call to DoModal() could end up using some other app&#8217;s window for the owner. Since I started in MFC, I was used to calling DoModal() with no params and having it Just Work. Not so in ATL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531313">
				<div id="div-comment-531313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531313">
			July 27, 2007 at 2:43 pm</a>		</div>

		<p>KenW: Some manufacturers do, some don&#8217;t. My Whirlpool oven, for example, came with some excellent instructions on how to bake, my most recent camera had some really good information on how to take pictures.</p>
<p>Raymond&#8217;s life might be a lot easier (in ten years) if more of the documentation clearly stated which routines were commonly used and which were uncommon, which were &quot;safe&quot; and which were &quot;dangerous&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531323">
				<div id="div-comment-531323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RSC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531323">
			July 27, 2007 at 3:05 pm</a>		</div>

		<p>@Mike Dunn: On its own, the call to GetActiveWindow was not the problem. &nbsp;From the MSDN documentation:</p>
<p>&quot;The GetActiveWindow function retrieves the window handle to the active window attached to the calling thread&#8217;s message queue.&quot;</p>
<p>So as you can see GetActiveWindow does not return a window from another application. &nbsp;It may however return an unexpected window (or none) from your application. &nbsp;It all depends on which thread you call it on.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531343">
				<div id="div-comment-531343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deadnode.org/' rel='external nofollow' class='url'>James</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531343">
			July 27, 2007 at 3:14 pm</a>		</div>

		<p>Myron: No, it isn&#8217;t a security issue &#8211; Raymond had an entry about this not many days ago. When you run the installer, you&#8217;re trusting that application to &nbsp;make changes to your system, which might well include disabling (or indeed replacing: at least one free MS tool we may or may not be allowed to name offers this facility) taskmgr. For that matter, the installation could involve replacing some or all of the operating system (think service pack or OS upgrade)&#8230;</p>
<p>One exception to that is that if the tool is able to disable the Secure Attention Key (aka ctrl-alt-del), you may have violated the security model (to prevent imposters taking the place of the login screen) &#8211; this is why virtual machine software can&#8217;t normally intercept ctrl-alt-del to pass to virtual machines instead of the host: the OS won&#8217;t allow them to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531353">
				<div id="div-comment-531353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Hensley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531353">
			July 27, 2007 at 3:24 pm</a>		</div>

		<p>CGomez, don&#8217;t forget that old staple &quot;Microsoft&#8217;s apps aren&#8217;t screwed up like my apps because they use witchcraft^H^H^Hsecret APIs.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531373">
				<div id="div-comment-531373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531373">
			July 27, 2007 at 4:20 pm</a>		</div>

		<blockquote><p>
  Nothing ticks me off worse than to be typing away at 80wpm and blammmo some app has to toss up a dialog right in the middle of some important point.
</p></blockquote>
<p>The recent irritation was the system update stuff on my laptop (corp install, etc). MS has decided to pop up a dialog and steal my focus out of the blue, and it&#8217;s highly likely that I&#8217;ll be typing (like now) when that happens. Hit the wrong key and the system reboots.</p>
<p>What&#8217;s needed is, as you say, removing the ability to steal focus. This is what makes X style window managers so cool &#8211; you demand focus and the manager slaps you down.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531383">
				<div id="div-comment-531383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531383">
			July 27, 2007 at 4:34 pm</a>		</div>

		<p>There should have been a flag on every window/process which could prevent the window from getting rogue children from other processes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531393">
				<div id="div-comment-531393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marty</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531393">
			July 27, 2007 at 4:38 pm</a>		</div>

		<p>Adam: Microsoft does offer an instruction manual, it&#8217;s called MSDN Library and it includes Visual Studio documentation. &nbsp;It&#8217;s available online:</p>
<p><a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/library/" rel="nofollow">http://msdn2.microsoft.com/library/</a></p>
<p>and as a free download:</p>
<p><a rel="nofollow" target="_new" href="http://www.microsoft.com/downloads/details.aspx?FamilyID=b8704100-0127-4d88-9b5d-896b9b388313&amp;DisplayLang=en" rel="nofollow">http://www.microsoft.com/downloads/details.aspx?FamilyID=b8704100-0127-4d88-9b5d-896b9b388313&#038;DisplayLang=en</a></p>
<p>I really can&#8217;t believe it could take someone ages to learn the basics of Windows programming if they serious about learning and not just doing it as a hobby. &nbsp;Maybe that argument was valid 15 years ago, but with the amount of information available (for free) on the internet your argument is pathetic. &nbsp;You can lead a horse to water, but you can&#8217;t make him drink.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531403">
				<div id="div-comment-531403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Dimov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531403">
			July 27, 2007 at 5:23 pm</a>		</div>

		<p>[There are legitimate reasons for one program to disable another program&#8217;s window (e.g. as I noted in a previous comment). Windows assumes that programmers know what they are doing. -Raymond]</p>
<p>A system that trusts its users to not misbehave can never be secure. No amount of articles educating programmers to not abuse the OS will help. If it can be abused, it will be.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531423">
				<div id="div-comment-531423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531423">
			July 27, 2007 at 5:49 pm</a>		</div>

		<blockquote><p>
  I really can&#8217;t believe it could take someone ages to learn the basics of Windows programming if they serious about learning and not just doing it as a hobby.
</p></blockquote>
<p>The thing you&#8217;re missing is that some people are doing this as a side job for their office or that they don&#8217;t really care &#8211; it works, sort of, so why waste time reading books? MS people tend to be driven and care about personal development. In fact, most people I&#8217;ve met professionally are like this, but there are always George Costanzas in the world, and some of them write code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531083">
				<div id="div-comment-531083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531083">
			July 27, 2007 at 11:37 am</a>		</div>

		<p>CGomez &gt; I think that might come down to most Windows devs not being able to find decent documentation on how to write Windows programs from scratch. (The Visual Studio wizards probably have something to do with this, but that&#8217;s another beef).</p>
<p>Yes, MSDN has a lot of reference material. But a good tutorial on how everything works? I&#8217;ve never really found one in the MSDN bits that come with VS. Not one goes through everything and is easy to read. If it&#8217;s there, it&#8217;s completely lost amongst all the other cra^H^H^Hdocumentation that&#8217;s there, and needs (IMHO) to be made a *lot* more prominent.</p>
<p>So, what is a good book on how it all works? Scratch that, what is the *best* book on how Windows works, that all Windows programmers should start to read before they write their first line of Windows code?</p>
<p>(If I&#8217;m missing something in MSDN that&#8217;s been available in most versions of VC/VS released, please someone shout loud. If anyone knows where I should have been looking to already know without doubt what the best book is for learning Win32 programming, also shout loud)</p>
<p>I do keep hearing that &quot;Programming Windows&quot; by Charles Petzold is pretty good. Which is published by MS Press. So, how about MS supply a dead-tree copy of PW5 with each copy of Visual Studio. List price is $59.99[0], but from the links on that page it&#8217;s available for as little as $35.99. Assuming that MS are still making quite a bit on that, they could probably write it off for $30 or even less if they bundled it with something else.</p>
<p>So, how much is Visual C? Um, OK, Visual Studio standard edition? Well, it looks to me like about $300[1]</p>
<p>So, would MS really lose that many sales of Visual Studio by selling it for $330 and including a decent tutorial &#8211; Programming Windows &#8211; with it? Or even lost that much money selling the combination for &#163;300 and taking a &#163;30 hit on each copy of VS?</p>
<p>And do you really think it wouldn&#8217;t make much difference to the general understanding of windows, and therefore the general level of competence of windows programmers?</p>
<p>[0] <a rel="nofollow" target="_new" href="http://www.microsoft.com/mspress/books/2344.aspx" rel="nofollow">http://www.microsoft.com/mspress/books/2344.aspx</a></p>
<p>[1] <a rel="nofollow" target="_new" href="http://www.microsoft.com/products/info/product.aspx?view=22&amp;pcid=760b0bb0-dd48-425e-ab41-653b5b60216e&amp;crumb=catpage&amp;catid=515c9859-958b-4433-b4f9-91f37258ca2f#HowToBuy" rel="nofollow">http://www.microsoft.com/products/info/product.aspx?view=22&#038;pcid=760b0bb0-dd48-425e-ab41-653b5b60216e&#038;crumb=catpage&#038;catid=515c9859-958b-4433-b4f9-91f37258ca2f#HowToBuy</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531453">
				<div id="div-comment-531453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531453">
			July 27, 2007 at 7:24 pm</a>		</div>

		<p>I agree, it&#8217;s insane that the current desktop is open season to any app which wants to mess around.</p>
<p>So what if there are legitimate uses? Do you remove the lock from your front door just because your friends visit frequently?</p>
<p>There needs to be at least some simple defense that would prevent these n00bs from making these mistakes in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531193">
				<div id="div-comment-531193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531193">
			July 27, 2007 at 1:01 pm</a>		</div>

		<p>Mike &gt; Really? I had that problem for ages when starting to write windows programs, and it took me ages to find out about PW and some of the other good books. Most of the book shops near me were mostly stocked with &quot;Learn MFC programming in 21 days&quot; or something like that, a few of which turned out to be awful. After some suggestions from other places that also turned out to be bad, I pretty much gave up.</p>
<p>I myself ended up, for quite some time, just shotgun debugging and shotgun *writing* to try and figure out how to get something barely working. With only an API reference, but no good guidance on how to string things together or how stuff was actually meant to *work*, I ended up doing stuff like the above for a while.</p>
<p>And a lot of programmers at other companies I worked for were much the same. The thorough tutorials or background information just never seemed to be around.</p>
<p>I don&#8217;t know. Does that spark some recognition with anyone else who reads this blog? Or did you all figure out which other good resources you needed to get hold of straight away, without spending $$$ on some really useless books?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531213">
				<div id="div-comment-531213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Markus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531213">
			July 27, 2007 at 1:21 pm</a>		</div>

		<p>I agree that there exist programs that need to grab other programs&#8217; windows and operate on them.</p>
<p>However, this is an exceptional case &#8212; no programm needs to *accidentially* grab another program&#8217;s window. Also, it poses a large security risk.</p>
<p>This is a place where an ACL system is needed. To cooperating programs should be able to grant each other access to their windows; a &quot;super user programm&quot; (such as task manager, or a debugger) might have special &quot;root rights&quot;. But a garden variety end user application should never have such rights, nor need them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531283">
				<div id="div-comment-531283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JRM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531283">
			July 27, 2007 at 2:12 pm</a>		</div>

		<p>@KenW: I don&#8217;t think anybody&#8217;s arguing that Microsoft would somehow be *obliged* to teach people how to program, just that the world might be that much better off if they included a book with VS. That&#8217;s not even in the same league as hiring personal instructors.</p>
<p>And I&#8217;m only half-kidding if I say that an inept programmer can do more damage with Visual Studio than an inept rifleman can with his rifle. It&#8217;s certainly true if we&#8217;re only considering economic damage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531333">
				<div id="div-comment-531333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531333">
			July 27, 2007 at 3:10 pm</a>		</div>

		<p>I don&#8217;t want them to teach me how to program, I&#8217;d figured that one out for command line programs some time before. But how Windows works? I&#8217;d have thought that might be kind of important.</p>
<p>Anyway, it must be an odd world you live in where nothing comes with an instruction manual. Did you last mobile phone not come with one? Did your DVD player? What about your car? And the interfaces to those are a couple of orders of magnitude simpler than the Windows API I&#8217;d figure.</p>
<p>*shrug* Guess it is just me then.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531473">
				<div id="div-comment-531473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531473">
			July 27, 2007 at 11:26 pm</a>		</div>

		<p>I think if those developer don&#8217;t bother search the net for the materials, does it help even if you deliver the right book directly to their home. I bet most of them will at best read a few pages, then put it on the bookshelves and never bother to read it again (the reference of the book&#8217;s existence automatically be GC-ed in their main memory).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531503">
				<div id="div-comment-531503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531503">
			July 28, 2007 at 6:15 am</a>		</div>

		<blockquote><p>
  &gt;&gt; If the program that owns the foreground window stops responding to messages, then your program will also stop responding to messages.
</p></blockquote>
<p>Can anyone explain this to me a little bit more? I believe both windows will be in different threads with different message pumps, so blocking parent messsage pump should not affect popup&#8217;s pump.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531513">
				<div id="div-comment-531513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">stacdab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531513">
			July 28, 2007 at 7:55 am</a>		</div>

		<p>not for nothing, but what&#8217;s the point of allowing one app to stall another? &nbsp;this is a problem in the dialog api and the windows api in general. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531533">
				<div id="div-comment-531533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Humane</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531533">
			July 28, 2007 at 12:04 pm</a>		</div>

		<blockquote><p>
  &gt;&gt;&gt; [If you prevent programs from doing stupid things, then you also prevent them from doing clever things. -Raymond]
</p></blockquote>
<p>Can you say that again please!!!</p>
<p>I&#8217;m fed up with a world that fights that stated ideal.</p>
<p>I cannot coun&#8217;t the number of times I&#8217;ve written &quot;Rude Code&quot;, and I am happy to accept it. If it puts me in the bad books I&#8217;ll happily accept that.</p>
<p>I don&#8217;t do it on purpose. In fact I hope that I&#8217;m able to remove the majority of examples before they become a problem, but I can&#8217;t guarantee it to anyone. Not least myself.</p>
<p>There is one precious thing in life, not just software, and that is the possiblility of an open outcome. It&#8217;s too easy to constrain anything in life to a set of closed outcomes. That generic fight is worth significant hardship.</p>
<p>What impresses me most is that the statement comes from a significant representative of Microsoft.</p>
<p>The point of being able to stall another app, is that until you have the need, you don&#8217;t know that it&#8217;s a clear case for prevention.</p>
<p>Certainly if you have a bunch of processes that operate in synchronisation with a master process, an ideal way to terminate those processes is to halt them and clean them up from the outside. Were all data associated with shared memory this would be perfectly feasible, and IMO valid. If said process were composed of multiple threads, it would actually represent a very fast, efficient and safe approach to the exit problem.</p>
<p>One could argue that there is a similar case for the protection of global memory, with a process scope. My rationale for being against such an uncontolled situation is simple. If you are attempting to debug a process, then there is probably something wrong with it. If there is something wrong with the code being debugged, has it damaged the debugger?</p>
<p>Those who have developed on embedded computers, with merely a hardware bootloader for company will know how difficult it can be to debug a system where the program counter has become compromised.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531543">
				<div id="div-comment-531543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Steward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531543">
			July 28, 2007 at 12:06 pm</a>		</div>

		<p>Raymond&#8217;s being psychic again &#8211; I first encountered this phenomenon just this week, while debugging a well known UK-based accounting system.</p>
<p>My guess is it&#8217;s from some sample code, since I can&#8217;t see anything to stop people passing NULL as the hWnd to MessageBox. &nbsp;Or does passing NULL make people uneasy?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531563">
				<div id="div-comment-531563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.iguanademos.com/Jare' rel='external nofollow' class='url'>Jare</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531563">
			July 28, 2007 at 2:51 pm</a>		</div>

		<p>[quote]that applies to any parameter to any function, not just<br />
window handles. Should we add that to all functions? &#8220;HeapFree: Since<br />
this function frees the memory pointed to by the lpMem parameter, the<br />
pointer you pass here must be one for which all existing references<br />
belong to code that understands that the memory will no longer be<br />
valid.&#8221;[/quote]</p>
<p>Can you pass other processes&#8217; handles to HeapFree()? NOW you are scaring me.</p>
<p>I must agree with others here. I&#8217;ve been programming Windows since<br />
3.0, and I always assumed that you can only mess with your own handles;<br />
at most, with the handles from other threads in your same process.<br />
Being light in parameter validation and letting apps do very funky<br />
things with their own resources is fine (if you want to live the rest<br />
of your life in backwards compatibility hell), but when you let one app<br />
mess with resources owned by another, any expectations of security are<br />
gone.</p>
<div class="post">[<i>If they are being intentionally malicious, then<br />
that won&#8217;t stop them. They&#8217;ll just inject code into the target process<br />
and do it there. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531573">
				<div id="div-comment-531573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531573">
			July 28, 2007 at 4:50 pm</a>		</div>

		<p>&lt;i&gt;If you prevent programs from doing stupid things, then you<br />
also prevent them from doing clever things. -Raymond&lt;/I&gt;</p>
<p>But you also prevent them from doing malicious things. You assume<br />
that every programmer has the best intentions. The amount of virii,<br />
especially for the Win32 platform, shows differently. An application<br />
should at least need admin privileges for accessing windows that don&#8217;t<br />
belong to them, or at least for windows that belong to the OS.</p>
<div class="post">[<i>You&#8217;re all <a href="http://blogs.msdn.com/oldnewthing/archive/2005/10/21/483438.aspx" rel="nofollow">missing historical perspective</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531553">
				<div id="div-comment-531553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531553">
			July 28, 2007 at 1:28 pm</a>		</div>

		<p>&#8220;Adam: Microsoft does offer an instruction manual, it&#8217;s called MSDN Library and it includes Visual Studio documentation. &nbsp;It&#8217;s available online:&#8221;</p>
<p>Um, yeah, I am aware of that, and I did already point it out.</p>
<p>But, as I said, I couldn&#8217;t find a decent tutorial in MSDN on how the different bits of the Windows API fit together, or enough on what it does behind the scenes to be able to figure out *why* some naieve approaches to some problems (as detailed many times by Raymond in this very blog) won&#8217;t work.</p>
<p>API references are sucky tutorials.</p>
<p>Taking this example, knowing what GetForegroundWindow() or GetTopWindow() do, what arguments they take and what their return values are, as documented in the API reference, is not enough info to know *when* to (and when *not* to) use them.</p>
<p>So, if such a tutorial does exist in the copy of MSDN that comes with VS, one that takes you through the basics of Windows programming from the message loop onwards, without going through MFC and the application wizards that hide all that away, I never found it. Please, where is it? How are you supposed to find it?</p>
<p>And is it really that easy to read on the computer screen where you&#8217;re trying to code as you follow it, instead of being open on your desk next to the keyboard?</p>
<div class="post">[<i>The issue isn&#8217;t GetForegroundWindow() or GetTopWindow(). It&#8217;s grabbing <u>some window that doesn&#8217;t belong to you</u> and doing UI with it. If anywhere, the remark would be in MessageBox, DialogBox, any function that accepts a window parameter, with something like &#8220;Note: Since this function will do stuff to the window parameter you pass here, it goes without saying that the window you pass here must be one that is prepared to have those things done to it.&#8221; But that applies to any parameter to any function, not just window handles. Should we add that to all functions? &#8220;HeapFree: Since this function frees the memory pointed to by the lpMem parameter, the pointer you pass here must be one for which all existing references belong to code that understands that the memory will no longer be valid.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531613">
				<div id="div-comment-531613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531613">
			July 29, 2007 at 12:10 am</a>		</div>

		<p>aahhhg.. thousands of programs are doing this. &nbsp;It works most of the time because the command that launched the dialog box was started by a mouse click, or a keyboard shortcut which implies that the main app window is the foreground window.</p>
<p>I think this creeps up in all large applications that where dialog boxes are implemented in DLLs by various teams.</p>
<p>If I remember correctly, I can also happen in MFC when the module state is NULL or something of that sort, in which case MFC itself calls GetForegroundWindow for AfxGetMainWnd()</p>
<p>The code is wrong, not rude, but many of the scenario when it fails in common apps falls into edge case category. &nbsp; I&#8217;d be more at ease however if the default behaviour of the API was to return HWND for the current process only, and the apps that really need HWND from other potentially other processes would have to be forced to use another API that is specifically just for that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531653">
				<div id="div-comment-531653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deadnode.org/' rel='external nofollow' class='url'>James</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531653">
			July 29, 2007 at 2:01 pm</a>		</div>

		<p>&#8216;Aargh&#8217;: Requiring admin privileges might sound reasonable to you (aside from the problem that any Win 95/98/Me app will have been developed with no concept of &#8216;admin&#8217; rights in the first place) &#8211; until you think about any sort of process interaction. Automation tools? Accessibility apps like screen readers? Remote control tools?</p>
<p>Even wearing my non-developer hat I&#8217;ve had to interact programmatically with windows which weren&#8217;t my own (installing printer drivers, for one thing).</p>
<p>Not to mention that a lot of inter-program communication takes places via &#8220;windows&#8221; &#8211; not visible ones, necessarily, but still window messages and handles. It might be interesting to try disabling inter-process window messages for a few minutes, just to see what happens &#8211; but I doubt you&#8217;d want to try using the resulting system!</p>
<div class=post>[<i>There&#8217;s a program you use every day that requires access to other processes&#8217; windows: The taskbar. (In order to move focus between apps when you click on their buttons, among other things.) Or are you saying that Explorer must run with admin privs? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531673">
				<div id="div-comment-531673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jamie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531673">
			July 29, 2007 at 10:03 pm</a>		</div>

		<p>Having written a number of installers myself, I think I know why the wrong window handle was used.</p>
<p>I would guess that the installer is running a helper utility that in turn calls GetForegroundWindow(), in order to display a modal window with the installer as the parent.</p>
<p>The person writing that code probably never thought that the user might switch away from the installer while it was running, and the testers probably never included it as a test case. Therefore the buggy code made its way out the door, and Raymond managed to find it.</p>
<p>One option would be to use FindWindow to get the installer&#8217;s window based on its title. Another option would be to use EnumWindows to find a window with a given string in the title.</p>
<p>A better option would be to pass the window handle to the helper util. However, this may not have been done because either: (a) the installer doesn&#8217;t have a way of getting the main window&#8217;s handle; (b) the developer didn&#8217;t look hard enough to find the functions to do (a); (c) the developer couldn&#8217;t figure out how to pass the window handle to the app; (d) the developer was too lazy to do any of the above and something else that seemed to work.</p>
<p>In any case, there were options available that could have been used but weren&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531683">
				<div id="div-comment-531683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jamie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531683">
			July 29, 2007 at 10:15 pm</a>		</div>

		<p>James Schend said: &quot;One of my hugest pet peeves is installer programs that create a giant window that takes over the whole screen to show a teeny progress bar in the middle. Actually, one of my hugest pet peeves is that all programs don&#8217;t just use .msi installers which work well all the time instead of their crazy third-party installers that don&#8217;t.&quot;</p>
<p>I worked with Windows Installer technology around the time that Windows Installer 1.2 was released. That thing was an absolute nightmare.</p>
<p>I spent close to 9 months just getting the product to install correctly most of the time, and then about another 3 months trying to dig into customer log files when installs didn&#8217;t work.</p>
<p>I also had to code numerous hacks, just to get the MSI installer to do the nice things we&#8217;d added to the previous InstallShield installer. (For example, if one of our product&#8217;s services had been stopped, it wouldn&#8217;t be restarted on an upgrade.)</p>
<p>We used MSI for just one major version of one of our products. For the next major release we switched back to (a newer version of) InstallShield and had the installer rewritten and working correctly in about 3 weeks.</p>
<hr />
<p>The point I&#8217;m trying to make here is that it&#8217;s possible to write a good installer using something other than Windows Installer. It&#8217;s also possible to write a bad Windows Installer package. Don&#8217;t blame the technology when it&#8217;s the developer at fault.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531693">
				<div id="div-comment-531693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531693">
			July 30, 2007 at 1:35 am</a>		</div>

		<p>@Jamie</p>
<blockquote><p>
  One option would be to use FindWindow to get the</p>
<p>  installer&#8217;s window based on its title. Another option</p>
<p>  would be to use EnumWindows to find a window with a</p>
<p>  given string in the title.
</p></blockquote>
<p>And then you have to modify and recompile the helper application for each language version of the installer. And woe unto the user if he/she happens to have a window with a similar title.</p>
<p>No, the main application must pass its window handle to the slave explicitly as a command line parameter, a function argument, or in a shared memory block whose ID is somehow explicitly passed to the slave. Any AI-based way to discover the master window handle is a perversion and should be seen as a sign that the design is wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531703">
				<div id="div-comment-531703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531703">
			July 30, 2007 at 4:18 am</a>		</div>

		<p>[If you prevent programs from doing stupid things, then you also prevent them from doing clever things. -Raymond]</p>
<p>That applies to more than just programs, of course ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531713">
				<div id="div-comment-531713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531713">
			July 30, 2007 at 4:19 am</a>		</div>

		<p>[If you prevent programs from doing stupid things, then you also prevent them from doing clever things. -Raymond]</p>
<p>That applies to more than just programs, of course ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531723">
				<div id="div-comment-531723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adarsha.mv.googlepages.com/' rel='external nofollow' class='url'>Adarsha</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531723">
			July 30, 2007 at 5:15 am</a>		</div>

		<p>@Centaur</p>
<p>[Quote]And then you have to modify and recompile the helper application for each language version of the installer. And woe unto the user if he/she happens to have a window with a similar title.[/Quote]</p>
<p>No you need not to recompile.. You abiviously know your window class name, (if you don&#8217;t know the thirdparty parent installer class name, then you can very well spy it, and use it).</p>
<p>Any org for that matter needs a witty tester (prefferably an integration tester and an acceptence tester). 90% of these bugs can be resolved if you have a good tester who can do all ODD things with your application, he need not to know the technology but should act as mischievously as possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531793">
				<div id="div-comment-531793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kuhr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531793">
			July 30, 2007 at 11:46 am</a>		</div>

		<p>Only a few months ago I almost made the same stupid mistake that Raymond&#8217;s story is all about: I wanted to show a MessageBox from a custom action DLL that did some non-trivial things beforehand (something you simply couldn&#8217;t do with WiX) and then would decide to show a MessageBox or not. Since we have a lot of knowledgeable commenters on Raymond&#8217;s story here: Can anyone tell me how to properly determine the HWND of the MSI installer running the setup that eventually invokes a custom action DLL? I ended up using FindWindow(&quot;MsiDialogCloseClass&quot;, NULL)&#8230; which I find quite suboptimal, to say the least. Maybe the author of the setup program that Raymond is talking about had the same issue?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531813">
				<div id="div-comment-531813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531813">
			July 30, 2007 at 12:37 pm</a>		</div>

		<p>&quot;The deeper problem is that it is too easy to get a reference to a different application and mess it up.&quot;</p>
<p>To go back and change history, in the rare cases where you need to reference a different application&#8217;s window, you should have to pass a flag that means &quot;I know it&#8217;s not my window, but I want to access it anyway&quot;.</p>
<p>If you don&#8217;t pass this flag, you can&#8217;t get another application&#8217;s window. &nbsp;</p>
<p>But that&#8217;s changing history. &nbsp;(The new cross-window restrictions in Vista might have been a good place to add this.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531833">
				<div id="div-comment-531833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531833">
			July 30, 2007 at 12:47 pm</a>		</div>

		<p>Raymond&#8230; Adam is looking for a tutorial. &nbsp;He is absolutely right that reference documentation is a poor way to find a high-level overview of &#8220;how to do things&#8221;, and how all the bits fit together.</p>
<p>Your non-serious suggestions to add silly disclaimers to every topic doesn&#8217;t mean that he&#8217;s wrong. &nbsp;A &#8220;Getting started programming with Windows&#8221; article in MSDN would be nice. &nbsp;Or even a book :-)</p>
<div class=post>[<i>There are plenty of books on Windows programming to choose from. MSDN is more of a reference than a tutorial. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531883">
				<div id="div-comment-531883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531883">
			July 30, 2007 at 2:17 pm</a>		</div>

		<p>[There&#8217;s a program you use every day that requires access to other processes&#8217; windows: The taskbar. (In order to move focus between apps when you click on their buttons, among other things.) Or are you saying that Explorer must run with admin privs? -Raymond]</p>
<p>Explorer is an integral part of the system. I don&#8217;t see why it shouldn&#8217;t be allowed to have more power than fred-app over there. Although it probably can&#8217;t be changed lest every program in existance stop working. But it would be nice to have the system and the apps seperated a bit.</p>
<div class=post>[<i>Okay, fine, if not Explorer, then the Windows XP Alt+Tab or Virtual Desktop powertoys. Any program that manipulates other windows would be affected. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531963">
				<div id="div-comment-531963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jamie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531963">
			July 30, 2007 at 5:05 pm</a>		</div>

		<p>Centaur said: &quot;And then you have to modify and recompile the helper application for each language version of the installer. And woe unto the user if he/she happens to have a window with a similar title.&quot;</p>
<p>More often than not, the window title contains the name of the application being installed. It may be relatively slow, but you could enumerate all top-level windows and find the one that contains your product name.</p>
<p>Also, as mentioned by Adarsha, you can get the window class name and find that (e.g. by using Spy++). There&#8217;s bound to be some combination of the two that can be used to locate the correct window with minimal fuss, and no need to recompile for different locales.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-531983">
				<div id="div-comment-531983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://huddledmasses.org' rel='external nofollow' class='url'>Joel &quot;Jaykul&quot; Bennett</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531983">
			July 30, 2007 at 6:29 pm</a>		</div>

		<p>Ah yes, Assumptions. It&#8217;s an installer, it must be the foreground window&#8230; &nbsp;It&#8217;s windows, Explorer.exe MUST be running &#8230; and so on.</p>
<p>The Scripting Guys actually just published in the August Technet mag a solution for determining who&#8217;s logged onto a computer based on determining the owner of the &quot;Explorer.exe&quot; process. &nbsp;Apparently nobody told them there are alternative shells out there &#8212; Explorer might not even be running.</p>
<p>I think grabbing the foreground window is a noob mistake, not a conscious decision. &nbsp;The MSDN documentation for GetForegroundWindow doesn&#8217;t actually mention the possibility that the returned window handle might belong to another app.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-531993">
				<div id="div-comment-531993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jamie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-531993">
			July 30, 2007 at 6:47 pm</a>		</div>

		<p>Joel &quot;Jaykul&quot; Bennett said: &quot;The MSDN documentation for GetForegroundWindow doesn&#8217;t actually mention the possibility that the returned window handle might belong to another app.&quot;</p>
<p>Does the MSDN library really have to spell that out? The first part of the function description says:</p>
<p>&quot;The GetForegroundWindow function returns a handle to the foreground window (the window with which the user is currently working).&quot;</p>
<p>Doesn&#8217;t it logically follow that if the user has switched to another application (e.g. browsing the web while an installer does its thing), then the user is working in that window, and therefore that window&#8217;s handle will be returned?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-532273">
				<div id="div-comment-532273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-532273">
			August 1, 2007 at 12:01 am</a>		</div>

		<blockquote><p>
  Explorer is an integral part of the system. I don&#8217;t see why it shouldn&#8217;t be allowed to</p>
<p>  have more power than fred-app over there.
</p></blockquote>
<p>By the way, if you give explorer &quot;more power&quot; then authors of explorer.exe shell replacement apps would complain (see, for example, <a rel="nofollow" target="_new" href="http://lsdev.org/" rel="nofollow">http://lsdev.org/</a> or <a rel="nofollow" target="_new" href="http://www.geoshell.org/" rel="nofollow">http://www.geoshell.org/</a> etc)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-xepol even thread-even depth-1" id="comment-532353">
				<div id="div-comment-532353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Xepol' rel='external nofollow' class='url'>Xepol</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-532353">
			August 1, 2007 at 10:36 am</a>		</div>

		<p>Sounds more like a design flaw in windows itself that you can do stuff like this. &nbsp;It certainly breaks the concept of process isolation.</p>
<p>This is yet another symptom of the design flaws that make malware so easy to write on windows.</p>
<div class=post>[<i>Yeah, how dare programs communicate with each other. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-532453">
				<div id="div-comment-532453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deadnode.org/' rel='external nofollow' class='url'>James</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070727-00/?p=25823#comment-532453">
			August 1, 2007 at 3:35 pm</a>		</div>

		<p>[Yeah, how dare programs communicate with each other. -Raymond]</p>
<p>Indeed. It&#8217;s not just &quot;manipulating&quot; windows in the obvious sense (as happened here), either: there are plenty of interactions involving access to another process&#8217;s windows &#8211; drag and drop, cut and paste, bits of OLE/COM as I recall, and I think the Win3.1 method of creating application icons (talking to progman.exe) will do too. Disable that lot &#8211; or restrict it to admin only &#8211; and your new &quot;improved&quot; Windows system won&#8217;t get very many users.</p>
<p>Joel: you&#8217;re right that there may not be any instances of Explorer.exe running &#8211; but worse, there may be more than one, with different owners, even on a single-user system &#8211; you can fire up an Explorer window running as Administrator or LocalSystem while logged in (and running explorer.exe as your shell) as another user. It&#8217;s a horribly broken technique, however you look at it!</p>
<p>Xepol: yeah, stupid Windows developers allowing communication. Do you avoid spam by deleting all your e-mail unread, too? Process isolation doesn&#8217;t mean prohibiting IPC outright, just limiting it to clearly defined interfaces and having ACLs where appropriate &#8211; and this is one of those interfaces. Incidentally, Vista tightens these restrictions somewhat with the Integrity Levels &#8211; no help here, of course, because an application installer will probably end up with High level anyway, but helpful elsewhere.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

