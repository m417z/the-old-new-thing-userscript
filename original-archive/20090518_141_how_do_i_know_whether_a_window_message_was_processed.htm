<html>
<head>
<title>How do I know whether a window message was processed?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I know whether a window message was processed?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 18, 2009 / year-entry #142</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090518-00/?p=18233</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Commenter Skeets Norquist asks how to tell whether the original window procedure processed a message when you use CallWindowProc to call the original window procedure. "CallWindowProc() always seems to return an LRESULT of 0." No, actually, CallWindowProc returns whatever the window procedure did. If the window procedure returned zero, then CallWindowProc returns zero. If the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Commenter Skeets Norquist asks <a href="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#557106"> how to tell whether the original window procedure processed a message</a> when you use <code>CallWindowProc</code> to call the original window procedure. "CallWindowProc() always seems to return an LRESULT of 0."</p>
<p> No, actually, <code>CallWindowProc</code> returns whatever the window procedure did. If the window procedure returned zero, then <code>CallWindowProc</code> returns zero. If the window procedure returned 5, then <code>CallWindowProc</code> returns 5. </p>
<p> Anyway, back to the original question. You actually know the answer, if you think about it the right way, and there are many right ways of thinking about it. </p>
<p> Technique number&nbsp;1: <a href="http://blogs.msdn.com/oldnewthing/archive/2003/12/26/45979.aspx"> Reading the contract from the other side</a>. </p>
<p> How do you know whether the original window procedure handled the message? Well, how does the window manager know that <i>you</i> handled the message? When you subclass a window, you are simultaneously implementing both sides of the message-handling contract. The window manager calls your window procedure, which is the recipient side of the contract. You, in turn, call the original window procedure, acting as the sending side of the contract. Therefore, the way you know whether the message was handled by the original window procedure is the same way the window manager knows that you handled the message yourself. For example, if the message is <code>WM_SETCURSOR</code>, then the window procedure returns <code>TRUE</code> to halt further processing or <code>FALSE</code> to continue. This statement applies both to your window procedure as well as the original window procedure, since they're both window procedures! </p>
<p> Technique number&nbsp;2: Use <a href="http://en.wikipedia.org/wiki/Ethic_of_reciprocity"> the golden rule</a>. </p>
<p> This is a very common technique for answering questions like "How do I make &laquo;something somebody else has written&raquo; &laquo;behave in some way&raquo;?" If you want to look for a way to somebody else behave in some way, you mentally turn the tables: How would somebody else make me behave in that way? </p>
<p> Here's a specific example: "What message do I send a window to ask if it contains an unsaved document?" Well, let's turn it around: What message would somebody send to you to ask if you contained an unsaved document? </p>
<p> "I don't have a message for that. It's just a boolean flag in my <code>CDocument</code> class. There's no message for retrieving it." </p>
<p> Well, if you don't have a message for retrieving the "dirty" flag from your own document, then clearly there is no generic message for it. Because if there were, you'd have implemented it! </p>
<p> Now let's transfer this to the message handling case. You write a window procedure. How do you indicate that you processed the message? Whatever method you use as a window procedure to indicate that you processed the message is the same method you use as the caller of <code>CallWindowProc</code> to tell whether the message was handled. </p>
<p> Technique number&nbsp;3: How do you know whether the base class performed the operation when you override a method in C++? (Or C# or Java or whatever object-oriented language you prefer.) </p>
<p> Subclassing a window is like subclassing a C++ class: Method calls are given to your class first, and you can decide whether to handle it entirely yourself, whether to pass it through to the base class unchanged, or to combine the two (calling the base class and also performing some operation on your own). So let's take the message handling question and turn it into a method override question: If you override a method and then call the base class, how do you know whether the base class implemented the method? </p>
<p> That's right, and that's how you tell whether the original window procedure handled a message. </p>
<p> (The misssing paragraph is, "Well, it depends on the method and what the specification is for how classes should respond to the method.") </p>
<p> Look at the problem three different ways, but it's all the same answer: You tell whether a window procedure processed a message by comparing the actual behavior against the specification. </p>
<p> Now, in practice, window messages are almost all of the form "You must process the message. If you don't want to do anything special, then pass it to <code>DefWindowProc</code> and let it do the default processing and return an appropriate value." In those cases, the answer to the question of how to tell whether the message was handled is much easier: The fact that it returned means that the message was handled. </p>
<p> One might even say that the messages like <code>WM_SETCURSOR</code> fall into the same category of "The fact that it returned means that the message was handled." Because even if the original window procedure returned <code>FALSE</code> to indicate that it wants processing to continue, that is in a sense how it handled the message. It handled the message by saying, "I am handling this message by telling you that I want you to continue processing." </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-736893">
				<div id="div-comment-736893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090518-00/?p=18233#comment-736893">
			May 18, 2009 at 11:45 am</a>		</div>

		<p>I think you made something simple sound very complicated.</p>
<p>I think anyone who&#8217;s written a windowproc knows that we&#8217;re not telling Windows that we&#8217;re handling a message or not, therefore, there is no way to know for sure.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-736903">
				<div id="div-comment-736903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pingpong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090518-00/?p=18233#comment-736903">
			May 18, 2009 at 11:47 am</a>		</div>

		<p>&quot;CallWindowProc() always seems to return an LRESULT of 0.&quot;</p>
<p>Yep, that&#8217;s the effect of learning Win32 API by reading random code snippets from the internet. Pre-www it was Petzold&#8217;s book :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-736943">
				<div id="div-comment-736943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090518-00/?p=18233#comment-736943">
			May 18, 2009 at 5:15 pm</a>		</div>

		<p>ulric: it goes further than that though. &nbsp;Quite simply, there isn&#8217;t a concept of a message that hasn&#8217;t been handled&#8230; all messages are handled by DefWindowProc if the class window procedure doesn&#8217;t do something else with them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-736953">
				<div id="div-comment-736953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090518-00/?p=18233#comment-736953">
			May 18, 2009 at 6:01 pm</a>		</div>

		<p>&gt; Well, if you don&#8217;t have a message for retrieving the &#8220;dirty&#8221; flag from your own document, then clearly there is no generic message for it. Because if there were, you&#8217;d have implemented it!</p>
<p>That makes the huge assumption that the person who was making the original question knows all the aspects of the Windows API. &#8220;I don&#8217;t know of a standard way to implement feature X, therefore no standard exists, because if it existed, I&#8217;d obviously know it&#8221; is no rational conclusion.</p>
<div class=post>[<i>&#8220;I don&#8217;t know of a standard way to implement feature X, therefore even if such a standard exists, it is not universally implemented and any attempt to use it is not guaranteed to work.&#8221; Same conclusion, different path. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-736963">
				<div id="div-comment-736963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090518-00/?p=18233#comment-736963">
			May 18, 2009 at 6:33 pm</a>		</div>

		<blockquote><p>
  &gt; Commenter Skeets Norquist asks how to tell whether the original window procedure processed a message
</p></blockquote>
<p>Switch the CPU into single-stepping mode&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-736973">
				<div id="div-comment-736973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090518-00/?p=18233#comment-736973">
			May 18, 2009 at 7:32 pm</a>		</div>

		<p>Unfortunately, few do good old MSDN reading anymore (not that many did it in the old days). It&#8217;s worth that.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

