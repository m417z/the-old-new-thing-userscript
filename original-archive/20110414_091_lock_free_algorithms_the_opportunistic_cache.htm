<html>
<head>
<title>Lock-free algorithms: The opportunistic cache</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Lock-free algorithms: The opportunistic cache</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 14, 2011 / year-entry #92</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>22</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Suppose profiling reveals that a specific calculation is responsible for a significant portion of your CPU time, and instrumentation says that most of the time, it's just being asked to calculate the same thing over and over. A simple one-level cache would do the trick here. BOOL IsPrime(int n) { static int nLast = 1;...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Suppose profiling reveals that a specific calculation is responsible
for a significant portion of your CPU time,
and instrumentation says that most of the time, it's just being
asked to calculate the same thing over and over.
A simple one-level cache would do the trick here.
</p>
<pre>
BOOL IsPrime(int n)
{
 static int nLast = 1;
 static BOOL fLastIsPrime = <a HREF="http://mathforum.org/dr.math/faq/faq.prime.num.html">FALSE</a>;

 // if it's the same value as last time, then
 // use the answer we cached from last time
 if (n == nLast) return fLastIsPrime;

 // calculate and cache the new result
 nLast = n;
 fLastIsPrime = slow_IsPrime(n);
 return fLastIsPrime;
}
</pre>
<p>
Of course, this isn't thread-safe, because if one thread
is pre-empted inside the call to <code>slow_<wbr>IsPrime</code>,
then another thread will see
values for <code>nLast</code> and <code>fLast&shy;Is&shy;Prime</code>
that do not correspond to each other.
</p>
<p>
One solution would be to put a critical section around this code,
but this introduces an artificial bottleneck:
If the most recent cached result is <code>nLast = 5</code>,
<code>fLast&shy;Is&shy;Prime = TRUE</code>,
and if two threads both try to see whether 5 is prime,
you don't want those two threads to serialize against each other.
</p>
<p>
Another solution is to use
<a HREF="http://msdn.microsoft.com/en-us/library/aa904937.aspx">
slim reader-writer locks</a> and acquire in shared mode when
checking the cache and in exclusive mode when updating the cache.
But let's try a lock-free solution.
</p>
<p>
We're going to combine two different techniques.
First, we use the change counter technique
we saw last time when 
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/12/10152296.aspx">
we investigated try/commit/(try again)</a>,
but we also combine it with a lock that is manipulated
with a try/commit/abandon pattern.
</p>
<pre>
#define IsLocked(l) ((l) & 1)

BOOL IsPrime(int n)
{
 static int nLast = 1;
 static BOOL fLastIsPrime = FALSE;
 static LONG lCounter = 0;

 // see if we can get it from the cache
 LONG lCounterStart = InterlockedReadAcquire(&amp;lCounter, -1);
 if (!IsLocked(lCounterStart) &amp;&amp; n == nLast) {
  BOOL fResult = fLastIsPrime;
  if (InterlockedReadRelease(&amp;lCounter, -1) == lCounterStart)
   return fResult;
 }

 // calculate it the slow way
 BOOL fIsPrime = slow_IsPrime(n);

 // update the cache if we can
 lCounterStart = lCounter;
 if (!IsLocked(lCounterStart) &amp;&amp;
     InterlockedCompareExchangeAcquire(&amp;lCounter,
              lCounterStart+1, lCounterStart) == lCounterStart) {
  nLast = n;
  fLastIsPrime = fIsPrime;
  InterlockedCompareExchangeRelease(&amp;lCounter,
              lCounterStart+2, lCounterStart+1);
 }
 return fIsPrime;
}
</pre>
<p>
The <code>lCounter</code> consists of
a LOCK bit as the bottom bit
and a change counter in the remaining bits.
(Choosing the bottom bit as the LOCK bit makes the operations
of clearing the lock and incrementing the counter very simple.)
</p>
<p>
There are two parts to this function, the part that reads the
cache and the part that updates the cache.
</p>
<p>
To read the cache, we first read the counter with acquire semantics,
so that the reads of <code>nLast</code> and 
<code>fLast&shy;Is&shy;Prime</code> will not take place until after we
get the counter.
If the counter says that the cache is not locked, then we go
ahead and fetch the last value and the last result.
If the last value in the cache matches the value we're calculating,
then we go ahead and use the last result.
But as a final check, we make sure that the counter hasn't changed
while we were busy looking at the protected variables.
If it has, then it means that we may have read inconsistent values
and cannot trust the cached result.
</p>
<p>
If we have a cache miss or we couldn't access the cache,
we go ahead and calculate the result the slow way.
</p>
<p>
Next, we try to update the cache.
This time, instead of just looking to see whether the cache
is locked, we try to lock it ourselves by setting the bottom bit.
(If the lock fails, then we skip the cache update and just return
the value we calculated.)
Once the lock is taken, we update the protected variables,
then atomically
release the lock and increment the counter.
(This is where putting the lock in the bottom bit comes in handy:
You can increment the counter by adding 2 and not worry about
a carry out of the counter bits turning into an accidental lock bit.)
We use Release semantics so that the
values of the protected values are committed to memory before
lock bit clears.
</p>
<p>
Note that in both halves of the function, if the cache is locked,
we just proceed as if there were no cache at all.
The theory here is that it's better just to say
"Oh, the heck with it, I'll just do it myself"
than to line up and wait to access the cache.
Continuing instead of waiting avoids problems like priority inversion,
but it also means that you get some spurious cache misses.
Fortunately, since it's just a cache, an occasional spurious miss
is not the end of the world.
</p>
<p>
You could do something similar with the
<code>Try&shy;Enter&shy;Critical&shy;Section</code> function
<a HREf="http://www.microsoft.com/msj/archive/S413.aspx">
provided you're running Windows&nbsp;NT&nbsp;4.0 or higher</a>:
</p>
<pre>
BOOL IsPrime(int n)
{
 static int nLast = 1;
 static BOOL fLastIsPrime = FALSE;
 BOOL fHaveAnswer = FALSE;
 BOOL fIsPrime;

 // see if we can get it from the cache
 if (TryEnterCriticalSection(&amp;g_cs)) {
  if (n == nLast) {
   fHaveAnswer = TRUE;
   fIsPrime = fLastIsPrime;
  }
  LeaveCriticalSection(&amp;g_cs);
 }
 if (fHaveAnswer) return fIsPrime;

 // calculate it the slow way
 fIsPrime = slow_IsPrime(n);

 // update the cache if we can
 if (TryEnterCriticalSection(&amp;g_cs)) {
  nLast = n;
  fLastIsPrime = fIsPrime;
  LeaveCriticalSection(&amp;g_cs);
 }
 return fIsPrime;
}
</pre>
<p>
This does have the disadvantage that multiple readers will lock
each other out, so we can switch to a slim reader/writer lock
<a HREF="http://msdn.microsoft.com/en-us/library/dd405529(v=vs.85).aspx">
provided we're running on Window&nbsp; 7 or higher</a>:
</p>
<pre>
BOOL IsPrime(int n)
{
 static int nLast = 1;
 static BOOL fLastIsPrime = FALSE;
 BOOL fHaveAnswer = FALSE;
 BOOL fIsPrime;

 // see if we can get it from the cache
 if (TryAcquireSRWLockShared(&amp;g_lock)) {
  if (n == nLast) {
   fHaveAnswer = TRUE;
   fIsPrime = fLastIsPrime;
  }
  ReleaseSRWLockShared(&amp;g_lock);
 }
 if (fHaveAnswer) return fIsPrime;

 // calculate it the slow way
 fIsPrime = slow_IsPrime(n);

 // update the cache if we can
 if (TryAcquireSRWLockExclusive(&amp;g_lock)) {
  nLast = n;
  fLastIsPrime = fIsPrime;
  LeaveSRWLockExclusive(&amp;g_lock);
 }
 return fIsPrime;
}
</pre>
<p>
This still has the problem that readers can lock out a cache update.
If the function is hot (and if it weren't, why would you switch
to a lock-free algorithm?), and the usage pattern shifts (say,
instead of checking whether 13 is prime over and over, it starts
checking whether 17 is prime over and over),
everybody will be so busy reading the cache to see if the cached
value is 17 that nobody will get a chance to update the cache
to actually <i>be</i> 17!
</p>
<p>
<b>Exercise</b>:
What constraints must be imposed on the protected variables
for this technique to be successful?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-907463">
				<div id="div-comment-907463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907463">
			April 14, 2011 at 8:54 am</a>		</div>

		<p>I believe the constraint is no pointers to memory objects that you cannot afford to leak.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-907473">
				<div id="div-comment-907473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907473">
			April 14, 2011 at 9:46 am</a>		</div>

		<p>Pet peeve: please don&#39;t use &quot;l&quot; as an identifier.</p>
<p>((l) &amp; 1)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907483">
				<div id="div-comment-907483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arseny Kapoulkine</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907483">
			April 14, 2011 at 9:52 am</a>		</div>

		<p>In this exact case, I&#39;d ensure that the cache access is atomic (we can use a sign bit for &#39;prime&#39; result, or use a int64 with suitable atomic read/write functions); the code then becomes something like</p>
<p>uint32_t v = g_cache;</p>
<p>if ((v &amp; 0x7fffffff) == n) return v &gt;&gt; 31;</p>
<p>uint32_t r = n | (slow_prime_check(n) &lt;&lt; 31);</p>
<p>g_cache = r;</p>
<p>This is both easier and faster.</p>
<p>P.S. The last assignment can be changed to CAS(&amp;g_cache, v, r) to improve perf. in rare cases (lots of concurrent checks with different values &#8211; should decrease cache eviction rate) and to make it worse in all other cases.</p>
<div class="post">[<i>True, that works in this specific case, but let&#39;s generalize to the where the information you need to cache doesn&#39;t fit into an atomic data size. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907503">
				<div id="div-comment-907503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907503">
			April 14, 2011 at 12:50 pm</a>		</div>

		<p>bool IsPrime(int n)</p>
<p>{</p>
<p>&nbsp; &nbsp;static std::map&lt;int, int&gt; cache;</p>
<p>&nbsp; &nbsp;if (!cache[n])</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;cache[n] = 1 + SlowIsPrime(n);</p>
<p>&nbsp; &nbsp;return cache[n] &#8211; 1;</p>
<p>}</p>
<p>// Note we store &quot;+1&quot; to distinguish &quot;false&quot; from &quot;not set&quot;.</p>
<p>// if the range of &#39;n&#39; is small, can use an array instead of a map.</p>
<p>bool IsPrime(int n)</p>
<p>{</p>
<p>&nbsp; &nbsp;const int MAX(1024);</p>
<p>&nbsp; &nbsp;static int cache[MAX] = { 0 };</p>
<p>&nbsp; &nbsp;assert(n &gt;= 0 &amp;&amp; n &lt; MAX);</p>
<p>&nbsp; &nbsp;if (!cache[n])</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;cache[n] = 1 + SlowIsPrime(n);</p>
<p>&nbsp; &nbsp;return cache[n] &#8211; 1;</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907513">
				<div id="div-comment-907513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907513">
			April 14, 2011 at 12:52 pm</a>		</div>

		<p>Fascinating series. &nbsp;Shouldn&#39;t all those statics that are used with the Interlocked&#8230; functions be declared volatile?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907523">
				<div id="div-comment-907523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907523">
			April 14, 2011 at 1:49 pm</a>		</div>

		<p>Ahahahah!</p>
<p>A multiple-parts series covering the in and out of locking, lock-free access and memory barriers, and we get two back-to-back posters who write code ignoring everything that was taught. Priceless.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907533">
				<div id="div-comment-907533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arseny Kapoulkine</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907533">
			April 14, 2011 at 2:02 pm</a>		</div>

		<p>Pierre, care to back up your words and tell me why memory barriers/locking/lock free access is required in my example?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907543">
				<div id="div-comment-907543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sukru</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907543">
			April 14, 2011 at 2:06 pm</a>		</div>

		<p>Wouldn&#39;t it be easier if you changed the architecture a little bit:</p>
<p>static int lastPrime = 2;</p>
<p>static int lastNonPrime = 1;</p>
<p>if(n == lastPrime)</p>
<p> &nbsp;return true;</p>
<p>if(n == lastNonPrime)</p>
<p> &nbsp;return false;</p>
<p>bool retval = is_prime_slow(n);</p>
<p>if(retval)</p>
<p> &nbsp;lastPrime = n;</p>
<p>else</p>
<p> &nbsp;lastNonPrime = n;</p>
<p>return retval;</p>
<p>No synchornization, and since int writes are atomic (as long as they are aligned), no worries.</p>
<div class="post">[<i>Yes, that works for this specific example, but let&#39;s consider the more general case. (In the more general case that inspired this example, there were about four inputs to a complex calculation which resulted in an integer output.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907563">
				<div id="div-comment-907563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bcs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907563">
			April 14, 2011 at 4:32 pm</a>		</div>

		<p>@sukru: I&#39;ve always been a fan of that class of solutions: Build stuff so that the state is only modified by atomic writes, and that after any write you may make, the sate will be correct regardless of any other intervening accesses. I was going to suggest storing LastIsPrime as the low order bit of Last and then special casing 2 and all other even numbers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907573">
				<div id="div-comment-907573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thorsten</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907573">
			April 14, 2011 at 5:29 pm</a>		</div>

		<p>For this particular case where Last and LastIsPrime together are smaller than 2 pointers, and assuming that for now you are happy to just target x86/x64, I would simply go with an &quot;lock cmpxchg8b&quot; instruction for both reading and writing which makes the implementation trivial and much more straight forward.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907583">
				<div id="div-comment-907583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907583">
			April 14, 2011 at 7:05 pm</a>		</div>

		<p>Yikes. &nbsp;That&#39;s a lot of code. &nbsp;Wouldn&#39;t you be better off just using a thread local variable for the cached value?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907593">
				<div id="div-comment-907593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">vox</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907593">
			April 15, 2011 at 12:44 am</a>		</div>

		<p>What is the advantage of using Aquire/Release functions since standard ones simply &quot;impose both acquire and release semantics.&quot; (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ff540496.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ff540496.aspx</a>).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907603">
				<div id="div-comment-907603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">vlg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907603">
			April 15, 2011 at 12:44 am</a>		</div>

		<p>What is the advantage of using Aquire/Release functions since standard ones simply &quot;impose both acquire and release semantics.&quot; (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ff540496.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ff540496.aspx</a>).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907613">
				<div id="div-comment-907613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907613">
			April 15, 2011 at 1:21 am</a>		</div>

		<p>The responses appear to be a good proof that too simplified examples lead people in the wrong direction (I always had problems with books making them as I always found at least somewhere that somebody actually retypes the example and uses in production because &quot;that&#39;s how it should be done&quot; &#8212; I guess such people shouldn&#39;t stay on that positions, but it&#39;s hard to influence that). Anyway, if we imagine the examples that start instead of:</p>
<p>BOOL IsPrime(int n)</p>
<p>{</p>
<p>&nbsp; &nbsp;static int nLast = 1;</p>
<p>&nbsp; &nbsp;static BOOL fLastIsPrime = FALSE;</p>
<p>with</p>
<p>struct Something { int a, b, c, d; };</p>
<p>BOOL IsGood( Something x )</p>
<p>{</p>
<p>&nbsp; &nbsp;static Something lastX;</p>
<p>&nbsp; &nbsp;static BOOL lastXIsGood;</p>
<p>there would be much less chance for misunderstanding and also less to explain in text.</p>
<p>On another side, I can imagine that some lawyers somewhere could then claim some &quot;too similar to our&quot; code? Yes I know it&#39;s hard to find the right balance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907623">
				<div id="div-comment-907623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907623">
			April 15, 2011 at 4:37 am</a>		</div>

		<p>acq: The &quot;IsPrime&quot; function is something that everybody can relate to. We an all understand how it would take some time to compute and that you might want to cache it. The &quot;IsGood(Something)&quot; function is much more abstract, which would make the example harder to understand.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907633">
				<div id="div-comment-907633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907633">
			April 15, 2011 at 6:36 am</a>		</div>

		<p>@Gabe thanks, incorporating your insight, the &quot;clear&quot; example can be, for example:</p>
<p>struct MyBigNum { __int64 a, b, c, d, e; };</p>
<p>BOOL IsPrime( MyBigNum&amp; x )</p>
<p>{</p>
<p>&nbsp; &nbsp;static MyBigNum lastX;</p>
<p>&nbsp; &nbsp;static BOOL lastXIsPrime;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907643">
				<div id="div-comment-907643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907643">
			April 15, 2011 at 7:20 am</a>		</div>

		<p>What are InterlockedReadRelease and InterlockedReadAcquire? &nbsp;MSDN seems to have failed to document them.</p>
<div class="post">[<i>These functions were introduced earlier in the week. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907683">
				<div id="div-comment-907683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel D</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907683">
			April 15, 2011 at 8:40 am</a>		</div>

		<p>I know this is a contrived example to demonstrate various thread techniques, but personally I would go with __declspec(thread)/TLS on that state. &nbsp;It can be much better for individual threads to use their own state rather than to share state.</p>
<p>This might also be useful if analysis reveals that individual threads are likely to make the same request, but distinct threads are likely to make different requests (that is, thread 1 tends to ask for the results of one value and thread 2 tends to ask for the results of a different value). &nbsp;You&#39;d get more in the way of thrashing your one value cache if that were true. &nbsp;Again, __declspec(thread) your one-value cache would help in this instance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907813">
				<div id="div-comment-907813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907813">
			April 16, 2011 at 2:38 am</a>		</div>

		<p>Forgot, the plain functions impose both barriers so all memory accesses are done at that stage. On x86, I believe this is the case as it does not support read or write barriers individually.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907803">
				<div id="div-comment-907803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907803">
			April 16, 2011 at 2:36 am</a>		</div>

		<p>To answer a few quwstions &#8211; the *Release and *Acquire functions are used to impose a memory barrier because a modern processor does not always post or complete memory transactions in program order. If you do a read of write two memory addresses, the reads can occur in any order, which mess up the interlock functions if you&#39;re using them to signal completion of an update.</p>
<p>So you can impose read memory barriers (at this point, all previous reads have completed), aka Acquire, and write memory barriers (at this point, all writes have been posted), aka Release.</p>
<p>This is a modern processor thing, it doesn&#39;t matter if it&#39;s single core or multi core (depends on architecture).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907843">
				<div id="div-comment-907843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SL</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907843">
			April 17, 2011 at 2:57 pm</a>		</div>

		<p>x86 (in sufficiently modern versions) does provide: mfence=serialize both loads and stores, lfence=serialize loads, sfence=serialize stores.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907983">
				<div id="div-comment-907983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kayru</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110414-00/?p=10933#comment-907983">
			April 18, 2011 at 2:10 pm</a>		</div>

		<p>Agree with John&#39;s comment: TLS should be enough for this.</p>
<div class="post">[<i>TLS works if your cache works with thread scope. But if you want each object to have its own cache, then TLS doesn&#39;t help. (Giving each object its own cache is not unreasonable. For example, &quot;Give each transaction its own SID cache since a transaction rarely changes its identity, but different transactions will probably have different SIDs.&quot;) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

