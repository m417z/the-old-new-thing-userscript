<html>
<head>
<title>Under what conditions can SetFocus crash? Another debugging investigation</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Under what conditions can SetFocus crash? Another debugging investigation</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 29, 2015 / year-entry #112</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150529-00/?p=45004</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer asked, "Under what conditions can Set­Focus crash?" We have been going through our error reports and are puzzled by this one. The call stack is as follows: user32!_except_handler4 ntdll!ExecuteHandler2@20 ntdll!ExecuteHandler@20 ntdll!RtlDispatchException ntdll!_KiUserExceptionDispatcher@8 0x130862 user32!UserCallWinProcCheckWow user32!__fnDWORD ntdll!_KiUserCallbackDispatcher@12 user32!NtUserSetFocus contoso!DismissPopup At the point of the crash, the Dismiss­Popup function is calling Set­Focus to restore focus...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer asked,
"Under what conditions can <code>Set&shy;Focus</code> crash?"
</p>
<blockquote CLASS=q>
<p>
We have been
<a HREF="http://msdn.microsoft.com/en-us/library/windows/hardware/dn641144.aspx">
going through our error reports</a>
and are puzzled by this one.
The call stack is as follows:
</p>
<pre>
user32!_except_handler4
ntdll!ExecuteHandler2@20
ntdll!ExecuteHandler@20
ntdll!RtlDispatchException
ntdll!_KiUserExceptionDispatcher@8
0x130862
user32!UserCallWinProcCheckWow
user32!__fnDWORD
ntdll!_KiUserCallbackDispatcher@12
user32!NtUserSetFocus
contoso!DismissPopup
</pre>
<p>
At the point of the crash, the <code>Dismiss&shy;Popup</code>
function is calling <code>Set&shy;Focus</code> to restore focus
to a window handle that we got from an earlier call to
<code>Get&shy;Active&shy;Window</code>.
Is this safe?
We imagine it might crash if the message
handler for the window was unloaded from memory without being properly unregistered;
are there any other reasons?
More to the point, is there any way to avoid the problem
(without fixing the root cause of the crash, which we may not be able to do,
e.g. if that window was created by third-party code)?
</p>
<p>
The full dump file can be found on &lt;location&gt;.
The password is &lt;xyzzy&gt;.
</p>
</blockquote>
<p>
Indeed, what the customer suspected is what happened,
confirmed by the dump file provided.
</p>
<p>
The code behind the window procedure got unloaded.
<code>User&shy;Call&shy;Win&shy;Proc&shy;Check&shy;Wow</cODE>
is trying to call the window procedure, but instead it took an exception.
The address doesn't match any loaded or recently-unloaded
module probably because it was a dynamically generated
thunk,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2007/11/16/6281925.aspx">
like the ones ATL generates</a>.
</p>
<p>
There isn't much you can do to defend against this.
Even if you manage to detect the problem and avoid calling
<code>Set&shy;Focus</code> in this problematic case,
all you're doing is kicking the can further down the road.
Your program will crash the next time the window
receives a message, which it eventually will.
(For example, the next time the user changes a system
setting and the <code>WM_<wbr>SETTING&shy;CHANGE</code>
message is broadcast to all top-level windows,
or the user plugs in an external monitor and the
<code>WM_<wbr>DISPLAY&shy;CHANGE</code> message is
broadcast to all top-level windows.)
</p>
<p>
Basically, that other component pulled the pin on
a grenade and handed it to your thread.
That grenade is going to explode sooner or later.
The only question is when.
</p>
<p>
Such is the danger of
giving your application an extension model that
allows arbitrary third party code to run.
The third party code can do good things
to make your program more useful,
but it can also do bad things to make
your program crash.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1191614">
				<div id="div-comment-1191614" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150529-00/?p=45004#comment-1191614">
			May 29, 2015 at 7:17 am</a>		</div>

		<p>Well I suppose you could detect the problem by obtaining the window handle, checking if the pointer is mapped (executable memory regions tend to be unmapped when freed, as in this example), and subclass the window. I&#39;d prefer to follow it up w/ an immediate DrstroyWindow.</p>
<p>Still seems like something you should not be defending against.</p>
<div class="post">[<em>That will generate both false positives (<a href="http://blogs.msdn.com/b/oldnewthing/archive/2003/12/01/55900.aspx">window procedure thunks</a>) and false negatives (if the unloaded module is somewhere <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb762102(v=vs.85).aspx">inside the subclass chain</a>, not at the top). -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1191624">
				<div id="div-comment-1191624" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150529-00/?p=45004#comment-1191624">
			May 29, 2015 at 7:26 am</a>		</div>

		<p>&quot;An extension model that allows arbitrary third party code to run&quot;? &nbsp;Like Windows Explorer used to do? &nbsp;</p>
<p>Although that model allowed some helpful add-ins, I realize that it also caused problems and support headaches for Microsoft. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1191664">
				<div id="div-comment-1191664" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150529-00/?p=45004#comment-1191664">
			May 29, 2015 at 1:08 pm</a>		</div>

		<p>Sometimes, that third-party code isn&#39;t the result of an extension model. &nbsp;It can be the result of extension points (a.k.a. AppInit DLLs) or a result of user-mode drivers.</p>
<p>For example, I once had to debug a crash with no call stack because the user-mode DirectX components of a certain video card&#39;s driver crashed in runtime-generated code and that DLL didn&#39;t call RtlAddFunctionTable. &nbsp;That was a fun day. &nbsp;We got to send a nastygram to that company with a link to the x86-64 calling convention page on MSDN, though. &nbsp;&gt;.&lt;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1191674">
				<div id="div-comment-1191674" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">The Customer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150529-00/?p=45004#comment-1191674">
			May 29, 2015 at 5:38 pm</a>		</div>

		<p>&nbsp;&quot;There isn&#39;t much you can do to defend against this.&quot;</p>
<p>How about: install an exception handler, when the exception hits, follow the frame up to the caller, find the location where 0x130862 was retrieved, and replace it with the address of DefWindowProc?</p>
<div class="post">[<em>The 0x130862 was obtained from kernel mode, so good luck modifying that. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243526">
				<div id="div-comment-1243526" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150529-00/?p=45004#comment-1243526">
			May 29, 2015 at 8:02 pm</a>		</div>

		<p>This is quite off-topic but: I&#39;ve got a puzzling situation where an application (native, does almost nothing except file/network I/O) I&#39;ve written is somehow causing Windows to hang when it crashes (e.g, a GPF). I&#39;ve been able to reproduce this behavior on several machines (all Win7, one a clean install) and the temporary workaround to stop Windows from hanging is to just handle the exception myself (ala SetErrorMode/SetUnfilteredExceptionHandler).</p>
<p>Any suggestions on how to go about debugging this short of breaking in with a kernel debugger?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1243506">
				<div id="div-comment-1243506" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">T. West</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150529-00/?p=45004#comment-1243506">
			May 30, 2015 at 7:02 am</a>		</div>

		<p>&lt;i&gt;The password is &lt;xyzzy&gt;.&lt;/i&gt;</p>
<p>Arg! &nbsp;Why did Raymond just post my password in plain-text? &nbsp;Unguessable passwords are hard to come up with. &nbsp;Next time please use a filler.</p>
<p>:-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1243496">
				<div id="div-comment-1243496" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150529-00/?p=45004#comment-1243496">
			May 30, 2015 at 8:03 am</a>		</div>

		<p>You could still subclass the window and blast it out of existence in the exception handler, but that depends on interpreting exception stacks in native mode (always dodgy in production code). OK so doing it in managed mode isn&#39;t much more sane.</p>
<div class="post">[<em>It also means <a href="http://blogs.msdn.com/b/oldnewthing/archive/2009/11/13/9921676.aspx">continuing a program that you know is in a bad state</a>, which will just lead to worse states later that you will never be able to debug. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1243436">
				<div id="div-comment-1243436" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150529-00/?p=45004#comment-1243436">
			May 31, 2015 at 6:24 pm</a>		</div>

		<p>So, the correct way is to ask the parent window to save the focus state of it&#39;s active child first, then when the popup is done, ask the parent window to restore it itself?</p>
<div class="post">[<em>At best, you&#39;re just delaying the inevitable. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1243326">
				<div id="div-comment-1243326" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150529-00/?p=45004#comment-1243326">
			June 1, 2015 at 6:38 pm</a>		</div>

		<p>Why it&#39;s just deplaying the problem? Shouldn&#39;t the parent window (I mean the previously active control&#39;s owner) ought to be able to keep track of states of it&#39;s assets?</p>
<p>If you&#39;re talking about &quot;giving your application an extension model that allows arbitrary third party code to run&quot;, the parent window could be coded with this extension and asked the third party implementer to call it when needed.</p>
<div class="post">[<em>Some window called contoso!DisplayPopup. DisplayPopup remembers the active window (which is the parent of the previous focus control), so it can restore it later. While the popup is displayed, the DLL for the previous active window gets unloaded. When the popup is finished, it wants to put focus back on the previous active window, but there is no DLL any more. &quot;Shouldn&#39;t the parent window of the previously active control do XYZ?&quot; Answer: &quot;It doesn&#39;t matter what the parent window of the previously active control does, because its code got unloaded!&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1243256">
				<div id="div-comment-1243256" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150529-00/?p=45004#comment-1243256">
			June 2, 2015 at 7:52 am</a>		</div>

		<p>@cheong00, setting the focus on the previous top-level window should take care of that.</p>
<p>If the window happens to be a dialog or alike, it should set the focus on whatever child had the focus previously, such a window should have recorded it when it lost focus.</p>
<p>What the customer reported is a problem of that window if his pop-up is modal.</p>
<p>If his pop-up is not modal, then the customer shouldn&#39;t do anything about focus.</p>
<p>@Raymond, although I agree we&#39;re just delaying the explosion, at least we shouldn&#39;t cause it ourselves if we can avoid it.</p>
<p>Much like carefully walking on a mine field, which is the best we can ever hope to do with software.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

