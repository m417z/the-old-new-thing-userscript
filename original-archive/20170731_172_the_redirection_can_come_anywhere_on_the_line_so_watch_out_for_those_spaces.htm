<html>
<head>
<title>The redirection can come anywhere on the line, so watch out for those spaces</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The redirection can come anywhere on the line, so watch out for those spaces</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 31, 2017 / year-entry #173</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>53</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The operator vanishes.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Wekcome to Batch File Week.
Batch is probably one of the
most hated programming languages
that people are still writing new programs in.
You hate it, but you have to deal with it.
So just
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20160329-00/?p=93214">
deal with it</a>.
</p>
<p>
That said, here we go.
</p>
<p>
A customer couldn't understand why parenthesizing
a few <code>ECHO</code> statements
resulted in a syntax error.
</p>
<blockquote CLASS="q">
<p>
This version of the batch file works:
</p>
<pre>
@echo off
set log=C:\Space Path

echo Test &gt;&gt;%log%\Output.txt
echo Redirection &gt;&gt;%log%\Output.txt
</pre>
<p>
On the other hand, this version, which should be equivalent,
spits out a syntax error.
</p>
<pre>
@echo off
set log=C:\Space Path

(
  echo Test
  echo Redirection
) &gt;&gt;%log%\Output.txt
</pre>
<p>
The error is
</p>
<pre>
Path\Output.txt was unexpected at this time.
</pre>
<p>
If the syntax of the second command is illegal,
then so too should the first, since they are basically the same thing.
Why is one legal and the other not?
</p>
</blockquote>
<p>
Recall that
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2006/05/18/600962.aspx">
you're allowed to put the redirection operator anywhere on the line</a>,
and when it is parsed, it is removed from the command line,
and what remains needs to be a legal command.
</p>
<p>
In the first batch file, the <code>echo</code> statement expands to
</p>
<pre>
echo Test <font COLOR="red">&gt;&gt;C:\Space</font> Path\Output.txt
</pre>
<p>
The redirection operator detector takes out the redirection operator
and the file name (which due to the embedded space is parsed
as merely <code>C:\Space</code>),
leaving
</p>
<pre>
echo Test Path\Output.txt
</pre>
<p>
Result: The string <code>Test Path\Output.txt</code> is placed
into the file <code>C:\Space</code>.
</p>
<p>
Now let's look at the second batch file.
The command being parsed is
</p>
<pre>
(
  echo Test
  echo Redirection
) &gt;&gt;%log%\Output.txt
</pre>
<p>
which expands to
</p>
<pre>
(
  echo Test
  echo Redirection
) <font COLOR="red">&gt;&gt;C:\Space</font> Path\Output.txt
</pre>
<p>
Again, the redirection operator detector takes out the redirection
operator and the file name,
leaving
</p>
<pre>
(
  echo Test
  echo Redirection
) Path\Output.txt
</pre>
<p>
And that is a syntax error.
</p>
<p>
In other words, the first batch file works because the extra junk
you appended happened to be in a place where junk was legal.
(It gets treated as more arguments to the
<code>ECHO</code> command.)
But the second batch file puts the extra junk in a place
where junk is not legal,
and so it is rejected as a syntax error.
</p>
<p>
If you take a step back,
you'll see that the real problem is that the batch file
uses a path with spaces but fails to quote it properly.
</p>
<p>
Whose idea was it to allow redirection operators to appear
anywhere in the line?
Answer: Ken Thompson,
in
<a HREF="http://www.in-ulm.de/~mascheck/bourne/v2/">
version&nbsp;2 of <code>sh</code></a>.
If you think this is a stupid feature,
<a HREF="http://www.cs.bell-labs.com/who/ken/">
you can let him know</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (53)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1304286">
				<div id="div-comment-1304286" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304286">
			July 31, 2017 at 7:19 am</a>		</div>

		<blockquote><p>This version of the batch file works:</p></blockquote>
<p>Hmmm&#8230;..only for suitably un-rigorous definitions of &#8220;work&#8221;. You talk around this, but don&#8217;t really make it explicit, that a straightforward reading of the code shows that it is supposed to write the lines &#8220;Test&#8221; and &#8220;Redirection&#8221; to the file &#8220;C:\Space Path\Output.txt&#8221;, whereas it actually writes the lines &#8220;Test Path\Output.txt&#8221; and &#8220;Redirection Path\Output.txt&#8221; to the file &#8220;C:\Space&#8221;.</p>
<p>If that code &#8220;works&#8221;, it must surely be a promising candidate for the venerable International Obfuscated Batch Coding Competition! (Second in its class, with only the IOPCC above it for those truly wishing to risk their sanity staring into the abyss.)</p>
<p>ObSnark &#8211; if DOS was actually influenced by &#8216;sh&#8217;, command options would have been preceded by &#8216;-&#8216;, and the path separator would have been &#8216;\&#8217;.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mzzt odd alt depth-2 parent" id="comment-1304325">
				<div id="div-comment-1304325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/The+MAZZTer' rel='external nofollow' class='url'>The MAZZTer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304325">
			July 31, 2017 at 7:37 am</a>		</div>

		<p>I think it&#8217;s pretty clear by &#8220;works&#8217; he means it runs.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1304345">
				<div id="div-comment-1304345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304345">
			July 31, 2017 at 8:02 am</a>		</div>

		<p>Yeah, but my point was that he doesn&#8217;t really make that explicit, and in my experience the most common definition of &#8220;works&#8221; as applied to software is &#8220;does what the author intended&#8221;.</p>
<p>Granted, some code mostly does what the author intended but has bugs in edge cases, in which case you could say that it &#8220;mostly works&#8221;. That code is two lines long, and neither of them ever does what the author intended.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1304355">
				<div id="div-comment-1304355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304355">
			July 31, 2017 at 8:03 am</a>		</div>

		<p>Sorry, four lines long, and half of them never do what the author intended. (my mistake)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-4" id="comment-1304395">
				<div id="div-comment-1304395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zboot</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304395">
			July 31, 2017 at 9:16 am</a>		</div>

		<p>He also doesn&#8217;t teach a programming class before every post. There&#8217;s a level of understanding expected of readership beyond being capable of reading.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1304405">
				<div id="div-comment-1304405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wear</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304405">
			July 31, 2017 at 9:24 am</a>		</div>

		<p>I did found it interesting that the customer reported the issue without ever checking the output file to see what was in it and I did notice that it was never explicitly stated that the first option doesn&#8217;t actually do what it looks like it should.</p>
<p>But what&#8217;s being output to the file isn&#8217;t the focus of the article or the customers question. The second option doesn&#8217;t work because it throws a syntax error and in that context the first option does work in the sense that it doesn&#8217;t throw an error.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1304366">
				<div id="div-comment-1304366" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304366">
			July 31, 2017 at 8:45 am</a>		</div>

		<p>DOS inherited slash as the switch character from CP/M, and the backslash was chosen later for the path separator as the next most similar character.</p>
<p><a href="https://blogs.msdn.microsoft.com/larryosterman/2005/06/24/why-is-the-dos-path-character/" rel="nofollow">https://blogs.msdn.microsoft.com/larryosterman/2005/06/24/why-is-the-dos-path-character/</a></p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1304455">
				<div id="div-comment-1304455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom Passin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304455">
			July 31, 2017 at 12:10 pm</a>		</div>

		<p>Back in the early 1970s, there was a PDP-15 next to my desk.  It wasn&#8217;t mine, but I did get to play with it from time to time.  Ten years or so later, when I encountered CP/M, I realized that it seemed to be a nearly exact clone of the PDP-15 OS.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1304656">
				<div id="div-comment-1304656" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Styles</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304656">
			August 1, 2017 at 9:59 am</a>		</div>

		<p>Yes indeed. This fact seems surprisingly rarely remarked on. Fun fact, the 8.3 filenames in DOS come from CP/M. CP/M took the PDP 11 ones which were Radix 50 (50 in the sense of 40, obviously) with 3 characters fitting into a 2 byte int and had 6.3 (3 ints), got rid of the Radix 50 and added 2 characters to be generous.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1304565">
				<div id="div-comment-1304565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Elliott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304565">
			August 1, 2017 at 7:08 am</a>		</div>

		<p>No it didn&#8217;t, because <a href="http://www.seasip.info/Cpm/optchar.html" rel="nofollow">CP/M didn&#8217;t have a standard &#8216;option character&#8217;</a>.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1304525">
				<div id="div-comment-1304525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304525">
			July 31, 2017 at 9:13 pm</a>		</div>

		<p>That&#8217;s because MS-DOS 1.0 (aka 86-DOS) was as pure a clone of CP/M as possible. MS-DOS 2.0 was largely rewritten in-house by Microsoft, which had already been reselling Unix as Xenix, and that heavily influenced the creation of new features in command.com. But the specter of backwards compatibility was already there by then, and it was too late for the basic syntax. (Until Windows came along.) Sh wasn&#8217;t exactly all that and a bag of chips itself back in the day, of course.</p>
<p>If Microsoft had actually written MS-DOS itself, instead of buying and minimally modifying it, it probably would have much more closely reflected Unix in spite of its CP/M compatibility. I am saddened that DOS didn&#8217;t begin including more minimal Unix programs, like sed and grep, dd, etc, as drive sizes increased, but the Unix mindset really got siloed into the OS/2 and later NT teams.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1304296">
				<div id="div-comment-1304296" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Yates</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304296">
			July 31, 2017 at 7:26 am</a>		</div>

		<p>Link to &#8220;let him know&#8221; fails but it&#8217;s still in search engine cache. </p>
<p>I only learnt about redirection being possible form anywhere in the line last week despite writing batch files for years. Someone suggested putting them at the start of the line which initially looked odd but does make a lot of sense.<br />
What wasn&#8217;t included elsewhere was how the redirection is effectively stripped out and then the rest of the line is interpreted. I like understanding that extra layer down so thanks for sharing in the post! ☺</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mzzt even thread-even depth-1" id="comment-1304306">
				<div id="div-comment-1304306" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/The+MAZZTer' rel='external nofollow' class='url'>The MAZZTer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304306">
			July 31, 2017 at 7:36 am</a>		</div>

		<p>I wasn&#8217;t even aware you could do that. Well I&#8217;m certainly not going to start now. Redirecting every line individually will at least make it clear where an error is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1304307">
				<div id="div-comment-1304307" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stéphan Leclercq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304307">
			July 31, 2017 at 7:37 am</a>		</div>

		<p>&gt;&gt; If you take a step back, you&#8217;ll see that the real problem is that the batch file uses a path with spaces but fails to quote it properly.</p>
<p>If you take *TWO* steps back, you&#8217;ll see that the real real problem is that Microsoft should have immediately fired the guy who came with the idea of allowing spaces in a file name (or is it a filename ?)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1304375">
				<div id="div-comment-1304375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304375">
			July 31, 2017 at 8:49 am</a>		</div>

		<p>If you take *three* steps back, scripting languages should have required string quoting from the start.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1304475">
				<div id="div-comment-1304475" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304475">
			July 31, 2017 at 1:38 pm</a>		</div>

		<p>And if you take four steps back, really it&#8217;s that Batch was never designed as a &#8220;scripting language&#8221; at all. It was just a way to run a &#8220;batch&#8221; of a few statements at once, with more and more features added such that what&#8217;s there now may be a scripting language but it sure has a lot of &#8220;gotchas&#8221;. I&#8217;m very excited to learn more during Batch Week.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-4" id="comment-1304505">
				<div id="div-comment-1304505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304505">
			July 31, 2017 at 6:34 pm</a>		</div>

		<p>Only if it&#8217;s really a batch of commands in same syntax.</p>
<p>I wonder why we can just use %a in &#8220;for&#8221; statement in command line, but have to use %%a in batch files. Why can&#8217;t we just use the same statement?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-entegygmail-com odd alt depth-2 parent" id="comment-1304465">
				<div id="div-comment-1304465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Entegy' rel='external nofollow' class='url'>Entegy</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304465">
			July 31, 2017 at 12:28 pm</a>		</div>

		<p>Users create file names with spaces. You should be <i>thanking</i> Microsoft for forcing this issue a long time ago and making developers deal with this situation a long time ago. If your script handles file paths, it will encounter a space at some point. You should be quoting any file path even if you think you&#8217;re 100% sure your script will never encounter spaces in the file path. Failure to do so is a failure of a script.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-3" id="comment-1304506">
				<div id="div-comment-1304506" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304506">
			July 31, 2017 at 6:40 pm</a>		</div>

		<p>It reminds me the issue that tax return process program installer of certain bank can&#8217;t install on WinXP around 2004, and the issue is that the installer cannot handle space in path.</p>
<p>Since the installer has a look and feel of installers at Win3.X days, I subconsciously replaced &#8220;Program Files&#8221; with &#8220;progra~1&#8221; and the installation just works. And later when staffs of the bank call me (actually it was redirected by accounting department) to know how can I install it, I just forgot it at the moment, and replied &#8220;I forgot but it should be trivial thing that I can redo if I was sent to install it again&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1304527">
				<div id="div-comment-1304527" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stéphan Leclercq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304527">
			July 31, 2017 at 10:27 pm</a>		</div>

		<p>The shell already hides the extension for users that don&#8217;t care to understand them. It could also have displayed underscores as spaces, and replace spaces by underscores when the user types them in a file_name.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1304536">
				<div id="div-comment-1304536" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304536">
			August 1, 2017 at 3:19 am</a>		</div>

		<p>Yuck !</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-4 parent" id="comment-1304556">
				<div id="div-comment-1304556" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304556">
			August 1, 2017 at 6:22 am</a>		</div>

		<p>Whoever came with the idea of hiding file extensions from the user should have beer fired immediately.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1304635">
				<div id="div-comment-1304635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stéphan Leclercq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304635">
			August 1, 2017 at 9:47 am</a>		</div>

		<p>Whoever came with the idea of file extensions should have been fired. Yes !! I mean you, Gary Kildall !!! :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1304775">
				<div id="div-comment-1304775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304775">
			August 1, 2017 at 3:31 pm</a>		</div>

		<p>Gary Kildall didn&#8217;t come up with the idea of file extensions.  They were there in all those earlier DEC operating systems.<br />
The &#8220;Make&#8221; utility (for describing how compilers, linkers and other tools are used to &#8220;build&#8221; code) would be much harder without file extensions.<br />
Files need some kind of file-type information.  Apple hides it away.  DEC OSes, CP/M, DOS and Windows all make them right there in your face.  I for one like the ability to change a file type simply by editing its name</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1304825">
				<div id="div-comment-1304825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stéphan Leclercq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304825">
			August 1, 2017 at 11:11 pm</a>		</div>

		<p>Don&#8217;t get me wrong. I do agree that extensions are a useful way of categorizing files when you have multiple representations of the &#8220;same&#8221; data such as source code vs compiled code, editable document vs pdf redistributable, etc. Requiring every file to be explicitly categorized according to its format and failing to open it if the categorization is wrong, well, that&#8217;s more objectionable&#8230;</p>
<p>Would you be happy if the C compiler rejected your code because you failed to explicitly use hungarian notation on each and every variable that you passed to a WIN32 API function call ?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-4 parent" id="comment-1304905">
				<div id="div-comment-1304905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">morlamweb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304905">
			August 2, 2017 at 7:11 am</a>		</div>

		<p>So, rather properly support spaces in file paths and names, you&#8217;d rather pile a kludge on top of a kludge and hide MORE information from the user?  Sorry, 1985 called; they want their filesystem back : )</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1305047">
				<div id="div-comment-1305047" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stéphan Leclercq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1305047">
			August 3, 2017 at 12:25 am</a>		</div>

		<p>No. I would *love* to properly support spaces, backslashes and colons into filenames. Unfortunately that would require so many changes in the way command line parsers work, that most of the batch files ever written would have to be changed. The risk is just too high compared to the usefulness of the feature. No one objects when spaces are not allowed in email addresses, web addresses, etc. File names are computer stuff, file names containing spaces are hard to parse for computers and for humans alike (have you ever received an e-mail requesting you to read the readme text file? Does that refer to &#8220;readme&#8221; file, or the &#8220;readme text&#8221; file ? &#8211; I know my example is contrived but you get the idea) Every time you cannot easily tell apart spaces used as part of a name or as separator, you are in trouble. Shell interpreters are such places. I can come up with so many examples where having to selectively quote names&#8230; You need to quote &#8220;c:\program files\&#8221;, but quoting &#8220;*.txt&#8221; would stop the globber in Unix shells to expand the command line. When you use options, should you quote them as a whole, only the value ? Some programs would require /f=&#8221;x y.txt&#8221; while some others would require &#8220;/f=x y.txt&#8221;.</p>
<p>It&#8217;s easy for you to say &#8220;get rid of all programs that do not properly handle spaces in the filenames in their command lines&#8221;, but how do you actually do that in practice when you need to maintain legacy applications ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1305126">
				<div id="div-comment-1305126" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">morlamweb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1305126">
			August 3, 2017 at 10:32 am</a>		</div>

		<p>@Stephan Leclercq: so, you start the discussion on spaces in file names and paths, and then expand it to include backslashes and colons?  How does that make sense?  Colons and slashes have long-established roles to play in file paths and are fundamentally different from spaces.</p>
<p>Applications have had decades to get on board the spaces-in-file-paths train.  There&#8217;s no going back now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1305226">
				<div id="div-comment-1305226" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stéphan Leclercq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1305226">
			August 4, 2017 at 8:02 am</a>		</div>

		<p>Nice way of not answering the question, thanks. There are some characters that you cannot use in file names. Colons, slash, backslash, greater than, smaller than. For a regular user, there is no fundamental reason why you can&#8217;t use them, and people have come to accept that &#8220;because this is computer stuff&#8221;. What is so special about spaces, except  that you  can&#8217;t see  nor hear  them and  so cannot  easily tell  the difference  between no  space, one space  and two consecutive  spaces, scratching your head on why you cannot open your file. Raymond&#8217;s week of batch is filled with examples of programs that behave strangely in presence of spaces, it wasn&#8217;t worth the headaches of understanding why a poorly written BAT stops working because an unrelated poorly written BAT just created a file named &#8220;c:\program&#8221;. Just explain to users that spaces are not allowed in file names just as they are not allowed in email addresses and they will go along just fine.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1304315">
				<div id="div-comment-1304315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Muzer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304315">
			July 31, 2017 at 7:37 am</a>		</div>

		<p>People have justified the placing of redirection operators at arbitrary points on the line by saying it can make pipelines look neater. Eg something like:</p>
<p>outfile</p>
<p>Not sure if this was considered at the time or just a good reason in retrospect.</p>
<p>(I also find it useful to write things like:</p>
<p>echo &gt;&amp;2 some stuff<br />
echo &gt;&amp;2 some much longer stuff</p>
<p>&#8230;rather than:</p>
<p>echo some stuff &gt;&amp;2<br />
echo some much longer stuff &gt;&amp;2</p>
<p>&#8230;as it means all the redirections line up and it&#8217;s much more obvious if you miss one).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1304335">
				<div id="div-comment-1304335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304335">
			July 31, 2017 at 7:49 am</a>		</div>

		<p>Arguably the &#8220;stupid idea&#8221; was to use &#8220;set&#8221; as a sort of hash-define, rather than as a &#8220;let&#8221; alias, if you see what I mean. (Still an identical issue across both DOS and Unix, I believe.)  A reasonable parser (for some value of &#8220;reasonable&#8221;) would be able to correctly handle the token-pair representing redirection &#8212; this pair being the redirection operator and the path-name.  No need to &#8220;strip it out,&#8221; or at least none until the whole rule/line has been parsed.</p>
<p>Then again, the resource restrictions faced by either early Unix shells or the original DOS batch language were pretty extreme.  A full-scale parser with a complex error-handling system was clearly out of the question.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1304415">
				<div id="div-comment-1304415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304415">
			July 31, 2017 at 9:32 am</a>		</div>

		<p>On the other hand, treating it as a macro preprocessor lets you do things like &#8220;set options=&#8211;long &#8211;list &#8211;of &#8211;options&#8221; followed by &#8220;some-command $options blah blah&#8221;.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1304445">
				<div id="div-comment-1304445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304445">
			July 31, 2017 at 10:56 am</a>		</div>

		<p>By a mysterious coincidence, I read just today of a shell that treats $variable expansions as single units by default, and has special syntax $@variable for “exploding”, i.e. splicing the elements of a list variable into the list where the variable is mentioned.</p>
<p><a href="https://elvish.io/ref/language.html#use-explosion" rel="nofollow">https://elvish.io/ref/language.html#use-explosion</a></p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1304555">
				<div id="div-comment-1304555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304555">
			August 1, 2017 at 6:03 am</a>		</div>

		<p>Splatting/exploding parameters is actually quite a common feature. Lots of mainstream languages support it for good reason. Perl, python, PowerShell to name just a few.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-3 parent" id="comment-1304486">
				<div id="div-comment-1304486" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304486">
			July 31, 2017 at 3:59 pm</a>		</div>

		<p>I suspect (without thinking too hard about it) that using [b]set[/b] as an aliasing device would also allow you to declare that long list of options.  Or indeed any other similar requirement.</p>
<p>Essentially, it&#8217;s all up to the back-end of the parser, isn&#8217;t it?  Once you&#8217;ve identified your command, and accepted the fact that there is an [b]%alias%[/b] construct following it, all you really have to do is to expand the alias.</p>
<p>The difference between this and a define-macro usage is that you are doing the expansion at the appropriate time.</p>
<p>(Having said which, since AFAIK spaces were not allowed in FAT path-names, the issue obviously did not arise.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1304516">
				<div id="div-comment-1304516" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304516">
			July 31, 2017 at 8:52 pm</a>		</div>

		<p>Apparently they were allowed, but almost nothing supported them. <a href="https://blogs.msdn.microsoft.com/oldnewthing/20090709-00/?p=17563/" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20090709-00/?p=17563/</a></p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1304817">
				<div id="div-comment-1304817" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304817">
			August 1, 2017 at 7:55 pm</a>		</div>

		<p>Most DOS system utilities, let alone applications, wouldn&#8217;t handle spaces (the quoting system only appeared in Windows 95), so putting spaces in a filename was a recipe for disaster! I accidentally put a space in a file (I think it was using GW-BASIC, but the details are fuzzy now), and the only way of doing anything with it was to &#8220;REN FILE?NAME FILENAME&#8221;. However, Alt-255 was a handy way to put a pseudo-space in a file name.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1304365">
				<div id="div-comment-1304365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304365">
			July 31, 2017 at 8:04 am</a>		</div>

		<p>Regarding stupid features: the customers stupid idea was not to enclose all pathnames in quotes (except in the SET statement).<br />
<a href="https://support.microsoft.com/en-us/kb/102739" rel="nofollow">https://support.microsoft.com/en-us/kb/102739</a> is about 25 years old</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1304485">
				<div id="div-comment-1304485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Koopa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304485">
			July 31, 2017 at 3:23 pm</a>		</div>

		<p>whenever i see paths not quoted, i stop looking any further, quote them and run again.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1304645">
				<div id="div-comment-1304645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304645">
			August 1, 2017 at 9:49 am</a>		</div>

		<p>Did you fix the unquoted pathname in an out-of-process COM server of Windows Defender that was introduced with the Creators Update already?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1304385">
				<div id="div-comment-1304385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304385">
			July 31, 2017 at 9:05 am</a>		</div>

		<p>&#8220;ObSnark &#8211; if DOS was actually influenced by &#8216;sh&#8217;, command options would have been preceded by &#8216;-&#8216;, and the path separator would have been &#8216;\&#8217;.&#8221;</p>
<p>The key word was &#8220;influenced&#8221;. Another, perhaps more important influence, was IBM&#8217;s JCL, which used &#8216;/&#8217; to introduce parameters. DOS 1 inherited that, and consequently when DOS 2 introduced sub-directories it had to use &#8216;\&#8217;.</p>
<p>Yes, it is all rather sad. No, MS still haven&#8217;t finished that time-machine yet.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1304425">
				<div id="div-comment-1304425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304425">
			July 31, 2017 at 9:48 am</a>		</div>

		<p>Every time I see such things or have to read old batch scripts I&#8217;m so happy that I can use PowerShell for all scripts these days. Yes poor soul if you have to support Vista you&#8217;re screwed, but if not and you&#8217;re writing a new script there is just really no reason to write it as a batch script instead of in PowerShell*. </p>
<p>Hell at work we&#8217;ve been gradually replacing all the old build scripts with PowerShell replacements over the last few years and it has made life tremendously better. Particularly being able to host PowerShell modules on our company NuGet server is great for shared functionality.</p>
<p>*wrappers to simplify calling the script excluded.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1304435">
				<div id="div-comment-1304435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304435">
			July 31, 2017 at 10:33 am</a>		</div>

		<p>I, for one, am excited for batch week</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1304437">
				<div id="div-comment-1304437" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304437">
			July 31, 2017 at 10:41 am</a>		</div>

		<p>Also it is interesting that the early sh had a hard-coded search path</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1 parent" id="comment-1304496">
				<div id="div-comment-1304496" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304496">
			July 31, 2017 at 4:44 pm</a>		</div>

		<p>Helpful tips for quoting paths:</p>
<p>1. Since BAT/CMD file arguments can be paths in quotes, but you can&#8217;t be sure about them, you can unquote them and requote where necessary by using tilde:</p>
<p>%~1 &#8211; will give you the first parameter unquoted.</p>
<p>2. If you have to invoke CMD.EXE explicitly and supply it a command filename, be aware that it cannot handle the quoted filename there. You&#8217;ll have to convert it to short path.</p>
<p>3. If you *have* to use unquoted name somewhere, you can make a BAT subroutine (call of the internal label) to convert it to short name which doesn&#8217;t require quotes.</p>
<p>As a brag, I wrote the entire script to index PDBs sources for Git, as a CMD file. Although I later rewrote most of it in Bash, to allow parallel invocation of git commands, to speed it up.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1304575">
				<div id="div-comment-1304575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304575">
			August 1, 2017 at 7:18 am</a>		</div>

		<p>For point 2 you might think you need some kind of elaborate quoting but you don&#8217;t.  This works:</p>
<p>cmd /C &#8220;&#8221;bat spc.bat&#8221; &#8220;p1 spc&#8221; &#8220;p2 spc&#8221;&#8221;</p>
<p>Other weirdness:  If &#8220;bat spc.bat&#8221; contains</p>
<p>echo %1<br />
echo %2<br />
echo %*</p>
<p>Try running:</p>
<p>cmd /C &#8220;bat spc.bat&#8221; bad^^^^ param</p>
<p>The ^s eat one of the newlines and you get:</p>
<p>bad@echo param<br />
bad param</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1304576">
				<div id="div-comment-1304576" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304576">
			August 1, 2017 at 7:20 am</a>		</div>

		<p>Oops!  Each of those echoes should be preceded by an @.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1305085">
				<div id="div-comment-1305085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1305085">
			August 3, 2017 at 2:23 am</a>		</div>

		<p>Might be worth noting that a few OEMs and a lot of administrators explicitly disable short file names in policy. Your comment is literally the first time I&#8217;ve heard someone bring up short names in years.</p>
<p>If you&#8217;re using a fundamentally broken program (anything that doesn&#8217;t support quoted LFNs), you&#8217;re definitely in the weeds of creating a local environment workaround, though. If short names aren&#8217;t available, you get into having to rename a file, or symlink it, or stage it into a temp folder&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1304535">
				<div id="div-comment-1304535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304535">
			August 1, 2017 at 12:09 am</a>		</div>

		<p>Only the smartest and most elaborate (and therefore often the most unobtrusive) programs are able to handle unquoted file names with spaces — the most recent one I&#8217;m able to test right now is notepad.exe from Win7/SP1.</p>
<p>Woohoo, batch weeek !!!</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1304666">
				<div id="div-comment-1304666" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304666">
			August 1, 2017 at 10:02 am</a>		</div>

		<p>While NOTEPAD.exe handles both quoted and unquoted pathnames with and without spaces, quite some DLLs invoked via RUNDLL32.exe fail with quoted pathnames in their command line.<br />
Try for example RUNDLL32.exe CRYPTEXT.dll,CryptExtOpenCer &#8220;.CER&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1305095">
				<div id="div-comment-1305095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1305095">
			August 3, 2017 at 2:47 am</a>		</div>

		<p>RUNDLL32 works mostly on hopes and prayers if the API isn&#8217;t actually designed for it, and even if it is, not all APIs are created equal. Some can handle quoted filenames, some expect a single unquoted filename even for names with spaces (which will work!).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1304537">
				<div id="div-comment-1304537" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304537">
			August 1, 2017 at 3:33 am</a>		</div>

		<p>Redirection operators can appear almost anywhere in a line&#8230; but I once accidentally wrote timeout/t 1&gt;nul but that doesn&#8217;t do what I want of course,</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1304865">
				<div id="div-comment-1304865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170731-00/?p=96715#comment-1304865">
			August 2, 2017 at 3:17 am</a>		</div>

		<p>&#8230; as you can see when you read the next episode. Spooky!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

