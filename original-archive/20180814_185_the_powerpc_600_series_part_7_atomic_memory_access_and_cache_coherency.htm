<html>
<head>
<title>The PowerPC 600 series, part 7: Atomic memory access and cache coherency</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The PowerPC 600 series, part 7: Atomic memory access and cache coherency</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 14, 2018 / year-entry #185</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180814-00/?p=99485</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">How to avoid a break-up.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
On the PowerPC 600 series,
memory accesses to suitably-aligned locations by a single register
are atomic,&sup1;
meaning that even in the face of a conflicting operation on another
processor, the result will be the entire previous value or the entire
final value, never a mix of the two.
</p>
<p>
To perform atomic update operations (load-modify-store, also known
as interlocked operations),
you use the <code>lwarx</code> and <code>stwcx.</code> instructions:
</p>
<pre>
    lwarx   rd, ra/0, rb      ; load rd from ra/0 + rb and reserve
    stwcx.  rd, ra/0, rb      ; store rd conditionally to ra/0 + rb, update cr0
</pre>
<p>
Note that the only supported addressing mode is <code>x</code>.
No plain instruction, and no <code>u</code> forms.
</p>
<p>
The <code>lwarx</code> instruction loads a word and creates a reservation
which monitors the memory for changes.
Any modification to that address or an address nearby causes the
reservation to be lost.
The definition of "nearby" is left up to the processor.
</p>
<p>
The <code>stwcx.</code> instruction tries to store <var>rd</var>
to memory.
The store will succeed if the reservation is still in effect
and the store is to the same address as the most recent <code>lwarx</code>.
The result of the operation is reported in the <var>eq</var>
bit of <var>cr0</var>:
<var>eq</var> is set on success and clear on failure.
The instruction also updates the other bits of <var>cr0</var>
by clearing the
<var>lt</var> and <var>gt</var> bits and
capturing the summary overflow bit.
</p>
<p>
Note that the <code>stwcx.</code> instruction ends with a dot
because it implicitly updates <var>cr0</var>.
There is no undotted form.
</p>
<p>
Regardless of whether the store succeeded, the reservation is cleared.
</p>
<p>
If you attempt to store back to a location different from
the most recent preceding <code>lwarx</code>,
and the reservation is still valid,
the store might or might not succeed, and the <var>eq</var> bit
will be unpredictable; it need not reflect the actual success of the store.
So don't do that.&sup2;
</p>
<p>
If you've seen the other RISC architecture atomic operations,
this should feel very familiar.
Here's a sample interlocked increment:
</p>
<pre>
    ; atomically increment the word stored at address r3
loop:
    lwarx   r4, 0, r3         ; load with reservation
    addi    r4, r4, 1         ; increment
    stwcx.  r4, 0, r3         ; store conditional
    bne-    loop              ; if failed (unlikely), try again
    ; on exit r4 contains incremented value
</pre>
<p>
You are allowed to abandon a reservation.
For example, a compare-exchange starts with a reservation,
but if the value is incorrect, it just gives up without ever
storing anything.
</p>
<pre>
    ; if the word at r3 is equal to r4, then replace it with r5
loop:
    lwarx   r6, 0, r3         ; load with reservation
    cmpw    r6, r4            ; contains correct value?
    bne-    stop              ; if not, then give up
    stwcx.  r5, 0, r3         ; store conditional
    bne-    loop              ; if failed (unlikely), try again
stop:
    ; r6 contains previous value stored at r3
</pre>
</p>
<p>
As noted above,
simple accesses to suitably-aligned locations are atomic,
and you can use
the <code>lwarx</code>/<code>stwcx.</code> instructions
to construct more complex atomic operations,
but none of those instructions
impose any memory ordering.
In practice, the interlocked operations will usually
erect a memory barrier before and/or after the atomic update.
</p>
<pre>
    sync                      ; full memory barrier
    isync                     ; acquire
    lwsync                    ; release
</pre>
<p>
The <code>sync</code> instruction is a full memory barrier.
</p>
<p>
The <code>isync</code> instruction officially discards prefetch,
but that has a side effect of preventing future memory operations
from starting (because they were discarded), which is effectively
an acquire.
You usually use it after taking a lock, so that reads intended to be
under the lock do not get advanced to before the lock is taken.
</p>
<p>
The <code>lwsync</code> waits for preceding loads and stores to
complete, but allows future loads to start.
You usually use it just before releasing a lock,
so that all accesses that were intended to be protected by the lock
are finished before the lock is dropped.
</p>
<p>
And then there's this guy:
</p>
<pre>
    eieio                     ; enforce in-order execution of I/O
</pre>
<p>
This instruction is so famous
<a HREF="https://en.wikipedia.org/wiki/Enforce_In-order_Execution_of_I/O">
it has its own Wikipedia page</a>.
Somebody worked really hard to
<a HREF="https://en.wikipedia.org/wiki/Old_MacDonald_Had_a_Farm">
backronym that mnemonic</a>.
It's intended as a memory barrier for memory-mapped I/O,
but it is generally useful as well.
It acts like a lightweight <code>lwsync</code>:
It ensures that all pending stores are completed,
but it does not prevent future loads from starting
or force preceding loads to complete.
You can use this just before exiting a lock if the purpose of the lock
was to update some data rather than to read some data.
The compiler, of course, doesn't usually have this level of insight into
your code, so you're unlikely to see this in practice.
</p>
<p>
There are other types of barriers but you're not likely to
encounter them.
There are also special instructions to tell the processor that
you've written new code to memory, so it should discard
any prefetch or instruction cache.
</p>
<p>
When reading code, you don't need to worry too much about the
distinctions between these different types of barriers.
You can assume that the compiler used the correct barrier.
(Well, unless you're chasing a compiler bug.)
</p>
<p>
The PowerPC permits implementations to have separate I-cache
and D-cache, so you cannot assume that writing code to memory
will immediately take effect at execution.
You have to explicitly tell the processor that instructions have
changed.
This is mostly relevant only for jitters, so I won't go into details.
I never had to debug a jitter on this guy,
and even if I were called upon to do it,
I'd just assume that whoever wrote the memory barrier stuff
knew what they were doing.
</p>
<p>
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180815-00/?p=99495">
Next time</a>,
we'll look at control flow instructions
and their absurd mnemonics.
</p>
<p>
&sup1;
Although not available in little-endian mode,
there are instructions in big-endian mode that can load and store
multiple registers.
Each individual register access is atomic if suitably aligned,
but the entire operation is not.
</p>
<p>
&sup2;
Interrupts and traps do not clear the reservation.
This means that if the operating system wants to perform a context switch,
it needs to perform a <code>stwcx.</code> to a harmless location
to force the reservation to be cleared.
Otherwise, the thread being switched to might be in the middle of
an atomic operation, and its <code>stwcx.</code> might succeed
based on the previous thread's reservation!
This is a rare case where you will intentionally perform a
<code>stwcx.</code> to an address that doesn't match the preceding
<code>lwarx</code>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1356595">
				<div id="div-comment-1356595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180814-00/?p=99485#comment-1356595">
			August 14, 2018 at 7:27 am</a>		</div>

		<p>You gotta love whoever decided the names of the PowerPC instructions. With all those incoherencies, and those punctuation marks (dots, dashes&#8230; are they taken from Morse code?) forming part of the instructions themselves. Lovely.</p>
<p>Sincerely, I expected the PowerPC to have a cleaner and more orthogonal instruction set. But taking into account its ancestry, it&#8217;s not surprising that it&#8217;s full of wrinkles.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1356635">
				<div id="div-comment-1356635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180814-00/?p=99485#comment-1356635">
			August 14, 2018 at 12:18 pm</a>		</div>

		<p>As to incoherencies, etc, I just fall back on this phrase: &#8220;A camel is a horse designed by a committee.&#8221; Half of the weirdness is probably because the committee couldn&#8217;t decide and said &#8220;ok, do both&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1356605">
				<div id="div-comment-1356605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180814-00/?p=99485#comment-1356605">
			August 14, 2018 at 8:34 am</a>		</div>

		<p>I&#8217;ve come to the conclusion that crazy people shouldn&#8217;t design CPUs.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fjeldse odd alt depth-2" id="comment-1356615">
				<div id="div-comment-1356615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Erik+F' rel='external nofollow' class='url'>Erik F</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180814-00/?p=99485#comment-1356615">
			August 14, 2018 at 11:11 am</a>		</div>

		<p>But these are the CPUs that are designed by *sane* people!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1356655">
				<div id="div-comment-1356655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180814-00/?p=99485#comment-1356655">
			August 14, 2018 at 1:58 pm</a>		</div>

		<p>The ISAs that Raymond has described in this quasi-series, are for regular CPUs, which are the tamest of the bunch! (With the exception of Itanium, which is High Weird by general-purpose CPU standards.)</p>
<p>Things really get bizarre once you go into the microcontroller or DSP / VLIW spaces.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zlynx odd alt thread-even depth-1" id="comment-1356645">
				<div id="div-comment-1356645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180814-00/?p=99485#comment-1356645">
			August 14, 2018 at 12:39 pm</a>		</div>

		<p>This is why people like RISC-V right now. It hasn&#8217;t had time to develop layers of crazy yet. Give it twenty years though&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

