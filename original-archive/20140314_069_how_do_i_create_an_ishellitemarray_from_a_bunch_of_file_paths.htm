<html>
<head>
<title>How do I create an IShellItemArray from a bunch of file paths?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I create an IShellItemArray from a bunch of file paths?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 14, 2014 / year-entry #70</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140314-00/?p=1503</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The IFile­Operation interface accepts bulk operations in the form of an IShell­Item­Array. So how do you take a list of file names and convert them into an IShell­Item­Array? There is no SHCreate­Shell­Item­Array­From­Paths function, but there is a SHCreate­Shell­Item­Array­From­ID­Lists, and we know how to convert a path to an ID list, namely via SHParse­Display­Name. So lets...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The <code>IFile&shy;Operation</code> interface accepts bulk operations
in the form of an <code>IShell&shy;Item&shy;Array</code>.
So how do you take a list of file names and convert them
into an
<code>IShell&shy;Item&shy;Array</code>?
</p>
<p>
There is no
<code>SHCreate&shy;Shell&shy;Item&shy;Array&shy;From&shy;Paths</code>
function, but there is a
<code>SHCreate&shy;Shell&shy;Item&shy;Array&shy;From&shy;ID&shy;Lists</code>,
and we know how to convert a path to an ID list,
namely via
<code>SHParse&shy;Display&shy;Name</code>.
So lets
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/08/04/9856634.aspx">
snap two blocks together</a>.
</p>
<pre>
#define UNICODE
#define <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/02/12/71851.aspx">_UNICODE</a>
#define STRICT
#define <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/01/24/10387757.aspx">STRICT_TYPED_ITEMIDS</a>
#include &lt;windows.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;wrl/client.h&gt;

// <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/05/20/135841.aspx">class CCoInitialize incorporated by reference</a>

template&lt;typename T&gt;
HRESULT CreateShellItemArrayFromPaths(
    UINT ct, T rgt[], IShellItemArray **ppsia)
{
 *ppsia = nullptr;

 PIDLIST_ABSOLUTE *rgpidl = new(std::nothrow) PIDLIST_ABSOLUTE[ct];
 HRESULT hr = rgpidl ? S_OK : E_OUTOFMEMORY;

 int cpidl;
 for (cpidl = 0; SUCCEEDED(hr) &amp;&amp; cpidl &lt; ct; cpidl++)
 {
  hr = SHParseDisplayName(rgt[cpidl], nullptr, &amp;rgpidl[cpidl], 0, nullptr);
 }

 if (SUCCEEDED(hr)) {
  hr = SHCreateShellItemArrayFromIDLists(cpidl, rgpidl, ppsia);
 }

 for (int i = 0; i &lt; cpidl; i++)
 {
  CoTaskMemFree(rgpidl[i]);
 }

 delete[] rgpidl;
 return hr;
}
</pre>
<p>
The
<code>Create&shy;Shell&shy;Item&shy;Array&shy;From&shy;Paths</code>
template function takes an array of paths and starts by creating
a corresponding array of ID lists.
(If you're feeling fancy, you can
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/05/03/10415778.aspx">
use a file system bind context to make simple ID lists</a>.)
It then pumps this array into the
<code>SHCreate&shy;Shell&shy;Item&shy;Array&shy;From&shy;ID&shy;Lists</code>
function to get the item array.
</p>
<p>
Using a template allows you to pass an array of <i>anything</i>
as the array of paths, as long as it has a conversion to
<code>PCWSTR</code>.
So you can pass
an array of <code>PCWSTR</code> or
an array of <code>PWSTR</code> or
an array of <code>BSTR</code> or
an array of <code>CCom&shy;Heap&shy;Ptr&lt;wchar_t&gt;</code> or
an array of <code>CStringW</code>
or whatever else floats your boat.
</p>
<p>
Let's take this function out for a spin.
</p>
<pre>
int __cdecl wmain(int argc, wchar_t **argv)
{
 CCoInitialize init;

 Microsoft::WRL::ComPtr&lt;IShellItemArray&gt; spsia;
 Microsoft::WRL::ComPtr&lt;IFileOperation&gt; spfo;

 if (SUCCEEDED(CreateShellItemArrayFromPaths(
                      argc - 1, argv + 1, &amp;spsia)) &amp;&amp;
     SUCCEEDED(CoCreateInstance(__uuidof(FileOperation), nullptr,
                      CLSCTX_ALL, IID_PPV_ARGS(&amp;spfo)))) {
  spfo-&gt;DeleteItems(spsia.Get());
  spfo-&gt;PerformOperations();
 }

 return 0;
}
</pre>
<p>
The main program first treats the command line arguments
as a list of absolute file paths
and uses our new helper function to create a shell item array
from them.
It then passes the shell item array to the
<code>IFile&shy;Operation::Delete&shy;Items</code> method
to delete all the items.
</p>
<p>
No magic here.
Just taking the pieces available and combining them in a
relatively obvious way.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1112593">
				<div id="div-comment-1112593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140314-00/?p=1503#comment-1112593">
			March 14, 2014 at 7:18 am</a>		</div>

		<p>IFileOperation::DeleteItems is also documented to accept a IPersistIDList and I assume this is more efficient than creating an array that you are just going to throw away?</p>
<div class="post">[<em>But IPersistIDList represents only one item, which doesn&#39;t help if you want to delete multiple. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1112603">
				<div id="div-comment-1112603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jschroedl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140314-00/?p=1503#comment-1112603">
			March 14, 2014 at 7:45 am</a>		</div>

		<p>Very nice &#8211; love the shell articles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1112623">
				<div id="div-comment-1112623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">T</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140314-00/?p=1503#comment-1112623">
			March 14, 2014 at 7:53 am</a>		</div>

		<p>Looks handy, but may I ask why you&#39;re naming variables like this? ppsia, rgt, cpidl, rgpidl&#8230; Is it really a matter of getting used to? Because to me, it looks like deliberately obfuscated code.</p>
<div class="post">[<em>The shell historically uses so-called Hungarian Notation. ppsia = pointer to pointer to shell item array. rgt = range (array) of t. cpidl = count of pointer to id list. rgpidl = range (array) of pointer to id list. Once you get used to it, you spend pretty much zero time thinking about variable names. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1112663">
				<div id="div-comment-1112663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140314-00/?p=1503#comment-1112663">
			March 14, 2014 at 9:02 am</a>		</div>

		<p>@Raymond, but Hungarian notation is prefixing names with type indications (mostly worthless for an explicitly statically typed language, anyway). &nbsp;Where are the actual names?</p>
<div class="post">[<em>They don&#39;t have names. If there&#39;s only one item array, you don&#39;t need to give it a name. It&#39;s just &quot;the item array&quot;. A non-Hungarian system would call it shellItemArray. Hungarian calls it sia. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1112673">
				<div id="div-comment-1112673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140314-00/?p=1503#comment-1112673">
			March 14, 2014 at 9:16 am</a>		</div>

		<p>@T, that&#39;s Hungarian notation ( <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/aa260976.aspx">msdn.microsoft.com/&#8230;/aa260976.aspx</a> yes, that&#39;s 1999), and Hungarian notation alone.</p>
<p>ppsia: [p]ointer to [p]ointer to I[S]hell[I]tem[A]rray</p>
<p>rgt: [r]an[g]e of [T]</p>
<p>cpidl: [c]ount of [p]ointer to an item [id]entifier [l]ist (Introduction to the Shell Namespace <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/cc144090.aspx">msdn.microsoft.com/&#8230;/cc144090.aspx</a> ; ITEMIDLIST structure <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb773321.aspx">msdn.microsoft.com/&#8230;/bb773321.aspx</a> )</p>
<p>rgpidl: [r]an[g]e of [p]ointer to an item [id]entifier [l]ist</p>
<p>This is a little program, so I guess you&#39;ll have to &quot;just suck it&quot; ( <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2013/06/10/10424662.aspx">blogs.msdn.com/&#8230;/10424662.aspx</a> ).</p>
<p>But if it were actually committed/checked-in code, it would certainly ring a bell aound some places where you can&#39;t even code an iteration in a slightly different way, much less not have descriptive parameters and variables.</p>
<p>I guess this is the software parallel of mathematical symbols, but they &quot;solve&quot; their 1 character limit and lack of namespaces with extra alphabets and typesetting.</p>
<p>Oh wait, there&#39;s APL which allows you to do both!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1112703">
				<div id="div-comment-1112703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140314-00/?p=1503#comment-1112703">
			March 14, 2014 at 12:37 pm</a>		</div>

		<p>@Raymond: I meant in a loop of course:</p>
<p>for (int i = 1; i &lt; 3; ++i)</p>
<p>{</p>
<p>TCHAR path[MAX_PATH+20];</p>
<p>wsprintf(path+GetTempPath(MAX_PATH, path), _T(&quot;file%d.tmp&quot;), i);</p>
<p>IPersistIDList*ppil = CreateIPersistIDList(path);</p>
<p>if (ppil) spfo-&gt;DeleteItems(ppil), ppil-&gt;Release();</p>
<p>}</p>
<p>spfo-&gt;PerformOperations();</p>
<p>Maybe IFileOperation has a vector of the different operations and in the end this method has more overhead, I don&#39;t know&#8230;</p>
<div class="post">[<em>Interesting, hadn&#39;t occurred to me to submit multiple operations. Yeah, that should work fine. But then I don&#39;t get to show how to create an array of items (sob). -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1112793">
				<div id="div-comment-1112793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140314-00/?p=1503#comment-1112793">
			March 15, 2014 at 4:57 am</a>		</div>

		<p>I thought it was interesting that you&#39;re using C++ features like scope guards (CCoInitialize), template functions and smart pointers, but you&#39;re using new[]/delete[] over vector&lt;&gt;. I&#39;m guessing this is for the (std::nothrow): is most of the code you write kernel-side with strict rules about not leaking or even throwing C++ exceptions?</p>
<p>Heck, if you made it a vector&lt;unique_ptr&lt;IDLIST_ABSOLUTE, CoTaskMemFree&gt;&gt; you wouldn&#39;t even have to manually free them, but annoyingly unique_ptr doesn&#39;t let you (safely) get a pointer to it&#39;s member so you&#39;d have to initialize a raw then assign to the unique_ptr, which sucks.</p>
<div class="post">[<em>My background is in Win32 platform code, and in Win32, C++ exceptions are not allowed to escape because they are not part of the ABI. I don&#39;t know how this code is going to be reused, so I play it safe and write exception-free code. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

