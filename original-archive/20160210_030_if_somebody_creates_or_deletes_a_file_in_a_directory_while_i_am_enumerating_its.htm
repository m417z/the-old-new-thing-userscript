<html>
<head>
<title>If somebody creates or deletes a file in a directory while I am enumerating its contents, what happens?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If somebody creates or deletes a file in a directory while I am enumerating its contents, what happens?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 10, 2016 / year-entry #31</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160210-00/?p=93011</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It's not really predictable.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Suppose you are enumerating the contents of a directory via
<code>Find&shy;First&shy;File</code> and
<code>Find&shy;Next&shy;File</code>,
and while your loop is running,
somebody creates or deletes a file in that directory.
What can be said about the result of the enumeration?
</p>
<p>
Are you guaranteed that the effect of the creation or deletion
will not be visible in the enumeration?
In other words,
will the enumeration show the contents of the directory at the
time the enumeration started,
even if the directory contents change later?
Or maybe the guarantee is the opposite:
Are you guaranteed that
the deleted file will be removed from the enumeration
and the created file will be added to it?
</p>
<p>
Actually, there is no guarantee either way.
</p>
<p>
What you can say is that files which were neither
created nor deleted during the enumeration will be enumerated.
If a file is created during the enumeration,
it is unspecified whether it will appear in the enumeration.
Similarly, if a file is deleted during the enumeration,
it is unspecified whether it will be removed from the enumeration.
(And if a file is deleted, then recreated,
it may show up more than once!)
</p>
<p>
We noted some time ago that
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2006/04/06/569873.aspx">
the <code>Find&shy;First&shy;File</code> function does some batching</a>,
and
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/10/24/10459773.aspx">
the
<code>Find&shy;First&shy;File&shy;Ex</code> function lets you influence
the size of the batches</a>.
If a file is deleted while it is sitting in a batch,
then the
<code>Find&shy;Next&shy;File</code> function will return it,
because it is just handing data out from the most recent batch.
And if an error occurs during the enumeration,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/06/12/10533529.aspx">
you should just give up, because there's no meaningful recovery</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1226541">
				<div id="div-comment-1226541" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160210-00/?p=93011#comment-1226541">
			February 10, 2016 at 7:06 am</a>		</div>

		<p>&#8220;Are you guaranteed that the deleted file will be removed from the enumeration&#8230;.&#8221;</p>
<p>Doesn&#8217;t this violate causality? A file that has already been returned by a call could be deleted before the enumeration is complete!</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-2" id="comment-1226573">
				<div id="div-comment-1226573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160210-00/?p=93011#comment-1226573">
			February 10, 2016 at 9:02 am</a>		</div>

		<p>Find­Next­File/FindClose cannot fail with a timeout, you could retrieve one file per day if you wanted to. Just having enumerate rights would allow people to prevent deletion of files if there was some kind of guarantee that the returned file was valid until the next call to FindNext/Close.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-odd thread-alt depth-1" id="comment-1226542">
				<div id="div-comment-1226542" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160210-00/?p=93011#comment-1226542">
			February 10, 2016 at 7:13 am</a>		</div>

		<p>And what if the ACL on the directory you are enumerating changes and no longer allows you to list the files? I&#8217;m guessing it will finish the enumeration every time because it probably has a open handle to the directory&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1226543">
				<div id="div-comment-1226543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160210-00/?p=93011#comment-1226543">
			February 10, 2016 at 7:35 am</a>		</div>

		<p>Now, the answer to that question *was* predictable :-) .</p>
<p>@skSdnW: my guess is you are right: in Windows, permissions are usually checked at the handle opening or the operation start. It&#8217;s a good balance between security and performance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1226581">
				<div id="div-comment-1226581" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160210-00/?p=93011#comment-1226581">
			February 10, 2016 at 9:56 am</a>		</div>

		<p>Just be happy that Win32 doesn&#8217;t have (as far as I know) seekdir()&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-zlynx odd alt depth-2" id="comment-1226611">
				<div id="div-comment-1226611" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160210-00/?p=93011#comment-1226611">
			February 10, 2016 at 12:58 pm</a>		</div>

		<p>I was under the impression that most modern Unix filesystems cheat seekdir() anyway, often just returning to the beginning. Since your code has to assume that a file may show up more than one time anyway&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1226582">
				<div id="div-comment-1226582" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Clarkstone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160210-00/?p=93011#comment-1226582">
			February 10, 2016 at 10:07 am</a>		</div>

		<p>Another way of looking at it AIUI: there is no point guaranteeing that directory enumeration is atomic unless your API provides other, greater, atomic facilities. Even if there were a guarantee that enumerating directory contents was atomic, files could still be added/deleted before you used the results. You could use an atomicity guarantee when e.g. checking that XML files and JSON files come in matched pairs, but if something is changing the directory under you then the property you are checking will be changing between true and false continually anyway.</p>
<p>(And if you want to check whether you have had a consistent view while enumerating, Windows provides mechanisms monitor a directory to see if it has changed during some period of time.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1226661">
				<div id="div-comment-1226661" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160210-00/?p=93011#comment-1226661">
			February 11, 2016 at 6:44 am</a>		</div>

		<p>That is a lot of overhead in the user code setting a monitor, changing all file access to use shadow copy would be interesting (but probably impractical).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1226591">
				<div id="div-comment-1226591" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160210-00/?p=93011#comment-1226591">
			February 10, 2016 at 11:32 am</a>		</div>

		<p>Question:<br />
Is it safe to use DeleteFile() for an enumerated file within enumeration loop?<br />
Or maybe first, the list of enumerated files is to be created and then,<br />
after FindClose() was called &#8211; call DeleteFile() for each file name?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1226631">
				<div id="div-comment-1226631" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160210-00/?p=93011#comment-1226631">
			February 10, 2016 at 3:16 pm</a>		</div>

		<p>I can&#8217;t say for me but it&#8217;s worked for me for ages and ages. I think MS would find the backwards compatibility rather bad to try to change it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joe_woodbury even depth-2" id="comment-1226701">
				<div id="div-comment-1226701" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/JoeWoodbury' rel='external nofollow' class='url'>JoeWoodbury</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160210-00/?p=93011#comment-1226701">
			February 11, 2016 at 9:57 am</a>		</div>

		<p>My experience is that you can delete a file. But don&#8217;t rename one else funny things may happen.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jan-ringos odd alt thread-even depth-1" id="comment-1226601">
				<div id="div-comment-1226601" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Jan+Ringo%C5%A1' rel='external nofollow' class='url'>Jan Ringoš</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160210-00/?p=93011#comment-1226601">
			February 10, 2016 at 11:36 am</a>		</div>

		<p>Can Kernel Transaction Manager be somehow of help here?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1226623">
				<div id="div-comment-1226623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://killprog.com' rel='external nofollow' class='url'>Killer{R}</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160210-00/?p=93011#comment-1226623">
			February 10, 2016 at 2:11 pm</a>		</div>

		<p>I guess one who worried about consistency of dir enum may execute enumeration twice and use intersection of their results (taking into account file IDs too). I think this will give set of files that are known at least once coesisted all together. But still no guarantee that things will not change until moment you will use this information for whatever else purpose.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1226641">
				<div id="div-comment-1226641" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dynconcepts.com' rel='external nofollow' class='url'>David V. Corbin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160210-00/?p=93011#comment-1226641">
			February 10, 2016 at 3:47 pm</a>		</div>

		<p>&#8220;What you can say is that files which were neither created nor deleted during the enumeration will be enumerated&#8221;? Is this 100% true. When the iteration is &#8220;batching&#8221; how does it keep track of the current position? This could be critical. For example</p>
<p>Directory contains 30 files.</p>
<p>1) Get first 10 files<br />
2) Get second 10 files<br />
3 ) Get final 10 files</p>
<p>Now if a file in the first group of 10 is deleted, that could &#8220;move&#8221; all of the files down one position. Thus file #11 would move from the second group (which has not been processed) into the first group (which has alreadyhbeen processed)&#8230;.and thus &#8220;missed&#8221;&#8230;.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1226651">
				<div id="div-comment-1226651" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160210-00/?p=93011#comment-1226651">
			February 10, 2016 at 9:53 pm</a>		</div>

		<p>It would only be missed if the batching worked by numerical indices, which it almost certainly does not.  That is just not workable for a number of reasons.  Instead the system probably maintains a stable pointer to the last entry seen so that the next batch can start after that.  By stable pointer I mean something that doesn&#8217;t change when other entries are added or removed, such as a unique ID, or some other means known internally by the filesystem.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk odd alt thread-odd thread-alt depth-1" id="comment-1226831">
				<div id="div-comment-1226831" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160210-00/?p=93011#comment-1226831">
			February 12, 2016 at 10:14 am</a>		</div>

		<p>Once an enumeration returns a file object, you don&#8217;t know that the file is still there when you try to use it.   Enumerations are helpful, of course, but they are not a guarantee that the object will be there forever. </p>
<p>Which makes me wonder why anyone would worry about whether the results of the enumeration would contain a file that appeared or disappeared DURING the enum.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

