<html>
<head>
<title>Non-psychic debugging: Looking for leaked objects by their vtable</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Non-psychic debugging: Looking for leaked objects by their vtable</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 24, 2014 / year-entry #22</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A programmer on the GHI team reported that they were hitting an assertion failure using an internal library and asked for help debugging it. ABC!CFactoryBase::AssertZeroRef+0x2e ABC!CFactoryBase::Unregister+0x1c ABC!CWidgetFactory::Unregister+0x2d DEF!CWidgetManager::Uninitialize+0x4a DEF!CWidget::`scalar deleting destructor'+0xd ABC!operator delete()+0x6 ABC!CFrame::Destroy+0xb ABC!CFrame::WndProc+0x362 USER32!InternalCallWinProc+0x23 USER32!UserCallWinProcCheckWow+0x121 USER32!DispatchClientMessage+0x12d USER32!__fnEMPTY+0x24 ntdll!KiUserCallbackDispatcher+0x3d USER32!NtUserDestroyWindow+0xa ABC!CFrame::WndProc+0x34 USER32!InternalCallWinProc+0x23 USER32!UserCallWinProcCheckWow+0x121 USER32!DispatchMessageWorker+0x411 USER32!DispatchMessageW+0x10 GHI!wWinMain+0xa0 GHI!__wmainCRTStartup+0x153 KERNEL32!BaseThreadInitThunk+0xe ntdll!__RtlUserThreadStart+0x23 ntdll!_RtlUserThreadStart+0x1b I didn't work on...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A programmer on the GHI team
reported that they were hitting an assertion failure
using an internal library and asked for help debugging it.
</p>
<pre>
ABC!CFactoryBase::AssertZeroRef+0x2e
ABC!CFactoryBase::Unregister+0x1c
ABC!CWidgetFactory::Unregister+0x2d
DEF!CWidgetManager::Uninitialize+0x4a
DEF!CWidget::`scalar deleting destructor'+0xd
ABC!operator delete()+0x6
ABC!CFrame::Destroy+0xb
ABC!CFrame::WndProc+0x362
USER32!InternalCallWinProc+0x23
USER32!UserCallWinProcCheckWow+0x121
USER32!DispatchClientMessage+0x12d
USER32!__fnEMPTY+0x24
ntdll!KiUserCallbackDispatcher+0x3d
USER32!NtUserDestroyWindow+0xa
ABC!CFrame::WndProc+0x34
USER32!InternalCallWinProc+0x23
USER32!UserCallWinProcCheckWow+0x121
USER32!DispatchMessageWorker+0x411
USER32!DispatchMessageW+0x10
GHI!wWinMain+0xa0
GHI!__wmainCRTStartup+0x153
KERNEL32!BaseThreadInitThunk+0xe
ntdll!__RtlUserThreadStart+0x23
ntdll!_RtlUserThreadStart+0x1b
</pre>
<p>
I didn't work on this internal library, but on the other hand
I'm also not afraid to look inside and around.
</p>
<p>
The assertion failure said,
"Assertion failed:
All widgets from a factory
must be destroyed before you can unregister
the factory."
</p>
<p>
The factory does not keep a list of all the widgets it created.
It merely keeps a count and asserts that the count is zero
when the factory is unregistered."
</p>
<p>
A good start would be to find the widgets that are still outstanding,
so we can try to figure out why they weren't destroyed.
</p>
<pre>
0:000&gt; u ABC!CWidget::CWidget
...
1071158b mov     dword ptr [esi],offset ABC!CWidget::`vftable' (<font COLOR=red>106da08c</font>)
</pre>
<p>
This gives us the widget vtable, so a memory scan should find
all the outstanding widgets.
</p>
<pre>
0:000&gt; !heap -search 106da08c
    _HEAP @ 950000
      HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state
        01eb12d8 000e 0000  [00]   <font COLOR=red>01eb12e0</font>    00064 - (busy)
          ABC!CWidget::`vftable'
</pre>
<p>
Okay, so a search of the heap shows that there is only one widget,
and it is at <code>0x01eb12e0</code>.
Let's see what that widget can tell us about who it is.
</p>
<pre>
0:000&gt; dt ABC!CWidget 01eb12e0
   +0x000 __VFN_table : 0x106da08c
   +0x004 m_uBucketId      : 2
   +0x008 m_rgClassData    : 
   +0x050 m_rgSharedData   :
   +0x05c m_fLocked        : 1
   +0x060 <font COLOR=red>m_pszName</font>        : 0x01eba4c0  "<font COLOR=red>GHI_widget</font>"
</pre>
<p>
Hey, how about that.
The widget conveniently has the name
<code>GHI_widget</code>,
which seems like a pretty good sign that the GHI component
leaked a widget.
</p>
<p>
Notice that I didn't use any special knowledge of Widgets,
Widget Factories,
the ABC component,
or the GHI component.
All I did was take the error message that said,
"You leaked a widget" and said,
"Maybe I should go look for that widget.
That may tell us something."
I disassembled the widget constructor to look for a unique tag
common to all widgets,
and then scanned memory looking for that vtable.
From the found object, I dumped its member variables looking
for some sort of clue as to its identity,
and by an amazing stroke of luck,
the widget had a name.
</p>
<p>
Back in my trainee days in tech support,
if a customer asked a question that we couldn't answer,
we escalated the problem to the next higher level and were
encouraged to tag along and learn from the subject matter expert.
That way, when the problem came up again, we could solve it ourselves.
</p>
<p>
In other words, we were encouraged not to run away from information,
but to run <i>toward</i> it.
</p>
<p>
(It helped that we weren't graded on "number of cases closed per second.")
</p>
<p>
One of the most important skills in a programmer is the willingness
to look at code that you didn't write.
When I joined Microsoft,
this instinct to run toward information
led me to watch as somebody else debugged a problem and learn from them.
I would then go back and read the code that they debugged
to see how much of it I could understand.
And if I ran into a problem of my own,
I dove in and read the source code to the component that
was giving me trouble,
even if it was not a component I remotely had any responsibility for.
Maybe I could figure out what it was doing,
maybe I couldn't,
but at least I gave it a try.
And when I went to another developer with my theory,
I was told either that my understanding was correct,
or that I had gotten it wrong and was told the correct answer.
Either way, I learned a little bit more that day.
</p>
<p>
<b>Exercise</b>:
If the widget had not had a name,
what would be a reasonable next step in the investigation?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1101843">
				<div id="div-comment-1101843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1101843">
			January 24, 2014 at 7:05 am</a>		</div>

		<p>Look which DLL&#39;s BSS segment it is in perhaps. Or run with a tagging heap.</p>
<div class="post">[<em>This is an object created from a factory (presumably not a singleton factory) so the object won&#39;t be in a static segment. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1101853">
				<div id="div-comment-1101853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1101853">
			January 24, 2014 at 7:05 am</a>		</div>

		<p>If only one was leaked, the code path was called once, so there is a good chance that it is from initialisation code. Which means a good chance that if you run it twice, it will get the same address. Breakpoint on memory, re-run and look at the call stack. (Turn on debug heap though).</p>
<div class="post">[<em>Nice idea, but it didn&#39;t help in this case. It was a code path that got hit only once during the scenario, but it wasn&#39;t initialization. (Besides, the initialization of the offending component happens deep into the scenario, so the heap is pretty randomized at that point.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1101863">
				<div id="div-comment-1101863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1101863">
			January 24, 2014 at 7:06 am</a>		</div>

		<p>For a plan B I would check those &quot;bucketId&quot; and &quot;VFN_table&quot; members. They look like they could contain similarly identifying data.</p>
<div class="post">[<em>In this case, VFN_table says &quot;I am a CWidget&quot; (0x106da08c) so you didn&#39;t learn much from that. But the other members may indeed provide some clues. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1101903">
				<div id="div-comment-1101903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Spike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1101903">
			January 24, 2014 at 7:19 am</a>		</div>

		<p>I&#39;d search memory for an instance of the address of the Widget to try to find who&#39;s holding it.</p>
<div class="post">[<em>Good idea. It didn&#39;t help in this case (it was a flat-out leak) but it&#39;s a good trick to keep in mind. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1101913">
				<div id="div-comment-1101913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">William</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1101913">
			January 24, 2014 at 7:34 am</a>		</div>

		<p>It strikes me that the absence of a name can be as identifying as the presence of one; an empty string is still a string. Look for widget creations that don&#39;t specify a name; if only a few such creations (or, ideally, just one) exist, your search space for potentially leaked widgets is sharply reduced.</p>
<div class="post">[<em>Good one. I hadn&#39;t thought of that. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1101963">
				<div id="div-comment-1101963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1101963">
			January 24, 2014 at 8:05 am</a>		</div>

		<p>Would this work if Widget were the root of a class hierarchy? Objects of a derived class would have a different vtable, so one would have to check for all vtables of all possible derived classes&#8230;</p>
<div class="post">[<em>Yup, it wouldn&#39;t work if the leaked object was derived. We got lucky. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1101973">
				<div id="div-comment-1101973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1101973">
			January 24, 2014 at 8:18 am</a>		</div>

		<p>[This is an object created from a factory (presumably not a singleton factory) so the object won&#39;t be in a static segment. -Raymond]</p>
<p>But the pointer to it probably is. If it isn&#39;t the tagging heap will find who allocated the pointer, unless it&#39;s on the stack. If it&#39;s on the stack, a stack walk will.</p>
<div class="post">[<em>Oh, sorry. I thought the &quot;it&quot; you were referring to was the widget, not the pointer to the widget (which was never mentioned in the article). Yes, searching for the pointer, then seeing who holds that pointer would be something to try. (It didn&#39;t help in this case, but it was a good try.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1101993">
				<div id="div-comment-1101993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1101993">
			January 24, 2014 at 8:51 am</a>		</div>

		<p>I would hook the Widget factory constructor/destructor and log the stack frames when each was called. Assuming that the module which creates the Widget is responsible for destroying it, you&#39;d easily be able to see which module is creating too many Widgets.</p>
<p>If you also log the Widget pointers, you can match up the creations to the destructions, telling you what code is actually creating the leaking Widget(s).</p>
<p>This method eliminates the need for a lot of luck (the Widget has a name, the name is unique, the object isn&#39;t a subclass), but cannot be done post-mortem. If you can&#39;t repro the scenario, you can&#39;t do it.</p>
<div class="post">[<em>This was encountered in a stress run, so reproducibility is unknown but probably low. You will have to debug it post-mortem. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1102003">
				<div id="div-comment-1102003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1102003">
			January 24, 2014 at 9:02 am</a>		</div>

		<p>[This was encountered in a stress run, so reproducibility is unknown but probably low.]</p>
<p>I must be the only guy who designs repeatable stress runs.</p>
<div class="post">[<em>But if you run multiple stress tests simultaneously, you still get nonrepeatability. &quot;The video driver test just happened to perform a resolution change at the exact moment the UI test had the XYZ menu open, which exposed an unhandled condition in the menu code.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1102013">
				<div id="div-comment-1102013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tony Cox [MSFT]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1102013">
			January 24, 2014 at 9:11 am</a>		</div>

		<p>Joshua &#8211; it&#39;s certainly good to make your tests as close to 100% repeatable as possible, but it&#39;s not always possible, especially with stress tests. Often the kind of bugs you&#39;re looking for in stress runs are things like nasty race conditions, deadlocks, failure to handle system resource exhaustion, or bugs that only manifest when external operations start unexpectedly timing out. Those things often very from machine-to-machine and run-to-run just by their nature.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1102023">
				<div id="div-comment-1102023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1102023">
			January 24, 2014 at 9:23 am</a>		</div>

		<p>Edit the code to call _CrtDebugBreak if the passed-in name is &quot;GHI_widget&quot; then re-run the test&#8230; That&#39;s what I would do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1102033">
				<div id="div-comment-1102033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alois Kraus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1102033">
			January 24, 2014 at 9:36 am</a>		</div>

		<p>I would instrument the factory code and the dtor with ETW Events to track creation and destructions to check for any imbalances. Then enable the ETW provider with stack walking on all machines that execute the stress test. One further repro of it will suffice to get the root cause. If you do not want to change the code you could also use a hooking library when you have the symbols at hand to inject the etw events at runtime like here (<a rel="nofollow" target="_new" href="http://www.geekswithblogs.net/akraus1/archive/2014/01/03/155056.aspx">http://www.geekswithblogs.net/&#8230;/155056.aspx</a>).</p>
<p>When I only have a dump I would check who is referencing the widget address. If it is completly orphaned the garbage collector will take care ;-). Ups C++. Then I would stick to step one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1102063">
				<div id="div-comment-1102063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1102063">
			January 24, 2014 at 11:18 am</a>		</div>

		<p>This question is asked purely out of practical inexperience, but what tool do you use that lets you type !heap -search whatever and get the print-out that you posted?</p>
<div class="post">[<em><a href="http://msdn.microsoft.com/en-us/library/windows/hardware/ff551063(v=vs.85).aspx">Debugging Tools for Windows</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1102103">
				<div id="div-comment-1102103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1102103">
			January 24, 2014 at 12:10 pm</a>		</div>

		<p>@Raymond</p>
<p>I love this extension+script. Incredibly useful when &quot;I need to find these objects, but I don&#39;t actually know their names.&quot;</p>
<p><a rel="nofollow" target="_new" href="http://blogs.microsoft.co.il/sasha/2013/08/05/searching-and-displaying-c-heap-objects-in-windbg/">blogs.microsoft.co.il/&#8230;/searching-and-displaying-c-heap-objects-in-windbg</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1102133">
				<div id="div-comment-1102133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Name withheld</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1102133">
			January 24, 2014 at 12:36 pm</a>		</div>

		<p>Would performing heap -s 10eb12e0 (UserPtr) help identify another clue as to what could be holding this ABC!CWidget? Maybe whatever is holding it provides name or another clue as to why it is leaked?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1102153">
				<div id="div-comment-1102153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leif</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1102153">
			January 24, 2014 at 1:47 pm</a>		</div>

		<p>The final paragraphs of this post remind me of the early days of my career (also in tech support). I am also reminded of one of my greatest resentments throughout my career as a developer: I resent those coworkers who have an &quot;answers at the back of the book&quot; (or end of chapter) mentality. If the answer to their problem isn&#39;t immediately obvious, they throw their hands up and give up, and go looking for answers from the &quot;gurus&quot;. They never seem to become any more knowledgeable or skilled. Yet they somehow find their way onto development teams sometimes. Kindhearted gurus end up doing all their work for them. They are dead weight.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1102163">
				<div id="div-comment-1102163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1102163">
			January 24, 2014 at 1:55 pm</a>		</div>

		<p>Regarding the exercise:</p>
<p>I&#39;ll assume that the leaked CWidget&#39;s name is useless (not necessarily empty), since William pointed out that an empty string is still a string. I&#39;ll also assume that the other data members aren&#39;t much use either (without internal knowledge, at least).</p>
<p>At this point, I get the (probably bad) instinct to start diving into the internals on a small scale. Still, running with my instincts tells me to assume a few things from the context of this story.</p>
<p>1) A CFrame holds (zero or more) CWidgets.</p>
<p>2) A CWidget determines in it&#39;s destructor when to try to unregister the factory that created it.</p>
<p>3) A CFrame deletes all its CWidgets when it is destroyed, which involves enumerating over them.</p>
<p>I would try to walk the stack, grab the this pointer for the CWidget being deleted, and look at its state (and the code for the destructor) to try to determine why it&#39;s trying to unregister the factory. Failing that, I&#39;d grab the this pointer for the CFrame being destroyed and try to see why the enumeration hasn&#39;t gone over the leaked CWidget yet.</p>
<p>Regarding my proposed investigation:</p>
<p>Hmm… I assumed that the bug was in ABC or DEF (probably DEF). Additionally, assumption 3 (also 2) assumes quite a bit (mostly that deletion/destruction (as far as the factory is confirmed) is done by the CFrame) about the life cycle of a CWidget that could be wrong. The first mistake would lead me in the wrong direction, which immediately puts me on the side of &quot;I had gotten it wrong and was told the correct answer.&quot; Looking at your replies to the other comments now, I&#39;m getting more and more of a feeling that my assumptions about the life cycle of a CWidget are wildly wrong. Knowing a bit about that would probably have helped to avoid the mistake of assuming the bug was in DEF (or ABC), as well. As for why I made such assumptions, I think I was seeing the framework through Swing coloured glasses. Working with different GUI frameworks (and just working with them more) would probably help out with that.</p>
<p>Regarding the point of the post:</p>
<p>Yes, I absolutely agree. Sometimes it doesn&#39;t work out, but sometimes you just get lucky. And now that I&#39;m basically paraphrasing you I know that I&#39;ve over thought this post andIneedtowrapthisupbeforeImakeevenmoreofafooloutofmyself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1101883">
				<div id="div-comment-1101883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1101883">
			January 24, 2014 at 7:12 am</a>		</div>

		<p>I find it satisfying to dig into a failure and to find the source. I remember one time when one of our SW developers complained that hooking up the radio to the power amplifier (I live in the embedded world) caused the radio to crash and the problem must be with my FPGA in the PA.</p>
<p>I had access to the radio GPP source code and build tools, so I dug in at the source level and through layers of C++ full object-oriented code. I found that they had copied a module from a different product that didn&#39;t handle the differing protocol we used. It dereferenced a NULL pointer.</p>
<p>I had a big grin on my face when I pointed out the exact line in *their* source that was the real problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1102223">
				<div id="div-comment-1102223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1102223">
			January 24, 2014 at 6:48 pm</a>		</div>

		<p>&gt;Or run with a tagging heap.</p>
<p>The best would be to enable heap tracing. But it just doesn&#39;t work.</p>
<p>That would be GREAT if it worked. But there is a HARD limit on the heap trace size, and it&#39;s ridiculously small. Even in x64 Win212R2 it&#39;s equally ridiculously small. There was a time I needed to find out why there was a heap leak in 2012R2 (and not in 2012), and could not use the heap trace because it would fill way before the leak happened.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1102233">
				<div id="div-comment-1102233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1102233">
			January 24, 2014 at 7:30 pm</a>		</div>

		<p>@Leif</p>
<p>100% agree. There&#39;s a place for going to ask someone, but too many people never want to learn ANYTHING about their jobs.</p>
<p>I very often draw an inverse correlation between the amount of education someone willingly pays for and their level of willingness to actually attempt to solve problems on their own&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1102263">
				<div id="div-comment-1102263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Timo Kinnunen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1102263">
			January 25, 2014 at 3:24 am</a>		</div>

		<p>Only thing I can think of that hasn&#39;t been mentioned yet is looking at the memory page where the leaked CWidget was allocated. The CWidget itself looks to be intact so the allocator likely hasn&#39;t freed or reused the memory. Maybe there&#39;s a chain of pointers to this allocator that can pinpoint the module responsible for destroying it. </p>
<p>Another variation, looking at adjacent objects in the memory block. They could have been allocated from the same place the widget was allocated and still alive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1102283">
				<div id="div-comment-1102283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1102283">
			January 25, 2014 at 8:10 am</a>		</div>

		<p>I&#39;d look at the problem from the other end. You know what has leaked, and there&#39;s most likely only a handful of lines of code that actually allocate one of those objects. If you examine them all carefully you might be able to spot the cause of the leak.</p>
<p>Of course doing things that way round, even if you spot something that looks like it could cause a leak, you can&#39;t always be certain that you&#39;ve found the actual cause.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1102353">
				<div id="div-comment-1102353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Quietust</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1102353">
			January 26, 2014 at 5:09 pm</a>		</div>

		<p>If the library had been built with RTTI included, tracing backwards from the vtable pointer would lead you to a class name which might give you some identification for the leaked widget. Not much, mind you, but better than nothing at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1102593">
				<div id="div-comment-1102593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1102593">
			January 27, 2014 at 12:33 pm</a>		</div>

		<p>m_uBucketId=2 looks interesting to me and might be a container ID for the widget. I&#39;d look at the code that handles that id and see if it led me to the component owning the leaked widget.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1102783">
				<div id="div-comment-1102783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140124-00/?p=1983#comment-1102783">
			January 28, 2014 at 6:50 am</a>		</div>

		<p>@Adam</p>
<p>99% of the time, we don&#39;t have, or don&#39;t have access to, the source. Lucky to get symbols, if anything.</p>
<p>The real fun starts when you don&#39;t even have public symbols, and have to trace through the disassembly just to get enough information to force the people who caused the problem to admit there&#39;s a problem and fix it.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

