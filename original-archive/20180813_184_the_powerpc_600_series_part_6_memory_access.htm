<html>
<head>
<title>The PowerPC 600 series, part 6: Memory access</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The PowerPC 600 series, part 6: Memory access</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 13, 2018 / year-entry #184</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180813-00/?p=99475</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Load 'em up.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The PowerPC 600 series has two addressing modes.
We will demonstrate them with the <code>lwz</code> instruction,
which loads a word from memory.
</p>
<pre>
    lwz     rd, disp16(ra/0) ; load word from memory at ra/0 + (int16_t)disp16
    lwzx    rd, ra/0, rb     ; load word from memory at ra/0 + rb
</pre>
<p>
The regular load instruction fetches
a word from a memory location specified by a register
and a signed 16-bit displacement.
By convention, if no displacement is given,
it is assumed to be zero.
The Windows disassembler displays the displacement in hex
without a <code>0x</code> prefix, but I'm going to put the prefix in
to minimize confusion.
</p>
<p>
The indexed load instruction adds two registers to determine the
address from which to load the word.
Note that you cannot use <var>r0</var> as the base register for
the load;
if you try to use it, it comes out as zero.&sup1;
</p>
<p>
Both of the instructions can be suffixed with <code>u</code>
("update") to set the <var>ra</var> register equal to the effective
address of the load.
(If an exception occurs on the memory access, the <var>ra</var>
register is not updated.
This allows the instruction to be restarted.)
</p>
<pre>
    lwzu    rd, disp16(ra)   ; load word from memory at ra + (int16_t)disp16
                             ; and then set ra equal to ra + (int16_t)disp16
                             ; ra may not be r0 or rd


    lwzxu   rd, ra, rb       ; load word from memory at ra + rb
                             ; and then set ra equal to ra + rb
                             ; ra may not be r0 or rd
</pre>
<p>
The <var>ra</var> register cannot be <var>r0</var> because <var>r0</var>
acts like the zero register during effective address calculations,
and it would make no sense to update the zero register.
The <var>ra</var> register cannot be
the same register as <var>rd</var> because that would
create a conflict between the two output registers.
</p>
<p>
The <code>lwzu</code> instruction is handy if you're walking through
an array, since it lets you step to the next item and fetch a word from
it in a single instruction.
</p>
<p>
Okay, so here are the ways you can load data from memory.
I will present only the basic form of the instruction,
but understand that
<code>x</code>,
<code>u</code>,
and
<code>xu</code>
forms are also available.
</p>
<pre>
    lbz     rd, disp16(ra/0) ; load byte and zero extend
    lhz     rd, disp16(ra/0) ; load halfword and zero extend
    lwz     rd, disp16(ra/0) ; load word and zero extend

    lha     rd, disp16(ra/0) ; load halfword and sign extend
                             ; (a = "arithmetic")
</pre>
<p>
There is a bonus sign-extending load of halfwords,
but sadly no sign-extending load of bytes.
</p>
<p>
Why does the <code>lwz</code> instruction say "and zero extend" even though
there's nowhere to extend to?
Because there would be a place to extend to if running on a 64-bit version
of the processor.
(Windows NT runs the processor in 32-bit mode, but the 64-bit
registers are available if the processor supports them.)
</p>
<p>
There is a corresponding set of store instructions.
</p>
<pre>
    stb     rd, disp16(ra/0) ; store byte
    sth     rd, disp16(ra/0) ; store halfword
    stw     rd, disp16(ra/0) ; store word
    ; also "x", "u", and "xu" variants.
</pre>
<p>
In particular, the <code>stwu</code> instruction is
extremely handy when setting up your stack frame,
which we'll see later when we learn about software conventions.
</p>
<p>
All loads and stores should be to suitably-aligned locations.
The architecture permits but does not require
the processor to support unaligned memory access in little-endian mode,
and even if it does support unaligned loads, it might do so only partially.
(For example, it might support unaligned loads provided they do not span
multiple cache lines.)
As noted earlier, if an unaligned store crosses into an invalid page,
the processor is permitted to store the valid part
before the exception is raised.
If the processor does not support an unaligned operation, it will trap,
and the kernel will emulate it.
</p>
<p>
There are no special instructions for assisting with unaligned loads.
You're on your own:
</p>
<pre>
    ; load halfword unaligned from n(r3) into r4 with zero extension
    ; requires a scratch register r5.
    lbz     r4, n(r3)         ; r4 = least significant byte
    lbz     r5, n+1(r3)       ; r5 = most significant bytes
    rlwimi  r4, r5, 8, 0, 23  ; merge together

    ; load halfword unaligned from n(r3) into r4 with sign extension
    ; requires a scratch register r5.
    lbz     r4, n(r3)         ; r4 = least significant byte
    lba     r5, n+1(r3)       ; r5 = most significant bytes (sign extended)
    rlwimi  r4, r5, 8, 0, 23  ; merge together

    ; load word unaligned from n(r3) into r4
    ; requires a scratch register r5.
    lbz     r4, n(r3)         ; r4 = least significant byte
    lbz     r5, n+1(r3)       ; r5 = next most significant byte
    rlwimi  r4, r5, 8, 16, 23 ; merge together
    lbz     r5, n+2(r3)       ; r5 = next most significant byte
    rlwimi  r4, r5, 16, 8, 15 ; merge together
    lbz     r5, n+3(r3)       ; r5 = most significant byte
    rlwimi  r4, r5, 24, 0, 7  ; merge together
</pre>
<p>
To load an unaligned value, you load up the individual bytes
and merge them using <code>rlwimi</code>.
</p>
<pre>
    ; store halfword unaligned from r4 to n(r3)
    stb     r4, n(r3)         ; store least significant byte
    rlwinm  r4, r4, 24, 0, 31 ; rotate right 8 bits
    stb     r4, n+1(r3)       ; store next significant byte
    rlwinm  r4, r4, 8, 0, 31  ; rotate back to original value
                              ; (in case you still need the value)

    ; store word unaligned from r4 to n(r3)
    stb     r4, n(r3)         ; store least significant byte
    rlwinm  r4, r4, 24, 0, 31 ; rotate right 8 bits
    stb     r4, n+1(r3)       ; store next significant byte
    rlwinm  r4, r4, 24, 0, 31 ; rotate right 8 bits
    stb     r4, n+2(r3)       ; store next significant byte
    rlwinm  r4, r4, 24, 0, 31 ; rotate right 8 bits
    stb     r4, n+3(r3)       ; store next significant byte
    rlwinm  r4, r4, 24, 0, 31 ; rotate back to original value
                              ; (in case you still need the value)
</pre>
<p>
To store an unaligned value, you store the individual bytes.
Since the <code>stb</code> instruction stores the last significant
byte, each byte of value takes its turn in the least significant position.
In practice, you are more likely to see the compiler
extract the bytes into a separate register
to avoid long dependency chains,
at the cost of an additional register.
</p>
<pre>
    ; store halfword unaligned from r4 to n(r3), using r5 as scratch
    stb     r4, n(r3)         ; store least significant byte
    rlwinm  r5, r4, 24, 0, 31 ; extract next significant byte
    stb     r5, n+1(r3)       ; store next significant byte

    ; store word unaligned from r4 to n(r3), using r5 as scratch
    stb     r4, n(r3)         ; store least significant byte
    rlwinm  r5, r4, 24, 0, 31 ; extract next significant byte
    stb     r5, n+1(r3)       ; store next significant byte
    rlwinm  r5, r4, 16, 0, 31 ; extract next significant byte
    stb     r5, n+2(r3)       ; store next significant byte
    rlwinm  r5, r4,  8, 0, 31 ; extract next significant byte
    stb     r5, n+3(r3)       ; store next significant byte
</pre>
<p>
Okay, back to addressing modes:
Treating <var>r0</var> as zero for effective address computations
gives you absolute addressing to the lowest and highest
32<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090611-00/?p=17933">KB</a>
of memory.
This isn't particularly useful in Windows NT,
but I can see how it would be handy in an embedded system
where there is no virtual memory.
You could map the ROM to the low 32KB and RAM to the high 32KB,
and now you have absolute addressing to your entire system.
</p>
<p>
If you need absolute addressing to anything outside the top and
bottom 32KB of address space, you'll have to do something else.
One way is to build up the address as a 32-bit constant, like we
saw earlier.
But the PowerPC takes a different approach:
By convention, the <var>r2</var> register contains a value called
the <i>table of contents</i>.
But there are some
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180814-00/?p=99485">
other topics I want to get through</a>
before I dig
into the Windows NT software conventions,
so you'll have to be a bit patient.
</p>
<p>
<b>Bonus chatter</b>:
There are additional instructions available in big-endian mode
for loading and storing multiple registers,
but they are not available in little-endian mode,
so I won't cover them.
</p>
<p>
&sup1;
Though if you really wanted to perform a load from <var>r0</var>,
I guess you could use the indexed load
</p>
<pre>
    lwzx    rd, 0, r0       ; load word from memory at 0 + r0
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1356555">
				<div id="div-comment-1356555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180813-00/?p=99475#comment-1356555">
			August 13, 2018 at 12:31 pm</a>		</div>

		<p>Come to think of it, that absoute addressing to the bottom 32k is quite usable. On NT3.5 and NT4, you could reliably map the bottom 32k by requesting a memory mapping at address 1. It would be a lot more sane to place it at 4k though. I could see the compiler getting smart and placing all the small globals in the .exe (can&#8217;t do this for .dll for the obvious reason) starting at 32k and working its way down to lower addresses. This would make globals much faster as there&#8217;s no fixup for them and no need to load a register with the global pointer either.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1356665">
				<div id="div-comment-1356665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Julien Oster</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180813-00/?p=99475#comment-1356665">
			August 14, 2018 at 5:25 pm</a>		</div>

		<p>Mapping anything in the first few bytes of the virtual address space is asking for trouble. Straight up NULL isn&#8217;t the only common result of  dereferencing NULL pointers, e.g. foo-&gt;bar might as well access 0x12.</p>
<p>Of course there&#8217;s no clear &#8220;good&#8221; value for the zero region. The first page (e.g. 4k on many architectures) used to be common. That will cover almost all structs and small to moderate sized arrays, and is consistent with your later suggestion. In 64bit systems nowadays, it&#8217;s convenient to just leave the first 4GB unmapped, that at least covers dereferencing NULL pointers of anything whose size fits into a 32bit unsigned integer, with the added benefit of making any stray 32bit value (which ints still are in (L)LP64, including Windows) an invalid address.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-odd thread-alt depth-1" id="comment-1356625">
				<div id="div-comment-1356625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180813-00/?p=99475#comment-1356625">
			August 14, 2018 at 12:07 pm</a>		</div>

		<p>&#8220;This isn&#8217;t particularly useful in Windows NT, but I can see how it would be handy in an embedded system where there is no virtual memory. &#8221; Don&#8217;t forget low memory globals in classic Mac OS.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

