<html>
<head>
<title>SHAutoComplete giveth, and SHAutoComplete taketh away</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>SHAutoComplete giveth, and SHAutoComplete taketh away</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 21, 2010 / year-entry #149</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100521-00/?p=13963</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The SH­Auto­Complete function lets you attach autocomplete functionality to an edit control, and there are flags that describe what sources you want the autocomplete to draw from. If you call SH­Auto­Complete a second time, the second set of flags replace the original flags. The flags do not accumulate. For example, if you first call SH­Auto­Complete(SHACF_FILESYS_ONLY),...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The <code>SH&shy;Auto&shy;Complete</code> function lets you attach
autocomplete functionality to an edit control,
and there are flags that describe what sources you want
the autocomplete to draw from.
If you call <code>SH&shy;Auto&shy;Complete</code> a second time,
the second set of flags replace the original flags.
The flags do not accumulate.
For example, if you first call
<code>SH&shy;Auto&shy;Complete(SHACF_<wbr>FILESYS_<wbr>ONLY)</wbr></wbr></code>, and then
you later call
<code>SH&shy;Auto&shy;Complete(SHACF_<wbr>URLHISTORY)</wbr></code>,
the result is that the autocompletion uses only the URL history.
</p>
<p>
This replacement behavior (as opposed to accumulation behavior)
is handy if you want to <i>remove</i> an autocompletion that you
previously added.
You just call <code>SH&shy;Auto&shy;Complete</code> a second time
and leave off the flags for autocomplete sources you don't want.
There's a catch, though:
If you want to turn off everything, then you cannot pass zero,
because that gets interpreted as <code>SHACF_<wbr>DEFAULT</wbr></code>.
You have to pass a nonzero value,
and fortunately there's a handy nonzero value which means
<i>Turn off everything</i>:
<code>SHACF_<wbr>AUTOSUGGEST_<wbr>FORCE_<wbr>OFF</wbr></wbr></wbr></code>.
</p>
<p>
Let's illustrate this technique by disabling autocomplete
in the common dialog, a problem which
commenter Ian mistakenly
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/12/11/9193695.aspx#9201524">
solved by modifying a global setting</a>.
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;shlwapi.h&gt;
#include &lt;commctrl.h&gt;
#include &lt;commdlg.h&gt;
#include &lt;dlgs.h&gt;

UINT_PTR CALLBACK HookProc(HWND hdlg, UINT uMsg,
                           WPARAM wParam, LPARAM lParam)
{
    switch (uMsg) {
    case WM_INITDIALOG:
        PostMessage(hdlg, WM_APP, 0, 0);
        break;
    case WM_APP:
        SHAutoComplete(
          (HWND)SendDlgItemMessage(GetParent(hdlg), cmb13,
                                   CBEM_GETEDITCONTROL, 0, 0),
          SHACF_AUTOSUGGEST_FORCE_OFF);
        break;
    }
    return 0;
}

int WINAPI WinMain(HINSTANCE hinst, HINSTANCE hinstPrev,
                   LPSTR lpCmdLine, int nShowCmd)
{
    TCHAR szFile[MAX_PATH];
    szFile[0] = TEXT('\0');
    OPENFILENAME ofn = { sizeof(ofn) };
    ofn.hInstance = hinst;
    ofn.lpstrFilter = TEXT("All files\0*.*\0");
    ofn.lpstrFile = szFile;
    ofn.nMaxFile = MAX_PATH;
    ofn.Flags = OFN_ENABLEHOOK | OFN_EXPLORER;
    ofn.lpfnHook = HookProc;
    GetOpenFileName(&amp;ofn);
    return 0;
}
</pre>
<p>
The hook procedure uses the <code>SH&shy;Auto&shy;Complete</code>
function to turn off autocompletion on the file name
edit control in the common dialog.
There are a few annoying bits that I have to get through
before I finally make that <code>SH&shy;Auto&shy;Complete</code>
call:
First I have to find the edit control,
which means finding the combo box and then asking the combo box
for the interior edit control.
(Fortunately, this is already called out in the documentation
for <code>SH&shy;Auto&shy;Complete</code>, so I didn't have to puzzle over
it for long.)
And second, 
I couldn't disable autocomplete directly in <code>WM_<wbr>INITDIALOG</wbr></code>
because that happens too early in the common file dialog
initialization process.
Instead, I post myself a message and do the "final initialization"
later.
(This I discovered by trial and error.)
</p>
<p>
And there you have it, a common dialog box with no autocomplete.
</p>
<p>
<b>Update</b>:
<a HREF="http://www.deltics.co.nz/blog/">
Joylon Smith</a>
points out that
<a HREF="http://www.deltics.co.nz/blog/?p=630">
the documentation for <code>SHAutoComplete</code> explicitly
cautions against calling it more than once on the same window</a>
because it results in a memory leak.
</p>
<p>
That caution was written based on information I provided
back in Windows&nbsp;XP.
The memory leak was fixed in Windows Vista, but the documentation
was not updated to match.
So please mentally insert
"On versions of Windows prior to Windows Vista (and versions
of Windows Server prior to Windows Server 2008)" at the start of
that paragraph.
A doc change request has also been submitted, so hopefully the
revised documentation will appear soon.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-833993">
				<div id="div-comment-833993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100521-00/?p=13963#comment-833993">
			May 24, 2010 at 3:38 pm</a>		</div>

		<p>&quot;If you call SH&shy;Auto&shy;Complete a second time&quot; but MSDN says &quot;SHAutoComplete should not be called more than once with the same HWND&quot;, so is it really safe to call again or not?</p>
<div class="post">[<i>Whoa, slow down people, I have two weeks worth of updates/revisions to apply! I&#39;ve updated the article to clarify that the solution requires Windows Vista. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-834033">
				<div id="div-comment-834033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100521-00/?p=13963#comment-834033">
			May 24, 2010 at 8:10 pm</a>		</div>

		<p>&quot;That caution was written based on information I provided back in Windows XP. The memory leak was fixed in Windows Vista, but the documentation was not updated to match. So please mentally insert &quot;On versions of Windows prior to Windows Vista (and versions of Windows Server prior to Windows Server 2008)&quot; at the start of that paragraph. A doc change request has also been submitted, so hopefully the revised documentation will appear soon. &quot;</p>
<p>BTW, on the matter of this, I hate how often in recent versions of the Windows SDK the behavior in the latest version of Windows is mentioned first, then there is something like &quot;Windows Server 2003 and earlier:&quot; then the old behaviors is mentioned, often when the opposite is better.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-834073">
				<div id="div-comment-834073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100521-00/?p=13963#comment-834073">
			May 25, 2010 at 12:31 am</a>		</div>

		<p>Thanks so much for that, Raymond. I was never completely happy with my solution of temporarily modifying the global setting, as I indicated in my original comment.</p>
<p>This is the kind of thing I really appreciate about this blog. Thanks again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-834153">
				<div id="div-comment-834153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">WndSks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100521-00/?p=13963#comment-834153">
			May 25, 2010 at 4:16 am</a>		</div>

		<p>I assume there is no undocumented WM_GETIAUTOCOMPLETE that can be used on pre Vista to get a pointer to IAutoComplete[2] to avoid the leak? I&#39;m also guessing it uses SetWindowSubclass and friends to subclass the editbox, so getting the iface pointer ourself by using a offset from the subclassproc is doubly hard (I&#39;m guessing (A lot of guessing here) this thing is in a class, called CAutoComplete or something like that probably?) Would be nice if MS documented how to do it, even if it is ugly and uses hardcoded offsets or whatever so legacy platforms don&#39;t leak.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

