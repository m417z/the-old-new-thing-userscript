<html>
<head>
<title>Applying a permutation to a vector, part 2</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Applying a permutation to a vector, part 2</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 3, 2017 / year-entry #2</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">To swap or not to swap. That is the question.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We left off our study of the
<code>apply_permutation</code> function
by wondering which version is bettern:
the moving version of the swapping version.
I'm not certain I have the answer,
but here's my analysis.
</p>
<p>
The first observation is that the standard swap
function performs three move operations.
It basically goes like this:
</p>
<pre>
template&lt;class T&gt;
void std::swap(T&amp; a, T&amp; b)
{
 T t{std::move(a));
 a = std::move(b);
 b = std::move(t);
}
</pre>
<p>
So if you're counting move operations,
you need to count a swap as three moves.
</p>
<p>
But wait, you say.
It is legal for types to provide
a custom swap operation.
However, even those custom swap operations
are still going to perform three move operations.&sup1;
The customization is just to reduce the memory
requirements.
While the standard swap will move the entire instance
into a temporary,
a custom swap will move individual members.
</p>
<pre>
struct sample
{
 std::string x, y, z;
};
</pre>
<p>
In the above example,
assuming the obvious definition of the move assignment operator,
the standard swap would
move all three strings from the first <code>sample</code>
into a temporary <code>sample</code>,
then move the three strings from the second <code>sample</code>
into the first,
and then move the three strings from the temporary <code>sample</code>
into the second.
But a custom swap would look like this:
</p>
<pre>
void swap(sample&amp; a, sample&amp; b)
{
 swap(a.x, b.x);
 swap(a.y, b.y);
 swap(a.z, b.z);
}
</pre>
<p>
This version performs three swaps consecutively.
The total number of move operations is the same;
they just happen in a different order.
</p>
<table BORDER="1" STYLE="border-collapse: collapse" CELLPADDING="3">
<tr>
<th>standard swap</th>
<th>custom swap</th>
</tr>
<tr>
<td>
        <code>t.x = std::move(a.x);</code><br>
        <code>t.y = std::move(a.y);</code><br>
        <code>t.z = std::move(a.z);</code><br>
        <code>a.x = std::move(b.x);</code><br>
        <code>a.y = std::move(b.y);</code><br>
        <code>a.z = std::move(b.z);</code><br>
        <code>b.x = std::move(t.x);</code><br>
        <code>b.y = std::move(t.y);</code><br>
        <code>b.z = std::move(t.z);</code>
    </td>
<td>
        <code>t&nbsp;&nbsp; = std::move(a.x);</code><br>
        <code>a.x = std::move(b.x);</code><br>
        <code>b.x = std::move(t);</code><br>
        <code>t&nbsp;&nbsp; = std::move(a.y);</code><br>
        <code>a.y = std::move(b.y);</code><br>
        <code>b.y = std::move(t);</code><br>
        <code>t&nbsp;&nbsp; = std::move(a.z);</code><br>
        <code>a.z = std::move(b.z);</code><br>
        <code>b.z = std::move(t);</code>
    </td>
</tr>
</table>
<p>
The member-by-member swap of the custom swap function
will probably exhibit better locality than the
full-class swap used by the standard swap.
The member-by-member swap also requires fewer temporary
resources than the full-class swap
(here: one string compared to three).
</p>
<p>
Okay, so either way, a swap costs three moves.
Therefore, if we are just counting moves,
the swapping version of
<code>apply_permutation</code> performs
almost three times as many move operations
as the explicit-temporary version.
</p>
<p>
The counter-argument to "too many move operations"
is that move operations are relatively inexpensive.
A typical move operation transfers ownership of
resources from one instance to another.
No new allocation needs to be done;
the existing allocation just needs to be transferred
across.
So counting your move operations is like counting pennies:
Even if you manage to save a hundred of them,
that's still only one dollar.
</p>
<p>
But I think the winning argument for moving rather
than swapping is the copyable-but-not-movable object.
If the object doesn't have a move constructor/move
assignment operator, but it does have a copy constructor/copy
assignment operator,
then the algorithm will still work,
but it will
<a HREF="http://en.cppreference.com/w/cpp/concept/MoveAssignable">
fall back to using the
copy operation in the absence of a move
operation</a>.
</p>
<p>
And copy operations are not cheap.
</p>
<p>
So now instead of saving pennies, we are saving dollars,
and those dollars quickly add up.
So this argues in favor of the moving version rather
than the swapping version.&sup2;
</p>
<p>
Like I said at the start, this is my analysis.
It could be wrong.
Let me know.
</p>
<p>
Next time, we'll look at how this function could
be generalized.
</p>
<p>
&sup1;
Yes, there may be super-optimized custom swaps
that are actually perform less work than the
standard swap,
but I think those types of custom swaps are
relatively uncommon.
</p>
<p>
&sup2;
On the third hand (fourth, fifth? how many am I up to?)
if the object is copyable but not movable,
but it also has a custom swap function,
then that swap function is going to be much less expensive
than copying.
(Because the custom swap function is going to exchange
contents rather than making three expensive copies.)
You'll encounter objects of this ilk if they predate
C++11, since it is C++11 that introduced the concept
of movability.
So now, if you have an object that is copyable,
efficiently swappable, and not movable, you are better
off using the swapping version again.
Another case where the swapping version may be better
is if the vector uses a proxy iterator, such as
<code>vector&lt;bool&gt;</code>.
</p>
<p>
So now I'm not sure any more.
Maybe the way to go is to do compile-time detection of
whether the object has a custom swap function.
If so, then use the swapping version.
If not, then use the moving version.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1279065">
				<div id="div-comment-1279065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279065">
			January 3, 2017 at 7:42 am</a>		</div>

		<p>Oh nice in looking up information to make a comment on this I found out that c++17 is introducing an <code>is_swappable</code> type trait[1]. That coupled with <code>is_move_assignable</code>[2] you could in theory template all this out and have it SFINAE to victory in most cases.</p>
<p>[1] <a href="http://en.cppreference.com/w/cpp/types/is_swappable" rel="nofollow">http://en.cppreference.com/w/cpp/types/is_swappable</a><br />
[2] <a href="http://en.cppreference.com/w/cpp/types/is_move_assignable" rel="nofollow">http://en.cppreference.com/w/cpp/types/is_move_assignable</a></p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1279145">
				<div id="div-comment-1279145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279145">
			January 3, 2017 at 10:02 am</a>		</div>

		<p>Close. The is_swappable reports true if std::swap is a match. But I want to detect whether there is a <u>custom</u> swap.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude even depth-3 parent" id="comment-1279176">
				<div id="div-comment-1279176" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279176">
			January 3, 2017 at 11:45 am</a>		</div>

		<p>So <code>is_swappable</code> should work, assuming the type doesn&#8217;t resolve to a reference, CV qualified, or <code>void</code>. Assuming all of that <code>is_swappable</code> decays to <code>is_swappable_with</code> which infers if <code>swap(T,T);</code> is well formed after <code>using std::swap;</code>. Therefore Konieg lookup custom swaps should be inferred correctly by the trait.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4" id="comment-1279185">
				<div id="div-comment-1279185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279185">
			January 3, 2017 at 12:05 pm</a>		</div>

		<p>But I don&#8217;t want it to pick <code>std::swap</code>.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1279075">
				<div id="div-comment-1279075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Muzer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279075">
			January 3, 2017 at 7:55 am</a>		</div>

		<p>The last paragraph of footnote 2 sounds to me like a great example of a good use-case for template metaprogramming!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1279106">
				<div id="div-comment-1279106" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279106">
			January 3, 2017 at 8:45 am</a>		</div>

		<p>You don&#8217;t need to do compile-time detection for a custom swap(T&amp;a, T&amp;b).  Just do</p>
<p>{<br />
 using std::swap;<br />
 swap(a,b);<br />
}</p>
<p>and argument-dependent lookup will select a custom swap() if available, and std::swap if not.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1279116">
				<div id="div-comment-1279116" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279116">
			January 3, 2017 at 8:49 am</a>		</div>

		<p>(Not I assumend &#8220;compile time detection&#8221; meant some form of template-metaprogramming / SFINAE / std::enable_if technique, rather than the builtin language feature)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1279125">
				<div id="div-comment-1279125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Muzer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279125">
			January 3, 2017 at 9:32 am</a>		</div>

		<p>But his idea is that he&#8217;d use swap if a custom one is available, but not use swap at all otherwise.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1279117">
				<div id="div-comment-1279117" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279117">
			January 3, 2017 at 8:58 am</a>		</div>

		<p>The best part of reading this blog post is the smell of the pages of my old Programming Pearls (John Bentley) book, possibly unopened for over a decade. (Not that this has anything to do with solving this problem or with using using statements to help with Koenig lookup.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1279175">
				<div id="div-comment-1279175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279175">
			January 3, 2017 at 10:43 am</a>		</div>

		<p>&gt;super-optimized custom swaps that are actually perform less work than the standard swap</p>
<p>All STL containers do this. For std::string move needs to null out the moved-from string&#8217;s small string buffer, and for node-like containers map, set, list, unordered_map, and unordered_set the move constructor needs to allocate memory for a sentinel end() node in the moved-from container. Swap never needs to do these things.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1279195">
				<div id="div-comment-1279195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170103-00/?p=95105#comment-1279195">
			January 3, 2017 at 12:36 pm</a>		</div>

		<p>Why does std::string move need to null out the small string buffer?  Move just needs to leave the object in *a* valid state &#8211; not any particular valid state.  (In particular, not in the default constructed state).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

