<html>
<head>
<title>A big little program: Monitoring Internet Explorer and Explorer windows, part 2: Tracking navigations</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A big little program: Monitoring Internet Explorer and Explorer windows, part 2: Tracking navigations</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 13, 2013 / year-entry #159</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130613-00/?p=4093</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Okay, it's been a while since we set aside our Little Program to learn a bit about connection points and using dispatch interfaces as connection point interfaces. Now we can put that knowledge to use. Internet Explorer and Explorer windows fire a group of events known as DWeb­Browser­Events, so we just need to listen on...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Okay, it's been a while since we
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/06/10/10424662.aspx">
set aside our Little Program</a>
to learn a bit about
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/06/11/10424940.aspx">
connection points</a>
and
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/06/12/10425215.aspx">
using dispatch interfaces as connection point interfaces</a>.
Now we can put that knowledge to use.
</p>
<p>
Internet Explorer and Explorer windows fire a group of events known as
<a HREF="http://msdn.microsoft.com/library/aa768309">
<code>DWeb&shy;Browser&shy;Events</code></a>,
so we just need to listen on those events to follow
the window as it navigates around.
</p>
<p>
Take our 
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/07/23/54576.aspx">
scratch program</a>
and make these changes:
</p>
<pre>
<font COLOR=blue>#define <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/07/15/184076.aspx">UNICODE</a>
#define <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/02/12/71851.aspx">_UNICODE</a></font>
#define STRICT
<font COLOR=blue>#define <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/01/24/10387757.aspx">STRICT_TYPED_ITEMIDS</a></font>
#include &lt;windows.h&gt;
#include &lt;windowsx.h&gt;
#include &lt;ole2.h&gt;
#include &lt;commctrl.h&gt;
#include &lt;shlwapi.h&gt;

<font COLOR=blue>#include &lt;shlobj.h&gt;
#include &lt;atlbase.h&gt;
#include &lt;atlalloc.h&gt;
#include &lt;exdisp.h&gt;
#include &lt;exdispid.h&gt;</font>

...
// <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/06/12/10425215.aspx">DispInterfaceBase</a> incorporated by reference

<font COLOR=blue>void UpdateText(HWND hwnd, PCWSTR pszText);

class CWebBrowserEventsSink :
    public CDispInterfaceBase&lt;DWebBrowserEvents&gt;

public:
 CWebBrowserEventsSink(HWND hwnd) : m_hwnd(hwnd) { }

 IFACEMETHODIMP SimpleInvoke(
    DISPID dispid, DISPPARAMS *pdispparams, VARIANT *pvarResult)
 {
  switch (dispid) {
  case DISPID_NAVIGATECOMPLETE:
   UpdateText(m_hwnd, pdispparams-&gt;rgvarg[0].bstrVal);
   break;

  case DISPID_QUIT:
   UpdateText(m_hwnd, L"&lt;exited&gt;");
   Disconnect();
   break;
  }
  return S_OK;
 };

private:
 HWND m_hwnd;
};</font>
</pre>
<p>
Our event sink class listens for
<code>DISPID_<wbr>NAVIGATE&shy;COMPLETE</code>
and
<code>DISPID_<wbr>QUIT</code>
and updates the text with the new navigation location
or the string <code>L"&lt;exited&gt;"</code> if the
window exited.
In the exit case, we also disconnect from the connection
point to break the circular reference.
</p>
<p>
The IDL file for <code>Navigate&shy;Complete</code> says
</p>
<pre>
[id(DISPID_NAVIGATECOMPLETE), helpstring("...")]
void NavigateComplete([in] BSTR URL );
</pre>
<p>
Therefore, we know that the URL parameter arrives as
a <code>VT_<wbr>BSTR</code> in position zero,
so we can access it as
<code>pdispparams-&gt;<wbr>rgvarg[0].<wbr>bstrVal</code>.
</p>
<p>
That class is basically the guts of the program.
<a HREf="http://blogs.msdn.com/b/oldnewthing/archive/2003/11/12/55659.aspx">
The rest is scaffolding</a>.
Like hooking up this guy to a listview item
so it can report its findings somewhere.
</p>
<pre>
struct ItemInfo
{
 ItemInfo(HWND hwnd, IDispatch *pdisp)
  : hwnd(hwnd) {
  spSink.Attach(new(std::nothrow) CWebBrowsrEventsSink(hwnd));
  if (spSink) spSink->Connect(pdisp);
 }
 ~ItemInfo() { if (spSink) spSink->Disconnect(); }

 HWND hwnd;
 CComPtr&lt;CWebBrowserEventsSink&gt; spSink;
};

ItemInfo *GetItemByIndex(int iItem)
{
 LVITEM item;
 item.mask = LVIF_PARAM;
 item.iItem = iItem;
 item.iSubItem = 0;
 item.lParam = 0;
 ListView_GetItem(g_hwndChild, &amp;item);
 return reinterpret_cast&lt;ItemInfo *&gt;(item.lParam);
}

ItemInfo *GetItemByWindow(HWND hwnd, int *piItem)
{
 int iItem = ListView_GetItemCount(g_hwndChild);
 while (--iItem &gt;= 0) {
  ItemInfo *pii = GetItemByIndex(iItem);
  if (pii-&gt;hwnd == hwnd) {
   if (piItem) *piItem = iItem;
   return pii;
  }
 }
 return nullptr;
}

void UpdateText(HWND hwnd, PCWSTR pszText)
{
 int iItem;
 if (GetItemByWindow(hwnd, &iItem)) {
  ListView_SetItemText(g_hwndChild, iItem, 0,
                       const_cast&lt;PWSTR&gt;(pszText));
 }
}
</pre>
<p>
Attached to each listview item is an
<code>Item&shy;Info</code> structure
which remembers the browser window it is associated with
and the event sink that is listening for events.
</p>
<pre>
// GetLocationFromView, GetLocationFromBrowser, and GetBrowserInfo
// <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/06/10/10424662.aspx">incorporated by reference</a>

CComPtr&lt;IShellWindows&gt; g_spWindows;

// rename DumpWindows to BuildWindowList
HRESULT <font COLOR=blue>BuildWindowList</font>()
{
 CComPtr&lt;IUnknown&gt; spunkEnum;
 HRESULT hr = g_spWindows-&gt;_NewEnum(&amp;spunkEnum);
 if (FAILED(hr)) return hr;

 CComQIPtr&lt;IEnumVARIANT&gt; spev(spunkEnum);
 for (CComVariant svar;
      spev-&gt;Next(1, &amp;svar, nullptr) == S_OK;
      svar.Clear()) {
  if (svar.vt != VT_DISPATCH) continue;

  HWND hwnd;
  CComHeapPtr&lt;WCHAR&gt; spszLocation;
  if (FAILED(GetBrowserInfo(svar.pdispVal,
             &amp;hwnd, &amp;spszLocation))) continue;

  <font COLOR=blue>ItemInfo *pii =
            new(std::nothrow) ItemInfo(hwnd, svar.pdispVal);
  if (!pii) continue;

  LVITEM item;
  item.mask = LVIF_TEXT | LVIF_PARAM;
  item.iItem = MAXLONG;
  item.iSubItem = 0;
  item.pszText = spszLocation;
  item.lParam = reinterpret_cast&lt;LPARAM&gt;(pii);
  int iItem = ListView_InsertItem(g_hwndChild, &amp;item);
  if (iItem &lt; 0) delete pii;
 }
 return S_OK;
}</font>
</pre>
<p>
To build the window list, we enumerate
the contents of the <code>IShell&shy;Windows</code>.
For each window, we get its window handle
and current location
and create a listview item for it.
The reference data for the listview item is the
<code>Item&shy;Info</code>.
</p>
<pre>
BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
 <font COLOR=blue>g_hwndChild = CreateWindow(WC_LISTVIEW, 0,
    LVS_LIST | WS_CHILD | WS_VISIBLE |
    WS_HSCROLL | WS_VSCROLL, 0, 0, 0, 0,
    hwnd, (HMENU)1, g_hinst, 0);
 g_spWindows.CoCreateInstance(CLSID_ShellWindows);
 BuildWindowList();</font>
 return TRUE;
}
</pre>
<p>
Our creation function creates a child listview
and fills it with stuff.
</p>
<p>
And of course we clean up our objects when the items
are deleted and when the window is destroyed.
</p>
<pre>
<font COLOR=blue>LRESULT OnNotify(HWND hwnd, int idFrom, NMHDR *pnm)
{
 switch (idFrom) {
 case 1:
  switch (pnm-&gt;code) {
  case LVN_DELETEITEM:
   {
    auto pnmlv = CONTAINING_RECORD(pnm, NMLISTVIEW, hdr);
    delete reinterpret_cast&lt;ItemInfo *&gt;(pnmlv-&gt;lParam);
   }
   break;
  }
 }
 return 0;
}</font>

void OnDestroy(HWND hwnd)
{
 <font COLOR=blue>g_spWindows.Release();</font>
 PostQuitMessage(0);
}

 <font COLOR=blue>HANDLE_MSG(hwnd, WM_NOTIFY, OnNotify);</font>
</pre>
<p>
And there we have it, a program that displays all the
Internet Explorer and Explorer windows and updates
their locations as you navigate.
</p>
<p>
Note, however, that our program doesn't notice when
new windows are created.
We'll hook that up next time.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1061103">
				<div id="div-comment-1061103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130613-00/?p=4093#comment-1061103">
			June 14, 2013 at 12:31 am</a>		</div>

		<p>Can you show us how we add the have the capability of forwarding those events directly to the NSA, in order to save them the development costs on their spyware?</p>
<p>GWO &#8211; at least 51% foreign</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1061113">
				<div id="div-comment-1061113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130613-00/?p=4093#comment-1061113">
			June 14, 2013 at 3:07 am</a>		</div>

		<p>GWO, in my own life, my rule is that when I am a guest in someone elses house, I try my best not to insult the host. &nbsp;Tha goes double when complaining about something that the host has no knowledge of and can&#39;t control.</p>
<p>Raymond, I understand that you don&#39;t need me to defend your writings. &nbsp;But of all of the blogs that I read on the web, this one is my favorite. &nbsp;I find that I learn something new almost everyday and I couldn&#39;t help myself. &nbsp;I had to say something.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1061123">
				<div id="div-comment-1061123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian Lock</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130613-00/?p=4093#comment-1061123">
			June 14, 2013 at 3:38 am</a>		</div>

		<p>We&#39;ve tried this technique in the past and had problems where IE doesn&#39;t respond to some keystroke input after sinking these events. This is a very subtle bug and we never noticed it for a while. For a long time we just dismissed bug reports as people typing too quickly and therefore mis-typing but we eventually reproduced it and isolated it to these sinks.</p>
<p>If you look around the internet, other people have had the same issue so it wasn&#39;t just us. E.g.</p>
<p><a rel="nofollow" target="_new" href="http://s398.codeinspot.com/q/488235">s398.codeinspot.com/&#8230;/488235</a></p>
<p><a rel="nofollow" target="_new" href="http://us.generation-nt.com/mshtml-iwebbrowser2-problem-catching-events-causes-missed-keystrokes-help-9735282.html">us.generation-nt.com/mshtml-iwebbrowser2-problem-catching-events-causes-missed-keystrokes-help-9735282.html</a></p>
<p>Any clues Raymond?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1061133">
				<div id="div-comment-1061133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130613-00/?p=4093#comment-1061133">
			June 14, 2013 at 3:50 am</a>		</div>

		<p>I&#39;m obviously missing something here. Is it necessary to use a dispatch interface or could you just use a regular interface?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1061143">
				<div id="div-comment-1061143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130613-00/?p=4093#comment-1061143">
			June 14, 2013 at 6:09 am</a>		</div>

		<p>@12BitSlap I didn&#39;t make any accusation about Raymond, or any one else except the NSA. &nbsp;You&#39;re inventing things that aren&#39;t there, so chill the hell out.</p>
<p>The only suggestion I made was that the NSA like tracking people&#39;s web use. Which is true.</p>
<div class="post">[<em>The accusation is &quot;I know that Microsoft has code to send our personal information to the NSA, so you may as well show us how to do that, too.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1061163">
				<div id="div-comment-1061163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doublespeak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130613-00/?p=4093#comment-1061163">
			June 14, 2013 at 12:00 pm</a>		</div>

		<p>&quot;we can neither confirm nor deny the existence of such code&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1061173">
				<div id="div-comment-1061173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130613-00/?p=4093#comment-1061173">
			June 14, 2013 at 2:25 pm</a>		</div>

		<p>@Neil &#8211; I believe it was necessary because IE and WE publish their events via IDispatch.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1061243">
				<div id="div-comment-1061243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">leehark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130613-00/?p=4093#comment-1061243">
			June 16, 2013 at 8:21 am</a>		</div>

		<p>How do u Use CWebBrowserEventsSink , connect to every IWebBrowser2 ?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

