<html>
<head>
<title>Why can't I use the linker to delay-load a function from kernel32?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why can&#8217;t I use the linker to delay-load a function from kernel32?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 1, 2010 / year-entry #33</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">For some time (I am too lazy to look up when it was introduced), the Visual Studio linker has supported a feature known as delay-loading. But why can't you use this feature to delay-load a function from kernel32? It would be very handy: If you write if (CurrentWindowsVersionSupportsKernelFunctionXyz()) { Xyz(...); } the program fails to...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
For some time (I am too lazy to look up when it was introduced),
the Visual Studio linker has supported
a feature
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/02/04/7439592.aspx">
known as delay-loading</a>.
But why can't you use this feature to delay-load a function
from <code>kernel32</code>?
It would be very handy:
If you write
</p>
<pre>
if (CurrentWindowsVersionSupportsKernelFunctionXyz())
{
  Xyz(...);
}
</pre>
<p>
the program fails to load on versions of Windows which do not
support the function <code>Xyz</code>
because
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/09/16/54938.aspx">
the Win32 load rejects loading a module that contains unresolved
references</a>.
On the other hand, if you could mark <code>kernel32</code> as
delay-loaded, then the code above would work,
since the call to <code>Xyz</code> would be redirected to a stub
that calls <code>GetProcAddress</code>.
Since the <code>GetProcAddress</code>
is performed only when the code path is hit,
the loader won't complain at load time.
But if you try to delay-load <code>kernel32</code>,
the linker gets upset at you.
Why won't it let me delay-load <code>kernel32</code>?
</p>
<p>
The linker delay-load feature operates on the DLL level,
not on the function level.
When you put a DLL on the <code>/DELAYLOAD</code> list,
the linker changes all calls to functions in that DLL
into calls to linker-generated stubs.
These stubs load the target DLL, call <code>GetProcAddress</code>,
then resume execution at the target function.
</p>
<p>
Since the delay-load feature operates on the DLL level,
if you put <code>kernel32</code>
on the delay-load list,
then <i>all</i> calls to functions in <code>kernel32</code>
turn into calls to stubs.
</p>
<p>
And then you are trapped in this Catch-22.
</p>
<p>
When a function from <code>kernel32</code> gets called,
transfer goes to the stub function, which loads the
target DLL (<code>kernel32</code>) to get the target function.
Except that loading the target DLL means calling
<code>LoadLibrary</code>,
and finding the target function means calling
<code>GetProcAddress</code>,
and these functions
<i>themselves reside in <code>kernel32</code></i>.
</p>
<p>
Now you're trapped.
To load <code>kernel32</code>,
we need to call <code>LoadLibrary</code>,
but our call to <code>LoadLibrary</code> was redirected
to a stub which... calls <code>LoadLibrary</code>.
</p>
<p>
Sure, the linker folks could have added special casing for
<code>kernel32</code>, say, having a list of core functions
like <code>InitializeCriticalSection</code> which are
never delay-loaded and always go directly into <code>kernel32</code>.
But that's really out of scope for the <code>/DELAYLOAD</code> feature,
whose purpose is not to make it easier to call functions which
might not be there,
but rather to assist in application startup performance
by avoiding the cost of loading the target DLL until a function from
it is called.
If there were functions that went directly into <code>kernel32</code>,
then the stated purpose of delay-loading fails:
that import of <code>InitializeCriticalSection</code> forces
<code>kernel32</code> to be loaded when the module is loaded,
completely contrary to the aim of delay-loading to avoid
loading <code>kernel32</code> at module load time.
</p>
<p>
Now, it's certainly a nice feature to be able to perform
delay-loading on a per-function level,
in order to make it easier to write
code which changes behavior based on the current version of Windows,
but that's a different problem from what the <code>/DELAYLOAD</code>
switch was created to solve.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-807263">
				<div id="div-comment-807263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shaka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807263">
			February 1, 2010 at 7:21 am</a>		</div>

		<p>It isn&#8217;t also true that the whole idea of delay load kernel32.dll is a bit futile since kelnel32.dll is always loaded for a win32 process even before che program code (and any delay-load code) run because, for example, user mode thread (and so the main thread) starts their live in a function of kernel32.dll ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-807313">
				<div id="div-comment-807313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807313">
			February 1, 2010 at 8:13 am</a>		</div>

		<p>Why can&#8217;t those people use weak symbols?</p>
<div class=post>[<i><a href="http://blogs.msdn.com/oldnewthing/archive/2003/09/16/54938.aspx" rel="nofollow">Those who do not understand history are doomed to repeat it</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-807323">
				<div id="div-comment-807323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807323">
			February 1, 2010 at 8:38 am</a>		</div>

		<p>Well, this is just using a means to do something wasn&#8217;t designed to do it.</p>
<p>Of course, the biggest stupidity here is trying to delay load the library which is the home for the delay load mechinism.</p>
<p>The most obvious problem is what actually happens if you manage to call a function which doesn&#8217;t exist? Ie, you manage to call one of the transacted NTFS functions on Windows XP. Even though this is a bug, (not checking version or forgot to put an if block in the right place) how does delay loading handle the failure. It can&#8217;t be as nice as doing it using the correct means.</p>
<p>What this looks like is that someone is too lazy to set up the function pointer and GetProcAddress (with maybe some LoadLibrary for libraries not loaded with the process). I just wish people would not be so lazy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-807343">
				<div id="div-comment-807343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arno</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807343">
			February 1, 2010 at 8:56 am</a>		</div>

		<p>Raymond, do you have any idea whether it is worthwhile to delay-load a DLL that is already loaded, just to save on resolving the imports? Basically, not saving the LoadLibrary but at least saving the GetProcAddress?</p>
<div class=post>[<i>That&#8217;s a different problem from what the /DELAYLOAD switch was created to solve. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-807363">
				<div id="div-comment-807363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807363">
			February 1, 2010 at 9:21 am</a>		</div>

		<p>You would seriously initialise your function pointers statically? -_-;</p>
<p>I may be a weird one but I stay away from any kind of static initialisation unless it is absolutely necessary. On top of that I also see even less need for cross compilation unit initialisation.</p>
<p>I can&#8217;t think of any situation off of the top of my head in which you couldn&#8217;t change static initialisers into a single init call from main/WinMain.</p>
<p>As for weak symbols. Win16 had those and they didn&#8217;t work well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-807383">
				<div id="div-comment-807383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807383">
			February 1, 2010 at 10:04 am</a>		</div>

		<p>Robert, I think you might have to qualify your performance comment with &#8216;on this set of processors&#8217; or under such and such conditions. Yes, if you call the function immediately after GetProcAddress and the generated code is (for example) CALL EAX, I can see that the processor might not correctly predict the location of the jump and therefore stall for a bit, but if you&#8217;ve stored the address &#8211; which I would hope you would &#8211; the instruction is likely</p>
<p>CALL [some location]</p>
<p>and is no different from calling through the import address table.</p>
<p>If you don&#8217;t leave the library loaded and store the result of GetProcAddress, I&#8217;m sure searching for the function&#8217;s address is a heck of a lot more costly than calling through a function pointer.</p>
<p>Using LoadLibrary/GetProcAddress adds a lot of overhead to a function for error checking and the like; using /DELAYLOAD allows you to program as if the function is always there and handle the case where it&#8217;s not out-of-line. I&#8217;ve considered implementing delay-load for Windows CE where it is, alas, not available.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-807403">
				<div id="div-comment-807403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807403">
			February 1, 2010 at 10:38 am</a>		</div>

		<p>@Mike Dimmick</p>
<p>Just checking: you don&#8217;t need the delay in delay-loading; just on-demand loading of functions?</p>
<p>It seems somewhat strange to me that many people are using the delay loading in the same way in which they would use weak symbols and it doesn&#8217;t cause the problems which weak symbols caused.</p>
<div class=post>[<i>Instead, it causes other problems (like security vulnerabilities). More on that on November 11 of this year. Stay tuned! -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-807423">
				<div id="div-comment-807423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Philip</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807423">
			February 1, 2010 at 10:47 am</a>		</div>

		<p>Of course, you actually <em>can</em> delay load a function from kernel32 &#8212; you just have to do some magic with the PE after it&#8217;s been built. The loader handles this case perfectly when you have one set of static imports under the name &quot;kernel32.dll&quot; and one set of delay-load imports under the name &quot;kernel32.dll&quot;. The static imports are processed first, and the others are processed whenever a function is hit.</p>
<p>The trick to do this with your garden variety compiler isn&#8217;t available on the internet at the time of this writing, but can be deduced from a careful reading of the PE spec and a nifty post-build tool of your devising.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-807453">
				<div id="div-comment-807453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807453">
			February 1, 2010 at 12:01 pm</a>		</div>

		<p>&quot;&quot;&quot;</p>
<p>[Instead, it causes other problems (like security vulnerabilities). More on that on November 11 of this year. Stay tuned! -Raymond]</p>
<p>&quot;&quot;&quot;</p>
<p>Actually, I wanted to know how does using delay loading instead of weak symbols help. All the problems with late recognition of a lack of a required symbol still exist, and that was the biggest problem with weak refs, wasn&#8217;t it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-807473">
				<div id="div-comment-807473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807473">
			February 1, 2010 at 12:55 pm</a>		</div>

		<p>The point here is it doesn&#8217;t.</p>
<p>Delay loading was added to help reduce possible costly initialisations not be used as weak references.</p>
<p>The thought for delay loading was instead of modules eating up a lot of time and processing power slowing down the application start, it would only be when the library is needed that it would be loaded into the process. The real benefit is if the delay loaded stuff is not used, in this case it wouldn&#8217;t even have to load the library in and initialise it. Also, because of the fact that delay loading is used to help speed things up, symbols are not resolved.</p>
<p>This is where the problem lays. People have started to abuse this as a way of getting around the symbols needing to be resolved. So it isn&#8217;t what delay loading was designed for, it is an abuse of a feature of delay loading.</p>
<p>The only supported method of conditional symbols in Win32 is LoadLibrary and GetProcAddress. In fact, the thing which is funny is with the addition of the delay load to skip the symbol resolution, you will still have to check versions for every call.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-807493">
				<div id="div-comment-807493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807493">
			February 1, 2010 at 1:30 pm</a>		</div>

		<p>@Crescens2k</p>
<p>But even if we use delay loading for its intended purpose it causes the same problems as those described in post about weak refs. This does the same that making all refs from a given library weak does (the situation in 16bit Windows).</p>
<p>Am I correct that the time-consuming part of linking is looking up all symbols and not generating PLTs/whatnot?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-807533">
				<div id="div-comment-807533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807533">
			February 1, 2010 at 2:18 pm</a>		</div>

		<p>GLee[1] is a library for use with OpenGL that does all the dynamic lookup of extensions and so on. You just go if (GLEE_ARB_multitexture) { glMultiTexCoord2fARB(&#8230;) } and it does the dynamic loading of glMultiTexCoord2fARB and so on.</p>
<p>There&#8217;s no reason somebody couldn&#8217;t come up with a similar library for kernel32 (or any other library, for that matter).</p>
<p>Perhaps Microsoft could stop making additions to kernel32.dll and add all new functionality into a new DLL. That way, you COULD delay load that DLL&#8230; though maybe that&#8217;s more trouble than it&#8217;s worth.</p>
<p>[1] <a rel="nofollow" target="_new" href="http://www.elf-stone.com/glee.php" rel="nofollow">http://www.elf-stone.com/glee.php</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-807543">
				<div id="div-comment-807543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807543">
			February 1, 2010 at 2:28 pm</a>		</div>

		<p>This is why delay loading isn&#8217;t something seen as normal. The linker documentation itself states</p>
<p>You should consider delay loading a DLL if:</p>
<p>Your program may not call a function in the DLL.</p>
<p>A function in the DLL may not get called until late in your program&#8217;s execution.</p>
<p>Which means that for standard usage you shouldn&#8217;t use delay loading.</p>
<p>If you look around then you will notice that delay loading is not actually used that often. Mostly it is down to the fact that a delay loaded dll doesn&#8217;t offer much when it is loaded and used right away, or often. So while it is true the weakness of delay loaded symbols is an issue, it isn&#8217;t an issue which would normally affect people.</p>
<p>It is only the whole &quot;I just want to shut it up&quot; attitude which has caused this problem. It is exactly the same as people using casts or #pragma warning to get rid of errors or warnings in a compiler because it requires doing less work.</p>
<p>So no matter what, delay loading to get around the symbol resolution is bad. But instead of setting up LoadLibrary/GetProcAddress and stubs, people would rather use the quickest method even if in the long run it would cause problems.</p>
<p>For linking.</p>
<p>The time consuming part depends really. For more recent versions of the linker, LTCG is the most time consuming part. In fact, generating the export table should be pretty easy since all it needs is the symbol name (already known) and it&#8217;s RVA (worked out during linking).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-807583">
				<div id="div-comment-807583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.embarcadero.com/abauer' rel='external nofollow' class='url'>Allen Bauer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807583">
			February 1, 2010 at 4:52 pm</a>		</div>

		<p>&quot;Now, it&#8217;s certainly a nice feature to be able to perform delay-loading on a per-function level, in order to make it easier to write code which changes behavior based on the current version of Windows, but that&#8217;s a different problem from what the /DELAYLOAD switch was created to solve.&quot;</p>
<p>FWIW, the most recent version of Delphi (Delphi 2010 <a rel="nofollow" target="_new" href="http://www.embardacero.com/delphi" rel="nofollow">http://www.embardacero.com/delphi</a>) added the ability to specify delay loading of individual APIs for that exact purpose. You can mark individual APIs to be delayloaded, include ones to Kernel32.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-807353">
				<div id="div-comment-807353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807353">
			February 1, 2010 at 9:05 am</a>		</div>

		<p>@Crescens2k</p>
<p>Keeping a global function pointer statically initalized to getprocaddr(something) invites all static initialization ordering-related bugs (you can&#8217;t use the function in any static initalization, because it might get called before the pointer is set up). Also, if you are *very* concerned about performance, calling a function pointer is noticeably slower than a call to a constant location and a jump to a constant location. I agree, delay loading doesn&#8217;t help with it at all but weak symbols would.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-807623">
				<div id="div-comment-807623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807623">
			February 1, 2010 at 8:33 pm</a>		</div>

		<p>&quot;More on that on November 11 of this year. Stay tuned! -Raymond&quot;</p>
<p>Oh, that&#8217;s just cruel &#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-807633">
				<div id="div-comment-807633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807633">
			February 1, 2010 at 8:34 pm</a>		</div>

		<p>Since all the delay loading does is call LoadLibrary and GetProcAddress, I&#8217;m sure that people who want to do that for a single function but are offended by seeing those extra calls in their code, can macro their way out of it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-807663">
				<div id="div-comment-807663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807663">
			February 1, 2010 at 11:57 pm</a>		</div>

		<p>I already have my comment in the queue and it will be posted November 12 of this year (@7am)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-807683">
				<div id="div-comment-807683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807683">
			February 2, 2010 at 4:28 am</a>		</div>

		<p>@Anonymous Coward: The problem isn&#8217;t the LoadLibrary/GetProcAddress calls being in the code. Of course you put those in a stub somewhere out of the way.</p>
<p>The problem is all the manual stuff you have to do to produce those stubs. You have to find the function declarations in the SDK headers and convert them into the appropriate function pointer type declaration (which often requires a bit of working out and looking up weird API-specific #defines), put a variable somewhere, put in the calls to LoadLibrary/FreeLibrary and GetProcAddress, and finally write the actual stub itself.</p>
<p>None of it is difficult but it&#8217;s quite tedious, especially when doing several functions at once.</p>
<p>I don&#8217;t use delay loading myself; I do the tedious stuff instead, but I&#8217;m not surprised other people use delay loading to avoid it.</p>
<p>It&#8217;d be great if VS or some other tool provided an automated way to create stubs for a given API. Just tell it the API name and it does the rest.</p>
<p>(In a dream world, it&#8217;d also be nice to have some way to detect, from static analysis, where you have accidentally used APIs, structure versions, flags, etc. for later versions of Windows outside of code-blocks you&#8217;ve explicitly designated as being allowed to use them.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-807983">
				<div id="div-comment-807983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Maxime Labelle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100201-00/?p=15123#comment-807983">
			February 2, 2010 at 10:39 pm</a>		</div>

		<p>&quot;More on that on November 11 of this year. Stay tuned! -Raymond&quot;</p>
<p>That is called &#8216;delayed posting&#8217;&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

