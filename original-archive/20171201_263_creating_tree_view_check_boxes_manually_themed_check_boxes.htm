<html>
<head>
<title>Creating tree view check boxes manually: Themed check boxes</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Creating tree view check boxes manually: Themed check boxes</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 1, 2017 / year-entry #264</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171201-00/?p=97505</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Using visual styles.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20171129-00/?p=97485">
Originally</a>,
we created our check box state image list with
<code>Draw&shy;Frame&shy;Control</code>.
But that gives you the old and busted check boxes.
What if you want the new hotness of visual styles?
</p>
<p>
Enter <code>Draw&shy;Theme&shy;Background</code>.
</p>
<pre>
<font COLOR="blue">#include &lt;uxtheme.h&gt;
#include &lt;vsstyle.h&gt;</font>

HIMAGELIST CreateTreeViewCheckBoxes(HWND hwnd, int cx, int cy)
{
  const int frames = 6;

  // Get a DC for our window.
  HDC hdcScreen = GetDC(hwnd);

  <font COLOR="blue">// Get a button theme for the window, if available.
  HTHEME htheme = OpenThemeData(hwnd, L"button");

  // If there is a theme, then ask it for the size
  // of a checkbox and use that size.
  if (htheme) {
    SIZE siz;
    GetThemePartSize(htheme, hdcScreen,
      BP_CHECKBOX, CBS_UNCHECKEDNORMAL, nullptr,
      TS_DRAW, &amp;siz);
    cx = siz.cx;
    cy = siz.cy;
  }</font>

  // Create a 32bpp bitmap that holds the desired number of frames.
  BITMAPINFO bi = { sizeof(BITMAPINFOHEADER), cx * frames, cy, 1, 32 };
  void* p;
  HBITMAP hbmCheckboxes = CreateDIBSection(hdcScreen, &amp;bi,
    DIB_RGB_COLORS, &amp;p, nullptr, 0);

  // Create a compatible memory DC.
  HDC hdcMem = CreateCompatibleDC(hdcScreen);

  // Select our bitmap into it so we can draw to it.
  HBITMAP hbmOld = SelectBitmap(hdcMem, hbmCheckboxes);

  // Set up the rectangle into which we do our drawing.
  RECT rc = { 0, 0, cx, cy };

  // Frame 0 is not used. Draw nothing.
  OffsetRect(&amp;rc, cx, 0);

  <font COLOR="blue">if (htheme) {
    // Frame 1: Unchecked.
    DrawThemeBackground(htheme, hdcMem, BP_CHECKBOX,
      CBS_UNCHECKEDNORMAL, &amp;rc, nullptr);
    OffsetRect(&amp;rc, cx, 0);

    // Frame 2: Checked.
    DrawThemeBackground(htheme, hdcMem, BP_CHECKBOX,
      CBS_CHECKEDNORMAL, &amp;rc, nullptr);
    OffsetRect(&amp;rc, cx, 0);

    // Frame 3: Indeterminate.
    DrawThemeBackground(htheme, hdcMem, BP_CHECKBOX,
      CBS_MIXEDNORMAL, &amp;rc, nullptr);
    OffsetRect(&amp;rc, cx, 0);

    // Frame 4: Disabled, unchecked.
    DrawThemeBackground(htheme, hdcMem, BP_CHECKBOX,
      CBS_UNCHECKEDDISABLED, &amp;rc, nullptr);
    OffsetRect(&amp;rc, cx, 0);

    // Frame 5: Disabled, checked.
    DrawThemeBackground(htheme, hdcMem, BP_CHECKBOX,
      CBS_CHECKEDDISABLED, &amp;rc, nullptr);

    // Done with the theme.
    CloseThemeData(htheme);
  } else {</font>
    // Flags common to all of our DrawFrameControl calls:
    // Draw a flat checkbox.
    UINT baseFlags = DFCS_FLAT | DFCS_BUTTONCHECK;

    // Frame 1: Unchecked.
    DrawFrameControl(hdcMem, &amp;rc, DFC_BUTTON,
      baseFlags);
    OffsetRect(&amp;rc, cx, 0);

    // Frame 2: Checked.
    DrawFrameControl(hdcMem, &amp;rc, DFC_BUTTON,
      baseFlags | DFCS_CHECKED);
    OffsetRect(&amp;rc, cx, 0);

    // Frame 3: Indeterminate.
    DrawFrameControl(hdcMem, &amp;rc, DFC_BUTTON,
      baseFlags | DFCS_CHECKED | DFCS_BUTTON3STATE);
    OffsetRect(&amp;rc, cx, 0);

    // Frame 4: Disabled, unchecked.
    DrawFrameControl(hdcMem, &amp;rc, DFC_BUTTON,
      baseFlags | DFCS_INACTIVE);
    OffsetRect(&amp;rc, cx, 0);

    // Frame 5: Disabled, checked.
    DrawFrameControl(hdcMem, &amp;rc, DFC_BUTTON,
      baseFlags | DFCS_INACTIVE | DFCS_CHECKED);
  <font COLOR="blue">}</font>

  // The bitmap is ready. Clean up.
  SelectBitmap(hdcMem, hbmOld);
  DeleteDC(hdcMem);
  ReleaseDC(hwnd, hdcScreen);

  // Create an imagelist from this bitmap.
  HIMAGELIST himl = ImageList_Create(cx, cy, ILC_COLOR, frames, frames);
  ImageList_Add(himl, hbmCheckboxes, nullptr);

  // Don't need the bitmap any more.
  DeleteObject(hbmCheckboxes);

  return himl;
}

<font COLOR="blue">void OnThemeChange(HWND hwnd)
{
  // Rebuild the state images to match the new theme.
  HIMAGELIST himl = CreateTreeViewCheckBoxes(g_hwndChild,
    16, 16);
  ImageList_Destroy(TreeView_SetImageList(g_hwndChild,
                                     himl, TVSIL_STATE));
}</font>

// WndProc
  <font COLOR="blue">case WM_THEMECHANGE:
    OnThemeChange(hwnd);
    break;</font>
</pre>
<p>
We spruce up the
<code>Create&shy;Tree&shy;View&shy;Check&shy;Boxes</code>
function by having it check whether visual styles are
enabled for the window.
If so, it uses the button theme to draw the check boxes
in the various states.
If not, then it falls back to our existing
<code>Draw&shy;Frame&shy;Control</code> version.
</p>
<p>
We also respond to the
<code>WM_</code><code>THEME&shy;CHANGE</code> message
by creating a new state image list which match the new theme.
We then exchange that state image list into place
and destroy the previous (old and busted) state image list.
</p>
<p>
That's it. The rest is the same as before.
</p>
<p>
Next time, we'll engage in some historical
speculation to help explain why the built-in
tree view check boxes
are so quirky.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1317326">
				<div id="div-comment-1317326" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171201-00/?p=97505#comment-1317326">
			December 1, 2017 at 9:24 am</a>		</div>

		<p>I assume WM_SYSCOLORCHANGE be handled like WM_THEMECHANGED?  If themes are not enabled, you still might need to redraw the checkboxes if the system colors change.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1317365">
				<div id="div-comment-1317365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Serhii</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171201-00/?p=97505#comment-1317365">
			December 1, 2017 at 5:39 pm</a>		</div>

		<p>But how about animations? You know, fading between images on mouse hover, for example? It seems like the change here is instantenious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1317377">
				<div id="div-comment-1317377" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171201-00/?p=97505#comment-1317377">
			December 2, 2017 at 3:13 am</a>		</div>

		<p>Won&#8217;t the caller of CreateTreeViewCheckBoxes get confused when it asks for 16Ã—16 images but gets back an image list of images of a different size?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1317416">
				<div id="div-comment-1317416" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tihiy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171201-00/?p=97505#comment-1317416">
			December 3, 2017 at 4:10 am</a>		</div>

		<p>Consider adding per-display DPI support here.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1317425">
				<div id="div-comment-1317425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pietro Gagliardi (andlabs)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171201-00/?p=97505#comment-1317425">
			December 3, 2017 at 7:03 am</a>		</div>

		<p>The way this sample is written, this particular change would be trivial, if not one-line.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1317436">
				<div id="div-comment-1317436" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xtal256</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171201-00/?p=97505#comment-1317436">
			December 3, 2017 at 11:36 pm</a>		</div>

		<p>Wow, a Men In Black reference. Raymond, you constantly surprise me.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

