<html>
<head>
<title>Eric's complete guide to BSTR semantics</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Eric&#8217;s complete guide to BSTR semantics</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 15, 2003 / year-entry #63</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20030915-01/?p=42483</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Eric Lippert has posted Eric's Complete Guide to BSTR Semantics. This is a document that is widely valued within Microsoft, since BSTR semantics are rather tricky, and I'm glad he's willing to share it with the world. In particular, Eric spends quite a bit of time discussion the very important equivalence of NULL and L""...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
        <a href="https://blogs.msdn.microsoft.com/ericlippert/">Eric Lippert</a> has posted <a href="https://blogs.msdn.microsoft.com/ericlippert/2003/09/12/erics-complete-guide-to-bstr-semantics/">Eric's
        Complete Guide to BSTR Semantics</a>. This is a document that is widely valued within
        Microsoft, since BSTR semantics are rather tricky, and I'm glad he's willing to share
        it with the world. 
    </p>
<p>
        In particular, Eric spends quite a bit of time discussion the very important equivalence
        of NULL and L"" in BSTR semantics, something that is <a href="http://web.archive.org/web/20021015194204/http://msdn.microsoft.com/library/en-us/automat/htm/chap7_2xgz.asp">buried
        in paragraph seven of an MSDN document you probably didn't even bother reading</a>. 
    </p>
<p>    If you ask nicely, you might be able to convince him to post his "Complete history
    of OLEDATE". 
</body></p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-124413">
				<div id="div-comment-124413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://flangy.com/' rel='external nofollow' class='url'>Adam Vandenberg</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030915-01/?p=42483#comment-124413">
			September 15, 2003 at 8:56 pm</a>		</div>

		<p>(The first link to Eric&#8217;s page is broken.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-124423">
				<div id="div-comment-124423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030915-01/?p=42483#comment-124423">
			September 15, 2003 at 10:42 pm</a>		</div>

		<p>Oops, sorry. Fixed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-124433">
				<div id="div-comment-124433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TheCodeFoundry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030915-01/?p=42483#comment-124433">
			September 16, 2003 at 1:58 am</a>		</div>

		<p>Why waste time using BSTR when you can easily use the _bstr_t wrapper class?  Is there really any advantage to using a BSTR where you have to worry about allocating and freeing memory when _bstr_t handles all of that for you?</p>
<p>I&#8217;m not trolling, I would really like to understand an instance where you would not want to use _bstr_t.  For me, it just seems like using the wrapper class makes your code so much cleaner.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-124443">
				<div id="div-comment-124443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicholas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030915-01/?p=42483#comment-124443">
			September 16, 2003 at 9:40 am</a>		</div>

		<p>_bstr_t is not supported on Windows CE devices. :(</p>
<p>And besides it is always good to know the bases because of  the law of leaky abstraction :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-124453">
				<div id="div-comment-124453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030915-01/?p=42483#comment-124453">
			September 16, 2003 at 9:59 am</a>		</div>

		<p>I think you missed the point of Eric&#8217;s entry.  It&#8217;s the guide to BSTR &quot;semantics&quot;. _bstr_t helps you with BSTR memory allocation, but you still need to understand the semantics. The embedded null, the ban on internal pointers, the equivalence of NULL and a zero-length string&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-124463">
				<div id="div-comment-124463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TheCodeFoundry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030915-01/?p=42483#comment-124463">
			September 16, 2003 at 2:26 pm</a>		</div>

		<p>Gotcha.  Thanks Raymond and Nicholas for the answers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-124473">
				<div id="div-comment-124473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/ericli/' rel='external nofollow' class='url'>Eric Lippert</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030915-01/?p=42483#comment-124473">
			September 16, 2003 at 2:56 pm</a>		</div>

		<p>CodeFoundry: bstr_t is pretty good, but in general, I avoid wrapper classes like the plague.  I don&#8217;t trust them.  I&#8217;ll give an example of some places where wrappers lead you astray in another entry.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-124483">
				<div id="div-comment-124483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/ericli/' rel='external nofollow' class='url'>Eric Lippert</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030915-01/?p=42483#comment-124483">
			September 16, 2003 at 2:57 pm</a>		</div>

		<p>Raymond asked for it, so I&#8217;ve posted it.  My short essay on the irksome OLEAUT date format is posted on my blog.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-124493">
				<div id="div-comment-124493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TheCodeFoundry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030915-01/?p=42483#comment-124493">
			September 16, 2003 at 6:21 pm</a>		</div>

		<p>I see Eric posted an article about smart pointers.  I would like play devil&#8217;s advocate:</p>
<p>If you insist on using raw COM pointers in your C++ code, if an exception is thrown, you don&#8217;t get a chance to call Release().  Now, the code that Eric posts may have had a bug in it, but if you are going to use smart pointers, you should use them everywhere.  Yet his map used raw pointers.  You are just asking for problems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-124503">
				<div id="div-comment-124503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/ericli/' rel='external nofollow' class='url'>Eric Lippert</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030915-01/?p=42483#comment-124503">
			September 16, 2003 at 8:57 pm</a>		</div>

		<p>Yes, exactly my point!  The only time that it is safe to use smart pointers is if you know 100% for sure that EVERYONE who EVER works on your software is going to know how to <em>correctly</em> use smart pointers.  And that&#8217;s an unrealistic assumption in my world. I don&#8217;t know about your software projects, but there are tens of millions of lines of code in the product that I work on, in a half-dozen or more languages and who knows how many coding styles, and some of that code is ten years old or more.  We have situations where C# calls C++ calls JScript calls C++ calls C&#8230;</p>
<p>The whole point of a template class is that it makes it &quot;easier&quot; by HIDING what it is really doing behind the scenes.  That hiding is great right up until you need to make some newfangled template code interoperate with a few hundred thousand lines of existing nontemplated code.  And then suddenly you need to know EXACTLY what that thing does (leaky abstraction!) and the semantics are hidden in a half dozen nested templatized wrapper classes with cryptic names.  Avoid, avoid, avoid.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-124513">
				<div id="div-comment-124513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AlisdairM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030915-01/?p=42483#comment-124513">
			September 19, 2003 at 6:21 am</a>		</div>

		<p>Effective C++ is not possible without smart pointers.  There is no other general way to handle exception safety.  If you don&#8217;t feel comfortable with the issue, drop back to C where SESE is a valid idiom.</p>
<p>I agree that COM-wrapper pointers are very easy to get wrong and abuse, but that is no reason to throw out smart pointers in general.  It simply means you must look a lot harder to find a high quality, well documented COM pointer implementation.</p>
<p>[Luckily for me we don&#8217;t do much COM so I can avoid the issue in general.  Outside of COM, I have found smart pointers work exceptionally well]</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

