<html>
<head>
<title>The Itanium processor, part 9: Counted loops and loop pipelining</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The Itanium processor, part 9: Counted loops and loop pipelining</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 6, 2015 / year-entry #164</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150806-00/?p=91161</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">There is a dedicated register named ar.lc for counted loops.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
There is a dedicated register named <var>ar.lc</var> for counted loops.
<span id="more-91161"></span>
The <var>br.cloop</var> instruction acts like this:
</p>
<pre>
    if (ar.lc != 0) { ar.lc = ar.lc - 1; goto branch; }
</pre>
<p>
Consider this loop to increment every 32-bit integer in an array.
</p>
<pre>
extern int array[2000];

void IncrementEachElement()
{
 for (int i = 0; i &lt; 2000; i++) {
  array[i]++;
 }
}
</pre>
<p>
This could be compiled as
</p>
<pre>
    mov r30 = ar.lc         // save original value of ar.lc
    addl r29 = gp, -205584  // calculate start of array
    addl r31 = r0, 1999 ;;  // r31 = 1999
    mov ar.lc = r31         // loop 1999 times
again:
    ld4 r31 = [r29] ;;      // load the next integer
    adds r31 = r31, 1 ;;    // increment the value
    st4 [r29] = r31, 4      // store it and autoincrement
    br.cloop again ;;       // do it 1999 more times
    mov ar.lc = r30         // restore ar.lc
    br.ret.sptk.many rp     // return
</pre>
<p>
Note that the <var>ar.lc</var> register is initialized to one
fewer than the number of iterations desired.
That's because it counts the number of times the
<var>br.cloop</var> instruction will branch.
Since we used fall-through to initiate the loop,
one of the times through the loop was already performed,
and we want <var>br.cloop</var> to branch only 1999 times.
</p>
<p>
The <var>ar.lc</var> register must be preserved across calls,
so if you intend to use it in your function,
you need to save its original value and restore it when done.
(You also need to record in the unwind table where you saved it,
so it's easier to do it up front;
otherwise, you have to go to the extra work of
encoding
<!-- backref: The Itanium processor, part 4: The Windows calling convention, leaf functions -->
how you shrink-wrapped the function</a>.)
</p>
<p>
For the sake of illustration, let's say that the CPU can fetch
memory from cache in two cycles, and each cycle it can issue one
load and one store.
(If the memory access is not in cache,
<a HREF="http://www.overbyte.com.au/misc/Lesson3/CacheFun.html">
it takes basically forever</a>,
in which case it doesn't really matter how we optimize the rest of the code,
so we may as well assume that all memory accesses are cache hits.)
Each iteration of the loop performs a fetch (two cycles),
an addition (one cycle), then a store in parallel
with a conditional jump (one cycle),
for a total of four cycles per iteration.
</p>
<p>
Let's try to do better.
</p>
<p>
First,
let's simplify to the case where the array has only four elements.
We could do it like this:
</p>
<pre>
    alloc r36 = ar.pfs, 0, 5, 0, 0 // set up frame
    addl r29 = gp, -205584  // calculate start of array
    addl r28 = r29, 0 ;;    // put it in both r28 and r29

    ld4 r32 = [r29], 4 ;;   // crazy stuff
    ld4 r33 = [r29], 4 ;;
    adds r32 = r32, 1
    ld4 r34 = [r29], 4 ;;
    st4 [r28] = r32, 4
    adds r33 = r33, 1
    ld4 r35 = [r29], 4 ;;
    st4 [r28] = r33, 4
    adds r34 = r34, 1 ;;
    st4 [r28] = r34, 4
    adds r35 = r35, 1 ;;
    st4 [r28] = r35, 4 ;;

    mov ar.pfs = r36
    br.ret.sptk.many rp     // return
</pre>
<p>
(In reality, we would reorder the instructions in order
to match the templates better, but I'll leave them in this order for now.)
</p>
<p>
That is kind of hard to understand, so let me rewrite the crazy middle part
like this,
putting all the instructions from an instruction group on one line,
adding some separator lines, and
putting instructions into columns carefully chosen to highlight the
structure of the code.
</p>
<table BORDER=0 CELLPADDING=0
    STYLE="border-collapse: collapse">
<tr>
<td ALIGN=right>1</td>
<td ROWSPAN=8 STYLE="border-right: 1px solid black">&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: dotted 1px black"><code>ld4 r32 = [r29], 4</code></td>
<td ROWSPAN=8 STYLE="border-right: 1px solid black"></td>
<td>&nbsp;</td>
<td ROWSPAN=8 STYLE="border-right: 1px solid black"></td>
<td>&nbsp;</td>
<td ROWSPAN=8 STYLE="border-right: 1px solid black"></td>
<td>&nbsp;</td>
<td ROWSPAN=8 STYLE="border-right: 1px solid black"></td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>2</td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: dotted 1px black"><code>ld4 r33 = [r29], 4</code></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>3</td>
<td STYLE="padding: 0ex 1ex"><code>adds r32 = r32, 1</code></td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: dotted 1px black"><code>ld4 r34 = [r29], 4</code></td>
<td>&nbsp;</td>
<td><code>;;</code></td>
</td>
</tr>
<tr>
<td ALIGN=right>4</td>
<td STYLE="padding: 0ex 1ex; border-bottom: dotted 1px black"><code>st4 [r28] = r32, 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>adds r33 = r33, 1</code></td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: dotted 1px black"><code>ld4 r35 = [r29], 4</code></td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>5</td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-bottom: dotted 1px black"><code>st4 [r28] = r33, 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>adds r34 = r34, 1</code></td>
<td>&nbsp;</td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>6</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-bottom: dotted 1px black"><code>st4 [r28] = r35, 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>adds r35 = r35, 1</code></td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>7</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-bottom: dotted 1px black"><code>st4 [r28] = r35, 4</code></td>
<td><code>;;</code></td>
</tr>
</table>
<p>
The first thing to observe is that this sequence completes in
just seven cycles,
as opposed to the 16 cycles of the original version.
That's over double the performance!
</p>
<p>
Notice that each column performs
one iteration of the loop.
Each column uses
a different register to do the calculation,
and they share register <code>r29</code>
to hold the address of the next
value to read
and
<code>r28</code> to hold the address of the next
value to write.
Each column also waits two cycles after each read before consuming
the result,
thereby avoiding memory stalls.
</p>
<p>
The idea here is to run multiple iterations of the loop in parallel,
but
setting each one to begin one cycle after the start of the previous
iteration.
Staggering the starts keeps us from overloading the memory controller.
(Otherwise, everybody would issue load requests in cycle&nbsp;1,
and the memory controller would stall.)
</p>
<p>
Now, the Itanium has a lot of registers, but it doesn't have 2000 of them.
Fortunately, we don't need 2000 of them.
Observe that starting at cycle&nbsp;5,
we can reuse register <code>r32</code>
because the previous iteration doesn't need it any more.
So if we need to increment ten elements, we can do it this way:
</p>
<table BORDER=0 CELLPADDING=0
    STYLE="border-collapse: collapse">
<tr>
<td ALIGN=right>1</td>
<td ROWSPAN=13 STYLE="border-right: 1px solid black">&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"><code>ld4 r32 = [r29], 4</code></td>
<td ROWSPAN=13 STYLE="border-right: 1px solid black"></td>
<td>&nbsp;</td>
<td ROWSPAN=13 STYLE="border-right: 1px solid black"></td>
<td>&nbsp;</td>
<td ROWSPAN=13 STYLE="border-right: 1px solid black"></td>
<td>&nbsp;</td>
<td ROWSPAN=13 STYLE="border-right: 1px solid black"></td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>2</td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"><code>ld4 r33 = [r29], 4</code></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>3</td>
<td STYLE="padding: 0ex 1ex"><code>adds r32 = r32, 1</code></td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"><code>ld4 r34 = [r29], 4</code></td>
<td>&nbsp;</td>
<td><code>;;</code></td>
</td>
</tr>
<tr>
<td ALIGN=right>4</td>
<td STYLE="padding: 0ex 1ex"><code>st4 [r28] = r32, 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>adds r33 = r33, 1</code></td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"><code>ld4 r35 = [r29], 4</code></td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>5</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"><code>ld4 r32 = [r29], 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>st4 [r28] = r33, 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>adds r34 = r34, 1</code></td>
<td>&nbsp;</td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>6</td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: dotted 1px black"><code>ld4 r33 = [r29], 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>st4 [r28] = r34, 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>adds r35 = r35, 1</code></td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>7</td>
<td STYLE="padding: 0ex 1ex"><code>adds r32 = r32, 1</code></td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"><code>ld4 r34 = [r29], 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>st4 [r28] = r35, 4</code></td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>8</td>
<td STYLE="padding: 0ex 1ex"><code>st4 [r28] = r32, 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>adds r33 = r33, 1</code></td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"><code>ld4 r35 = [r29], 4</code></td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>9</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"><code>ld4 r32 = [r29], 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>st4 [r28] = r33, 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>adds r34 = r34, 1</code></td>
<td>&nbsp;</td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>10</td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: dotted 1px black"><code>ld4 r33 = [r29], 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>st4 [r28] = r34, 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>adds r35 = r35, 1</code></td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>11</td>
<td STYLE="padding: 0ex 1ex"><code>adds r32 = r32, 1</code></td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"></td>
<td STYLE="padding: 0ex 1ex"><code>st4 [r28] = r35, 4</code></td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>12</td>
<td STYLE="padding: 0ex 1ex"><code>st4 [r28] = r32, 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>adds r33 = r33, 1</code></td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"></td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>13</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"></td>
<td STYLE="padding: 0ex 1ex; border-bottom: 1px dotted black"><code>st4 [r28] = r33, 4</code></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td><code>;;</code></td>
</tr>
</table>
<p>
We incremented ten elements in 13 cycles instead of 40.
In general, we can increment <var>n</var> elements in
<var>n</var>&nbsp;+&nbsp;3 cycles instead of 4<var>n</var>.
For large values of <var>n</var>
this is a four-fold speed-up over the original version.
</p>
<p>
The pattern above breaks down into three natural sections.
</p>
<table BORDER=0 CELLPADDING=0
    STYLE="border-collapse: collapse">
<tbody STYLE="background: #E1E1FF">
<tr>
<td ALIGN=right>1</td>
<td ROWSPAN=3 STYLE="border-right: 1px solid black">&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"><code>ld4 r32 = [r29], 4</code></td>
<td ROWSPAN=3 STYLE="border-right: 1px solid black"></td>
<td>&nbsp;</td>
<td ROWSPAN=3 STYLE="border-right: 1px solid black"></td>
<td>&nbsp;</td>
<td ROWSPAN=3 STYLE="border-right: 1px solid black"></td>
<td>&nbsp;</td>
<td ROWSPAN=3 STYLE="border-right: 1px solid black"></td>
<td><code>;;</code></td>
<td ROWSPAN=3>Warm-up</td>
</tr>
<tr>
<td ALIGN=right>2</td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"><code>ld4 r33 = [r29], 4</code></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>3</td>
<td STYLE="padding: 0ex 1ex"><code>adds r32 = r32, 1</code></td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"><code>ld4 r34 = [r29], 4</code></td>
<td>&nbsp;</td>
<td><code>;;</code></td>
</td>
</tr>
</tbody>
<tbody STYLE="background: #D6F8DE">
<tr>
<td ALIGN=right>4</td>
<td ROWSPAN=7 STYLE="border-right: 1px solid black">&nbsp;</td>
<td STYLE="padding: 0ex 1ex"><code>st4 [r28] = r32, 4</code></td>
<td ROWSPAN=7 STYLE="border-right: 1px solid black"></td>
<td STYLE="padding: 0ex 1ex"><code>adds r33 = r33, 1</code></td>
<td ROWSPAN=7 STYLE="border-right: 1px solid black"></td>
<td>&nbsp;</td>
<td ROWSPAN=7 STYLE="border-right: 1px solid black"></td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"><code>ld4 r35 = [r29], 4</code></td>
<td ROWSPAN=7 STYLE="border-right: 1px solid black"></td>
<td><code>;;</code></td>
<td ROWSPAN=7>Cruise</td>
</tr>
<tr>
<td ALIGN=right>5</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"><code>ld4 r32 = [r29], 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>st4 [r28] = r33, 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>adds r34 = r34, 1</code></td>
<td>&nbsp;</td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>6</td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: dotted 1px black"><code>ld4 r33 = [r29], 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>st4 [r28] = r34, 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>adds r35 = r35, 1</code></td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>7</td>
<td STYLE="padding: 0ex 1ex"><code>adds r32 = r32, 1</code></td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"><code>ld4 r34 = [r29], 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>st4 [r28] = r35, 4</code></td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>8</td>
<td STYLE="padding: 0ex 1ex"><code>st4 [r28] = r32, 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>adds r33 = r33, 1</code></td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"><code>ld4 r35 = [r29], 4</code></td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>9</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"><code>ld4 r32 = [r29], 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>st4 [r28] = r33, 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>adds r34 = r34, 1</code></td>
<td>&nbsp;</td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>10</td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: dotted 1px black"><code>ld4 r33 = [r29], 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>st4 [r28] = r34, 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>adds r35 = r35, 1</code></td>
<td><code>;;</code></td>
</tr>
</tbody>
<tbody STYLE="background: #FFCECE">
<tr>
<td ALIGN=right>11</td>
<td ROWSPAN=3 STYLE="border-right: 1px solid black">&nbsp;</td>
<td STYLE="padding: 0ex 1ex"><code>adds r32 = r32, 1</code></td>
<td ROWSPAN=3 STYLE="border-right: 1px solid black"></td>
<td>&nbsp;</td>
<td ROWSPAN=3 STYLE="border-right: 1px solid black"></td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"></td>
<td ROWSPAN=3 STYLE="border-right: 1px solid black"></td>
<td STYLE="padding: 0ex 1ex"><code>st4 [r28] = r35, 4</code></td>
<td ROWSPAN=3 STYLE="border-right: 1px solid black"></td>
<td><code>;;</code></td>
<td ROWSPAN=3>Cool-down</td>
</tr>
<tr>
<td ALIGN=right>12</td>
<td STYLE="padding: 0ex 1ex"><code>st4 [r28] = r32, 4</code></td>
<td STYLE="padding: 0ex 1ex"><code>adds r33 = r33, 1</code></td>
<td>&nbsp;</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"></td>
<td><code>;;</code></td>
</tr>
<tr>
<td ALIGN=right>13</td>
<td STYLE="padding: 0ex 1ex; border-top: 1px dotted black"></td>
<td STYLE="padding: 0ex 1ex; border-bottom: 1px dotted black"><code>st4 [r28] = r33, 4</code></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td><code>;;</code></td>
</tr>
</tbody>
</table>
<p>
The first three cycles comprise the warm-up phase
(formally known as the <i>prologue</i>).
At the start, no registers are doing any work,
but during the course of the warm-up phase,
they get into the act one at a time.
At the end of the warm-up phase, all the registers
are busy doing work.
</p>
<p>
Most of the time is spent in the middle cruise phase
(formally known as the <i>kernel</i>),
wherein all four registers are busy carrying out one of the
iterations.
Note that during every cycle of the cruise phase,
there is a load, an increment, and a store,
with the registers taking turns performing each of
the operations.
</p>
<p>
The last three cycles are the cool-down phase
(formally known as the <i>epilogue</i>),
where the registers start draining their last bits of work
and no new work is started.
</p>
<p>
Okay, now that we understand how the above code works,
we're going to turn it on its side next time.
Stay tuned for the thrilling conclusion!</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1196591">
				<div id="div-comment-1196591" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150806-00/?p=91161#comment-1196591">
			August 6, 2015 at 7:46 am</a>		</div>

		<p>Aw, a cliffhanger! And just when it was getting exciting too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1196561">
				<div id="div-comment-1196561" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Otto Pierce</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150806-00/?p=91161#comment-1196561">
			August 6, 2015 at 9:13 am</a>		</div>

		<p>With all this talk of Itanium, is Microsoft going to bring back Windows on Itanium?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1196551">
				<div id="div-comment-1196551" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150806-00/?p=91161#comment-1196551">
			August 6, 2015 at 9:58 am</a>		</div>

		<p>Wow, that is a terrific illustration of the pipelining and the parallelism. &nbsp;I appreciate the effort to put all of that into diagrams.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1196541">
				<div id="div-comment-1196541" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150806-00/?p=91161#comment-1196541">
			August 6, 2015 at 10:09 am</a>		</div>

		<p>So that will lead to software pipelining and the rotating register file, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1196521">
				<div id="div-comment-1196521" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EduardoS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150806-00/?p=91161#comment-1196521">
			August 6, 2015 at 4:03 pm</a>		</div>

		<p>Nobody noticed the typo in the last row of the third column of the first table?</p>
<p>Also, noted that every article in this series comes with a typo, a way to check whether there is anyone actually reading it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1196511">
				<div id="div-comment-1196511" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150806-00/?p=91161#comment-1196511">
			August 6, 2015 at 6:29 pm</a>		</div>

		<p>@EduardoS:</p>
<p>FWIW I noticed that typo, and came to the comments page to let Raymond know about it. However, I have to admit I didn&#39;t notice typos in other articles.</p>
<p>I must say that Raymond has a real knack for being able to nicely explain some complex operations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle even thread-even depth-1" id="comment-1196501">
				<div id="div-comment-1196501" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150806-00/?p=91161#comment-1196501">
			August 7, 2015 at 5:54 am</a>		</div>

		<p>@Otto Pierce: I&#39;m pretty sure Microsoft still supports Itanium, since Windows Server 2008 R2 is under extended support until 2020.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1196381">
				<div id="div-comment-1196381" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Beldantazar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150806-00/?p=91161#comment-1196381">
			August 7, 2015 at 5:40 pm</a>		</div>

		<p>This sort of expansion is similar to what you can do in CUDA, except there you actually CAN have 2000 registers to use, and a separate thread to do each of the loads.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

