<html>
<head>
<title>Why does misinterpreting UTF16-LE Unicode text as ANSI tend to show up as just one character?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does misinterpreting UTF16-LE Unicode text as ANSI tend to show up as just one character?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 7, 2018 / year-entry #33</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180207-00/?p=97985</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Because you're probably working in the ASCII subset.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
If you misinterpret ANSI text as Unicode,
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20140930-00/?p=43953">
you usually get nonsense Chinese text</a>.
If you misinterpret Unicode text as ANSI,
why do you usually just get the first character?
</p>
<p>
Okay, this one is a lot easier.
</p>
<p>
The Latin alphabet fits in the range
U+0041 through U+007A.
If you're using the UTF16-LE encoding
(which is what Unicode means in the context of Windows),
then the first byte will be the correct character,
and the second byte will be zero,
which will serve as the string terminator.
</p>
<p>
For example,
<code>(char*)L"Abc"</code> will act like <code>"A"</code>.
</p>
<p>
I remember looking at the registry and finding a registry
key directly under <code>HKEY_</code><code>CURRENT_</code><code>USER</code>
called simple <code>S</code>.
In other words, the program stored its settings under
<code>HKEY_</code><code>CURRENT_</code><code>USER\</code><code>S</code>.
</p>
<p>
This bugged me enough that I dove in to figure out how this happened.
</p>
<p>
The program in question had a Windows 95 version
and a Windows NT version.
They compiled both versions from the same code base by
using the <code>TCHAR</code>-style functions,
so that when compiled for Windows 95, it was an ANSI program,
and when compiled for Windows NT, it was Unicode.
</p>
<p>
The program came with a helper DLL, which was also compiled
as ANSI for Windows 95 and as Unicode for Windows NT.
The name of the DLL was not inside an <code>#ifdef</code>,
so even though the code was compiled twice, both versions
of the DLL had the same name.
</p>
<p>
Furthermore, the <code>.def</code> file and the internal
library's header file did not contain any <code>#ifdef</code>s
either.
So the Windows 95 version of <code>HELPER.DLL</code>
had an exported function called <code>CreateRegistryKey</code> (say),
which accepted an ANSI string.
And the Windows NT version of <code>HELPER.DLL</code> also
had an exported function called <code>CreateRegistryKey</code>,
but which accepted a Windows NT string.
</p>
<p>
The problem was that their Windows NT product
shipped with the Windows 95 version of the helper DLL!
</p>
<p>
Since the DLL name was the same, and the function names were
the same,
the operating system happily loaded the DLL and imported
the function name successfully,
even though it was the wrong function.
</p>
<p>
As a result, the Windows NT version passed a Unicode string
to a function that interpreted it as an ANSI string,
and the registry key name
<code>Software</code>
became misinterpreted as just <code>S</code>.
</p>
<p>
There are a few ways of avoiding the problem.
</p>
<p>
The obvious one is to abandon the Windows 95 version of the product.
Because c'mon now.
</p>
<p>
Okay, but let's go back in time to a period when supporting Windows 95
was still a reasonable thing to do.
</p>
<p>
One option is to give the Windows 95 and Windows NT versions of the DLL
different names,
say,
<code>HELPERA.DLL</code>
and
<code>HELPERW.DLL</code>.
That way, when a program linked to <code>HELPERW.DLL</code>
but you accidentally put <code>HELPERA.DLL</code> in the product
directory,
you would get a "DLL not found" error instead of running ahead
with the wrong DLL.
</p>
<p>
Mind you, this solution would catch the problem only if it occurred
at packaging.
But if the problem was that the code linked together some object files
compiled in ANSI mode and some object files compiled in Unicode mode,
say because you used the wrong version of a static library,
then the error would go undetected because both sets of object files
will look for the function
<code>CreateRegistryKey</code>,
and if the module was linked with (say) <code>HELPERW.LIB</code>,
then both sets of object files will link to <code>HELPERW.DLL</code>,
even though half of them thought they were linking to
<code>HELPERA.DLL</code>.
</p>
<p>
What they should have done was change the names of the exports.
Export two functions
<code>CreateRegistryKeyA</code> and
<code>CreateRegistryKeyW</code>.
Use an inline helper function or a macro in the header file
so that ANSI clients are directed to
<code>CreateRegistryKeyA</code> and
Unicode clients are directed to
<code>CreateRegistryKeyW</code>.
The implementation of the helper DLL need only implement the
versions of the functions corresponding to the desired character set.
In other words, <code>HELPERA.DLL</code> implements
<code>CreateRegistryKeyA</code> and
<code>HELPERW.DLL</code> implements
<code>CreateRegistryKeyW</code>.
(If you use macros, then this happens automatically when you
implement <code>CreateRegistryKey</code>.)
</p>
<p>
This design solves a few problems.
</p>
<ul>
<li>
<p>If you package the wrong DLL, the file names will not match
    and you'll get an error at load time.</p>
</li>
<li>
<p>If you have a mix of object files, you will get a linker error
    because <code>HELPERA.LIB</code> won't have entries for the Unicode
    versions, and vice versa.</p>
</li>
<li>
<p>If you really needed to support the mixed version, you could link
    to both <code>HELPERA.LIB</code> And
    <code>HELPERW.LIB</code>.
    Each object file will pull the function it needs from the
    appropriate import library,
    and will bind to the corresponding DLL at runtime.</p>
</li>
<li>
<p>In the future, you might decide to merge the helper
    libraries into a single helper library that supports both
    character sets.
    Giving the functions distinct names allows this to happen.
    (This is what most of Windows does.
    For example, <code>kernel32.dll</code> contains both ANSI
    and Unicode implementations of many functions,
    distinguished by function name.)</p>
</li>
</ul>
<p>
Moral of the story:
If two functions are different, give them different names.
(If you use mangled names, then the names will already be
different due to different mangling.)
</p>
<p>
<b>Related</b>:
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20161201-00/?p=94836">
What is <code>__wchar_t</code>
(with the leading double underscores)
and why am I getting errors about it</a>?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1 parent" id="comment-1324225">
				<div id="div-comment-1324225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180207-00/?p=97985#comment-1324225">
			February 7, 2018 at 7:06 am</a>		</div>

		<p>&#8220;This is what most of Windows does&#8221; parts of kernel32 and shell32 are weird, they export A and W functions but also a non-suffixed version that is the same as the A version. GetProcAddress compatibility for ported 16-bit apps?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1324245">
				<div id="div-comment-1324245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180207-00/?p=97985#comment-1324245">
			February 7, 2018 at 8:03 am</a>		</div>

		<p><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070103-15/?p=28523">Discussed by Raymond.</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1324235">
				<div id="div-comment-1324235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180207-00/?p=97985#comment-1324235">
			February 7, 2018 at 7:17 am</a>		</div>

		<p>Ah, you didn&#8217;t mention UNICOWS (aka &#8220;Microsoft Layer for Unicode&#8221; or MSLU).  A great solution to a problem that had mostly gone away by the time it shipped (it was released about the time that WinXP put a nail through the heart of Win9x).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-2" id="comment-1324255">
				<div id="div-comment-1324255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180207-00/?p=97985#comment-1324255">
			February 7, 2018 at 10:05 am</a>		</div>

		<p>Yes! This!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1324275">
				<div id="div-comment-1324275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180207-00/?p=97985#comment-1324275">
			February 7, 2018 at 4:05 pm</a>		</div>

		<p>Joel, of Joel on Software, wrote back in 2003 (15 years ago!) an article titled &#8220;The Absolute Minimum Every Developer Must Know About Character Sets&#8221; ( <a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/" rel="nofollow">https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/</a> ).</p>
<p>I completely agree with him. But would like to add one point: every developer *should* be able to recognize, at least, the most common types of mojibake (UTF-8 to/from ANSI, Unicode [UTF-16] to/from ANSI, and ANSI to/from OEM). Each one of the first four is very characteristic, and it would help your psychic powers tell in what part of the code the bug lies. The last two, involving the OEM sets/codepages, are a bit more difficult to spot, but are useful if you need to deal with the command line or console applications.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1324285">
				<div id="div-comment-1324285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">French Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180207-00/?p=97985#comment-1324285">
			February 8, 2018 at 7:37 am</a>		</div>

		<p>ANSI isn&#8217;t a single character, but multiple 8-bit character sets with significant overlap. Treating any other encoding as UTF-8 is overwhelmingly likely to produce invalid data. Treating UTF-8 as an ANSI encoding (or OEM, which is also an ASCII superset) will garble non-ASCII characters into sequences of non-ASCII characters, making the result harder to read (with how much harder depending on the language). Treating UTF-16 as UTF-8 will clip the string to 0 or 1 character (depending on endiannes and assuming NUL as the string terminator) if the string only uses ASCII (otherwise, it won&#8217;t be valid). Treating UTF-8 as UTF-16 will produce completely unrelated characters (usually Chinese). And using the wrong 8-bit ASCII superset will substitute non-ASCII characters for others.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1324315">
				<div id="div-comment-1324315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180207-00/?p=97985#comment-1324315">
			February 8, 2018 at 11:39 am</a>		</div>

		<p>By definition, treating a string with encoding X as encoding Y is incorrect, no matter what X and Y are, and thus, a bug. It doesn&#8217;t help to say &#8220;ANSI treated as UTF-8 will likely produce illegal bytes sequences&#8221;. When that happens, code is buggy or something has gone horribly wrong, and it&#8217;s of no use saying &#8220;it&#8217;s illegal&#8221;.</p>
<p>About the confusion on ANSI: right, technically there isn&#8217;t such thing as an &#8220;ANSI encoding&#8221;. But in informal talk, &#8220;ANSI&#8221; refers almost always to Windows-1252, itself a superset of ISO 8859-1 (a.k.a. Latin-1). In much the same way, &#8220;OEM&#8221; usually refers to DOS codepage 437 (or one of its variations, such as 850, if you are outside the USA).</p>
<p>The nearest thing to &#8220;ANSI encoding&#8221; are the ISO 8859-x encodings, and the Windows-125x code pages, which are themselves related (but not equivalent) to several ISO-8859-x encodings. But if there are several Windows codepages, why is ANSI synonym of Windows-1252? I can only speculate, but Windows-1252 was used from the first version of Windows (1985), while eastern variations were introduced in the 90s, when Windows NT was about to bring Unicode support, a better solution to the problem. So those variants didn&#8217;t get as popular as Windows-1252.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

