<html>
<head>
<title>Interlocked operations don't solve everything</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Interlocked operations don&#8217;t solve everything</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 15, 2004 / year-entry #337</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>17</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Interlocked operations are a high-performance way of updating DWORD-sized or pointer-sized values in an atomic manner. Note, however, that this doesn't mean that you can avoid the critical section. For example, suppose you have a critical section that protects a variable, and in some other part of the code, you want to update the variable...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://msdn.microsoft.com/library/en-us/dllproc/base/interlocked_variable_access.asp">
Interlocked operations</a>
are a high-performance way of updating DWORD-sized
or pointer-sized values in an atomic manner.
Note, however, that this doesn't mean that you can avoid
the critical section.
</p>
<p>
For example, suppose you have a critical section that protects
a variable, and in some other part of the code, you want to
update the variable atomically.  "Well," you say,
"this is a simple imcrement, so I can skip the critical section
and just do a direct InterlockedIncrement.  Woo-hoo, I avoided
the critical section bottleneck."
</p>
<p>
Well, except that the purpose of that critical section was to
ensure that nobody changed the value of the variable while the
protected section of code was running.  You just ran in and
changed the value behind that code's back.
</p>
<p>
Conversely, some people suggested emulating complex interlocked operations
by having a critical section whose job it was to protect the variable.
For example, you might have an InterlockedMultiply that goes like this:
</p>
<pre>
<i>// Wrong!
LONG InterlockedMultiply(volatile LONG *plMultiplicand, LONG lMultiplier)
{
  EnterCriticalSection(&amp;SomeCriticalSection);
  LONG lResult = *plMultiplicand *= lMultiplier;
  LeaveCriticalSection(&amp;SomeCriticalSection);
  return lResult;
}</i>
</pre>
<p>
While this code does protect against two threads performing an
InterlockedMultiply against the same variable simultaneously,
it fails to protect against other code performing a simple
atomic write to the variable.  Consider the following:
</p>
<pre>
int x = 2;
Thread1()
{
  InterlockedIncrement(&amp;x);
}

Thread2()
{
  InterlockedMultiply(&amp;x, 5);
}
</pre>
<p>
If the InterlockedMultiply were truly interlocked,
the only valid results would be x=15 (if the interlocked
increment beat the interlocked multiply)
or x=11 (if the interlocked multiply beat the interlocked
increment).
But since it isn't truly interlocked, you can get other
weird values:
</p>
<table>
<tr>
<th>Thread 1</th>
<th>Thread 2</th>
</tr>
<tr>
<td STYLE="border: solid .75pt black" COLSPAN=2 ALIGN=CENTER>x = 2 at start</td>
</tr>
<tr>
<td></td>
<td STYLE="border: solid .75pt black">InterlockedMultiply(&amp;x, 5)</td>
</tr>
<tr>
<td></td>
<td STYLE="border: solid .75pt black">EnterCriticalSection</td>
</tr>
<tr>
<td></td>
<td STYLE="border: solid .75pt black">load x (loads 2)</td>
</tr>
<tr>
<td STYLE="border: solid .75pt black">InterlockedIncrement(&amp;x);<br>
        x is now 3</td>
<td></td>
</tr>
<tr>
<td></td>
<td STYLE="border: solid .75pt black">multiply by 5 (result: 10)</td>
</tr>
<tr>
<td></td>
<td STYLE="border: solid .75pt black">store x (stores 10)</td>
</tr>
<tr>
<td></td>
<td STYLE="border: solid .75pt black">LeaveCriticalSection</td>
</tr>
<tr>
<td STYLE="border: solid .75pt black" COLSPAN=2 ALIGN=CENTER>x = 10 at end</td>
</tr>
</table>
<p>
Oh no, our interlocked multiply isn't very interlocked after all!
How can we fix it?
</p>
<p>
If the operation you want to perform is a function solely of the
starting numerical value and the other function parameters
(with no dependencies on any other memory locations), you can
write your own interlocked-style operation with the help of
<a HREF="http://msdn.microsoft.com/library/en-us/dllproc/base/interlockedcompareexchange.asp">
InterlockedCompareExchange</a>.
</p>
<pre>
LONG InterlockedMultiply(volatile LONG *plMultiplicand, LONG lMultiplier)
{
  LONG lOriginal, lResult;
  do {
    lOriginal = *plMultiplicand;
    lResult = lOriginal * lMultiplier;
  } while (InterlockedCompareExchange(plMultiplicand,
                                      lResult, lOriginal) != lOriginal);
  return lResult;
}
</pre>
<p>
[Typo in algorithm fixed 9:00am.]
</p>
<p>
To perform a complicated function on the multiplicand, we perform
three steps.
</p>
<p>
First, capture the value from memory:
    <code>lOriginal = *plMultiplicand;</code>
</p>
<p>
Second, compute the desired result from the captured value:
    <code>lResult = lOriginal * lMultiplier;</code>
</p>
<p>
Third, store the result provided the value in memory has not changed:
<code>InterlockedCompareExchange(plMultiplicand, lResult, lOriginal)</code>
</p>
<p>
If the value did change, then this means that the interlocked operation
was unsucessful because somebody else changed the value while we were
busy doing our computation.  In that case, loop back and try again.
</p>
<p>
If you walk through the scenario above with this new InterlockedMultiply
function, you will see that after the interloping InterlockedIncrement,
the loop will detect that the value of "x" has changed and restart.
Since the final update of "x" is performed by an InterlockedCompareExchange
operation, the result of the computation is trusted
only if "x" did not change value.
</p>
<p>
<strong>Note</strong> that this technique works only if the
operation being performed is a pure function of the memory value
and the function parameters.  If you have to access other memory
as part of the computation, then this technique will not work!
That's because those other memory locations might have changed
during the computation and you would have no way of knowing, since
InterlockedCompareExchange checks only the memory value being
updated.
</p>
<p>
Failure to heed the above note results in problems such as the
so-called "ABA Problem".
I'll leave you to google on that term and read about it.
Fortunately, everybody who talks about it also talks about how
to <strong>solve</strong> the ABA Problem, so I'll leave you to
read that, too.
</p>
<p>
Once you've read about the ABA Problem and its solution,
you should be aware that the solution has already been
implemented for you, via the
<a HREF="http://msdn.microsoft.com/library/en-us/dllproc/base/interlocked_singly_linked_lists.asp">
Interlocked SList functions</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-210653">
				<div id="div-comment-210653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863#comment-210653">
			September 15, 2004 at 7:11 am</a>		</div>

		<p>Shouldn&#8217;t that while condition be &quot;!= lOriginal&quot;?  I thought InterlockedCompareExchange returned the initial value of the destination, and we want to keep looping if the result wasn&#8217;t what we expected.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-210663">
				<div id="div-comment-210663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863#comment-210663">
			September 15, 2004 at 7:35 am</a>		</div>

		<p>D&#8217;oh! You&#8217;re right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-210673">
				<div id="div-comment-210673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863#comment-210673">
			September 15, 2004 at 7:42 am</a>		</div>

		<p>Spelled Interlocked wrong in title:<br />
<br />&gt;Inerlocked&lt; operations don&#8217;t solve everything </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-210733">
				<div id="div-comment-210733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Seth McCarus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863#comment-210733">
			September 15, 2004 at 10:32 am</a>		</div>

		<p>Okay, two simple and probably stupid questions:</p>
<p>Why is there not InterlockedAssign function?  (I guess InterlockedExchange could be used there, but still&#8230;)</p>
<p>How can one iterate a list created with InitializeSListHead?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-210753">
				<div id="div-comment-210753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863#comment-210753">
			September 15, 2004 at 10:45 am</a>		</div>

		<ol>
<li>Please read the linked page that opens the article.<br />
<br />2. You can&#8217;t walk a linked list atomically.</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-210763">
				<div id="div-comment-210763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Seth McCarus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863#comment-210763">
			September 15, 2004 at 11:04 am</a>		</div>

		<p>What about on a multiprocessor system?  If two CPUs try to write to the same memory location &quot;simultaneously,&quot; would there not be problems?</p>
<p>Maybe synchronization is performed on a hardware level??</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-210783">
				<div id="div-comment-210783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863#comment-210783">
			September 15, 2004 at 11:09 am</a>		</div>

		<p>An &quot;InterlockedAssign&quot; function would be handy because while writes to aligned 32-bit variables are always atomic, they&#8217;re not always <em>ordered</em> on non-x86 platforms as explained at &lt;<a target="_new" href="http://msdn.microsoft.com/library/en-us/dllproc/base/synchronization_and_multiprocessor_issues.asp&gt;" rel="nofollow"></a><a href="http://msdn.microsoft.com/library/en-us/dllproc/base/synchronization_and_multiprocessor_issues.asp&#038;gt" rel="nofollow">http://msdn.microsoft.com/library/en-us/dllproc/base/synchronization_and_multiprocessor_issues.asp&#038;gt</a>;. That article suggests using InterlockedExchange instead of a direct assignment, but that seems like overkill on platforms where writes are always ordered, e.g. x86.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-210823">
				<div id="div-comment-210823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pavel Lebedinsky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863#comment-210823">
			September 15, 2004 at 2:03 pm</a>		</div>

		<p>The MSDN article that Jordan referred to is not quite correct, by the way:</p>
<p><a target="_new" href="http://groups.google.com/groups?selm=3f79e7ee%241%40news.microsoft.com&amp;output=gplain" rel="nofollow">http://groups.google.com/groups?selm=3f79e7ee%241%40news.microsoft.com&#038;output=gplain</a></p>
<p>Win32 should have provided a memory barrier macro/intrinsic that is guaranteed to be respected by both the compiler and hardware. As far as I know, there&#8217;s still no such thing (there are various bits and pieces like the MemoryBarrier macro but nothing that prevents both CPU and compiler reordering).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-210833">
				<div id="div-comment-210833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.foxyshadis.com' rel='external nofollow' class='url'>foxyshadis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863#comment-210833">
			September 15, 2004 at 2:11 pm</a>		</div>

		<p>Interestingly, one of the best explanations of ABA google came up with was in this blog.</p>
<p><a target="_new" href="http://weblogs.asp.net/oldnewthing/archive/2004/08/17/215682.aspx#217600" rel="nofollow">http://weblogs.asp.net/oldnewthing/archive/2004/08/17/215682.aspx#217600</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-210723">
				<div id="div-comment-210723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jeffdav' rel='external nofollow' class='url'>jeffdav</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863#comment-210723">
			September 15, 2004 at 10:23 am</a>		</div>

		<p>I came across someone who really did not understand InterlockedIncrement() once.  I had to remove the following:</p>
<p>/* Synchronization */<br />
<br />#define InterlockedIncrement(plong) (++(*(plong)))<br />
<br />#define InterlockedDecrement(plong) (&#8211;(*(plong)))</p>
<p>I was sad.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-210773">
				<div id="div-comment-210773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.trilithium.com/' rel='external nofollow' class='url'>Johan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863#comment-210773">
			September 15, 2004 at 11:06 am</a>		</div>

		<p>It&#8217;s not clear to me what the intended memory access/ordering semantics of the plain (non-*Acquire/*Release) Interlocked* operations are. The documentation says nothing about it, but there&#8217;s an IA64-specific note indicating an associated *full* memory barrier. Is that the intended semantics? Or was that fence just added to avoid breaking all the existing code which assumes an x86-like memory model?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-210873">
				<div id="div-comment-210873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lowercase josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863#comment-210873">
			September 16, 2004 at 3:12 am</a>		</div>

		<p>If I&#8217;m not mistaken, what you have to lock for the critical section to work is the data, not the code.  If all access to that data goes through the same critical section, that first InterlockedMultiply would work correctly.  To me, &quot;critical section&quot; seems to imply a &quot;section&quot; of code, but you nearly always want to lock the data.  :/</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-210883">
				<div id="div-comment-210883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863#comment-210883">
			September 16, 2004 at 6:00 am</a>		</div>

		<p>Why are they called the interlocked functions rather than the atomic functions? ie AtomicIncrement etc. That would be a slightly more intuitive name (albiet, doesn&#8217;t sound as cool :)</p>
<p>Seth: yes the sync is done with hardware.</p>
<p>InterlockedCompareExchange() is some assembly like this:</p>
<p>lock cmpxchg a, b</p>
<p>The lock prefix causes the CPU to perform a &quot;bus assert&quot; which basically locks the bus. It prevents other processors from accessing memory while the bus is held. At least this is my understanding.</p>
<p>After a bus assert I suppose the CPU clears the dcache but now I&#8217;m just guessing :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-210893">
				<div id="div-comment-210893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MikeF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863#comment-210893">
			September 16, 2004 at 6:38 am</a>		</div>

		<p>Possibly silly question: What is the &quot;critical section bottleneck&quot;, and why is looping over a cmpxchg better?</p>
<p>My understanding is that a pure critical section approach (a) lets the OS sleep the blocked thread, and (b) wastes less time than the cmpxchg loop anyway.</p>
<p>I&#8217;m almost certainly missing something here but I can&#8217;t see what. Is the overhead on critical sections particularly big?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-210913">
				<div id="div-comment-210913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Seth McCarus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863#comment-210913">
			September 16, 2004 at 7:11 am</a>		</div>

		<p>Thanks for your answers, Raymond and Mike.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-210953">
				<div id="div-comment-210953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863#comment-210953">
			September 16, 2004 at 8:10 am</a>		</div>

		<p>Mike wrote: &quot;After a bus assert I suppose the CPU clears the dcache but now I&#8217;m just guessing :)&quot;</p>
<p>That would take far too long. Actually processors in SMP systems obey a cache coherency protocol which ensures that memory that&#8217;s been modified in cache but not yet written back is forwarded from processor to processor (possibly by writing it back to memory first) and memory that&#8217;s about to be modified by one processor is invalidated in the caches of the others.</p>
<p>The problems of memory coherence are not due to caching but to reordering of instructions in the processor core and of memory operations issued by the processor core to its cache(s).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-211193">
				<div id="div-comment-211193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Trent Glascock</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040915-00/?p=37863#comment-211193">
			September 16, 2004 at 12:35 pm</a>		</div>

		<p>MikeF: Waiting on a critical section is an expensive operation.  So expensive that on multi-processor systems you can elect to &quot;spin&quot; before waiting on the critical section.  The code  in the original post could loop through a hundred iterations and still come out ahead of waiting on a busy critical section.</p>
<p>See InitializeCriticalSectionAndSpinCount</p>
<p><a target="_new" href="http://msdn.microsoft.com/library/en-us/dllproc/base/initializecriticalsectionandspincount.asp" rel="nofollow">http://msdn.microsoft.com/library/en-us/dllproc/base/initializecriticalsectionandspincount.asp</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

