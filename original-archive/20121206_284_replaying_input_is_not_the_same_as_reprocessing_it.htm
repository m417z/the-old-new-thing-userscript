<html>
<head>
<title>Replaying input is not the same as reprocessing it</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Replaying input is not the same as reprocessing it</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 6, 2012 / year-entry #285</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Once upon a time, there was an application that received some input and said, "Okay, this input cancels my temporary state. I want to exit my temporary state, but I also want the input that took me out of the temporary state to go to whatever control would have received the input if I hadn't...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Once upon a time, there was an application that received some input and said, "Okay, this input cancels my temporary state. I want to exit my temporary state, but I also want the input that took me out of the temporary state to go to whatever control would have received the input if I hadn't been in the temporary state in the first place." (For example, you might want the input that dismisses a pop-up window to be acted upon rather than eaten by the pop-up.) The application decided to solve this problem by regenerating the input message via <code>Send&shy;Input</code>, so that it goes back into the input queue. The theory, is that when the message pump pulls the regenerated input out of the queue, the temporary state will not be present, and the message will be routed to the correct window.</p>
<p> I raised concerns that this technique would create problems with input reordering and multiple-processing, but the customer decided to stick with their original design. </p>
<p> Time passed, and I had forgotten about this application. </p>
<p> Some months later, another question came in: "We find that when the system is under load, we sometimes get into a state where dismissing our temporary state results in the mouse button getting 'stuck' down. <i>i.e.</i>, the user physically releases the mouse button, but we get spurious <code>WM_<wbr>LBUTTON&shy;DOWN</wbr></code> with no matching <code>WM_<wbr>LBUTTON&shy;UP</wbr></code>." </p>
<p> The customer, it turns out, was the same one I had cautioned earlier about the dangers of replaying input. </p>
<p> When you get input, <i>that is your chance to process the input</i>. If you decide you don't want to deal with the input right now and replay it via <code>Send&shy;Input</code>, you create a few new problems: </p>
<p> First, you've caused everybody else who is looking at input states to see a second copy of your replayed events. If it were a keyboard event you replayed, a keyboard hook (or any code which subclassed your window) would see a key go down twice. If there were any mouse hooks, they would see the button go down twice. This is particularly confusing because the mouse button doesn't autorepeat. How can it go Down two times in a row without an intervening Up? </p>
<p> Second, if there is other input in your queue, you just rearranged input events. For example, suppose the input queue consists of the following events: </p>
<table border="1" style="border-collapse: collapse; border: solid .75pt black">
<tr>
<td><code>WM_<wbr>LBUTTON&shy;DOWN</wbr></code></td>
</tr>
<tr>
<td><code>WM_<wbr>LBUTTON&shy;UP</wbr></code></td>
</tr>
</table>
<p> You retrieve the first message (the button-down), resulting in the following input queue: </p>
<table border="1" style="border-collapse: collapse; border: solid .75pt black">
<tr>
<td><strike><code>WM_<wbr>LBUTTON&shy;DOWN</wbr></code></strike></td>
</tr>
<tr>
<td><code>WM_<wbr>LBUTTON&shy;UP</wbr></code></td>
</tr>
</table>
<p> For illustrative purposes, I crossed out the message that is no longer in the queue, so you can see where it used to be. </p>
<p> Now you decide to replay that message via <code>Send&shy;Input</code>. This appends the event to your queue, resulting in </p>
<table border="1" style="border-collapse: collapse; border: solid .75pt black">
<tr>
<td><strike><code>WM_<wbr>LBUTTON&shy;DOWN</wbr></code></strike></td>
</tr>
<tr>
<td><code>WM_<wbr>LBUTTON&shy;UP</wbr></code></td>
</tr>
<tr>
<td><code>WM_<wbr>LBUTTON&shy;DOWN</wbr></code></td>
</tr>
</table>
<p> Your message pump runs, it processes the button-up event ("Huh? How did I get an Up without a Down?"), and then it processes the button-down event. There are no further events, so the mouse button is down and gets stuck that way. </p>
<p> You can imagine what other sorts of bad things can happen if an event in the queue is, say, a press or release of the shift key. Oops, the user clicked the Delete button and then hit the shift key afterwards to type a capital letter A, but due to your input reordering, your code saw it as a Shift+Click on the Delete button, and the item was deleted without confirmation. </p>
<p> When you get an input message, that is your chance to process it. If you decide that you want to hand the message off to somebody else, you have to do it during the processing of that message. If you try to process it at some other time, the input states may not be right. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1024573">
				<div id="div-comment-1024573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024573">
			December 6, 2012 at 7:21 am</a>		</div>

		<p>&quot;I&#39;m too lazy to go get a screwdriver, so I&#39;ll just use a hammer for this screw. When I get a screwdriver, I&#39;ll just pull the screw out and drive it properly to the same hole.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1024583">
				<div id="div-comment-1024583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/j3anders_4000_gmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>j3anders@gmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024583">
			December 6, 2012 at 7:51 am</a>		</div>

		<p>Just yesterday I had to fix a bug&#8230; For some reason, long ago in our software someone decided to create a custom subclassed version of CButton for checkboxes. They handled the action of checking the box by watching for LBUTTONUP. The way other messages were handled was mangled &#8211; many passing through, but other being handled and reimplemented for no apparent reason. Of course, there were no comments explaining why. Recently, a customer discovered that when tapping the screen to wake the system up from a blank screen, it was possible to toggle a checkbox without any of the normal warnings screaming &quot;you&#39;ve changed something&quot; or other visual side effects of checking that box. They changed a few other unrelated settings, then ran the software, and had issues caused because of the setting being checked.</p>
<p>It turns out that the bad implementation allowed the LBUTTONDOWN to wake up the system, and the up event checked the box. The base class never got a complete click, so our event handler never triggered even though the state changed. Completely removing the subclassing and using a standard CButton fixed the problem &#8211; we&#39;re still testing to make sure we can&#39;t figure out what drove the original developer to implement it in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1024593">
				<div id="div-comment-1024593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024593">
			December 6, 2012 at 8:33 am</a>		</div>

		<p>My solution to the problem was slightly more sane. I ran a second copy of the message loop in the input receiver until the temporary state was cleared (basically one cycle) then processed the input.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1024603">
				<div id="div-comment-1024603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henning Makholm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024603">
			December 6, 2012 at 8:55 am</a>		</div>

		<p>In an ideal world the function would probably have been called PostInput instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1024613">
				<div id="div-comment-1024613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lockwood</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024613">
			December 6, 2012 at 9:10 am</a>		</div>

		<p>Can I make a preemptive comment about autosorting the message queue, since WinGustavsonwhatever hasn&#39;t said anything on that line for a while?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk odd alt thread-odd thread-alt depth-1" id="comment-1024633">
				<div id="div-comment-1024633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024633">
			December 6, 2012 at 10:16 am</a>		</div>

		<p>Yep, painting a wall red and then blue is not the same as painting the wall blue and then red. &nbsp;The same is true of shift states, mouse clicks, etc&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1024643">
				<div id="div-comment-1024643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">spork</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024643">
			December 6, 2012 at 10:46 am</a>		</div>

		<p>perhaps a CBT hook would be a better fit for the user&#39;s use case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1024653">
				<div id="div-comment-1024653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024653">
			December 6, 2012 at 10:49 am</a>		</div>

		<p>Re-processing input queues reminds me of something that used to happen with DOS Hebrew support. There were TSRs that hooked the keyboard interrupt (INT9), and changed English keystrokes into their Hebrew key equivalents. If there were 2 different TSRs loaded, this could result in double-translation: User pressed &#39;/&#39;, TSR1 translated that into &#39;.&#39;, and TSR2 translated that into ץ.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1024663">
				<div id="div-comment-1024663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">benjamin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024663">
			December 6, 2012 at 12:01 pm</a>		</div>

		<p>I used to see a case where the right mouse button acted as if it was stuck down all the time in XP. I wonder if I was running some program that was doing something similar.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-entegygmail-com odd alt thread-odd thread-alt depth-1" id="comment-1024673">
				<div id="div-comment-1024673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Entegy' rel='external nofollow' class='url'>Entegy</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024673">
			December 6, 2012 at 12:20 pm</a>		</div>

		<p>Lockwood, if you read his Twitter, he apparently &quot;gave up&quot; on Microsoft.</p>
<div class="post">[<em>He seems awfully engaged for somebody who gave up. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1024683">
				<div id="div-comment-1024683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024683">
			December 6, 2012 at 2:58 pm</a>		</div>

		<p>[He seems awfully engaged for somebody who gave up. -Raymond]</p>
<p>I gave up a decade ago. The company that hired me runs a Windows shop. The UNIX tools have given me such power as no one else in the company had seen before, and few could match.</p>
<p>But we&#39;re developing on Windows so for the moment I have to care. I&#39;m not buying MS stock though. Too high a risk.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1024693">
				<div id="div-comment-1024693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BC_Programmer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024693">
			December 6, 2012 at 3:47 pm</a>		</div>

		<p>How did we go from &quot;Be careful messing with your input queue for the purpose of reprocessing&quot; to a lesson in Microsoft Stock purchases?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1024703">
				<div id="div-comment-1024703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024703">
			December 6, 2012 at 8:56 pm</a>		</div>

		<blockquote><p>
  The UNIX tools have given me such power as no one else in the company had seen before, and few could match.
</p></blockquote>
<p>Behold! Kneel before me, puny humans!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1024713">
				<div id="div-comment-1024713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024713">
			December 6, 2012 at 10:12 pm</a>		</div>

		<p>Interesting.. This could be the cause of a certain browser &#39;typing&#39; every character twice into an input box in a dialog window. Except for control keys (backspace, arrows, etc.). Thanks for this insight, Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1024723">
				<div id="div-comment-1024723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024723">
			December 7, 2012 at 1:06 am</a>		</div>

		<p>Replaying events [aka Macro Recorder for everyone who remembers :-)] always seemed a little brittle and/or dangerous even before I knew about the Windows event model. It sort of reminded me of Logo, where you told the turtle to move but if the turtle wasn&#39;t where you thought it would be, all sorts of fun would happen (like the turtle running into walls or falling off the table)!</p>
<p>The only safe method of replaying events that I can think of is in your own application, where you can send yourself a list of what specific actions were queued up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1024733">
				<div id="div-comment-1024733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jas71_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>jas71@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024733">
			December 7, 2012 at 5:21 am</a>		</div>

		<p>Key events getting eaten is a frequent bugbear for me &#8211; easy to encounter with remote control and virtualisation software. Use a keyboard shortcut to switch away from the remote control tool &#8211; the modifier keys&#39; keydown events get relayed to the target machine, the keyup stays on the host because you&#39;ve switched focus to another application by that point.</p>
<p>In this case, presumably the best way would be to pretend not to have handled it, so the message gets passed on to the next recipient &#8211; if you&#39;re trying to record whether the user has clicked inside a particular area yet, but still want clicks to get handled by whatever they clicked on: set the &#39;user has clicked here&#39; flag, then return &quot;these aren&#39;t the wndprocs you&#39;re looking for, keep looking&quot;? If it&#39;s a pop-up window and you want to pass the click through to the window underneath as if you weren&#39;t there, that&#39;ll be harder &#8211; though it&#39;s not something I can see much need for, being a pretty bizarre goal.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joe_woodbury even thread-even depth-1" id="comment-1024833">
				<div id="div-comment-1024833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/JoeWoodbury' rel='external nofollow' class='url'>JoeWoodbury</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024833">
			December 7, 2012 at 10:37 am</a>		</div>

		<blockquote><p>
  The UNIX tools have given me such power as no one else in the company had seen before, and few could match.
</p></blockquote>
<p>Reminds me of the conversion I&#39;ve had more than once:</p>
<p>Him: &quot;These UNIX tools let me do this!&quot;</p>
<p>Me: &quot;I&#39;ve never needed to do that and can&#39;t conceive of ever needing to do so in the future.&quot;</p>
<p>Crickets chirping.</p>
<p>Him: &quot;These UNIX tools let me do this!&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1024893">
				<div id="div-comment-1024893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Douglas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024893">
			December 7, 2012 at 2:01 pm</a>		</div>

		<p>@j3anders</p>
<p>It is correct to test button UP for mouse actions, but that&#39;s only the last step. The full procedure goes something like this:</p>
<p>Button Down : If hit, capture the mouse.</p>
<p>Button Up : If mouse is captured, un-capture it, and if hit, take action.</p>
<p>You can see this with the standard controls by clicking on something like a checkbox, keep holding and move the mouse away, then release. No check happens. Try again, but release when you return to the checkbox, it checks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1024993">
				<div id="div-comment-1024993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/j3anders_4000_gmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>j3anders@gmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121206-00/?p=5903#comment-1024993">
			December 10, 2012 at 7:12 am</a>		</div>

		<p>@Douglas,</p>
<p>That&#39;s correct, which is why we were having issues. When I saw that the custom checkbox had a mouse up but not a mouse down handler I knew exactly what was going on.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

