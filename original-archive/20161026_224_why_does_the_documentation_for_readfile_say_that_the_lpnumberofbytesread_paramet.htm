<html>
<head>
<title>Why does the documentation for ReadFile say that the lpNumberOfBytesRead parameter is optional when it is sometimes mandatory?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does the documentation for ReadFile say that the lpNumberOfBytesRead parameter is optional when it is sometimes mandatory?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 26, 2016 / year-entry #225</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161026-00/?p=94585</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In the fine print, due to incomplete expressiveness.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The
<a HREF="https://msdn.microsoft.com/en-us/library/windows/desktop/aa365467(v=vs.85).aspx">
documentation for the <code>Read&shy;File</code> function</a>
says
</p>
<pre>
BOOL WINAPI ReadFile(
  _In_ HANDLE hFile,
  _Out_ LPVOID lpBuffer,
  _In_ DWORD nNumberOfBytesToRead,
  _Out_opt_ LPDWORD lpNumberOfBytesRead,
  _Inout_opt_ LPOVERLAPPED lpOverlapped
);
</pre>
<p>
The
<code>lpNumber&shy;Of&shy;Bytes&shy;Read</code>
parameter is declared as <code>_Out_<wbr>opt_</code>.
The <code>_Out_</code> part means that the function
writes to the pointed-to value.
The <code>_opt_</code> part means that the parameter
is optional (may be null).
And yet, if you call <code>Read&shy;File</code> and pass
<code>nullptr</code> for the fourth parameter,
it crashes.
What's going on here?
</p>
<p>
What's going on is in the fine print:
</p>
<blockquote CLASS=q>
<dl>
<dt><i>lpNumberOfBytesRead</i> [out, optional]</dt>
<dd>
<p>
A pointer to the variable that receives the number of bytes read
when using a synchronous <i>hFile</i> parameter.
<b>Read&shy;File</b> sets this value to zero before
doing any work or error checking.
Use <b>NULL</b> for this parameter if this is an asynchronous operation
to avoid potentially erroneous results.
</p>
<p>
This parameter can be <b>NULL</b>
only when the <i>lpOverlapped</i> parameter is not <b>NULL</b>.
</p>
<p>
For more information, see the Remarks section.
</p>
</dd>
</blockquote>
<p>
Note that second paragraph.
</p>
<p>
The deal is that the fourth parameter is sometimes optional
and sometimes mandatory.
The
<a HREF="https://msdn.microsoft.com/en-us/library/hh916382.aspx">
simplified annotation language</a>
used by this function prototype
cannot express this sort of
conditional mandatory state,
so it takes the most generous position of declaring the
parameter as optional,
so as to avoid raising false positives in
<a HREF="https://msdn.microsoft.com/en-us/library/ms182028.aspx">
static analysis tools</a>.
</p>
<p>
A more precise annotation for that parameter would be something
like
<code>_When_(lpOverlapped == NULL, _Out_opt_)
_When_(lpOverlapped != NULL, _Out_)</code>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1270945">
				<div id="div-comment-1270945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161026-00/?p=94585#comment-1270945">
			October 26, 2016 at 7:02 am</a>		</div>

		<p>Except your condition and outcomes are the wrong way around (it should only be _opt_ when lpOverlapped != NULL)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1270965">
				<div id="div-comment-1270965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lexx</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161026-00/?p=94585#comment-1270965">
			October 26, 2016 at 8:20 am</a>		</div>

		<p>Shouldnt the function check for passed nullptr pointer and exit with invalid argument type error instead? Crashing, when there&#8217;s a simple way to check seems to be a lazy design at best.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1270975">
				<div id="div-comment-1270975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Caron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161026-00/?p=94585#comment-1270975">
			October 26, 2016 at 9:09 am</a>		</div>

		<p>Lexx: Because the same people who violate this rule also aren&#8217;t going to handle this error condition correctly anyway. May as well crash rather than spend cycles on a situation that isn&#8217;t going to get better.</p>
<p>Raymond: I swear you&#8217;ve published this exact article before. I feel like half the articles on this blog are &#8220;If lpOverlapped is null, you have to pass the out pointer&#8221;. I guess you can stop when people start respecting it!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1271005">
				<div id="div-comment-1271005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161026-00/?p=94585#comment-1271005">
			October 26, 2016 at 12:12 pm</a>		</div>

		<p>There should be separate API: existing ReadFileEx for async and ReadFile for sync operations. And lasy should have _In_opt_ LPLARGE_INTEGER lpOffset; instead of OVERLAPPED. Then there would be nor redundancy, nor misinterpretations.<br />
In overall it looks like it was designed so by some smart guy, but another one (not so smart) decided to &#8216;tweak&#8217; initial design.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-2 parent" id="comment-1271006">
				<div id="div-comment-1271006" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161026-00/?p=94585#comment-1271006">
			October 26, 2016 at 2:08 pm</a>		</div>

		<p>The problem with ReadFileEx for async operations is that for it to complete, the thread must have a completion routine and the thread must be in an alertable wait.<br />
Using ReadFile for an async handle allows it to not require a completion routine and wait on a handle instead. ReadFileEx explicitly mentions that it will not use the event parameter. So ReadFileEx isn&#8217;t a replacement for the functionality of ReadFile for pure async files, so there would have to be a third function to do what you want.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1271025">
				<div id="div-comment-1271025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161026-00/?p=94585#comment-1271025">
			October 26, 2016 at 3:39 pm</a>		</div>

		<p>No problem if CompletionRoutine for ReadFileEx would be optional, in which case it would behave just how async ReadFile now behaves</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-4 parent" id="comment-1271045">
				<div id="div-comment-1271045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161026-00/?p=94585#comment-1271045">
			October 27, 2016 at 8:30 am</a>		</div>

		<p>But that would then create a similar kind of confusion with ReadFileEx that currently exists with ReadFile.<br />
If you pass in a completion routine then you have to do an alertable wait for the read to complete. If you don&#8217;t pass in a completion routine, then the handle in the overlapped structure is used to signal the completion.<br />
There are probably ways you could retort to that, but there are some things to remember. First, the naming of these functions usually mean that ReadFile was available some time before ReadFileEx. So this would mean that async IO was available in Windows before IO completion ports. In fact, considering the fact that the same function was used, it would mean that async IO has been in Windows as long as the ReadFile function. From a bit of digging on the Win32 API, IO completion ports came in with Windows NT, but async IO was available with Win32s. So in general, history probably didn&#8217;t help here, especially since at that point Microsoft themselves weren&#8217;t against overloading a single function at that point.<br />
But to modify those functions now would break a lot of software, so right now it is impossible to do anything.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1271096">
				<div id="div-comment-1271096" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161026-00/?p=94585#comment-1271096">
			October 27, 2016 at 3:16 pm</a>		</div>

		<p>Nope, confusion is not similar kind. OVERLAPPED will be used for overlapped operations. In case of synchronous ReadFile &#8211; OVERLAPPED is used by not-overlapped operation that&#8217;s complete abuse of that concept.<br />
Also that would be more consistent with other OVERLAPPED + CompletionRoutine usecases: ReadDirectoryChangesW/WSARecv/WSASend and may be something else.<br />
Of course ReadFileEx not a best name for such design. ReadFileAsync would be better.<br />
And of course now its only theoretical speculations. No chance to do such major changes in that API now. Actually no chance to do ANY chances in that API now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1271115">
				<div id="div-comment-1271115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161026-00/?p=94585#comment-1271115">
			October 27, 2016 at 3:21 pm</a>		</div>

		<p>IO completion ports were actually introduced in NT 3.5.  They weren&#8217;t in 3.1.</p>
<p>Somewhat absurdly, I still think of IO completion ports as being a newish feature because I remember them being introduced.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip odd alt depth-5" id="comment-1271125">
				<div id="div-comment-1271125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161026-00/?p=94585#comment-1271125">
			October 27, 2016 at 4:20 pm</a>		</div>

		<p>@Killer{R}:<br />
Yup overloading like that is an abuse of the concept, but as I said, Microsoft hasn&#8217;t been afraid of doing things like that. A bigger example of this is one of the most fundamental functions for Windows, CreateWindow.<br />
For CreateWindow, the HMENU parameter also serves as the child item ID. What&#8217;s worse is that when you are creating a child window, you have to cast the ID to a HMENU. While it does require abuse of these functions, it does end up simplifying things. Only CreateWindow is needed, no CreateTopLevelWindow and CreateChildWindow.<br />
So this all subjective, but in the end Microsoft chose complexity of the API over a larger amount of functions. If they had split out the IO functionality into something like ReadFile and ReadFileAsync, when IO completion ports were added, they would have had to add another function, like they added ReadFileEx anyway.<br />
@laonianren:<br />
Interesting, Windows NT 3.1 and 3.5 were actually slightly before my time. I didn&#8217;t actually start getting into computers and programming until 1995 or so. I only really knew Windows 95 and Windows NT 4 onwards.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1 parent" id="comment-1271015">
				<div id="div-comment-1271015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161026-00/?p=94585#comment-1271015">
			October 26, 2016 at 2:42 pm</a>		</div>

		<p>&gt;This parameter can be NULL only when the lpOverlapped parameter is not NULL.</p>
<p>This parameter can only be NULL ONLY if the ReadFile is guaranteed to complete asynchronously (always return false with ERROR_IO_PENDING). If it ever returns data synchronously, lpNumberOfBytesRead is then mandatory.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1271035">
				<div id="div-comment-1271035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MarcK4096</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161026-00/?p=94585#comment-1271035">
			October 27, 2016 at 5:11 am</a>		</div>

		<p>It seems like it would be better to just update the documentation to make the parameter mandatory all of the time.  There shouldn&#8217;t be fine print like this on API calls.  &#8220;_opt&#8221; should mean optional all of the time.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-odd thread-alt depth-1" id="comment-1271185">
				<div id="div-comment-1271185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161026-00/?p=94585#comment-1271185">
			October 28, 2016 at 1:54 am</a>		</div>

		<p>The most &#8220;fun&#8221; part I&#8217;ve seen with annotations is DrawText(), which gives a warning when you pass it an LPCTSTR&#8230; because one of its flags (DT_MODIFYSTRING) will treat the pointer as non-const.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

