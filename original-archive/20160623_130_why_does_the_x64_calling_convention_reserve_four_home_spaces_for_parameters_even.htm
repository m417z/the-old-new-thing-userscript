<html>
<head>
<title>Why does the x64 calling convention reserve four home spaces for parameters even for functions that take fewer than four parameters?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does the x64 calling convention reserve four home spaces for parameters even for functions that take fewer than four parameters?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 23, 2016 / year-entry #131</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Variadic functions.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In the comments to
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/08/30/10445305.aspx">
Can an x64 function repurpose parameter home space as general
scratch space?</a>,
many people questioned why the full four home spaces are allocated for
all functions,
even those that have fewer that four parameters.
</p>
<p>
MSDN gives a very brief answer:
"<a HREF="https://msdn.microsoft.com/en-us/library/ms235286.aspx"
>This aids in the simplicity of supporting C unprototyped functions,
and vararg C/C++ functions</a>."
</p>
<p>
Let's dig into that sentence.
</p>
<p>
Classic C allows you to call an unprototyped function.
You can just say "There's a function called <code>f</code>,
and it returns an integer,
but that's all I'm going to tell you.
You'll just have to trust me on the rest."
</p>
<pre>
int f();
</pre>
<p>
You can call this function and pass however many parameters
you like.
As long as you pass enough parameters to satisfy the function,
that's good enough.
(Modern C has tightened the rules, but classic C didn't care.)
The catch is that the number of parameters you pass
could be <i>fewer</i> than the number of
parameters the function actually accepts.
</p>
<p>
Huh?
</p>
<p>
The classic example of this is the <code>open</code> function.
It takes three parameters, but the third parameter is required
only when creating a file.
If you aren't creating a file, then the third parameter can be omitted.
</p>
<pre>
fd = open(filename, O_RDONLY);
fd = open(filename, O_CREAT | O_WRONLY,  0777);
</pre>
<p>
Now think about how this function would be implemented.
On entry, the <code>rcx</code> register points to the file name,
the <code>rdx</code> register contains the flags,
and the <code>r8</code> register <i>might or might not</i>
contain the creation mode.
</p>
<p>
So how do you know whether you should spill <code>r8</code>?
If you spill it when you shouldn't have, then you corrupted
the stack.
</p>
<p>
Okay, so you can work around this by spilling to the local
frame instead of onto the home space,
but since the compiler doesn't know whether this function is
ever
going to be called with fewer parameters than prototyped,
it means that the compiler effectively
<i>can never use the home space in the first place</i>,
because, who knows, maybe the function goes like this:
</p>
<pre>
int open(char *filename, int flags, int mode)
{
  if (is_auto_fail_mode()) return -1;
  ... rest of the code ...
}
</pre>
<p>
and the caller cleverly arranged that
<code>is_auto_fail_mode()</code> will return <code>1</code>,
and then called <code>open()</code> and intentionally
passed no parameters at all.
Under classic C, this is perfectly legal.
</p>
<p>
If you say that the caller needs to allocate home space only
for the actual parameters, then the result is that the compiler
can never rely on the existence of home space.
Which kind of renders home space useless.
</p>
<p>
Variadic functions are in a similar boat.
If home space was guaranteed only for actual parameters,
then variadic functions would not know whether any of the
inbound register parameters are spillable.
They would have to spill them into the local frame,
but that makes walking the variable parameter list more
cumbersome
because the parameters are no longer contiguous in memory.
You have the four locally-spilled parameters,
followed by the function exception state, the frame pointer,
the return address, and then parameters beyond the fourth.
</p>
<p>
I guess you could hack around this by changing the prologue
of variadic functions to go something like this:
</p>
<pre>
    sub     rsp, N+32       ;
    mov     rax, [rsp+N+32] ; recover return address
    mov     [rsp+N+32], r9  ; spill parameter 4 (if it exists)
    mov     [rsp+N+24], r8  ; spill parameter 3 (if it exists)
    mov     [rsp+N+16], rdx ; spill parameter 2 (if it exists)
    mov     [rsp+N+ 8], rcx ; spill parameter 1 (if it exists)
    mov     [rsp+N   ], rax ; restore return address
    .. rest of standard prologue to build the frame and stuff ..
</pre>
<p>
and the function epilogue would go
</p>
<pre>
    add     rsp, N
    ret     32
</pre>
<p>to clean up the four parameters that got rewritten on the stack.
</p>
<p>
This would fall into the "pay for play" category,
where the ugliness is localized only to the people who need
the ugly thing.
It would make stack walking harder,
but stack walking is relatively infrequent,
so making stack-walking harder isn't that big of a deal;
as long as stack-walking isn't rendered <i>impossible</i>.
</p>
<p>
But wait, why is reserving the full four home spaces so distasteful
in the first place?
Maybe it's because people consider it wasteful to allocate
memory that isn't being used.
</p>
<p>
But is it really going unused?
</p>
<p>
No, it's not going unused. The whole point of the original article
was to say that the four spaces for home parameters aren't
actually required to be used for home parameter spilling.
A function is welcome to treat it as <i>hey look, free memory</i>.
and in practice, that's what most of them do.
They will spill <code>rbx</code> and <code>rsi</code> into those
spaces rather than spilling the actual parameters.
So the memory isn't going to waste.
</p>
<p>
Requiring the full four home parameters to be preallocated
also saves you the trouble of having to keep realigning your stack
on a 16-byte boundary
for each function call.
The value 32 is a multiple of 16, so whatever alignment you already
performed is unaffected by subtracting another 32.
On the other hand, if you had callee clean and variable-sized
home space,
you would have to push an extra dummy parameter for half of the
functions, just so that the stack stayed aligned.
</p>
<pre>
    ; about to call a function that takes only 1 parameter.
    ; need to push a dummy parameter to keep the stack 16-byte aligned.
    push    0
    push    rax
    call    f
</pre>
<p>
But you can solve that problem by saying that functions are
always caller-clean.
That way, you just set up your register spill space once,
and then you keep reusing it.
It also has the nice property that local variables remain
at the same offset relative to the stack pointer for the
lifetime of the function.
</p>
<p>
Or maybe the objection is that it creates more work for the caller,
having to allocate 32 extra bytes of memory.
</p>
<p>
Except that in practice, it's not any extra work at all.
As we noted, the x64 calling convention is caller-clean,
which means that the space for parameters gets reused from
function call to function call.
You merely allocate the space in your prologue and it's
good for the whole function.
And you already had to reserve space 
on the stack in the function prologue when you did a
<code>sub esp, N</code>;
you just need to bump it up to <code>sub esp, N+32</code>.
This is arithmetic done at compile time, so there is no additional
runtime cost.
(It's not like the CPU goes faster if the subtrahend is smaller.)
</p>
<p>
The upshot of this is that trying to minimize parameter home space
doesn't really save you anything.
Memory isn't being saved, because the called function was going
to use the extra space anyway.
Execution time isn't being saved, because the stack pointer adjustment
is already being done; you're just changing the amount of the adjustment,
which has no incremental cost.
You're creating more work for the compiler, because it now needs to
keep track of the maximum number of parameters passed to any function
called by this function.
(Mind you, that's not a big cost anyway.
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/07/29/10631311.aspx">
Itanium relied on the compiler doing this work</a>.)
And you're creating more work for the function being called,
because it has to be careful not to spill any registers
which <i>might not</i> correspond to actual parameters
(information that is not available at compile time).
</p>
<p>
So reserving home space for all four parameters (even if the
caller passes fewer than four actual parameters) makes
some people slightly happier (variadic functions),
a lot of people significantly happier (classic C code), and adds
zero additional cost.
Free money.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1253605">
				<div id="div-comment-1253605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1253605">
			June 23, 2016 at 11:18 am</a>		</div>

		<p>Very nice write up.  I particularly like the perfect summary at the end.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1253615">
				<div id="div-comment-1253615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1253615">
			June 23, 2016 at 11:37 am</a>		</div>

		<p>How does va_arg work on the Windows x86-64 calling convention?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks even depth-2" id="comment-1254255">
				<div id="div-comment-1254255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1254255">
			June 28, 2016 at 2:50 pm</a>		</div>

		<p>It is probably implementation defined. I think it would be legal (but crazy) to not spill the registers to the space provided to you but since C99 has va_copy you have to save those registers anyway so why make it more complicated than you have to?</p>
<p>At the ABI level the only gotcha is that floats must be passed in XMM* _and_ R* by the caller.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1253665">
				<div id="div-comment-1253665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1253665">
			June 23, 2016 at 3:56 pm</a>		</div>

		<p>I&#8217;ve always wondered why the MIPS O32 ABI reserves stack space for its four register parameters, and I guess the reasons were the same. That was long before ANSI C, but is there really still enough prototype-less code around that it should be a concern when designing a modern ABI?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1253685">
				<div id="div-comment-1253685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1253685">
			June 23, 2016 at 5:00 pm</a>		</div>

		<p>My guess is that there&#8217;s a lot of scientific code that falls into this category. Scientific code is often really old.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1253705">
				<div id="div-comment-1253705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1253705">
			June 24, 2016 at 6:59 am</a>		</div>

		<p>There&#8217;s probably a lot of accidental code like that too. I don&#8217;t know what MSVC allows when compiling in C mode, but at least GCC will let you call functions without them having been declared; the calls (I think) will work as long as you call them with the right types. It gives you a warning, but how many projects have tons of warnings?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1253875">
				<div id="div-comment-1253875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1253875">
			June 25, 2016 at 4:09 am</a>		</div>

		<p>I don&#8217;t like the x64 calling convention because it makes writing assembly code by hand too hard. And it&#8217;s very, very hard to do it right with proper exception support.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1253975">
				<div id="div-comment-1253975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1253975">
			June 27, 2016 at 9:54 am</a>		</div>

		<p>I still don&#8217;t like it.  In practice, 32 bytes in every function is going to translate to garbage most of the time.</p>
<p>See what I did there?  Anecdote, but so is your claim, or your claim&#8217;s source.</p>
<p>Show me the data.</p>
<p>Despite the lack of more testing, there&#8217;s someone agreeing with actual observations (note: a bit old, it doesn&#8217;t compare with optimized code, etc): <a href="http://www.viva64.com/en/b/0069/" rel="nofollow">http://www.viva64.com/en/b/0069/</a></p>
<p>So, Windows 64-bit ABI is basically optimizing for printf, or similar, to be able to spill the 4 registers.</p>
<p>It could be so that you&#8217;d require the caller to fill the shadow space with the actual 4 arguments for varargs (not for prototypeless), so they&#8217;d be automatically spilled (which they most probably will be at some point), but no.</p>
<p>Caller: here&#8217;s 32 bytes for you, my dear friend.<br />
(read: they made me do it)<br />
Callee: how kind of you to have thought out of my needs<br />
(read 1: what made them think I&#8217;d really need or want those bytes, gruh!)<br />
(read vararg func: brainz! [ zombie drooling and chewing ])<br />
(read unprototyped function: what? where? ah, )</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1254045">
				<div id="div-comment-1254045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1254045">
			June 28, 2016 at 3:59 am</a>		</div>

		<p>Windows 64 bit ABI isn&#8217;t just optimizing for printf. They chose the best balance to cope with all situations, while only supporting one calling convention.</p>
<p>Address space is 4 billion times cheaper on 64 bit than 32 bit while the cost of executing instructions is roughly the same.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1254605">
				<div id="div-comment-1254605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1254605">
			June 30, 2016 at 8:13 am</a>		</div>

		<p>The memory point is moot if you have a single memory-monster application.</p>
<p>If you have several applications, you gain substantial memory by running them in 32-bit. More so with managed environments that don&#8217;t compress object pointers.  Or if your applications has recursive algorithms.  Or if&#8230;</p>
<p>Well, I could go on and on, but you should start to see there are obviously more losing points about using 64-bit than 32-bit in terms of memory usage.  In practice, you can count on needing at least double the memory when transitioning from 32-bit to 64-bit.  Having 32 bytes on every stack, optimized or not, ends up counting further against the 64-bit memory consumption myth myth.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1254305">
				<div id="div-comment-1254305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160623-00/?p=93735#comment-1254305">
			June 29, 2016 at 5:29 am</a>		</div>

		<p>Your link says this :<br />
&#8220;You should not worry if your 64-bit program consumes more stack memory. There is much more physical memory in 64-bit systems. The stack with the size 2 Mbytes on a 64-bit system with 8 Gbytes of memory takes fewer percent of memory than 1 Mbyte of stack in a 32-bit system with 2 Gbytes.&#8221;</p>
<p>So, apart from a point of view of &#8220;pureness&#8221;, why do you care so much ?<br />
And how would you support variadic functions otherwise ?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

