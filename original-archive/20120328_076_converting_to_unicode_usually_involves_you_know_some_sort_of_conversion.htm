<html>
<head>
<title>Converting to Unicode usually involves, you know, some sort of conversion</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Converting to Unicode usually involves, you know, some sort of conversion</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 28, 2012 / year-entry #77</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>36</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A colleague was investigating a problem with a third party application and found an unusual window class name: L"&#x6574;&#x7473;&#x6574;&#x7473;". He remarked, "This looks quite odd and could be some problem with the application." The string is nonsense in Chinese, but I immediately recognized what was up. Here's a hint: Rewrite the string as L"\x6574&#8243; L"\x7473&#8243;...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A colleague was investigating a problem with a third party
application and found an unusual window class name:
L"&#x6574;&#x7473;&#x6574;&#x7473;".
He remarked,
"This looks quite odd and could be some problem with the application."
</p>
<p>
The string is nonsense in Chinese,
but I immediately recognized what was up.
</p>
<p>
Here's a hint:
Rewrite the string as
</p>
<blockquote CLASS=m><p>
L"\x6574" L"\x7473" L"\x6574" L"\x7473"
</p>
</blockquote>
<p>
Still don't see it?
How about looking at the byte sequence,
remembering that Windows uses UTF-16LE.
</p>
<blockquote CLASS=m><p>
0x74 0x65 0x73 0x74 0x74 0x65 0x73 0x74
</p>
</blockquote>
<p>
Okay, maybe you don't have your ASCII table memorized.
</p>
<blockquote CLASS=m>
<table>
<tr>
<td>0x74</td>
<td>0x65</td>
<td>0x73</td>
<td>0x74</td>
<td>0x74</td>
<td>0x65</td>
<td>0x73</td>
<td>0x74</td>
</tr>
<tr>
<td>t</td>
<td>e</td>
<td>s</td>
<td>t</td>
<td>t</td>
<td>e</td>
<td>s</td>
<td>t</td>
</tr>
</table>
</blockquote>
<p>
That's right, the application took the ASCII string
"testtest" and just treated it as a Unicode string
without actually converting it to Unicode.
When the compiler complained "Cannot convert char * to wchar_t *"
they just stuck a cast to make the compiler shut up.
</p>
<pre>
<i>// Code in italics is wrong
WNDCLASSW wc;
wc.lpszClassName = (LPWSTR)"testtest";</i>
</pre>
<p>
They were lucky that the compiler happened to put
<i>two</i> null bytes at the end of the "testtest" string.
</p>
<p>
<b>Bonus psychic powers</b>: Actually, I have a theory
as to how this happened that doesn't involve maliciousness.
(This is generally a good mindset to maintain,
since most of the time, when people cause a problem,
it's not willful; it's accidental.)
Consider a library with the following interface header file:
</p>
<pre>
// mylib.h

#ifdef __cplusplus
extern "C" {
#endif

BOOL RegisterWindowClass(LPCTSTR pszClassName);

#ifdef __cplusplus
}; // extern "C"
#endif
</pre>
<p>
Somebody uses this header file like this:
</p>
<pre>
#include &lt;mylib.h&gt;

BOOL Initialize()
{
    return RegisterWindowClass(TEXT("testtest"));
}
</pre>
<p>
So far so good.
</p>
<p>
Meanwhile, the library implementation goes like this:
</p>
<pre>
#define UNICODE
#define _UNICODE

#include &lt;mylib.h&gt;

LRESULT CALLBACK StandardWndProc(HWND, UINT, WPARAM, LPARAM);

BOOL RegisterWindowClass(LPCTSTR pszClassName)
{
    WNDCLASS wc = { 0, StandardWndProc, 0, 0, g_hInstance,
                    LoadIcon(IDI_APPLICATION),
                    LoadCursor(IDC_ARROW),
                    (HBRUSH)(COLOR_WINDOW + 1),
                    NULL, pszClassName);
    return RegisterClass(&amp;wc);
}
</pre>
<p>
The two files both compile successfully, and they even link together.
Unfortunately, one of them was compiled with Unicode disabled,
and the other was compiled with Unicode enabled.
Since the header file uses <code>LPCTSTR</code>,
the actual declaration of <code>RegisterWindowClass</code>
<i>changes</i> depending on whether the code that includes
the header file is compiled as Unicode or ANSI.
</p>
<p>
Result: If one file is compiled as ANSI and the other is
compiled as Unicode, then one will pass an ANSI string,
which the other will receive and treat as Unicode.
</p>
<p>
This is why functions in Windows which are dependent on
whether the caller is compiled as ANSI or Unicode
are really two functions, one with the A suffix (for ANSI)
and another with the W suffix (for Wnicode?), and the
generic name is really a macro that forwards to one or the
other.
It prevents <code>TCHAR</code>s from sneaking past the compiler
and ending up being interpreted differently by the two sides.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (36)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-975003">
				<div id="div-comment-975003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975003">
			March 28, 2012 at 7:05 am</a>		</div>

		<p>What kind of self-respecting programmer doesn&#39;t have the ASCII table memorized?&lt;/snark&gt;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975013">
				<div id="div-comment-975013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975013">
			March 28, 2012 at 7:35 am</a>		</div>

		<p>Raymond&#39;s bonus insight is for me the bigger message to be remembered: don&#39;t use LPCTSTR and variants in your interface headers unless your library can really handle whatever T means by the library user or you find a way to report an error in the case of mismatch between the library compiled code and the one compiled by library user.</p>
<p>Thanks Raymodn, I&#39;ve never seen such cases even though they surely happen and I think should be covered.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975023">
				<div id="div-comment-975023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">WilliamF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975023">
			March 28, 2012 at 7:36 am</a>		</div>

		<p>The saying goes &quot;never attribute to malice that which can be adequately explained by stupidity.&quot; aka Hanlon&#39;s Razor.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975053">
				<div id="div-comment-975053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975053">
			March 28, 2012 at 7:42 am</a>		</div>

		<p>W =&gt; WCHAR =&gt; Wide Char, a common name for UTF-16 chars (which Windows often calls Unicode).</p>
<p>Yes, the naming situation could be better.</p>
<p>In general, I tend to put only LPWSTR interface, unless I&#39;m still targeting Win98, which few people do these days.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975043">
				<div id="div-comment-975043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Minos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975043">
			March 28, 2012 at 7:42 am</a>		</div>

		<p>With a nod to Michael Kaplan, I suggest that &quot;Wnicode&quot; be pronounced &quot;Double Secret Unicode&quot;.</p>
<p>I&#39;ve always assumed the &#39;W&#39; in those functions stood for &#39;Wide&#39;, like stdlib&#39;s wchar_t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975063">
				<div id="div-comment-975063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Saveddjion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975063">
			March 28, 2012 at 7:53 am</a>		</div>

		<p>Intel&#39;s IC-86 cross-compiler embedded type information in its object files. If you made this type of error (#define something differently, include a file that gets interpreted two different ways due to the defines, and otherwise no compilation error) then you project would fail to link. That compiler caught just this situation for me, where I had:</p>
<p>#define W 6</p>
<p>in one file, and</p>
<p>#define W 4</p>
<p>in another.</p>
<p>and a function foo(int x[W]);</p>
<p>and the linker refused to link a call to foo(int[6]) to a definition of foo(int[4]).</p>
<p>C++ compilers embed type information to resolve overloads, but IC86 was the only compiler I know of that did this for ordinary C code. Perhaps we could take a lesson from that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975073">
				<div id="div-comment-975073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A. Skrobov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975073">
			March 28, 2012 at 8:04 am</a>		</div>

		<p>Google Translate manages to make perfect sense of &quot;整瑳&quot;, translating it as &quot;The whole luster of gems&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975083">
				<div id="div-comment-975083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975083">
			March 28, 2012 at 8:16 am</a>		</div>

		<blockquote><p>
  Google Translate manages to make perfect sense of &quot;整瑳&quot;, translating it as &quot;The whole luster of gems&quot;
</p></blockquote>
<p>It also translates &quot;Henri le cambrioleur&quot; as &quot;Henry the burglar&quot;, is this random string day?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975093">
				<div id="div-comment-975093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/bombsoft_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>bombsoft@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975093">
			March 28, 2012 at 8:22 am</a>		</div>

		<p>Did Henry the burglar steal the whole luster of gems?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975103">
				<div id="div-comment-975103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/bombsoft_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>bombsoft@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975103">
			March 28, 2012 at 8:22 am</a>		</div>

		<p>Did Henry the burglar steal the whole luster of gems?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975113">
				<div id="div-comment-975113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975113">
			March 28, 2012 at 8:23 am</a>		</div>

		<p>I can&#39;t help but feel that the Unicode implementation in Windows has ended up to be rather unfortunate. At the time, I think it looked like 16 bits would be enough for any character, so going for UCS-2 made some sense. Now however, you still can&#39;t assume that any character fits into two bytes. In retrospect, a way to switch the existing ANSI functions to UTF-8 would have been much easier. I suspect though that Windows&#39; Unicode implementation dates from before UTF-8&#8230;</p>
<div class="post">[<i>You can use Wikipedia to support your suspicion. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-975133">
				<div id="div-comment-975133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975133">
			March 28, 2012 at 9:41 am</a>		</div>

		<p>Raymond, you&#39;re wrong. The line was:</p>
<p>wc.lpszClassName = reinterpret_cast&lt;LPWSTR&gt;(&quot;testtest&quot;);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975153">
				<div id="div-comment-975153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">b</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975153">
			March 28, 2012 at 11:56 am</a>		</div>

		<p>Maybe the author just thought that s/he was dealing with UTF-8, in which case, no, there isn&#39;t a conversion: valid ASCII is valid UTF-8, you&#39;re done. The author may have been used to writing for the web, where UTF-8 is preferred by the standard and used by about two-thirds of web pages ( <a rel="nofollow" target="_new" href="http://w3techs.com/technologies/overview/character_encoding/all" rel="nofollow">w3techs.com/&#8230;/all</a> ), or may have been writing for Linux or Android anything Apple, which also use UTF-8. So I&#39;d recommend maybe adding a caveat to your title, e.g., &quot;Converting to Unicode usually involves, you know, some sort of conversion (where by `usually&#39; I mean when writing for Windows)&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975163">
				<div id="div-comment-975163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">oh the frustrations</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975163">
			March 28, 2012 at 12:57 pm</a>		</div>

		<p>Did this unicode cast bug have anything to do with the problem the third part app had ? I assume not.</p>
<p>Ah the unicode mess, when will they fix it correctly without making it even worse for the developers trying to use it.</p>
<p>Reminds me when microsoft tried to fix Side-by-side Assemblies but in the end just made it even worse for the developers. Having to support even more confusing and complicated rules depending on what os it is and the time of day + if you have coffee the other day with one or two suger.</p>
<p>Come to think of it. They are at it again, &quot;fixing&quot; things, this time its windows 8.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975173">
				<div id="div-comment-975173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sam G</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975173">
			March 28, 2012 at 1:03 pm</a>		</div>

		<p>@WilliamF</p>
<p>Does that mean microsoft isn&#39;t evil, &quot;just&quot; morbidly stupid ?</p>
<p>Perhaps evil comes from stupidity that would make a bit of sense.</p>
<p>(It would at least explain why christians do such horrible things in the name of their imaginary friend)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-andycadley2 odd alt thread-odd thread-alt depth-1" id="comment-975193">
				<div id="div-comment-975193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975193">
			March 28, 2012 at 1:50 pm</a>		</div>

		<p>@b: Just because you can often get away with it with UTF-8 (at least in the West), doesn&#39;t make it right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975203">
				<div id="div-comment-975203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aneurin Price</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975203">
			March 28, 2012 at 3:56 pm</a>		</div>

		<p>&quot;Just because you can often get away with it with UTF-8 (at least in the West), doesn&#39;t make it right&quot;</p>
<p>No, by definition, all ASCII text is valid and equivalent in UTF-8. An explicit design goal of UTF-8 is that you can always do that, and it&#39;s right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975213">
				<div id="div-comment-975213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975213">
			March 28, 2012 at 5:28 pm</a>		</div>

		<p>Aneurin Price: I believe the point is that the only character encoding that doesn&#39;t have to be converted to UTF-8 is ASCII. This works out fine for Americans who rarely need any letters other than the standard 26 unaccented Latin characters, but not for the vast majority of the rest of the world.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975223">
				<div id="div-comment-975223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">meh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975223">
			March 28, 2012 at 5:46 pm</a>		</div>

		<p>The best is when your unicode application is using an API that has LPCTSTR&#39;s. Except the library is really LPCSTR only and they must have used the T because it was the type to use. I guess in hindshite I could have undevined (_)UNICODE before #including their city API and then just called everything without reinterpreting and then let someone put a capital L in front of everything if it was fixed one day (or delete the casts if it the api header was fixed and the compiler complained about WSTRs going into a STR). Oh well, 7 years ago, and it was more fun to complain in the comments and code at the time I guess.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-975243">
				<div id="div-comment-975243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975243">
			March 28, 2012 at 6:19 pm</a>		</div>

		<p>Ah, hence the &#39;extern &quot;C&quot;&#39; which presumably removes all that goop that the linker would otherwise be able to use to distinguish between overloads of RegisterWindowClass.</p>
<div class="post">[<i>A more likely possibility is that the function is exported by one DLL and consumed by another. The linker doesn&#39;t do inter-module analysis. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975253">
				<div id="div-comment-975253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975253">
			March 28, 2012 at 6:54 pm</a>		</div>

		<p>This is one reason that it&#39;s a good idea to avoid TCHARs entirely. &nbsp;You don&#39;t need your stuff to compile on Win9x anymore, so just always use the UTF-16 version. &nbsp;Our applications internally use UTF-8 for everything, then do whatever necessary conversion before calling the OS in the OS abstraction library. &nbsp;UTF-16 is one-to-one with UTF-8, so this works losslessly.</p>
<p>I prefer explicitly specifying the &quot;W&quot; when calling a Windows function to avoid being dependent upon particular #defines. &nbsp;The macro thing kind of sucks sometimes &#8211; sometimes we&#39;ll get a linker error because some class ours has a function named SendMessage, and something calling it includes Windows.h.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975263">
				<div id="div-comment-975263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">linuxclient</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975263">
			March 28, 2012 at 10:56 pm</a>		</div>

		<p>Indeed, I sometimes wish there was a macro that disabled TCHAR and the function aliases entirely, so I could be sure all of my code only calls the A or W versions explicitly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975273">
				<div id="div-comment-975273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/aylivex_4000_live.ru/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>aylivex@live.ru</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975273">
			March 29, 2012 at 12:18 am</a>		</div>

		<p>@Gabe, @Aneurin Price: As Raymond likes to say “Everybody speaks English, right?”</p>
<p>I faced a website which uses UTF-8 as char encoding and but believes one char is one byte. And this assumption is, well, wrong… that&#39;s why messages in Russian (Cyrillic) get randomly truncated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-975233">
				<div id="div-comment-975233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975233">
			March 28, 2012 at 6:12 pm</a>		</div>

		<p>Will this actually compile? &nbsp;I thought that the linker would complain about RegisterWindowClass taking a const char * in one compilation unit and a const unsigned short * in the other.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975283">
				<div id="div-comment-975283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975283">
			March 29, 2012 at 5:06 am</a>		</div>

		<p>@acq (don&#39;t use LPCTSTR and variants in your interface headers unless&#8230;): That&#39;s too harsh. You can easily solve this exclusively on the library side. Compile it so that you can see which is the Unicode (and which MBCS) version, e.g. by appending U to the *.lib name, and in the header(s) of the library do a small #ifndef UNICODE #error we want unicode here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975313">
				<div id="div-comment-975313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975313">
			March 29, 2012 at 8:41 am</a>		</div>

		<p>&quot;Indeed, I sometimes wish there was a macro that disabled TCHAR and the function aliases entirely, so I could be sure all of my code only calls the A or W versions explicitly.&quot;</p>
<p>I second that. &nbsp;I really like the sound of it &#8211; it would avoid accidental mistakes (and also avoid Myria&#39;s problem of name conflicts with the macros).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk even thread-even depth-1" id="comment-975333">
				<div id="div-comment-975333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975333">
			March 29, 2012 at 9:34 am</a>		</div>

		<p>@Gabe: &quot;&#8230;Americans who rarely need any letters other than the standard 26 unaccented Latin characters&quot; &nbsp;</p>
<p>Don&#39;t we get to use both uppercase and lowercase letters? &nbsp;That&#39;s 52 right there! &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975343">
				<div id="div-comment-975343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975343">
			March 29, 2012 at 10:10 am</a>		</div>

		<p>This reminds me of people who think they can convert files to different formats by renaming the extension.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975403">
				<div id="div-comment-975403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Lin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975403">
			March 29, 2012 at 11:36 am</a>		</div>

		<p>@aylivex: &quot;I faced a website which uses UTF-8 as char encoding and but believes one char is one byte. And this assumption is, well, wrong…&quot;</p>
<p>It&#39;s the definition of &quot;char&quot; in C and C++. ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975423">
				<div id="div-comment-975423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Lin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975423">
			March 29, 2012 at 11:37 am</a>		</div>

		<p>@Frederik Slijkerman: &quot;In retrospect, a way to switch the existing ANSI functions to UTF-8 would have been much easier.&quot;</p>
<p>If Microsoft were motivated to do that, they probably could still do it by allowing CP_UTF8 to be used as a code page instead of just as an argument to MultiByteToWideChar/WideCharToMultiByte.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975463">
				<div id="div-comment-975463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975463">
			March 29, 2012 at 1:20 pm</a>		</div>

		<p>@DWalker: It is naïve to assume that English can entirely be written without diacritics.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-975603">
				<div id="div-comment-975603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975603">
			March 30, 2012 at 7:59 am</a>		</div>

		<p>@Those who want to disable TCHAR: What will you do the day Windows goes UTF-32? ;-)</p>
<p>More seriously, I&#39;ve noticed a problem with the FooA/FooW functions, or rather a problem with MFC: It simply uses TCHARs and the Foo function names in its declaration, so it doesn&#39;t allow the user to choose which to use, which can be a problem when one user needs to use explicitly one version.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-975613">
				<div id="div-comment-975613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-975613">
			March 30, 2012 at 8:01 am</a>		</div>

		<p>PS: What&#39;s the problem with translating &quot;Henri le cambrioleur&quot; into &quot;Henry the burglar&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976613">
				<div id="div-comment-976613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Maxim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-976613">
			April 4, 2012 at 1:28 am</a>		</div>

		<p>So, the decision to use UTF-16 BMP for Unicode in Windows instead of UTF-8 &#8211; was it malicious or can it be explained by stupidity?</p>
<div class="post">[<i><a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/01/19/10117410.aspx" rel="nofollow">Why didn&#39;t NASA use the Space Shuttle to rescue the Apollo 13 astronauts?</a> -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-976623">
				<div id="div-comment-976623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ender</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-976623">
			April 4, 2012 at 1:53 am</a>		</div>

		<p>@Maxim: this has been answered many many times &#8211; by the time UTF-8 was developed, NT was already late, and replacing UCS-2 with UTF-8 was not something you&#39;d want to do at that stage anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976663">
				<div id="div-comment-976663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Maxim and others</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120328-00/?p=7983#comment-976663">
			April 4, 2012 at 4:47 am</a>		</div>

		<p>So you consider the use of UTF-16 in Java also malicious and/or stupid? Having Windows, Java and .NET using the same approach is actually a very good thing.</p>
<p>Contrary, the use of UTF-8 in database interfaces can make life very complicated. How many characters can you store in/read from a VARCHAR(40) database column when the database uses UTF8 for the length semantics? What maximum amount of characters do you allow for the input field in your business application which corresponds to this database field?</p>
<p>How exactly is UTF-8 supposed to solve this problems more easily then UTF-16?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

