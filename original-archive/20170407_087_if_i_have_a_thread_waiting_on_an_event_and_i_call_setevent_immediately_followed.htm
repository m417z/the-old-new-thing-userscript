<html>
<head>
<title>If I have a thread waiting on an event, and I call SetEvent immediately followed by ResetEvent, is the waiting thread guaranteed to be released?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If I have a thread waiting on an event, and I call SetEvent immediately followed by ResetEvent, is the waiting thread guaranteed to be released?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 7, 2017 / year-entry #88</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170407-00/?p=95925</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Congratulations, you reinvented PulseEvent.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer had developed a producer-consumer scenario and
used a manual-reset event to coordinate the threads.
"If there are <var>n</var> threads waiting on an event,
is it guaranteed that all <var>n</var> threads will be
unblocked if the event is signaled?
Specifically, is this guaranteed if the event is reset
very shortly after it is set?
Hypothetically, all the waiting threads may not get scheduled
before the signalling thread resets the event,
but is it the case that once the event is signaled,
all the waiting threads will be unblocked and will
eventually start receiving CPU cycles?"
</p>
<p>
Actually, you have a problem even before you asked
the question.
How do you know that your waiting threads really are
waiting on the event?
After all, the fact that your program called
<code>Wait&shy;For&shy;Single&shy;Object</code>
doesn't guarantee that the thread is actually waiting.
The thread might get pre-empted immediately after
the <code>call</code> instruction and before the first
line of code in
<code>Wait&shy;For&shy;Single&shy;Object</code> executes.
As far as your program is concerned, it called
<code>Wait&shy;For&shy;Single&shy;Object</code>,
but in reality, nothing meaningful has happened yet
because
<code>Wait&shy;For&shy;Single&shy;Object</code> hasn't
gotten a chance to do anything.
In this scenario, the signaling thread can call
<code>Set&shy;Event</code> and <code>Reset&shy;Event</code>
even before the waiting thread gets a chance to wait.
And in that case, obviously, the thread won't wake up
because it never observed a set event.
</p>
<p>
Even if you somehow manage to guarantee that the
threads are definitely waiting,
you're still out of luck.
Setting the event and resetting it shortly afterward
is basically reinventing
<code>Pulse&shy;Event</code>,
and we already
saw that
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20050105-00/?p=36803">
<code>Pulse&shy;Event</code> is fundamentally flawed</a>.
All the arguments for why
<code>Pulse&shy;Event</code> is broken
also apply to your homemade <code>Pulse&shy;Event</code> emulator:
One of the waiting threads might be temporarily taken out of the wait
state to process a kernel APC, and if your
<code>Set&shy;Event</code> and <code>Reset&shy;Event</code> occur
before the thread returns to the wait state,
then the thread will have missed your simulated pulse.
</p>
<p>
If you have only one waiting thread, you can use an auto-reset event
rather than a manual-reset event.
That way, the event resets only when the waiting thread
definitely observes the wait.
But this won't work if you have multiple waiting threads.
</p>
<p>
You might consider using a semaphore and releasing <var>n</var>
tokens to the semaphore when you want to wake up <var>n</var>
threads.
There's still a race condition, though:
While preparing to wait, the thread increments <var>n</var>
and then waits on the event handle.
Suppose that the thread gets pre-empted
after the increment and before the wait.
The signaling thread releases <var>n</var> tokens.
All but one of the tokens are consumed by the other waiting
threads, leaving one token for the thread that is about to wait.
But wait, what's that over there?
Another thread swooped in, incremented <var>n</var> (from 0 to 1,
presumably), and waited on the semaphore.
That interloper thread <i>stole your token</i>!
</p>
<p>
Rather than trying to reimplement
<code>Pulse&shy;Event</code> poorly,
you probably would be better off using a
condition variable.
Condition variables are well-suited to these
sorts of custom synchronization conditions.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1291685">
				<div id="div-comment-1291685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170407-00/?p=95925#comment-1291685">
			April 7, 2017 at 1:24 pm</a>		</div>

		<p>Well now I know why I couldn&#8217;t come up with a use for PulseEvent. It has no use.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1291687">
				<div id="div-comment-1291687" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170407-00/?p=95925#comment-1291687">
			April 7, 2017 at 3:03 pm</a>		</div>

		<p>I may be misremembering, but I think PulseEvent used to work, once upon a time.  (Or perhaps it never worked but the problems just weren&#8217;t spelled out in the documentation.)</p>
<p>(I don&#8217;t think the &#8220;are all the threads really waiting yet&#8221; thing is necessarily a problem, it depends on the scenario.  Sometimes it is OK for threads that have only just finished whatever else they were doing to wait for the next pulse.)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-yuhong-bao even depth-3 parent" id="comment-1291725">
				<div id="div-comment-1291725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170407-00/?p=95925#comment-1291725">
			April 8, 2017 at 7:17 pm</a>		</div>

		<p>A comment in the linked &#8220;PulseÂ­Event is fundamentally flawed&#8221; article mentioned an old KB article that mentioned one of the problems.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1291766">
				<div id="div-comment-1291766" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170407-00/?p=95925#comment-1291766">
			April 9, 2017 at 3:01 pm</a>		</div>

		<p>That KB article explicitly says that the problem only occurs when debugging.  </p>
<p> &#8230; but it also claims that this was true as recently as Windows XP, which I don&#8217;t think can be right.  I guess if it was wrong about that, it might well have always been wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1291695">
				<div id="div-comment-1291695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua A Schaeffer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170407-00/?p=95925#comment-1291695">
			April 7, 2017 at 3:10 pm</a>		</div>

		<p>If I didn&#8217;t know better, I&#8217;d accuse WASAPI of using PulseEvent() to tell client apps when to read/write new sound data.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1291706">
				<div id="div-comment-1291706" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170407-00/?p=95925#comment-1291706">
			April 8, 2017 at 9:27 am</a>		</div>

		<p>I could vaguely imagine using it as some kind of optimization hint in cases where it&#8217;s OK if no thread wakes up&#8230; but I&#8217;m not sure what that kind of use case would actually look like.  I do believe Raymond is right: A condition variable can cover most of those situations as well as or better than a PulseEvent-like API ever could, regardless of what the kernel or scheduler does to our thread.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1291715">
				<div id="div-comment-1291715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170407-00/?p=95925#comment-1291715">
			April 8, 2017 at 6:29 pm</a>		</div>

		<p>&#8230; except that events can be used cross-process and condition variables can&#8217;t.  I remember there being a question on Stack Overflow some time back that could have been easily solved with PulseEvent if it worked properly, and IIRC condition variables weren&#8217;t an option because it was a cross-process scenario.</p>
<p>On the other hand, in Windows you&#8217;re pretty much expected to use threads rather than processes for anything that complicated.  Can make porting tricky though.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong odd alt depth-4" id="comment-1291777">
				<div id="div-comment-1291777" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170407-00/?p=95925#comment-1291777">
			April 9, 2017 at 7:23 pm</a>		</div>

		<p>Multithreading and multiprocessing&#8230; yeah, I remember I&#8217;ve had a hard time detecting bugs when porting things from ASP.NET to XSP when one of the client decide to move their FTP server from Windows to Linux and decide to move all functionality on the server to the new server.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle even depth-4" id="comment-1291825">
				<div id="div-comment-1291825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170407-00/?p=95925#comment-1291825">
			April 10, 2017 at 8:38 am</a>		</div>

		<p>Not everything works well in a per-thread design as opposed to per-process, though, especially if you&#8217;re using a microservice architecture.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

