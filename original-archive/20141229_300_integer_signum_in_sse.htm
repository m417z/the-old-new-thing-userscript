<html>
<head>
<title>Integer signum in SSE</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Integer signum in SSE</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 29, 2014 / year-entry #301</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20141229-00/?p=43283</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The signum function is defined as follows: signum(x) =  &minus;1  if x < 0 signum(x) =  0  if x = 0 signum(x) =  +1  if x > 0 There are a couple of ways of calculating this in SSE integers. One way is to convert the C idiom int signum(int x) { return (x >...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The signum function is defined as follows:
</p>
<table BORDER=0>
<tr>
<td>signum(<var>x</var>) =&nbsp;</td>
<td ALIGN=right>&minus;1&nbsp;</td>
<td>if <var>x</var> &lt; 0</td>
</tr>
<tr>
<td>signum(<var>x</var>) =&nbsp;</td>
<td ALIGN=right>0&nbsp;</td>
<td>if <var>x</var> = 0</td>
</tr>
<tr>
<td>signum(<var>x</var>) =&nbsp;</td>
<td ALIGN=right>+1&nbsp;</td>
<td>if <var>x</var> &gt; 0</td>
</tr>
</table>
<p>
There are a couple of ways of calculating this in SSE integers.
</p>
<p>
One way is to convert the C idiom
</p>
<pre>
int signum(int x) { return (x &gt; 0) - (x &lt; 0); }
</pre>
<p>
The SSE translation of this is mostly straightforward.
The quirk is that the SSE comparison functions return &minus;1
to indicate <code>true</code>,
whereas C uses +1 to represent <code>true</code>.
But this is easy to take into account:
</p>
<table BORDER=0>
<tr>
<td><var>x</var> &gt; 0</td>
<td>&nbsp;&hArr;&nbsp;</td>
<td> &minus; pcmpgt(<var>x</var>, 0)</td>
</tr>
<tr>
<td><var>x</var> &lt; 0</td>
<td>&nbsp;&hArr;&nbsp;</td>
<td> &minus; pcmpgt(0, <var>x</var>)</td>
</tr>
</table>
<p>
Substituting this into the original <code>signum</code> function,
we get
</p>
<table BORDER=0>
<tr>
<td ALIGN=right>signum(<var>x</var>) =&nbsp;</td>
<td ALIGN=center>(<var>x</var> &gt; 0)</td>
<td>&nbsp;&minus;&nbsp;</td>
<td ALIGN=center>(<var>x</var> &lt; 0)</td>
</tr>
<tr>
<td ALIGN=right>=&nbsp;</td>
<td ALIGN=center>&minus;&thinsp;pcmpgt(<var>x</var>, 0)</td>
<td>&nbsp;&minus;&nbsp;</td>
<td ALIGN=center>&minus;&thinsp;pcmpgt(0, <var>x</var>)</td>
</tr>
<tr>
<td ALIGN=right>=&nbsp;</td>
<td ALIGN=center>&minus;&thinsp;pcmpgt(<var>x</var>, 0)</td>
<td>&nbsp;+&nbsp;</td>
<td ALIGN=center>pcmpgt(0, <var>x</var>)</td>
</tr>
<tr>
<td ALIGN=right>=&nbsp;</td>
<td ALIGN=center>pcmpgt(0, <var>x</var>)</td>
<td>&nbsp;&minus;&nbsp;</td>
<td ALIGN=center>pcmpgt(<var>x</var>, 0)</td>
</tr>
</table>
<p>
In assembly:
</p>
<pre>
        ; assume x is in xmm0

        pxor    xmm1, xmm1
        pxor    xmm2, xmm2
        pcmpgtw xmm1, xmm0 ; xmm1 = pcmpgt(0, x)
        pcmpgtw xmm0, xmm2 ; xmm0 = pcmpgt(x, 0)
        psubw   xmm0, xmm1 ; xmm0 = signum
        ; answer is in xmm0
</pre>
<p>
With intrinsics:
</p>
<pre>
__m128i signum16(__m128i x)
{
    return _mm_sub_epi16(_mm_cmpgt_epi16(_mm_setzero_si128(), x),
                         _mm_cmpgt_epi16(x, _mm_setzero_si128()));
}
</pre>
<p>
This pattern extends <i>mutatus mutandis</i> to
<code>signum8</code>,
<code>signum32</code>,
and
<code>signum64</code>.
</p>
<p>
Another solution is to use the signed minimum and maximum opcodes,
using the formula
</p>
<table BORDER=0>
<tr>
<td>signum(<var>x</var>) = min(max(<var>x</var>, &minus;1), +1)</td>
</tr>
</table>
<p>
In assembly:
</p>
<pre>
        ; assume x is in xmm0

        <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/12/15/10580665.aspx">pcmpgtw</a> xmm1, xmm1 ; xmm1 = -1 in all lanes
        pmaxsw  xmm0, xmm1
        psrlw   xmm1, 15   ; xmm1 = +1 in all lanes
        pminsw  xmm0, xmm1
        ; answer is in xmm0
</pre>
<p>
With intrinsics:
</p>
<pre>
__m128i signum16(__m128i x)
{
    // alternatively: minusones = _mm_set1_epi16(-1);
    __m128i minusones = _mm_cmpeq_epi16(_mm_setzero_si128(),
                                        _mm_setzero_si128());
    x = _mm_max_epi16(x, minusones);

    // alternatively: ones = _mm_set1_epi16(1);
    __m128i ones = _mm_srl_epi16(minusones, 15);
    x = _mm_min_epi16(x, ones);

    return x;
}
</pre>
<p>
The catch here is that
SSE2 supports only 16-bit signed minimum and maximum;
to get other bit sizes, you need to bump up to SSE4.
But if you're going to do that, you may as well use the
<code>psign</code> instruction.
In assembly:
</p>
<pre>
        ; assume x is in xmm0

        <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/12/15/10580665.aspx">pcmpgtw</a> xmm1, xmm1 ; xmm1 = -1 in all lanes
        psrlw   xmm1, 15   ; xmm1 = +1 in all lanes
        psignw  xmm1, xmm0 ; apply sign of x to xmm1
        ; answer is in xmm1
</pre>
<p>
With intrinsics:
</p>
<pre>
__m128i signum16(__m128i x)
{
    // alternatively: ones = _mm_set1_epi16(1);
    __m128i minusones = _mm_cmpeq_epi16(_mm_setzero_si128(),
                                        _mm_setzero_si128());
    __m128i ones = _mm_srl_epi16(minusones, 15);
    return _mm_sign_epi16(ones, x);
}
</pre>
<p>
The <code>psign</code> instruction applies the sign of its second
argument to its first argument.
We load up the first argument
with the value <code>+1</code> in all lanes,
then apply the sign of <var>x</var>,
which negates the value if the corresponding lane of <var>x</var>
is negative;
sets the value to zero if the lane is zero,
and leaves it alone if the corresponding lane is positive.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-fleet-command even thread-even depth-1" id="comment-1168913">
				<div id="div-comment-1168913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141229-00/?p=43283#comment-1168913">
			December 29, 2014 at 11:27 am</a>		</div>

		<p>That was actually fun to read. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1168933">
				<div id="div-comment-1168933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">S.T.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141229-00/?p=43283#comment-1168933">
			December 29, 2014 at 12:21 pm</a>		</div>

		<p>Very interesting indeed. &nbsp;I cannot but help pointing out, though, that it is &quot;mutatis mutandis&quot; (ablative absolute) and not &quot;mutatus mutandis&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com000340019af3cc36 even thread-even depth-1" id="comment-1168973">
				<div id="div-comment-1168973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Richard+T+Russell' rel='external nofollow' class='url'>Richard T Russell</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141229-00/?p=43283#comment-1168973">
			December 29, 2014 at 3:52 pm</a>		</div>

		<p>The listed assembly code doesn&#39;t do what you intended: you meant to return pcmpgt(0,x)âˆ’pcmpgt(x,0), which is xmm1-xmm0 using your register allocation, but in fact you return xmm0-xmm1. &nbsp;Also, SSE2 does signum8, signum16 and signum32 only; you need SSE4 for &#39;pcmpgtq&#39;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-tom-lambert-13live-com odd alt thread-odd thread-alt depth-1" id="comment-1169713">
				<div id="div-comment-1169713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Tom+Lambert+%28Koopakiller%29' rel='external nofollow' class='url'>Tom Lambert (Koopakiller)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141229-00/?p=43283#comment-1169713">
			January 3, 2015 at 4:52 pm</a>		</div>

		<p>Thanks for this article &#8211; it is quite interesting</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

