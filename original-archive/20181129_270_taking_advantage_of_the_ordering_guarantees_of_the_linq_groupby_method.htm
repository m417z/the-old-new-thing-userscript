<html>
<head>
<title>Taking advantage of the ordering guarantees of the LINQ GroupBy method</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Taking advantage of the ordering guarantees of the LINQ GroupBy method</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 29, 2018 / year-entry #270</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20181129-00/?p=100355</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Sorting and grouping in a particular way.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer wanted to group a set of data by one field,
and within each group, sort the data by another field,
and then sort the groups by that second field.
</p>
<p>
For example, given the following data set:
</p>
<table BORDER="1" CLASS="cp3" CELLPADDING="3" CELLSPACING="0" STYLE="border-collapse: collapse">
<tr>
<th>Name</th>
<th>Time</th>
</tr>
<tr>
<td>Charles</td>
<td>11</td>
</tr>
<tr>
<td>Charles</td>
<td>21</td>
</tr>
<tr>
<td>Alice</td>
<td>20</td>
</tr>
<tr>
<td>Charles</td>
<td>23</td>
</tr>
<tr>
<td>Alice</td>
<td>29</td>
</tr>
<tr>
<td>Alice</td>
<td>13</td>
</tr>
<tr>
<td>Charles</td>
<td>17</td>
</tr>
<tr>
<td>Bob</td>
<td>20</td>
</tr>
<tr>
<td>Alice</td>
<td>13</td>
</tr>
<tr>
<td>Bob</td>
<td>12</td>
</tr>
<tr>
<td>Alice</td>
<td>26</td>
</tr>
<tr>
<td>Bob</td>
<td>18</td>
</tr>
<tr>
<td>Charles</td>
<td>18</td>
</tr>
<tr>
<td>Bob</td>
<td>28</td>
</tr>
<tr>
<td>Alice</td>
<td>23</td>
</tr>
<tr>
<td>Bob</td>
<td>13</td>
</tr>
</table>
<p>
We group by name:
</p>
<table BORDER="1" CLASS="cp3" CELLPADDING="3" CELLSPACING="0" STYLE="border-collapse: collapse">
<tr>
<th>Name</th>
<th>Time</th>
</tr>
<tr>
<td>Alice</td>
<td>20</td>
</tr>
<tr>
<td>Alice</td>
<td>29</td>
</tr>
<tr>
<td>Alice</td>
<td>13</td>
</tr>
<tr>
<td>Alice</td>
<td>13</td>
</tr>
<tr>
<td>Alice</td>
<td>26</td>
</tr>
<tr>
<td>Alice</td>
<td>23</td>
</tr>
<tr>
<td>Bob</td>
<td>20</td>
</tr>
<tr>
<td>Bob</td>
<td>12</td>
</tr>
<tr>
<td>Bob</td>
<td>18</td>
</tr>
<tr>
<td>Bob</td>
<td>28</td>
</tr>
<tr>
<td>Bob</td>
<td>13</td>
</tr>
<tr>
<td>Charles</td>
<td>11</td>
</tr>
<tr>
<td>Charles</td>
<td>21</td>
</tr>
<tr>
<td>Charles</td>
<td>23</td>
</tr>
<tr>
<td>Charles</td>
<td>17</td>
</tr>
<tr>
<td>Charles</td>
<td>18</td>
</tr>
</table>
<p>
And then we sort each person's time,
shortest first.
</p>
<table BORDER="1" CLASS="cp3" CELLPADDING="3" CELLSPACING="0" STYLE="border-collapse: collapse">
<tr>
<th>Name</th>
<th>Time</th>
</tr>
<tr>
<td>Alice</td>
<td>13</td>
</tr>
<tr>
<td>Alice</td>
<td>13</td>
</tr>
<tr>
<td>Alice</td>
<td>20</td>
</tr>
<tr>
<td>Alice</td>
<td>23</td>
</tr>
<tr>
<td>Alice</td>
<td>26</td>
</tr>
<tr>
<td>Alice</td>
<td>29</td>
</tr>
<tr>
<td>Bob</td>
<td>12</td>
</tr>
<tr>
<td>Bob</td>
<td>13</td>
</tr>
<tr>
<td>Bob</td>
<td>18</td>
</tr>
<tr>
<td>Bob</td>
<td>20</td>
</tr>
<tr>
<td>Bob</td>
<td>28</td>
</tr>
<tr>
<td>Charles</td>
<td>11</td>
</tr>
<tr>
<td>Charles</td>
<td>17</td>
</tr>
<tr>
<td>Charles</td>
<td>18</td>
</tr>
<tr>
<td>Charles</td>
<td>21</td>
</tr>
<tr>
<td>Charles</td>
<td>23</td>
</tr>
</table>
<p>
And then we sort the people by their best time.
Charles's best time is 11 seconds, which is best overall,
so his times go first.
Bob's best time is 12 seconds, so his group goes next.
Alice's best time is 13 seconds, so her group is last.
</p>
<table BORDER="1" CLASS="cp3" CELLPADDING="3" CELLSPACING="0" STYLE="border-collapse: collapse">
<tr>
<th>Name</th>
<th>Time</th>
</tr>
<tr>
<td>Charles</td>
<td>11</td>
</tr>
<tr>
<td>Charles</td>
<td>17</td>
</tr>
<tr>
<td>Charles</td>
<td>18</td>
</tr>
<tr>
<td>Charles</td>
<td>21</td>
</tr>
<tr>
<td>Charles</td>
<td>23</td>
</tr>
<tr>
<td>Bob</td>
<td>12</td>
</tr>
<tr>
<td>Bob</td>
<td>13</td>
</tr>
<tr>
<td>Bob</td>
<td>18</td>
</tr>
<tr>
<td>Bob</td>
<td>20</td>
</tr>
<tr>
<td>Bob</td>
<td>28</td>
</tr>
<tr>
<td>Alice</td>
<td>13</td>
</tr>
<tr>
<td>Alice</td>
<td>13</td>
</tr>
<tr>
<td>Alice</td>
<td>20</td>
</tr>
<tr>
<td>Alice</td>
<td>23</td>
</tr>
<tr>
<td>Alice</td>
<td>26</td>
</tr>
<tr>
<td>Alice</td>
<td>29</td>
</tr>
</table>
<p>
So we have a three-step LINQ query,
where we group,
and then sort each group,
and then sort the groups.
</p>
<pre>
var results =
    data.GroupBy(x =&gt; x.Name) // group by name
        .Select(g =&gt; g.OrderBy(x =&gt; x.Time)); // sort each group
        .OrderBy(g =&gt; g.First()) // sort the groups by best time
        .SelectMany(g =&gt; g);  // flatten the groups
</pre>
<p>
The last step is to use <code>SelectMany</code> to convert
the groups back into their individual members.
This takes advantage of the fact that
<code>IGrouping&lt;TKey, out TElement&gt;</code>,
derives from <code>IEnumerable&lt;TElement&gt;</code>,
so you can use the group as a collection.
</p>
<p>
But you can reduce this to a two-step operation:
First sort globally by time,
and then group them.
The <code>Group&shy;By</code> method is documented
as reporting the groups in the order of first appearance,
so this ensures that the fastest group comes first.
</p>
<pre>
var results =
    data.OrderBy(x =&gt; x.Time) // sort globally by time
        .GroupBy(x =&gt; x.Name) // group by name (best time first)
        .SelectMany(g =&gt; g);  // flatten the groups
</pre>
<p>
It does slightly more work than the three-step query because
it sorts the entire collection, even though it needed only to
sort each group.
But it looks slicker, and might even be easier to understand.
Provided you understand that the grouping is stable.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-kbiel even thread-even depth-1" id="comment-1371915">
				<div id="div-comment-1371915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/KennyBiel' rel='external nofollow' class='url'>KennyBiel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181129-00/?p=100355#comment-1371915">
			November 29, 2018 at 10:59 am</a>		</div>

		<p>The first example, besides having a spurious semicolon after the Select, does not do what you expect it to do. I believe you need this:<br />
.OrderBy(g =&gt; g.First().Time) // sort the groups by best time</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-valcis odd alt thread-odd thread-alt depth-1 parent" id="comment-1371925">
				<div id="div-comment-1371925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Vilx-' rel='external nofollow' class='url'>Vilx-</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181129-00/?p=100355#comment-1371925">
			November 29, 2018 at 12:20 pm</a>		</div>

		<p>Seems like a delicate trick that could be easily missed by future maintainers of the code. I&#8217;d probably leave a comment there bringing their attention to this subtlety. Or write it in a more obvious way.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-kbiel even depth-2" id="comment-1371935">
				<div id="div-comment-1371935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/KennyBiel' rel='external nofollow' class='url'>KennyBiel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181129-00/?p=100355#comment-1371935">
			November 29, 2018 at 12:57 pm</a>		</div>

		<p>I find that it&#8217;s the GroupBy returning IEnumerable&lt;IGrouping&gt; that is not obvious to people who do not use it much. Then you have the Select returning a IEnumerable&lt;IOrderEnumerable&gt;. I find the comments that Raymond has are sufficient though.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1371965">
				<div id="div-comment-1371965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181129-00/?p=100355#comment-1371965">
			November 29, 2018 at 10:30 pm</a>		</div>

		(The content was deleted per user request)
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-odd thread-alt depth-1 parent" id="comment-1371975">
				<div id="div-comment-1371975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181129-00/?p=100355#comment-1371975">
			November 29, 2018 at 10:58 pm</a>		</div>

		<p>The second method works, but the first one throws exception when running:</p>
<p>System.ArgumentException: At least one object must implement IComparable.<br />
   at System.Collections.Comparer.Compare(Object a, Object b)<br />
   at System.Collections.Generic.ObjectComparer`1.Compare(T x, T y)<br />
   at System.Linq.EnumerableSorter`2.CompareKeys(Int32 index1, Int32 index2)<br />
   at System.Linq.EnumerableSorter`1.QuickSort(Int32[] map, Int32 left, Int32 right)<br />
   at System.Linq.EnumerableSorter`1.Sort(TElement[] elements, Int32 count)<br />
   at System.Linq.OrderedEnumerable`1.d__1.MoveNext()<br />
   at System.Linq.Enumerable.d__17`2.MoveNext()<br />
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1371985">
				<div id="div-comment-1371985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181129-00/?p=100355#comment-1371985">
			November 29, 2018 at 11:03 pm</a>		</div>

		(The content was deleted per user request)
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even depth-2" id="comment-1371995">
				<div id="div-comment-1371995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181129-00/?p=100355#comment-1371995">
			November 29, 2018 at 11:05 pm</a>		</div>

		<p>Have to change to the following to work: .OrderBy(g =&gt; g.First().Time)</p>
<p>Just like KennyBiel said. (Why there&#8217;s no edit comment button?)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-tspeot-is odd alt thread-even depth-1" id="comment-1372595">
				<div id="div-comment-1372595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ta.speot.is' rel='external nofollow' class='url'>ta.speot.is</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181129-00/?p=100355#comment-1372595">
			December 4, 2018 at 11:41 pm</a>		</div>

		<p>&#8220;The Group­By method is documented as reporting the groups in the order of first appearance, so this ensures that the fastest group comes first.&#8221;</p>
<p>The documentation for LINQ&#8217;s Enumerable.GroupBy makes this guarantee, but not the documentation for LINQ&#8217;s Queryable.GroupBy. As far as I&#8217;m aware the common implementations of IQueryable (Entity Framework etc.) don&#8217;t apply any ordering as a result of Queryable.GroupBy. And they are not obliged to.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

