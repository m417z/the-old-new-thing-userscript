<html>
<head>
<title>Combining the work queue of distinct events, order not important, with an auto-reset event</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Combining the work queue of distinct events, order not important, with an auto-reset event</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 16, 2017 / year-entry #139</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170616-00/?p=96405</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Combining two solutions into a bigger solution.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Some time ago, I described a lock-free pattern for
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20161124-00/?p=94775">
a work queue of distinct events, where the order of event processing
is not important</a>.
A customer was using a variation of this pattern,
where they
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20161125-00/?p=94795">
unlink the entire work queue in the consumer</code></a>,
and combining it with an
auto-reset event to signal the consumer thread that there is work to do.
The general sketch is like this:
</p>
<pre>
SLIST_HEADER WorkQueue;
HANDLE WorkAvailable;

struct alignas(MEMORY_ALLOCATION_ALIGNMENT)
WorkItem : SLIST_ENTRY
{
    ... other stuff ...
};

void Initialize()
{
 InitializeSListHeader(&amp;WorkQueue);

 <font COLOR="blue">// Create an auto-reset event, initially unset.
 WorkAvailable = CreateEvent(nullptr, FALSE, FALSE,
                             nullptr);</font>
}

void RequestWork(WorkItem* work)
{
 if (InterlockedPushEntrySList(&amp;WorkQueue, work)
                                               == nullptr) {
  <font COLOR="blue">SetEvent(WorkAvailable);</font>
 }
}

void ConsumeWork()
{
 <font COLOR="blue">while (true) {
  WaitForSingleObject(WorkAvailable, INFINITE);</font>
  PSLIST_ENTRY entry = InterlockedFlushSList(&amp;WorkQueue);
  while (entry) {
   ProcessWorkItem(static_cast&lt;WorkItem*&gt;(entry));
   PSLIST_ENTRY nextEntry = entry-&gt;Next;
   delete entry;
   entry = nextEntry;
  }
 <font COLOR="blue">}</font>
}
</pre>
<p>
The customer was looking for something lighter weight than
a kernel event, however.
</p>
<p>
Enter <code>Wait&shy;On&shy;Address</code>.
We could use our 
<code>ALT_AEVENT</code> structure as a drop-in replacement
for the kernel event, but we can do better.
</p>
<p>
We can use a <code>LONG</code> as our data and use
it to signal the consumer thread.
</p>
<pre>
SLIST_HEADER WorkQueue;
<font COLOR="blue">LONG WorkAvailable;</font>

struct alignas(MEMORY_ALLOCATION_ALIGNMENT)
WorkItem : SLIST_ENTRY
{
    ... other stuff ...
};

void Initialize()
{
 InitializeSListHeader(&amp;WorkQueue);

 <font COLOR="blue">WorkAvailable = 0;</font>
}

void RequestWork(WorkItem* work)
{
 if (InterlockedPushEntrySList(&amp;WorkQueue, work)
                                               == nullptr) {
  <font COLOR="blue">InterlockedIncrement(&amp;WorkAvailable);
  WakeByAddressSingle(&amp;WorkAvailable);</font>
 }
}

void ConsumeWork()
{
 <font COLOR="blue">LONG PreviousAvailable = 0;</font>
 while (true) {
  <font COLOR="blue">WaitOnAddress(&amp;WorkAvailable,
                &amp;PreviousAvailable,
                sizeof(PreviousAvailable),
                INFINITE);
  PreviousAvailable = WorkAvailable;</font>
  PSLIST_ENTRY entry = InterlockedFlushSList(&amp;WorkQueue);
  while (entry) {
   ProcessWorkItem(static_cast&lt;WorkItem*&gt;(entry));
   PSLIST_ENTRY nextEntry = entry-&gt;Next;
   delete entry;
   entry = nextEntry;
  }
 }
}
</pre>
<p>
We replace our kernel handle with a <code>LONG</code>
that contains the number of times the consumer has been
notified of work.
The precise meaning of the value isn't important;
what's important is that it changes whenever we want the
consumer to wake up,
and zero means that no work has ever been queued.
</p>
<p>
The consumer waits for the counter to become nonzero,
meaning that there might be some work.
It captures the updated counter value,
drains any available work,
and then waits for the counter to change again.
</p>
<p>
There are many ways this code could be structured,
but it is important that we capture the counter
<i>before</i> draining the work.
That way, if the counter changes while we are draining
the work, our subsequent
<code>Wait&shy;On&shy;Address</code> will return immediately
rather than waiting for the counter to change yet again.
</p>
<p>
Note also that the code is resilent to spurious wake-ups.
If the <code>Wait&shy;On&shy;Address</code> returns
prematurely,
the code performs a redundant check for work.
It won't find any work, and will cycle back to wait
for another change.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1299887">
				<div id="div-comment-1299887" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170616-00/?p=96405#comment-1299887">
			June 17, 2017 at 4:20 am</a>		</div>

		<p>Am I missing something, or can you not wait on the SLIST_HEADER itself?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip odd alt thread-odd thread-alt depth-1 parent" id="comment-1299895">
				<div id="div-comment-1299895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170616-00/?p=96405#comment-1299895">
			June 17, 2017 at 5:38 am</a>		</div>

		<p>The problem with SLIST_HEADER is that it is an opaque type.<br />
We don&#8217;t know its size, layout, whether it is a structure or not. So what do you feed into the previous value parameter?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-2" id="comment-1299905">
				<div id="div-comment-1299905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170616-00/?p=96405#comment-1299905">
			June 17, 2017 at 5:38 am</a>		</div>

		<p>I forgot to click reply, this was to answer Neil.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

