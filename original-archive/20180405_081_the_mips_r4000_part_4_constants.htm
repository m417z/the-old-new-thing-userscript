<html>
<head>
<title>The MIPS R4000, part 4: Constants</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The MIPS R4000, part 4: Constants</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 5, 2018 / year-entry #81</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Load them up, a half at a time.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Since the MIPS R4000 has a fixed 32-bit instruction size,
it cannot have a generalized "load 32-bit immediate constant"
instruction.
(There would be no room in the instruction for the opcode!)
</p>
<p>
If you look at the integer calculations available, you see
that there are some ways of generating constants in a single instruction.
</p>
<p>
Constants in the range <code>0x00000000</code> to <code>0x0000FFFF</code>
can be generated in one instruction by using <code>ORI</code>,
which treats its 16-bit immediate as an unsigned value.
</p>
<pre>
    ORI     rd, zero, imm16
</pre>
<p>
Constants in the range
<code>0xFFFF8000</code> to <code>0xFFFFFFFF</code>
can be generated with the <code>ADDIU</cODE> instruction,
which treats its 16-bit immediate as a signed value.</p>
<pre>
    ADDIU   rd, zero, imm16
</pre>
<p>
If we had a <code>NORI</code> instruction, then we could have
used it to generate
constants in the range
<code>0xFFFF0000</code> to <code>0xFFFFFFFF</code>:</p>
<pre>
    NORI    rd, zero, imm16
</pre>
<p>
But alas that instruction doesn't exist.
</p>
<p>
To build 32-bit values that cannot be created
with these one-instruction tricks,
you can use the <code>LUI</code> instruction,
which means "load upper immediate".
</p>
<pre>
    LUI     rd, imm16           ; rd = imm16 &lt;&lt; 16
</pre>
<p>
It loads the 16-bit immediate value into the upper 16 bits
of the destination register and zeroes out the bottom 16 bits.
You can then follow this up with an <code>ORI</code> to finish
the job:
</p>
<pre>
    LUI     rd, XXXX            ; rd = XXXX0000
    ORI     rd, rd, YYYY        ; rd = XXXXYYYY
</pre>
<p>
There is a data dependency here, and you might expect
a pipeline bubble because the <code>ORI</code> depends
on the result of the previous instruction, which won't be
available until the write-back stage four cycles later.
However, the processor supports integer arithmetic
<a HREF="http://web.cs.iastate.edu/~prabhu/Tutorial/PIPELINE/forward.html">
forwarding</a>:
The result of an arithmetic operation produced in the execute
stage can be fed directly to the execute stage of the next
instruction, thereby avoiding a stall.
</p>
<p>
Since the constant is loaded up 16 bits at a time,
when a module needs to be relocated,
moving it by a multiple of
64<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090611-00/?p=17933">KB</a>
permits the fixup
to be applied only to the <code>XXXX</code> part,
leaving the <code>YYYY</code> part alone.
(<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20031008-00/?p=42223">Previous
discussion</a>.)
This is a very useful property, because in practice,
these two instructions may not be adjacent to each other.
The compiler might choose to interleave other calculations
to avoid the data dependency stall.
</p>
<p>
There are a few pseudo-instructions provided
by the assembler for loading 32-bit constants.
</p>
<pre>
    LI      rd, imm32           ; rd = imm32 (by whatever means)
    LA      rd, global_variable ; rd = address_of global_variable
</pre>
<p>
The <code>LI</code> pseudo-instruction loads a 32-bit
immediate into <var>rd</var>
using a single-instruction trick if available;
otherwise, it uses the two-instruction sequence.
</p>
<p>
The <code>LA</code> pseudo-instruction does the same thing,
but the 32-bit value comes from the address of a global variable
and is consequently subject to a relocation fixup.
</p>
<p>
Next time, we'll look at aligned memory access.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1 parent" id="comment-1332225">
				<div id="div-comment-1332225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332225">
			April 5, 2018 at 7:50 am</a>		</div>

		<p>At least this looks easier than on Alpha AXP.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude odd alt depth-2 parent" id="comment-1332255">
				<div id="div-comment-1332255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332255">
			April 5, 2018 at 12:29 pm</a>		</div>

		<p>Given just how often constants are used in code you&#8217;d assume RISC ISAs would make loading them easier. I suppose you could have a constants page for each process/module that you just always keep loaded in a register. But that has cache issues, not to mention requiring an extra save/restore on any external function for a module.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1332265">
				<div id="div-comment-1332265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Justin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332265">
			April 5, 2018 at 1:31 pm</a>		</div>

		<p>How would you propose they do it?  With fixed length instructions it&#8217;s impossible to load a full word (or quad, for 64-bit archs) in a single instruction.  On PowerPC there are similar instructions to MIPS &#8212; addi/addis ori/oris which are used to load constants, and if there are a bunch of constants needed, the compiler will often generate a PC-relative load, using the construct:</p>
<p>  bl . + 4<br />
  mflr rN</p>
<p>  &#8230; load all constants via lwz or ld, relative to rN</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1332275">
				<div id="div-comment-1332275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332275">
			April 5, 2018 at 5:55 pm</a>		</div>

		<p>Most constants actually used in code are 16-bit or less, so they can be loaded in a single instruction.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1332285">
				<div id="div-comment-1332285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332285">
			April 5, 2018 at 11:04 pm</a>		</div>

		<p>As Antonio says most constants fit into 16 bit (and the by far most used constant 0 is as easy to use as possible) and if you really need a larger constant in a function you can just put it before the code which means it will be almost guaranteed to be in the l2 cache (that&#8217;s how some compilers handle this for AArch64 in any case).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1332315">
				<div id="div-comment-1332315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332315">
			April 6, 2018 at 9:41 am</a>		</div>

		<p>&gt; I suppose you could have a constants page for each process/module that you just always keep loaded in a register.</p>
<p>The usual way of doing this on ARM at least (or the usual way before movt and movw instructions became available; movt (&#8220;mov top&#8221;) loads the upper 16 bits of a register from an imm16, and movw loads the lower 16 bits from an imm16) is to have constant pools after each function, or for huge functions, in the middle of one. You can load from a location within some distance of the current program counter. It&#8217;s sorta like your idea, except that you don&#8217;t need to burn a register to remember that page &#8212; you just use the program counter for that register.</p>
<p>(It does mean that you have non-executable data mixed in with your executable data, which could in theory have security implications. I suspect that&#8217;s not much of a concern in practice, but I can&#8217;t say that for sure.)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1332385">
				<div id="div-comment-1332385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332385">
			April 6, 2018 at 7:53 pm</a>		</div>

		<p>&gt; It does mean that you have non-executable data mixed in with your executable data, which could in theory have security implications. I suspect that‚Äôs not much of a concern in practice, but I can‚Äôt say that for sure.</p>
<p>It would interfere with DEP, except that to the best of my knowledge, this architecture never had DEP in the first place.  If you really had to do this on a DEP-aware system and architecture, you could probably leave the page marked executable, and presumably unmarked as writable (These are constants, right? Did you trick FORTRAN 77 into changing the value of 3 or something?).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1332445">
				<div id="div-comment-1332445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332445">
			April 8, 2018 at 11:20 am</a>		</div>

		<p>While the API offers a difference between PAGE_EXECUTE and PAGE_EXECUTE_READ in practice no architecture I know supports such a thing.<br />
You&#8217;d need a strict Harvard process for the distinction to make sense. </p>
<p>Having a constant pool doesn&#8217;t harm DEP in any way. What it might do is allow being used in spectre and meltdown attacks, but that&#8217;s way too complicated for me to comment on.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1332655">
				<div id="div-comment-1332655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332655">
			April 11, 2018 at 8:42 am</a>		</div>

		<p>&gt; Having a constant pool doesn‚Äôt harm DEP in any way. What it might do is allow being used in spectre and meltdown attacks, but that‚Äôs way too complicated for me to comment on.</p>
<p>What I was actually thinking of with my statement was that it would increase the pool of available options for ROP gadgets. My guess is it wouldn&#8217;t meaningfully affect things, but I could be wrong.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1332945">
				<div id="div-comment-1332945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1332945">
			April 12, 2018 at 3:49 pm</a>		</div>

		<p>It seems like an attacker would need two things:</p>
<p>1) to discover constant data that turned out to consist of one or more useful instructions<br />
2) figure out a way to return (or jump) to those instructions in a useful way</p>
<p>But since the code pages are already full of actual instructions, it&#8217;s not clear to me how having constant data in among those instructions increases the chance of an exploit in any significant way.</p>
<p>Then again, I&#8217;m no expert on exploits &#8211; I&#8217;m the kind of guy that would a submit a bug that turned out to involve &#8220;being on the other side of this airtight hatchway thing&#8221;.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1333275">
				<div id="div-comment-1333275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180405-00/?p=98445#comment-1333275">
			April 17, 2018 at 12:19 pm</a>		</div>

		<p>&gt; But since the code pages are already full of actual instructions, it‚Äôs not clear to me how having constant data in among those instructions increases the chance of an exploit in any significant way.</p>
<p>I strongly suspect it&#8217;s not significant as well, but there could in theory be some bit pattern that is a useful instruction for a ROP program that does not otherwise appear. I <i>did</i> say that this is probably more of a theoretical weakness than a practical one. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

