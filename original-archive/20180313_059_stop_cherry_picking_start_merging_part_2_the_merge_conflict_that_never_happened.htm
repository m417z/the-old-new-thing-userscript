<html>
<head>
<title>Stop cherry-picking, start merging, Part 2: The merge conflict that never happened (but should have)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Stop cherry-picking, start merging, Part 2: The merge conflict that never happened (but should have)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 13, 2018 / year-entry #59</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">You wish you got a merge conflict, but you didn't.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215">
Last time</a>,
we saw how editing the code affected by a cherry-pick creates
a potential merge conflict that doesn't become realized until the
original commit and its cherry-picked doppelg&auml;nger meet in
a merge somewhere,
which could be far away from the branches that contained the original
commit and its cherry-pick.
</p>
<p>
But you know what's worse than a merge conflict?
</p>
<p>
No merge conflict.
</p>
<p>
Let's set up the same situation as last time:
</p>
<svg width="0" height="0">
 <defs>
  <marker id="arrowhead" markerWidth="5" markerHeight="5" refX="-2" refY="0"
    viewBox="-6 -6 12 12" orient="auto">
    <polygon points="-2,0 -5,5 5,0 -5,-5" fill="black" stroke="black"
      stroke-dasharray="1 0" />
  </marker>
  <path id="larr" d="M20,10 L3,10" stroke="black"
   marker-end="url(#arrowhead)" />
  <path id="larr3" d="M98,10 L3,10" stroke="black"
   marker-end="url(#arrowhead)" />
  <path id="nwarr" d="M20,20 L3,3" stroke="black"
   marker-end="url(#arrowhead)" />
  <path id="swarr" d="M20,2 L3,17" stroke="black"
   marker-end="url(#arrowhead)" />
  <path id="swarrd" d="M20,0 L3,17" stroke="black" stroke-dasharray="4 2"
   marker-end="url(#arrowhead)" />
 </defs>
</svg>
<table CELLSPACING=1 STYLE="text-align: center" TITLE="Described in text.">
<tr>
<td>apple</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>berry</td>
</tr>
<tr>
    <!-- note that the foreignObject doesn't display because it has no
         height or width. It exists so that RSS readers which strip out SVG
         will still leave something behind. We would normally just have
         raw text in SVG (because SVG ignores raw text), but the blog system's
         auto-emojifier will convert it to an <img>, which does show up -->
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">A</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M1</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M2</td>
<td>&nbsp;</td>
<td>master</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x22F0;</foreignObject><use href="#swarrd"/></svg>
</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F2</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>feature</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>berry</td>
</tr>
</table>
<p>
Suppose this feature branch has been around for a while,
merging its changes back into the master branch
when it reaches a stability milestone,
Our diagram begins with the point just after the most recent
merge back to the master branch,
where the feature branch has started its work on the next milestone's
worth of features.
</p>
<p>
Let's suppose that the line that contains the word <code>apple</code>
is in a configuration file that controls the feature.
Both the master branch and feature branch make commits (M1 and F1,
respectively) which are unrelated to the configuration file.
</p>
<p>
Suppose you now discover a serious problem in the feature that is
causing it to go haywire.
To stop the immediate problem,
you make a commit F2 to the feature branch which
sets the configuration file to <code>berry</code>,
which has the effect of shutting off the feature.
</p>
<p>
(In real life, the change would be more like changing
</p>
<pre>
#define IS_FEATURE_ENABLED 1
</pre>
<p>
to
</p>
<pre>
#define IS_FEATURE_ENABLED 0
</pre>
<p>
but I'm sticking with <code>apple</code> and <code>berry</code>
so that it lines up better with yesterday's examples.)
</p>
<p>
Okay, you disable the feature in the feature branch,
verify that it doesn't have any unexpected side effects,
and cherry-pick the fix into the master branch.
Phew,
this stops the bleeding and buys you time to
figure out what went wrong and come up with a fix.
</p>
<p>
(If your workflow is to apply the fix to the master branch and
then cherry-pick it into the feature branch, then great, do it that way.
The story is the same.)
</p>
<p>
Work continues in the master branch while you investigate the problem.
Later, you come up with the real fix in the feature branch,
which involves re-enabling the feature
(by setting the line to <code>apple</code>)
and fixing the root cause in some other place.
The commit graph now looks like this:
</p>
<table CELLSPACING=1 STYLE="text-align: center" TITLE="Described in text.">
<tr>
<td>apple</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>berry</td>
</tr>
<tr>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">A</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M1</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M2</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M3</td>
<td>&nbsp;</td>
<td>master</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x22F0;</foreignObject><use href="#swarrd"/></svg>
</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F2</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F3</td>
<td>&nbsp;</td>
<td>feature</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
</tr>
</table>
<p>
In the master branch,
an additional unrelated commit M3 was made on top of M2.
In the feature branch, an additional commit F3 was made on top of F2,
and F3 changes <code>berry</code> back to <code>apple</code>,
as well as fixing the root cause of the issue.
</p>
<p>
Okay, now you want to merge the feature branch into the master branch
so that the temporary fix can be replaced by the real fix.
But when you do the merge, this happens:
</p>
<table CELLSPACING=1 STYLE="text-align: center" TITLE="Described in text.">
<tr>
<td>apple</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>berry</td>
</tr>
<tr>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">A</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M1</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M2</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M3</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M4</td>
<td>&nbsp;</td>
<td>master</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x22F0;</foreignObject><use href="#swarrd"/></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2199;&#xfe0e;</foreignObject><use href="#swarr"/></svg>
</td>
<td>&#x26a0;</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F2</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F3</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>feature</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
</tr>
</table>
<p>
The master branch merged from the feature branch,
producing commit M4,
but in commit M4,
the line still says <code>berry</code>!
The temporary fix is still in place in the master branch.
Actually, it's worse than that.
The <code>berry</code> part of the temporary fix is in place in
the master branch,
but so too is the permanent fix in the other part of commit F3!
It's possible that these two partial fixes don't interact well with
each other, in which case you're in the even worse position that the
feature is broken in the master branch but works in your feature branch.
</p>
<p>
Today, we'll investigate what happened.
Next time, we'll investigate how to prevent this from
happening in the future.
</p>
<p>
Let's go back to the state of the repo before we tried
to merge the feature branch into the master branch:
</p>
<table CELLSPACING=1 STYLE="text-align: center" TITLE="Repeat of second diagram.">
<tr>
<td>apple</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>berry</td>
</tr>
<tr>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">A</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M1</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M2</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M3</td>
<td>&nbsp;</td>
<td>master</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x22F0;</foreignObject><use href="#swarrd"/></svg>
</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F2</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F3</td>
<td>&nbsp;</td>
<td>feature</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
</tr>
</table>
<p>
Now we perform the merge.
Git looks for a merge base, which is commit A,
the most recent common ancestor between the two branches.
Git then performs a three-way merge using A as the base,
M3 as HEAD, and F3 as the inbound change.
All that matters now is the delta between the base
and the two terminal commits,
so let's remove the irrelevant commits from the diagram.
</p>
<table CELLSPACING=1 STYLE="text-align: center" TITLE="Description in text.">
<tr>
<td>apple</td>
<td>&nbsp;</td>
<td>berry</td>
</tr>
<tr>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">A</td>
<td>
<svg width="250" height="20"><foreignObject>&larr;</foreignObject>
     <path d="M250,10 L3,10" stroke="black" marker-end="url(#arrowhead)" />
    </svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M3</td>
<td>&nbsp;</td>
<td>master</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>
<svg width="250" height="20" style="overflow: visible"><foreignObject>&#x2196;&#xfe0e;</foreignObject>
     <path d="M250,35 L50,35 C30,35 20,20 3,3" fill="transparent" stroke="black" marker-end="url(#arrowhead)" />
    </svg>
</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F3</td>
<td>&nbsp;</td>
<td>feature</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
</tr>
</table>
<p>
In the simplified diagram, we still have our common merge base
at commit A (where we started with <code>apple</code>)
but all we see is commit M3 in the master branch
(where we have <code>berry</code>)
and commit F3 in the feature branch
(where we have <code>apple</code>).
</p>
<p>
Comparing the base to the head of the master branch,
we see that <code>apple</code> changed to <code>berry</code>.
Comparing the base to the head of the feature branch,
we see that <code>apple</code> didn't change at all.
Since the line did not change in the feature branch,
it means that the merge from the feature branch
will not change the line either.
The result is that the line remains unchanged by the merge,
so it remains at its current value in the master branch of <code>berry</code>.
</p>
<p>
It gets worse:
If you subsequently merge from the master branch into
the feature branch,
the incorrect line propagates into the
feature branch.
</p>
<table CELLSPACING=1 STYLE="text-align: center" TITLE="Described in text.">
<tr>
<td>apple</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>berry</td>
</tr>
<tr>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">A</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M1</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M2</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M3</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M4</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>master</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x22F0;</foreignObject><use href="#swarrd"/></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2199;&#xfe0e;</foreignObject><use href="#swarr"/></svg>
</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
<td>&#x26a0;&#x26a0;</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F2</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F3</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F4</td>
<td>&nbsp;</td>
<td>feature</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>berry</td>
</tr>
</table>
<p>
For the merge from the master branch to the feature branch,
the common merge base is commit F3,
which is also the head of the feature branch.
In commit F3, the line is <code>apple</code>.
In the head of the master branch, it is <code>berry</code>,
and that change propagates to the feature branch.
As a result, in the new commit F4 in the feature branch,
the line is now <code>berry</code>.
(I chose to use a non-fast-forward merge, but you would
see the same thing if it were a fast-forward merge.)
</p>
<p>
Most people think of cherry-picks as
"anticipatory partial merges",
where you want to merge part of a source branch
into your destination branch.
The expectation is that if you later decide to merge
the rest of the source branch into the destination branch,
it will merge in only the new parts.
</p>
<p>
And if you are careful not to touch the lines affected by the
cherry-pick until the two sides of the cherry-pick finally merge,
that's what happens,
because the merge will see that both sides modified the
file in the same way,
and the two commits are coalesced.
</p>
<p>
But if you make additional changes to the affected line
in either of the branches,
then instead of coalescing, the two changes are added together.
And if your additional changes to the affected line have the
effect of canceling out the cherry-picked change,
then you don't even get a merge conflict to inform you that
something weird happened.
(Internally on our team, we call this the ABA problem
because the line started with A, changed to B,
the B got cherry-picked away, and then the line changed back to A
prior to the merge back to the master branch.)
</p>
<p>
The master branch applied a change,
and the feature branch applied the change,
and the feature branch reverted the change.
Mathematically, you performed two changes and one revert,
so the net effect is still a +1 in favor of the change.
</p>
<p>
Okay, so the problem is that we wanted to do a partial merge
from the feature branch back into the master branch.
Too bad there's no such thing as a partial merge.
</p>
<p>
Or is there?
</p>
<p>
Next time, we'll show how to perform a partial merge.
</p>
<p>
<b>Bonus chatter</b>:
Normally, merging twice produces the same result as merging once,
just with more merge conflicts (because you have to resolve
the conflict twice, once at each merge).
But in this scenario, we get different results, neither of which
raise merge conflicts.
If we had performed <i>two</i> merges from the feature branch
into the master branch,
first by merging commit F2, then again by merging commit F3,
then we would have had two clean merges, but the result would
have been different:
</p>
<table CELLSPACING=1 STYLE="text-align: center" TITLE="Described in text.">
<tr>
<td>apple</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>apple</td>
</tr>
<tr>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">A</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M1</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M2</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M3</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M4.1</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">M4.2</td>
<td>&nbsp;</td>
<td>master</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2196;&#xfe0e;</foreignObject><use href="#nwarr"/></svg>
</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x22F0;</foreignObject><use href="#swarrd"/></svg>
</td>
<td>
<svg width="20" height="20" style="overflow: visible"><foreignObject>&larr;</foreignObject>
     <path d="M128,-3 L-34,27" fill="transparent" stroke="black" marker-end="url(#arrowhead)" />
    </svg>
</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject></svg>
</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject></svg>
</td>
<td>
<svg width="20" height="20" style="overflow: visible"><foreignObject>&#x21b2;&#xfe0e;</foreignObject>
     <path d="M92,-3 L5,27" fill="transparent" stroke="black" marker-end="url(#arrowhead)" />
    </svg>
</td>
<td>&nbsp;</td>
<td>
<svg width="20" height="20"><foreignObject>&#x2199;&#xfe0e;</foreignObject></svg>
</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F1</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject><use href="#larr"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F2</td>
<td COLSPAN=3>
<svg width="98" height="20"><foreignObject>&larr; &larr; &larr;</foreignObject><use href="#larr3"/></svg>
</td>
<td STYLE="border: solid 1px black; width: 50px; font-size: 120%">F3</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject></svg>
</td>
<td>
<svg width="20" height="20"><foreignObject>&larr;</foreignObject></svg>
</td>
<td>&nbsp;</td>
<td>feature</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
<td>&nbsp;</td>
<td>berry</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>apple</td>
</tr>
</table>
<p>
This is troubling because it means that changing your policy
on how often you merge can result in different final results,
without any warnings from git.
</p>
<p>
<b>More bonus chatter</b>:
Note that the "revert" need not be an actual revert.
It might merely happen to resemble a revert.
For example, suppose you start with
</p>
<pre>
char* predefined_items[4] = {
 "armoire",
 "bed",
 "credenza",
 "desk",
};
</pre>
<p>
You decide that you need a fifth item,
so you add the fifth item and bump the array size:
</p>
<pre>
char* predefined_items[5] = {
 "armoire",
 "bed",
 "credenza",
 "desk",
 "end table",
};
</pre>
<p>
Another branch cherry-picks this because it needs the end table.
Meanwhile, you realize that you don't need the bed any more,
so you remove it and drop the array size to four.
</p>
<pre>
char* predefined_items[4] = {
 "armoire",
 "credenza",
 "desk",
 "end table",
};
</pre>
<p>
When these two changes merge, the result will be
</p>
<pre>
char* predefined_items[5] = {
 "armoire",
 "credenza",
 "desk",
 "end table",
};
</pre>
<p>
Notice that the length of the <code>predefined_items</code> array
is five, even though there are only four entries in it.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title"> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/oldnewthing/20180313-00/?p=98225#respond" style="display:none;">Cancel reply</a></small></h3>			<form action="https://blogs.msdn.microsoft.com/oldnewthing/wp-comments-post.php" method="post" id="commentform" class="comment-form">
				<p class="comment-form-comment"><textarea id="comment" name="comment" cols="45" rows="4" aria-required="true"></textarea></p><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" aria-required='true' required='required' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" maxlength="100" aria-describedby="email-notes" aria-required='true' required='required' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" maxlength="200" /></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit btn btn-default" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='98225' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="8b9bd8a435" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="68"/></p>			</form>
			</div><!-- #respond -->
	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1329375">
				<div id="div-comment-1329375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Clarkstone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225#comment-1329375">
			March 13, 2018 at 9:23 am</a>		</div>

		<p>I recall that SVN&#8217;s merging system keeps track of exactly which revisions of which branches have been merged into each other branch, using the same representation for cherry-picking as for merging. As a result, this sort of problem doesn&#8217;t occur because SVN skips over the cherry-picked commits identically whether they are already-cherry-picked or already-merged.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225&#038;replytocom=1329375#respond' onclick='return addComment.moveForm( "div-comment-1329375", "1329375", "respond", "98225" )' aria-label='Reply to Simon Clarkstone'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1329505">
				<div id="div-comment-1329505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225#comment-1329505">
			March 13, 2018 at 12:02 pm</a>		</div>

		<p>I&#8217;m not familiar with SVN, but Perforce also treats cherry-picks as a special type of merge; the problem is that &#8220;should I skip over the cherry-picked commits&#8221; isn&#8217;t thorough. In the scenario above, Perforce says &#8220;I&#8217;m just going to take everything&#8221; instead of &#8220;Let me take just F1 and F3.&#8221; It also doesn&#8217;t search more than one branch deep: Branch A makes a change, branch C cherry-picks it. Branch B merges branch A, and then branch C merges branch B. This last merge doesn&#8217;t detect that the cherry-pick is buried inside branch B and shouldn&#8217;t be re-merged. Not that there&#8217;s really a practical way to remove it anyway.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225&#038;replytocom=1329505#respond' onclick='return addComment.moveForm( "div-comment-1329505", "1329505", "respond", "98225" )' aria-label='Reply to Raymond Chen - MSFT'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1329385">
				<div id="div-comment-1329385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225#comment-1329385">
			March 13, 2018 at 9:34 am</a>		</div>

		<p>Right, but that&#8217;s SVN &#8212; with a centralized master. Git&#8217;s paradigm is decentralized, which just takes some time getting used to. (There might be a &#8220;we agree that the copy on bitbucket/github is the right copy&#8221;, git doesn&#8217;t care. )</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225&#038;replytocom=1329385#respond' onclick='return addComment.moveForm( "div-comment-1329385", "1329385", "respond", "98225" )' aria-label='Reply to nathan_works'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1329435">
				<div id="div-comment-1329435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Clarkstone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225#comment-1329435">
			March 13, 2018 at 10:27 am</a>		</div>

		<p>(Note: I have had some experience of both git and SVN over the years, and generally find git to be nicer. I definitely like that it has a simple, explicit model for what history is.)</p>
<p>SVN&#8217;s merging model as I described it does not require centralisation AFAICT. The decentralised form would be for a merge/cherry-pick commit to have the usual lone parent (rather than the multiple parents git uses), but also to have an extra metadata field that indicated which commits (by their hashes) that were being merged/cherry-picked in.</p>
<p>It&#8217;s an interesting idea slightly like Darcs, but I don&#8217;t know how well it would work in practice.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225&#038;replytocom=1329435#respond' onclick='return addComment.moveForm( "div-comment-1329435", "1329435", "respond", "98225" )' aria-label='Reply to Simon Clarkstone'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1 parent" id="comment-1329395">
				<div id="div-comment-1329395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225#comment-1329395">
			March 13, 2018 at 9:36 am</a>		</div>

		<p>A timely article on why MS has so many problems with merging in Git: <a href="https://arstechnica.com/gadgets/2018/03/building-windows-4-million-commits-10-million-work-items/" rel="nofollow">https://arstechnica.com/gadgets/2018/03/building-windows-4-million-commits-10-million-work-items/</a></p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225&#038;replytocom=1329395#respond' onclick='return addComment.moveForm( "div-comment-1329395", "1329395", "respond", "98225" )' aria-label='Reply to Brian_EE'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1329415">
				<div id="div-comment-1329415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225#comment-1329415">
			March 13, 2018 at 9:51 am</a>		</div>

		<p>The ars technica article is basically a re-hash of this blog post: <a href="https://blogs.msdn.microsoft.com/devops/2018/03/12/how-vsts-is-accelerating-the-engineering-group-behind-windows/" rel="nofollow">https://blogs.msdn.microsoft.com/devops/2018/03/12/how-vsts-is-accelerating-the-engineering-group-behind-windows/</a></p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225&#038;replytocom=1329415#respond' onclick='return addComment.moveForm( "div-comment-1329415", "1329415", "respond", "98225" )' aria-label='Reply to CarlD'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-acidhelm even thread-odd thread-alt depth-1" id="comment-1329425">
				<div id="div-comment-1329425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Michael+Dunn_' rel='external nofollow' class='url'>Michael Dunn_</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225#comment-1329425">
			March 13, 2018 at 10:21 am</a>		</div>

		<p>Whenever I hear people talk about Git, it&#8217;s always one of two things. Either, &#8220;Git is a great VCS!&#8221; or &#8220;Oh [expletive] I ran the wrong command and now I&#8217;ve lost work. How do I fix it?&#8221; Nothing in between.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225&#038;replytocom=1329425#respond' onclick='return addComment.moveForm( "div-comment-1329425", "1329425", "respond", "98225" )' aria-label='Reply to Michael Dunn_'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1329455">
				<div id="div-comment-1329455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225#comment-1329455">
			March 13, 2018 at 10:55 am</a>		</div>

		<p>I am all too experienced to not know why the absence of an error is worse than an error. The error at least gives you a chance to figure out that something went wrong!</p>
<p>Note: this is not about git. It&#8217;s about absences of errors in general.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225&#038;replytocom=1329455#respond' onclick='return addComment.moveForm( "div-comment-1329455", "1329455", "respond", "98225" )' aria-label='Reply to henke37'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1329485">
				<div id="div-comment-1329485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Koopa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225#comment-1329485">
			March 13, 2018 at 11:54 am</a>		</div>

		<p>And then there are companies catching every error and ignoring them, leaving the user to figure out why the program behave like trash, and the programmer hours to figure out what went wrong.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180313-00/?p=98225&#038;replytocom=1329485#respond' onclick='return addComment.moveForm( "div-comment-1329485", "1329485", "respond", "98225" )' aria-label='Reply to Ray Koopa'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

