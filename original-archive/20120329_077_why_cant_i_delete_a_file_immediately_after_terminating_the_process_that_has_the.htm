<html>
<head>
<title>Why can't I delete a file immediately after terminating the process that has the file open?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why can&#8217;t I delete a file immediately after terminating the process that has the file open?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 29, 2012 / year-entry #78</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>26</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer discovered a bug where terminating a process did not close the handles that the process had open, resulting in their emergency cleanup code not working: TerminateProcess(processHandle, EXITCODE_TERMINATED); DeleteFile(someFile); Their workaround was to insert a call to Wait­For­Single­Object(process­Handle, 500) before deleting the file. The customer wanted to know whether they discovered a bug in...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer discovered a bug where terminating a process did not
close the handles that the process had open, resulting in their
emergency cleanup code not working:
</p>
<pre>
TerminateProcess(processHandle, EXITCODE_TERMINATED);
DeleteFile(someFile);
</pre>
<p>
Their workaround was to insert a call to
<code>Wait&shy;For&shy;Single&shy;Object(process&shy;Handle, 500)</code>
before deleting the file.
The customer wanted to know whether they discovered a bug
in <code>Terminate&shy;Process</code>,
and they were concerned that their workaround could add up to
a half second to their cleanup code,
during which the end user is sitting there waiting for everything
to clean up.
</p>
<p>
As MSDN notes,
</p>
<blockquote CLASS=q><p>
<b>TerminateProcess</b> <u>initiates termination and returns immediately</u>.
This stops execution of all threads within the process
and requests cancellation of all pending I/O.
The terminated process cannot exit
until all pending I/O has been completed or canceled.
</p>
</blockquote>
<p>
(Emphasis mine.)
</p>
<p>
Termination is begun, but the function does not wait
for termination to complete.
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/07/23/192531.aspx">
Sometimes a thread gets stuck</a>
because a device driver has gotten
wedged (or the driver doesn't support cancellation).
</p>
<p>
To know when the handles are closed,
wait on the process handle,
because the process handle is not signaled until
process termination is complete.
If you are concerned that this can take too long,
you can do like the customer suggested and wait with a timeout.
Of course, if the timeout expires,
then you have to decide what to do next.
You can't delete the file, since it's still open,
but maybe you can log an error diagnostic and let the user know why
things are taking so long to clean up,
and maybe add the file to a list of files to clean up the next
time the program starts up.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (26)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-975303">
				<div id="div-comment-975303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975303">
			March 29, 2012 at 7:24 am</a>		</div>

		<p>This is amazingly relevant to something I&#39;m working on right now. Thanks!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk odd alt thread-odd thread-alt depth-1" id="comment-975323">
				<div id="div-comment-975323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975323">
			March 29, 2012 at 9:29 am</a>		</div>

		<p>Terminating the process that has a file open might require disk or network I/O, which takes a bit of time to run even if it&#39;s not stuck. &nbsp;Waiting on the process handle sounds like the right thing to do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975353">
				<div id="div-comment-975353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975353">
			March 29, 2012 at 10:20 am</a>		</div>

		<p>WaitForSingleObject(&#8230;INFINITE rather than 500 would be more appropriate as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975363">
				<div id="div-comment-975363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975363">
			March 29, 2012 at 10:28 am</a>		</div>

		<p>There&#39;s another way. It&#39;s actually possible to write a safe version of the Unlocker program that Raymond rightly condemned, so long as the target process is not stuck in loader lock or kernel.</p>
<p>Using CreateRemoteThread, inject a thread that does this:</p>
<ol>
<li>
<p>Suspend all threads but itself, keeping a list of previous thread priorities</p>
</li>
<li>
<p>Close the target handle.</p>
</li>
<li>
<p>Open a file handle to NUL.</p>
</li>
<li>
<p>While the handle just created is not the handle to close, push handle &amp; duplicate.</p>
</li>
<li>
<p>Close all pushed handles.</p>
</li>
<li>
<p>Unsuspend all threads (use list saved in step 1).</p>
</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975373">
				<div id="div-comment-975373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975373">
			March 29, 2012 at 10:53 am</a>		</div>

		<p>2Joshua No need for CreateRemoteThread in this case &#8211; you may do eveything this just by DuplicateHandle from remote to you (DUPLICATE_CLOSE_SOURCE &#8211; effective remote CloseHandle) and back. BUT its not safe &#8211; application logic may critically relay on the state of opened file (size, content, it can be also used as IPC with some other process etc).</p>
<p>And dont forget about filemappings&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975383">
				<div id="div-comment-975383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975383">
			March 29, 2012 at 11:01 am</a>		</div>

		<p>Joshua: In this case, it can be much simpler:</p>
<ol>
<li>Suspend all threads.</li>
<li>
<p>Use CreateRemoteThread to execute a routine that:</p>
</li>
<li>
<p>calls CloseHandle on all open handles and then</p>
</li>
<li>
<p>calls TerminateProcess.</p>
</li>
</ol>
<p>Of course, if they control the source code to the target process, they could simply mark the temporary files as &quot;delete on close&quot; in the first place. Or at least open the file with FILE_SHARE_DELETE so that the cleanup process can delete it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975393">
				<div id="div-comment-975393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975393">
			March 29, 2012 at 11:15 am</a>		</div>

		<p>And dont forget about filemappings&#8230;</p>
<p>I did not. Those can crash the process if you free them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975413">
				<div id="div-comment-975413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975413">
			March 29, 2012 at 11:37 am</a>		</div>

		<p>2Joshua actually you may copy their contents to unnamed mappings and map new mappings exactly at same addresses as old ones. But of cause this will not be safe, but approx in the same &#39;degree of risk&#39; as replacing file&#39;s handle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975433">
				<div id="div-comment-975433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975433">
			March 29, 2012 at 12:09 pm</a>		</div>

		<p>In what way is your solution (closing the handle explicitly with a remote thread) faster than using TerminateProcess()? The CloseHandle operation will take the kernel the same time, no matter how it is invoked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975443">
				<div id="div-comment-975443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975443">
			March 29, 2012 at 12:17 pm</a>		</div>

		<p>It&#39;s not faster at all. I&#39;d rather not terminate a process that won&#39;t let go of a file I need it to, especially if it&#39;s a critical system process. Let&#39;s just say that killing the user&#39;s AntiVirus (most common offender for me) is not polite.</p>
<p>@Killer{R}: All cases I&#39;ve seen of that were processes that had loaded DLLs that needed replacing. At that point, it&#39;s time to blast.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jader3rd even thread-even depth-1" id="comment-975453">
				<div id="div-comment-975453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/jader3rd' rel='external nofollow' class='url'>jader3rd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975453">
			March 29, 2012 at 12:36 pm</a>		</div>

		<p>I think it&#39;d be nice of the Windows File API&#39;s added overrides with timeout parameters. Have the timeouts be related to the handle being available. That way, in this case they wouldn&#39;t need to wait for the process to exit, they&#39;d only need to wait for the file handle to become available. I would find it very useful.</p>
<div class="post">[<i>Not sure what you mean by &quot;wait for the file handle to become available.&quot; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975473">
				<div id="div-comment-975473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975473">
			March 29, 2012 at 1:51 pm</a>		</div>

		<p>[Not sure what you mean by &quot;wait for the file handle to become available.&quot; -Raymond]</p>
<p>He wants the API to automatically wait a few seconds when encountering a locked file, like a semaphore.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975483">
				<div id="div-comment-975483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975483">
			March 29, 2012 at 3:11 pm</a>		</div>

		<p>There always will be people that want to specify timeout and other options of such implicit wait that will effectively force MS to re-invent all that WaitFor* functions that you may use now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975493">
				<div id="div-comment-975493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975493">
			March 29, 2012 at 3:49 pm</a>		</div>

		<p>Also don&#39;t forget the virus scanners and similar tag alongs that like to keep files open after they have been closed by the initial process. &nbsp;The usual solution is to try several times in a loop with time delays.</p>
<p>In one of my test scripts I do that once, and on failure rename the files and continue trying to delete them in the background. &nbsp;Fortunately you can rename in use files.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975503">
				<div id="div-comment-975503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975503">
			March 29, 2012 at 3:52 pm</a>		</div>

		<p>Roger: If you can rename a file, can&#39;t you just as easily mark it for deletion?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975513">
				<div id="div-comment-975513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975513">
			March 30, 2012 at 12:10 am</a>		</div>

		<p>@Gabe But if you rename a file you can immediately start creating a new file with the same name, which is sometimes useful. (e.g. a buggy program crashes without cleaning up its log file properly, and you need to immediately restart a new instance, using the same log filename.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975523">
				<div id="div-comment-975523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Freek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975523">
			March 30, 2012 at 12:16 am</a>		</div>

		<p>Maybe to some degree related to the above question, but how about deleting a file and subsequently creating a file with the exact name?</p>
<p>In our organization we&#39;re developing in .NET but we had to lookup the WIN32 documentation to find out that DeleteFile is not a &quot;blocking&quot; operation, but merely a request that will be handled later on. Is there a way to create a DeteleFileAndWaitForItToFinish function? Currently we&#39;re using a workaround that renames a file and then deleting it.</p>
<p>Background info: We stumbled upon this issue while running unit tests. A lot of tests set up a test environment. When a test is run it removes it environment (deletes files and folders), then the next test might set up a similar environment (creating files).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975533">
				<div id="div-comment-975533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">luke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975533">
			March 30, 2012 at 1:23 am</a>		</div>

		<p>I never understood what EXITCODE_TERMINATED should be.</p>
<p>Are there any rules or best practices, negative/positive, small/big?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975543">
				<div id="div-comment-975543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Christian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975543">
			March 30, 2012 at 5:02 am</a>		</div>

		<p>And if all that is done what&#39;s described above, it could still be possible that the file still cannot be deleted!</p>
<p>Chance is, the virus scanner just locks that file again (it&#39;s not so unlikely when it was just closed, as then the scanner will look into the new file to do its work). Sigh. Yes, it&#39;s not easy nowadays.</p>
<p>So there&#39;s an additional look necessary that just ends at a &quot;I give up&quot; timeout or when the file really disappeared.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-975623">
				<div id="div-comment-975623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975623">
			March 30, 2012 at 8:13 am</a>		</div>

		<p>@Freek: DeleteFile will finish before it returns unless some other handle is open on the file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975653">
				<div id="div-comment-975653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arlie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975653">
			March 30, 2012 at 8:47 am</a>		</div>

		<p>Joshua, can you please never, ever write any code again? &nbsp;It&#39;s just this sort of crap that makes software unreliable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jader3rd odd alt thread-odd thread-alt depth-1" id="comment-975673">
				<div id="div-comment-975673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/jader3rd' rel='external nofollow' class='url'>jader3rd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975673">
			March 30, 2012 at 9:58 am</a>		</div>

		<p>[Not sure what you mean by &quot;wait for the file handle to become available.&quot; -Raymond]</p>
<p>There&#39;s an exclusive lock on the file handle. So just like waiting for any other kind of lock, I&#39;d like that built into the file system API&#39;s. When I call CreateFile, I&#39;d like it to have a timeout parameter for waiting for the file handle to become available. Since I don&#39;t have this, I currently have plenty of code which spins in loops for a period of time, trying to get the file handle, and bailing out eventually. I&#39;d like that logic built into the OS so I can stop writing polling code.</p>
<div class="post">[<i>Okay, I see my confusion. You want to wait for the <span style="text-decoration:underline;">file</span> to become available, not the handle. (Handles aren&#39;t &quot;available&quot;; they either exist or don&#39;t exist.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-975553">
				<div id="div-comment-975553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975553">
			March 30, 2012 at 5:03 am</a>		</div>

		<p>@Joshua: I never thought I&#39;d see the words &quot;safe&quot; and &quot;CreateRemoteThread&quot; in the same post. I&#39;ll take TerminateProcess over CreateRemoteThread any time &#8212; less chance of something going wrong. TerminateProcess will at least *consistently* hose things&#8230;</p>
<p>@Freek: consider the approach that the Visual Studio tests themselves use: create a new directory for every unit test run. This way, they don&#39;t overlap. Obviously this can use a considerable amount of disk space, but cleaning up old tests in the background is fairly easy (and doesn&#39;t require blocking waits). Also, you actually have the test results of previous runs for comparison, which can come in handy. As long as you&#39;ve got the space, don&#39;t skimp on it. I&#39;m assuming you can set up your code to use a particular directory &#8212; if not, you should either rewrite your code so it can (preferrably) or use a fixed drive letter and SUBST.</p>
<p>Many people will tell you that tests that create files are a bad idea to begin with, because they&#39;re too slow and not as easily run as tests that don&#39;t do I/O. I don&#39;t think this needs to be a religious issue, but it is true that tests that don&#39;t need explicit I/O are preferable. Of course, if the I/O itself is what you&#39;re testing, it&#39;s a necessity.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk odd alt thread-odd thread-alt depth-1" id="comment-975983">
				<div id="div-comment-975983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-975983">
			April 2, 2012 at 12:20 pm</a>		</div>

		<p>@Joshua: &nbsp;&quot;Suspending all threads except itself&quot; is safe? &nbsp;Really? &nbsp;If &quot;itself&quot; hangs for any reason, or crashes, all threads are suspended. &nbsp;Yuck.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-976203">
				<div id="div-comment-976203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Freek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-976203">
			April 3, 2012 at 5:57 am</a>		</div>

		<p>&quot;to find out that DeleteFile is not a &quot;blocking&quot; operation, but merely a request that will be handled later on&quot;</p>
<p>Yes, it does not work like &quot;unlink&quot; in Unix (which never fails and is always synchronous if you can modify the directory at all), but if all your test cases have closed their file handles, the delete *will* happen synchronously. If you have a problem here then check your code for files that are still open.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976683">
				<div id="div-comment-976683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120329-00/?p=7973#comment-976683">
			April 4, 2012 at 7:27 am</a>		</div>

		<p>This gets into one of my major pet peeves; developers who use sleeps instead of waiting on handles. File and thread handles go signaled when exited. Having threads polling a bool to indicate exit is another one that drives me crazy. (Then there are those who check for WAIT_ABANDONED on events or semaphores.)</p>
<p>If you can open a file in read only mode, another trick is to open it with DELETE_ON_CLOSE flag.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

