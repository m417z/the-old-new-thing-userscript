<html>
<head>
<title>If it's not yours, then don't mess with it without permission from the owner</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If it&#8217;s not yours, then don&#8217;t mess with it without permission from the owner</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 30, 2010 / year-entry #125</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It's surprising how many principles of real life also apply to computer programming. For example, one of the rules of thumb for real life is that is that if something doesn't belong to you, then you shouldn't mess with it unless you have permission from the owner. If you want to ride Jimmy's bike, then...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>It's surprising how many principles of real life also apply to computer programming. For example, one of the rules of thumb for real life is that is that if something doesn't belong to you, then you shouldn't mess with it unless you have permission from the owner. If you want to ride Jimmy's bike, then you need to have Jimmy's permission. Even if Jimmy leaves his bicycle unlocked in his driveway, that doesn't mean that it's available for anyone to take or borrow.</p>
<p> In computer programming, the code that creates an object (or on whose behalf the object is created) controls what is done with the object, and if you're not that component, then it's only right to get the permission of that component before you start messing with that it thought was its private property. </p>
<p> Application compatibility is, in large part, dealing with programs which violate this rule of civilized society, programs which directly manipulate the contents of list views they did not create, use reflection to access private members of classes, that sort of thing. But I won't use that as the motivating example this time, because you're all sick and tired of that. </p>
<p> Instead, let's look at the low-fragmentation heap. The question is, "Under what conditions can I convert a heap to a low-fragmentation heap?" </p>
<p> Well, if you called <code>Heap&shy;Create</code>, then that heap is yours and you decide what the rules are. If you want that heap to be a low-fragmentation heap, then more power to you. </p>
<p> If you didn't call <code>Heap&shy;Create</code> then that heap doesn't belong to you; you're just a guest. But of course the owner of the heap can grant permission to you, at which point you are free to do whatever it was the owner said you could do. If Jimmy says, "You can borrow my bike if it's just sitting in the driveway," then you can borrow his bicycle if it is just sitting in the driveway. But if it's in the garage, then you can't borrow it. And even if it's sitting in the driveway, you can't sell it. You can only borrow it. </p>
<p> Okay, let's look at heaps again. If you are an executable, then the process heap was created on your behalf. (This is not obvious, but that's the guidance I've received from the people who work with this sort of thing.) Therefore, if you want, you can call <code>Get&shy;Process&shy;Heap</code> and convert that heap to a low-fragmentation heap. It's the heap for your process, so if you want it to be a low-fragmentation heap, the heap folks say that's okay with them. </p>
<p> On the other hand, if you're writing a DLL, then the process heap does <i>not</i> belong to you, nor was it created on your behalf. It belongs to the executable that loaded your DLL, and it is that executable which decides what type of heap it wants. If you would prefer that your DLL use a low-fragmentation heap, you can include that in the guidance in your DLL's documentation, but be aware that the process heap is shared with all DLLs in the process, so the hosting application may not be able to comply with your guidance if it is also using another DLL whose guidance documentation says that it should <i>not</i> be used with a low-fragmentation heap. If a low-fragmentation heap is really important to your DLL, then you can create your own heap with <code>Heap&shy;Create</code> and set it into low-fragmentation mode. When you create a heap with <code>Heap&shy;Create</code>, it's your heap, and you get to decide what the rules are. </p>
<p> If you use the C runtime library default heap, then that heap is under the control of the C runtime library, and you don't have the rights to change its parameters. However, the C runtime library is one of the examples where you're allowed to use an object that's not yours if you have permission from the owner: The <a href="http://msdn.microsoft.com/en-us/library/csd157zx(VS.80).aspx"> <code>_get_<wbr>heap_<wbr>handle</wbr></wbr></code></a> function was specifically created so that you could convert the heap to a low-fragmentation heap. But now that you've unwrapped one layer of ownership, there is still the matter of which of the C runtime's clients is the decision-maker with regard to how that heap is to be configured? </p>
<p> Remember that a DLL is a guest in the host process. You don't go <a href="http://blogs.msdn.com/oldnewthing/archive/2009/12/02/9931183.aspx"> changing the carpets in someone's house just because you're visiting</a>. </p>
<p> If you linked the C runtime library statically, then you are the only client of that heap, and you are therefore free to convert it to a low-fragmentation heap. (If you bring your own towels to someone's house, then you are free to abuse them in any manner you choose.) On the other hand, if you linked the C runtime library dynamically, then you're using the shared C runtime heap, and the authority to determine the mode of that heap belongs to the hosting executable. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-829363">
				<div id="div-comment-829363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829363">
			April 30, 2010 at 7:19 am</a>		</div>

		<p>&quot;You don&#8217;t go changing the carpets in someone&#8217;s house just because you&#8217;re visiting.&quot;</p>
<p>Why does that sentence make me think of Marie Barone from Everybody Loves Raymond?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829383">
				<div id="div-comment-829383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829383">
			April 30, 2010 at 7:39 am</a>		</div>

		<p>&quot;If you are an executable, then the process heap was created on your behalf.&quot;</p>
<p>&quot;If you use the C runtime library default heap, then that heap is under the control of the C runtime library,&quot;</p>
<p>&quot;Remember that a DLL is a guest in the host process.&quot;</p>
<p>So, the C runtime library, which is a DLL, and therefore a guest in any process which dynamically links with it, creates its own default heap, which is different from the processes default heap?</p>
<p>Actually, that does make kind of sense. Which is why malloc()/free() (which presumably works with the C runtime library heap) is separate from CoTaskMemAlloc()/CoTaskMemFree() (which I imagine works with the process heap)</p>
<p>Yes? No? Seems weird though&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829413">
				<div id="div-comment-829413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829413">
			April 30, 2010 at 8:25 am</a>		</div>

		<p>@Karellen,</p>
<p>C runtime library DLL is not a guest, it&#8217;s a mother-in-law&#8230; Other guests even may bring their own MIL&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829423">
				<div id="div-comment-829423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://arnshea.blogspot.com/' rel='external nofollow' class='url'>arnshea</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829423">
			April 30, 2010 at 9:11 am</a>		</div>

		<p>@Karellen, I see this a lot. &nbsp;In language it&#8217;s called overregularization. &nbsp;In this case it&#8217;s an over-application of the principle that DLLs are guests in the process&#8217; house to the C runtime library DLL.</p>
<p>The special-ness of the C runtime library in this context seems obvious but some people need it spelled out. &nbsp;I suspect the AppCompat team owes the bulk of its reason for existence to these kinds of people. #rant off</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson even thread-even depth-1" id="comment-829443">
				<div id="div-comment-829443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829443">
			April 30, 2010 at 9:40 am</a>		</div>

		<p>@Karellen, A DLL (or whatever) is allowed to create its own heap and then give it (or APIs which call it) to other people to use. That&#8217;s all the CRT is doing (unless it is using the process heap, which it is allowed but not guaranteed to do as well).</p>
<p>The important things are that you don&#8217;t mess with someone else&#8217;s heap&#8217;s settings without knowing you are allowed to, and that you don&#8217;t allocate memory from one heap and try to free it from another.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829473">
				<div id="div-comment-829473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829473">
			April 30, 2010 at 10:43 am</a>		</div>

		<p>This title is suspiciously relevant to current events. &nbsp;Coincidence, or could this be Raymond&#8217;s way of weighing in on the drama surrounding a certain gadget that recently met an unfortunate end? :)</p>
<div class=post>[<i>Seeing as this was written and scheduled 18 months ago, I prefer to describe its appearance as clairvoyant. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829483">
				<div id="div-comment-829483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829483">
			April 30, 2010 at 10:55 am</a>		</div>

		<p>@Tom: To what current event are you referring?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829493">
				<div id="div-comment-829493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829493">
			April 30, 2010 at 11:13 am</a>		</div>

		<p>@ Billy:</p>
<p>&quot;If you want to use Steve&#8217;s iPod then you need to have Steve&#8217;s permission. Even if Steve leaves his iPod unattended in a bar that doesn&#8217;t mean that it&#8217;s available for anyone to take or borrow.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829523">
				<div id="div-comment-829523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829523">
			April 30, 2010 at 1:55 pm</a>		</div>

		<p>@arnshea: So&#8230; the C runtime is different from other DLLs, but it&#8217;s still creating its own heap separate from the process heap (that is what Raymond said, right?) which it owns instead of you, but you can get permission to mess with if you want, which you could do for any heap created by any other DLL if it provided an API for that purpose?</p>
<div class=post>[<i>There&#8217;s nothing special about the C runtime. It is a guest in the host process. It creates a heap, which under the general rules of polite society therefore belongs to the C runtime. The C runtime _get_heap_handle function is explicitly documented as granting the caller permission to use the handle to change the heap to a low fragmentation heap. Thus, the convention in the subject line is adhered to: &#8220;Don&#8217;t mess with it without permission from the owner.&#8221; I can&#8217;t believe I had to write that. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829563">
				<div id="div-comment-829563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">person</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829563">
			April 30, 2010 at 6:29 pm</a>		</div>

		<p>Is it ok to view porn on someone else&#8217;s computer without asking? What if I really really need to?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829573">
				<div id="div-comment-829573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829573">
			April 30, 2010 at 8:31 pm</a>		</div>

		<p>Why should the app care about low-fragmentation heap? Can&#8217;t the OS fix/defrag this in the background itself with some smart memory mapping stuff. Please remove this &#8220;feature&#8221; from windows 2010.</p>
<div class=post>[<i>Do as much &#8220;memory mapping stuff&#8221; as you want; that won&#8217;t make the value of 500−280 any smaller, which is the source of fragmentation. I guess you could make everbody use memory handles and explicitly lock the memory before using it. Then people will wonder why you&#8217;re reinventing Win16. Though I&#8217;m impressed by the exhortation to fix a problem by something as vague as &#8220;smart memory mapping stuff.&#8221; It&#8217;s like the Monty Python episode where they explain how to rid the world of all known diseases. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-829583">
				<div id="div-comment-829583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arnt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829583">
			May 1, 2010 at 2:40 am</a>		</div>

		<p>Hey Raymond,</p>
<p>thanks for keeping your articles going, even through regular doubts of the &#8216;is this still worth doing&#8217; kind.</p>
<p>I love seeing these low level things I never knew about. A low fragmentation heap, I&#8217;ve been developing software for a long time and never heard of it&#8230; And all the discussion here gets me thinking, why do dll&#8217;s not just always create their own heap, what is the advantage of having the same/a different heap, &#8230;</p>
<p>Good stuff, thank you!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm even thread-even depth-1" id="comment-829593">
				<div id="div-comment-829593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829593">
			May 1, 2010 at 1:00 pm</a>		</div>

		<p>Arnt, &quot;why do dll&#8217;s not just always create their own heap, what is the advantage of having the same/a different heap, &#8230;&quot;</p>
<p>Because they share memory blocks with the rest of the process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm odd alt thread-odd thread-alt depth-1" id="comment-829603">
				<div id="div-comment-829603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829603">
			May 1, 2010 at 1:03 pm</a>		</div>

		<p>[There&#8217;s nothing special about the C runtime. &nbsp;&#8230; &nbsp;I can&#8217;t believe I had to write that. -Raymond]</p>
<p>Raymond, I think you and Karellen are in violent agreement here, &nbsp;My reading was that Karellen was pointing out to arnshea that the C Runtime was no different than any other DLL, exactly as you described.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829623">
				<div id="div-comment-829623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829623">
			May 1, 2010 at 4:33 pm</a>		</div>

		<p>&gt; [Do as much &#8220;memory mapping stuff&#8221; as you want; that won&#8217;t make the value of 500−280 any smaller, which is the source of fragmentation. I guess you could make everbody use memory handles and explicitly lock the memory before using it. Then people will wonder why you&#8217;re reinventing Win16. Though I&#8217;m impressed by the exhortation to fix a problem by something as vague as &#8220;smart memory mapping stuff.&#8221; It&#8217;s like the Monty Python episode where they explain how to rid the world of all known diseases. -Raymond]</p>
<p>I thought that locking of memory was still a requirement in win32 because when I tried to remove it in user space software i wrote, some API (drivers?) stopped working because they assumed that you locked the memory.</p>
<p>Btw, descriptor tables + selectors which translates all addresses several times could probably be used to move/defrag memory without the need for locking memory.</p>
<div class=post>[<i>May I suggest that you think through your suggestions before making them instead of just tossing in some buzzwords and saying &#8220;I&#8217;m sure you can find some way to use this to solve all your problems.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-829643">
				<div id="div-comment-829643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829643">
			May 2, 2010 at 2:41 am</a>		</div>

		<p>@640k, Having to lock memory in Win32 is vanishingly rare.</p>
<p>Memory allocated using GMEM_MOVEABLE or LMEM_MOVEABLE still need to be locked/unlocked but getting/setting data on the clipboard is about the only place you&#8217;d typically run into that.</p>
<p>And memory fragmentation is a far, far, faaaar lesser issue than the complexity of having to use descriptors/selectors and locking/unlocking for everything. I think there are better ways to reduce (if not solve) fragmentation with better trade-offs which don&#8217;t involve making every memory access ridiculously complex and error prone.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829673">
				<div id="div-comment-829673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Csaboka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829673">
			May 2, 2010 at 1:52 pm</a>		</div>

		<p>@640k: I think you are trying to reinvent managed memory (possibly without the automatic garbage collection). Virtually all GC systems compact the heap automatically, so you don&#8217;t need to worry about heap fragmentation in a managed memory environment.</p>
<p>If you choose to use manual memory management, you must be willing to handle all the complexities that come with that. You can&#8217;t just blame the OS because it doesn&#8217;t do your job for you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-829693">
				<div id="div-comment-829693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829693">
			May 2, 2010 at 4:44 pm</a>		</div>

		<p>I think 640k&#8217;s posts are meant to be jokes&#8230; I mean, suggesting we go back to the 16-bit memory model, &quot;please fix this for Windows 2010&quot;, etc.</p>
<p>Maybe I&#8217;m being generous?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-829813">
				<div id="div-comment-829813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100430-00/?p=14203#comment-829813">
			May 3, 2010 at 10:15 am</a>		</div>

		<p>@640k: &nbsp;Why would you have to &quot;translate all addresses several times&quot;? &nbsp;Isn&#8217;t once enough?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

