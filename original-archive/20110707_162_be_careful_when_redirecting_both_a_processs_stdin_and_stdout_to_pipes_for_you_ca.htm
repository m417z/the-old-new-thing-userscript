<html>
<head>
<title>Be careful when redirecting both a process's stdin and stdout to pipes, for you can easily deadlock</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Be careful when redirecting both a process&#8217;s stdin and stdout to pipes, for you can easily deadlock</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 7, 2011 / year-entry #163</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A common problem when people create a process and redirect both stdin and stdout to pipes is that they fail to keep the pipes flowing. Once a pipe clogs, the disturbance propagates backward until everything clogs up. Here is a common error, in pseudocode: // Create pipes for stdin and stdout CreatePipe(&hReadStdin, &hWriteStdin, NULL, 0);...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A common problem when people create a process and redirect
both stdin and stdout to pipes is that they fail to keep the pipes flowing.
Once a pipe clogs, the disturbance propagates backward until everything
clogs up.
</p>
<p>
Here is a common error, in pseudocode:
</p>
<pre>
// Create pipes for stdin and stdout
CreatePipe(&amp;hReadStdin, &amp;hWriteStdin, NULL, 0);
CreatePipe(&amp;hReadStdout, &amp;hWriteStdout, NULL, 0);

// hook them up to the process we're about to create
startup_info.hStdOutput = hWriteStdout;
startup_info.hStdInput = hReadStdin;

// create the process
CreateProcess(...);

// write something to the process's stdin
WriteFile(hWriteStdin, ...);

// read the result from the process's stdout
ReadFile(hReadStdout, ...);
</pre>
<p>
You see code like this
<a HREF="http://msdn.microsoft.com/en-us/library/ms682499.aspx">
all over the place</a>.
I want to generate some input to a program and capture the output,
so I pump the input as the process's stdin and read the output
from the process's stdout.
What could possibly go wrong?
</p>
<p>
This problem is well-known to unix programmers,
but it seems that the knowledge hasn't migrated to Win32 programmers.
(Or .NET programmers, who also encounter this problem.)
</p>
<p>
Recall how anonymous pipes work.
(Actually, this description is oversimplified,
but it gets the point across.)
A pipe is a marketplace
for a single commodity: Bytes in the pipe.
If there is somebody selling bytes (<code>Write&shy;File</code>),
the seller waits until there is a buyer (<code>Read&shy;File</code>).
If there is somebody looking to buy bytes,
then the buyer waits until there is a seller.
</p>
<p>
In other words,
when somebody writes to a pipe,
the call to <code>Write&shy;File</code> waits until
somebody issues a <code>Read&shy;File</code>.
Conversely, when somebody reads from a pipe,
the call to <code>Read&shy;File</code> waits until somebody
calls <code>Write&shy;File</code>.
When there is a matching read and write, the bytes are
transferred from the writer's buffer to the reader's buffer.
If the reader asks for fewer bytes than the writer provided,
then the writer continues waiting until all the bytes have been read.
(On the other hand, if the writer provides fewer bytes than the
reader requested, the reader is given a partial read.
Yes, there's asymmetry there.)
</p>
<p>
Okay, so where's the deadlock in the above code fragment?
We write some data into one pipe (connected to a process's stdin)
and then read from another pipe (connected to a process's stdout).
For example, the program might take some input, do some transformation
on it, and print the result to stdout.
Consider:
</p>
<table BORDER=0>
<tr>
<th>You</th>
<th>Helper</th>
</tr>
<tr>
<td><code>WriteFile(stdin, "AB")</code></td>
</tr>
<tr>
<td>(waits for reader)</td>
</tr>
<tr>
<td></td>
<td><code>ReadFile(stdin, ch)</code></td>
</tr>
<tr>
<td></td>
<td>reads <code>A</code></td>
</tr>
<tr>
<td>(still waiting since not all data read)</td>
</tr>
<tr>
<td></td>
<td>encounters errors</td>
</tr>
<tr>
<td></td>
<td><code>WriteFile(stdout,
      "Error: Widget unavailable\r\n")</code></td>
</tr>
<tr>
<td></td>
<td>(waits for reader)</td>
</tr>
</table>
<p>
And now we're deadlocked.
Your process is waiting for the helper process to finish reading
all the data you wrote
(specifically, waiting for it to read <code>B</code>),
and the helper process is waiting for your process to finish
reading the data it wrote to its stdout (specifically,
waiting for you to read the error message).
</p>
<p>
There's a feature of pipes that can mask this problem for a long time:
Buffering.
</p>
<p>
The pipe manager might decide that when somebody offers
some bytes for sale,
instead of making the writer wait for a reader to arrive,
the pipe manager will be a market-maker and <i>buy the bytes himself</i>.
The writer is then unblocked and permitted to continue execution.
Meanwhile, when a reader finally arrives, the request is
satisfied from the stash of bytes the pipe manager had previously
bought.
(But the pipe manager doesn't take a 10% cut.)
</p>
<p>
Therefore,
the error case above happens to work, because the buffering
has masked the problem:
</p>
<table BORDER=0>
<tr>
<th>You</th>
<th>Helper</th>
</tr>
<tr>
<td><code>WriteFile(stdin, "AB")</code></td>
</tr>
<tr>
<td>pipe manager accepts the write</td>
</tr>
<tr>
<td><code>ReadFile(stdout, result)</td>
</tr>
<tr>
<td>(waits for read)</td>
</tr>
<tr>
<td></td>
<td><code>ReadFile(stdin, ch)</code></td>
</tr>
<tr>
<td></td>
<td>reads <code>A</code></td>
</tr>
<tr>
<td></td>
<td>encounters errors</td>
</tr>
<tr>
<td></td>
<td><code>WriteFile(stdout,
      "Error: Widget unavailable\r\n")</code></td>
</tr>
<tr>
<td>Read completes</td>
</tr>
</table>
<p>
As long as the amount of unread data in the pipe is
within the budget of the pipe manager,
the deadlock is temporarily avoided.
Of course, that just means it will
show up later under harder-to-debug situations.
(For example, if the program you are driving prints a prompt
for each line of input,
then the problem won't show up until you give the program a large
input data set: For small data sets, all the prompts will fit in
the pipe buffer, but once you hit the magic number,
the program hangs because the pipe is waiting for you to drain
all those prompts.)
</p>
<p>
To avoid this problem,
your program needs to keep reading from stdout
while it's writing to stdin,
so that neither will block the other.
The easiest way to do this is to perform the two operations
on separate threads.
</p>
<p>
<!-- forwardref -->
Next time</a>, another common problem with pipes.
</p>
<p>
<b>Exercise</b>:
A customer reported that this function would sometimes hang
waiting for the process to exit.
Discuss.
</p>
<pre>
int RunCommand(string command, string commandParams)
{
 var info = new ProcessStartInfo(command, commandParams);
 info.UseShellExecute = false;
 info.RedirectStandardOutput = true;
 info.RedirectStandardError = true;
 var process = Process.Start(info);
 while (!process.HasExited) Thread.Sleep(1000);
 return process.ExitCode;
}
</pre>
<p>
<b>Exercise</b>:
Based on your answer to the previous exercise, the customer
responds,
"I added the following code, but the problem persists."
Discuss.
</p>
<pre>
int RunCommand(string command, string commandParams)
{
 var info = new ProcessStartInfo(command, commandParams);
 info.UseShellExecute = false;
 info.RedirectStandardOutput = true;
 info.RedirectStandardError = true;
 var process = Process.Start(info);
 <font COLOR=blue>var reader = Process.StandardOutput;
 var results = new StringBuilder();
 string lineOut;
 while ((lineOut = reader.ReadLine()) != null) {
  results.AppendLine("STDOUT: " + lineOut);
 }
 reader = Process.StandardError;
 while ((lineOut = reader.ReadLine()) != null) {
  results.AppendLine("STDERR: " + lineOut);
 }</font>
 while (!process.HasExited) Thread.Sleep(1000);
 return process.ExitCode;
}
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-923113">
				<div id="div-comment-923113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923113">
			July 7, 2011 at 7:19 am</a>		</div>

		<p>The exercise answer is simple:</p>
<p>There is no rule that the writes will all first be to one pipe and then to the other. Disregarding the buffer, an example situation is like this:</p>
<p>Write to stdout.</p>
<p>Stdout is read.</p>
<p>Write to stderr.</p>
<p>Stderr is read.</p>
<p>Write to stdout.</p>
<p>No more reading of any of the pipes, deadlock.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923133">
				<div id="div-comment-923133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923133">
			July 7, 2011 at 7:43 am</a>		</div>

		<p>Simultaneously reading from a child process&#39;s stdout and stderr without the possibility of deadlock is tricky. &nbsp;One option is to use multiple threads. &nbsp;Another option is to use a named pipe opened with FILE_FLAG_OVERLAPPED (overlapped operations are not supported by anonymous pipes) and use asynchronous ReadFile calls along with WaitForMultipleObjects. &nbsp;Neither option is trivial.</p>
<p>Unix programmers would use select(2)/poll(2).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-923173">
				<div id="div-comment-923173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Torben Nehmer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923173">
			July 7, 2011 at 8:52 am</a>		</div>

		<p>You should be able to avoid a deadlock without threads by using PeekNamedPipe, which according to MSN allows a peek into anonymous pipes as well (despite the name). Haven&#39;t tested it yet though. However, in combination with writing to the processes stdin it is quite tricky to get things right without a deadlock (if not impossible as you cannot peek into the pipes buffer as far as i know). I am currently dealing with a situation like this in Axapta 3.0, which doesn&#39;t support sane multi-threading making things &#8211; well &#8211; interesting to say the least&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923183">
				<div id="div-comment-923183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923183">
			July 7, 2011 at 8:53 am</a>		</div>

		<p>On Unix this is solved with SIGALRM, select or poll.</p>
<p>It could also be solved easily with some sort of ReadFileTimeout function or WaitForSingleObject/WaitForMultipleObjects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-923223">
				<div id="div-comment-923223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923223">
			July 7, 2011 at 9:42 am</a>		</div>

		<p>This may be too simple an answer which may well be mocked.</p>
<p>Exercise 1 &#8211; it&#39;s hanging because the process is waiting for input. &nbsp;And since you&#39;ve redirected stdout/err, you never know it is waiting&#8230; you just get a blinky cursor. &nbsp;So you should see what is actually being generated and process it accordingly.</p>
<p>-customer attempts to follow the advice-</p>
<p>Exercise 2 &#8211; The bytes in stdout are emptied and the bytes in stderr are emptied before the condition occurs that requires attention. &nbsp;All you&#39;ve done is, well, nothing. &nbsp;And you fall back into the same condition in Exercise 1.</p>
<p>-customer realizes theyre going about the problem the wrong way and cleans their act up-</p>
<p>Maybe thats just wishful speculation though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923263">
				<div id="div-comment-923263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">problem solved</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923263">
			July 7, 2011 at 11:02 am</a>		</div>

		<p>Solution: Increase buffer size until bugs go away.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-923303">
				<div id="div-comment-923303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Kelly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923303">
			July 7, 2011 at 11:21 am</a>		</div>

		<p>Exercise #1: If the program being created writes enough data to the standard output/error to exceed the pipe buffers then there will be a deadlock. The helper program will be waiting for the spawning program to read the data, while the spawning program will be waiting for the helper program to exit.</p>
<p>Exercise #2: The MSDN points out this specific problem. If the helper program writes enough to the standard error stream to exceed the pipe buffers then a deadlock will occur. The helper program will be stuck waiting for the spawning program to read from standard error, but the spawning program will be waiting for the program to write to standard output or close the pipes/exit.</p>
<p>MSDN points out that you can use the asynchronous methods BeginOutputReadLine or BeginErrorReadLine of the Process class to solve this issue, by asynchronously reading one stream and synchronously reading the other. (You can also asynchronously read both or put synchronously read both in separate threads)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923343">
				<div id="div-comment-923343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Timothy Byrd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923343">
			July 7, 2011 at 1:37 pm</a>		</div>

		<p>Raymond &#8211; thanks for the stock market analogy. It made me smile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-923363">
				<div id="div-comment-923363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GSerg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923363">
			July 7, 2011 at 1:56 pm</a>		</div>

		<blockquote><p>
  CreatePipe(&amp;hReadStdin, &amp;hWriteStdin, NULL, 0);
</p></blockquote>
<p>Surely, SECURITY_ATTRIBUTES cannot be null? Otherwise the pipe handle will not be inherited by the child process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923383">
				<div id="div-comment-923383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923383">
			July 7, 2011 at 2:23 pm</a>		</div>

		<p>For once I can solve the exercises, but it looks like Ian got the correct answers first.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-923453">
				<div id="div-comment-923453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923453">
			July 8, 2011 at 1:13 am</a>		</div>

		<p>Stupid software apparently ate my comment, since I got no confirmation message. And of course, clicking &quot;back&quot; gives you only a blank field&quot;. Anyway:</p>
<p>The worst part about polling is that pipes are not listed as supporting wait functions ( <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms687032(VS.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms687032(VS.85).aspx</a> ).</p>
<p>At least now we can always use PeekNamedPipe(), since Win9x is more or less gone and even named pipes are implemented with anonymous pipes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923463">
				<div id="div-comment-923463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923463">
			July 8, 2011 at 3:45 am</a>		</div>

		<p>If he doesn&#39;t want the output of the process, why doesn&#39;t he redirect its output to NUL and/or start the process in a detached console?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-923483">
				<div id="div-comment-923483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leo Davidson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923483">
			July 8, 2011 at 5:44 am</a>		</div>

		<p>PeekNamedPipe is virtually useless.</p>
<p>How do you know when to call it?</p>
<p>If you use a separate event (or other synchronization object), you might as well use that to signal when it&#39;s time to do a normal read of the pipe.</p>
<p>If you don&#39;t, you end up polling, which is terrible.</p>
<p>It really should be possible to pass pipe handles to the wait functions. Overlapped I/O is ridiculously difficult to get right if you work through all the possible cases (as Raymond has discussed in the past), unless you cheat and only read one character at a time or something.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923503">
				<div id="div-comment-923503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923503">
			July 8, 2011 at 7:02 am</a>		</div>

		<p>@Medinoc: Actually, it&#39;s the other way around. &nbsp;According to the docs for CreatePipe, &quot;Anonymous pipes are implemented using a named pipe with a unique name. Therefore, you can often pass a handle to an anonymous pipe to a function that requires a handle to a named pipe.&quot;</p>
<p>And yes, it&#39;s incredibly annoying that the blog software eats comments if you don&#39;t submit them within X seconds of loading the page, for some absurdly small value of X. &nbsp;I sincerely hope somebody&#39;s informed the MSDN blogs folks about this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-923523">
				<div id="div-comment-923523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923523">
			July 8, 2011 at 7:43 am</a>		</div>

		<p>@Adam Rosenfield: Damn, I have dyslexia today. You&#39;re right, absolutely right, it&#39;s what I was trying to say in the first place.</p>
<p>About the comment eating part, I think it&#39;s linked to that captcha thing that used to be visible on the page: It&#39;s invisible now, but it guess it&#39;s that part that expires.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923583">
				<div id="div-comment-923583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923583">
			July 8, 2011 at 12:20 pm</a>		</div>

		<p>The list of objects that MSDN says WaitForSingleObject can wait on is not an exhaustive list. For example, file handles are waitable yet not on the list. So it&#39;s quite likely that named pipes are perfectly acceptable to wait on too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-923623">
				<div id="div-comment-923623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leo Davidson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923623">
			July 8, 2011 at 10:29 pm</a>		</div>

		<p>@Gabe: File handles are only waitable in very specific, limited situations involving overlapped I/O, where you can already tie an event to the operation anyway.</p>
<p><a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/775014/waitforsingleobject-on-a-file-handle" rel="nofollow">stackoverflow.com/&#8230;/waitforsingleobject-on-a-file-handle</a></p>
<p>As for pipes, if they even are waitable handles, I would not use them in a wait call without knowing what their wait semantics are (i.e. when they become signalled/unsignalled). You&#39;d have to make an awful lot of assumptions to use them, and it&#39;d be behaviour which could change.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923633">
				<div id="div-comment-923633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mixedup</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110707-00/?p=10223#comment-923633">
			July 10, 2011 at 9:50 am</a>		</div>

		<p>Do the customers really bother you with such a simple things?!? In my project it took me a second to think &quot;gosh that&#39;ll deadlock for sure&quot; and think about asynchrony.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

