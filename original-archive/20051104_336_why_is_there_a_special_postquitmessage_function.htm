<html>
<head>
<title>Why is there a special PostQuitMessage function?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why is there a special PostQuitMessage function?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 4, 2005 / year-entry #337</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20051104-33/?p=33453</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Why is there a special PostQuitMessage function? Because it's not really a posted message. Commenter A. Skrobov asked, "What's the difference between PostQuitMessage and PostThreadMessage(GetCurrentThreadId, WM_QUIT)?" They are not equivalent, though they may look that way at first glance. The differences are subtle but significant. Like the WM_PAINT, WM_MOUSEMOVE, and WM_TIMER messages, the WM_QUIT message...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Why is there a special PostQuitMessage function? Because it's not really a posted message.</p>
<p> Commenter A. Skrobov asked, "<a href="http://blogs.msdn.com/oldnewthing/archive/2005/02/22/378018.aspx#378042">What's the difference</a> between <code> <a href="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/messagesandmessagequeues/messagesandmessagequeuesreference/messagesandmessagequeuesfunctions/postquitmessage.asp"> PostQuitMessage</a></code> and <code> <a href="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/messagesandmessagequeues/messagesandmessagequeuesreference/messagesandmessagequeuesfunctions/postthreadmessage.asp"> PostThreadMessage</a>(GetCurrentThreadId, WM_QUIT)</code>?" </p>
<p> They are not equivalent, though they may look that way at first glance. The differences are subtle but significant. </p>
<p> Like the <code>WM_PAINT</code>, <code>WM_MOUSEMOVE</code>, and <code>WM_TIMER</code> messages, the <code>WM_QUIT</code> message is not a "real" posted message. Rather, it is one of those messages that the system generates <strong>as if</strong> it were posted, even though it wasn't. And like the other messages, the <code>WM_QUIT</code> message is a "low priority" message, generated only when the message queue is otherwise empty. </p>
<p> When a thread calls <code>PostQuitMessage</code>, a flag in the queue state is set that says, "If somebody asks for a message and there are no posted messages, then manufacture a <code>WM_QUIT</code> message." This is just like the other "virtually posted" messages. <code>WM_PAINT</code> messages are generated on demand if there are any invalid regions, <a href="http://blogs.msdn.com/oldnewthing/archive/2003/10/01/55108.aspx"> <code>WM_MOUSEMOVE</code> messages are generated on demand if the mouse has moved since the last time you checked</a>, and <code>WM_TIMER</code> messages are generated on demand if there are any due timers. And since the message is "virtually posted", multiple calls coalesce, in the same way that multiple paint messages, multiple mouse motions, and multiple timer messages also coalesce. </p>
<p> Why is <code>WM_QUIT</code> handled like a low-priority message? </p>
<p> Because the system tries not to inject a <code>WM_QUIT</code> message at a "bad time"; instead it waits for things to "settle down" before generating the <code>WM_QUIT</code> message, thereby reducing the chances that the program might be in the middle of a multi-step procedure triggered by a sequence of posted messages. </p>
<p> If you <code>PeekMessage(..., PM_NOREMOVE)</code> a <code>WM_QUIT</code> message, this returns a <code>WM_QUIT</code> message but does not clear the flag. The <code>WM_QUIT</code> message virtually "stays in the queue". </p>
<p> As another special behavior, the generated <code>WM_QUIT</code> message bypasses the message filters passed to the <code>GetMessage</code> and <code>PeekMessage</code> functions. If the internal "quit message pending" flag is set, then you will get a <code>WM_QUIT</code> message once the queue goes quiet, regardless of what filter you pass. </p>
<p> By comparison, <code>PostThreadMessage</code> just places the message in the thread queue (for real, not virtually), and therefore it does not get any of the special treatment that a real <code>PostQuitMessage</code> triggers. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-319003">
				<div id="div-comment-319003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051104-33/?p=33453#comment-319003">
			November 4, 2005 at 10:36 am</a>		</div>

		<p>There is at least one more reason. PostQuitMessage, IIRC, was supported in Win16, and threads only appeared in Win32.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-319053">
				<div id="div-comment-319053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.mutexed.com' rel='external nofollow' class='url'>Jeremy Boschen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051104-33/?p=33453#comment-319053">
			November 4, 2005 at 1:40 pm</a>		</div>

		<p>So is it then not a great idea to use PostThreadMessage(id, WM_QUIT) from a different thread? Not that it would be much trouble to post a custom message that called PostQuitMessage() when handled but I know I&#8217;ve used and have seen code that uses PostThreadMessage(WM_QUIT) to shutdown a message based thread queue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-319073">
				<div id="div-comment-319073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://cs.usu.edu.ru/home/skrobov/' rel='external nofollow' class='url'>A. Skrobov</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051104-33/?p=33453#comment-319073">
			November 4, 2005 at 2:12 pm</a>		</div>

		<p>To Centaur: before Win32, the function to post a &#8216;thread message&#8217; was called &quot;PostAppMessage&quot;, and took an hTask as parameter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-319253">
				<div id="div-comment-319253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051104-33/?p=33453#comment-319253">
			November 6, 2005 at 1:47 am</a>		</div>

		<p>I suppose a general solution would be a priority parameter for PostThreadMessage().  Then you could post any message (not just WM_QUIT) as a message that doesn&#8217;t get sent until the queue dies down.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-319323">
				<div id="div-comment-319323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051104-33/?p=33453#comment-319323">
			November 6, 2005 at 11:21 pm</a>		</div>

		<p>Now I&#8217;m more confused on this issue than I used to be.  I can think of two occasions when we want an application to quit:<br />
<br />(1)  The user is telling the application to quit.  (This includes the user logging off or whatever, actions which include telling applications to quit.)<br />
<br />(2)  The application detects something to make it know it wants to quit.</p>
<p>I would figure that in either of these cases, we don&#8217;t want to wait for the queue to quiet down.  We want each thread to figure out what kind of cleanup it has to do, and do the cleanup, not execute a bunch of attempted operations that should now be aborted or ignored.  What is the purpose in waiting for the queue to quiet down?</p>
<p>Also what should programmers do in cases when we know we don&#8217;t want to wait for the queue to quiet down?  The only use I&#8217;ve seen for this so far is when a application is starting up and we detect some situation in which we want to display a message box, and exit after the user clicks OK (instead of proceeding to handle ordinary messages).  There could be other uses that I haven&#8217;t seen.  It seems that both PostQuitMessage and ordinary Post___Message(___, WM_QUIT) aren&#8217;t the recommended way to do it, so what should we do?</p>
<p>Also why isn&#8217;t there a CWnd::PostQuitMessage()?  (I think I&#8217;m not the first person to ask this question.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-319343">
				<div id="div-comment-319343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051104-33/?p=33453#comment-319343">
			November 7, 2005 at 3:46 am</a>		</div>

		<p>1. If (the user or the programmer)  wants an application to quit, send its windows &quot;WM_CLOSE&quot; messages.</p>
<p>2. If the application really wants to quit *now*, ExitProcess() is a quick way out.</p>
<p>3. There is no CWnd::PostQuitMessage() because WM_QUIT messages are posted to the thread, not a window. </p>
<p>The real question is, why is there no &quot;PostThreadQuitMessage(DWORD threadId)&quot;. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-319643">
				<div id="div-comment-319643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael J.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051104-33/?p=33453#comment-319643">
			November 7, 2005 at 9:26 pm</a>		</div>

		<p>I hope this is related: I always wanted to know why Windows apps cannot be terminated using Ctrl+Break like most DOS apps? Well, I can see theat in Win16 this would leave some resources hanging around. But for Win32 resources should be cleaned up pretty robustly if an app goes down, so why not?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-319603">
				<div id="div-comment-319603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051104-33/?p=33453#comment-319603">
			November 7, 2005 at 8:31 pm</a>		</div>

		<p>Monday, November 07, 2005 3:46 AM by Chris Becke<br />
<br />&gt; 1. If (the user or the programmer) wants<br />
<br />&gt; an application to quit, send its windows<br />
<br />&gt; &quot;WM_CLOSE&quot; messages.</p>
<p>When the user clicks to close a window, that window gets the WM_CLOSE but the application&#8217;s other windows don&#8217;t.</p>
<p>&gt; 2. If the application really wants to quit<br />
<br />&gt; *now*, ExitProcess() is a quick way out.</p>
<p>You&#8217;re right.  For some reason I forgot that, despite the dangers of TerminateProcess(), ExitProcess() is safe.</p>
<p>&gt; 3. There is no CWnd::PostQuitMessage()<br />
<br />&gt; because WM_QUIT messages are posted to the<br />
<br />&gt; thread, not a window.</p>
<p>Hmm, I wonder if I&#8217;ve seen that answer before and forgotten (since I&#8217;m pretty sure I&#8217;ve seen others ask the same question I asked).  So, when I called CWnd::PostMessage(___, WM_QUIT), the fact that it happened to work is an unfortunate accident.  I should call ExitProcess().</p>
<p>But in turn that raises the question, why is there an AfxAbort() function for catastrophic termination but no AfxQuit() for normal-but-speedy termination.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-320273">
				<div id="div-comment-320273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051104-33/?p=33453#comment-320273">
			November 10, 2005 at 5:43 am</a>		</div>

		<p>&#8230; because most people wouldn&#8217;t want that?</p>
<p>I presume you mean for it to terminate an application only under certain conditions?</p>
<p>So my questions:</p>
<p>* Why isn&#8217;t any of this mentioned in the PostQuitMessage documentation?  The documentation recommends to use PostQuitMessage over WM_QUIT but offers no rationale why. (And yes, I&#8217;m aware that you don&#8217;t have direct control over the documentation.  But really, rather than having many Microsoft employees writing weblog posts about Windows API minutiae, maybe all your webloggers should just take over/threaten/bribe the documentation group&#8230;)</p>
<p>* Can user messages get similar wait-till-things-die-down behavior?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-321003">
				<div id="div-comment-321003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051104-33/?p=33453#comment-321003">
			November 10, 2005 at 5:04 pm</a>		</div>

		<p>Exactly how do you propose that I take over/threaten/bribe the documentation group? (The documentation group relies on the development teams to provide the technical information in the first place; it&#8217;s not like they can just write the docs without any help. And I suspect they have higher priorities than touching up ancient Win32 documentation.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-321183">
				<div id="div-comment-321183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051104-33/?p=33453#comment-321183">
			November 10, 2005 at 11:18 pm</a>		</div>

		<p>I don&#8217;t know.  Ask nicely? =)</p>
<p>Alas, writing documentation is never anyone&#8217;s priority, but it needs to be done. (And surely you have higher priorities than writing weblog entries and responding to inane comments, but yet you do. =) )</p>
<p>Maybe in the same vein as the month-where-everyone-focuses-on-security-issues, there could be a week where everyone focuses on improving the documentation?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-579243">
				<div id="div-comment-579243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/agujjar/archive/2007/12/20/webbrowser-control-bug-in-compact-framework-for-wm-standard-device.aspx' rel='external nofollow' class='url'>Grounded in Mobility</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051104-33/?p=33453#comment-579243">
			December 20, 2007 at 10:21 am</a>		</div>

		<p>Here&#8217;s the scenario &#8211; You have a form (StartForm) which has a sub-form (subForm) that contains a WebBrowser</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

