<html>
<head>
<title>The clipboard viewer linked list is no longer the responsibility of applications to maintain, unless they want to</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The clipboard viewer linked list is no longer the responsibility of applications to maintain, unless they want to</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 19, 2011 / year-entry #224</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Commenter Nice Clipboard Manager (with drop->clipboard) wonders why Windows still uses a linked list to inform programs about clipboard modifications. If any clipboard viewer fails to maintain the chain, then some windows won't get informed of the change, and if a clipboard viewer creates a loop in the chain, an infinite loop results. Well, sure,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Commenter
Nice Clipboard Manager (with drop-&gt;clipboard)
wonders
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2010/05/10/10009448.aspx#10010459">
why Windows still uses a linked list to inform programs about
clipboard modifications</a>.
If any clipboard viewer fails to maintain the chain,
then some windows won't get informed of the change,
and if a clipboard viewer creates a loop in the chain,
an infinite loop results.
</p>
<p>
Well, sure, that's what happens if you use the old clipboard viewer
chain.
So don't use it.
The old clipboard viewer chain remains for backward compatibility,
but it's hardly the best way to monitor the clipboard.
(This is another example of people
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/01/16/9322645.aspx#9330873">
asking for a feature that already exists</a>.)
</p>
<p>
Instead of using the clipboard viewer chain, just add yourself
as a clipboard format listener via
<code>AddClipboardFormatListener</code>.
Once you've done that, the system will post you a
<code>WM_CLIPBOARDUPDATE</code> message when the contents of the
clipboard have changed, and you can respond accordingly.
When you're done,
call <code>RemoveClipboardFormatListener</code>.
</p>
<p>
By using the clipboard format listener model, you
let Windows worry
about keeping track of all the people who are monitoring the clipboard,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/07/20/10040074.aspx#10040587">
as Clipboarder Gadget suggested</a>.
(Mind you, Windows doesn't go so far as making each clipboard viewer
think that it's the only viewer in the chain,
because there may be applications which break the chain on purpose.
Changing the chain behavior will break compatibility with those
applications.)
</p>
<p>
Let's turn our
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/07/23/54576.aspx">
scratch program</a> into a clipboard format listener.
</p>
<pre>
void
SniffClipboardContents(HWND hwnd)
{
 SetWindowText(hwnd, IsClipboardFormatAvailable(CF_TEXT)
             ? TEXT("Has text") : TEXT("No text"));
}

BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
 <font COLOR=blue>SniffClipboardContents(hwnd); // set initial title
 return AddClipboardFormatListener(hwnd);</font>
}

void
OnDestroy(HWND hwnd)
{
 <font COLOR=blue>RemoveClipboardFormatListener(hwnd);</font>
 PostQuitMessage(0);
}

... add to window procedure ...

 <font COLOR=blue>case WM_CLIPBOARDUPDATE: SniffClipboardContents(hwnd); break;</font>
</pre>
<p>
And that's it.
Much, much simpler than writing a clipboard viewer,
and much more robust since you aren't dependent on other
applications not screwing up.
</p>
<p>
There's another alternative to registering a clipboard listener
and that's using the clipboard sequence number.
The window manager increments the clipboard sequence number
each time the contents of the clipboard change.
You can compare the sequence number from two points in time to
determine whether the contents of the clipboard have changed while
you weren't looking.
</p>
<p>
Now you have a choice.
Do you use the notification method (clipboard format listener)
or the polling method (clipboard sequence number)?
The notification method is recommended if you want
to do something as soon as the clipboard contents change.
On the other hand, the polling method is more suitable if you
perform calculations based on the clipboard contents and cache
the results, and then later you want to verify that your
cached results are still valid.
</p>
<p>
For example, suppose you have a program with a Paste function,
and pasting from the clipboard involves creating a complex
data structure based on the clipboard contents.
The user clicks Paste, you create your complex data structure,
and insert it into the document.
Your research discovers that a common operation is pasting the same
contents several times.
To optimize this, you want to cache the complex data structure
so that if the user clicks Paste five times in a row,
you only have to build the complex data structure the first time
and you can just re-use it the other four times.
</p>
<pre>
void DocumentWindow::OnPaste()
{
 if (m_CachedClipboardData == NULL ||
     GetClipboardSequenceNumber() != m_SequenceNumberInCache) {
  delete m_CachedClipboardData;
  m_SequenceNumberInCache = GetClipboardSequenceNumber();
  m_CachedClipboardData = CreateComplexDataFromClipboard();
 }
 if (m_CachedClipboardData) Paste(m_CachedClipboardData);
}
</pre>
<p>
When the <code>OnPaste</code> method is called,
we see if we have clipboard data cached from last time.
If not, then clearly we need to create our complex data
structure from the clipboard.
If we do have clipboard data in our cache,
we see if the clipboard sequence number has changed.
If so, then the cached data is no longer valid and we have
to throw it away and create it from scratch.
But if we have cached data and the sequence number hasn't changed,
then the cache is still valid and we can avoid calling
<code>CreateComplexDataFromClipboard</code>.
</p>
<p>
The old clipboard viewer is like DDE:
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2007/02/26/1763683.aspx">
please feel free to stop using it</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-936013">
				<div id="div-comment-936013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-936013">
			September 19, 2011 at 8:01 am</a>		</div>

		<p>Of course, GetClipboardSequenceNumber() doesn&#39;t work if the clipboard provider is using delayed rendering &#8212; the clipboard has no way of knowing if and when the underlying data the provider uses to render the actual clipboard data changes</p>
<p>I suppose it could ask the provider to render the data on each call and do a memory comparison, but that would be rather ludicrous, since it completely defeats the purpose of delayed rendering (performance), and it turns a function that looks like it should just be a simple get of an integer stored in memory somewhere into a potentially complex and expensive operation.</p>
<div class="post">[<i>It is naturally the delayed-render provider&#39;s responsibility to do a new SetClipboardData if the underlying contents change. This was necessary even under the old model. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-936023">
				<div id="div-comment-936023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-936023">
			September 19, 2011 at 8:37 am</a>		</div>

		<p>[It is naturally the delayed-render provider&#39;s responsibility to do a new SetClipboardData if the underlying contents change. This was necessary even under the old model. -Raymond]</p>
<p>And I&#39;ll bet that at least one program has used it for region capture on a constantly changing area with the obvious consequences.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-936033">
				<div id="div-comment-936033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-936033">
			September 19, 2011 at 9:02 am</a>		</div>

		<p>Too bad AddClipboardFormatListener only works on Windows Vista &amp; up&#8230; &nbsp;Not an option for the rest of us who still have to support XP&#8230; &nbsp;(Maybe in a few years time we can refactor to use this new API after the rest of the world moves on?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-936043">
				<div id="div-comment-936043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-936043">
			September 19, 2011 at 10:15 am</a>		</div>

		<p>I wouldn&#39;t use GetClipboardSequenceNumber if I were you, it has a design flaw in that it will break if the user copies exactly 4,294,967,296 times before pasting!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-936053">
				<div id="div-comment-936053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-936053">
			September 19, 2011 at 12:18 pm</a>		</div>

		<p>Raymond, it would have been polite to mention in the article that AddClipboardFormatListener isn&#39;t available in Windows XP, and hence cannot be used in most software.</p>
<div class="post">[<i>The question was &quot;Why is there still no way to X?&quot; The use of &quot;still&quot; means that this was a &quot;It&#39;s already 2010 and you idiots haven&#39;t fixed X&quot;-type question. Answer: &quot;This was fixed in 2007.&quot; If the question were &quot;Why is there still no way to X with Windows&nbsp;XP?&quot; then the answer is &quot;Because time travel has not been perfected.&quot; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-936063">
				<div id="div-comment-936063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-936063">
			September 19, 2011 at 12:31 pm</a>		</div>

		<p>Raymond:</p>
<p>Before you throw a fit at the comments again (j/k): They&#39;re teasing/trolling, we do appreciate your articles.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-936083">
				<div id="div-comment-936083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-936083">
			September 19, 2011 at 10:10 pm</a>		</div>

		<p>Don&#39;t see problem with new API &#8211; simply if(ver&gt;) else&#8230;</p>
<p>Or at least #if and then making two different binaries&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-936103">
				<div id="div-comment-936103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-936103">
			September 19, 2011 at 11:29 pm</a>		</div>

		<p>@TC:</p>
<p>There isn&#39;t really a race condition there. The user issued a paste command, and we&#39;re pasting on data based on the contents of the clipboard at the time the paste command was issued.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-936093">
				<div id="div-comment-936093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-936093">
			September 19, 2011 at 11:09 pm</a>		</div>

		<p>Is there a timing issue there? Couldn&#39;t you get interrupted just before:</p>
<p>&nbsp; if (m_CachedClipboardData) Paste(m_CachedClipboardData);</p>
<p>by someone who changes the clipboard data &#8211; *after* you&#39;ve decided that it *hasn&#39;t* changed?</p>
<div class="post">[<i>This problem isn&#39;t new to GetClipboardSequenceNumber. Solving it is left as an exercise. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-936113">
				<div id="div-comment-936113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-936113">
			September 19, 2011 at 11:53 pm</a>		</div>

		<p>@TC: Or, put another way, what happens? The user gets the old data. Which if it&#39;s changing so quickly that the interruption matters, the user probably won&#39;t notice.</p>
<p>Realistically, it will never happen since users are slow &#8211; they copy, switch, they paste. The only way otherwise is if some stupid thing (*cough* popular_cpu_hogging_browser_plugin *cough*) is spamming the clipboard with copy operations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-936143">
				<div id="div-comment-936143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xpclient</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-936143">
			September 20, 2011 at 7:37 am</a>		</div>

		<p>For XP, there is the older SetClipboardViewer API.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-936183">
				<div id="div-comment-936183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-936183">
			September 20, 2011 at 10:16 am</a>		</div>

		<p>@JamesJohnston: Where possible avoiding trouble by using new API? One less of collison between your programm and bad programm? (those bugs caused by externals can be quite problematic, so why not to avoid them on new systems and let those on old deal with that, if they don&#39;t want/can&#39;t upgrade)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-936123">
				<div id="div-comment-936123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-936123">
			September 20, 2011 at 5:36 am</a>		</div>

		<p>&quot;The old clipboard viewer is like DDE: please feel free to stop using it.&quot;</p>
<p>Seems that some people took that *too* seriously. </p>
<p>-Hey, we have this old app using the pre-Vista clipboard API</p>
<p>-We shouldn&#39;t use that anymore</p>
<p>clipbrd.exe is no longer available in Windows Vista</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-936133">
				<div id="div-comment-936133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-936133">
			September 20, 2011 at 7:36 am</a>		</div>

		<p>@Klimax: what&#39;s the point? &nbsp;If I have to do it the old way on Win XP, then why would I bother to then code a different way on Vista if the code for XP still works on newer Windows?</p>
<p>@TC: &nbsp;you could always just check the sequence number *again* after pasting to see if it changed, if it makes you feel better. &nbsp;If it changed, then go back and read the clipboard again. &nbsp;But what if it changed *again* after you checked the sequence number a second time? &nbsp;Worf probably has the right idea; it doesn&#39;t matter.</p>
<div class="post">[<i>Or solve the problem the same way you did under the old model: Open the clipboard before checking the sequence number. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-936643">
				<div id="div-comment-936643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-936643">
			September 22, 2011 at 7:20 am</a>		</div>

		<p>For the sake of completeness, the Ole clipboard API&#39;s also have an alternative to GetClipboardSequenceNumber, for the limited case where you want to know if your own application is still the clipboard source. &nbsp;After your app calls OleSetClipboard to place a data object, OleIsCurrentClipboard on that same pointer will tell you if your object is still there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-936843">
				<div id="div-comment-936843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Does not work</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-936843">
			September 23, 2011 at 4:21 am</a>		</div>

		<p>Unfortunatly, at least Windows 7 is not sending the WM_CLIPBOARDUPDATE message correctly.</p>
<p>I have updated my small application to use both the old or the new method to monitor the clipboard (depending on a switch), only to find out, that WM_CLIPBOARDUPDATE is not reliable.</p>
<p>My application has a debug window that displays the current Clipboard owner, the current Clipboard sequence number and all available Clipboard formats after each WM_CLIPBOARDUPDATE or WM_DRAWCLIPBOARD. When I start three instances of this program, and change the clipbaord by doing Ctrl+C in various application (especially in the Explorer), with the new method, all three programs see different states of the clipboard. Most notably, the list of available formats is different for all three instances, for example: 0, 2 and 7 formats. Even the sequence number can be different.</p>
<p>Conclusion: It need to be fixed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-936853">
				<div id="div-comment-936853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Does not work #2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-936853">
			September 23, 2011 at 4:57 am</a>		</div>

		<p>Further experimenting shows that one program using the new method is breaking all other programs in the same session that are also monitoring the clipbard, even if this other programs are using the old method. As soon as I terminate the new-method program, the others (still running) return to correct operation (once again, they are seeing the same state of the clipboard in terms of available formats and the sequence number).</p>
<p>Site note: The HWNDs returned by GetClipboardOwner are different in each process that processes WM_CLIPBOARDUPDATE or WM_DRAWCLIPBOARD. Strange.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-936963">
				<div id="div-comment-936963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-936963">
			September 23, 2011 at 1:25 pm</a>		</div>

		<p>[The question was &quot;Why is there still no way to X?&quot; The use of &quot;still&quot; means that this was a &quot;It&#39;s already 2010 and you idiots haven&#39;t fixed X&quot;-type question. Answer: &quot;This was fixed in 2007.&quot; If the question were &quot;Why is there still no way to X with Windows XP?&quot; then the answer is &quot;Because time travel has not been perfected.&quot; -Raymond]</p>
<p>Yea, I remember reading the &quot;I swear the xxx bug is fixed; it was fixed 4.5 years ago!&quot; blog articles from michkap about exactly this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-937043">
				<div id="div-comment-937043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-937043">
			September 24, 2011 at 11:52 am</a>		</div>

		<p>If the question were &quot;Why is there still no way to X with Windows XP?&quot; then the answer is &quot;Because time travel has not been perfected.&quot;</p>
<p>No, the answer is &quot;Because we don&#39;t backport things.&quot; &nbsp;No time machine is needed to release an update for Windows XP. &nbsp;New API functions were added via service backs for NT4 without creating any paradoxes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-937053">
				<div id="div-comment-937053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110919-00/?p=9613#comment-937053">
			September 24, 2011 at 7:41 pm</a>		</div>

		<p>Marc: Yes, and they still even recently sometimes add functions in hotfixes and even security updates, but they did not require major changes to the OS&#39;s architecture or anything like that.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

