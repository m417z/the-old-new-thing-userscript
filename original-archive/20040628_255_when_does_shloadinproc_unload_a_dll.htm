<html>
<head>
<title>When does SHLoadInProc unload a DLL?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When does SHLoadInProc unload a DLL?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 28, 2004 / year-entry #256</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040628-00/?p=38663</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The SHLoadInProc function instructs Explorer to create an instance of a particular CLSID. This causes the DLL responsible for that CLSID to be loaded. But when is it unloaded? This is one of those puzzles you should be able to figure out by thinking about it. Consider: The object is created by calling CoCreateInstance and...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The  <a href="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/functions/shloadinproc.asp">  SHLoadInProc</a>  function instructs Explorer to  create an instance of a particular CLSID.  This causes the DLL responsible for that CLSID to be loaded.</p>
<p>  But when is it unloaded?  </p>
<p>  This is one of those puzzles you should be able to figure out  by thinking about it.  </p>
<p>  Consider: The object is created by calling  <a href="http://msdn.microsoft.com/library/en-us/com/htm/cmf_a2c_1nad.asp">  CoCreateInstance</a>  and then immediately releasing the returned object.  That's all.  Explorer pays no attention to your DLL from then on.  </p>
<p>  With this hint, maybe now you can answer the question:  When is it unloaded?  </p>
<p>  Still don't know?  Here's another hint:  The issue is no longer a shell issue.  Now it's a COM issue.  </p>
<p>  When is <strong>any</strong> DLL loaded via  CoCreateInstance unloaded?  </p>
<p>  Answer: The DLL is periodically asked  <a href="http://msdn.microsoft.com/library/en-us/com/htm/cmf_d2l_531z.asp">  whether it is safe to unload</a>.  Once the DLL response in the affirmative (via S_OK), COM will unload it.  </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-188023">
				<div id="div-comment-188023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040628-00/?p=38663#comment-188023">
			June 28, 2004 at 7:03 am</a>		</div>

		<p>That&#8217;s not quite true &#8211; it actually waits 10 minutes AFTER you respond that it&#8217;s safe to unload.  The CoFreeUnusedLibraries API can force them to be unloaded.</p>
<p>I ran into this issue when stopping audiosrv on longhorn :)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-188053">
				<div id="div-comment-188053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040628-00/?p=38663#comment-188053">
			June 28, 2004 at 7:31 am</a>		</div>

		<p>Haha, I like how you make it seems like the answer is cut and dry, but yeah, the actual answer is &quot;whenever explorer feels like unloading it after DllCanUnloadNow.&quot;  Which is sensible enough, because if it was constantly loading and unloading context menu or icon shell extensions, that would be a performance nightmare.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-188063">
				<div id="div-comment-188063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Serge Wautier</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040628-00/?p=38663#comment-188063">
			June 28, 2004 at 7:48 am</a>		</div>

		<p>What&#8217;s the purpose of this function ? Why would one want the shell to create an object and then release it immediately ?</p>
<p>TIA for your lights.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-188103">
				<div id="div-comment-188103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeproject.com/script/articles/list_articles.asp?userid=152' rel='external nofollow' class='url'>Mike Dunn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040628-00/?p=38663#comment-188103">
			June 28, 2004 at 8:25 am</a>		</div>

		<p>Serge&gt; Getting a DLL into another process is the first step in spying on APIs, or subclassing windows, or other neat tricks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-188113">
				<div id="div-comment-188113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M Knight</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040628-00/?p=38663#comment-188113">
			June 28, 2004 at 9:02 am</a>		</div>

		<p>Larry Osterman &gt; That&#8217;s not quite true &#8211; it actually waits 10 minutes AFTER you respond that it&#8217;s safe to unload.</p>
<p>You can force windows to upload the DLL directly after instead of the ten minute wait.</p>
<p>I know this is supported in the Windows 9x line, but I&#8217;m not to sure if its officially supported under Windows 2000 and onwards.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-188143">
				<div id="div-comment-188143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040628-00/?p=38663#comment-188143">
			June 28, 2004 at 9:39 am</a>		</div>

		<blockquote><p>
  Why would one want the shell to create an object and then release it immediately ? </p>
<p>So that you can examine its unload behavior. Don&#8217;t want other stuff cluttering your view.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-188163">
				<div id="div-comment-188163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040628-00/?p=38663#comment-188163">
			June 28, 2004 at 9:50 am</a>		</div>

		<p>M Night: According to CoFreeUnusedLibrariesEx(<a target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/com/htm/cmf_a2c_19yw.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/com/htm/cmf_a2c_19yw.asp</a>), if the 10 minute delay wasn&#8217;t in place, there could be a deadlock.</p>
<p>Of course calling CoUninitialize for the last time in an apartment causes all the DLL&#8217;s loaded in that apartment to be unloaded, so&#8230;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-188183">
				<div id="div-comment-188183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.mvps.org/serenitymacros' rel='external nofollow' class='url'>David Candy</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040628-00/?p=38663#comment-188183">
			June 28, 2004 at 10:18 am</a>		</div>

		<p>I think M Knight is referring to the reg key for debugging to unload dll straight away </p>
<p>It is for system prior to 2000</p>
<p>Unloading the DLL<br />
<br />The Shell automatically unloads a DLL when the DLL&#8217;s usage count is zero, but only after the DLL has not been used for a period of time. This inactive period might be unacceptably long at times, especially when a Shell extension DLL is being debugged. For operating systems prior to Windows 2000, you can shorten the inactive period by adding the following information to the registry. </p>
<p>HKLM<br />
<br />   Software<br />
<br />      Microsoft<br />
<br />         Windows<br />
<br />            CurrentVersion<br />
<br />               Explorer<br />
<br />                  AlwaysUnloadDll </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-188223">
				<div id="div-comment-188223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040628-00/?p=38663#comment-188223">
			June 28, 2004 at 11:43 am</a>		</div>

		<p>A long time ago, the shell did its own COM activation of shell extensions instead of actually calling through to COM.  This caused no end of grief so they eventually fixed it.</p>
<p>I bet that this API is left over from the non-COM activation.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-188323">
				<div id="div-comment-188323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.valhallalegends.com' rel='external nofollow' class='url'>Skywing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040628-00/?p=38663#comment-188323">
			June 28, 2004 at 4:49 pm</a>		</div>

		<p>Presumably the dll&#8217;s reference count becomes positive again and it&#8217;s reused.</p>
<p>This optimization is probably why dlls aren&#8217;t unloaded instantly by COM in the first place&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-188293">
				<div id="div-comment-188293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040628-00/?p=38663#comment-188293">
			June 28, 2004 at 2:16 pm</a>		</div>

		<p>OK, but if COM waits 10 min. *AFTER* call DllCanUnloadNow() and then unloads the DLL, what will happens if one create another object from this DLL? </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-188423">
				<div id="div-comment-188423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom Mason</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040628-00/?p=38663#comment-188423">
			June 29, 2004 at 7:10 am</a>		</div>

		<p>This reminds me of a bug in ATL to do with window subclassing.</p>
<p>When an ATL based dll creates a control window using CContainedWindow or CWindowImpl<br />
<br />it registers a window class with an address for the windowproc but then fails to<br />
<br />unregister it when the window is destroyed. If a second dll is later loaded at<br />
<br />the same base address as the first and creates a window with the same class<br />
<br />name, the original windowproc address is not overwritten. This then caused an<br />
<br />access violation when windowproc was called at an invalid address, or more often in an unexpected bit of code. see MSDN KB article<br />
<br />Q248400 for more details. What made me think of this was that the bug only occured when the first DLL was unloaded and typically this happened whenever windows thought it would cause most confusion.</p>
<p>We solved this bug by adding a fix into atlwin.h to always unregister<br />
<br />window classes. IIRC the bug could also be avoided by linking to ATL.dll rather than by building in release min dependency because then the windowproc address for AtlAxWindow was always the same.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-191073">
				<div id="div-comment-191073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040628-00/?p=38663#comment-191073">
			July 6, 2004 at 10:18 am</a>		</div>

		<p>Larry Osterman: The way I read the description, the delay is recommended for compatibility with broken COM DLLs that lie and claim to be ready for unloading too early. There&#8217;s no inherent risk of deadlock (and if there was, merely delaying a bit surely wouldn&#8217;t eliminate it).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

