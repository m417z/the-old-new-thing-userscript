<html>
<head>
<title>Beware of the leaked image list when using the TVS_CHECKBOXES style</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Beware of the leaked image list when using the TVS_CHECKBOXES style</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 28, 2017 / year-entry #261</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171128-00/?p=97475</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It'll make one for you, but it's still on you to destroy it.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The <code>TVS_</code><code>CHECK&shy;BOXES</code> tree view style
is
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20171127-00/?p=97465">
quirky</a>,
which is a nice way of saying that it's crazy.
</p>
<p>
As we noted last time, the support for check boxes
was migrated in from external code, and it followed
the pattern for external code.
In particular, the state image list for the check boxes
needs to be manually destroyed,
because when you created the check boxes manually,
you also needed to clean them up.
</p>
<p>
Yes, this goes against the general principle that things
which were created by the control will be destroyed by
the control.
Like I said,
the <code>TVS_</code><code>CHECK&shy;BOXES</code> tree view style
is quirky.
And if you fail to accommodate this quirk,
<a HREF="http://memprofiler.com/articles/treeviewresourceleak.aspx">
you end up with a resource leak</a>.
</p>
<p>
MSDN suggests that you use the
<code>TVM_</code><code>GET&shy;IMAGE&shy;LIST</code>
message to retrieve the state image list,
and then use <code>Image&shy;List_</code><code>Destroy</code>
to destroy it.
I prefer to exchange the image list out by setting
the state image list to null,
then destroying the returned image list
(which is the previous image list).
This avoids dangling references to a destroyed image list,
and it also means that if somehow you try to clean up the
image lists twice, the second one will simply not do anything
since it won't see anything to clean up.
</p>
<p>
<pre>
ImageList_Destroy(TreeView_SetImageList(hwndTV, nullptr, TVSIL_STATE));
</pre>
<p>
We take advantage of the fact that the
<code>HIMAGELIST</code> parameter to
the <code>Image&shy;List_</code><code>Destroy</code> function
is marked <code>_In_opt_</code>,
which means that it is permissible to pass <code>nullptr</code>.
</p>
<p>
Okay, with these two common errors out of the way,
I'll continue next time by beginning our exploration of tree
view check boxes from the ground up.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1317135">
				<div id="div-comment-1317135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171128-00/?p=97475#comment-1317135">
			November 28, 2017 at 7:39 am</a>		</div>

		<p>I&#8217;m curious how code can just be migrated in to an operating system without any sort of QA associated with it?</p>
<p>At no stage no one reviewed this feature and suggested maybe it should be fixed to get rid of all these quirks before it shipped? Or is it just seen as easier/cheaper to make that the responsibility of every third-party developer in the world, forever?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1317155">
				<div id="div-comment-1317155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Devin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171128-00/?p=97475#comment-1317155">
			November 28, 2017 at 10:24 am</a>		</div>

		<p>@jon</p>
<p>That&#8217;s easy to say, but Windows has many millions of lines of code. It&#8217;s impossible to review everything for each release. Even for small products, it&#8217;s impractical to review everything whenever you want to release. Even then, once you see an issue, is it possible to fix it and be absolutely certain that your fix won&#8217;t have any side effects?</p>
<p>This gets compounded when you are talking about an API surface that is consumed by an unknown number of applications. If a quirk is known by developers, then they will have worked around it, or could even be relying on that quirk. Fixing that quirk could possibly cause more issues than it solves.</p>
<p>My experience in this industry is that developers are a cantankerous bunch, and hate anything new or different. They need to be coddled. This means years of deprecation warnings, gigabytes of documentation on how to update, and a personal visit from Raymond wielding a large stick. All of this will be ignored. Finally, when things stop working the developers will blame Microsoft for &#8220;randomly&#8221; breaking things.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1317175">
				<div id="div-comment-1317175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171128-00/?p=97475#comment-1317175">
			November 29, 2017 at 5:02 am</a>		</div>

		<p>You&#8217;re misunderstanding Jon. He&#8217;s asking why there weren&#8217;t any code reviews in place when the code was first added internally. </p>
<p>And the answer that 640k gives seems rather logical &#8211; it was an internal API first which gets much less oversight and nobody reviewed the code when it was made public. </p>
<p>Also this happened ages ago, I doubt there was a standardized process in place with regards to testing and code reviews. We shouldn&#8217;t forget that even 10 years ago writing unit tests was still anything but common.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1317165">
				<div id="div-comment-1317165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171128-00/?p=97475#comment-1317165">
			November 28, 2017 at 10:55 pm</a>		</div>

		<p>ItThe imported code was taken from the Office code base, which was thought to be stable and tested.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1317145">
				<div id="div-comment-1317145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aged .Net Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171128-00/?p=97475#comment-1317145">
			November 28, 2017 at 8:42 am</a>		</div>

		<p>The reference in the third paragraph is to a blog post that tells us of a checkbox-related resource leak in the .Net implementation of TreeView.  Following refs back, it seems the original bug report behind the blog post came from roughly 2008.</p>
<p>Does anyone know which .Net framework version or service pack update  resolved this problem?</p>
<p>To make this question actionable as is Raymond&#8217;s wont(<a href="https://blogs.msdn.microsoft.com/oldnewthing/20160329-00/?p=93214" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20160329-00/?p=93214</a>) let me rephrase it as: How far back into our codebase vs. supported configs do we need to go (or not) to find places we ought to implement that blog&#8217;s suggested shim?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1317305">
				<div id="div-comment-1317305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Guteniev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171128-00/?p=97475#comment-1317305">
			November 30, 2017 at 12:37 am</a>		</div>

		<p>I recall other cases of stock state images for controls that were added at about the same time or later.<br />
They are<br />
1. LVS_EX_CHECKBOXES<br />
2. HDF_SORTDOWN, HDF_SORTUP, HDF_CHECKBOX, etc in HDITEM::fmt</p>
<p>Any similar issues with them?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

