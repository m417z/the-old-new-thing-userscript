<html>
<head>
<title>How am I supposed to free the information returned by the GetSecurityInfo function?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How am I supposed to free the information returned by the GetSecurityInfo function?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 12, 2012 / year-entry #290</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The Get­Security­Info function returns a copy of the security descriptor for a kernel object, along with pointers to specific portions you request. More than once, a customer has been confused by the guidelines for how to manage the memory returned by the function. Let's look at what the function says: ppsidOwner [out, optional] A pointer...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://msdn.microsoft.com/en-us/library/aa446654.aspx">
The <code>Get&shy;Security&shy;Info</code> function</a>
returns a copy of the security descriptor for a kernel object,
along with pointers to specific portions you request.
More than once, a customer has been confused by the
guidelines for how to manage the memory returned by the function.
</p>
<p>
Let's look at what the function says:
</p>
<blockquote CLASS=q>
<dl>
<dt><i>ppsidOwner</i> [out, optional]</p>
<dd>A pointer to a variable that receives a pointer to the owner SID
    in the security descriptor returned in
    <i>ppSecurity&shy;Descriptor</i>.
    The returned pointer is valid only if you set the
    <code>OWNER_<wbr>SECURITY_<wbr>INFORMATION</code>
    flag.
    This parameter can be NULL if you do not need the owner SID.
</dl>
</blockquote>
<p>
Similar verbiage can be found for the other subcomponent
parameters.
The final parameter is described as
</p>
<blockquote CLASS=q>
<dl>
<dt><i>ppSecurity&shy;Descriptor</i> [out, optional]</p>
<dd>A pointer to a variable that receives a pointer to the security
    descriptor of the object.
    When you have finished using the pointer, free the returned
    buffer by calling the <b>Local&shy;Free</b> function.
</dl>
</blockquote>
<p>
Okay, so it's clear that you need to free the security descriptor
with <code>Local&shy;Free</code>.
But how do you free the owner, group, DACL, and SACL?
</p>
<p>
Read the documentation again.
I've underlined the important part.
</p>
<blockquote CLASS=q>
<dl>
<dt><i>ppsidOwner</i> [out, optional]</p>
<dd>A pointer to a variable that receives a pointer to the owner SID
    <u>in the security descriptor returned in
    <i>ppSecurity&shy;Descriptor</i></u>.
    The returned pointer is valid only if you set the
    <code>OWNER_<wbr>SECURITY_<wbr>INFORMATION</code>
    flag.
    This parameter can be NULL if you do not need the owner SID.
</dl>
</blockquote>
<p>
In case that wasn't clear, the point is reiterated in the remarks.
</p>
<blockquote CLASS=q><p>
If the <i>ppsidOwner</i>,
<i>ppsidGroup</i>,
<i>ppDacl</i>,
and
<i>ppSacl</i> parameters are non-NULL,
and the
<i>Security&shy;Info</i> parameter specifies that they be retrieved
from the object,
those parameters will point to the corresponding parameters
in the security descriptor returned in
<i>ppSecurity&shy;Descriptor</i>.
</p>
</blockquote>
<p>
In other words, you are getting a pointer
<i>into the security descriptor</i>.
No separate memory allocation is made.
The memory for the owner SID is freed when you free the security
descriptor.
It's like the last parameter to <code>Get&shy;Full&shy;Path&shy;Name</code>,
which receives a pointer to the file part of the full path.
There is no separate memory allocation for that pointer;
it's just a pointer back into the main buffer.
</p>
<p>
You can think of the
<code>ppsidOwner</code> parameter
as a convenience parameter.
The <code>Get&shy;Security&shy;Info</code> function
offers to do the work of calling
<code>Get&shy;Security&shy;Descriptor&shy;Owner</code>
for you.
You can think of the function as operating like this:
</p>
<pre>
DWORD WINAPI GetSecurityInfo(...)
{
    ... blah blah get the security info ...

    // Just out of courtesy:
    // Fetch the owner if the caller requested it
    if (ppsidOwner != NULL &amp;&amp;
        (SecurityInfo &amp; OWNER_SECURITY_INFO)) {
        BOOL fDefaulted;
        GetSecurityDescriptorOwner(pSecurityDescriptor,
                                   ppsidOwner,
                                   &amp;fDefaulted);
    }

    ...
}
</pre>
<p>
That's why the documentation says that you need to pass
a non-null
<code>ppSecurity&shy;Descriptor</code>
if you request any of the pieces of the security descriptor:
If you don't, then you won't be able to free the memory for it.
</p>
<p>
<b>Bonus chatter</b>:
If the
<code>ppSecurity&shy;Descriptor</code>
is so important,
why is it marked "optional"?
</p>
<p>
It really should be a mandatory parameter,
but older versions of Windows didn't enforce the rule,
so the parameter is grandfathered in as optional,
even though no self-respecting program should ever
pass in <code>NULL</code>.
If you pass <code>NULL</code> for the
<code>ppSecurity&shy;Descriptor</code>,
the function happily allocates the security descriptor
and then, "Oh wait, the caller didn't give me a way to
receive the pointer to the security descriptor,
so I guess I won't give it to him."
</p>
<pre>
DWORD WINAPI GetSecurityInfo(...)
{
    ... blah blah get the security info ...

    if (ppSecurityDescriptor != NULL) {
        *ppSecurityDescriptor = pSecurityDescriptor;
    }
    ...
}
</pre>
<p>
Result: Memory leak.
</p>
<p>
You might say that the last parameter was designed by somebody
wearing
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/05/12/10163578.aspx">
kernel-colored glasses</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1025593">
				<div id="div-comment-1025593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025593">
			December 12, 2012 at 7:11 am</a>		</div>

		<p>I figured it out just by reading the documentation, before reading the actual blog entry. &nbsp;Do I get a prize?</p>
<p>What I didn&#39;t figure out from reading documentation was how there would be a memory leak if ppSecurityDescriptor is NULL! &nbsp;I assume you would have pointed it out in the documentation if it was documented? &nbsp;In which case, the documentation seems sorely lacking in this area &#8211; generally, I don&#39;t expect a memory leak if I decide I don&#39;t need the output of an optional output parameter! &nbsp;(In this case, it doesn&#39;t seem to make sense to leave ppSecurityDescriptor NULL since there would be no way to get useful information other than an error code in that case. &nbsp;But it still violates this rule I assumed was true.)</p>
<div class="post">[<em>It may violate the rule, but the alternative is requiring the function to have clairvoyance. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1025603">
				<div id="div-comment-1025603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025603">
			December 12, 2012 at 7:23 am</a>		</div>

		<p>I don&#39;t really get this, how was it ever useful to allow people to pass NULL as the final parameter? It could not be to allow ppsidOwner to be a separate memory block in the future because the way you free things have already been set in stone.</p>
<p>So my question is, why did the original design not just validate the pointer as its first step and return with a invalid parameter error? Also, has a &quot;else LocalFree(pSecurityDescriptor);&quot; been added in later versions or does it still leak?</p>
<div class="post">[<em>I&#39;d be more inclined to answer if your handle wasn&#39;t insulting. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1025613">
				<div id="div-comment-1025613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">prunoki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025613">
			December 12, 2012 at 7:50 am</a>		</div>

		<p>WndSks = Windows Sockets?</p>
<p>Filler. This is not a spam. Neither very useful, I know.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1025623">
				<div id="div-comment-1025623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025623">
			December 12, 2012 at 8:10 am</a>		</div>

		<p>@prunoki, more like it Sucks. That user actually has as a homepage something with that in the URL. I believe this user and xpclient are friends. Their tone is incredibly similar too.</p>
<p>I don&#39;t know why they don&#39;t just move on to something else. From their point of view (read that again), it&#39;s like being in hell with a chance to go to heaven, but no, they&#39;d rather stay in hell pointing out how red, hot and painful it is, even with their life-saving-lava-temperature-resistant old-times-comfortable yacht.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1025633">
				<div id="div-comment-1025633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025633">
			December 12, 2012 at 8:31 am</a>		</div>

		<p>@WndSks: That would technically work if the Win32 program were single threaded and LocalFree never ends up calling VirtualFree and there was no allocation in the process.</p>
<p>Constraint #1 doesn&#39;t hold as soon as you call OpenFileDialog</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1025653">
				<div id="div-comment-1025653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025653">
			December 12, 2012 at 10:03 am</a>		</div>

		<p>[You&#39;d be surprised how many people rely on the memory leak. -Raymond]</p>
<p>Exactly. How many people can be expected to get &quot;use memory after freeing it&quot; correct?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1025663">
				<div id="div-comment-1025663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeffrey Bosboom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025663">
			December 12, 2012 at 11:21 am</a>		</div>

		<p>I think the comments are overlooking the fact that even when ppSecurityDescriptor is NULL, the function still fills in the other parameters to point into the memory it allocated. &nbsp;It doesn&#39;t return the pointer you need to free the memory, but at least the results are still valid.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1025673">
				<div id="div-comment-1025673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025673">
			December 12, 2012 at 11:37 am</a>		</div>

		<p>I understand maintaining backward compatibility. &nbsp;I don&#39;t understand getting the initial implementation wrong.</p>
<div class="post">[<em>The original implementation was written in the days when the prevailing design style was &quot;if the app wants to do something stupid, let them do something stupid, because preventing people from doing stupid things might prevent them from doing clever things.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1025703">
				<div id="div-comment-1025703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025703">
			December 12, 2012 at 1:45 pm</a>		</div>

		<p>[So you&#39;re saying that the function should return *ppsidOwner that points to memory that has already been freed? (You&#39;d be surprised how many people rely on memory leaks.) -Raymond]</p>
<p>No, because MSDN says: &quot;This parameter is required if any one of the ppsidOwner, ppsidGroup, ppDacl, or ppSacl parameters is not NULL.&quot;</p>
<p>I read that and assumed the function will fail with an invalid parameter error code if ppSecurityDescriptor is NULL and ppsidOwner is not NULL. &nbsp;If this is not the case, as Jeffrey Bosboom says, then you&#39;re right, someone could end up using freed memory &#8211; not good &#8211; better to leak the memory for backwards compatibility. &nbsp;But the documentation probably should clarify things, because then the statement I just quoted is apparently false &#8211; in addition to the previously-mentioned lack of a warning about a memory leak.</p>
<p>@Maurits: &nbsp;Now I think you&#39;ve needlessly complicated the function: you&#39;re requiring the caller to have the smarts to LocalFree(psidOwner) when they didn&#39;t have the smarts to call it right in the first place, and would break compatibility with older versions. &nbsp;Otherwise, it will still leak.</p>
<div class="post">[<em>Oh, so you&#39;re breaking code that accidentally leaked memory. They used to succeed with a valid psidOwner (and leak some memory), and now they get ERROR_INVALID_PARAMETER. The comment &quot;This parameter is required&#8230;&quot; was added <span style="text-decoration:underline;">by me</span> in 2010. Documentation prior to 2010 did not explicitly note the parameter as mandatory. (The Microsoft Research people need to hurry up with that time machine.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1025713">
				<div id="div-comment-1025713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025713">
			December 12, 2012 at 1:58 pm</a>		</div>

		<p>@JamesJohnston That&#39;s my interpretation of the documentation as well. Well since the memory leak only happens to applications that misuse the function, it&#39;s probably fine to leave it how it is &#8211; no downsides for people who use it correctly and a small memory leak is better than reading freed memory for all the others.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1025723">
				<div id="div-comment-1025723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025723">
			December 12, 2012 at 3:57 pm</a>		</div>

		<blockquote><p>
  You can think of the ppsidOwner parameter as a convenience parameter&#8230;
</p></blockquote>
<p>Haha. I guess this happens from time to time in APIs. Most developers won&#39;t get confused, one would assume, but no good deed goes unpunished as has been tagged in this blog from time to time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1025643">
				<div id="div-comment-1025643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025643">
			December 12, 2012 at 9:52 am</a>		</div>

		<p>[It may violate the rule, but the alternative is requiring the function to have clairvoyance. -Raymond]</p>
<p>Rule violations should be documented, IMHO, not sure why they didn&#39;t do that&#8230; (forgot?)</p>
<p>Not sure what clairvoyance is needed, I don&#39;t see what would have been wrong to change the function like this?</p>
<p>&nbsp; &nbsp;if (ppSecurityDescriptor != NULL) {</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;*ppSecurityDescriptor = pSecurityDescriptor;</p>
<p>&nbsp; &nbsp;} else {</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;LocalFree(pSecurityDescriptor); /* caller left NULL in parameter; avoid memory leak */</p>
<p>&nbsp; &nbsp;}</p>
<p>Shouldn&#39;t really break compatibility with anything either, unless someone actually depended on the memory leak somehow. (!!!)</p>
<div class="post">[<em>So you&#39;re saying that the function should return *ppsidOwner that points to memory that has already been freed? (You&#39;d be surprised how many people rely on memory leaks.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1025733">
				<div id="div-comment-1025733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025733">
			December 12, 2012 at 6:53 pm</a>		</div>

		<p>[The original implementation was written in the days when the prevailing design style was &quot;if the app wants to do something stupid, let them do something stupid, because preventing people from doing stupid things might prevent them from doing clever things.&quot; -Raymond]</p>
<p>Does this mean it&#39;s safe for me to assume I can call it with NULL, take one of the other pointers, hop backwards through memory to find the start of the security descriptor (never mind how), and call LocalFree on it? Not that I&#39;d do anything that insane. Just interested in the correct way to read the documentation in case another odd matter comes up of a similar form.</p>
<div class="post">[<em>No, that&#39;s not a good idea. As I noted in the article, this is a kernel-colored glasses issue. The function is careful not to crash itself, but it doesn&#39;t really care if what you requested harms you as a side-effect. If you want to hurt yourself, that&#39;s your problem. Think of it as the libertarian version of API documentation. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1025683">
				<div id="div-comment-1025683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025683">
			December 12, 2012 at 12:14 pm</a>		</div>

		<p>There&#39;s lots of ways it *could* have worked. &nbsp;For example:</p>
<p>if (ppSecurityDescriptor == NULL) {</p>
<p>___ if (ppsidOwner != NULL) {</p>
<p>___ ___ *ppsidOwner = LocalAlloc(&#8230;);</p>
<p>___ ___ CopyMemory(ppsidOwner, &#8230;);</p>
<p>___ ___ LocalFree(pSecurityDescriptor);</p>
<p>___ }</p>
<p>} else {</p>
<p>____ *ppSecurityDescriptor = pSecurityDescriptor;</p>
<p>}</p>
<div class="post">[<em>In general, you don&#39;t design your function so it behaves optimally when people are using it <span style="text-decoration:underline;">wrong</span>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1025743">
				<div id="div-comment-1025743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025743">
			December 12, 2012 at 10:00 pm</a>		</div>

		<p>@Joshua</p>
<p>Might it work in a single configuration on which you test? &nbsp;Yes. &nbsp;Is it safe? &nbsp;You already know the answer to that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1025753">
				<div id="div-comment-1025753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025753">
			December 13, 2012 at 1:38 am</a>		</div>

		<p>@Raymond:</p>
<p>Could you arrange for the MSDN documentation to be updated so that the documentation does not say &quot;optional&quot; in the signature? You could note in the remarks of the function that some old applications send NULL to this function and that for app-compat the function will succeed with a memory leak (in order to prevent people shimming this function from null-dereffing), but since the vast majority of users of MSDN are trying to <em>use</em> rather than <em>shim</em> the API, and since memory leaking is a bug (i.e. sending NULL in this parameter is a bug), it seems reasonable for the signature to require this parameter and mark is as __out, not __out_opt.</p>
<p>Additionally, if you parameter is changed to not be optional, then stuff like OACR will be able to alert users of static analysis tools that they are &quot;doing it wrong&quot; so that these leaks can be fixed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1025763">
				<div id="div-comment-1025763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025763">
			December 13, 2012 at 1:45 am</a>		</div>

		<p>@Joshua: Just because it <em>works</em> doesn&#39;t mean it&#39;s <em>supported</em>. And unless your app suddenly becomes a fifty-million-customers strong, you probably will find that Microsoft can&#39;t be bothered to write the shim for your app to keep it working when your app inevitably breaks on a future version of Windows.</p>
<p>Note that in a future version of Windows where that offset becomes wrong or the innards of the method change, you&#39;ll suddenly be LocalFree&#39;ing a pointer that isn&#39;t valid &#8211; which is an exploitable software vulnerability.</p>
<p>And when your customers ask &quot;how come a hacker was able to install a rootkit on my machine when I used your program&quot; you&#39;ll have to reply &quot;because I&#39;m an idiot and relied on undocumented behaviour of a function&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1025773">
				<div id="div-comment-1025773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025773">
			December 13, 2012 at 2:39 am</a>		</div>

		<p>Suppose a company is actively developing an application that happens to be incorrectly using GetSecurityInfo in this way. How are they supposed to notice that? (Apart from reading this blog, of course.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1025793">
				<div id="div-comment-1025793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025793">
			December 13, 2012 at 3:49 am</a>		</div>

		<p>@Neil, that&#39;s a good question.</p>
<p>Usually, the MSDN library documentation states what error codes are returned and in what situations.</p>
<p>The documentation (as Raymond quotes) always stated that ppSecurityDescriptor was needed if any of the other 4 were not NULL (and in fact, it wasn&#39;t marked as optional as far back as 2005, in the documentation and in the C declaration).</p>
<p>In this case, it says ppSecurityDescriptor is required if the other 4 parameters are not NULL, so violating this alone should return an error code, and the guilty apps should have shims.</p>
<p>As you said, whoever passes a NULL ppSecurityDescriptor might honestly be affected by a bug somewhere else in the application/library. Since no error is returned, there&#39;s no way to know.</p>
<div class="post">[<em>As I noted earlier, the documentation that says that ppSecurityDescriptor is required if any of the other 4 parameters is non-NULL was added in 2010. So between 2005 and 2010, it was documented as optional. As I noted in the article, the parameter really is optional (from a kernel perspective) but the consequence is a memory leak so in practice it is mandatory. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1025803">
				<div id="div-comment-1025803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025803">
			December 13, 2012 at 3:50 am</a>		</div>

		<p>@Joshua, the &quot;workaround&quot; would be too clever. I dare saying it would actually be too much cleverness for whoever uses an explicit NULL ppSecurityDescriptor.</p>
<p>Call GetSecurityDescriptorOwner, GetSecurityDescriptorGroup, GetSecurityDescriptorDacl and/or GetSecurityDescriptorSacl once, given a properly filled SECURITY_DESCRIPTOR (i.e. with the respective field not set to NULL), to guess the offset.</p>
<p>Now you know the offsets. But wait, in calls with a SECURITY_DESCRIPTOR with those fields set to NULL, the owner, group, dacl and sacl pointers will actually be set to NULL instead of set to point to the field that has the NULL value. You basically don&#39;t have a reliable way of not leaking memory.</p>
<p>GetSecurityInfo itself has the ability to LocalFree the SECURITY_DESCRIPTOR (if ppSecurityDescriptor is NULL) if all the values stored in the other 4 pointers are set to NULL. Actually, it should, there&#39;s no need to leak in this case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1025813">
				<div id="div-comment-1025813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025813">
			December 13, 2012 at 4:27 am</a>		</div>

		<p>@John Doe: &quot;I don&#39;t know why they don&#39;t just move on to something else.&quot;</p>
<p>To be fair, the tag-line for WndSks&#39;s site is &quot;Windows sucks, but everything else sucks even more&quot;. A statement I can almost get behind ;) But actually Raymond&#39;s post helped increase my appreciation for Windows quite a lot.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1025883">
				<div id="div-comment-1025883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JDP</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025883">
			December 13, 2012 at 8:32 am</a>		</div>

		<blockquote><p>
  In general, you don&#39;t design your function so it behaves optimally when people are using it wrong. -Raymond
</p></blockquote>
<p>A lovely bon-mot.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1025913">
				<div id="div-comment-1025913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1025913">
			December 13, 2012 at 10:09 am</a>		</div>

		<p>@Raymon, you&#39;re right about the added paragraph.</p>
<p>However, in the Visual Studio 2005 installation in the machine I&#39;m posting from, the installed MSDN library states that the ppSecurityDescriptor is [out], not [out, optional] (in AclAPI.h, it&#39;s __deref_out, not__deref_out_opt). No matter how the function actually worked/works, it was not a good idea to pass NULL for ppSecurityDescriptor back then. So, it seems the parameter was made optional to reflect its behavior, instead of the function made to work as documented.</p>
<p>That&#39;s why I said the function should probably have been fixed and shims done to the apps that really require the old misdocumented/misimplemented behavior. But it&#39;s a bit too late now, it seems :)</p>
<p>I guess that, in between 2005 and your addition, documenting ppSecurityDescriptor as optional was the main fault, no matter how the function was actually implemented.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1026043">
				<div id="div-comment-1026043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1026043">
			December 14, 2012 at 1:55 am</a>		</div>

		<p>As a matter of perspective, I agree on WndSks&#39;s post not being offensive. His blog&#39;s headline is &quot;Windows sucks, but everything else sucks even more&quot;. That sounds more like some frustration from simple annoyances with his favorite OS.</p>
<p>And one of his posts starts with &quot;In the words of the great Raymond Chen:&quot;</p>
<p>Even if the rest is (educated) ranting, he&#39;s certainly right about that one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1026083">
				<div id="div-comment-1026083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Totzke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121212-00/?p=5853#comment-1026083">
			December 14, 2012 at 9:14 am</a>		</div>

		<p>&quot;WndSks&quot; isn&#39;t funny, clever or even the slightest bit ironic. &nbsp;It&#39;s just rude. &nbsp;Raymond is well correct to point this out. It&#39;s not unreasonable to expect a little common courtesy from those to whom you provide so much value. &nbsp;For Free.</p>
<p>Try this:</p>
<ol>
<li>
<p>Go to McDonald&#39;s</p>
</li>
<li>
<p>Tell them the food they prepare sucks.</p>
</li>
<li>
<p>Order some food.</p>
</li>
<li>
<p>Enjoy the spit (or worse) that comes as a bonus condiment on your food.</p>
</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

