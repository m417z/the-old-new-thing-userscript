<html>
<head>
<title>Why does the CLR report a NullReferenceException even if the referenced access is not exactly the null pointer?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does the CLR report a NullReferenceException even if the referenced access is not exactly the null pointer?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 9, 2013 / year-entry #213</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>28</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">We saw some time ago that before invoking a method on an object, the CLR will generate a cmp [ecx], ecx instruction to force a null reference exception to be raised if you are trying to invoke a method on a null reference. But why does the CLR raise a Null­Reference­Exception if the faulting address...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We saw some time ago that before invoking a method on an object,
the CLR will generate a
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2007/08/16/4407029.aspx">
<code>cmp [ecx], ecx</code> instruction</a>
to force a null reference exception to be raised if you are trying
to invoke a method on a null reference.
</p>
<p>
But why does the CLR raise a
<code>Null&shy;Reference&shy;Exception</code> if the faulting address
is almost but not quite zero?
</p>
<pre>
class Program {
 public static unsafe void Main() {
  byte *addr = (byte*)0x42;
  byte val = *addr;
 }
}
</pre>
<p>
When run, this program raises a
<code>Null&shy;Reference&shy;Exception</code> rather than
an
<code>Access&shy;Violation&shy;Exception</code>.
On the other hand, if you change the address to
<code>0x80000000</code>,
then you get the expected
<code>Access&shy;Violation&shy;Exception</code>.
</p>
<p>
With a little bit of preparation,
the CLR optimizes out null pointer checks if it knows that
it's going to access the object anyway.
For example, if you write
</p>
<pre>
class Something {
 int a, b, c;
 static int Test(Something s) { return s.c; }
}
</pre>
<p>
then the CLR doesn't need to perform a null pointer test
against <code>s</code> before trying to read <code>c</code>,
because the act of reading <code>c</code> will raise an exception
if <code>s</code> is a null reference.
</p>
<p>
On the other hand, the offset of <code>c</code> within
<code>s</code>
is probably not going to be zero,
so when the exception is raised by the CPU,
the faulting address is not going to be exactly zero
but rather some small number.
</p>
<p>
The CLR therefore assumes that all exceptions at addresses close to
the null pointer were the result of trying to access a field relative
to a null reference.
Once you also ensure that the first
64<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/06/11/9725386.aspx">KB</a>
of memory is always invalid,
this assumption allows the null pointer check optimization.
</p>
<p>
Of course, if you start messing with unmanaged code or unsafe code,
then you can trigger access violations near the null pointer that
are not the result of null references.
That's what happens when you operate outside the rules of the
managed memory environment.
</p>
<p>
Mind you, version&nbsp;1 of the .NET Framework didn't even have an
<code>Access&shy;Violation&shy;Exception</code>.
In purely managed code, all references are either valid or null,
so version&nbsp;1 of the .NET Framework assumed that any access violation was 
the result of a null reference.
There's even
<a HREF="http://msdn.microsoft.com/en-us/library/system.accessviolationexception.aspx">
a configuration option you can set</a>
to force newer versions of the .NET Framework to treat all access
violations as null reference exceptions.
</p>
<p>
<b>Exercise</b>:
Respond to the following statement:
"Consider a really large class (more than 64KB),
and I access a field near the end of the class.
In that case, the null pointer optimization won't work
because the access will be outside the 64KB range.
Aha, I have found a flaw in your design!"</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (28)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1071803">
				<div id="div-comment-1071803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1071803">
			August 9, 2013 at 7:15 am</a>		</div>

		<p>Answer: The runtime knows when the optimization is safe. It won&#39;t do it if it isn&#39;t safe. Remember that it can still check the pointer before indexing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1071813">
				<div id="div-comment-1071813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1071813">
			August 9, 2013 at 7:45 am</a>		</div>

		<p>If you have a class larger than 64 KB, you very likely have a serious design problem. &nbsp;You could very easily blow your stack with a single one of these (though granted I think that&#39;s only possible in C# with value types like structs, not reference types, but correct me if I&#39;m wrong). &nbsp;Some of the systems I code for use a default stack size of 128 KB for non-main threads, and those systems are only about 7 years old.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071843">
				<div id="div-comment-1071843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1071843">
			August 9, 2013 at 8:16 am</a>		</div>

		<p>Answer: Treating ALMOST nulls as nullreferenceexceptions is simply a convenience to allow the developer to recognize that their problem is likely caused by a null dereference. &nbsp;The error will still properly occur as an access violation exception, it will just be up to the programmer to recognize it&#39;s actually caused by a null dereference.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1071853">
				<div id="div-comment-1071853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1071853">
			August 9, 2013 at 8:16 am</a>		</div>

		<p>Answer: Treating ALMOST nulls as nullreferenceexceptions is simply a convenience to allow the developer to recognize that their problem is likely caused by a null dereference. &nbsp;The error will still properly occur as an access violation exception, it will just be up to the programmer to recognize it&#39;s actually caused by a null dereference.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071863">
				<div id="div-comment-1071863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1071863">
			August 9, 2013 at 8:18 am</a>		</div>

		<p>Sorry for the double post, I was getting an error page when posting (not a null reference exception, disappointingly) so I assumed my comment did not go through.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-john-ludlow odd alt thread-odd thread-alt depth-1" id="comment-1071873">
				<div id="div-comment-1071873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/John+Ludlow' rel='external nofollow' class='url'>John Ludlow</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1071873">
			August 9, 2013 at 8:36 am</a>		</div>

		<p>@The MAZZTer Was it an access violation?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071883">
				<div id="div-comment-1071883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ashx</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1071883">
			August 9, 2013 at 8:38 am</a>		</div>

		<p>&gt;&gt; If you have a class larger than 64 KB, you very likely have a serious design problem.</p>
<p>From the lens of the JIT compiler, who cares ? It has to work whether it&#39;s good design or not. </p>
<p>But of course the JIT compiler knows the size of the bare object, so it would simply skip the optimization in those cases.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1071893">
				<div id="div-comment-1071893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1071893">
			August 9, 2013 at 8:47 am</a>		</div>

		<p>I guess it was too much trouble to make a common ancestor for NullReferenceException and AccessViolationException.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1071973">
				<div id="div-comment-1071973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">j b</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1071973">
			August 9, 2013 at 10:29 am</a>		</div>

		<p>Adam Rosenfield&gt; If you have a class larger than 64 KB, you very likely have a serious design problem. &nbsp;</p>
<p>You wouldn&#39;t believe some of the constructions in some software. In the software for the System 12 ISDN telephone switches, the largest struct declaration took more than 8300 lines. Printed 72 lines to the page, that would be a book of well above a hundred pages! (I came across this when System 12 was in its earlier stages &#8211; it probably grew far beyond that before the software was retired.) </p>
<p>Another figure from the same software: One of the linkers used to develop the software crashed because it used a signed 16-bit number to index the table of symbols exported from a module. There was a module that exported more than 32767 symbols. The table structure for handling imported symbols from an arbitrary number of other modules used at 32 bit index, but this was a single module that alone defined &gt;32k global symbols.</p>
<p>In MY eyes, both of these cases indicate serious design problems, but the telecommunications people don&#39;t agree with me. Appearently, this is standard fare in their part of the world.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1072053">
				<div id="div-comment-1072053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Risto</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1072053">
			August 9, 2013 at 12:16 pm</a>		</div>

		<p>Perhaps it puts a guard page after the structure that has no read nor write access so traps?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1072063">
				<div id="div-comment-1072063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1072063">
			August 9, 2013 at 12:39 pm</a>		</div>

		<p>Considering that you can&#39;t have arrays in a class in the sense that matters here, it&#39;d take a seriously messed up class to get to 64 KB.</p>
<p>In the example of using the unsafe pointer, the Runtime in theory could keep track of all the machine-code instructions for which a null pointer exception is possible, and note the difference. &nbsp;I suppose that it is not worth the trouble to do this.</p>
<p>I&#39;m curious &#8211; does the Runtime use an unhandled exception filter or a vectored exception handler to convert the NT exception into a CLR exception?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1072083">
				<div id="div-comment-1072083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1072083">
			August 9, 2013 at 12:59 pm</a>		</div>

		<p>Myria&gt; I&#39;m curious &#8211; does the Runtime use an unhandled exception filter or a vectored exception handler to convert the NT exception into a CLR exception?</p>
<p>I&#39;d be shocked if it doesn&#39;t! ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1072103">
				<div id="div-comment-1072103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1072103">
			August 9, 2013 at 1:15 pm</a>		</div>

		<p>Myria: The runtime absolutely allows arrays within types, although C# only allows them in unsafe contexts (so you rarely see them). I&#39;ve used them for unmanaged interop before. That said, it&#39;s still unlikely to see a 64k class without trying really hard &#8212; although maybe there are likely situations where codegen could do it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1072133">
				<div id="div-comment-1072133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1072133">
			August 9, 2013 at 1:29 pm</a>		</div>

		<p>@Myria, Steve Wolf: I always thought it was handled at catch time when it needs to convert the SEH exception to a .NET type.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1072153">
				<div id="div-comment-1072153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1072153">
			August 9, 2013 at 1:51 pm</a>		</div>

		<p>Well as always, why not try the whole thing? So I used the following python script:</p>
<p>import math</p>
<p>with open(&quot;test.txt&quot;, &quot;w&quot;) as file:</p>
<p> &nbsp; &nbsp;for var in range(int(math.ceil(70 * 1024 / 8))):</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;file.write(&quot;public long foo{0};n&quot;.format(var))</p>
<p>which just generates a really long list of longs that totals 70kb of class data.</p>
<p>Putting that into a class called Foo and calling it like this (to actually get the JIT to run but make sure it doesn&#39;t optimize the whole calling out):</p>
<p>	static void Test() {</p>
<p>		Random rand = new Random();</p>
<p>		for (int i = 0; i &lt; 10000; i++) {</p>
<p>			try {</p>
<p>				Foo foo = rand.Next() == 0 ? new Foo() : null;</p>
<p>				Console.WriteLine(foo.foo8959);</p>
<p>			} catch (NullReferenceException x) {</p>
<p>			}</p>
<p>		}</p>
<p>	}</p>
<p>	static void Main(string[] args) {</p>
<p>		for (int i = 0; i &lt; 1000; i++) {</p>
<p>			Test();</p>
<p>		}</p>
<p>	}</p>
<p>shows that at least with VS2012 in release mode we always get a NullReferenceException and nothing else &#8211; so the JIT is clever enough to avoid the problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1072203">
				<div id="div-comment-1072203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">saveddijon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1072203">
			August 9, 2013 at 5:05 pm</a>		</div>

		<p>If 64KB isn&#39;t enough then you can always reserve more. Most Unix systems detect &quot;null&quot; pointers by not mapping memory at address zero, going for some offset. I think 64MB is used in some versions of BSD.</p>
<p>Any system with ASLR will also likely detect references well into the address space.</p>
<p>But if that isn&#39;t good enough, implement it in the CPU. x86 doesn&#39;t do this, but I think ARM might: if all of your memory referencing instructions are loads and stores of the form:</p>
<p>ld [Rbase + offset],Rdest</p>
<p>st Rsrc, [Rbase + offset]</p>
<p>where offset may be a constant or a register, then just have a mode where a special exception is taken if Rbase is zero, regardless of what the offset may be. Works for any size class/array/whatever, and doesn&#39;t require an MMU.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1072253">
				<div id="div-comment-1072253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua S.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1072253">
			August 9, 2013 at 10:19 pm</a>		</div>

		<p>If I make this check:</p>
<p>if (s != null)</p>
<p>s.c();</p>
<p>&#8230;then does the JITter optimize out the intrinsic &quot;cmp&quot; null check?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1072233">
				<div id="div-comment-1072233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1072233">
			August 9, 2013 at 5:31 pm</a>		</div>

		<p>If you have a big class and reference a field at the end of it, then there&#39;s a risk of memory corruption if the field is written to. Consider the following:</p>
<p>[StructLayout(Size=64*1024*1024)]</p>
<p>struct Big {}</p>
<p>struct ArbitraryWrite { public Big b; public uint f; }</p>
<p>class Program()</p>
<p>{</p>
<p> &nbsp;static void Main()</p>
<p> &nbsp;{</p>
<p> &nbsp; &nbsp;ArbitraryWrite aw = null;</p>
<p> &nbsp; &nbsp;aw.f = 0x11223344;</p>
<p> &nbsp;}</p>
<p>}</p>
<p>which would compile to:</p>
<p>xor eax, eax ; // aw = null;</p>
<p>mov [eax + 64*1024*1024], 0x11223344 ; // Boom.</p>
<p>This would be equivalent to *(DWORD*)(64+1024+1024) = 0x11223344, which is really bad, and effectively allows someone to jump out of the .NET sandbox (this would be an 0-day in Silverlight, for example).</p>
<p>To combat this situation, the runtime says that if you&#39;re accessing a field more than 64KB into a field, it&#39;ll explicitly check the value first:</p>
<p>xor eax, eax; // aw = null</p>
<p>cmp eax, [eax]; // this will AV at zero, giving us the a null-reference exception that we wanted</p>
<p>mov [eax + 64*1024*1024], 0x11223344 ; // this is now only reachable if we&#39;re not at null, i.e. no 0-days here. Huzzah!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1072303">
				<div id="div-comment-1072303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1072303">
			August 11, 2013 at 3:39 am</a>		</div>

		<p>Huh? 64 KB class is a bad design? Get serious, all my classes I use on daily basis are bigger then 64 KB. Why? Because clients like shiny objects, that&#39;s why. Do any of you here live in real life? You got no other choice but to buy a 3rd party framework that&#39;s build on top of another 3rd party framework which is inherited from another 3rd party framework (and the chain can go on like in Scheherazade&#39;s 1001 nights of names &quot;bin&#8230;bin&#8230;bin&quot;). Clients want reports so I need a report framework, I don&#39;t have time to implement one. So I buy one that can print the undiscovered underground Moon tunnels. Clients want big data, so I need a framework for that too (even if the DB is the totally free and fast PostgreSQL I don&#39;t want to waste time creating Users, Events, Passwords etc etc tables so I buy a framework who does that for me). Clients want cloud, want this, want that. Do I implement them all? Hell noooo (otherwise I would still be at implementing Microsoft Windows step). They already exists so I buy then use for my bid, hence the client is satisfied with a lower price and faster delivery. And that means they are all over the 64 KB on daily basis. Over time you get fast using those frameworks, you upgrade from version to version (yes, spend money to gain money) and the overall idea is that you spend your time solving clients problems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1072313">
				<div id="div-comment-1072313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Csaboka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1072313">
			August 11, 2013 at 6:03 am</a>		</div>

		<p>People weren&#39;t talking about classes whose code is bigger than 64K &#8211; they were talking about classes whose instance data is bigger than 64K. In other words, if you add together the sizes of all non-static fields (remembering that references only take the size of a pointer, not the size of the referenced object), and you get a number bigger than 64K, you are definitely doing something wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1072323">
				<div id="div-comment-1072323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1072323">
			August 11, 2013 at 10:49 am</a>		</div>

		<p>@Danny: I think you&#39;re confusing instance size with library size or something. Just because you use dozens of 3rd party frameworks doesn&#39;t mean you get large classes. For once most frameworks use classes, which means that a single instance of a gigantic framework still only costs you 4/8 byte.</p>
<p>To get a class with more than 64kb you have to have about 8192 longs declared (and no standard arrays won&#39;t work as long foo[10000] is only a reference to the data so is again only 4/8 byte long). So no this is extremely rare (unsafe code has shortcuts for this kind of thing, but unsafe code doesn&#39;t have to do implicit null pointer checks so the whole point is moot).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1072393">
				<div id="div-comment-1072393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1072393">
			August 12, 2013 at 5:17 am</a>		</div>

		<p>A class with 64k of data is not too big. &nbsp;I&#39;ll povide an example. &nbsp;I have to update a table based on another table. &nbsp;I could read the first table one record at a time and update the destination table. &nbsp;However, that beats the living stuff out of the database. &nbsp;Alternatively, I can read the entire source table into a class, generate the SQL needed to update the destination table, then execute the SQL statements. &nbsp;I do this today in a job that runs each day @ 0400 hours. &nbsp;The source table has around 720k records. &nbsp;My class uses a boatload of space, but it runs FAR faster than handling things one record at a time. &nbsp;On low grade server hardware, it runs around 28 seconds of wall time (not CPU seconds).</p>
<p>There are limits to this. &nbsp;I worked on a system 20 years ago that processed 30mm transactions per day. &nbsp;Because of regulatory requirements, we had to keep 7 years of data in the database. &nbsp;The technique of reading an entire table into memory won&#39;t work since it would be very difficult to buy that much memory and the system also has to serve the needs of 10,000 interactive users as well as anywhere from 100-1000 concurrent batch jobs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1072413">
				<div id="div-comment-1072413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1072413">
			August 12, 2013 at 5:31 am</a>		</div>

		<p>@12BitSlab</p>
<p>Unless you&#39;re doing something horribly wrong all that data is being pointed to by references and is not part of the actual class in memory. When you create a new instance of the class, it shouldn&#39;t be taking up 64K of stack, even if it is using gigs of data on the heap.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-1072493">
				<div id="div-comment-1072493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1072493">
			August 12, 2013 at 8:30 am</a>		</div>

		<p>@Myria: For x86, the CLR pushes a new SEH frame onto the stack (and links it up through fs:[0]) for every managed-unmanaged transition. At least, that was the case in v1.x, I don&#39;t know if it&#39;s changed in later versions. Source: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/cbrumme/archive/2003/10/01/51524.aspx">blogs.msdn.com/&#8230;/51524.aspx</a> (scroll down to &#39;A Single Managed Handler&#39;)</p>
<p>Other processor architectures, including x64, use table-based exception handling, so RtlInstallFunctionTableCallback is used to tell Windows about the JITted functions. Source: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/ntdebugging/archive/2010/05/12/x64-manual-stack-reconstruction-and-stack-walking.aspx">blogs.msdn.com/&#8230;/x64-manual-stack-reconstruction-and-stack-walking.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1072523">
				<div id="div-comment-1072523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LongCat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1072523">
			August 12, 2013 at 2:01 pm</a>		</div>

		<p>ITT: &quot;Programmers&quot; having difficulty understanding the subtlety of 64KB of class data.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1072663">
				<div id="div-comment-1072663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1072663">
			August 13, 2013 at 9:45 am</a>		</div>

		<p>@voo / @12BitSlab &#8211; I am not confusing anything. Example of one shiny object I was talking about &#8211; devExpress components to show my clients shiny grids, shiny edits, shiny anything GUI has to offer. Do it yourself they are free trial, go get them and install them on your favorite VS version (mine is 2010) then launch just a small C# test with only one cxGrid and that&#39;s it. And then comeback to me and tell me the size of the instantiated class. I bet it&#39;s more then 64KB.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1072733">
				<div id="div-comment-1072733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Timothy Fries</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1072733">
			August 13, 2013 at 12:16 pm</a>		</div>

		<p>@Danny: You certainly are confusing the issue at hand. &nbsp;The topic isn&#39;t whether an objects generally hold references to more than 64KB worth of data total, which is certainly common as your cxGrid demo proves; the topic is an object holding 64KB worth of data *within itself*; which is the only case where it&#39;d be dereferencing further than 64KB from a single pointer offset.</p>
<p>About the only natural objects in .NET that will get that large would be an array; or if you have some brain-damaged code &nbsp;generator tool that spits out a class with tens of thousands of value-typed member fields.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1073213">
				<div id="div-comment-1073213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Y</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130809-00/?p=3553#comment-1073213">
			August 16, 2013 at 4:33 am</a>		</div>

		<p>The CLR can be loaded dynamically into an existing process. Does it verify that the first 64k are really unmapped? Or is this guaranteed by the OS?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

