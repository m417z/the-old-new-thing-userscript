<html>
<head>
<title>Consequences of using variables declared __declspec(thread)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Consequences of using variables declared __declspec(thread)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 22, 2010 / year-entry #322</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>32</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">As a prerequisite, I am going to assume that you understand how TLS works, and in particular how __declspec(thread) variables work. There's a quite thorough treatise on the subject by Ken Johnson (better known as Skywing), who comments quite frequently on this site. The series starts here and continues for a total of 8 installments,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>As a prerequisite, I am going to assume that you understand how TLS works, and in particular how <code>__declspec(thread)</code> variables work. There's a quite thorough treatise on the subject by <a href="http://www.nynaeve.net/"> Ken Johnson (better known as Skywing)</a>, who comments quite frequently on this site. The series <a href="http://www.nynaeve.net/?p=180"> starts here</a> and continues for a total of 8 installments, ending <a href="http://www.nynaeve.net/?p=190"> here</a>. That last page also has a table of contents so you can skip over the parts you already know to get to the parts you don't know.</p>
<p> Now that you've read Ken's articles... </p>
<p> No, wait I know you didn't read them and you're just skimming past it in the hopes that you will be able to fake your way through the rest of this article without having read the prerequisites. Well, okay, but don't be surprised when I get frustrated if you ask a question that is answered in the prerequisites. </p>
<p> Anyway, <a href="http://www.nynaeve.net/?p=186"> as you learned from Part 5 of Ken's series</a>, the <code>__declspec(thread)</code> model, as originally envisioned, assumed that all DLLs which use the feature would be present at process startup, so that all the <code>_tls_index</code> values can be computed and the total sizes of each module's TLS data can be calculated before any threads get created. (Well, okay, the initial thread already got created, but that's okay; we'll set up that thread's TLS before we execute any application code.) </p>
<p> If you loaded a <code>__declspec(thread)</code>-dependent module dynamically, bad things happened. For one, TLS data was not set up for any pre-existing threads, since those threads were initialized before your module got loaded. Windows doesn't have a time machine where it can go back in time to when those threads were initialized and pre-reserve space for the TLS variables your new module needed. Nope, your module is just out of luck with respect to those pre-existing threads, and if it tries to use <code>__declspec(thread)</code> variables, it'll find that its TLS slot never got initialized, and there's no data there to access. </p>
<p> Unfortunately, there's an even worse problem, which Ken quite ably elaborates on in <a href="http://www.nynaeve.net/?p=187"> Part 6</a>: The <code>_tls_index</code> variable inside the module arrived after the train left the station. All those TLS indices were assigned at process initialization. When it loads dynamically, the <code>_tls_index</code> variable just sits there, and nobody bothers to initialize it, leaving it at its default value of zero. (Too bad the compiler didn't initialize it to <code>TLS_OUT_OF_INDEXES</code>.) As a result, the module thinks that its TLS variables are at slot zero in the TLS array, leading to what Ken characterizes as "one of the absolute worst possible kinds of problems to debug": Two modules both think they are the rightful owners of the same data, each with a different concept of what that data is supposed to be. It'd be like if there was a bug in <code>HeapAllocate</code> where it returned the same pointer to two separate callers. Each caller would use the memory, cheerfully believing that the values the code writes to the memory will be there when it comes back. </p>
<p> What truly frightens me is that there's at least one person who considers this horrific data corruption bug a <i>feature</i>. <a href="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#2416548"> webcyote calls this bug "sharing all variables between the EXE and the DLL"</a> and complained that fixing the bug breaks programs that "depend on the old behavior". That's like saying "We found that if we use this exact pattern of memory allocations, we can trick <code>HeapAllocate</code> into allocating the same memory twice, so we will have our EXE allocate some memory, then perform the magic sequence of allocations, and then load the DLL, and then the DLL will call <code>HeapAllocate</code> to allocate some memory, and it will get the same pointer back, and now the EXE and DLL can share memory." </p>
<p> Whoa. </p>
<p> Mind you, this crazy "EXE and DLL sharing thread variables" trick is extremely fragile. You have to intentionally delay loading the DLL until after process startup. (If you load it as part of an explicit dependency, then you don't trigger the bug and the DLL gets its own set of variables as intended.) And then you have to make sure that the EXE and DLL declare exactly the same variables in exactly the same order and link the OBJ files in exactly the right sequence, so that all the offsets match. Oh, and you have to make sure your DLL is loaded only into the EXE with which it is in cahoots. If you load it into any other EXE, it will start corrupting that EXE's thread variables. (Or, if the EXE doesn't use thread variables, it'll corrupt some other random DLL's thread variables.) </p>
<p> If the feature had been intended to be used in this insane way, they would have been called "shared variables" instead of "thread variables". No wait, they would have been called "thread variables that sometimes end up shared under conditions outside your DLL's control." </p>
<p> I wonder if Webcyote also  drives a manual transmission and just slams the gear stick into position without using the clutch. Yes, you can do it if you are really careful and get everything to align just right, but if you mess up, your transmission explodes and spews parts all over the road. </p>
<p> Don't abuse a bug in the loader. If you want shared variables, then create shared variables. Don't create per-thread variables and then intentionally trigger a bug that causes them to overlay each other by mistake. That's such a crazy idea that it probably never occurred to anyone that somebody would actually build a system that relies on it! </p>
<p> <b>Exercise</b>: A customer ran into a problem with the "inadvertently sharing variables between the EXE and the DLL" bug. Here is the message from the customer liaison: </p>
<blockquote class="q"><p> My customer has a DLL that uses static thread local storage (<code>__declspec(thread)</code>), and he wants to use this DLL from his C# program. Unfortunately, he is running into the limitation when running on Windows&nbsp;XP that DLLs which use static thread local storage <a href="http://support.microsoft.com/kb/118816"> crash when they try to access their thread variables</a>. The customer cannot modify the DLL. What do you recommend? </p>
</blockquote>
<p> <b>Update</b>: Commenter shf gives <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/11/22/10094489.aspx#10095505"> the most complete answer</a>. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (32)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-875703">
				<div id="div-comment-875703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875703">
			November 22, 2010 at 7:10 am</a>		</div>

		<p>I would recommend the customer secure the ability to modify the DLL, find a different [working] DLL that does what he wants, find a way to do what he wants to do in pure C#, or recode his app in C++ so he can use the DLL as intended.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-875713">
				<div id="div-comment-875713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Owen Shepherd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875713">
			November 22, 2010 at 7:17 am</a>		</div>

		<p>And if using a different DLL/modifying this one is absolutely impossible, I would suggest that make a C++ loader which links against the DLL, then loads the .net Framework&#8230;</p>
<p>This is only for the /absolutely/ impossible case, however.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-875723">
				<div id="div-comment-875723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">configurator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875723">
			November 22, 2010 at 7:19 am</a>		</div>

		<p>You can in fact drive a manual transmission without using the clutch. The car needs to have been thoroughly abused before by people who can&#39;t drive a manual, but eventually the clutch becomes just a convenience.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-875733">
				<div id="div-comment-875733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">configurator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875733">
			November 22, 2010 at 7:22 am</a>		</div>

		<p>Also, I notice a recurring theme in your posts. &quot;Windows doesn&#39;t have a time machine.&quot; I guess this is a major bug in Windows, because it&#39;s causing so many other problems.</p>
<p>I&#39;m sure they&#39;re working on it though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-875743">
				<div id="div-comment-875743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875743">
			November 22, 2010 at 7:33 am</a>		</div>

		<p>I know this is nitpicking and missing the point, but&#8230;but&#8230; that&#39;s why we&#39;re programmers &#8211; we obsess about tiny details, right? :) OK, so with my conscience cleared:</p>
<p>Actually for decades already all manual gearboxes have protections so that they don&#39;t spew parts all over the ground. You just can&#39;t put it in the gear if everything isn&#39;t aligned. That includes reverse gear while driving forwards and vice versa. Even Wikipedia writes about it: <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Manual_transmission#Synchromesh" rel="nofollow">en.wikipedia.org/&#8230;/Manual_transmission</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-875753">
				<div id="div-comment-875753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone You Know</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875753">
			November 22, 2010 at 7:36 am</a>		</div>

		<p>@configurator:</p>
<p>Yet another case where Microsoft sucks compared to Apple. Mac OS has had a Time Machine since 2007!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-875763">
				<div id="div-comment-875763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875763">
			November 22, 2010 at 7:41 am</a>		</div>

		<p>I suppose another (fragile) workaround in the case that the customer cannot use a non-bugged DLL would be to create a bunch of dummy thread local variables in his app as placeholders for the ones that the DLL will be using and just never access those. &nbsp;That series of blogs tells how you would control the order they are allocated, although I am not sure how you could apply that to C#, if it is even possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-875773">
				<div id="div-comment-875773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875773">
			November 22, 2010 at 7:41 am</a>		</div>

		<p>I suppose another (fragile) workaround in the case that the customer cannot use a non-bugged DLL would be to create a bunch of dummy thread local variables in his app as placeholders for the ones that the DLL will be using and just never access those. &nbsp;That series of blogs tells how you would control the order they are allocated, although I am not sure how you could apply that to C#, if it is even possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-875783">
				<div id="div-comment-875783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Am I missing something</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875783">
			November 22, 2010 at 7:58 am</a>		</div>

		<p>(If you load it as part of an explicit dependency, then you don&#39;t trigger the bug and the DLL gets its own set of variables as intended.)</p>
<p>Make the C# program load the dll on startup, instead of delay loading&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-875793">
				<div id="div-comment-875793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Staffan Gustafsson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875793">
			November 22, 2010 at 8:13 am</a>		</div>

		<p>If the customer writes a wrapper in C++/Cli, that exposes the needed methods as .net methods, the dll would be loaded as a dependency at startup.</p>
<p>Wouldn&#39;t that work?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-875803">
				<div id="div-comment-875803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875803">
			November 22, 2010 at 8:19 am</a>		</div>

		<p>Hey, wait a minute!</p>
<p>It appears the __declspec(thread) problem is fixed in Vista. I didn&#39;t read Ken&#39;s article yet (it is covered in part 7, and I&#39;m still reading part 4), but I&#39;m fairly certain it involves a time machine that was added in Vista.</p>
<p>What I don&#39;t understand is &#8211; now that you have a time machine, why can&#39;t you add the fix to XP???</p>
<div class="post">[<i>Wouldn&#39;t that break existing Windows XP systems? Changing something this fundamental to the system in a service pack makes customers unhappy. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-875813">
				<div id="div-comment-875813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875813">
			November 22, 2010 at 8:23 am</a>		</div>

		<p>I&#39;ve been scolded before about any program that is not 100% correct deserves to be 0% correct.</p>
<p>Unfortunately my experience is sufficient to know than anyone who depends on a bug deserves to be broken. When a bug causes problems for people who are trying to code as intended it needs to be fixed rather than adding that bug to the long list of things that don&#39;t work right because of some bug that has been preserved for backwards compatibility. This plays double for security bugs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-875823">
				<div id="div-comment-875823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875823">
			November 22, 2010 at 8:34 am</a>		</div>

		<p>[Wouldn&#39;t that break existing Windows XP systems? Changing something this fundamental to the system in a service pack makes customers unhappy. -Raymond]</p>
<p>Won&#39;t be a problem. Use the time machine (from Vista) and fix it in the original XP. No need for a service pack. The incompatible software will not have been written. (I hope I got the tense correct. Time travel screws up the whole tense system).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-875833">
				<div id="div-comment-875833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875833">
			November 22, 2010 at 8:59 am</a>		</div>

		<p>Ivo: Unfortunately, the time machine cannot go back in time to before the machine itself was invented. This means that XP cannot be fixed with the time machine from Vista (nor the one apparently in OS X).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-875843">
				<div id="div-comment-875843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875843">
			November 22, 2010 at 9:15 am</a>		</div>

		<p>&quot;That&#39;s such a crazy idea that it probably never occurred to anyone that somebody would actually build a system that relies on it!&quot;</p>
<p>Perhaps your blog should be more widely read then. My first thought, verbatim, after you introduced the pathological behavior was &quot;Oh God, someone probably depends on it&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-875853">
				<div id="div-comment-875853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875853">
			November 22, 2010 at 9:28 am</a>		</div>

		<p>Gabe: Yes, I realize that now. Silly me.</p>
<p>It would have been a bad idea anyway. If the problem got fixed in XP, the customer wouldn&#39;t have had the problem, Raymond wouldn&#39;t have written the article, I wouldn&#39;t have suggested to go fix XP, and XP probably wouldn&#39;t have been fixed. That&#39;s just a time paradox waiting to happen. Those are never fun. Side effects can range from a mild hangover to the destruction of the multiverse.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-875863">
				<div id="div-comment-875863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875863">
			November 22, 2010 at 11:02 am</a>		</div>

		<p>Mentioned webyote question is on 30th page now:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2007/05/23/407234.aspx?PageIndex=30" rel="nofollow">blogs.msdn.com/&#8230;/407234.aspx</a></p>
<p>Is there really anybody who used this &quot;feature&quot; for anything but writing exploits? I&#39;m not able to figure that out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-875873">
				<div id="div-comment-875873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dmytro</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875873">
			November 22, 2010 at 12:52 pm</a>		</div>

		<p>Make C++ wrapper application for this DLL. Wrapper application loads DLL in right time). Use IPC to communicate between C# app and C++ wrapper app.</p>
<div class="post">[<i>The DLL interface may not be IPC-friendly. And redesigning the interface to an application is a lot of (risky) work. Can you think of something simpler? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-875883">
				<div id="div-comment-875883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tobi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875883">
			November 22, 2010 at 2:51 pm</a>		</div>

		<p>I recommend the C# programm to allocate 1000 TLS slots and not use them. The DLL can then use the slots starting at index 0 als long as there are less that 1000 slots.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-875893">
				<div id="div-comment-875893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875893">
			November 22, 2010 at 3:13 pm</a>		</div>

		<p>seems like you should use alternative methods instead of using __declspec(thread)</p>
<p>that allow dynamic loading</p>
<p>I&#39;ve always thought TLS to be limited&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-875903">
				<div id="div-comment-875903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brooks Moses</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875903">
			November 22, 2010 at 3:25 pm</a>		</div>

		<p>So, um, giving what I thought was the obvious answer to the exercise (but everyone else who&#39;s answered it has said other things): The solution that I&#39;d recommend is simply to load the offending DLL at process startup.</p>
<p>(Actually, I see that Dmytro was suggesting essentially the same thing.)</p>
<div class="post">[<i>Incomplete solution. How to do specify that you want a C# app to load a DLL at startup? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-875913">
				<div id="div-comment-875913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Semi Essessi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875913">
			November 22, 2010 at 4:04 pm</a>		</div>

		<p>What I don&#39;t understand is &#8211; now that you have a time machine, why can&#39;t you add the fix to XP???</p>
<p>[Wouldn&#39;t that break existing Windows XP systems? Changing something this fundamental to the system in a service pack makes customers unhappy. -Raymond]</p>
<p>No, not if you use the time machine to change it in the original XP, and any previous OS you want to retain compatibility with. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-875943">
				<div id="div-comment-875943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">scorpion007</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875943">
			November 22, 2010 at 9:47 pm</a>		</div>

		<p>The problem can be summarized as &quot;static TLS doesn&#39;t work with explicit linking of DLLs in XP and older&quot;. Does C# support a moral equivalent of implicit linking? I.e. __declspec(dllimport)? I suppose not, otherwise that would be a trivial solution.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-875953">
				<div id="div-comment-875953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875953">
			November 22, 2010 at 11:14 pm</a>		</div>

		<p>Hrm&#8230; isn;t this what those .manifest files are for? Can&#39;t he simply use that method to force-preload a DLL? The loader parses those files if present before it even bothers with executing code&#8230;</p>
<p>(I admit, I didn&#39;t read it yet. It would be helpful to get this as homework the night before&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-875963">
				<div id="div-comment-875963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875963">
			November 22, 2010 at 11:36 pm</a>		</div>

		<p>IMHO, the exercise has internal self-contradiction: if they know that the crash happens when the DLL tries to access its TLS, why can&#39;t they just recompile the DLL to resolve the problem? Much more likely, the report would read as follows:</p>
<p>&quot;My customer has a DLL that works just fine, and he wants to use this DLL from his C# program. Unfortunately, he is running into the limitation when running on Windows XP that the DLL crashes quite often. The customer cannot modify the DLL. What do you recommend?&quot;</p>
<p>Isn&#39;t such scenario familiar to you?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-875923">
				<div id="div-comment-875923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875923">
			November 22, 2010 at 6:53 pm</a>		</div>

		<p>I *really* do not recommend this trick, but it would actually work. &nbsp;This is a disgusting, horrible hack that you should not use in production code.</p>
<p>1. Hex edit the import reference to &quot;mscoree.dll&quot; in the C# EXE file to say some other DLL name for your hack, like &quot;dllhack.dll&quot;.</p>
<p>2. Write down the image directory information for the &quot;COM+&quot; descriptor in the IMAGE_OPTIONAL_HEADER32::DataDirectory.</p>
<p>3. Zero the COM+ descriptor directory information in the main executable&#39;s IMAGE_OPTIONAL_HEADER32::DataDirectory[IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR].</p>
<p>4. Create a DLL named dllhack.dll that statically imports the DLL that you need to load at process startup.</p>
<p>5. In dllhack.dll&#39;s DllMain for DLL_PROCESS_ATTACH, use VirtualProtect and overwrite the main EXE&#39;s IMAGE_OPTIONAL_HEADER32::DataDirectory[IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR] with the original values you wrote down in step 2.</p>
<p>Step 3 prevents ntdll.dll from using its special-case handling of COM+ (.NET) executables. &nbsp;After step 5, the fallback mechanism in the main EXE&#39;s entry point will do the correct thing and load mscoree.dll.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-875973">
				<div id="div-comment-875973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">configurator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875973">
			November 23, 2010 at 3:29 am</a>		</div>

		<p>@Worf: The manifest files aren&#39;t read until the .net framework reads them, i.e. after the process starter.</p>
<p>Can&#39;t you just add a static import to the .net dll or exe after having compiled it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-875983">
				<div id="div-comment-875983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-875983">
			November 23, 2010 at 6:13 am</a>		</div>

		<p>I&#39;m surprised that LoadLibrary() doesn&#39;t return an error value when encountering a DLL that uses implicit TLS.</p>
<p>Of course, patching this now on Windows XP would break (already broken) programs that rely on the old behavior, but why did LoadLibrary not reject loading attempts in the first place?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-876033">
				<div id="div-comment-876033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anthony Wieser</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-876033">
			November 23, 2010 at 8:39 am</a>		</div>

		<p>How to load in C#? &nbsp;</p>
<p>How about build a C++ Exe that statically links in the dll, and then it creates an AppDomain in the C++ program, loads in the target c# assembly and executes a named method to launch. &nbsp;</p>
<p>Hey presto!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-876063">
				<div id="div-comment-876063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-876063">
			November 23, 2010 at 9:29 am</a>		</div>

		<p>Simplest method I can think of, others have made suggestions close to this, but not exactly:</p>
<p>1. Create a C++/CLI Exe project.</p>
<p>2. Statically link the unmanaged Dll to the C++/CLI project &#8211; that will cause the OS loader to initialize the Dll&#39;s TLS data.</p>
<p>3. Convert the C# project with the entry point (i.e. Program.Main()) to output a DLL (not strictly necessary, but will reduce confusion of there being two Exe&#39;s)</p>
<p>4. Add a reference to the C# assembly to the C++/CLI project.</p>
<p>5. In the C++/CLI project&#39;s Program.Main() call the C# assemblies Program.Main() to pass control C# code.</p>
<p>There a solution in one line of code (and one extra project)</p>
<div class="post">[<i>This was the solution I had in mind (though you were much more thorough than me). The nice thing about this solution is that you don&#39;t need to change any existing binaries. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-877353">
				<div id="div-comment-877353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dll hell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-877353">
			November 27, 2010 at 3:43 am</a>		</div>

		<p>[Wouldn&#39;t that break existing Windows XP systems? Changing something this fundamental to the system in a service pack makes customers unhappy. -Raymond]</p>
<p>And that&#39;s why Vista users are unhappy!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-877443">
				<div id="div-comment-877443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bruno Martinez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101122-00/?p=12233#comment-877443">
			November 28, 2010 at 5:54 pm</a>		</div>

		<p>What&#39;s the correct way to get &#39;shared variables&#39; as webcyote wanted? &nbsp;I believe you can&#39;t export variables from an .exe in Windows.</p>
<div class="post">[<i>Then export them from the DLL. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

