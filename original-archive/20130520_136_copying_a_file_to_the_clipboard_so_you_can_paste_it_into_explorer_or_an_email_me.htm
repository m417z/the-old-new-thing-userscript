<html>
<head>
<title>Copying a file to the clipboard so you can paste it into Explorer or an email message or whatever</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Copying a file to the clipboard so you can paste it into Explorer or an email message or whatever</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 20, 2013 / year-entry #137</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130520-00/?p=4313</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's Little Program takes a fully-qualified file name from the command line and puts that file onto the clipboard. Once there, you can paste it into an Explorer window, or into an email message, or a word processing document, or anybody else who understands shell data objects. #include <windows.h> #include <shlobj.h> #include <atlbase.h> #include <shlobj.h>...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program takes a fully-qualified file name
from the command line and puts that file onto the clipboard.
Once there, you can paste it into an Explorer window,
or into an email message,
or a word processing document,
or anybody else who understands shell data objects.
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;atlbase.h&gt;
#include &lt;shlobj.h&gt;

class COleInitialize {
public:
 COleInitialize() : m_hr(OleInitialize(NULL)) { }
 ~COleInitialize() { if (SUCCEEDED(m_hr)) OleUninitialize(); }
 operator HRESULT() const { return m_hr; }
 HRESULT m_hr;
};

// <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/09/21/231739.aspx">GetUIObjectOfFile</a> incorporated by reference

int __cdecl wmain(int argc, PWSTR argv[])
{
 COleInitialize init;
 CComPtr&lt;IDataObject&gt; spdto;

 if (SUCCEEDED(init) &amp;&amp;
     argc == 2 &amp;&amp;
     SUCCEEDED(GetUIObjectOfFile(nullptr, argv[1], IID_PPV_ARGS(&amp;spdto))) &amp;&amp;
     SUCCEEDED(OleSetClipboard(spdto)) &amp;&amp;
     SUCCEEDED(OleFlushClipboard())) {
  // success
 }

 return 0;
}
</pre>
<p>
The <code>COle&shy;Initialize</code> class is just the OLE
counterpart to
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/05/20/135841.aspx">
the <code>CCo&shy;Initialize</code> class we saw some time ago</a>.
</p>
<p>
All the program does is take the file name on the command line,
asks the shell for the corresponding data object,
then puts that object onto the clipboard,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/05/10/10009448.aspx">
erasing what was there before</a>.
</p>
<p>
Once the data is on the clipboard, our job is done so we exit.
</p>
<p>
No, wait!
If you exit while your application has data on the clipboard,
that clipboard data may be lost.
The documentation for <code>Ole&shy;Set&shy;Clipboard</code>
notes:
</p>
<blockquote CLASS=q><p>
If you need to leave the data on the clipboard
after your application is closed,
you should call <b>Ole&shy;Flush&shy;Clipboard</b>
rather than calling
<b>Ole&shy;Set&shy;Clipboard</b>
with a <b>NULL</b> parameter value.
</p>
</blockquote>
<p>
Therefore, we stick in a call to
<code>Ole&shy;Flush&shy;Clipboard</code>
before exiting.
This forces any delay-rendered content to be rendered immediately,
because we ain't gonna be around to delay-render it no more.
</p>
<p>
Note that the file on the command line must be fully-qualified,
because we pass it straight to
<code>Get&shy;UI&shy;Object&shy;Of&shy;File</code>,
which expects a fully-qualified path.
Fixing the program to allow relative paths (and to actually
print error messages and stuff) is left as an exercise,
because Little Programs don't deal with annoying details like
error checking and reporting.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1057423">
				<div id="div-comment-1057423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130520-00/?p=4313#comment-1057423">
			May 20, 2013 at 4:47 pm</a>		</div>

		<p>Nitpick:</p>
<p>COleInitialize() : m_hr(OleInitialize(NULL)) { }</p>
<p>~COleInitialize() { if (SUCCEEDED(m_hr)) OleUninitialize(); }</p>
<p>It is just possible that the runtime will succeed creation of all the members but then decide that for some reason it can&#39;t create the containing object. In such a scenario OleInitialize(NULL) will be called (and may succeed), but OleUninitialize() will not be called. Fix would be to change the constructor as follows:</p>
<p>COleInitialize() { m_hr = OleInitialize(NULL); }</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1057433">
				<div id="div-comment-1057433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130520-00/?p=4313#comment-1057433">
			May 20, 2013 at 4:55 pm</a>		</div>

		<p>Another nitpick:</p>
<p>#include &lt;shlobj.h&gt;</p>
<p>#include &lt;atlbase.h&gt;</p>
<p>#include &lt;shlobj.h&gt;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1057443">
				<div id="div-comment-1057443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130520-00/?p=4313#comment-1057443">
			May 20, 2013 at 6:23 pm</a>		</div>

		<p>@Maurits: What you say is technically true, but it&#39;s rather irrelevant to the example. In Raymond&#39;s code there are no intervening initializations that could throw, so the constructor will complete and the destructor will get called at scope exit. If your OLE initializer is esoteric enough to trigger the behavior you describe, then you&#39;re doing RAII wrong. Besides, Raymond&#39;s intializer is much more likely to do the right thing than putting the calls directly into wmain. So, no, there&#39;s nothing really wrong with using the initializer list there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1057453">
				<div id="div-comment-1057453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130520-00/?p=4313#comment-1057453">
			May 20, 2013 at 7:14 pm</a>		</div>

		<p>I&#39;d suspect the fact the process terminates almost immediately on failure means the error-cleanup is irrelevant.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm even thread-even depth-1" id="comment-1057463">
				<div id="div-comment-1057463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130520-00/?p=4313#comment-1057463">
			May 20, 2013 at 7:25 pm</a>		</div>

		<p>Maurits, in what situation do you think that it would be possible for the creation of that object, exactly as it is defined, to fail after the OleInitialize function has returned when it&#39;s in the member initialization list, but not when it&#39;s in the body of the constructor?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00034001a5381f07 odd alt thread-odd thread-alt depth-1" id="comment-1057473">
				<div id="div-comment-1057473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Georg_Rottensteiner' rel='external nofollow' class='url'>Georg_Rottensteiner</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130520-00/?p=4313#comment-1057473">
			May 20, 2013 at 10:15 pm</a>		</div>

		<p>Could that be a setup to the really really complicated way to delay render a virtual file?</p>
<p>(such as needed when you write a compressor GUI and want to drag files outside which then will be uncompressed on the fly)</p>
<p>Is there a full example of something like that documented somewhere? Back when I needed that I had to combine a few samples from various web sites and it felt horribly complex.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1057563">
				<div id="div-comment-1057563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Francis Gagne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130520-00/?p=4313#comment-1057563">
			May 21, 2013 at 4:59 pm</a>		</div>

		<p>When exiting Microsoft Word (and maybe other Office applications), if you&#39;re copied some fancy OLE object from Word to the clipboard, Word will ask whether you want to keep that data on the clipboard or not. Reading this article, I figured Word is probably asking me whether it should call OleFlushClipboard or clear the clipboard. (I never worked directly with the clipboard API functions, so I didn&#39;t know about OleFlushClipboard).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis odd alt thread-odd thread-alt depth-1" id="comment-1057573">
				<div id="div-comment-1057573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130520-00/?p=4313#comment-1057573">
			May 21, 2013 at 6:03 pm</a>		</div>

		<p>I&#39;ll just say one thing: &nbsp;clip.exe</p>
<p>Check it out. &nbsp;One of the most useful programs in System32.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1058113">
				<div id="div-comment-1058113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130520-00/?p=4313#comment-1058113">
			May 26, 2013 at 12:23 pm</a>		</div>

		<p>You&#39;re doing it wrong. Please don&#39;t teach people these hacks.</p>
<p>No need to use bloated COM for this, Winapi can do this stuff just fine. With less, and more readable, code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1058123">
				<div id="div-comment-1058123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130520-00/?p=4313#comment-1058123">
			May 26, 2013 at 2:10 pm</a>		</div>

		<p>OpenClipboard</p>
<p>SetClipboardData</p>
<p>CloseClipboard</p>
<p>&#8230;are more than enough.</p>
<div class="post">[<em>Sure, if you want to manually set a bunch of different clipboard formats. (CFSTR_SHELLIDLIST, CFSTR_SHELLIDLISTOFFSET, CFSTR_FILEDESCRIPTOR, CFSTR_FILECONTENTS, CFSTR_FILENAME, CF_HDROP, CFSTR_PREFERREDDROPEFFECT, plus the drag image formats, plus other stuff I&#39;m probably forgetting. Why not just let the shell do all the heavy lifting?) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

