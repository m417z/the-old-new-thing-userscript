<html>
<head>
<title>The MIPS R4000, part 1: Introduction</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The MIPS R4000, part 1: Introduction</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 2, 2018 / year-entry #78</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>30</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Here we go again.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Continuing in the
"Raymond introduces you to a
CPU architecture that Windows once
supported but no longer does" sort-of series,
here we go with the MIPS R4000.
</p>
<p>
The MIPS R4000 implements the MIPS III architecture.
It is a 64-bit processor, but Windows NT used it in 32-bit mode.
I'll be focusing on the aspects of the processor relevant
to debugging user-mode programs on Windows NT.
This means that I may skip over various technical details
on the assumption that the compiler knows what the rules are
and won't (intentionally) generate code that violates them.
</p>
<p>
Throughout, I will say "MIPS" instead of "MIPS III architecture".
Some of the issues do not apply to later versions of the architecture
family, but I am focusing on MIPS III since that's what Windows NT used.
</p>
<p>
The MIPS is a RISC-style load-store processor:
The only operations you can perform with memory are load and store.
There is no "add value to memory" instruction, for example.
Each instruction is 32 bits wide, and the program counter must
be on an exact multiple of 4.
</p>
<p>
The processor can operate in either little-endian or big-endian mode;
Windows NT uses little-endian mode,
and even though some instructions change behavior depending on whether the
processor is in big-endian or little-endian mode,
I will discuss only the little-endian case.
</p>
<p>
The architectural terminology for a 32-bit value is a
<i>word</i> (w), and a 16-bit value is a <i>halfword</i> (h).
There's also
<i>doubleword</i> (d) for 64-bit values, but we won't see it
here because we are focusing on the 32-bit mode of the processor.
</p>
<p>
The MIPS has 32 general-purpose integer registers,
formally known as registers <var>$0</var> through <var>$31</var>,
but which conventionally go by these names:
</p>
<table BORDER="1" CELLSPACING="0" CELLPADDING="3" STYLE="border: solid 1px black;border-collapse: collapse">
<tr>
<th>Register</th>
<th>Mnemonic</th>
<th>Meaning</th>
<th>Preserved?</th>
<th>Notes</th>
</tr>
<tr>
<td><var>$0</var></td>
<td><var>zero</var></td>
<td>reads as zero</td>
<td>Immutable</td>
<td>Writes are ignored</td>
</tr>
<tr>
<td><var>$1</var></td>
<td><var>at</var></td>
<td>assembler temporary</td>
<td>Volatile</td>
<td>Helper for synthesized instructions</td>
</tr>
<tr>
<td><var>$2</var></td>
<td><var>v0</var></td>
<td>value</td>
<td>No</td>
<td>On function exit, contains the return value</td>
</tr>
<tr>
<td><var>$3</var></td>
<td><var>v1</var></td>
<td>value</td>
<td>No</td>
<td>High 32 bits of return value (for 64-bit values)</td>
</tr>
<tr>
<td><var>$4</var>&hellip;<var>$7</var></td>
<td><var>a0</var>&hellip;<var>a3</var></td>
<td>argument</td>
<td>No</td>
<td>On function entry, contains function parameters</td>
</tr>
<tr>
<td><var>$8</var>&hellip;<var>$15</var></td>
<td><var>t0</var>&hellip;<var>t7</var></td>
<td>temporary</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td><var>$16</var>&hellip;<var>$23</var></td>
<td><var>s0</var>&hellip;<var>s7</var></td>
<td>saved</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td><var>$24</var>&hellip;<var>$25</var></td>
<td><var>t8</var>&hellip;<var>t9</var></td>
<td>temporary</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td><var>$26</var>&hellip;<var>$27</var></td>
<td><var>k0</var>&hellip;<var>k1</var></td>
<td>kernel</td>
<td>No access</td>
<td>Reserved for kernel use</td>
</tr>
<tr>
<td><var>$28</var></td>
<td><var>gp</var></td>
<td>global pointer</td>
<td>Yes</td>
<td>Not used by 32-bit code</td>
</tr>
<tr>
<td><var>$29</var></td>
<td><var>sp</var></td>
<td>stack pointer</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td><var>$30</var></td>
<td><var>s8</var></td>
<td>frame pointer</td>
<td>Yes</td>
<td>For functions with variable-sized stacks</td>
</tr>
<tr>
<td><var>$31</var></td>
<td><var>ra</var></td>
<td>return address</td>
<td>Maybe</td>
<td></td>
</tr>
</table>
<p>
The <var>zero</var> register reads as zero,
and writes to it are ignored.
</p>
<p>
The <var>k0</var> and <var>k1</var> registers are
reserved for kernel use,
and no well-written user-mode program will use them.&sup1;
</p>
<p>
Win32 requires that
the <var>sp</var> and <var>s8</var> registers
be used for their stated purpose throughout the entire function.
If a function does not have a variable-sized stack frame,
then it can use <var>s8</var> for any purpose
(which is why the disassembler calls it <var>s8</var>
instead of <var>fp</var>, I guess).
And since 32-bit code doesn't ascribe special meaning to
<var>gp</var>, then it too can be used for any purpose,
provided its value is preserved across the call.
In practice the Microsoft compiler merely
avoids the <var>gp</var> register completely,
and it uses the <var>s8</var> register only as a frame pointer.
</p>
<p>
The stack is always aligned on an 8-byte boundary,
and there is no
<a HREF="https://en.wikipedia.org/wiki/Red_zone_(computing)">
red zone</a>.
</p>
<p>
Some registers have stated purposes only at entry to a function or
exit from a function.
When not at the function boundary, those registers may be used for
any purpose.
</p>
<p>
Register marked with "Yes" in the "Preserved" column must be
preserved across the call;
those marked "No" do not.
</p>
<p>
The <var>ra</var> register is marked "Maybe" because you
don't normally need to preserve it.
However, if you are a leaf function that does not modify
any preserved registers
(not even <var>sp</var>),
then you can skip the generation of unwind codes for the leaf
function, but you must keep the return address in <var>ra</var>
for the duration of your function so that the operating system
can unwind out of the function should an exception occur.
(Special rules for lightweight leaf functions
also exist for
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20150730-00/?p=90791">
Itanium</a>,
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170807-00/?p=96766">
Alpha AXP</a>,
and x64.)
</p>
<p>
The <var>at</var> register is volatile because the assembler can use it
for various invisible purposes,
primarily for synthesizing
missing instructions.
We'll see examples of this as we go.
</p>
<p>
There are also two special-purpose integer registers,
called <var>HI</var> and <var>LO</var>.
These are used by multiplication and division instructions,
and we'll cover them when we get to multiplication and division.
</p>
<p>
There are 32 single-precision (32-bit) floating point registers,
which can be paired up to form 16 double-precision (64-bit) floating point
registers.
When a pair is used to operate on a single-precision value,
the lower-numbered register holds the value, and the higher-numbered
register is not used.
(Indeed, the value in the higher-numbered register will be garbage.)
So I guess you really have just 16 single-precision floating point registers,
since the odd-numbered ones are basically useless.
</p>
<table BORDER="1" CELLSPACING="0" CELLPADDING="3" STYLE="border: solid 1px black;border-collapse: collapse">
<tr>
<th>Register(s)</th>
<th>Meaning</th>
<th>Preserved?</th>
<th>Notes</th>
</tr>
<tr>
<td><var>$f0</var>/<var>$f1</var></td>
<td>return value</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td><var>$f2</var>/<var>$f3</var></td>
<td>second return value</td>
<td>No</td>
<td>For imaginary component of complex number.</td>
</tr>
<tr>
<td><var>$f4</var>/<var>$f5</var>&hellip;<var>$f10</var>/<var>$f11</var></td>
<td>temporary</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td><var>$f12</var>/<var>$f13</var>&hellip;<var>$f14</var>/<var>$f15</var></td>
<td>arguments</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td><var>$f16</var>/<var>$f17</var>&hellip;<var>$f18</var>/<var>$f19</var></td>
<td>temporary</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td><var>$f20</var>/<var>$f21</var>&hellip;<var>$f30</var>/<var>$f31</var></td>
<td>saved</td>
<td>Yes</td>
<td></td>
</tr>
</table>
<p>
<p>
Floating point support is optional.
If not supported, floating point instructions will trap into the kernel,
and the kernel is expected to emulate the instruction.
</p>
<p>
There is not a lot of floating point in typical systems programming,
so I won't cover it except when discussing the calling convention later.
</p>
<p>
There is no flags register.
Hopefully you don't find this weird any more,
seeing as
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170811-00/?p=96805">
we already encountered this with the Alpha AXP</a>.
</p>
<p>
The 32-bit address space is split down the middle between
user-mode and kernel-mode.
The kernel-mode space is further split:
Half of the kernel-mode address space is dedicated to mapping
physical addresses
(the lowest
512<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090611-00/?p=17933">MB</a>&sup2;
gets mapped twice, once cached and once uncached),
leaving only 1GB for the operating system.
This partitioning is architectural;
you don't get a choice in the matter.
</p>
<p>
Okay, we'll begin next time by looking at 32-bit integer calculations.
</p>
<p>
&sup1;
I know you're wondering what happens if poorly-written
user-mode code tries to use them.
The answer is that user-mode code can modify the register all it wants,
but the value read back may not be equal to value last written.
As far as user mode is concerned,
it's basically a black hole register that reads as garbage.
This makes it even more useless than the
<var>zero</var> register, which is a black hole
register that at least reads as zero.
(Internally, the registers are used by kernel mode as
scratch variables during interrupt and exception handling.)
</p>
<p>
&sup2;
I guess they figured that if you had more than 512MB of RAM,
you'd have switched to a 64-bit operating system.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (30)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-michael-ratanapintha even thread-even depth-1 parent" id="comment-1331635">
				<div id="div-comment-1331635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Michael+Ratanapintha+%28ex-Microsoft%29' rel='external nofollow' class='url'>Michael Ratanapintha (ex-Microsoft)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331635">
			April 2, 2018 at 7:15 am</a>		</div>

		<p>I look forward to your explaining the branch delay slot (and the branch if likely instructions if Windows used them). That will be &#8220;fun&#8221;!</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1331655">
				<div id="div-comment-1331655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331655">
			April 2, 2018 at 7:18 am</a>		</div>

		<p>Maybe Raymond will explain what happens if you get interrupt in the branch delay slot. I got a dumb/wrong answer in grad school.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1331855">
				<div id="div-comment-1331855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://os161.eecs.harvard.edu' rel='external nofollow' class='url'>David Holland</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331855">
			April 2, 2018 at 4:57 pm</a>		</div>

		<p>If you get a trap (interrupt, TLB miss, whatever) in a delay slot, the processor rolls back to the beginning of the branch instruction, so afterwards the branch gets restarted. There&#8217;s a flag in one of the supervisor status registers that tells the kernel what happened if it needs to know. (Which it might, e.g. for emulation of floating point instructions.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1331965">
				<div id="div-comment-1331965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331965">
			April 3, 2018 at 1:21 pm</a>		</div>

		<p>Which nicely explains why a conditional branch in a delay slot is undefined despite appearing to work (my Google-fu has limits).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude even thread-odd thread-alt depth-1 parent" id="comment-1331645">
				<div id="div-comment-1331645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331645">
			April 2, 2018 at 7:16 am</a>		</div>

		<p>I presume the calculus for not doing 64bit support at the time was that the ram wasn&#8217;t available and the extra memory needed for the 64bit structures wasn&#8217;t worth it?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1331705">
				<div id="div-comment-1331705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331705">
			April 2, 2018 at 10:41 am</a>		</div>

		<p>Also, you probably don&#8217;t want to make developers (both Microsoft and ISV) do two really hard things to a code base at the same time: Port to a radically different architecture + port to a new pointer size.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1331735">
				<div id="div-comment-1331735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331735">
			April 2, 2018 at 12:06 pm</a>		</div>

		<p>Rationale for why MIPS added 64-bit support when they did straight from the horse&#8217;s mouth: <a href="http://yarchive.net/comp/64bit.html" rel="nofollow">http://yarchive.net/comp/64bit.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude odd alt depth-3 parent" id="comment-1331745">
				<div id="div-comment-1331745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331745">
			April 2, 2018 at 12:19 pm</a>		</div>

		<p>The snarky programmer in me says &#8220;But if they had been writing standards compliant code in the first place!&#8221; but the realist knows that&#8217;s <b>never</b> the case in reality. Moreover I know the windows ABI changed between x86 and x64 as well.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1331755">
				<div id="div-comment-1331755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331755">
			April 2, 2018 at 12:51 pm</a>		</div>

		<p>The x86 and x64 share a lot of architectural properties, like &#8220;atomic read-modify-write operations&#8221;, &#8220;extremely forgiving of misalignment&#8221; and &#8220;has an architectural stack pointer!&#8221; This means that nearly all of your porting issues are due to the pointer size, not the architecture behaving in fundamentally different ways from what you are used to.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude odd alt depth-5" id="comment-1331765">
				<div id="div-comment-1331765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331765">
			April 2, 2018 at 1:04 pm</a>		</div>

		<p>In all honestly I don&#8217;t think <code>intptr_t</code> and <code>uintptr_t</code> even existed at the time this port would have been made anyway. I think the assumption was that <code>long</code> would manage that. I suspect the reason both exist in the first place is because of MS&#8217; struggles with <code>LONG</code> when porting windows.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1331665">
				<div id="div-comment-1331665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matteo Italia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331665">
			April 2, 2018 at 9:18 am</a>		</div>

		<p>&#8220;Internally, the registers are used by kernel mode as scratch variables during interrupt and exception handling&#8221; I suppose that this means that the kernel had to be careful not to leak reserved information through these registers? Or they were just used for plumbing about the current process, so no reserved stuff is handled there at all?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1331725">
				<div id="div-comment-1331725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aged .Net Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331725">
			April 2, 2018 at 10:57 am</a>		</div>

		<p>I&#8217;m betting  that concerns for co-executing malware and information leakage were not nearly so prevalent then as now.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1331835">
				<div id="div-comment-1331835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331835">
			April 2, 2018 at 3:41 pm</a>		</div>

		<p>The thing k0/k1 were intended for was the TLB miss handler. (MIPS R4000 has software-managed TLBs; not sure if this is still true for current MIPS designs.)</p>
<p>Since this is a TLB miss and thus more likely/frequent than a &#8220;true&#8221; page fault, performance was a concern, and burning 2 out of 32 registers on it was considered a worthwhile trade-off. Other interrupts and exceptions took a different route that was considered less critical, so saving a few registers, switching to a kernel stack, etc. was acceptable overhead there. Some notes and history here: <a href="http://yarchive.net/comp/software_tlb.html" rel="nofollow">http://yarchive.net/comp/software_tlb.html</a> &#8211; search for &#8220;UTLBMISS&#8221;.</p>
<p>I&#8217;m not sure whether OS kernels at the time bothered with clearing k0/k1 before returning; they potentially contain information about physical addresses and contents of user-mode page table entries, which is now (a couple decades of ingenious exploits later&#8230;) unambiguously considered a security risk but might not have been then. Either way, clearing the two registers would add 2 instructions at the end of the handler, which could probably be smuggled into the already-present branch/coprocessor delay slots. (See the two NOPs at the end of the code fragment in the post I linked to.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1331935">
				<div id="div-comment-1331935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matteo Italia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331935">
			April 3, 2018 at 10:01 am</a>		</div>

		<p>Really interesting, thank you for the explanation.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1331685">
				<div id="div-comment-1331685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331685">
			April 2, 2018 at 10:04 am</a>		</div>

		<p>Ah I love this series. It is very interesting how these details differ for different chips</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-even depth-1" id="comment-1331695">
				<div id="div-comment-1331695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331695">
			April 2, 2018 at 10:20 am</a>		</div>

		<p>I always enjoy these CPU series but at the end I&#8217;m always glad that x86 won.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1331715">
				<div id="div-comment-1331715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331715">
			April 2, 2018 at 10:44 am</a>		</div>

		<p>oh thing brings back memories of intro-to-arch classes and xspim (the unix mips emulator)..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1331865">
				<div id="div-comment-1331865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">quiret</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331865">
			April 3, 2018 at 1:45 am</a>		</div>

		<p>A big personality at MSFT really did not want to optimize for the x86 architecture so he kept NT compatible to MIPS as big reminder: NT gotta run on everything that computes :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-p-glizniewicz even thread-odd thread-alt depth-1 parent" id="comment-1331875">
				<div id="div-comment-1331875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GL1zdA' rel='external nofollow' class='url'>GL1zdA</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331875">
			April 3, 2018 at 5:05 am</a>		</div>

		<p>I&#8217;ve read in &#8220;Inside Windows NT&#8221; that the MIPS was the reason why the address space is split this way on NT. But was NT compatibility the reason why Windows 95&#8217;s address space is split the same way (so that effectively Windows 95 memory partitioning was made MIPS compatible)?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1332035">
				<div id="div-comment-1332035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1332035">
			April 4, 2018 at 12:52 am</a>		</div>

		<p>The 2GB split <a href="https://blogs.msdn.microsoft.com/oldnewthing/20170809-00/?p=96785">was also important for Alpha AXP</a>.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1331915">
				<div id="div-comment-1331915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Euro Micelli</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331915">
			April 3, 2018 at 9:17 am</a>		</div>

		<p>So, when you said this week would be &#8220;boring topics&#8221;, that was obviously an April Fool&#8217;s joke.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1331925">
				<div id="div-comment-1331925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://e8johan.se' rel='external nofollow' class='url'>Johan Thelin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331925">
			April 3, 2018 at 9:51 am</a>		</div>

		<p>I just have to say that I really love these ISA series. I actually spent a semester at university implementing something very similar to the MIPS architecture back in the early 2000 &#8211; the JAM CPU.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1331945">
				<div id="div-comment-1331945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1331945">
			April 3, 2018 at 10:11 am</a>		</div>

		<p>It&#8217;s kind of cool to have a zero register that you can always read from.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fjeldse odd alt depth-2" id="comment-1332005">
				<div id="div-comment-1332005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Erik+F' rel='external nofollow' class='url'>Erik F</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1332005">
			April 3, 2018 at 7:36 pm</a>		</div>

		<p>That&#8217;s also the place where you can return bits to the processor once you&#8217;ve used them. It&#8217;s really quite a useful register!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1332105">
				<div id="div-comment-1332105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1332105">
			April 4, 2018 at 12:34 pm</a>		</div>

		<p>It&#8217;s also really useful as a prefetch hint but I can&#8217;t remember if MIPS supported that.</p>
<p><a href="http://yarchive.net/comp/zero_register.html" rel="nofollow">http://yarchive.net/comp/zero_register.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1332525">
				<div id="div-comment-1332525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1332525">
			April 9, 2018 at 9:38 pm</a>		</div>

		<p>I have no idea what you mean by a separate cached and uncached mapping</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1332545">
				<div id="div-comment-1332545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1332545">
			April 10, 2018 at 8:40 am</a>		</div>

		<p>A mapping in this context is used by the processor to translate from physical addresses to virtual addresses.  It also has some flags, one of which specifies whether accesses to the memory are cached or not.  Having an uncached block of memory is useful if you want to give it to a device to perform DMA to/from.  A cached block is more useful if you want to use the CPU to read/write the block.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1332585">
				<div id="div-comment-1332585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1332585">
			April 10, 2018 at 8:35 pm</a>		</div>

		<p>So &#8220;cached&#8221; is in the sense of &#8220;should I use the L2 cache&#8221;?<br />
Makes sense I guess.  Thanks!</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1332675">
				<div id="div-comment-1332675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1332675">
			April 11, 2018 at 9:16 am</a>		</div>

		<p>Correct, but the cached flag means any CPU cache, not just the L2 cache.  Writing to non-cached memory with the CPU is much slower since every byte you read/write has to go out to the physical memory.  That&#8217;s why you normally use cached mappings, and in a typical program you never really think about this because all your memory is always cached and set up by the OS.  However, using cached memory makes using DMA more complex since you have to invalidate and/or flush the cache whenever you use the CPU to read/write the memory or you will get inconsistent results.</p>
<p>I should have also specified that the mapping is for translating from virtual to physical addresses as well, which from a typical programming perspective is probably the more useful way to think about it.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1332965">
				<div id="div-comment-1332965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marvy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180402-00/?p=98415#comment-1332965">
			April 12, 2018 at 8:14 pm</a>		</div>

		<p>Thanks.  I&#8217;m so used to cached memory it never occurred to me until I read your comment that non-cached is even an option!<br />
But it makes sense: if the CPU is not the only one using the memory, than having the CPU cache things is just asking for trouble.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

