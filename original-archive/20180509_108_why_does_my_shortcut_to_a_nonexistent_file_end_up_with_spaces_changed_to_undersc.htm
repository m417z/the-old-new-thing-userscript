<html>
<head>
<title>Why does my shortcut to a nonexistent file end up with spaces changed to underscores?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does my shortcut to a nonexistent file end up with spaces changed to underscores?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 9, 2018 / year-entry #108</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180509-00/?p=98715</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Trying to make the best of a bad situation.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer wanted to create shortcuts to a network drive that hadn't
yet been mapped.
The idea is that they would create these shortcuts pointing at
a network drive <code>N:</code> and deploy them.
When the user logs in, a script will map the <code>N:</code> drive
to an appropriate network server where the files will exist.
The customer cannot have the shortcuts point directly at the server
via a UNC because the UNC connection requires special credentials
that users won't have.
</p>
<p>
The customer found that if they tried to create the shortcut to a nonexistent
network drive, the path was being corrupted.
Specifically, spaces were being changed to underscores.
Here's a sample program.
(Error checking elided for expository purposes.)
</p>
<pre>
#define UNICODE
#define <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20040212-00/?p=40643">_UNICODE</a>
#include &lt;windows.h&gt;
#include &lt;ole2.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;atlbase.h&gt;

int __cdecl wmain(int, wchar_t**)
{
  <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20040520-00/?p=39243">CCoInitialize</a> init;
  CComPtr&lt;IShellLink&gt; link;
  CoCreateInstance(CLSID_ShellLink, nullptr, CLSCTX_INPROC_SERVER,
                   IID_PPV_ARGS(&amp;link));
  link-&gt;SetPath(L"N:\\dir\\some file that doesn't exist.txt");
  CComQIPtr&lt;IPersistFile&gt;(link)-&gt;Save(L"C:\\test\\test.lnk", TRUE);
  return 0;
}
</pre>
<p>
Why is the shortcut being saved incorrectly?
</p>
<p>
The short answer is that the shortcut is being saved incorrectly
because you set an invalid path.
When you call <code>Set&shy;Path</code> and
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20150402-00/?p=44323">
pass a path to something that doesn't exist</a>,
the shortcut code panics and says, "Oh no, what is this thing?"
It then goes into a series of compatibility
heuristics to try to make sense of the
invalid parameter.
</p>
<ul>
<li>Did the caller erroneously put quotation marks around the path?
    If so, then remove them.</li>
<li>Maybe the caller intended to link to a program but forgot the
    <code>.exe</code> extension.
    See if adding <code>.exe</code> helps.</li>
<li>Maybe the caller intended to link to a program but didn't pass
    a fully-qualified path. Search the path for a matching program
    and use the first one you find, if any.</li>
<li>Maybe the caller used slashes instead of backslashes.
    Fix any wayward slashes.</li>
<li>Maybe, maybe, maybe&hellip;</li>
</ul>
<p>
These are all heuristics and should not be relied upon.
</p>
<p>
The heuristic that is triggering in this case is one that says,
"Well, I see a drive letter, and the drive won't tell me if it
supports long file names, so I'll assume it doesn't,
and I'm going to replace characters that aren't legal in short
file names with underscores. Maybe that'll help."
It doesn't help, but the damage is done.
The spaces became underscores.
</p>
<p>
The critical step is the fact that there is no <code>N:</code> drive,
which means that when the code checks whether the volume in drive
<code>N:</code> supports long file names, the answer is
"Volume? What volume?"
That's why this occurs only when you try to create a shortcut to
a nonexisting volume.
If you try to create a shortcut to a nonexistent file on an existing
volume, then this heuristic won't kick in, because the existing volume
supports long file names.
</p>
<p>
The heuristics are constantly being tweaked.
In the Windows 10 Creators Update,
the heuristic about short file names was removed,
presumably on the theory that everybody worth supporting
supports long file names now.
</p>
<p>
Okay, so what is the correct thing to do if you want to create
a shortcut to a file that doesn't exist yet?
</p>
<p>
Instead of using <code>IShell&shy;Link::</code><code>Set&shy;Path</code>,
use <code>IShell&shy;Link::</code><code>Set&shy;ID&shy;List</code>
with a simple pidl.
</p>
<pre>
int __cdecl wmain(int, wchar_t**)
{
  <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20040520-00/?p=39243">CCoInitialize</a> init;
  CComPtr&lt;IShellLink&gt; link;
  CoCreateInstance(CLSID_ShellLink, nullptr, CLSCTX_INPROC_SERVER,
                   IID_PPV_ARGS(&amp;link));

  <font COLOR="blue">WIN32_FIND_DATAW fd = {};

  // it's a file (not a directory)
  fd.dwFileAttributes = FILE_ATTRIBUTE_NORMAL;

  CComHeapPtr&lt;ITEMIDLIST_ABSOLUTE&gt; simplePidl;
  <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20130503-00/?p=4463">CreateSimplePidl</a>(&amp;fd,
    L"N:\\dir\\some file that doesn't exist.txt",
    &amp;simplePidl);

  link-&gt;SetIDList(simplePidl);</font>

  CComQIPtr&lt;IPersistFile&gt;(link)-&gt;Save(L"C:\\test\\test.lnk", TRUE);
  return 0;
}
</pre>
<p>
A simple pidl lets you talk about something that might not exist.
We use it here to create a shortcut to a file that might not exist.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1336265">
				<div id="div-comment-1336265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://geelaw.blog/' rel='external nofollow' class='url'>Gee Law</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180509-00/?p=98715#comment-1336265">
			May 9, 2018 at 10:03 am</a>		</div>

		<p>I clicked the link to &#8220;It appears that some programmers think that Windows already ships with that time machine the Research division is working on&#8221;, and found that Microsoft Office was another offender that creates shortcut before resources it needs have been installed.</p>
<p>Ping back: <a href="https://geelaw.blog/entries/desktop-app-tile-colour/" rel="nofollow">https://geelaw.blog/entries/desktop-app-tile-colour/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1336275">
				<div id="div-comment-1336275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180509-00/?p=98715#comment-1336275">
			May 9, 2018 at 11:06 am</a>		</div>

		<p>Now I wonder what happens when the script breaks one day, the user clicks the shortcut, the drive is not mapped, and the shortcut fixup code gets confused.  Would it just declare the shortcut &#8220;broken&#8221; and delete it?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev even depth-2" id="comment-1336625">
				<div id="div-comment-1336625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180509-00/?p=98715#comment-1336625">
			May 11, 2018 at 7:19 am</a>		</div>

		<p>It&#8217;s worse.</p>
<p>The ever so wise &#8220;Desktop cleanup service&#8221; or whatever it&#8217;s called, runs in non-user account.<br />
If it encounters a shortcut to a network location (or user-specific mapped drive), it considers the shortcut pointing to a non-accessible location and deletes it. Smart, isn&#8217;t it?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1336285">
				<div id="div-comment-1336285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180509-00/?p=98715#comment-1336285">
			May 9, 2018 at 12:55 pm</a>		</div>

		<p>I&#8217;m probably missing something here, but why not just save the short-cut as the (completely unreachable) byte-by-byte string?  After all, that&#8217;s what you would do if the short-cut was, in fact, reachable.</p>
<p>You&#8217;d have to go through the same set of heuristics either way, and it&#8217;s not obvious to me why you&#8217;d want to elide the information given in the original (unreachable) path.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1336295">
				<div id="div-comment-1336295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://www.broadheath.com/' rel='external nofollow' class='url'>Frank Wilhoit</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180509-00/?p=98715#comment-1336295">
			May 9, 2018 at 1:42 pm</a>		</div>

		<p>Surely, any change that fails to accomplish the desired result should be backed out before proceeding?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1336325">
				<div id="div-comment-1336325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180509-00/?p=98715#comment-1336325">
			May 9, 2018 at 5:50 pm</a>		</div>

		<p>Good riddance. Short name demands turn up from time to time, but restricted characters seems to be only CDROMs these days.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1336355">
				<div id="div-comment-1336355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180509-00/?p=98715#comment-1336355">
			May 10, 2018 at 2:05 am</a>		</div>

		<p>&#8220;&#8230; the heuristic about short file names was removed, presumably on the theory that everybody worth supporting supports long file names now.&#8221;</p>
<p>&#8220;Long&#8221; file names means up to &#8220;MAX_PATH==260&#8221;, right?</p>
<p>I sometimes wonder what&#8217;s the best practice for a program running on a system with &#8220;HKLM\SYSTEM\CurrentControlSet\Control\FileSystem→LongPathsEnabled==1&#8221;, an application manifest specifying &#8220;longPathAware==true&#8221;, that is using Windows Shell API functionality.</p>
<p>Should any shell-related operations for &#8220;long-long (cch==32767)&#8221; file names fail, if they can&#8217;t be converted to &#8220;long (MAX_PATH)&#8221; file names? Will MAX_PATH be redefined to 32767, one day? Will there be a superset of Shell API functions (like, &#8220;SHAddToRecentDocs[A|W]L&#8221;, &#8220;ExtractIcon[A|W]L&#8221;, etc.), to support &#8220;long-long&#8221; file names?</p>
<p>Human beings have very limited capabilities: we can only perceive a very small spectrum of light rays and audio frequencies, and we have restricted working memory (maybe Raymond you are the exception of the rule, here). So I believe a human being can&#8217;t do any really reasonable work with a collection of files with &#8220;long-long&#8221; file names, and I do not worry too much about my programs lacking support. Of course, 8.3 was too short, but 32767 excels our brain capacities, somehow.</p>
<p>I would really appreciate your opinion on this topic!</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1336415">
				<div id="div-comment-1336415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180509-00/?p=98715#comment-1336415">
			May 10, 2018 at 8:46 am</a>		</div>

		<p>&#8220;So I believe a human being can’t do any really reasonable work with a collection of files with “long-long” file names,&#8221; &#8230;  &#8220;32767 excels our brain capacities, somehow.&#8221;</p>
<p>Yes, if you were manually creating these paths all at once, or typing them.  But it&#8217;s EASY to get past 260 or so path characters when you have well-designed deep folder hierarchies (perhaps on a shared network drive), each level of which has a descriptive folder name&#8230; maybe including a 100-character division name, a 100-character department name, a 100-character project name, and some multi-level folders that contain project files.   We don&#8217;t memorize the 32K path name.</p>
<p>Computer programs can also create deep paths.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1336835">
				<div id="div-comment-1336835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180509-00/?p=98715#comment-1336835">
			May 12, 2018 at 11:31 pm</a>		</div>

		<p>But you can remember 327 subunits of 100 chars, each? :)</p>
<p>Working memory of human brains seems to have only has a limited number of &#8220;slots&#8221; (likely &lt;10, maybe 7±2). When thinking, we need to abstract facts and &quot;merge&quot; their slots, to make free slots for new information. Dealing with path names of 32767 characters kind of &quot;binds too many resources&quot;, as it&#039;s more difficult to abstract that much information.</p>
<p>Opposite to all technical possibilities, we live in the age of the ultra-short &quot;twitter messages&quot;, even for news of world political importance.</p>
<p>My point is that it was nice to overcome the low technical limits of the early computer systems, but not everything that is technically possible also makes sense with our sensory and mental abilities.</p>
<p>I agree that sometimes 1024, or even 4096, would be nice to have. But since Windows 95, it&#039;s only been about one or two times that I hit a &quot;path name too long&quot; error &#8211; but maybe it was when copying files to a NAS with some weird limit, I don&#039;t remember any more &#8211; I have since reused that slot :)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1336435">
				<div id="div-comment-1336435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://geelaw.blog/' rel='external nofollow' class='url'>Gee Law</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180509-00/?p=98715#comment-1336435">
			May 10, 2018 at 9:04 am</a>		</div>

		<p>I don&#8217;t think so&#8230; I believe &#8220;long file name&#8221; is the opposite of 8.3 naming convention, which dictates that each name in a path be 8.3 styled. &#8220;cch=32767&#8221; is &#8220;long path&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-andycadley2 even depth-2 parent" id="comment-1336555">
				<div id="div-comment-1336555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180509-00/?p=98715#comment-1336555">
			May 10, 2018 at 9:22 pm</a>		</div>

		<p>Given the way the existing support has been added in, I&#8217;d expect the W versions of functions to eventually all be extended to remove the MAX_PATH limitations.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-3 parent" id="comment-1336635">
				<div id="div-comment-1336635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180509-00/?p=98715#comment-1336635">
			May 11, 2018 at 7:19 am</a>		</div>

		<p>They are</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1336795">
				<div id="div-comment-1336795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180509-00/?p=98715#comment-1336795">
			May 11, 2018 at 11:28 pm</a>		</div>

		<p>They are &#8230; what? Able to handle paths longer than MAX_PATH? But for many functions, the MAX_PATH limit is still mentioned on MSDN, for example SHGetFileInfo.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1336365">
				<div id="div-comment-1336365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Crowther</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180509-00/?p=98715#comment-1336365">
			May 10, 2018 at 8:02 am</a>		</div>

		<p>I can not read &#8220;pidl&#8221; without smirking.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1336475">
				<div id="div-comment-1336475" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180509-00/?p=98715#comment-1336475">
			May 10, 2018 at 12:37 pm</a>		</div>

		<p>Oddly enough, pidls are made of shitemid.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1336815">
				<div id="div-comment-1336815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.offworldpress.com' rel='external nofollow' class='url'>Reziac</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180509-00/?p=98715#comment-1336815">
			May 12, 2018 at 4:52 pm</a>		</div>

		<p>I misread that as &#8220;It then goes into a series of compatibility hysterics&#8221; but soon discovered that it didn&#8217;t change the meaning one whit. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

