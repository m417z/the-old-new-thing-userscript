<html>
<head>
<title>How much do you expect from a framework layer?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How much do you expect from a framework layer?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 10, 2003 / year-entry #121</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20031110-00/?p=41903</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If a framework exposes functionality provided by a lower layer, how hard should the framework try to insulate you from all the quirks and limitations of the lower layer? Instinctively, of course, you would say, "The framework should insulate me completely." But be careful what you ask for. If a framework insulated you completely, then...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>         If a framework exposes functionality provided by a lower layer, how hard should the         framework try to insulate you from all the quirks and limitations of the lower layer?      </p>
<p>         Instinctively, of course, you would say, "The framework should insulate me completely."         But be careful what you ask for. If a framework insulated you completely, then every         limitation of the underlying layer needs to be worked around in some manner or other.         This would mean writing a lot of code to emulate missing functionality or removing         a limitation, just in case somebody using the framework actually runs into that limitation.      </p>
<p>         Let's take for example <a href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemWindowsFormsToolTipClassAutoPopDelayTopic.asp">the         ToolTip.AutoPopDelay property</a>. <a href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemWindowsFormsToolTipClassTopic.asp">The         ToolTip class</a> is a Windows Forms wrapper around <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/commctls/tooltip/tooltipintro.asp">the         Common Controls ToolTip window class</a>. If you look at <a href="http://msdn.microsoft.com/library/en-us/shellcc/platform/commctls/tooltip/messages/ttm_setdelaytime.asp">the         documentation for the TTM_SETDELAYTIME</a> message, you'll see that the delay time         (<i>iTime</i>) is passed in the low word of the <i>lParam</i> parameter. Consequently,         it is limited to a 16-bit value, and in this case, it's a signed 16-bit value since         negative values for <i>iTime</i> have special meaning (as noted in the documentation).      </p>
<p>         Since the maximum value for a signed 16-bit integer is 32767, the maximum value you         can set for the delay time is a little over 32 seconds.      </p>
<p>     So if you try to set your ToolTip.AutoPopDelay to something longer, like 60 seconds,     you will find that the delay time is not properly set, since the ToolTip class merely     passes the delay value through to the underlying control. And until you understood     the underlying control, you would never understand why.  </body></p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-130933">
				<div id="div-comment-130933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.dotdotnet.com/marcmill' rel='external nofollow' class='url'>Marc Miller</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031110-00/?p=41903#comment-130933">
			November 10, 2003 at 4:36 am</a>		</div>

		<p>I think this is a bug &#8212; the implementers of ToolTip.AutoPopDelay had the perfectly reasonable option of making that property type a short.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-130943">
				<div id="div-comment-130943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031110-00/?p=41903#comment-130943">
			November 10, 2003 at 6:11 am</a>		</div>

		<p>they could also have thrown an exception of some description when a bung value got passed in, but I&#8217;m not sure if that&#8217;s good design or not.</p>
<p>Would a short change on 64 bit the same way that the low word of lParam would? That is, on windows on ia64, would a short still be equivalent to the low word of lParam?</p>
<p>I don&#8217;t know.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-130953">
				<div id="div-comment-130953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">null</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031110-00/?p=41903#comment-130953">
			November 10, 2003 at 10:05 am</a>		</div>

		<p>But if I am insulated from that which lies below, currently, the implementation can change to what will lie below in future.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-130963">
				<div id="div-comment-130963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pdq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031110-00/?p=41903#comment-130963">
			November 10, 2003 at 11:44 am</a>		</div>

		<p>To completely insulate you from the calling layer, invalid or special inputs must be handled also. This should generate an error or transform it into what you really wanted, if possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-130973">
				<div id="div-comment-130973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031110-00/?p=41903#comment-130973">
			November 10, 2003 at 11:50 am</a>		</div>

		<p>And suppose someday the 16-bit limitation on tooltip timeouts is lifted. The framework would continue to enforce a 16-bit limit even thought the limitation would no longer exist. Maybe that&#8217;s what you want, I don&#8217;t know.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-130983">
				<div id="div-comment-130983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.digiwar.com' rel='external nofollow' class='url'>Jeroen-bart Engelen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031110-00/?p=41903#comment-130983">
			November 10, 2003 at 12:22 pm</a>		</div>

		<p>That&#8217;s what documentation is for, not?<br />
When describing the function, make a note that the maximum value for the delay is 32766 (32767 would be -1). If the performance loss isn&#8217;t too great, add a simple value check in the framework, which can optionally be ignored using some kind of config call.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-130993">
				<div id="div-comment-130993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeproject.com/script/articles/list_articles.asp?userid=152' rel='external nofollow' class='url'>Mike Dunn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031110-00/?p=41903#comment-130993">
			November 10, 2003 at 2:09 pm</a>		</div>

		<blockquote><p>
  And suppose someday the 16-bit limitation on tooltip timeouts is lifted.
</p></blockquote>
<p>I&#8217;d rather have it work right now, within whatever limitations exist now. If it might someday in the future work better, great, but that does me no good in the present.<br />
I think it&#8217;s perfectly reasonable to enforce a range limit on the parameter, with an exception or whatever .NET does (I don&#8217;t code with .NET so I don&#8217;t know the practices well). Sure, you can document it, but the exception will work for everyone, including people who don&#8217;t read the docs or don&#8217;t see the note in the Remarks section about the range limit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-131003">
				<div id="div-comment-131003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031110-00/?p=41903#comment-131003">
			November 10, 2003 at 2:32 pm</a>		</div>

		<p>Well, since nobody else has, I&#8217;ll make the reference to The Law of Leaky Abstractions: <a href="http://www.joelonsoftware.com/articles/LeakyAbstractions.html" rel="nofollow">http://www.joelonsoftware.com/articles/LeakyAbstractions.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-131013">
				<div id="div-comment-131013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031110-00/?p=41903#comment-131013">
			November 10, 2003 at 6:46 pm</a>		</div>

		<p>Part of the issue is whether you want any particular framework to be an all-encompassing &quot;protect me from the real world&quot; framework or whether you want it to be a lightweight &quot;just make my life a little easier&quot; framework. Different people want different degrees of heftiness in their frameworks. If you&#8217;re a heavyweight framework person, then you want every last quirk of the underlying technology hidden from you, at great expense if necessary. If you&#8217;re a lightweight framework person, then you want a little syntactic sugar and not much else; don&#8217;t waste your time emulating missing functionality; that&#8217;s an extra 50K I don&#8217;t want to pay for.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-131023">
				<div id="div-comment-131023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shane King</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031110-00/?p=41903#comment-131023">
			November 10, 2003 at 7:58 pm</a>		</div>

		<p>Throwing an exception for invalid inputs is a good middle ground though. It&#8217;s also good practice. A boundary API like a framework should always do at least minimal sanity checking.</p>
<p>If the underlying implementation changes, then it&#8217;s the framework&#8217;s job to be updated to allow the new range of values.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

