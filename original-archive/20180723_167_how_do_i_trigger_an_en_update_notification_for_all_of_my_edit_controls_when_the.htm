<html>
<head>
<title>How do I trigger an EN_UPDATE notification for all of my edit controls when the user's locale information changes?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I trigger an EN_UPDATE notification for all of my edit controls when the user&#8217;s locale information changes?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 23, 2018 / year-entry #167</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180723-00/?p=99305</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It's your edit control, so you can do it yourself.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer had a dialog box with a bunch of edit controls.
Some of these edit controls contained floating-point values,
and the code parses them by calling a locale-sensitive parser,
so that users in the United States (say) can use the period as the
decimal marker, whereas users in Germany can use the comma.
The user might change the locale settings from US-style
to Germany-style,
and the customer wants to handle this change by updating
the text in all of the edit controls to match the new locale settings.
</p>
<p>
The customer decided that the way to do this was to handle the
<code>WM_</code><code>SETTING&shy;CHANGE</code> message,
and the customer concluded that they could get everything to work
if only they could cajole every edit control into generating
a <code>EN_</code><code>UPDATE</code> notification when this happened.
The existing handling for this message would finish the work.
(I don't quite see how, but that's what they said.)
</p>
<p>
The literal answer to the question is that you can just send
the <code>EN_</code><code>UPDATE</code> notification yourself.
</p>
<pre>
void SendFakeEnUpdateNotification(HWND hwndEdit)
{
  FORWARD_WM_COMMAND(
    GetParent(hwndEdit), GetDlgCtrlID(hwndEdit), hwndEdit,
    EN_UPDATE, SendMessage);
}
</pre>
<p>
You can find all the edit controls by enumerating them.
</p>
<pre>
void GenerateFakeEnUpdateNotificationsForChildWindows(HWND hdlg)
{
  EnumChildWindows(hdlg, [](HWND hwnd, LPARAM lParam)
  {
    auto hdlg = reinterpret_cast&lt;HWND&gt;(lParam);
    wchar_t className[10];
    if (GetClassName(hwnd, className, 10) == 4 &amp;&amp;
        CompareStringOrdinal(className, -1,
                             L"edit", -1, TRUE) == CSTR_EQUAL) {
      FORWARD_WM_COMMAND(
        hdlg, GetDlgCtrlID(hwndEdit), hwndEdit,
        EN_UPDATE, SendMessage);
    }
    return TRUE;
  }, reinterpret_cast&lt;LPARAM&gt;(hdlg));
}
</pre>
<p>
This enumerates all the child windows, picks out the edit controls,
and generates a fake <code>EN_</code><code>UPDATE</code> notification
on their behalf.
</p>
<p>
But you can do better.
</p>
<p>
For example, instead of sending a fake <code>EN_</code><code>UPDATE</code>
notification, you may as well just go straight to the code that handles
the notification.
If your dialog procedure says
</p>
<pre>
  case WM_COMMAND:
    switch (GET_WM_COMMAND_ID(wParam, lParam)) {
    // These three edit controls are the ones that
    // contain decimal values.
    case IDC_VALUE1:
    case IDC_VALUE3:
    case IDC_VALUE5:
      switch (GET_WM_COMMAND_CMD(wParam, lParam)) {
      case EN_UPDATE:
        OnEditUpdate(GET_WM_COMMAND_HWND(wParam, lParam));
        break;
      ...
      }
      break;
      ...
    }
    ...
  }
</pre>
<p>
then you can just call your <code>On&shy;Edit&shy;Update</code>
method directly.
</p>
<pre>
void TriggerEditUpdateChildWindows(HWND hdlg)
{
  EnumChildWindows(hdlg, [](HWND hwnd, LPARAM lParam)
  {
    auto hdlg = reinterpret_cast&lt;HWND&gt;(lParam);
    wchar_t className[10];
    if (GetClassName(hwnd, className, 10) == 4 &amp;&amp;
        CompareStringOrdinal(className, -1,
                             L"edit", -1, TRUE) == CSTR_EQUAL) {
      <font COLOR="blue">OnEditUpdate(hwnd);</font>
    }
    return TRUE;
  }, reinterpret_cast&lt;LPARAM&gt;(hdlg));
}
</pre>
<p>
In fact, you can do even better still.
As written, we're overloading the <code>EN_</code><code>UPDATE</code>
notification, which means that the
<code>On&shy;Edit&shy;Update</code> message needs to decide what
got updated, and detect that this was just a fake update for the
purpose of updating the decimal separator.
Why not just call that function directly?
</p>
<pre>
void TriggerEditUpdateChildWindows(HWND hdlg)
{
  EnumChildWindows(hdlg, [](HWND hwnd, LPARAM lParam)
  {
    auto hdlg = reinterpret_cast&lt;HWND&gt;(lParam);
    wchar_t className[10];
    if (GetClassName(hwnd, className, 10) == 4 &amp;&amp;
        CompareStringOrdinal(className, -1,
                             L"edit", -1, TRUE) == CSTR_EQUAL) {
      <font COLOR="blue">UpdateDecimalSeparator(hwnd);</font>
    }
    return TRUE;
  }, reinterpret_cast&lt;LPARAM&gt;(hdlg));
}
</pre>
<p>
Wait, you can do even better still.
</p>
<p>
You already know which three edit controls you need to update:
They're
<code>IDC_</code><code>VALUE1</code>,
<code>IDC_</code><code>VALUE3</code>,
and
<code>IDC_</code><code>VALUE5</code>.
So you can just update them.
</p>
<pre>
void UpdateDecimalSeparators(HWND hdlg)
{
  static const int editsWithDecimals[] = {
    IDC_VALUE1, IDC_VALUE3, IDC_VALUE5 };
  for (int id : editsWithDecimals) {
    UpdateDecimalSeparator(GetDlgItem(hdlg, id));
  }
}
</pre>
<p>
In fact, it's highly likely that you already obtained
these child window handles and have stashed them away
in member variables.
</p>
<pre>
void UpdateDecimalSeparators(HWND hdlg)
{
  UpdateDecimalSeparator(m_hwndValue1);
  UpdateDecimalSeparator(m_hwndValue3);
  UpdateDecimalSeparator(m_hwndValue5);
}
</pre>
<p>
There you go.
No need to generate a fake notification
(that may confuse other parts of your program).
If you want to update the decimal separator in three
edit controls, then just
update the decimal separator in three edit controls.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-fjeldse even thread-even depth-1 parent" id="comment-1353105">
				<div id="div-comment-1353105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Erik+F' rel='external nofollow' class='url'>Erik F</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180723-00/?p=99305#comment-1353105">
			July 23, 2018 at 8:00 am</a>		</div>

		<p>This sounds like a variation on the theme of <a href="https://blogs.msdn.microsoft.com/oldnewthing/20081211-00/?p=19873/">Don&#8217;t use global state to manage a local problem.</a> It&#8217;s interesting how so many problems can be sorted into a few general categories!</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1353275">
				<div id="div-comment-1353275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180723-00/?p=99305#comment-1353275">
			July 24, 2018 at 12:13 am</a>		</div>

		<p>Or &#8220;Trying to make one thing to do two things&#8221;. It&#8217;s also quite a common theme.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1353175">
				<div id="div-comment-1353175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris B</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180723-00/?p=99305#comment-1353175">
			July 23, 2018 at 1:11 pm</a>		</div>

		<p>How would this work if you need to make other culture specific updates, e.g. update the currency symbol from $ to â‚¬? Do you have to update each impacted aspect of the edit control individuallly (e.g. UpdateDecimalSeparator followed by UpdateCurrencySymbol) or is there a generic way to tell the control &#8220;hey &#8211; the culture just changed, please redraw yourself.&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1353195">
				<div id="div-comment-1353195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180723-00/?p=99305#comment-1353195">
			July 23, 2018 at 1:41 pm</a>		</div>

		<p>Whatever your program does when the locale changes, factor it into a separate function and call it.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1353265">
				<div id="div-comment-1353265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180723-00/?p=99305#comment-1353265">
			July 24, 2018 at 12:10 am</a>		</div>

		<p>&#8230;You know what, there is still another possibility: don&#8217;t even bother. The user opens the dialog, then goes to the Control Panel, changes his locale settings, and then comes back? He might as well spend two more mouse clicks and dismiss/re-open the dialog.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1353345">
				<div id="div-comment-1353345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180723-00/?p=99305#comment-1353345">
			July 24, 2018 at 7:24 am</a>		</div>

		<p>Seems like a valid approach, to me. As a user, I wouldn&#8217;t expect any program to pick up my changed locale settings for an already active dialog box. But maybe that&#8217;s just my habituation over the years.</p>
<p>It&#8217;s another story if the locale settings are somehow crucial for the user to be able to proceed with their most important dialog box ever in their life, like &#8220;enter today&#8217;s properly formatted local date to confirm you want to marry me, or close the dialog box to abort&#8221;.</p>
<p>:'(</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1353425">
				<div id="div-comment-1353425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180723-00/?p=99305#comment-1353425">
			July 24, 2018 at 12:58 pm</a>		</div>

		<p>Might not be that easy with sub/superclassed controls, used by 3-part components in your app. Edit boxes can hide anywhere (common in ms office controls).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

