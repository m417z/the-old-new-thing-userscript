<html>
<head>
<title>You can't even trust the identity of the calling executable</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>You can&#8217;t even trust the identity of the calling executable</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 3, 2006 / year-entry #47</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060203-00/?p=32403</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A while back, I demonstrated that you can't trust the return address. What's more, you can't even trust the identity of the calling executable. I've seen requests from people who say, "I want to check whether I'm being called from MYAPP.EXE. I'm going to make a security decision based on the result." Although you can...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A while back, I demonstrated that <a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/01/47042.aspx"> you can't trust the return address</a>. What's more, you can't even trust the identity of the calling executable. I've seen requests from people who say, "I want to check whether I'm being called from MYAPP.EXE. I'm going to make a security decision based on the result."</p>
<p> Although you can do this, all it does is give you more rope. </p>
<p> Even if you are convinced that you're being called from the expected application, you aren't any safer. An attacker can inject code into that process (say, via a global hook) and you will foolishly trust it. In the same way that you shouldn't trust who you're talking to on the phone based solely on the caller ID. Somebody could have broken into the caller's house and made the call from that phone. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-342933">
				<div id="div-comment-342933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060203-00/?p=32403#comment-342933">
			February 3, 2006 at 12:28 pm</a>		</div>

		<p>I should add that you can&#8217;t trust your command line either. The only copy of the command line use to call your process is stored in writable memory, so there&#8217;s no way to know if what you are looking at has been modified.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-342993">
				<div id="div-comment-342993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://qstuff.blogspot.com/' rel='external nofollow' class='url'>Justin Olbrantz (Quantam)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060203-00/?p=32403#comment-342993">
			February 3, 2006 at 5:11 pm</a>		</div>

		<p>&quot;I want to check whether I&#8217;m being called from MYAPP.EXE. I&#8217;m going to make a security decision based on the result.&quot;</p>
<p>Ahahahaha. I couldn&#8217;t help but laugh when I read that, as I have a fair amount of experience with the various ways of injecting code into foreign processes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-343033">
				<div id="div-comment-343033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060203-00/?p=32403#comment-343033">
			February 3, 2006 at 10:25 pm</a>		</div>

		<p>Ultimately you can&#8217;t even trust your own code, because someone could inject stuff into your process or hack the binary.</p>
<p>Is there any sort of binary security that is safe, or is the only sure bet to rely on data that algorithmically becomes corrupt when your condition is not met?</p>
<p>Or at some point do you just trust that whoever has set up your application is not malicious and can secure the environment properly?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-343053">
				<div id="div-comment-343053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060203-00/?p=32403#comment-343053">
			February 3, 2006 at 11:46 pm</a>		</div>

		<p>Josh: Seems that you have to rely on Windows itself&#8217;s memory protection, but then there&#8217;s some way to work around that if there&#8217;s some other program targeting &quot;your program&quot; with administrative rights.</p>
<p>If your program is that &quot;security critical&quot;, perheps you can write code that&#8217;ll calculate the integraty checksum for code segments and have child process periodically check that. So only custom-crafted programs could have modified your executed code without having the user acknowledged.</p>
<p>I have further question. Can someone change the code that have be loaded to CPU cache? If not, preheps you can trust the process you&#8217;re running&#8230; :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-343063">
				<div id="div-comment-343063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://qstuff.blogspot.com' rel='external nofollow' class='url'>Justin Olbrantz (Quantam)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060203-00/?p=32403#comment-343063">
			February 4, 2006 at 12:16 am</a>		</div>

		<p>I believe it&#8217;s theoretically impossible to 100% prevent tampering of your code from the same priviledge level, user, and logon session.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-343073">
				<div id="div-comment-343073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jerry Pisk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060203-00/?p=32403#comment-343073">
			February 4, 2006 at 12:43 am</a>		</div>

		<p>Verifying checksums (hashes) of your code works only if the attacker does not have access to modify those as well. If you emebed them in the code to protect yourself against having your code change it does not help you as it&#8217;s trivial to change the checksums or even remove the check completely once somebody is able to modify your code (why would your child process be any more secure, if it was you wouldn&#8217;t need it). If you know where it&#8217;s trivial to change a JNZ or JZ to JMP. And I think it is possible to change code loaded in the CPU cache, just change it in memory, mark it as dirty and let the CPU refresh its cache.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-343093">
				<div id="div-comment-343093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">theorbtwo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060203-00/?p=32403#comment-343093">
			February 4, 2006 at 5:18 am</a>		</div>

		<p>You can&#8217;t trust anything at all; so far as you know your code is being run on an emulator specifically designed to mess with you.<br />
<br />At some point, you have to make assumptions, and if you want, document them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-343123">
				<div id="div-comment-343123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jasonhaley.com/blog/archive/0001/01/01/136184.aspx' rel='external nofollow' class='url'>Jason Haley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060203-00/?p=32403#comment-343123">
			February 4, 2006 at 8:20 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-343133">
				<div id="div-comment-343133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://plan99.net/~mike/' rel='external nofollow' class='url'>Mike Hearn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060203-00/?p=32403#comment-343133">
			February 4, 2006 at 2:16 pm</a>		</div>

		<p>This is just a rephrasing of &quot;on most operating systems, there is no internal security&quot;. It&#8217;s not a given that you can&#8217;t trust the identity of the calling process, this is true on Windows (and MacOS X and most flavours of Linux) but isn&#8217;t necessarily true and in fact on some Linux distros you /can/ obtain and trust the security context of the caller because the kernel restricts the process control APIs so code injection is not possible. Likewise, in some cases the dynamic linker will ignore the equivalent of Win32 global hooks.</p>
<p>Now, if the kernel is compromised or modified then it&#8217;s game over but in most contexts this isn&#8217;t a problem worth worrying about (for the sort of thing this guy probably wants to do anyway).</p>
<p>But Raymond is right that on Windows, as it stands, you can&#8217;t really prove much about the state of the system from inside it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-343163">
				<div id="div-comment-343163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Lamb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060203-00/?p=32403#comment-343163">
			February 5, 2006 at 7:32 am</a>		</div>

		<p>&quot;I&#8217;m going to make a security decision based on the result.&quot;</p>
<p>This is actually game over anyway. You don&#8217;t get to make any real security decisions in this situation.</p>
<p>The only time a /real/ security decision can be made is when you have a difference in privileges. For example, the firewall software has more privileges than the packets being processed, so it makes meaningful security decisions. Similarly the OS kernel has more privileges than a calling program, so it too makes meaningful security decisions.</p>
<p>A called function doesn&#8217;t have any special privileges, it&#8217;s running in the context of the calling code. So anything it can do is also possible for the caller. Suppose your function is able to decrypt messages using an embedded secret key. The caller can just read the key straight out of your code, without executing any of your safeguards.</p>
<p>However, when the function call is upgraded to a Remote Procedure Call or similar, things get interesting. Now the called code can have different privileges, and it becomes meaningful to know the identity of the caller. For example some Unix systems include a kernel-supervised &quot;credential passing&quot; local transport for this purpose. Because the messages pass through the OS kernel, which rejects fraudulent credentials, they can really be used to make security decisions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-343173">
				<div id="div-comment-343173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M Knight</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060203-00/?p=32403#comment-343173">
			February 5, 2006 at 7:47 am</a>		</div>

		<blockquote><p>
  But Raymond is right that on Windows, as it stands, you can&#8217;t really prove much about the state of the system from inside it. </p>
<p>G&#246;del&#8217;s Incompleteness Theorem means you can not prove a system from within the system. And any attempt to use some external factor to prove the system just makes the system larger &amp; more complex.</p>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mgrier odd alt thread-odd thread-alt depth-1" id="comment-343193">
				<div id="div-comment-343193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MGrier' rel='external nofollow' class='url'>MGrier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060203-00/?p=32403#comment-343193">
			February 5, 2006 at 11:07 am</a>		</div>

		<p>If, in a single address space, you have both Bad Code and Good Code, you&#8217;re sunk. &nbsp;The Good Code can all the Good API all it wants to get the identity of the containing process/whatever but if the Bad Code is in the same address space, it can change the Good Code into Bad Code. &nbsp;For that matter if it&#8217;s in the same address space it can just do the Special Operation that &quot;only&quot; the Good Code could do in the first place.</p>
<p>Boom.</p>
<p>The only way to implement a security boundary is to have the code which possesses varying levels of permission/privilege be held distinct with each other. &nbsp;The data flow across the boundaries has to be very strictly maintained. &nbsp;(This is why IMO you can never get one of these &quot;sandboxing&quot; technologies right without running the sandboxed things in entire separate address spaces.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-343233">
				<div id="div-comment-343233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jsqrd.com/blog' rel='external nofollow' class='url'>k&#178;</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060203-00/?p=32403#comment-343233">
			February 5, 2006 at 8:02 pm</a>		</div>

		<p>&quot;G&#246;del&#8217;s Incompleteness Theorem means you can not prove a system from within the system. And any attempt to use some external factor to prove the system just makes the system larger &amp; more complex.&quot;</p>
<p>That&#8217;s little bit of an oversimplification, and I don&#8217;t think it applies in this particular case. G&#246;del wasn&#8217;t saying that &lt;i&gt;no&lt;/i&gt; statements could be proven or disproven, only that certain statements in a system couldn&#8217;t be proven or disproven without expanding the system (and thereby introducing a new class of statements that can&#8217;t be proven or disproven). But a theorem selected at random can be self-consistent without having to go outside the system (even if the system, like all others, is incomplete).</p>
<p>Here Raymond et al. are making a statement too: &quot;it is not possible to answer P(x) for all x&quot;, where P(x) is the question, &quot;has code x been tampered with?&quot;. This is quite possible to prove within the bounds of the system, probably with a Cantor&#8217;s-diagonal argument: enumerate all possible x and come up with an answer for each of them. If they&#8217;re all answerable, Raymond&#8217;s statement is wrong; otherwise, it&#8217;s right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-343343">
				<div id="div-comment-343343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060203-00/?p=32403#comment-343343">
			February 6, 2006 at 10:57 am</a>		</div>

		<p>You can&#8217;t trust anything, really. Maybe one of the OS libraries was replaced with code that causes the computer to explode when you call it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-343863">
				<div id="div-comment-343863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tito</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060203-00/?p=32403#comment-343863">
			February 7, 2006 at 12:36 pm</a>		</div>

		<p>&quot;In the same way that you shouldn&#8217;t trust who you&#8217;re talking to on the phone based solely on the caller ID. Somebody could have broken into the caller&#8217;s house and made the call from that phone. &quot;</p>
<p>There are MUCH easier ways to fake caller ID than breaking into someone&#8217;s home (or stealing their cellphone). &nbsp;That is one reason to always require voicemail passwords even when calling from the cell. &nbsp;Spoofing this is trivial.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

