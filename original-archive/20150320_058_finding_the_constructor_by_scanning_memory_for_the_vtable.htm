<html>
<head>
<title>Finding the constructor by scanning memory for the vtable</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Finding the constructor by scanning memory for the vtable</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 20, 2015 / year-entry #59</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150320-00/?p=44423</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In Looking for leaked objects by their vtable, we used the object's constructor to locate the vtable, and then scanned the heap for the vtable to find the leaked object. But you can run this technique in reverse, too. Suppose you found an object and you want to find its constructor. This is not a...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/01/24/10492287.aspx">
Looking for leaked objects by their vtable</a>,
we used the object's constructor to locate
the vtable,
and then scanned the heap for the vtable to find the leaked object.
But you can run this technique in reverse, too.
</p>
<p>
Suppose you found an object and you want to find its constructor.
This is not a problem if you have the source code,
but if you are doing some reverse-engineering for application
compatibility purposes,
you don't have the luxury of the application source code.
You may have figured out that the application fails because
the byte at offset 0x50 is zero,
but on the previous version of Windows, it was nonzero.
You want to find out who sets the byte at offset 0x50,
so that you can see why it is setting it to zero instead of
a nonzero value.
</p>
<p>
If the object has a vtable, you can scan the code segments for
a copy of the vtable.
It will show up in an instruction like
</p>
<pre>
mov dword ptr [reg], <font COLOR=blue>vtable_address</font>
</pre>
<p>
This is almost certainly the object's constructor,
setting up the object vtable as part of construction.
You can set a breakpoint here to break when the object is
constructed,
and then you can set a write breakpoint on offset 0x50 to
see where its value is seto.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1180823">
				<div id="div-comment-1180823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150320-00/?p=44423#comment-1180823">
			March 20, 2015 at 7:24 am</a>		</div>

		<p>And then you find one instance 50000 instructions down a recursive function with a CMC in the 800s. Isn&#39;t aggressive in lining wonderful?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1180833">
				<div id="div-comment-1180833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Young Money</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150320-00/?p=44423#comment-1180833">
			March 20, 2015 at 7:34 am</a>		</div>

		<p>From what I have seen, in some compiler implementations, it could also be the object&#39;s destructor.</p>
<div class="post">[<em>True, it could be in the destructor of a derived object that does not use the novtable optimization in its base class. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1180843">
				<div id="div-comment-1180843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Foone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150320-00/?p=44423#comment-1180843">
			March 20, 2015 at 10:31 am</a>		</div>

		<p>I&#39;m actually using this technique for static analysis on an old microsoft application. I know how the compiler outputs vtable settings (they&#39;re always a MOV EAX,ECX then a MOV [EAX], OFFSET CONTANT), so I built scripts to locate all the constructors and then pull their vtable entries from the binary. With this I can easily discover which functions in the binary correspond to which classes. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1180903">
				<div id="div-comment-1180903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150320-00/?p=44423#comment-1180903">
			March 21, 2015 at 11:35 pm</a>		</div>

		<p>How about surface RT?</p>
<div class="post">[<em>It&#39;s harder on non-x86 due to the lack of a &quot;load register with pointer-sized immediate&quot; instruction. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1181423">
				<div id="div-comment-1181423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150320-00/?p=44423#comment-1181423">
			March 25, 2015 at 1:14 pm</a>		</div>

		<p>I don&#39;t think you do, but I just wanted to say: Please don&#39;t evaluate the popularity of your posts by the comment count. While a post such as this one will always get less comments than many others, I find these posts often very insightful &#8211; I just don&#39;t have anything to comment on.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

