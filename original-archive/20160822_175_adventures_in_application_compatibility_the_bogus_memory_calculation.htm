<html>
<head>
<title>Adventures in application compatibility: The bogus memory calculation</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Adventures in application compatibility: The bogus memory calculation</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 22, 2016 / year-entry #176</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Let's add some numbers together, shall we?</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
One of my colleagues shared with me one of his application
compatibility stories.
</p>
<p>
There was a program that would fail on some computers but not
others, and it wasn't clear why.
The problem was traced to
the size of an internal cache.
Now,
<code>Global&shy;Memory&shy;Status</code>
officially returns unsigned values,
but if the calling application
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20040822-00/?p=38093">
is not marked
<code>/LARGE&shy;ADDRESS&shy;AWARE</code></a>,
then
<a HREF="https://msdn.microsoft.com/en-us/library/windows/desktop/aa366586(v=vs.85).aspx">
<code>Global&shy;Memory&shy;Status</code>
reports a maximum</a>
of
2<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090611-00/?p=17933">GB</a> &minus; 1
bytes of memory,
for compatibility purposes.
</p>
<p>
You'd think that this would be enough to keep old
programs happy,
but apparently not.
This particular program wasn't content with the values
that it got from
<code>Global&shy;Memory&shy;Status</code>.
Instead, it took the
<code>dwTotalPhys</code>
and
added it to the <code>dwTotalPageFile</code>,
and treated the result as a signed value.
This means that on systems with more
than 2GB of memory, the addition will
produce a total of
<code>0xFFFFFFFE</code>,
which is
a negative value
when interpreted as a signed result,
which in turn causes the program to crash.
</p>
<p>
My colleague fixed the program by patching
out the instructions that added
<code>dwTotalPhys</code>
to
<code>dwTotalPageFile</code>,
and had the program operate solely on
<code>dwTotalPhys</code>,
which is probably
what it should have been operating on
in the first place.
</p>
<p>
You see, even though the field in
<a HREF="https://msdn.microsoft.com/en-us/library/windows/desktop/aa366772(v=vs.85).aspx">
the
<code>MEMORY&shy;STATUS</code> structure</a>
is named
<code>dwTotalPageFile</code>,
it doesn't actually give you
the size of the page file.
The documentation of
<code>dwTotalPageFile</code>
says
</p>
<blockquote CLASS=q><p>
The current size of the committed memory limit, in bytes.
This is physical memory plus the size of the page file,
minus a small overhead.
</p>
</blockquote>
<p>
Yes, this is a case of
<a HREF="http://martinfowler.com/bliki/TwoHardThings.html">
bad naming</a>.
(You can come up with your own theories how we ended up
with the bad name.)
</p>
<p>
By adding
<code>dwTotalPhys</code> and
<code>dwTotalPageFile</code>,
the code was double-counting the physical memory.
</p>
<p>
The conclusion my colleague drew from this exercise
was that
there are still programmers out there who are working hard
to
skip the documentation,
come up with bad ideas,
and
<a HREF="http://www.quotationspage.com/quote/781.html">
implement them poorly</a>.
</p>
<p>
I admire the program's dedication to getting everything
wrong despite the operating system's efforts to save them
from themselves.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1261635">
				<div id="div-comment-1261635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">fm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261635">
			August 22, 2016 at 9:19 am</a>		</div>

		<p>&gt; I admire the program&#8217;s dedication to getting everything wrong despite the operating system&#8217;s efforts to save them from themselves.</p>
<p>And yet, users won&#8217;t have an opportunity to appreciate the value created for them by Microsoft, because they didn&#8217;t even understand that the application was doing something stupid in the first place.</p>
<p>This means users are trained to believe that the app is &#8220;right&#8221;, since it works, and when they upgrade their OS and it doesn&#8217;t work any more (shim not applied, 16 bit support not in the OS any more, tighter security policy of new version, etc etc etc) it&#8217;s Microsoft&#8217;s fault that it broke.</p>
<p>This is why name &amp; shame should always have been how the OS handled application bugs.</p>
<p>Now repeat for the web stack where browsers do weird compatibility things silently instead of telling the user the site is stupid due to webkit only APIs, and a shim is applied to make it work.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1261645">
				<div id="div-comment-1261645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261645">
			August 22, 2016 at 9:28 am</a>		</div>

		<p>WebKit is the new IE6.  Developers write to its proprietary features and users wonder why other browsers don&#8217;t work &#8220;correctly&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-3 parent" id="comment-1261705">
				<div id="div-comment-1261705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261705">
			August 22, 2016 at 6:54 pm</a>		</div>

		<p>I&#8217;d say Chrome is the new IE6 when you try to compare it with webkit. On the web application I&#8217;m maintaining, more than a dozen CSS and DOM scripting workaround is for Chrome where they don&#8217;t get the standard right.</p>
<p>The latest issue I&#8217;ve experience on is on DOM object processing of TextArea. On IE and Firefox I can get correct value on jQuery(obj).val(), on old version of Chrome it&#8217;ll just return null which is non-issue because I&#8217;ll go ahead to try jQuery(obj).text() which returns correct value. But on latest version of Chrome jQuery(obj).val() return &#8220;old value of control&#8221; instead of &#8220;current value&#8221;, that leaves me in &#8220;rock and a hard place&#8221; and I&#8217;m not sure how to workaround it without explicit browser version check or breaking old version of Chrome.</p>
<p>(Browser version check is not desirable because it would break when a newer version come that actually fixes the problem)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1261715">
				<div id="div-comment-1261715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261715">
			August 22, 2016 at 10:06 pm</a>		</div>

		<p>Sounds more like the framework you are using (for compatibility reasons, hopefully) isn&#8217;t being very compatible with Chrome?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-5" id="comment-1261725">
				<div id="div-comment-1261725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261725">
			August 23, 2016 at 1:03 am</a>		</div>

		<p>If you mean jQuery, well&#8230;</p>
<p>Btw, jQuery is supposed to help me workaround those platform incompatibility, so I agree that I shouldn&#8217;t have had to apply those workarounds.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-4 parent" id="comment-1261935">
				<div id="div-comment-1261935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Viila</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261935">
			August 24, 2016 at 1:35 am</a>		</div>

		<p>Wasn&#8217;t Chrome supposed to seamlessly autoupdate so that there wouldn&#8217;t be old versions in the wild?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-5" id="comment-1262455">
				<div id="div-comment-1262455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1262455">
			August 29, 2016 at 2:33 am</a>		</div>

		<p>Not if HTTP connection to internet is blocked, and webbrowsers are strictly for LOB web applications only.</p>
<p>This is a common configuration for companies in financial sector.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-chd1 odd alt depth-2 parent" id="comment-1261655">
				<div id="div-comment-1261655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ChDF+T' rel='external nofollow' class='url'>ChDF T</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261655">
			August 22, 2016 at 11:06 am</a>		</div>

		<p>Let&#8217;s ignore the potential legal trouble for the moment.<br />
The common user will always blame the person/enterprise/application that is most convenient to blame. This happens to be the OS most of the time, however it doesn&#8217;t have to be: I know some users who like to blame everything on the vendor (which is not Microsoft) of a *very* expensive application, which they happen to use all day long. So let&#8217;s ignore the common user as well.</p>
<p>You propose that the OS should point out that the application is to blame for the malfunction. This assumes two things: 1) the malfunction is a known problem and 2) it can be detected. Not every API-misuse results in an app-crash, so (2) might be considerably hard to achieve.<br />
Let&#8217;s say this behavior would be implemented &#8211; the user would use application A and suddenly a modal message box opens: &#8220;incorrect API usage detected, this application will be terminated; click here for more details&#8221;. Note that we can safely display technical information, after all only advanced users are left. However one of these users may still wonder &#8220;The OS can detect the misuse and explain it, which implicates that it can infer what the applications intentions were. Why doesn&#8217;t the OS fix the app?&#8221;<br />
In my opinion (which very well may not be yours) this is the argument that kills your proposal. If someone (be it Microsoft or whoever else) goes through all the trouble to track down an issue good enough to safely detect it, they may as well fix it, though the fix might be ugly or ultimately not worth the trouble sometimes.</p>
<p>Before you say &#8220;the developers have to learn how to do it right&#8221;: Yes they do, however breaking code in production (i.e. after it was sold &amp; shipped) doesn&#8217;t help anyone. There are tools to find such trouble spots before shipping the application, however lower level frameworks usually trust the developer to do the right thing and require more more care and experience in most phases of software development &#8211; this does include &#8220;testing&#8221;. It is on the developer to invest the appropriate effort into each phase &#8211; or in other words: this isn&#8217;t a technical problem, don&#8217;t try to solve it with technology.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1261795">
				<div id="div-comment-1261795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261795">
			August 23, 2016 at 8:12 am</a>		</div>

		<p>It helps the rest of the world when our entire computing infrastructure doesn&#8217;t crash and send us back to the Dark Ages.</p>
<p>But no, it&#8217;ll be fine, I&#8217;m sure. There&#8217;s no reason to bother preventing architects from designing ragged shanties with no safety code enforcement, either.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-iboyd odd alt depth-2" id="comment-1261695">
				<div id="div-comment-1261695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/IanBoyd' rel='external nofollow' class='url'>IanBoyd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261695">
			August 22, 2016 at 2:23 pm</a>		</div>

		<p>You can always download the Application Compatibility Toolkit, and view the list of over a thousand programs have each have their own carefully entered compat shims.</p>
<p>I seem to remember a note about children&#8217;s programs being important, and there certainly are a lot.</p>
<p>The 32-bit database is quite the trip down memory lane.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-chd1 even thread-odd thread-alt depth-1 parent" id="comment-1261665">
				<div id="div-comment-1261665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ChDF+T' rel='external nofollow' class='url'>ChDF T</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261665">
			August 22, 2016 at 12:30 pm</a>		</div>

		<p>Based on them adding dwTotalPhys and dwTotalPageFile, I guess that it was intended to fill all available memory with the cache. What would be the use for such a cache? After all a cache that has to be read from the hard disk through the page file isn&#8217;t any faster than reading the data that was the source for the cache from the hard disk.<br />
I&#8217;m also wondering what would happen if two applications did that (trying to fill all available memory with a cache)&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1261675">
				<div id="div-comment-1261675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261675">
			August 22, 2016 at 12:51 pm</a>		</div>

		<p>Well, basing your cache size on a percentage of total physical+swap could almost make sense if the data you&#8217;re caching isn&#8217;t from the hard drive, such as if it&#8217;s from some slow network connection or the like. I could imagine there being a use case, like some server application that is recommended to be the only application on the server, caching some really slow data source, where it&#8217;d make sense to want to swap out to local disk for some kind of cache. We&#8217;re not really told anything in the story about the use case for this application.</p>
<p>Of course, the explanation of people that &#8220;come up with bad ideas, and implement them poorly&#8221; is more likely.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1261945">
				<div id="div-comment-1261945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Viila</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261945">
			August 24, 2016 at 1:43 am</a>		</div>

		<p>Even in that case I&#8217;d imagine you probably should maintain an explicit cache rather, since you can&#8217;t exactly control which bits of your application get paged out with any kind of precision. </p>
<p>Throughput will probably also be better, since you can use bulk transfers since you know exactly the domain you&#8217;re interested at that point instead of having to fault on every page individually and you know when you&#8217;re no longer interested so you can immediately cache it back out.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-even depth-1 parent" id="comment-1261735">
				<div id="div-comment-1261735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261735">
			August 23, 2016 at 1:08 am</a>		</div>

		<p>However, I suppose even jQuery can do very little to the cases like when Chrome choose to entirely ignore the min-height CSS style for table and the sort.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1261835">
				<div id="div-comment-1261835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261835">
			August 23, 2016 at 8:17 am</a>		</div>

		<p>The behaviour of min-height on a table is undefined, according to the CSS specs. If you want consistency, you&#8217;ll have to choose a style with defined behaviour.</p>
<p>And then you can complain about all the browsers that STILL get it wrong even when there&#8217;s a defined spec.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong odd alt depth-3 parent" id="comment-1261905">
				<div id="div-comment-1261905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261905">
			August 23, 2016 at 7:16 pm</a>		</div>

		<p>No, I&#8217;m just giving example on troubles caused by Chrome that is unlikely to be handled by jQuery. Btw, I&#8217;ve seen SO suggest that &#8220;height&#8221; should be used instead, but I tried that and it does not function correctly either on Chrome. (We&#8217;re having multiple TRs where some of them is &#8220;display:none&#8221; in the beginning but shown on some criteria. We set all TRs except one with fixed height, and the remaining TR without height specified, so this row should expand to fill the remaining space. This works on all browsers except Chrome)</p>
<p>The other WTF-ty things are, when setting background image on TR as GIF, when there and TD with content covering it, somehow the TD will get the background image&#8217;s color with opacity = 1, so the gradient is not shown. But when I try to add background-color: transparent to the TD, the TR themselve will somehow become transparent when the page loads. (somehow because when you select the table, the background-image is shown again. And it&#8217;s not related on network latency because it happens on localhost and the images are small)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1262025">
				<div id="div-comment-1262025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1262025">
			August 24, 2016 at 7:49 am</a>		</div>

		<p>And that kind of bullshit is why I hated Web dev&#8217;.<br />
That, and Javascript.<br />
I&#8217;ll stick to non-Web applications, thank you very much.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1261745">
				<div id="div-comment-1261745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261745">
			August 23, 2016 at 2:47 am</a>		</div>

		<p>&gt;The conclusion my colleague drew from this exercise was that there are still programmers out there who are working hard to skip<br />
&gt; the documentation, come up with bad ideas, and implement them poorly. </p>
<p>They may not have ignored the documentation, they may just have poor comprehension skills.</p>
<p>The majority of programmers are only competent to a level that makes them slightly dangerous.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1261955">
				<div id="div-comment-1261955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Viila</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261955">
			August 24, 2016 at 1:50 am</a>		</div>

		<p>We&#8217;re all also lazy. If I see a member variable that promises to contain what I  want (eg.  Intellisense popup) I might trust it to actually do what it says on the tin without double checking. </p>
<p>Remember Raymond&#8217;s adage: most software isn&#8217;t written to be hostile towards people reading the source. But it does suck when it is by accident like this.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1261755">
				<div id="div-comment-1261755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261755">
			August 23, 2016 at 3:25 am</a>		</div>

		<p>Looks like it wasn&#8217;t always a case of bad naming. It appears the definition has changed at some point in time: my old Visual Studio 6.0 MSDN Library defines dwTotalPageFile as</p>
<p>&#8220;Indicates the total number of bytes that can be stored in the paging file. Note that this number does not represent the actual physical size of the paging file on disk.&#8221;</p>
<p>Maybe this is an old program, and they implemented that functionality when the documentation used the old definition? </p>
<p>(I don&#8217;t think it&#8217;s a good idea to use functions like GlobalMemoryStatus for any purpose other than purely informative, but that&#8217;s another story)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1261815">
				<div id="div-comment-1261815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.farnz.org.uk/' rel='external nofollow' class='url'>Simon Farnsworth</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160822-00/?p=94135#comment-1261815">
			August 23, 2016 at 8:15 am</a>		</div>

		<p>The bad naming is fairly obvious &#8211; if you design memory management so that physical memory is just a view into the page file (so every byte of physical memory is backed by a byte of page file), you simplify the task of paging &#8211; at any time, you can free up physical memory for another use by writing its contents to its associated bit of page file.</p>
<p>Then, because disk space is limited, design the page file such that it&#8217;s able to change size to match the committed memory limit; if I&#8217;ve got 2 MiB of RAM, and 40 MiB of disk, you limit the page file to 2 MiB if I stay within RAM, but allow it to grow if I run programs that need more memory between them. As long as I have disk space, I can commit more memory &#8211; I&#8217;ll just see disk thrashing if I do too much multitasking in that little RAM. Equally, though, I can depend on having 16 MiB commit available for apps that care, as long as I keep 16 MiB of disk free; that might be as simple as 16 apps running, each app needing 1 MiB each, but only two in active use at any time. No need to close background apps unless I run low on disk space &#8211; they just end up in the page file.</p>
<p>Then you get an application that depends on the size of the page file matching the size of the committed memory. You could change the meaning, but then you break it &#8211; nothing needs the &#8220;correct&#8221; meaning, so when you change VM handling to decouple dwTotalPageFile from the committed memory limit, you leave the old meaning in place, even though it&#8217;s now a lie. Nothing breaks, some things don&#8217;t get broken, we&#8217;re all happy.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

