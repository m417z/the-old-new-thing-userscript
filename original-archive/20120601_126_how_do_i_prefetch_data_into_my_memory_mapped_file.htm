<html>
<head>
<title>How do I prefetch data into my memory-mapped file?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I prefetch data into my memory-mapped file?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 1, 2012 / year-entry #127</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120601-00/?p=7483</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer created a memory mapping on a large file and found that when the memory manager wanted to page in data from that file, it did so in 32KB chunks. The customer wanted to know if there was a way to increase the chunk size for efficiency. The memory manager decides the chunk size...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer created a memory mapping on a large file and found that when the memory manager wanted to page in data from that file, it did so in 32<a href="http://blogs.msdn.com/b/oldnewthing/archive/2009/06/11/9725386.aspx">KB</a> chunks. The customer wanted to know if there was a way to increase the chunk size for efficiency.</p>
<p> The memory manager decides the chunk size for memory-mapped files, and the chunk size is currently set to eight pages, which on a system with 4KB pages, comes out to 32KB chunks. (Note that this chunk size is an internal parameter and is subject to change in future versions of Windows. I'm telling a story, not providing formal documentation.) </p>
<p> You have a few options. </p>
<p> The first option is to switch from memory-mapped files to explicit disk I/O. If you do that, then you have full control over the chunk size. It also means that you have finer control over I/O errors, because you will be told of the error in a controlled manner. As opposed to waiting for the exception to occur, and then carefully parsing the exception to verify that it was in your memory-mapped file region (and not in some other part of the address space), and then trying to unwind out of the exception without <a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/09/10/10347674.aspx"> crossing any frames that are outside your control</a>. </p>
<p> Many people decide not to go this route and stick with the memory-mapped file approach, not because they are really good at writing exception handlers and unwinding safely, but because they really like the convenience of memory-mapped I/O, and if something goes wrong with the I/O, they're fine with the program simply crashing. (Of course, there's the group of people who try to write the really clever exception handler and end up making a bigger mess when they mess up.) </p>
<p> Another option is to go ahead and create your memory-mapped file, but when you are about to do that thing that you want to trigger large-chunk I/O, you can issue sequential <code>Read&shy;File</code> calls from the same file handle into a dummy buffer of, say, 1 megabyte. Do this before you start accessing the memory-mapped version of the file. This will "prefetch" the data off the disk into memory in the large chunks you desire (at a cost of some extra memcpy's). </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-988603">
				<div id="div-comment-988603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">No</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120601-00/?p=7483#comment-988603">
			June 1, 2012 at 7:17 am</a>		</div>

		<p>Another option is to use PrefetchVirtualMemory: <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/Hh780543%28v=vs.85%29.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/Hh780543%28v=vs.85%29.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-988613">
				<div id="div-comment-988613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120601-00/?p=7483#comment-988613">
			June 1, 2012 at 7:19 am</a>		</div>

		<p>MM files as an IO surrogate are more hassle than they worth.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-988643">
				<div id="div-comment-988643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120601-00/?p=7483#comment-988643">
			June 1, 2012 at 8:05 am</a>		</div>

		<p>Didn&#39;t it occur to you to preread the memory mapped region by dereferencing a pointer at 4k increments?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-988653">
				<div id="div-comment-988653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120601-00/?p=7483#comment-988653">
			June 1, 2012 at 8:11 am</a>		</div>

		<p>@alegr1: I wouldn&#39;t call them a &quot;surrogate&quot;. It&#39;s a way of doing I/O, plain and simple. It&#39;s when people think it&#39;s not that the problems begin. Memory-mapped files are particularly useful for sharing data between processes that&#39;s also on disk. Unfortunately, people see memory mapping and think &quot;cool, now I don&#39;t have to worry about I/O anymore&quot;, which couldn&#39;t be more wrong.</p>
<p>Besides, memory-mapped I/O is way cooler.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-988673">
				<div id="div-comment-988673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120601-00/?p=7483#comment-988673">
			June 1, 2012 at 8:19 am</a>		</div>

		<p>I like how some PM found this post in Raymond&#39;s queue a couple years ago, decided to do something about the problem, and created the API that &quot;No&quot; linked to!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-988683">
				<div id="div-comment-988683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120601-00/?p=7483#comment-988683">
			June 1, 2012 at 8:34 am</a>		</div>

		<blockquote><p>
  Besides, memory-mapped I/O is way cooler.
</p></blockquote>
<p>Until you don&#39;t have enough address space. Then you have to handle that (map part of the file, remap as necessary), and that becomes a mess.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-988693">
				<div id="div-comment-988693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120601-00/?p=7483#comment-988693">
			June 1, 2012 at 8:36 am</a>		</div>

		<p>@Gabe</p>
<p>It&#39;s not years, the &quot;No&quot; link is dated 5th of May, so it&#39;s maximum one year :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-988703">
				<div id="div-comment-988703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120601-00/?p=7483#comment-988703">
			June 1, 2012 at 9:42 am</a>		</div>

		<p>@Danny</p>
<p>Gabe was actually refering to how the blog&#39;s posts are put into a queue and the queue can be years in length. It is possible that this post itself was added a year or two ago. So it is possible that some Microsoft Product Manager saw this post in the queue (maybe June 2011, maybe June 2010), brought it to the attention of the Windows higher ups and they thought, yes that is a good idea.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-988723">
				<div id="div-comment-988723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120601-00/?p=7483#comment-988723">
			June 1, 2012 at 11:14 am</a>		</div>

		<p>The Unix world has madvise() which provides the kernel prefetch hints. &nbsp;But it&#39;s harder to handle SIGBUS than it is to use SEH to handle IN_PAGE_ERROR.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-988743">
				<div id="div-comment-988743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120601-00/?p=7483#comment-988743">
			June 1, 2012 at 1:27 pm</a>		</div>

		<p>Danny, you have to account for the time for the feature to be designed, specified, implemented, tested, and documented. &nbsp;Some manager approved this feature quite some time ago. &nbsp;Raymond&#39;s queue might or might not be deep enough to explain it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-988773">
				<div id="div-comment-988773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120601-00/?p=7483#comment-988773">
			June 2, 2012 at 3:29 am</a>		</div>

		<p>Since Raymond&#39;s post opens with a customer query, is it not more likely that the API was inspired by this real world requirement that had already occurred rather than a suggestion in a blog that wasn&#39;t due to see light of day for another year or so?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-988783">
				<div id="div-comment-988783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120601-00/?p=7483#comment-988783">
			June 2, 2012 at 4:28 am</a>		</div>

		<p>Why can&#39;t you ReadFile directly into the memory mapping?</p>
<div class="post">[<i>How could that work? If the mapping is read-only, then you will get an access violation (you specified read-only memory as the output buffer). If the mapping is read-write, then you have a race condition (if the app tries to modify the memory at the same time the I/O manager is writing to it). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-988793">
				<div id="div-comment-988793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">name</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120601-00/?p=7483#comment-988793">
			June 2, 2012 at 7:53 am</a>		</div>

		<p>Can&#39;t you ReadFile it into /dev/null?</p>
<div class="post">[<i>And how would you do that? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-988833">
				<div id="div-comment-988833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120601-00/?p=7483#comment-988833">
			June 3, 2012 at 12:07 pm</a>		</div>

		<p>[&#8230;If the mapping is read-write, then you have a race condition (if the app tries to modify the memory at the same time the I/O manager is writing to it). -Raymond]</p>
<p>Personally I would have thought the IO code would have been clever enough to catch this case, but if not than not.</p>
<div class="post">[<i>How do you expect it to catch this case? And what should it do when it catches it? (Note that modifying the buffer while the read is in progress is <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa365467(v=vs.85).aspx" rel="nofollow">explicitly forbidden</a>.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-988853">
				<div id="div-comment-988853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">HandlingMemMapExceptions</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120601-00/?p=7483#comment-988853">
			June 4, 2012 at 2:08 am</a>		</div>

		<p>Could you please show us some robust exception handler and unwinding code sample to properly manage error conditions with memory-mapped files? Thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-988943">
				<div id="div-comment-988943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120601-00/?p=7483#comment-988943">
			June 4, 2012 at 3:55 pm</a>		</div>

		<p>[How do you expect it to catch this case?]</p>
<p>My internal model of the Windows kernel suggests this should deadlock (by taking a non-recursive lock twice) if not explicitly checked for so it&#39;d have to check for ReadFile on top of its own memory map.</p>
<p>If it did catch it, the code is obviously copying blocks within the memory map, so that&#39;s how to handle it. The degenerate form of copy to self would indeed prefetch page but make it dirty with no actual changes.</p>
<div class="post">[<i>I&#39;m not sure what you mean by &quot;copying blocks within the memory map&quot;. There is no copying going on. The I/O is pumped directly into the pages. The issue is that while the I/O is in flight, the pages are still writable by the application, so what if it writes to it? Should there by some &quot;Uh-oh, the application wrote to the page too, so I should cancel the I/O&quot; (but what if it&#39;s too late to cancel it)? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

