<html>
<head>
<title>How can I tell that somebody used the MAKEINTRESOURCE macro to smuggle an integer inside a pointer?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I tell that somebody used the MAKEINTRESOURCE macro to smuggle an integer inside a pointer?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 25, 2013 / year-entry #256</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>22</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Many functions and interfaces provide the option of passing either a string or an integer. The parameter is formally declared as a string, and if you want to pass an integer, you smuggle the integer inside a pointer by using the MAKE­INT­RESOURCE macro. For example, the Find­Resource function lets you load an resource specified by...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Many functions and interfaces provide the option of passing either a string or an integer. The parameter is formally declared as a string, and if you want to pass an integer, you smuggle the integer inside a pointer by using the <code>MAKE&shy;INT&shy;RESOURCE</code> macro. For example, the <code>Find&shy;Resource</code> function lets you load an resource specified by integer identifier by passing the identifier in the form <code>MAKE&shy;INT&shy;RESOURCE(ID)</code>. You can tell that it was the resource-loading functions who created the macro in the first place, since the name of the macro is "make integer <i>resource</i>."</p>
<p> But other functions use the <code>MAKE&shy;INT&shy;RESOURCE</code> convention, too. The <code>Get&shy;Proc&shy;Address</code> function  lets you obtain a function exported by ordinal if you smuggle the ordinal inside a pointer: <code>Get&shy;Proc&shy;Address(<wbr>hModule, MAKE&shy;INT&shy;RESOURCEA(<wbr>ordinal))</wbr></wbr></code>. (You have to use <code>MAKE&shy;INT&shy;RESOURCEA</code> because  <code>Get&shy;Proc&shy;Address</code> explicitly takes an ANSI string.) </p>
<p> What if you're implementing a function whose interface requires you to accept both strings and integers-smuggled-inside strings? For example, maybe you're implementing <code>IContext&shy;Menu::<wbr>Invoke&shy;Command</wbr></code>, which needs to look at the <code>CM&shy;INVOKE&shy;COMMAND&shy;INFO.<wbr>lpVerb</wbr></code> member and determine whether the invoker passed a string or a menu offset. </p>
<p> You can use the <code>IS_<wbr>INT&shy;RESOURCE</wbr></code> macro. It will return non-<code>FALSE</code> if the pointer you passed is really an integer smuggled inside a pointer. </p>
<p> How does <code>MAKE&shy;INT&shy;RESOURCE</code> work? It just stashes the integer in the bottom 16 bits of a pointer, leaving the upper bits zero. This relies on the convention that the first 64<a href="http://blogs.msdn.com/b/oldnewthing/archive/2009/06/11/9725386.aspx">KB</a> of address space is never mapped to valid memory, a convention that is enforced starting in Windows&nbsp;7. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1079763">
				<div id="div-comment-1079763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1079763">
			September 25, 2013 at 7:27 am</a>		</div>

		<p>That last sentence just made me laugh &#8211; is there some convoluted path that could lead to some (correctly written) code on earlier Windows accidentally tripping over this? Or would it always have been hacked-together bodges that could fall foul of it (and have the string parameter misinterpreted)?</p>
<div class="post">[<em>It has always been the case that you could never pass a pointer to memory in the bottom 64KB to a function that accepts <code>MAKEINT&shy;RESOURCE</code>, because the function would treat it as a smuggled integer. Any code which did that was already broken. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1079823">
				<div id="div-comment-1079823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1079823">
			September 25, 2013 at 9:27 am</a>		</div>

		<p>[a convention that is enforced starting in Windows 7.]</p>
<p>Is that 64 bit specific? I&#39;m told passing 0x1 to VirtualAlloc worked on 32 bit until Windows 8. They&#39;re still looking for the call on Windows 8 that is used to initialize NTVDM&#39;s low memory. On W7, it was believed this was the call.</p>
<p>The only good reason to do this is to emulate the environment from ancient BSD (to run libraries from that env) that abused the fact that *NULL = 0 for any simple type because the zero page was mapped read-only at address 0.</p>
<div class="post">[<em>NTVDM is the only program allowed to commit memory at 0. It has a special exemption. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1079833">
				<div id="div-comment-1079833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1079833">
			September 25, 2013 at 9:33 am</a>		</div>

		<p>@Damien</p>
<p>I think it is referring more to the possibility that the previous versions of Windows did not use the first 64KB of address space as an implementation detail, whereas now it is specified factually in the docs.</p>
<p>The old style seems similar to how Raymond gives us lots of implementation details about stuff and then says &quot;this isn&#39;t official, and can change at any time (and in fact it has).&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1079843">
				<div id="div-comment-1079843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1079843">
			September 25, 2013 at 9:48 am</a>		</div>

		<p>So MAKEINTRESOURCE is conceptually &quot;LPTSTR STRINGIFY_WORD(WORD w);&quot; and IS_INTRESOURCE is conceptually &quot;bool IS_STRINGIFIED_WORD(LPTSTR s);&quot;?</p>
<p>Is there a conceptual equivalent of &quot;WORD UNSTRINGIFY_WORD(LPTSTR s);&quot; or does one just cast the pointer to an int?</p>
<div class="post">[<em>LOWORD is the unstringifier. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1079853">
				<div id="div-comment-1079853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1079853">
			September 25, 2013 at 10:19 am</a>		</div>

		<p>The origin of this smuggling operation lies in 16-bit Windows protected mode.</p>
<p>A far pointer consists of 16 bit selector and 16 bit offset. If a selector is zero, the memory is not accessible. Thus, any valid pointer never has a zero selector, and can be distinguished from a resource ID.</p>
<div class="post">[<em>Actually, it came from 16-bit real mode. The first 64KB of memory was used for interrupt vectors and stuff, so Windows could not use it. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-1079903">
				<div id="div-comment-1079903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1079903">
			September 25, 2013 at 11:17 am</a>		</div>

		<p>&quot;They&#39;re still looking for the call on Windows 8 that is used to initialize NTVDM&#39;s low memory. &quot;</p>
<p>I think this is part of why NTVDM is disabled by default on Win8.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1079933">
				<div id="div-comment-1079933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1079933">
			September 25, 2013 at 2:16 pm</a>		</div>

		<p>@Raymond. The convention was only mandated in Windows8 (except in NTVDM, which is opted out via a bit in the EPROCESS structure). In Windows 7 any process can allocate memory below 64KB by requesting it through VirtualAlloc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1079943">
				<div id="div-comment-1079943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1079943">
			September 25, 2013 at 2:41 pm</a>		</div>

		<p>The enforcement started in Windows 8, not Windows 7. &nbsp;To allocate the zero page on 7 and below, call VirtualAlloc[Ex] with lpAddress equal to 1.</p>
<p>The reason the zero page has to be available to NTVDM is that the x86 series does not have a way to use a base address for V86-mode segment translation other than 00000000. &nbsp;It&#39;d be nice if Windows instead used software emulation for 16-bit real-mode programs rather than try to use V86 mode; this would be less risky than V86 mode, and would even allow it to work on 64-bit Windows.</p>
<p>Then again, backward compatibility isn&#39;t as much a concern lately as it has been in the past.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1079953">
				<div id="div-comment-1079953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1079953">
			September 25, 2013 at 2:48 pm</a>		</div>

		<p>On a somewhat related note, I recently had to call GetProcAddress from C# and needed both the string version and ordinal version. &nbsp;This was the trick I used to work around the inability to represent MAKEINTRESOURCEA in C#:</p>
<p>[DllImport(&quot;kernel32.dll&quot;, CharSet=CharSet.Ansi, ExactSpelling=true, SetLastError=true)]</p>
<p>public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);</p>
<p>[DllImport(&quot;kernel32.dll&quot;, EntryPoint = &quot;GetProcAddress&quot;, SetLastError=true)]</p>
<p>public static extern IntPtr GetProcAddressOrdinal(IntPtr hModule, IntPtr procName);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1079963">
				<div id="div-comment-1079963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1079963">
			September 25, 2013 at 4:42 pm</a>		</div>

		<p>@Myria</p>
<p>You don&#39;t need to use IntPtr &#8211; just use int:</p>
<p>[DllImport(&quot;kernel32.dll&quot;, CharSet=CharSet.Ansi, ExactSpelling=true, SetLastError=true)]</p>
<p>public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);</p>
<p>[DllImport(&quot;kernel32.dll&quot;, EntryPoint = &quot;GetProcAddress&quot;, SetLastError=true)]</p>
<p>public static extern IntPtr GetProcAddressOrdinal(IntPtr hModule, int ordinalNumber);</p>
<p>This works because even on 64-bit (where an int is still 32-bit) because parameters &lt; 64bits are sign-extended to 64-bits before being sent as part of the x64 API, so even if you send an int to the API it&#39;ll arrive at the C API&#39;s LPCSTR with the top-bits set to zero.</p>
<div class="post">[<em>Um, there are other 64-bit ABIs beyond x64. -Raymond</em><em>]</em></div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1079893">
				<div id="div-comment-1079893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1079893">
			September 25, 2013 at 11:10 am</a>		</div>

		<p>OK, so the complete set is:</p>
<p>LPTSTR STRING_FROM_WORD(WORD w) { return MAKEINTRESOURCE(w); }</p>
<p>BOOL STRING_REALLY_WORD(LPTSTR s) { return IS_INTRESOURCE(s); }</p>
<p>BOOL WORD_FROM_STRING(LPTSTR s, WORD *pw) { if (STRING_REALLY_WORD(s)) { *pw = LOWORD(s); return TRUE; } else { return FALSE; } }</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1079993">
				<div id="div-comment-1079993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1079993">
			September 26, 2013 at 7:51 am</a>		</div>

		<p>[Actually, it came from 16-bit real mode. The first 64KB of memory was used for interrupt vectors and stuff, so Windows could not use it. -Raymond]</p>
<p>The interrupt table only allocates the first 1k bytes. &quot;Stuff&quot; are reserving 63k of the precious 640k real memory to ease resource loading? Bloat.</p>
<div class="post">[<em>If you want to use a string in the bottom 64KB, just use a 16:16 alias. The only place it doesn&#39;t work is the first 16 bytes, so don&#39;t put strings there. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-1080043">
				<div id="div-comment-1080043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1080043">
			September 26, 2013 at 10:04 am</a>		</div>

		<p>@Myria: Backward compatible with applications that, at best estimate, were probably last updated 15 years ago?</p>
<p>There comes a time to turn it off. I suspect &#8211; unlike Yuhong Bao &#8211; that off-by-default in Windows 8 is mostly to reduce possible attack surface area (there was a security bulletin, MS13-063, issued just last month), partly to gather telemetry data on whether the feature is even necessary.</p>
<p>An emulator would be a huge investment of time and effort for little to no benefit. MS didn&#39;t bother for x64, I don&#39;t expect them to do so for anything else. There&#39;s always DosBox.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1080073">
				<div id="div-comment-1080073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1080073">
			September 26, 2013 at 10:49 am</a>		</div>

		<p>@Raymond:</p>
<p>&gt;&gt; &quot;Um, there are other 64-bit ABIs beyond x64. -Raymond&quot;</p>
<p>Sure. But x64 is the only supported 64-bit ABI for Windows now that it no longer supports Itanium, and since ARM is 32-bit only for Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1080083">
				<div id="div-comment-1080083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1080083">
			September 26, 2013 at 10:51 am</a>		</div>

		<p>In case people do not know: the importance to not allowing user space programs to map the bottom few pages is to protect against null pointer dereference attacks against the kernel.</p>
<p>On x86, the user space and the kernel share a single address space, with the kernel on the top and the user space on the bottom. If the kernel has a bug and tries to read or write through a null pointer (usually plus a offset due to the null pointer being a pointer to a struct), a user space program who could map the bottom few pages could manipulate the result and confuse the kernel enough to make it execute arbitrary code from user space. As a simple example, imagine what happens if the kernel was reading a function pointer from a struct, and the pointer to the struct was a null pointer.</p>
<p>A few modern processors have other ways (like SMAP and SMEP) to prevent against this class of exploit, but completely forbidding the user space from mapping the first page of the address space is a cheap way to turn many of these kinds of exploitable bugs into mere crashes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1079973">
				<div id="div-comment-1079973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1079973">
			September 26, 2013 at 3:52 am</a>		</div>

		<p>MAKEINTRESOURCE is just a wrapper around MAKELONG(i, 0) which computes to i | (0 &lt;&lt; 16) which is straightforward enough. However 16-bit compilers weren&#39;t very good at handling other uses of MAKELONG with arbitrary arguments, handing the result off to a library method to perform the 32-bit shift. (These days compilers are much smarter and can do stuff like (u &lt;&lt; 8) | (u &gt;&gt; 8) using a rotate instruction.)</p>
<p>Given a specific compiler, it was possible to avoid the library call by using a compiler-specific extension. Let&#39;s see how many of them I can remember:</p>
<p>For TopSpeed C, there was a special type void &lt;&gt; * which was a 16-bit pointer into the given segment, so you could write ((void _far *)(void &lt;b&gt; *)a).</p>
<p>For Turbo C, there was a special type void _seg * to which you just added the offset the the segment to get a far pointer, i.e. ((void _seg *)b + (void _near *)a).</p>
<p>For MSVC there was a special type _segment which was similar to void _seg * but you had to use a special :&gt; operator to combine the segment with a _based pointer i.e. ((_segment)b + (void _based(void) *)a).</p>
<p>(Note that to use these in the MAKELONG macro you would also want to cast a and b to unsigned and the result to unsigned long.)</p>
<p>With Turbo C and MSVC you could also use the segment type as a fast HIWORD(l) operation i.e. ((unsigned)(void _seg *)(void _far *)l). Then something like return HIWORD(f()) would result in call f; mov ax, dx; leave; ret instead of call f; push ax; push dx; push 16; call _lsr32; leave; ret.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1080093">
				<div id="div-comment-1080093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1080093">
			September 26, 2013 at 10:57 am</a>		</div>

		<p>@Matt: for how long? Now that ARMv8 processors are starting to appear, if AArch64 (64-bit ARM) servers start becoming popular, Microsoft probably will specify its own ABI for it (gratuitously incompatible with the Linux one, like they did on x86-64).</p>
<p>Depending on the particularities of a single 64-bit ABI is unwise, especially in code which can be deployed to future processors without needing intervention by the original developer (like code written purely in Java or C#).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1080143">
				<div id="div-comment-1080143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1080143">
			September 26, 2013 at 2:11 pm</a>		</div>

		<p>@Matt Just what Cesar is saying, ARM is pushing heavily into the server space and has its own 64-bit API now.</p>
<p>Also if MS decided to follow the official ABI defined by the manufacturer for once, if you pass an integer to a function in W0, there&#39;s nothing in there that says that it&#39;s sign-extended to X0, so doubly unwise to rely on this fact.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1080163">
				<div id="div-comment-1080163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1080163">
			September 26, 2013 at 3:40 pm</a>		</div>

		<p>@Cesar: I doubt it was &quot;gratuitously&quot;. There often lots of things to consider, but I doubt one of them is compatibility/incompatibility with Linux.</p>
<p>(Quite assumptions)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1080213">
				<div id="div-comment-1080213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ender</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1080213">
			September 27, 2013 at 1:50 am</a>		</div>

		<p>&gt; Backward compatible with applications that, at best estimate, were probably last updated 15 years ago?</p>
<p>We have a client that still uses DOS-based accounting software (written in Clipper) &#8211; that&#39;s still getting regular updates&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1080403">
				<div id="div-comment-1080403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1080403">
			September 28, 2013 at 6:05 pm</a>		</div>

		<p>@voo: Yeah I noticed that the ABIs weren&#39;t compatible. You know what. It matters so little. Assembly language in x64 is something only used by necessity, not for performance, so portability should hardly be considered an issue on the few k of glue code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1080593">
				<div id="div-comment-1080593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130925-00/?p=3123#comment-1080593">
			September 30, 2013 at 1:41 pm</a>		</div>

		<p>@Joshua: What? x86-64 assembly is often used for performance. Take a look at high performance video encoders or decoders, like for instance x264 or ffmpeg. And they are often portable. (ffmpeg has a bit of trouble being compiled with MSVC, but that is because MSVC still does not have support for the C99 standard; someone wrote a C99-to-C89 converter to work around this issue.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

