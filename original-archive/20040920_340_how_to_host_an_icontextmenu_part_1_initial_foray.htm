<html>
<head>
<title>How to host an IContextMenu, part 1 - Initial foray</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How to host an IContextMenu, part 1 &#8211; Initial foray</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 20, 2004 / year-entry #341</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Most documentation describes how to plug into the shell context menu structure and be a context menu provider. If you read the documentation from the other side, then you also see how to host the context menu. (This is the first of an eleven-part series with three digressions. Yes, eleven parts-sorry for all you folks...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Most documentation describes how to plug into the shell
context menu structure and be a context menu provider.  If you
<a HREF="/oldnewthing/archive/2003/12/26/45979.aspx">
read the documentation from the other side</a>,
then you also see how to <strong>host</strong> the context menu.
(This is the first of an eleven-part series with three digressions.
Yes, eleven parts&mdash;sorry for all you folks who are in it just
for the history articles. I'll try to toss in an occasional
amusing diversion.)
</p>
<p>
The usage pattern for an IContextMenu is as follows:
</p>
<ul>
<li>Creation.
<li>
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/icontextmenu/QueryContextMenu.asp">
IContextMenu::QueryContextMenu</a>.
This initializes the context menu.
During this call,
the context menu decides which items appear in it,
based on the flags you pass.</p>
<li>
Display the menu or otherwise select a command to execute,
using
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/icontextmenu/GetCommandString.asp">
IContextMenu::GetCommandString</a>,
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/icontextmenu2/handlemenumsg.asp">
IContextMenu2::HandleMenuMsg</a> and
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/icontextmenu3/handlemenumsg2.asp">
IContextMenu3::HandleMenuMsg2</a> to faciliate the user interaction.</p>
<li>
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/icontextmenu/InvokeCommand.asp">
IContextMenu::InvokeCommand</a>.
This executes the command.
</ul>
<p>
The details of this are explained in
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/programmersguide/shell_int/shell_int_extending/extensionhandlers/contextmenuhandlers.asp">
Creating Context MenuHandlers</a> from the point of view of
the IContextMenu implementor.
</p>
<blockquote CLASS=q><p>
The Shell first calls IContextMenu::QueryContextMenu.
It passes in an HMENU handle that the method
can use to add items to the context menu.
If the user selects one of the commands,
IContextMenu::GetCommandString
is called to retrieve the Help string
that will be displayed on the Microsoft Windows Explorer status bar.
If the user clicks one of the handler's items,
the Shell calls IContextMenu::InvokeCommand.
The handler can then execute the appropriate command.
</p>
</blockquote>
<p>
<a HREF="/oldnewthing/archive/2003/12/26/45979.aspx">
Read it from the other side</a> to see what it says you need to
do as the IContextMenu host:
</p>
<blockquote CLASS=m><p>
The <i>IContextMenu host</i> first calls IContextMenu::QueryContextMenu.
It passes in an HMENU handle that the method
can use to add items to the context menu.
If the user selects one of the commands,
IContextMenu::GetCommandString
is called to retrieve the Help string
that will be displayed on <i>the host's</i> status bar.
If the user clicks one of the handler's items,
the <i>IContextMenu host</i> calls IContextMenu::InvokeCommand.
The handler can then execute the appropriate command.
</p>
</blockquote>
<p>
Exploring the consequences of this new interpretation of the
context menu documentation will be our focus for the next few weeks.
</p>
<p>
Okay, let's get started.
We begin, as always, with
<a HREF="/oldnewthing/archive/2003/07/23/54576.aspx">
our scratch program</a>.
I'm going to assume you're already familiar with the shell namespace
and pidls so I can focus on the context menu part of the issue.
</p>
<pre>
<font COLOR=blue>#include &lt;shlobj.h&gt;

HRESULT GetUIObjectOfFile(HWND hwnd, LPCWSTR pszPath, REFIID riid, void **ppv)
{
  *ppv = NULL;
  HRESULT hr;
  LPITEMIDLIST pidl;
  SFGAOF sfgao;
  if (SUCCEEDED(hr = SHParseDisplayName(pszPath, NULL, &amp;pidl, 0, &amp;sfgao))) {
    IShellFolder *psf;
    LPCITEMIDLIST pidlChild;
    if (SUCCEEDED(hr = SHBindToParent(pidl, IID_IShellFolder,
                                      (void**)&amp;psf, &amp;pidlChild))) {
      hr = psf-&gt;GetUIObjectOf(hwnd, 1, &amp;pidlChild, riid, NULL, ppv);
      psf-&gt;Release();
    }
    CoTaskMemFree(pidl);
  }
  return hr;
}</font>
</pre>
<p>
This simple function takes a path and gets a shell UI object from it.
We convert the path to a pidl with
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/functions/shparsedisplayname.asp">
SHParseDisplayName</a>,
then bind to the pidl's parent with
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/functions/shbindtoparent.asp">
SHBindToParent</a>, then ask the parent
for the UI object of the child with
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/ishellfolder/getuiobjectof.asp">
IShellFolder::GetUIObjectOf</a>.
I'm assuming you've had enough experience with the namespace that
this is ho-hum.
</p>
<p>
(The helper functions SHParseDisplayName and SHBindToParent don't
do anything you couldn't have done yourself.  They just save you
some typing.  Once you start using the shell namespace
for any nontrivial amount of time, you build up a library of little
functions like these.)
</p>
<p>
For our first pass, all we're going to do is invoke the "Play" verb
on the file when the user right-clicks.  (Why right-click?
Because a future version of this program will display a context menu.)
</p>
<pre>
<font COLOR=blue>#define SCRATCH_QCM_FIRST 1
#define SCRATCH_QCM_LAST  0x7FFF

void OnContextMenu(HWND hwnd, HWND hwndContext, UINT xPos, UINT yPos)
{
  IContextMenu *pcm;
  if (SUCCEEDED(GetUIObjectOfFile(hwnd, L"C:\\Windows\\clock.avi",
                   IID_IContextMenu, (void**)&amp;pcm))) {
    HMENU hmenu = CreatePopupMenu();
    if (hmenu) {
      if (SUCCEEDED(pcm-&gt;QueryContextMenu(hmenu, 0,
                             SCRATCH_QCM_FIRST, SCRATCH_QCM_LAST,
                             CMF_NORMAL))) {
        CMINVOKECOMMANDINFO info = { 0 };
        info.cbSize = sizeof(info);
        info.hwnd = hwnd;
        info.lpVerb = "play";
        pcm-&gt;InvokeCommand(&amp;info);
      }
      DestroyMenu(hmenu);
    }
    pcm-&gt;Release();
  }
}

    HANDLE_MSG(hwnd, WM_CONTEXTMENU, OnContextMenu);</font>
</pre>
<p>
As noted in the checklist above, first we create the IContextMenu,
then initialize it by calling IContextMenu::QueryContextMenu.
Notice that even though we don't intend to display the menu,
we still have to create a popup menu because
IContextMenu::QueryContextMenu requires on.
We don't actually display the resulting menu, however;
instead of asking the user to pick an item from the menu,
we make the choice for the user and select "Play",
filling in
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/structures/cminvokecommandinfo.asp">
the CMINVOKECOMMANDINFO structure</a> and
invoking it.
</p>
<p>
But how did we know that the correct verb was "Play"?
In this case, we knew because we hard-coded the file
to "clock.avi" and we knew that AVI files have a "Play" verb.
But of course that doesn't work in general.
Before getting to invoking the default verb, let's
first take the easier step of asking the user what
verb to invoke.  That exercise will actually distract us
for a while, but we'll come back to the issue of the
default verb afterwards.
</p>
<p>
If the code above is all you really wanted (invoking a fixed
verb on a file), then you didn't need to go through all the
context menu stuff.
The code above is equivalent to calling
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/functions/shellexecuteex.asp">
the ShellExecuteEx function</a>,
passing the SEE_MASK_INVOKEIDLIST flag to indicate that you
want the invoke to go through the IContextMenu.
</p>
<p>
[Typo fixed 25 September.]</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-212773">
				<div id="div-comment-212773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Moi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-212773">
			September 20, 2004 at 7:17 am</a>		</div>

		<p>Nice article, but it shouldn&#8217;t be needed. The MSDN documentation really shouldn&#8217;t require people to &quot;read the contract from the other side&quot;. I can only assume that the people who write the documentation think that everyone still uses RPN calculators.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-212783">
				<div id="div-comment-212783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-212783">
			September 20, 2004 at 8:19 am</a>		</div>

		<p>All interfaces can be read from both sides. Most people focus on the implementation side, but there&#8217;s also the consumer side.</p>
<p>How are you suggesting that the documentation should be changed? Should every interface say, &quot;You can either implement or call this interface&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-212813">
				<div id="div-comment-212813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-212813">
			September 20, 2004 at 9:33 am</a>		</div>

		<p>MS programming docs are interesting. Some authors seem to write &quot;cookbook&quot; style. There is useful info in the remarks section and sometimes a link to sample code.</p>
<p>Others are far more dictionary style. A terse description of the function or API with almost no clue as to how to use it to get useful work done.</p>
<p>The latter requires reading between the lines and from the other side. Too much extrapolation in my opinion.</p>
<p></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-212823">
				<div id="div-comment-212823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-212823">
			September 20, 2004 at 9:36 am</a>		</div>

		<p>I prefer the dictionary style myself. I think it has to do with which half of the brain you think with.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-212853">
				<div id="div-comment-212853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff Parker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-212853">
			September 20, 2004 at 10:00 am</a>		</div>

		<p>A quick question in this 11 part series will you be demonstrating the .net implementations?</p>
<p>System.Windows.Forms.ContextMenu</p>
<p>Just curious, but don&#8217;t let me disuade you from where you are going. I just haven&#8217;t used C++ in at least 3 years since C# came out. And yeah I know there are other .net blogs but none of them compair to the Raymond and Larry Blogs for in depth detail and knowledge.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-212863">
				<div id="div-comment-212863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-212863">
			September 20, 2004 at 10:03 am</a>		</div>

		<p>Raymond: Dictionary style only works if you have extensive sample code, the source code of the API implementation, or a large number of reference books to work from.</p>
<p>That&#8217;s the thing about Index knowledge; it lets you find what you&#8217;re looking for. It doesn&#8217;t, however, teach concepts or ideas.</p>
<p>For an example of an API which desperately needs better sample code and some extensive real-world examples, see Uniscribe. While Uniscribe straddles the line between cookbook and dictionary in its documentation, it still leaves lots of questions regarding best practices et al unanswered.</p>
<p>I guess what it all boils down to is this:<br />
<br />Dictionary-style doco is best when one already knows the subject at hand. Cookbook style is best when one needs to learn the subject. Good documentation includes both.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-212873">
				<div id="div-comment-212873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-212873">
			September 20, 2004 at 10:37 am</a>		</div>

		<p>I know zero about Windows Forms.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-212883">
				<div id="div-comment-212883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/09/20/231739.aspx#231881' rel='external nofollow' class='url'>mschaef</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-212883">
			September 20, 2004 at 10:49 am</a>		</div>

		<p>The thing that bothers me about reading the documentation &quot;from the other side&quot;, is that that&#8217;s basically what Microsoft has to do to implement the Windows API in the first place.  Given all the trouble that Microsoft has had ensuring compatibility over the years, that doesn&#8217;t give me much confidence in my own ability to produce a reasonable context menu host (or whatever). Obviously, ISV software doesn&#8217;t have quite the same compatibility requirements as Windows itself, but given the lower resources most ISV&#8217;s can bring to bear on the problem, implementing the API from the other side seems like it might be a fairly costly move.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-212903">
				<div id="div-comment-212903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://nedwork.com.br/blog/weblog.php' rel='external nofollow' class='url'>Michel van Kessel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-212903">
			September 20, 2004 at 3:06 pm</a>		</div>

		<p>I know zero too about Windows Forms!<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-212913">
				<div id="div-comment-212913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/09/20/231739.aspx#232038' rel='external nofollow' class='url'>Wilfried Wieser</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-212913">
			September 20, 2004 at 4:19 pm</a>		</div>

		<p>The MSDN documentation for most standard interfaces honors both sides by having &quot;When to Implement&quot;, &quot;When to Use&quot;, &quot;Notes to Callers&quot; and &quot;Notes to Implementers&quot; sections.</p>
<p>Most interfaces, however, either have just a few implementors or they have just a few callers. The one more exclusive side of an interface becomes &quot;the other side&quot; of that interface. This side is harder to join because everybody tests against the few well known instances of this side. If somebody implements IContextMenu, he or she will most likely only test against the Windows Shell, despite the fact that &quot;Context Menu&quot; is a quite general term. If the code runs successfully in the shell, it is considered correct.</p>
<p>This has been a major problem for unmanaged component software.</p>
<p>In [HKLMSOFTWAREMicrosoftWindowsCurrentVersionShellCompatibilityObjects] there are strange flags like &quot;CTXMENU_LIMITEDQI&quot;, indicating that there are implementations of IContextMenu which may even get a menu host in trouble if he QI&#8217;s the object differently than a previous version of the shell.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-212923">
				<div id="div-comment-212923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/09/20/231739.aspx#232060' rel='external nofollow' class='url'>asdf</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-212923">
			September 20, 2004 at 4:51 pm</a>		</div>

		<p>For some more sample source code, I love ContextMenu:</p>
<p><a target="_new" href="http://www.maddogsw.com/cmdutils/" rel="nofollow">http://www.maddogsw.com/cmdutils/</a></p>
<p>It even has code to parse the menu to output text instead of displaying a GUI menu.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-212943">
				<div id="div-comment-212943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://flurf.net/' rel='external nofollow' class='url'>Eric TF Bat</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-212943">
			September 20, 2004 at 5:13 pm</a>		</div>

		<p>For the benefit of the people who just want the history and the anecdotes, why not mark your articles with categories and make it possible to view entries by categories?  Does the blogging software have that kind of capability?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-212953">
				<div id="div-comment-212953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-212953">
			September 20, 2004 at 5:20 pm</a>		</div>

		<p>Um, that&#8217;s what the category feeds are for.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-212993">
				<div id="div-comment-212993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/09/20/231739.aspx#232197' rel='external nofollow' class='url'>name</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-212993">
			September 20, 2004 at 8:18 pm</a>		</div>

		<p>The thing that still bugs me about reading specs from the other side is that it won&#8217;t always work.</p>
<p>Windows&#8217;s implementation has to be compatible with buggy applications, and may contain workarounds you won&#8217;t think of. Or Windows may have bugs or quirks that applications depend on.  Or it may handle details of a correct implementation that aren&#8217;t obvious in the spec (e.g., ShellExecute expands environment strings).  And when specs change, you may have to track them.</p>
<p>Is the strategy of reading a contract from the other side successfully used on a variety of specs in real applications?  If not, why not?  If so, does it cause the implementors endless grief, or what?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-213043">
				<div id="div-comment-213043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/09/21/231739.aspx#232366' rel='external nofollow' class='url'>Cooney</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-213043">
			September 21, 2004 at 6:53 am</a>		</div>

		<blockquote><p>
  Is the strategy of reading a contract from the other side successfully used on a variety of specs in real applications? If not, why not? If so, does it cause the implementors endless grief, or what?</p>
<p>Probably not. If it were, it&#8217;d be more akin to a standard &#8211; implementations are judged by their compliance to a standard, and variations are treated as bugs in the code. </p>
<p>Windows is different &#8211; it is the defacto standard, and is authoritative, more so than any written spec. Variations between the code and the spec are treated as bugs in the spec (provided that someone somewhere depends on the behavior). </p>
<p>I think the best way to view this is to look at the docs as a starting point, and then resolve any questions by testing the code to see what it does (which is how we get bug-dependency in the first place).
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-213193">
				<div id="div-comment-213193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeproject.com/script/articles/list_articles.asp?userid=152' rel='external nofollow' class='url'>Mike Dunn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-213193">
			September 21, 2004 at 11:36 am</a>		</div>

		<blockquote><p>
  Is the strategy of reading a contract from the other side successfully used on a variety of specs in real applications?</p>
<p>I imagine that reading the context menu shell extension spec from the other side is done often, since there are many Explorer shell replacements out there, and a file/dir context menu is a pretty big part of the shell.<br />
  <br />Other apps like WndTabs for VC 6 do it as well (r-click a tab and you can get the Explorer context menu for a source file).
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-216443">
				<div id="div-comment-216443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://notgartner.com/posts/744.aspx' rel='external nofollow' class='url'>notgartner.com: Mitch Denny's Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-216443">
			October 13, 2004 at 9:29 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-357753">
				<div id="div-comment-357753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.ailight.jp/blog/sha256/archive/2006/03/23/11241.aspx' rel='external nofollow' class='url'>社本＠ワック Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-357753">
			March 22, 2006 at 1:33 pm</a>		</div>

		<p>IContextMenu のホスト方法 &#8211; Shell</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-511543">
				<div id="div-comment-511543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogwell.wordpress.com/2007/06/05/implementing-sent-to-mail-recipient-in-your-application/' rel='external nofollow' class='url'>Implementing "Sent To Mail Recipient" in your Application &laquo; BlogWell</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-511543">
			June 6, 2007 at 2:46 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogwell.wordpress.com/2007/06/05/implementing-sent-to-mail-recipient-in-your-application/" rel="nofollow">http://blogwell.wordpress.com/2007/06/05/implementing-sent-to-mail-recipient-in-your-application/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-587013">
				<div id="div-comment-587013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog-well.com/2007/06/05/implementing-sent-to-mail-recipient-in-your-application/' rel='external nofollow' class='url'>BlogWell &raquo; Implementing &#8220;Sent To Mail Recipient&#8221;; in your Application</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040920-00/?p=37823#comment-587013">
			January 8, 2008 at 4:11 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blog-well.com/2007/06/05/implementing-sent-to-mail-recipient-in-your-application/" rel="nofollow">http://blog-well.com/2007/06/05/implementing-sent-to-mail-recipient-in-your-application/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

