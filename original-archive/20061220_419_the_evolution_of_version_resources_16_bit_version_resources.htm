<html>
<head>
<title>The evolution of version resources - 16-bit version resources</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The evolution of version resources &#8211; 16-bit version resources</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 20, 2006 / year-entry #420</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20061220-15/?p=28653</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">I return to the extremely sporadic series on resources with a description of the version resource. You don't need to know how version resources are formatted internally; you should just use the version resource manipulation functions GetFileVersionInfo, VerQueryValue, and their friends. I'm providing this information merely for its historical significance. Version resources can be viewed...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
I return to the extremely sporadic series on resources
with a description of the version resource.
You don't need to know how version resources are
formatted internally;
you should just use the version resource manipulation functions
<code>GetFileVersionInfo</code>,
<code>VerQueryValue</code>, and their friends.
I'm providing this information merely for its historical significance.
</p>
<p>
Version resources can be viewed as a serialized tree structure.
Each node of the tree has a name and associated data
(either binary or text),
and each node can have zero or more child nodes.
The root node is always named <code>VS_VERSION_INFO</code> and
is a binary node consisting of a <code>VS_FIXEDFILEINFO</code>
structure.
Beyond that, you can call your nodes anything you want and
give them any kind of data you want.
But if you want other people to understand your version information,
you'd be best off following the conventions I describe below.
Actually, since people seem to prefer diagrams to words,
I'll give you a diagram:
</p>
<table>
<tr>
<td COLSPAN=4><code>VS_VERSION_INFO</code></td>
<td><code>VS_FIXEDFILEINFO</code> structure (binary)</td>
</tr>
<tr>
<td COLSPAN=1 STYLE="width: 1em"></td>
<td COLSPAN=3><code>StringFileInfo</code></td>
<td>(no data)</td>
</tr>
<tr>
<td COLSPAN=1></td>
<td COLSPAN=1 STYLE="width: 1em"></td>
<td COLSPAN=2><code>xxxxyyyy</code></td>
<td>(no data)</td>
</tr>
<tr>
<td COLSPAN=1></td>
<td COLSPAN=1></td>
<td COLSPAN=1 STYLE="width: 1em"></td>
<td COLSPAN=1><code>CompanyName</code></td>
<td>string for xxxxyyyy</td>
</tr>
<tr>
<td COLSPAN=1></td>
<td COLSPAN=1></td>
<td COLSPAN=1></td>
<td COLSPAN=1><code>FileDescription</code></td>
<td>string for xxxxyyyy</td>
</tr>
<tr>
<td COLSPAN=1></td>
<td COLSPAN=1></td>
<td COLSPAN=1></td>
<td COLSPAN=1><code>FileVersion</code></td>
<td>string for xxxxyyyy</td>
</tr>
<tr>
<td COLSPAN=1></td>
<td COLSPAN=1></td>
<td COLSPAN=1></td>
<td COLSPAN=1><code>...</code></td>
<td></td>
</tr>
<tr>
<td COLSPAN=1></td>
<td COLSPAN=1 STYLE="width: 1em"></td>
<td COLSPAN=2><code>zzzzwwww</code></td>
<td>(no data)</td>
</tr>
<tr>
<td COLSPAN=1></td>
<td COLSPAN=1></td>
<td COLSPAN=1 STYLE="width: 1em"></td>
<td COLSPAN=1><code>CompanyName</code></td>
<td>string for zzzzwwww</td>
</tr>
<tr>
<td COLSPAN=1></td>
<td COLSPAN=1></td>
<td COLSPAN=1></td>
<td COLSPAN=1><code>FileDescription</code></td>
<td>string for zzzzwwww</td>
</tr>
<tr>
<td COLSPAN=1></td>
<td COLSPAN=1></td>
<td COLSPAN=1></td>
<td COLSPAN=1><code>FileVersion</code></td>
<td>string for zzzzwwww</td>
</tr>
<tr>
<td COLSPAN=1></td>
<td COLSPAN=1></td>
<td COLSPAN=1></td>
<td COLSPAN=1><code>...</code></td>
<td></td>
</tr>
<tr>
<td COLSPAN=1 STYLE="width: 1em"></td>
<td COLSPAN=3><code>VarFileInfo</code></td>
<td>(no data)</td>
</tr>
<tr>
<td COLSPAN=1></td>
<td COLSPAN=1 STYLE="width: 1em"></td>
<td COLSPAN=2><code>Translation</code></td>
<td>array of locale/codepage pairs (binary, variable-size)</td>
</tr>
</table>
<p>
The child nodes can appear in any order, and the strings
like <code>CompanyName</code> are all optional.
<code>VarFileInfo\Translation</code>, however, is mandatory
(by convention).
</p>
<p>
If you've used <code>VerQueryValue</code>, you know that the
binary data stored under
<code>VarFileInfo\Translation</code> consists of a variable-length
array of locale/codepage pairs, each of which in turn corresponds
to a child of the <code>StringfileInfo</code> node.
I'm not going to go into what each of the strings means and how
the local/codepage pairs turn into child nodes of <code>StringFileInfo</code>;
I'll leave you to research that on your own (assuming you don't
already know).
</p>
<p>
How does this tree get stored into a resource?
It's actually quite simple.
Each node is stored in a structure which takes the following
form (in pseudo-C):
</p>
<pre>
struct VERSIONNODE {
  WORD  cbNode;
  WORD  cbData;
  CHAR  szName[];
  BYTE  rgbPadding1[]; // DWORD alignment
  BYTE  rgbData[cbData];
  BYTE  rgbPadding2[]; // DWORD alignment
  VERSIONNODE rgvnChildren[];
};
</pre>
<p>
In words, each version node begins with a 16-bit value
describing the size of the nodes in bytes (including its children),
followed by a 16-bit value that specifies how many bytes
of data (either binary or text) are associated with the node.
(If the node contains text data, the count includes the null terminator.)
Next comes the null-terminated name of the node
and padding bytes to bring us back into <code>DWORD</code>
alignment.
After the key name (and optional padding) comes the data,
again followed by padding bytes to bring us back
into <code>DWORD</code> alignment.
Finally, after all the node information come its children.
</p>
<p>
Since each of the children might themselves have children,
you can see how the tree structure "flattens" into this
serialized format.
To move from one node to its next sibling, you skip ahead
by <code>cbNode</code> bytes.
To move from a node to its first child, you skip over
the key name and associated data.
</p>
<p>
Let's take a look at the resources for the 16-bit
<code>shell.dll</code> to see how this all fits together.
</p>
<pre>
0000  E4 01 34 00 56 53 5F 56-45 52 53 49 4F 4E 5F 49  ..4.VS_VERSION_I
0010  4E 46 4F 00 BD 04 EF FE-00 00 01 00 0A 00 03 00  NFO.............
0020  67 00 00 00 0A 00 03 00-67 00 00 00 3F 00 00 00  g.......g...?...
0030  0A 00 00 00 01 00 01 00-02 00 00 00 00 00 00 00  ................
0040  00 00 00 00 00 00 00 00-78 01 00 00 53 74 72 69  ........x...Stri
0050  6E 67 46 69 6C 65 49 6E-66 6F 00 00 64 01 00 00  ngFileInfo..d...
0060  30 34 30 39 30 34 45 34-00 00 00 00 27 00 17 00  040904E4....'...
0070  43 6F 6D 70 61 6E 79 4E-61 6D 65 00 4D 69 63 72  CompanyName.Micr
0080  6F 73 6F 66 74 20 43 6F-72 70 6F 72 61 74 69 6F  osoft Corporatio
0090  6E 00 00 00 2A 00 16 00-46 69 6C 65 44 65 73 63  n...*...FileDesc
00A0  72 69 70 74 69 6F 6E 00-57 69 6E 64 6F 77 73 20  ription.Windows 
00B0  53 68 65 6C 6C 20 6C 69-62 72 61 72 79 00 00 00  Shell library...
00C0  16 00 06 00 46 69 6C 65-56 65 72 73 69 6F 6E 00  ....FileVersion.
00D0  33 2E 31 30 00 00 00 00-1A 00 06 00 49 6E 74 65  3.10........Inte
00E0  72 6E 61 6C 4E 61 6D 65-00 00 00 00 53 48 45 4C  rnalName....SHEL
00F0  4C 00 00 00 3B 00 27 00-4C 65 67 61 6C 43 6F 70  L...;.'.LegalCop
0100  79 72 69 67 68 74 00 00-43 6F 70 79 72 69 67 68  yright..Copyrigh
0110  74 20 A9 20 4D 69 63 72-6F 73 6F 66 74 20 43 6F  t . Microsoft Co
0120  72 70 2E 20 31 39 38 31-2D 31 39 39 36 00 00 00  rp. 1981-1996...
0130  22 00 0A 00 4F 72 69 67-69 6E 61 6C 46 69 6C 65  "...OriginalFile
0140  6E 61 6D 65 00 00 00 00-53 48 45 4C 4C 2E 44 4C  name....SHELL.DL
0150  4C 00 00 00 39 00 29 00-50 72 6F 64 75 63 74 4E  L...9.).ProductN
0160  61 6D 65 00 4D 69 63 72-6F 73 6F 66 74 AE 20 57  ame.Microsoft. W
0170  69 6E 64 6F 77 73 28 54-4D 29 20 4F 70 65 72 61  indows(TM) Opera
0180  74 69 6E 67 20 53 79 73-74 65 6D 00 00 00 00 00  ting System.....
0190  1A 00 06 00 50 72 6F 64-75 63 74 56 65 72 73 69  ....ProductVersi
01A0  6F 6E 00 00 33 2E 31 30-00 00 00 00 14 00 04 00  on..3.10........
01B0  57 4F 57 20 56 65 72 73-69 6F 6E 00 34 2E 30 00  WOW Version.4.0.
01C0  24 00 00 00 56 61 72 46-69 6C 65 49 6E 66 6F 00  $...VarFileInfo.
01D0  14 00 04 00 54 72 61 6E-73 6C 61 74 69 6F 6E 00  ....Translation.
01E0  09 04 E4 04                                      ....
</pre>
<p>
We start with the root node.
</p>
<pre>
0000  E4 01         // cbNode (node ends at 0x0000 + 0x01E4 = 0x01E4)
0002  34 00         // cbData = sizeof(VS_FIXEDFILEINFO)
0004  56 53 5F 56 45 52 53 49 4F 4E 5F 49 4E 46 4F 00
                    // "VS_VERSION_INFO" + null terminator
</pre>
<p>
Notice that the size of the root node equals the size of
the entire version resource.
This is to be expected, of course, because the version resource
is merely a serialization of the resource tree diagram.
</p>
<p>Since the string name (plus null terminator) happens to come out
to an exact multiple of four bytes, there is no need for padding
between the name and the binary data, which takes the form of a
<code>VS_FIXEDFILEINFO</code>:
</p>
<pre>
0014  BD 04 EF FE   // dwSignature
0018  00 00 01 00   // dwStrucVersion
001C  0A 00 03 00   // dwFileVersionMS = 3.10
0020  67 00 00 00   // dwFileVersionLS = 0.103
0024  0A 00 03 00   // dwProductVersionMS = 3.10
0028  67 00 00 00   // dwProductVersionLS = 0.103
002C  3F 00 00 00   // dwFileFlagsMask
0030  0A 00 00 00   // dwFileFlags
0034  01 00 01 00   // dwFileOS = VOS_DOS_WINDOWS16
0038  02 00 00 00   // dwFileType = VFT_DLL
003C  00 00 00 00   // dwFileSubtype
0040  00 00 00 00   // dwFileDateMS
0044  00 00 00 00   // dwFileDateLS
</pre>
<p>
The structure is also a multiple of 4 bytes in length,
so no padding is necessary between the data and the child nodes.
</p>
<pre>
0048  78 01         // cbNode (node ends at 0x0048 + 0x0178 = 0x01C0)
004A  00 00         // cbData (no data)
004C  53 74 72 69 6E 67 46 69 6C 65 49 6E 66 6F 00
                    // "StringFileInfo" + null
005B  00            // padding to restore alignment
005C                // no data
</pre>
<p>
The first child is the <code>StringFileInfo</code>.
It has no data, so its own children come directly after
the name (and padding).
And the children of <code>StringFileInfo</code>
are the language nodes.
</p>
<pre>
005C  64 01         // cbNode (node ends at 0x005C + 0x0164 = 0x01C0)
005E  00 00         // cbData (no data)
0060  30 34 30 39 30 34 45 34 00
                    // "040904E4" + null terminator
0069  00 00 00      // padding to restore alignment
006C                // no data
</pre>
<p>
The children of the language node are the strings.
This is where all the goodies can be found.
</p>
<pre>
006C  27 00         // cbNode (node ends at 0x006C + 0x0027 = 0x0093)
006E  17 00         // cbData
0070  43 6F 6D 70 61 6E 79 4E 61 6D 65 00
                    // "CompanyName" + null terminator
007C                // no padding needed
007C  4D 69 63 72 6F 73 6F 66 74 20 43 6F
      72 70 6F 72 61 74 69 6F 6E 00
                    // "Microsoft Corporation" + null terminator
0091  00 00 00      // padding to restore alignment
</pre>
<p>
Notice that the padding bytes
are not counted in the <code>cbData</code>.
In fact, the padding bytes at the end of the data don't
even count towards the <code>cbNode</code>.
This is a leaf node since we already reach the end of the node
once we store the data.
Therefore, the next node in the version resource is a sibling,
not a child.
</p>
<pre>
0094  2A 00         // cbNode (node ends at 0x0094 + 0x002A = 0x00BE)
0096  16 00         // cbData
0098  46 69 6C 65 44 65 73 63 72 69 70 74 69 6F 6E 00
                    // "FileDescription" + null terminator
00A8                // no padding needed
00A8  57 69 6E 64 6F 77 73 20 53 68 65 6C 6C 20 6C 69
      62 72 61 72 79 00
                    // "Windows Shell library" + null terminator
00BE  00 00         // padding to restore alignment
</pre>
<p>
All of these nodes have no children since we run out of
bytes in <code>cbNode</code> after representing the node's
name and data.
</p>
<pre>
00C0  16 00         // cbNode (node ends at 0x00C0 + 0x0016 = 0x00D6)
00C2  06 00         // cbData
00C4  46 69 6C 65 56 65 72 73 69 6F 6E 00
                    // "FileVersion" + null terminator
00D0  33 2E 31 30 00
                    // "3.10"
00D5  00 00 00      // padding to restore alignment

00D8  1A 00         // cbNode (node ends at 0x00D8 + 0x001A = 0x00F2)
00DA  06 00         // cbData
00DC  49 6E 74 65 72 6E 61 6C 4E 61 6D 65 00
                    // "InternalName" + null terminator
00E9  00 00 00      // padding to restore alignment
00EC  53 48 45 4C 4C 00
                    // "SHELL" + null terminator
00F2  00 00         // padding to restore alignment

00F4  3B 00         // cbNode (node ends at 0x00F4 + 0x003B = 0x12E)
00F6  27 00
00F8  4C 65 67 61 6C 43 6F 70 79 72 69 67 68 74 00
                    // "LegalCopyright" + null terminator
0107  00            // padding to restore alignment
0108  43 6F 70 79 72 69 67 68 74 20 A9 20 4D 69 63 72
      6F 73 6F 66 74 20 43 6F 72 70 2E 20 31 39 38 31
      2D 31 39 39 36 00
                    // "Copyright &#xA9; Microsoft Corp. 1981-1996"
                    // + null terminator + another null terminator?
012F  00            // padding to restore alignment
</pre>
<p>Wait a second, what's that "another null terminator"?
if you count the bytes, you'll see that the <code>cbData</code>
for the <code>LegalCopyright</code> node counts not only the
terminating null, but another bonus null after it.
I suspect that somebody put an extra null terminator in the
resource file by mistake:
</p>
<pre>
    VALUE "LegalCopyright", "Copyright\251 Microsoft corp. 1981-1996\0"
</pre>
<p>
For whatever reason, there's an extra null in there.
</p>
<pre>
0130  22 00         // cbNode (node ends at 0x0130 + 0x0022 = 0x0152)
0132  0A 00         // cbData
0134  4F 72 69 67 69 6E 61 6C 46 69 6C 65 6E 61 6D 65 00
                    // "OriginalFilename" + null terminator
0145  00 00 00      // padding to restore alignment
0148  53 48 45 4C 4C 2E 44 4C 4C 00
                    // "SHELL.DLL" + null terminator
0152  00 00         // padding to restore alignment

0154  39 00         // cbNode (node ends at 0x0154 + 0x0039 = 0x018D)
0156  29 00         // cbData
0158  50 72 6F 64 75 63 74 4E 61 6D 65 00
                    // "ProductName" + null terminator
0164  4D 69 63 72 6F 73 6F 66 74 AE 20 57 69 6E 64 6F
      77 73 28 54 4D 29 20 4F 70 65 72 61 74 69 6E 67
      20 53 79 73 74 65 6D 00 00
                    // "Microsoft&#xAE; Windows(TM) "
                    // "Operating System" + null terminator
                    // + another null terminator?
018D  00 00 00      // padding to restore alignment
</pre>
<p>
There's another of those extra null terminators. Go figure.
</p>
<pre>
0190  1A 00         // cbNode (node ends at 0x0190 + 0x001A = 0x01AA)
0192  06 00         // cbData
0194  50 72 6F 64 75 63 74 56 65 72 73 69 6F 6E 00
                    // "ProductVersion" + null terminator
01A3  00            // padding to restore alignment
01A4  33 2E 31 30 00 00
                    // "3.10" + null terminator
                    // + another null terminator?
01AA  00 00         // padding to restore alignment

01AC  14 00         // cbNode (node ends at 0x01AC + 0x0014 = 0x01C0)
01AE  04 00         // cbData
01B0  57 4F 57 20 56 65 72 73 69 6F 6E 00
                    // "WOW Version"
01BC                // no padding needed
01BC  34 2E 30 00   // "4.0" + null terminator
01C0                // no padding needed
</pre>
<p>
Once we reach offset <code>0x01C0</code>, we're reached the
end of not only the <code>WOW Version</code> node, but also
the end of the <code>040904E4</code> node and the
<code>StringFileInfo</code> node.
Therefore, the next node is a child of the root.
</p>
<pre>
01C0  24 00         // cbNode (node ends at 0x01C0 + 0x0024 = 0x01E4)
01C2  00 00         // cbData (no data)
01C4  56 61 72 46 69 6C 65 49 6E 66 6F 00
                    // "VarFileInfo" + null terminator
01D0                // no padding needed
01D0                // no data
</pre>
<p>
Since we have not reached the end of the <code>VarFileInfo</code>
node, the data that comes next must be a child node.
</p>
<pre>
01D0  14 00         // cbNode (noed ends at 0x01D0 + 0x0014 = 0x01E4)
01D4  04 00         // cbData
01D6  54 72 61 6E 73 6C 61 74 69 6F 6E 00
                    // "Translation" + null terminator
01E0  09 04 E4 04   // 0x0409 = US English
                    // 0x04E4 = 1252 = Western European
01E4                // no padding needed
</pre>
<p>
And once we've reached offset <code>0x01E4</code>, we've
reached the end of the <code>Translation</code> node,
the <code>VarFileInfo</code> node, and the root node.
</p>
<p>
Thus, we have reconstructed the original version resource:
</p>
<pre>
FILEVERSION    3,10,0,103
PRODUCTVERSION 3,10,0,103
FILEFLAGSMASK  VS_FFI_FILEFLAGSMASK
FILEFLAGS      VS_FF_PRERELEASE | VS_FF_PRIVATEBUILD
FILEOS         VOS_DOS_WINDOWS16
FILETYPE       VFT_DLL
FILESUBTYPE    VFT_UNKNOWN
BEGIN
 BLOCK "StringFileInfo"
 BEGIN
  BLOCK "040904E4"
  BEGIN
   VALUE "CompanyName", "Microsoft Corporation"
   VALUE "FileDescription", "Windows Shell library"
   VALUE "FileVersion", "3.10"
   VALUE "InternalName", "SHELL"
   VALUE "LegalCopyright", "Copyright\251 Microsoft corp. 1981-1996\0"
   VALUE "OriginalFilename", "SHELL.DLL"
   VALUE "ProductName", "Microsoft\256 Windows(TM) Operating System\0"
   VALUE "ProductVersion", "3.10\0"
   VALUE "WOW Version", "4.0"
  END
 END
 BLOCK "VarFileInfo"
 BEGIN
  VALUE "Translation", 0x0409, 0x04E4
 END
END
</pre>
<p>
Next time, we'll look at how version resources are represented
in 32-bit resources.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-455193">
				<div id="div-comment-455193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061220-15/?p=28653#comment-455193">
			December 20, 2006 at 10:50 am</a>		</div>

		<p>I&#8217;m not really that surprised at the &#8220;another NUL terminator&#8221;.<br />
&nbsp;There have been times where the resource compiler (or maybe<br />
Visual Studio, I haven&#8217;t really looked) does not properly terminate the<br />
strings in the version resource. &nbsp;In fact, I had to use the<br />
&#8220;extra&#8221; NULs on my last project because the product version string had<br />
weird characters on the end due to the File Properties dialog printing<br />
out the size of the subsequent version information record as a string.</p>
<p>By the way. &nbsp;I do hope that the use of &#8220;null&#8221; rather than NUL<br />
was a typo. &nbsp;It would be damaging to my idealized version of<br />
Raymond Chen to see that he didn&#8217;t know his ASCII character codes.<br />
&nbsp;That puts a serious hurt on your geek cred. :)</p>
<div class="post">[<i>NUL is the name for the null character. In the<br />
same way that BEL is the name for the bell character, but if I want to<br />
talk about a bell, I&#8217;ll just call it bell and not BEL. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-455213">
				<div id="div-comment-455213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061220-15/?p=28653#comment-455213">
			December 20, 2006 at 12:13 pm</a>		</div>

		<p>Visual Studio&#8217;s resource editor includes a   as part of the value strings, but not the name strings, in the version resource, at least in VS2003.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-455243">
				<div id="div-comment-455243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061220-15/?p=28653#comment-455243">
			December 20, 2006 at 1:07 pm</a>		</div>

		<p>&lt;&lt;Beyond that, you can call your nodes anything you want and give them any kind of data you want. But if you want other people to understand your version information, you&#8217;d be best off following the conventions I describe below.&gt;&gt;</p>
<p>In fact, even the resource editor in VS has problems with that, and will &quot;merge&quot; resources from other blocks into the StringFileInfo block.</p>
<p>(VS 2005 on Win XP, editing version info in DLL)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-455253">
				<div id="div-comment-455253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kzinti</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061220-15/?p=28653#comment-455253">
			December 20, 2006 at 1:14 pm</a>		</div>

		<p>Raymond is right. NUL is the name of the character, not NULL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-455263">
				<div id="div-comment-455263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.i2.co.uk' rel='external nofollow' class='url'>Phil Rodgers</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061220-15/?p=28653#comment-455263">
			December 20, 2006 at 1:21 pm</a>		</div>

		<p>There is an unfortunate complication for the string nodes; according to the &lt;A HREF=&#8221;<a href='http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/resources/versioninformation/versioninformationreference/versioninformationstructures/string.asp" rel="nofollow">documentation</a>&#8216; target=_new rel=nofollow mce_href=&#8217;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/resources/versioninformation/versioninformationreference/versioninformationstructures/string.asp&#8221;>documentation&#8216;>http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/resources/versioninformation/versioninformationreference/versioninformationstructures/string.asp&#8221;&gt;documentation&lt;/A&gt;, the cbData (or wValueLength as the documentation calls it) is in words, rather than bytes, for these nodes. And this is indeed the case for VERSIONINFO resources written by Visual Studio 2005&#8217;s compilers, though VB6 writes them as byte counts.</p>
<div class=post>[<i>Um, the web page you link to describes the 32-bit version resource, not the 16-bit version resource. I can&#8217;t tell if this was an honest mistake on your part or whether you&#8217;re trying to hijack the thread. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-455463">
				<div id="div-comment-455463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.i2.co.uk' rel='external nofollow' class='url'>Phil Rodgers</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061220-15/?p=28653#comment-455463">
			December 21, 2006 at 2:40 am</a>		</div>

		<p>Apologies &#8211; an honest mistake!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-455513">
				<div id="div-comment-455513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dean Earley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061220-15/?p=28653#comment-455513">
			December 21, 2006 at 10:21 am</a>		</div>

		<p>So, given that the resource system has a perfectly workable system for i18n, why are all the different locales packed into one resource block for version resources?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-455523">
				<div id="div-comment-455523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dean Earley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061220-15/?p=28653#comment-455523">
			December 21, 2006 at 10:31 am</a>		</div>

		<p>And following on from that, what is the recomended ID and Locale to use for the version resources?</p>
<p>(Both of these questions apply to 32bit as well as 16bit)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-455613">
				<div id="div-comment-455613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061220-15/?p=28653#comment-455613">
			December 21, 2006 at 1:25 pm</a>		</div>

		<p>Actually there are distinct entities here. &nbsp;NUL is the name for ASCII 0. &nbsp;NULL is a name for a constant which converts trivially to a null pointer in C. &nbsp;The word &quot;null&quot; has some definition which I won&#8217;t bother quoting; I&#8217;m assuming we&#8217;re happy with its usage in context.</p>
<p>Null pointers are synonymous with NULL but that doesn&#8217;t &quot;make&quot; them NULL; NULL is either a builtin compiler concept or a macro which expands to a compiler concept (usually just &quot;0&quot; but that&#8217;s a whole additional legacy).</p>
<p>&quot;Strings&quot; in C/C++ are required to terminate with a null character which is by definition 0. &nbsp;(Even with wchar_t being a distinct type, it&#8217;s still an integral type and must store and preserve the value &quot;0&quot;. &nbsp;Whereas pointers are not integral types and assignment of &quot;0&quot; to them may involve a nontrivial conversion.)</p>
<p>I personally try to avoid using the term NUL ever since it assumes too much about the character set encoding. &nbsp;But I&#8217;m a weirdo like that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-455703">
				<div id="div-comment-455703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061220-15/?p=28653#comment-455703">
			December 21, 2006 at 10:52 pm</a>		</div>

		<p>Thursday, December 21, 2006 10:21 AM by Dean Earley</p>
<blockquote><p>
  So, given that the resource system has a</p>
<p>  perfectly workable system for i18n,
</p></blockquote>
<p>If you&#8217;re talking about Win16 then the base note here makes me think that it did not have an i18n system. &nbsp;Strings were encoded in ANSI and there was no way to designate code pages other than the code page in use in the end user&#8217;s Windows system.</p>
<p>If you&#8217;re talking about Win32 then the resource system does appear to be designed to support i18n but it doesn&#8217;t work. &nbsp;If you try to load resources for a language other than the &quot;first&quot; language in the .exe&#8217;s resources, it won&#8217;t work. &nbsp;You have to put each other language in its own .dll.</p>
<blockquote><p>
  why are all the different locales packed into</p>
<p>  one resource block for version resources?
</p></blockquote>
<p>Maybe so that the list of languages can be retrieved? &nbsp;There&#8217;s one known place to retrieve it from.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-455733">
				<div id="div-comment-455733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dean Earley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061220-15/?p=28653#comment-455733">
			December 22, 2006 at 7:33 am</a>		</div>

		<blockquote><p>
  If you&#8217;re talking about Win16 then the base note here makes me think</p>
<p>  that it did not have an i18n system.
</p></blockquote>
<p>Ahhh, good old backwards compatability then :)</p>
<blockquote><p>
  If you try to load resources for a language other than the &quot;first&quot;</p>
<p>  language in the .exe&#8217;s resources, it won&#8217;t work.
</p></blockquote>
<p>It works for me when i specify the LocaleID&#8230;</p>
<p>If you don&#8217;t, it gets the first suitable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-455843">
				<div id="div-comment-455843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061220-15/?p=28653#comment-455843">
			December 24, 2006 at 8:48 pm</a>		</div>

		<p>Friday, December 22, 2006 7:33 AM by Dean Earley</p>
<p>[Norman Diamond:]</p>
<blockquote><p>
  &gt; If you try to load resources for a language</p>
<p>  &gt; other than the &quot;first&quot; language in the</p>
<p>  &gt; .exe&#8217;s resources, it won&#8217;t work.
</p></blockquote>
<p>></p>
<blockquote><p>
  It works for me when i specify the LocaleID&#8230;
</p></blockquote>
<p>I think I mixed up two things, sorry.</p>
<p>(1) &nbsp;If you try to load &quot;ordinary&quot; resources (strings, dialog boxes, etc.) with a LocaleID that doesn&#8217;t match the &quot;first&quot; set of resources that were compiled into the .exe then it doesn&#8217;t work. &nbsp;This is why separate resource-only .dll files are needed.</p>
<p>(2) &nbsp;For version resources, which are the subject of this thread, I didn&#8217;t try it. &nbsp;No that&#8217;s not right, because I did try it, I just didn&#8217;t know I was trying it. &nbsp;No that&#8217;s not quite right either.</p>
<p>For a product that is designed primarily to be exported, I set &quot;ordinary&quot; resources to English (UK) in the .exe and various other languages in .dll&#8217;s. &nbsp;I defined version resources in the .exe but didn&#8217;t bother (yet) in the .dll&#8217;s. &nbsp;Both Visual Studio 2005 and eMbedded Visual C++4 put version resources in a resource section for Japanese instead of English (UK). &nbsp;The .exe produced by eVC++4 has version resources visible despite the mismatch. &nbsp;The .exe produced by VS2005 ordinarily doesn&#8217;t have version resources visible, and still doesn&#8217;t even if I hand-edit the .rc file to put them in the English (UK) section &#8212; but Microsoft suggested a workaround in editing the .rc file, so that now the version resources are visible even though they&#8217;re in the default Japanese section.</p>
<p>So I think that I18N might really be working (mostly), for version resources though not for other resources.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-455973">
				<div id="div-comment-455973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">16 != 32</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061220-15/?p=28653#comment-455973">
			December 27, 2006 at 9:00 am</a>		</div>

		<p>Why are 16-bit resources 32-bit aligned?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-644273">
				<div id="div-comment-644273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/michkap/archive/2008/07/03/8682763.aspx' rel='external nofollow' class='url'>Sorting it all Out</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061220-15/?p=28653#comment-644273">
			July 3, 2008 at 10:04 am</a>		</div>

		<p>Previous blogs in this series: 0: A long journey begins with the zeroeth step One of the first things</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

