<html>
<head>
<title>When is the correct time to call FreeLibraryWhenCallbackReturns?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When is the correct time to call FreeLibraryWhenCallbackReturns?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 25, 2015 / year-entry #272</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20151225-00/?p=92711</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Any time during the execution of the callback is fine.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
When is the correct time to call
<code>Free&shy;Library&shy;When&shy;Callback&shy;Returns</code>,
or any of the other <code>...When&shy;Callback&shy;Returns</code> functions?
In practice,
many people call the function immediately before
returning from the callback.
Is this a requirement?
</p>
<p>
No.
You can call the
<code>...When&shy;Callback&shy;Returns</code> function
at any time during the execution of your callback,
but you can call each one at most once per callback instance.
In other words, you cannot ask for two DLLs to be freed
when the callback returns,
but it's okay to ask for one DLL to be freed and one
critical section to be exited.
If you do ask for multiple things to happen when the callback
returns, the order in which they occur is unspecified.
</p>
<p>
By convention, the
<code>...When&shy;Callback&shy;Returns</code> function
is called immediately before the callback returns,
because it matches the point at which you would have
called the non-<code>...When&shy;Callback&shy;Returns</code> version.
In other words,
"I would have called
<code>Free&shy;Library</code> or
<code>Free&shy;Library&shy;And&shy;Exit&shy;Thread</code>
here,
but I can't,
so I'll call
<code>Free&shy;Library&shy;When&shy;Callback&shy;Returns</code>
instead, and then immediately return."
</p>
<p>
Of course, if you are worried that you might forget to call
<code>Free&shy;Library&shy;When&shy;Callback&shy;Returns</code>
in all your exit paths
(a legitimate concern, in my opinion),
you may choose to call it at the start of the work,
so that you won't forget.
It doesn't matter when you call it,
as long as you do it inside the task at some point before
you return.
</p>
<p>
Many happy returns.
(Tomorrow is Boxing Day, you see.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1220371">
				<div id="div-comment-1220371" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151225-00/?p=92711#comment-1220371">
			December 25, 2015 at 1:13 pm</a>		</div>

		<p>If you think about it from the perspective of the implementer of FreeLibraryWhenCallbackReturns, that&#8217;s the only possible way it could work.  That function has no idea whether it&#8217;s being called from the beginning or end of your callback function â€” it can&#8217;t be inspecting the call stack to be making some kind of decision (well it *could* try to do that, but that&#8217;s a terrible idea and will break, and then what it would decide to do?).</p>
<p>The only thing it can reasonably do is queue up work to be executed later, so it doesn&#8217;t matter if that work gets queued earlier or later in the execution of your callback.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1220381">
				<div id="div-comment-1220381" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151225-00/?p=92711#comment-1220381">
			December 25, 2015 at 1:37 pm</a>		</div>

		<p>In theory, the state could be kept in some ephemeral thread-local state (like GetLastError) which gets wiped out by certain intervening calls. But yeah, the obvious place for the state is in the PTP_CALLBACK_INSTANCE.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1220411">
				<div id="div-comment-1220411" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151225-00/?p=92711#comment-1220411">
			December 26, 2015 at 2:49 pm</a>		</div>

		<p>Does it only free the first or last one you register? If it&#8217;s the last then it can get wiped out by intervening tasks, i.e. if you call into a component that calls it without you knowing.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-4 parent" id="comment-1220421">
				<div id="div-comment-1220421" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151225-00/?p=92711#comment-1220421">
			December 26, 2015 at 4:20 pm</a>		</div>

		<p>@smf:<br />
The documentation doesn&#8217;t specify what happens if you call it twice, so the behaviour is quite literally undocumented.<br />
There is a comment stating that it raises a structured exception though. Even though that is implementation defined behaviour, that really shows that it is an invalid situation to begin with.<br />
Anyway, depending on the situation, a component messing around with thread pool related stuff without you knowing is dangerous.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1220431">
				<div id="div-comment-1220431" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151225-00/?p=92711#comment-1220431">
			December 27, 2015 at 12:23 pm</a>		</div>

		<p>&#8220;Anyway, depending on the situation, a component messing around with thread pool related stuff without you knowing is dangerous.&#8221;</p>
<p>As a software developer you are always at the mercy of someone else who got a bonus by making something work, no matter the consequences. Who do you think your bosses respect more? The guy who got the bonus or the guy who complains that he can&#8217;t get any of his changes to work now.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

