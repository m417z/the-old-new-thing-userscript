<html>
<head>
<title>When you create an object with constraints, you have to make sure everybody who uses the object understands those constraints</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When you create an object with constraints, you have to make sure everybody who uses the object understands those constraints</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 14, 2010 / year-entry #112</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Here's a question that came from a customer. This particular example involves managed code, but don't let that distract you from the point of the exercise. I am trying to create a FileStream object using the constructor that takes an IntPtr as input. In my .cs file, I create the native file handle using CreateFile,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Here's a question that came from a customer.
This particular example involves managed code,
but don't let that distract you from the point of the exercise.
</p>
<blockquote CLASS=q>
<p>
I am trying to create a <code>FileStream</code>
object using the constructor that takes an <code>IntPtr</code> as input.
In my .cs file,
I create the native file handle using <code>CreateFile</code>,
as shown below. 
</p>
<pre>
[DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
internal static extern IntPtr CreateFile(string lpFileName,
    int dwDesiredAccess, FileShare dwShareMode,
    IntPtr securityAttrs, FileMode dwCreationDisposition,
    UInt32 dwFlagsAndAttributes, IntPtr hTemplateFile);

IntPtr ptr1 = Win32Native.CreateFile(FileName, 0x40000000, 
         System.IO.FileShare.Read | System.IO.FileShare.Write, 
         Win32Native.NULL, 
         System.IO.FileMode.Create, 
         0xa0000000, // FILE_FLAG_NO_BUFFERING | FILE_FLAG_WRITE_THROUGH
         Win32Native.NULL); 
</pre>
<p>
Then I create the <code>File&shy;Stream</code> object as so:
</p>
<pre>
FileStream fs = new FileStream(ptr1, FileAccess.Write, true, 1, false);
</pre>
<p>
The <code>fs</code> gets created fine. But when I try to do:
</p>
<pre>
fs.Write(msg, 0, msg.Length);
fs.Flush();
</pre>
<p>
it fails with the error
"IO operation will not work.
Most likely the file will become too long
or the handle was not opened to support synchronous IO operations."
</p>
<pre>
int hr = System.Runtime.InteropServices.Marshal.GetHRForException(e)
</pre>
<p>
Gives <code>hr</code> as <code>COR_E_IO</code> (<code>0x80131620</code>).
</p>
<p>
The stack trace is as below.
</p>
<pre>
System.IO.IOException: IO operation will not work. Most likely
    the file will become too long or the handle was not opened
    to support synchronous IO operations.
at System.IO.FileStream.WriteCore(Byte[] buffer, Int32 offset, Int32 count)
at System.IO.FileStream.FlushWrite()
at System.IO.FileStream.Flush()
at PInvoke.Program.Main(String[] args)
</pre>
<p>
Can somebody point out what might be going wrong?
</p>
</blockquote>
<p>
(For those who would prefer to cover their ears and hum when
the topic of managed code arises,
change <code>FileStream</code> to
<code>fdopen</code>.)
</p>
<p>
The comment on the line
</p>
<pre>
         0xa0000000, // FILE_FLAG_NO_BUFFERING | FILE_FLAG_WRITE_THROUGH
</pre>
<p>
was provided by the customer, and that's the key to the problem.
It was right there in the comment, but the customer didn't understand
the consequences.
</p>
<p>
As the documentation for <code>Create&shy;File</code> notes,
the <code>FILE_<wbr>FLAG_<wbr>NO_<wbr>BUFFERING</code>
flag requires that all I/O operations on the file handle
be in multiples of the sector size, and that the I/O buffers also
be aligned on addresses which are multiples of the sector size.
</p>
<p>
Since you created the file handle with very specific
rules for usage, you have to make sure that everybody who
uses it actually follows those rules.
On the other hand,
the <code>File&shy;Stream</code> object doesn't know about these rules.
It just figures you gave it a handle that it can issue normal
synchronous <code>Read&shy;File</code> and <code>Write&shy;File</code>
calls on.
It doesn't know that you gave it a handle that requires
special treatment.
And then the attempt to write to the handle with a plain
<code>Write&shy;File</code> fails both because the number
of bytes is not a multiple of the sector size and because
the I/O buffer is not sector-aligned, and you get the
I/O exception.
</p>
<p>
The solution to this problem depends on what you are trying to accomplish.
Why are you passing the
<code>FILE_<wbr>FLAG_<wbr>NO_<wbr>BUFFERING |
FILE_<wbr>FLAG_<wbr>WRITE_<wbr>THROUGH</code> flags?
Are you doing this just because you overheard in the hallway that it's
faster?
Well, yes it may be faster under the right circumstances,
but in exchange for the increased performance, you also have to follow
a much stricter set of rules.
And in the absence of documentation to the contrary,
you can't assume that a chunk of code actually adheres to your
very special rules.
</p>
<p>
Like <i>What if two people did this?</i>,
this is an illustration of
another principle that many people forget to consider
when working with objects they didn't write:
<i>When you write your own code, do you do this?</i>
It's sort of like the Golden Rule of programming.
</p>
<p>
Suppose you have a function which accepts a file handle
and whose job is to write some data do that file handle.
Do you write your function so that it performs all its
I/O in multiples of the sector size from buffers which are
aligned in memory in multiples of the sector size,
on the off chance that somebody gave you a handle that was
opened with the <code>FILE_<wbr>FLAG_<wbr>NO_<wbr>BUFFERING</code> flag?
Well, no, you don't.
You just call <code>Write&shy;File</code> to write to it,
and if you want to write 28 bytes, you write 28 bytes.
Even if you perform internal buffering and your buffer size
happens to be a multiple of the sector size by accident,
you still don't align your I/O buffer to the sector size;
and when it's time to flush the final partially-written buffer,
you have a not-sector-multiple write at the very end anyway.
</p>
<p>
If you don't handle this case in your code,
why would you expect others to handle it in their code?
</p>
<p>
We've seen this principle before,
such as when we looked at
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/11/28/9148951.aspx">
whether the <code>Process.Refresh</code> method
refreshes an arbitrary application's windows</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-826213">
				<div id="div-comment-826213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826213">
			April 14, 2010 at 7:30 am</a>		</div>

		<p>@Ken Hagan,</p>
<p>There is no special Win32 error code for such a case. WriteFile won&#8217;t tell you that it failed because of misaligned IO.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826223">
				<div id="div-comment-826223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826223">
			April 14, 2010 at 7:33 am</a>		</div>

		<p>Do people really need to code explicit number for &nbsp;requested access and flags for CreateFile in C#? That doesn&#8217;t look right.</p>
<p>And the caller might not understand what WRITE_THROUGH is for. It will slow the writes down quite a bit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826243">
				<div id="div-comment-826243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826243">
			April 14, 2010 at 8:21 am</a>		</div>

		<p>&quot;Do people really need to code explicit number for &nbsp;requested access and flags for CreateFile in C#? That doesn&#8217;t look right.&quot;</p>
<p>There&#8217;s no way to import the API headers directly into C#. You can make your own enum or consts if you feel like it, but there&#8217;s nothing requiring you to do so.</p>
<p>As for what&#8217;s already there; for flags, there&#8217;s an enum FileOptions with no matching flag for FILE_FLAG_NO_BUFFERING [which is another hint that .NET isn&#8217;t designed to be able to use it] &#8211; and for access there&#8217;s FileAccess with no matching flag for&#8230; er, whatever 0x40000000 is supposed to be.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826273">
				<div id="div-comment-826273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826273">
			April 14, 2010 at 10:55 am</a>		</div>

		<p>Well since managed code can&#8217;t construct a byte array that refers to a given pointer and length and buffers for FILE_FLAG_NO_BUFFERING are supposed to be allocated by VirtualAlloc I really don&#8217;t think this is such a good idea either.</p>
<p>I&#8217;m sure someone had a good use for FILE_FLAG_NO_BUFFERING but the only time I ever used it is when I happened to meet the rules by accident.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826283">
				<div id="div-comment-826283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TJ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826283">
			April 14, 2010 at 11:31 am</a>		</div>

		<p>Maybe it&#8217;s just me (I&#8217;m a C# .NET guy) but I&#8217;m pretty confused about why someone would P/Invoke and use Win32 functions to open/create a file when they&#8217;re using .NET, which has managed functions to accomplish the same thing.</p>
<div class=post>[<i>&#8220;I read somewhere that write-through and no-buffering give better perf, and who wouldn&#8217;t want better perf?&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826293">
				<div id="div-comment-826293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TJ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826293">
			April 14, 2010 at 11:32 am</a>		</div>

		<p>Just FYI, the comment captcha seems to be broken in Firefox, it always tells me &quot;The code you entered was invalid.&quot; Works fine in IE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826203">
				<div id="div-comment-826203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://K.Hagan@thermoteknix.com' rel='external nofollow' class='url'>Ken Hagan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826203">
			April 14, 2010 at 7:26 am</a>		</div>

		<p>In fairness, whoever wrote the error text didn&#8217;t help matters.</p>
<p> &nbsp;&quot;Most likely the file will become too long or the handle was not opened to support synchronous IO operations.&quot;</p>
<p>I&#8217;d say &quot;most likely&quot; no-one has ever collected statistics on what actually causes this exception in practice on customer systems.</p>
<p>I&#8217;d also hazard a guess that at the point where the error was detected, there was enough information to say &quot;you opened the handle for unbuffered access but then attempted a mis-aligned IO operation&quot;, but by the time the error percolated back to user space it had been replaced by something entirely generic and uninformative.</p>
<p>Perhaps the text *should* have read, &quot;If you are the developer of this software, try debugging on a checked build, where there is some chance of a more informative message appearing in the debug window. If you are the end-user, you&#8217;ll have to ask the developer why they&#8217;ve failed to handle this error themselves and have instead used FormatMessage to throw an implementation detail in your face.&quot;. That may sound verbose, but in fact it can be re-used as the text for nearly all error codes so you&#8217;d get a (slightly) smaller Windows build and developers would be less inclined to delegate their responsibilities for error diagnosis and reporting to a dumb API like FormatMessage.</p>
<p>The only flaw in this plan is that MS don&#8217;t really support the checked build. It&#8217;s typically months, if not years, behind the retail build in terms of bug fixes and a simply amazing number of device drivers blue-screen the system. (Well, *I* think it&#8217;s amazing. I&#8217;d have thought that &quot;not BSOD-ing the checked build at boot time&quot; would be one of the requirements for WHQL signing, but experimentally this is not the case.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826313">
				<div id="div-comment-826313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sukru</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826313">
			April 14, 2010 at 3:22 pm</a>		</div>

		<p>I believe it&#8217;s better to trust the OS on virtual memory and I/O scheduling instead of trying to do it yourself. There are so many ways you can shoot yourself in the foot, and so many cases that you&#8217;re not even aware of (for example did you take ordering requests into consideration?).</p>
<p>Of course there are always exceptions. Maybe you&#8217;re building a database system. Then the question is whether C++ would be a better choice for such a case.</p>
<p>Anyways Raymond thanks for the post. It&#8217;s an interesting reminder to the mind of premature optimization.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826323">
				<div id="div-comment-826323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826323">
			April 14, 2010 at 4:36 pm</a>		</div>

		<p>It&#8217;s sad that there are people who feel the need to clutter up their C# code with ugly Kernel32 calls just because they heard it might be slightly faster. &nbsp;And then it doesn&#8217;t even work. &nbsp;I&#8217;d rather have my file writes be a little bit slower in exchange for just creating the file with</p>
<p>new FileStream(&quot;foo.txt&quot;, &#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826343">
				<div id="div-comment-826343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826343">
			April 14, 2010 at 7:00 pm</a>		</div>

		<p>These kind of things can happen if you&#8217;re porting C++ code to C#.</p>
<p>Here you see the CreateFile() uses these special flags, and you have no hint why these flags are there, so you want to keep it.</p>
<p>Given you&#8217;ve seen examples that you can use CreateFile with FileStream involving COM ports or other direct device names, you can run into this kind of problem easily.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826353">
				<div id="div-comment-826353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826353">
			April 14, 2010 at 7:23 pm</a>		</div>

		<p>I wonder what happens if you try to create a FileStream out of say a Winsock socket.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826373">
				<div id="div-comment-826373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826373">
			April 14, 2010 at 8:33 pm</a>		</div>

		<p>TJ: The typical reason to use P/Invoke to open a file is that you want to use a filename that the CLR doesn&#8217;t allow. Examples of this are devices, raw disks, and long (&gt;MAXPATH) filenames.</p>
<p>My very first .Net app was a POS system that needed to print receipts via a serial port, and the first release of .Net didn&#8217;t provide a SerialPort class. Since the file APIs didn&#8217;t let me open the device, I had to use P/Invoke.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-826333">
				<div id="div-comment-826333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826333">
			April 14, 2010 at 4:51 pm</a>		</div>

		<p>I agree the error message is probably not the best. I would say that exception messages should never try to guess the *cause* of the error, and just report the error itself. Something like &quot;IO operation not supported&quot; would have been enough.</p>
<p>It might not have helped the programmer in this case, but at least there&#8217;s no chance of it sending you down the wrong path&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-826403">
				<div id="div-comment-826403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826403">
			April 15, 2010 at 6:01 am</a>		</div>

		<p>The only time I&#8217;ve seen this combination of flags used is SQL Server&#8217;s transaction logs. SQL Server needs to be sure that the data was fully flushed to the disk before telling the client that the transaction was committed. It can then write back the data at its leisure.</p>
<p>However, consumer disks will commonly ignore the no-buffering flag and actually buffer on the drive&#8217;s own cache, which can lead to writes not actually being recorded on the disk when a failure occurred, even though the drive said it had written the data. That can cause problems with database recovery. (It can also cause problems with NTFS, other journalled file systems, and anything else that uses the write-ahead logging protocol.)</p>
<p>Implementing write-ahead logging in C# could be done, but as Raymond says, you have to meet the requirements. You might well be better off just P/Invoking WriteFile rather than trying to wrap it in a FileStream. Use a SafeFileHandle if you&#8217;re using .NET 2.0 or later.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826393">
				<div id="div-comment-826393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Teo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826393">
			April 15, 2010 at 1:17 am</a>		</div>

		<p>Why &quot;hearing&quot; when you can actually *measure* it? If you align your buffers on page boundaries and sector sizes, then you help the memory manager and all participants in the i/o stack &#8211; the file system, the volume manager, the drive controllers, heck the firmware that remaps sectors will be grateful to you too! That&#8217;s a common sense, backed by numerous speed tests. Obviously, no caching and/or immediate write should be used ONLY when required, which usually is when you are writing some kind of backup application or write down live video stream. For everyday programs, they actually will do more harm, than benefit. Actually, if you omit them, you allow the cache manager to do lazy writes in large chunks on background (most probably in another thread), so your application is faster when you do NOT use them :)</p>
<p>On why do you want to p/invoke CreateFile? Well, aside from using special flags, you may want to use special *names* &#8211; for example ??volume{xxxxx}my-pathmy-file.</p>
<p>As to why .Net does not have these flags as enums &#8211; I think it&#8217;s because the .Net I/O classes are platform-agnostic, so they cannot expose Windows-only functionality as FILE_FLAG_NO_BUFFERING | FILE_FLAG_WRITE_THROUGH. Remember, the core of .Net is an international standart and is OS- and hardware- portable!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826443">
				<div id="div-comment-826443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826443">
			April 15, 2010 at 4:51 pm</a>		</div>

		<p>@Teo:</p>
<p>&quot;As to why .Net does not have these flags as enums &#8211; I think it&#8217;s because the .Net I/O classes are platform-agnostic, so they cannot expose Windows-only functionality as FILE_FLAG_NO_BUFFERING | FILE_FLAG_WRITE_THROUGH. Remember, the core of .Net is an international standard and is OS- and hardware- portable!&quot;</p>
<p>This is hilarious.</p>
<p>The reason .NET doesn&#8217;t have these flags is quite simply because those flags are not and were not ever designed for use in .NET. &nbsp;.NET is in this case directly invoking an API that exists outside of the .NET framework.</p>
<p>The developers of that API provide headers that include symbolic constants for values of meaning to that API. &nbsp;.NET doesn&#8217;t/can&#8217;t use those headers.</p>
<p>If you use such API&#8217;s on a regular basis you can of course translate those headers for more convenient on-going use with .NET, just as you can translate those headers for use in Pascal or other languages able to use those API&#8217;s directly but the use of which is not directly supported by the provider of the API itself.</p>
<p>There is no need to invent some pretentious and self-righteous/aggrandising bullsh*t justification. &nbsp;&quot;International hardware portable standard&quot; indeed. &nbsp;ROTFLMAO</p>
<p>There would be no problem with a framework with such ambitions providing platform specific support for specific platforms, should it so desire. &nbsp;That would not detract or impinge on the delivery of such ambitions at the core.</p>
<p>(i.e. a System.Windows namespace containing Windows specific file I/O classes, only available on the Windows platform variant of the .NET framework)</p>
<p>The omission in this case is simply, as in so many glaring gaps in the .NET framework, one of oversight or simple incompleteness.</p>
<p>Geeez, I haven&#8217;t laughed so much in a long time, so I guess I should at least thank you for that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826473">
				<div id="div-comment-826473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">The_Assimilator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826473">
			April 16, 2010 at 12:17 am</a>		</div>

		<p>@Anon</p>
<p>&quot;The omission in this case is simply, as in so many glaring gaps in the .NET framework, one of oversight or simple incompleteness.&quot;</p>
<p>Or the fact that for 99.99999% of people using .NET, the standard IO libraries work well enough that they never need to bother with P/Invokes.</p>
<p>And 99.99999% of the time, if you&#8217;re using P/Invokes for performance reasons, you&#8217;re either optimising the wrong code or you should be using a different language.</p>
<p>@Teo</p>
<p>You might want to look at the Microsoft.Win32 namespace to see how wrong you are.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-826493">
				<div id="div-comment-826493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826493">
			April 16, 2010 at 4:09 am</a>		</div>

		<p>I would like to discuss the double unknown values.</p>
<p>A &quot;unknown&quot; result should be every value not defined, not a specifik defined one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-826643">
				<div id="div-comment-826643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Teo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100414-00/?p=14333#comment-826643">
			April 17, 2010 at 9:25 am</a>		</div>

		<p>@The_Assimilator : Well, why do you think that all the stuff in Microsoft.Win32 namespace is there in the first place, instead of various System.* where it actually belongs? Indeed, it&#8217;s there, because there is platform-independent, and Windows-only parts of .Net and when you *explicitly* says in your code &quot;using Microsoft&quot; you know what you are doing and your code won&#8217;t be portable.</p>
<p>@Anon: My English is not sufficient to process your message but I am happy that I make you smile (even for the wrong reason). </p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

