<html>
<head>
<title>Double-clicking radio buttons</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Double-clicking radio buttons</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 4, 2005 / year-entry #212</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050804-10/?p=34713</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A subtlety that adds a level of polish to your dialogs is supporting double-clicked radio buttons as an abbreviation for "select + OK". (Or "select + Next" or "select + Finish" if the page is part of a wizard.) Consider the following dialog template and associated dialog procedure: 1 DIALOGEX DISCARDABLE 32, 32, 200, 76...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A subtlety that adds a level of polish to your dialogs
is supporting double-clicked radio buttons as an abbreviation
for "select + OK".
(Or "select + Next" or
"select + Finish" if the page is part of a wizard.)
</p>
<p>
Consider the following dialog template and associated
dialog procedure:
</p>
<pre>
1 DIALOGEX DISCARDABLE  32, 32, 200, 76
STYLE DS_MODALFRAME |  WS_POPUP |
      WS_VISIBLE | WS_CAPTION | WS_SYSMENU
CAPTION "Sample"
FONT 8, "MS Shell Dlg"
BEGIN
 LTEXT "A mumbler is needed.",-1,7,8,100,10
 AUTORADIOBUTTON "Do not &obtain a mumber now",
                 100,17,24,180,10
 AUTORADIOBUTTON "Obtain a mumbler auto&matically",
                 101,17,34,180,10
 AUTORADIOBUTTON "&Enter mumbler manually",
                 102,17,44,180,10
 DEFPUSHBUTTON "OK",IDOK,92,58,50,14
 PUSHBUTTON "Cancel",IDCANCEL,146,58,50,14
END

INT_PTR CALLBACK DlgProc(HWND hdlg, UINT uMsg,
                         WPARAM wParam, LPARAM lParam)
{
 switch (uMsg) {
 case WM_INITDIALOG:
  CheckRadioButton(hdlg, 100, 102, 100);
  return TRUE;
 case WM_COMMAND:
  switch (GET_WM_COMMAND_ID(wParam, lParam)) {
  case IDOK:
   for (int i = 100; i &lt;= 102; i++) {
    if (IsDlgButtonChecked(hdlg, i)) EndDialog(hdlg, i);
   }
   break;
  case IDCANCEL:
   EndDialog(hdlg, -1);
   break;
  }
 }
 return FALSE;
}
</pre>
<p>
This is pretty standard unexciting dialog box that asks the user
to select an option from a list.  Notice that double-clicking
the radio button doesn't do anything special.  We can fix that.
</p>
<pre>
1 DIALOGEX DISCARDABLE  32, 32, 200, 76
STYLE DS_MODALFRAME |  WS_POPUP |
      WS_VISIBLE | WS_CAPTION | WS_SYSMENU
CAPTION "Sample"
FONT 8, "MS Shell Dlg"
BEGIN
 LTEXT "A mumbler is needed.",-1,7,8,100,10
 AUTORADIOBUTTON "Do not &obtain a mumber now",
                 100,17,24,180,10<font COLOR=blue>,BS_NOTIFY</font>
 AUTORADIOBUTTON "Obtain a mumbler auto&matically",
                 101,17,34,180,10<font COLOR=blue>,BS_NOTIFY</font>
 AUTORADIOBUTTON "&Enter mumbler manually",
                 102,17,44,180,10<font COLOR=blue>,BS_NOTIFY</font>
 DEFPUSHBUTTON "OK",IDOK,92,58,50,14
 PUSHBUTTON "Cancel",IDCANCEL,146,58,50,14
END

INT_PTR CALLBACK DlgProc(HWND hdlg, UINT uMsg,
                         WPARAM wParam, LPARAM lParam)
{
 switch (uMsg) {
 case WM_INITDIALOG:
  CheckRadioButton(hdlg, 100, 102, 100);
  return TRUE;
 case WM_COMMAND:
  switch (GET_WM_COMMAND_ID(wParam, lParam)) {
  case IDOK:
   for (int i = 100; i &lt;= 102; i++) {
    if (IsDlgButtonChecked(hdlg, i)) EndDialog(hdlg, i);
   }
   break;
  case IDCANCEL:
   EndDialog(hdlg, -1);
   break;
<font COLOR=blue>  case 100:
  case 101:
  case 102:
   if (GET_WM_COMMAND_CMD(wParam, lParam) == BN_DBLCLK) {
    EndDialog(hdlg, GET_WM_COMMAND_ID(wParam, lParam));
   }
   break;</font>
  }
 }
 return FALSE;
}
</pre>
<p>
We added the <code>BS_NOTIFY</code> style to the radio buttons,
which enables the extended notifications (everything other than
<code>BN_CLICKED</code>).  When we receive a <code>WM_COMMAND</code>
message for a radio button specifying that the operation was
<code>BN_DBLCLK</code>, we automatically click the OK button.
(For a wizard, we would automatically click the Next or
Finish button, as appropriate.)
</p>
<p>
Note that double-click as a shortcut for select-and-OK
should be used only for dialogs or wizard pages where the
only relevant controls are radio buttons (and the OK and Cancel
buttons).
If there are controls on the page other than the radio button,
then you have to wait for the OK because the user might want
to manipulate those other controls too.
</p>
<p>
This "double-click means select-and-OK" shortcut can also be
used if the only thing on the dialog is a list box or list view
from with the user is being asked to select one item.
If the user double-clicks an item from the list,
treat it as select-and-OK.
</p>
<p>
The dialog boxes in Explorer are rather inconsistent in their
support for double-clicked radio buttons.
The Office and Money teams do a much better job.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-294423">
				<div id="div-comment-294423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chump</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050804-10/?p=34713#comment-294423">
			August 4, 2005 at 11:41 am</a>		</div>

		<p>What are mumbers and mumblers??<br />
<br />8)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-294453">
				<div id="div-comment-294453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.highprogrammer.com/alan/' rel='external nofollow' class='url'>Alan De Smet</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050804-10/?p=34713#comment-294453">
			August 4, 2005 at 12:03 pm</a>		</div>

		<p>A useful technique, but in the specific case of radio buttons I wonder how useful it is.  If the only thing I can do in a dialog box is pick an action to be taken then hit okay, well, I&#8217;m really not saying what I mean.  If I no longer want to Mumblize my Foobar, I click Cancel.  If I want one of the other actions, I click the action I want, then OK.  What&#8217;s the point of confirming (via double-click or OK) at all?  It&#8217;s hardly a complex dialogue that I might make a mistake on.   Instead, wouldn&#8217;t it make more sense to have four buttons stacked on top of each other:</p>
<p> [Do not &amp;obtain a mumbler now]<br />
<br /> [Obtain a mumbler auto&amp;matically]<br />
<br /> [&amp;Enter mumbler manually]<br />
<br /> [Don&#8217;t mumblize]</p>
<p>It&#8217;s down to a single unambiguous click.</p>
<p>The best example of doing this I can think of was WinXP changing the logout radio buttons to normal buttons.  I found that a vastly superior solution.</p>
<p>(Oh, and I suspect you meant mumb_l_er in your first radio button.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-294483">
				<div id="div-comment-294483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.csc.calpoly.edu/~bfriesen/' rel='external nofollow' class='url'>Brian Friesen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050804-10/?p=34713#comment-294483">
			August 4, 2005 at 12:49 pm</a>		</div>

		<p>I&#8217;ve never heard of double-clicking radio buttons before.  For the most part I like these nuances in Windows (like holding shift when you active a context menu may reveal additional hidden items).  But double-clicking a radio button sounds like it may be more of an annoyance.  From time to time I accidently double-click a control.  If this happens over a radio button and the dialog closes itself, I would find myself puzzled and annoyed.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-294503">
				<div id="div-comment-294503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Dunn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050804-10/?p=34713#comment-294503">
			August 4, 2005 at 1:32 pm</a>		</div>

		<p>That&#8217;s funny&#8230; I&#8217;ve seen wizards where double-clicking a list does a Next as well (add new hardware is one, I think). But I wouldn&#8217;t expect double-clicking a button to do anything special because double-clicking a button doesn&#8217;t have special significance anywhere; whereas double-clicking a list is special (meaning &quot;do the default action on what I just clicked&quot;).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-294663">
				<div id="div-comment-294663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050804-10/?p=34713#comment-294663">
			August 5, 2005 at 9:21 am</a>		</div>

		<p>Centaur,</p>
<p>Yeah, they apparently missed this part of the idiom:</p>
<p>Note that double-click as a shortcut for select-and-OK should be used only for dialogs or wizard pages where the only relevant controls are radio buttons (and the OK and Cancel buttons). If there are controls on the page other than the radio button, then you have to wait for the OK because the user might want to manipulate those other controls too. </p>
<p>I have done this before, though since it&#8217;s with MFC, it&#8217;s only one line of code:<br />
<br />    ON_CBN_DBLCLK(IDC_COMBO, OnOK)<br />
<br />    ON_LBN_DBLCLK(IDC_LIST, OnOK)<br />
<br />etc.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-294633">
				<div id="div-comment-294633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050804-10/?p=34713#comment-294633">
			August 5, 2005 at 2:39 am</a>		</div>

		<p>I have often seen less experienced computer users double-click on *everything* &#8212; from buttons to what not. Sometimes I&#8217;ve tried to explain what you should single-click and what to double-click, but it actually seems that there isn&#8217;t a simple rule for that. At least you should keep that fact in mind when designing new special double-click actions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-294643">
				<div id="div-comment-294643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050804-10/?p=34713#comment-294643">
			August 5, 2005 at 3:52 am</a>		</div>

		<p>Microsoft Visual Studio .NET 7.1 is guilty of misapplying this idiom.</p>
<p>In the Add New Item dialog, there is a vast Templates list view on the right, and a relatively small Name edit below. Now I usually tend to first think *what* it will be, and next *what name* it will have. Occasionally, I double-click the template, at which point the validator complains that &quot;&lt;Enter name&gt;&quot; is not a valid name. Of course it is not; because I was just going to enter it when you interrupted me with your rude modal validation error message box. The double-click here supports the unlikely use case of entering its name first and deciding what it will be next.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-294723">
				<div id="div-comment-294723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.csc.calpoly.edu/~bfriesen/' rel='external nofollow' class='url'>Brian Friesen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050804-10/?p=34713#comment-294723">
			August 5, 2005 at 11:40 am</a>		</div>

		<p>Frederik, you&#8217;re so right.  I laugh inside every time I watch my dad &quot;drive&quot; a computer, he always double-clicks items in the Quick Launch bar to start them.  I guess for the non-savvy it&#8217;s easier to double-click everything than try and remember which you double-click and which you single click.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-295073">
				<div id="div-comment-295073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050804-10/?p=34713#comment-295073">
			August 6, 2005 at 2:47 am</a>		</div>

		<p>GregM said:</p>
<p>&gt; double-click as a shortcut for select-and-OK<br />
<br />&gt; should be used only for dialogs or wizard<br />
<br />&gt; pages where the only relevant controls are<br />
<br />&gt; radio buttons (and the OK and Cancel<br />
<br />&gt; buttons).</p>
<p>Not so. Radio buttons are not the only control that you can click to choose an entry. List &amp; combo boxes are other such controls. The only requirement should be, that there is only one such control on the page.</p>
<p>TC</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

