<html>
<head>
<title>What is DLL import binding?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What is DLL import binding?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 18, 2010 / year-entry #89</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time, we saw how hinting is used to speed up the resolving of imported functions. Today, we'll look at binding. Recall that the module loader resolves imports by locating the function in the export table of the linked-to DLL and recording the results in the loaded module's table of imported function addresses so that...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last time, we saw how
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2010/03/17/9980011.aspx">
<i>hinting</i> is used to speed up
the resolving of imported functions</a>.
Today, we'll look at <i>binding</i>.
</p>
<p>
Recall that the module loader resolves imports by locating the
function in the export table of the linked-to DLL
and
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/07/20/672695.aspx">
recording the results in the loaded module's table of
imported function addresses</a>
so that code from the module can jump indirectly through the table
and reach the target function.
</p>
<p>
One of the consequences of this basic idea is that the table of
imported function addresses is written to at module load time.
Writeable data in a module is stored in the form of copy-on-write
pages.
Copy-on-write pages are a form of computer optimism:
"I'm going to assume that nobody writes to this page,
so that I can share it among all copies of the DLL loaded
into different processes"
(assuming other conditions are met,
not important to this discussion; don't make me bring back
the nitpicker's corner).
"In this way, I can conserve memory,
leaving more memory available for other things."
But once you write to the page,
that assumption is proven false, and the memory manager needs
to make a private copy of the page for your process.
If two processes load your DLL,
they each get their own copy of the memory once they write to it,
and the opportunity to share the memory between the two DLLs is lost.
</p>
<p>
What is particularly sad is when the copy-on-write page is forced
to be copied because two processes wrote to the pages,
even if the processes <i>wrote the same value</i>.
Since the two pages are now once again identical,
they could in principle be shared again.
(The memory manager doesn't do <code>memcmp</code>s of
every potentially-shared page each time you write to it,
on the off chance that you happened to make two pages
coincidentally identical.
Once a copy-on-write page is written to, the memory manager makes
the copy and says, "Oh well, it was good while it lasted.")
</p>
<p>
One of the cases where two processes both write to the page and
write the same value is when they are resolving imports to the same
DLL.
In that case, the call to <code>GetProcAddress</code> will return
the same value in both processes (assuming the target DLL is loaded
at the same base address in both processes),
and you are in the sad case where two processes dirty the page
by writing the same value.
</p>
<p>
To make this sad case happy again, the module loader has an optimization
to avoid writing to pages it doesn't have to:
We pre-initialize the values in the table of
imported function addresses to a prediction as to what the
actual address of the function will be.
Then we can have the module loader compare the return value of
<code>GetProcAddress</code> against the predicted value,
and if they are the same, it skips the write.
In context diff format:
</p>
<pre>
// error checking deleted since it's not relevant to the discussion

for (Index = 0; Index &lt; NumberOfImportedFunctions; Index++) {
  FunctionPointer = GetProcAddress(hinst, ImportEntry[Index]);

- TableEntry[Index] = FunctionPointer;

+ if (TableEntry[Index] != FunctionPointer)
+   TableEntry[Index] = FunctionPointer;
}
</pre>
<p>
But wait, we can optimize this even more.
How about avoiding the entire loop?
This saves us the trouble of having to call <code>GetProcAddress</code>
in the first place.
</p>
<p>
There is an extra field in the import descriptor table entry called
<code>TimeDateStamp</code> which records the timestamp of the
DLL from which the precomputed function pointer values were obtained.
Every DLL has a timestamp, recorded in the module header information.
(The format of this timestamp is in
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/09/05/54806.aspx">
seconds since January 1, 1970</a>,
commonly known as unix time format.)
Before the module loader resolves imported functions,
it compares the timestamp in the import descriptor table entry
against the timestamp in the actual DLL that got loaded.
If they match (and if the actual DLL was loaded at its preferred
base address),
then the module loader skips the loop entirely:
All the precomputed values are correct.
</p>
<p>
That's the classical model for binding.
There have been some changes since the original implementation,
but they don't change the underlying principle:
Precompute the answers and associate them with a key which lets
you determine whether the information against which the values were
precomputed matches the information that you actually have.
</p>
<p>
Binding therefore is a performance optimization to address both
wall-clock running time
(by reducing the amount of computation performed at
module load time)
and memory consumption
(by reducing the number of copy-on-write pages actually written to).
</p>
<p>
<b>Exercise</b>:
Why is the timestamp stored in the module header?
Why not just use the actual file last-modified time?
</p>
<p>
<b>Exercise</b>:
When you rebase a DLL, does it update the timestamp?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-820203">
				<div id="div-comment-820203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820203">
			March 18, 2010 at 7:09 am</a>		</div>

		<p>Because the actual file time may differ depending on whether the DLL has ever been stored on a FAT filesystem?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820213">
				<div id="div-comment-820213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820213">
			March 18, 2010 at 7:41 am</a>		</div>

		<p>Random832 is correct: the creation/modification timestamps on the file can be changed by copying, or they can be inaccurate due to the filesystem on which the module is stored.</p>
<p>With respect to rebasing, I would say it does modify the timestamp. &nbsp;I believe the export records are stored in RVA format (relative to the load address), but the cached export address would need to be resolved (base+offset) in order for binding to work. &nbsp;If rebasing didn&#8217;t update the timestamp, binding to the rebased DLL would result in undefined behavior.</p>
<p>And even if I&#8217;m wrong about why, my answer still stands: I just rebased a DLL and it changed the timestamp.</p>
<p>P.S. &nbsp;I find it awesome how you threaten your readers &nbsp;with the nitpicker&#8217;s corner. &nbsp;:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820223">
				<div id="div-comment-820223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820223">
			March 18, 2010 at 7:51 am</a>		</div>

		<p>Would the actual file write time may differ depending on your timezone versus the timezone of the server that&#8217;s holding the file? &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-nathan_works odd alt thread-odd thread-alt depth-1" id="comment-820233">
				<div id="div-comment-820233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/nathan_works' rel='external nofollow' class='url'>nathan_works</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820233">
			March 18, 2010 at 7:54 am</a>		</div>

		<p>The baseaddress is stored in the DLL itself, so if you re-base (static, not run-time), it would modify the file last modified time.</p>
<p>Should it modify the internal timetamp ? Well, are the function pointers all relative to the base address, ya ? Thus the offsets shouldn&#8217;t change &#8212; they are the same, since only the base changed.. So maybe not..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820243">
				<div id="div-comment-820243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone You Know</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820243">
			March 18, 2010 at 8:22 am</a>		</div>

		<p>@Random832:</p>
<p>For those of us who aren&#8217;t familiar with the ins and outs of filesystems, why does it matter if it&#8217;s been stored on a FAT32 filesystem?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820253">
				<div id="div-comment-820253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.steamsprocket.org.uk' rel='external nofollow' class='url'>Aneurin Price</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820253">
			March 18, 2010 at 8:27 am</a>		</div>

		<p>@Someone You Know</p>
<p>Presumably because of a lower timestamp granularity?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820263">
				<div id="div-comment-820263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820263">
			March 18, 2010 at 9:20 am</a>		</div>

		<p>If rebasing updates the timestamp in the PE header, how is Windbg going to find matching symbols for the DLL?</p>
<p>Now that the timestamps are different it won&#8217;t be able to locate the original PDB generated by the compiler.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820273">
				<div id="div-comment-820273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rutger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820273">
			March 18, 2010 at 9:23 am</a>		</div>

		<p>You dont want to be dependant on the file last accessed date time for more reasons(compression that might optimize this away for instance)</p>
<p>The header is updated when you rebase, actually we found that out accidentally this week as that header timestamp is also used to resolve modules stored in our symbol server, and it found nothing. Moving rebase upstream in our build process solved that&#8230;</p>
<p>But this then means that rebasing a dll will cause the loop to check the entire export table.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820283">
				<div id="div-comment-820283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">X</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820283">
			March 18, 2010 at 10:05 am</a>		</div>

		<p>timestamp is stored in the header because the filesystem timestamp can change when a file is copied. &nbsp; Also FAT had (has?) a 2 second granularity.</p>
<p>Rebaseing makes the binding invalid so it should update the timestamp.</p>
<p>How does binding work on Vista and Win7 (with ASLR)? &nbsp;Is it disabled?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820293">
				<div id="div-comment-820293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820293">
			March 18, 2010 at 10:20 am</a>		</div>

		<p>Tiemstamp is stored in the header for the reasons mentioned by several people (that the file timestamp can change independently of the file contents), but a more important principal (I think) is that the timestamp stored int he header need not be a timestamp &#8211; as Raymond said, it&#8217;s just a key to indicate that the DLL being linked to at runtime is the same (at least as far as the imports are &nbsp;concerned) as when the importing module was linked. </p>
<p>Even though the field is called &#8216;TimeDateStamp&#8217; it could just as easily be any reasonable hash or key that might uniquely identify a particular build of the DLL &#8211; at least for the purposes of the optimization discussed in the article &#8211; there may be other uses for the field that require it to be a timestamp.</p>
<div class=post>[<i>Right, the TimeDateStamp field should have been called UniqueID, but the person who named it presumably chose that name to suggest &#8220;A good choice for the unique ID is the current time and date.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820313">
				<div id="div-comment-820313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Wooding</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820313">
			March 18, 2010 at 11:29 am</a>		</div>

		<p>Am I missing something important about baseball or is the `recording the results&#8230;&#8217; link to the wrong page?</p>
<div class=post>[<i>Oops, meant to link to the other article from the same day. Fixed, thanks. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-820323">
				<div id="div-comment-820323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820323">
			March 18, 2010 at 11:40 am</a>		</div>

		<p>&#8221; (The format of this timestamp is in seconds since January 1, 1970, commonly known as unix time format.)&#8221;</p>
<p>Is it 32-bit or 64-bit? In case you don&#8217;t know why I ask this, read about the year 2038 problem.</p>
<div class=post>[<i>If you read the rest of the article, you&#8217;ll see why this isn&#8217;t a problem. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820333">
				<div id="div-comment-820333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820333">
			March 18, 2010 at 11:40 am</a>		</div>

		<blockquote><p>
  &gt; Am I missing something important about baseball&#8230; &lt;&lt;
</p></blockquote>
<p>I think what you&#8217;re missing is that, just as &nbsp;baseball is not merely a sporting event, resolving the imports from a DLL is a social event, not merely a technical event. (jk)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820343">
				<div id="div-comment-820343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820343">
			March 18, 2010 at 12:04 pm</a>		</div>

		<blockquote><p>
  &gt; the person who named it presumably chose that name to suggest &quot;A good choice for the unique ID is the current time and date.&quot; -Raymond
</p></blockquote>
<p>Raymond, even before your time machine is completed, somebody&#8217;s got a compatibility bug for you.</p>
<p>Beware when you finally back-fix all those buggy DLLs!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820353">
				<div id="div-comment-820353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820353">
			March 18, 2010 at 12:11 pm</a>		</div>

		<blockquote><p>
  &gt; Is it 32-bit or 64-bit? In case you don&#8217;t know why I ask this, read about the year 2038 problem.
</p></blockquote>
<p>I guess the lucky maintainers of 68 year-old DLLs will manage to press &#8216;recompile&#8217; once more when they realize they are reusing a &quot;unique ID&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820363">
				<div id="div-comment-820363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820363">
			March 18, 2010 at 12:28 pm</a>		</div>

		<p>binding doesn&#8217;t work on Vista when binding to system dlls due to address space randomization.</p>
<p>(where is kernel32 today hmmm?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820373">
				<div id="div-comment-820373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sash</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820373">
			March 18, 2010 at 12:32 pm</a>		</div>

		<p>&#8220;assuming the target DLL is loaded at the same base address in both processes&#8221;</p>
<p>Isn&#8217;t this assumption automatically broken on OSs that use address space layout randomization? &nbsp;Is it implicit then that DLL binding optimizations are moot in this case?</p>
<div class=post>[<i>Yes, if the target DLL is ASLR&#8217;d, then binding becomes ineffective. (Though the pages could still be shared since ASLR keeps the base address the same across all processes. Dunno if the loader takes advantage of this today.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820413">
				<div id="div-comment-820413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Lamb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820413">
			March 18, 2010 at 3:45 pm</a>		</div>

		<p><a href="http://blogs.msdn.com/oldnewthing/archive/2009/12/04/9932270.aspx" rel="nofollow"></a> The memcmp() trick was worth mentioning because people actually do this, or rather, they do something equivalent but a bit smarter.</p>
<p>Suppose you have a big system running a dozen VMs. And although the VMs aren&#8217;t strictly identical, for the usual support reasons they&#8217;re as similar as they can be. All six run the same version of the OS, and if several run the same application, that&#8217;s probably the same version too. So &#8220;hardware&#8221; page 0x45e0000 in VM #1 may be identical to page 0x4390000 in VM #6</p>
<p>In this scenario (which is common and becoming more so) you get a huge saving in physical RAM from having a mechanism in the hypervisor (or in the OS supporting the hypervisor, in this case typically a Linux distribution) which can coalesce these pages. The strategy is to track pages which change infrequently and to keep hashes of their contents. If two pages have the same hash, there&#8217;s an excellent chance they&#8217;re identical, and you should memcmp() them and coalesce any that match.</p>
<p>Of course once someone had this working for an extreme scenario where it&#8217;s the only option (VMs) people began experimenting to see how effective it is on an ordinary desktop OS. Raymond describes one way that two applications can end up with identical pages that can&#8217;t be caught by traditional COW, but there are countless others. The RAM saving is modest but significant.</p>
<p>One day everybody&#8217;s ordinary PC may do this. Or, with RAM getting ever cheaper, perhaps only big VM farms will care.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820423">
				<div id="div-comment-820423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Demid</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820423">
			March 18, 2010 at 5:11 pm</a>		</div>

		<p>I don&#8217;t get it: why does timestamp change when dll is rebased?</p>
<p>Both values are written to the dll and loader checks preferred base address anyway so even if timestamp is the same the preferred base address isn&#8217;t and loader forced to do the loop.</p>
<p>Did I miss something?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820443">
				<div id="div-comment-820443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820443">
			March 18, 2010 at 6:30 pm</a>		</div>

		<p>I thought this is relevant:</p>
<p>‘BIND.EXE is the most well-known way to bind an executable. However, it optimizes your executables based upon your system DLLs. If you distribute your program to users, they probably will have different system DLLs, so you&#8217;ll want to bind your executables on their system. The Windows Installer has the BindImage action, which looks pain-free to use (although I must confess I&#8217;ve never written an installation script). Alternatively, you can use the API BindImageEx that&#8217;s part of IMAGEHLP.DLL.’</p>
<ul>
<li>Optimizing DLL Load Time Performance by Matt Pietrek</li>
</ul>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/magazine/bb985014.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/magazine/bb985014.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820453">
				<div id="div-comment-820453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">peterchen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820453">
			March 18, 2010 at 11:21 pm</a>		</div>

		<blockquote><p>
  &gt; I guess the lucky maintainers of 68 year-old DLLs will manage to press &#8216;recompile&#8217; once more when they realize they are reusing a &quot;unique ID&quot;
</p></blockquote>
<p>Because Meiantainers of 68 year old DLL&#8217;s</p>
<p>(a) are aware of the problem</p>
<p>(b) check all possible permutations of binary version combinations on every release</p>
<p>(c) Have build scripts automatically check DLL Binding IDs against a database of previously released DLLs</p>
<p>(d) all of the above</p>
<p>(I guess the reason is it may be any ID, not necesarily a timestamp)</p>
<p>@Demid:</p>
<p>Because that attitude changes the contract from &quot;skip the loop when id changed&quot; gradually to &quot;.. or any of another dozen conditions are met&quot;. Some problems can be solved with more code, others with less contract.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820463">
				<div id="div-comment-820463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820463">
			March 19, 2010 at 12:07 am</a>		</div>

		<p>It seems like it would be safe to assume that ASLR is now going to be the norm, so binding would be pointless for the most part.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820473">
				<div id="div-comment-820473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M&#233;dinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820473">
			March 19, 2010 at 3:00 am</a>		</div>

		<p>I don&#8217;t understand how the program obtains that timestamp: Is it stored in the import library when the DLL is built?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-820483">
				<div id="div-comment-820483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820483">
			March 19, 2010 at 3:33 am</a>		</div>

		<p>Paul, won&#8217;t rebasing the DLL mean that the PDB has all the wrong addresses in it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-820493">
				<div id="div-comment-820493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100318-00/?p=14563#comment-820493">
			March 19, 2010 at 6:16 am</a>		</div>

		<p>I don&#8217;t know if it changes the timestamp but rebasing does not break PDBs.</p>
<p>At least, we have a rebase step in our release build process that happens after the PDBs are generated and the PDBs still seem to work.</p>
<p>I expect that either:</p>
<p>1) Each PDB stores offsets relative to the module&#8217;s base address</p>
<p>Or:</p>
<p>2) The PDB stores absolute addresses as well as the original base address (so you can calculate the offset).</p>
<p>It must do something like that or PDB symbols would be useless with processes which had to move a DLL at load time.</p>
<p>(There&#8217;s no guarantee that a DLL&#8217;s prefered address range will be free. Rebasing can effectively happen at runtime as well as at build time.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

