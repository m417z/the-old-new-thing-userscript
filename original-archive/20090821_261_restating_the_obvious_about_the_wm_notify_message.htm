<html>
<head>
<title>Restating the obvious about the WM_NOTIFY message</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Restating the obvious about the WM_NOTIFY message</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 21, 2009 / year-entry #262</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090821-00/?p=17033</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It appears that people seemed to appreciate restating the obvious about the WM_COMMAND message, so I'll try it again with the WM_NOTIFY message. The WM_NOTIFY message is typically used by a control to communicate with its parent, either to provide information, request it, or both. Although that is the typical use, there are exceptions. For...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
It appears that people seemed to appreciate
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/03/02/542115.aspx">
restating the obvious about the <code>WM_COMMAND</code> message</a>,
so I'll try it again with the <code>WM_NOTIFY</code> message.
</p>
<p>
The <code>WM_NOTIFY</code> message is typically used by a control
to communicate with its parent,
either to provide information, request it, or both.
Although that is the typical use,
there are exceptions.
For example, property sheets send the <code>WM_NOTIFY</code>
to their <i>children</i>.
Property sheets are this sort-of backwards model,
where the common controls provide the parent window (the property sheet)
and applications provide the child windows (the property sheet pages).
The window manager doesn't care who sends the message to whom,
as long as the sender and recipient are in the same process.
</p>
<p>
The message cannot cross a process boundary because <code>WM_NOTIFY</code>
is basically a sender-defined version of <code>WM_USER</code>.
Anybody can define a new notification code and associate it with
any structure they want (as long as the structure begins with
a <code>NMHDR</code>).
The window manager can't marshal the structure between processes
because the structure is defined by the control,
not the window manager.
</p>
<p>
A little elaboration of that "sender-defined version of
<code>WM_USER</code>":
As we saw,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/12/02/55914.aspx">
the meaning of <code>WM_USER</code> messages is determined by the
implementor of the window class</a>.
In other words, the code <i>receiving</i> the message decides what
<code>WM_USER</code> means.
That works great if you're some external code that wants to send a message
to a known window class.
But what if you're external code that wants to send a message to an
unknown window class?
For example, you're a list view control and you want to tell your parent
about some event.
You want to send a message to the parent window,
but which message?
You can't send anything in the <code>WM_USER</code> range
because each parent window defines independently what those messages mean,
and it's highly unlikely that all the parent windows are going to agree
that <code>WM_USER+205</code> means the same thing.
For similar reasons, the <code>WM_APP</code> range is no good.
A registered message would work, but if you have hundreds of potential
events, then a hundred registered messages is a bit heavy-handed.
The old-school answer to this was the <code>WM_COMMAND</code> message,
whose notification code is defined by the sending control.
Unfortunately,
the notification code is all you get; the other parameters are busy
doing other things.
Enter <code>WM_NOTIFY</code>, which is basically
<code>WM_COMMAND</code> on steroids:
The <code>NMHDR</code> structure contains everything that was
in the <code>WM_COMMAND</code> message, and since it's a structure,
you can embed the <code>NMHDR</code> inside a larger structure
to provide (and possibly receive) more information.
</p>
<p>
Okay, end of strange digression.
</p>
<p>
The <code>NMHDR</code> structure itself is a convention,
in the same way that the parameters to <code>WM_COMMAND</code>
are a convention.
The <code>hwndFrom</code> member is supposed to be the
control that generated the notification, but there's
no enforcement.
</p>
<p>
First, there's no way to enforce it.
A window doesn't send a message; code sends a message.
You can check the thread that is executing the code that
is sending a message, but you don't know which window
that code is associated with.
</p>
<p>
"Well, the window that is sending the message is the one
that most recently received a message."
</p>
<p>
That doesn't work because you can have code associated
with one window call code associated with another window
without actually sending a message.
In fact, you probably do this all the time:
</p>
<pre>
class CFrame : public CWindow {
...
 LRESULT OnCommand(...);
...
 CGraphWindow *m_pwndGraph;
};

LRESULT CFrame::OnCommand(...)
{
 switch (idFrom) {
 case IDC_CPU: // user clicked the "CPU" button
  m_pwndGraph->ChangeMode(CPU); // change to a CPU graph
  ...
}
</pre>
<p>
Suppose that <code>CGraphWindow::ChangeMode</code> function
calls <code>SendMessage</code> as part of its processing.
Which window "sent" this message?
Since you have the power to read code, the message was
conceptually sent by <code>CGraphWindow</code>,
but the most recently received message is a <code>WM_COMMAND</code>
sent to the frame window.
</p>
<p>
Your method call is just a transfer of control inside your program.
The window manager doesn't know what's going on.
All it knows is that it delivered a <code>WM_COMMAND</code> message
to the frame window, and then some mystery code executed, and
the next thing you know, somebody is sending a message.
It doesn't have the source code to your program to know that
"Oh, that's coming from <code>CGraphWindow::ChangeMode</code>,
and to get the window handle for <code>CGraphWindow</code>,
I should call <code>CGraphWindow::operator HWND()</code>."
(And even if it did, imagine your surprise when your breakpoint
on <code>CGraphWindow::operator HWND()</code>
gets hit because <code>SendMessage</code> called it!)
</p>
<p>
Second, even if there were some psychic way for the window
manager to figure out which window is sending the message,
you still wouldn't want that.
It is common for <code>WM_NOTIFY</code> handlers of complex
controls to forward the message to another window.
For example, the list view control in report mode
receives <code>WM_NOTIFY</code>
messages from the header control and forwards them
back out to its own parent,
so that the list view parent can respond to header notifications.
(The parent normally should just let the list view handle it,
but the operation is performed in case you're one of those
special cases that needs it.)
</p>
<p>
Okay, back to what the fields of <code>NMHDR</code> mean.
There are only three fixed fields to <code>NMHDR</code> and
they pretty much match up with the parameters to
<code>WM_COMMAND</code>:
</p>
<ul>
<li><code>hwndFrom</code> is the handle to the window that
    is the logical source of the notification.</p>
<li><code>idFrom</code> is the control ID corresponding to the
    window specified by <code>hwndFrom</code>.
    In other words, <code>idFrom = GetDlgCtrlID(hwndFrom)</code>.</p>
<li><code>code</code> is the notification code.
    The meaning of this notification code depends on the window
    class of <code>hwndFrom</code>.
</ul>
<p>
It is an unwritten convention that the notification codes for
the common controls are all negative numbers.
This leaves positive numbers for applications to use for their
own purposes.
Not that applications strictly speaking needed the help,
because the meaning of the notification code depends on the
window that generated the notification,
so if you want a brand new 32-bit message number namespace,
just register a new window class, and boom, a whole new range
of codes becomes available just to you.
(Even though the notification code values do not need to be unique
across window classes,
the common controls team tries to keep the system-defined notification
codes from overlapping, just to make debugging easier.)
</p>
<p>
The <code>idFrom</code> member is provided as a convenience
to the window receiving the message so that it can use a simple
<code>switch</code> statement to figure out who is sending
the notification.
</p>
<p>
Once you figure out which notification you're receiving,
you can use the documentation for that notification to see
which structure is associated with the notification.
This answers Norman Diamond's complaint
that he
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/03/02/542115.aspx#552686">
couldn't figure out what to cast it to</a>.
For example, if the notification is
<code>LVN_ITEMCHANGING</code>,
well, let's see,
<a HREF="http://msdn.microsoft.com/en-us/library/bb774847.aspx">
the documentation for
<code>LVN_ITEMCHANGING</code></a> says,
</p>
<blockquote CLASS=q>
<p>
<code>LVN_ITEMCHANGING</code><br>
<code>pnmv = (LPNMLISTVIEW) lParam;</code>
</p>
<p>
<i>pnmv</i>: Pointer to an
<a HREF="http://msdn.microsoft.com/en-us/library/bb774773.aspx">
NMLISTVIEW</a> structure
that identifies the item and specifies which of its attributes are changing.
</p>
</blockquote>
<p>
In other words, your code goes something like this:
</p>
<pre>
case LVN_ITEMCHANGING:
 pnmv = (LPNMLISTVIEW) lParam;
 ... do stuff with pnmv ...
</pre>
<p>
I'm not sure how much more explicit the documentation could be made to be.
All it was missing was the word <code>case</code> in front.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-763993">
				<div id="div-comment-763993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090821-00/?p=17033#comment-763993">
			August 21, 2009 at 2:35 pm</a>		</div>

		<p>My biggest pet peeve is when 3rd parties implement WM_NOTIFY and completely foul up hwndFrom / idFrom. &nbsp;I&#8217;ve seen cases where hwndFrom is NULL (so you have to use idFrom), cases where idFrom is 0 (so you have to use hwndFrom), and cases where they&#8217;re both set, but GetDlgCtrlID( hwndFrom ) != idFrom. &nbsp;I&#8217;m not completely sure how that even happens&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-764123">
				<div id="div-comment-764123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">manyirons</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090821-00/?p=17033#comment-764123">
			August 24, 2009 at 12:48 pm</a>		</div>

		<p>If it&#8217;s obvious, why does it take so many pages of text to restate it?</p>
<div class=post>[<i>As I noted in the opening, because people seem to enjoy it when I take something simple and restate it in copious detail. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-764233">
				<div id="div-comment-764233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erzengel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090821-00/?p=17033#comment-764233">
			August 25, 2009 at 2:22 am</a>		</div>

		<p>Manyirons: Because what is obvious to most is not obvious to all. It could be inexperience with the subject in question, or it could be a misunderstanding of the subject in question.</p>
<p>Once you have a misconception in your head, it takes a lot to fix it, and copious amounts of detail are helpful in that regard.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-764363">
				<div id="div-comment-764363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin Eshbach</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090821-00/?p=17033#comment-764363">
			August 25, 2009 at 10:55 am</a>		</div>

		<p>It&#8217;s a shame that some people cannot grasp the concept, but only that I copy/paste code and cross my fingers that everything works fine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-764823">
				<div id="div-comment-764823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ignas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090821-00/?p=17033#comment-764823">
			August 26, 2009 at 2:36 pm</a>		</div>

		<p>OT: Could you please blog about windows hierarchy that owns windows from different processes. This for example could be used for plugins.</p>
<p>Thanks</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

