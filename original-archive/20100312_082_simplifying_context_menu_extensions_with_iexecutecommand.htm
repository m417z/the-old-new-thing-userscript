<html>
<head>
<title>Simplifying context menu extensions with IExecuteCommand</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Simplifying context menu extensions with IExecuteCommand</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 12, 2010 / year-entry #83</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100312-01/?p=14623</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The IExecuteCommand interface is a simpler form of context menu extension which takes care of the annoying parts of IContextMenu so you can focus on your area of expertise, namely, doing the actual thing the user selected, and leave the shell to doing the grunt work of managing the UI part. I've never needed a...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The <code>IExecuteCommand</code> interface is a simpler form of
context menu extension which takes care of the annoying parts of
<code>IContextMenu</code> so you can focus on your area of expertise,
namely, doing the actual thing the user selected,
and leave the shell to doing the grunt work of managing the UI part.
</p>
<p>
I've never needed a scratch shell extension before, so I guess
it's time to create one.
This part is completely boring, and those of you who have written
COM inproc servers can skip over it.
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;new&gt;

LONG g_cObjs;

void DllAddRef() { InterlockedIncrement(&amp;g_cObjs); }
void DllRelease() { InterlockedDecrement(&amp;g_cObjs); }

// guts of shell extension go in here eventually

class CFactory : public IClassFactory
{
public:
 // *** IUnknown ***
 STDMETHODIMP QueryInterface(REFIID riid, void **ppv);
 STDMETHODIMP_(ULONG) AddRef() { return 2; }
 STDMETHODIMP_(ULONG) Release() { return 1; }

 // *** IClassFactory ***
 STDMETHODIMP CreateInstance(IUnknown *punkOuter,
                             REFIID riid, void **ppv);
 STDMETHODIMP LockServer(BOOL fLock);
};

CFactory c_Factory;

STDMETHODIMP CFactory::QueryInterface(REFIID riid, void **ppv)
{
 IUnknown *punk = NULL;
 if (riid == IID_IUnknown || riid == IID_IClassFactory) {
  punk = static_cast&lt;IClassFactory*&gt;(this);
 }
 *ppv = punk;
 if (punk) {
  punk-&gt;AddRef();
  return S_OK;
 } else {
  return E_NOINTERFACE;
 }
}

STDMETHODIMP CFactory::CreateInstance(
 IUnknown *punkOuter, REFIID riid, void **ppv)
{
 *ppv = NULL;
 if (punkOuter) return CLASS_E_NOAGGREGATION;
 CShellExtension *pse = new(std::nothrow) CShellExtension();
 if (!pse) return E_OUTOFMEMORY;
 HRESULT hr = pse-&gt;QueryInterface(riid, ppv);
 pse-&gt;Release();
 return hr;
}

STDMETHODIMP CFactory::LockServer(BOOL fLock)
{
 if (fLock) DllAddRef();
 else       DllRelease();
 return S_OK;
}

STDAPI DllGetClassObject(REFCLSID rclsid,
                         REFIID riid, void **ppv)
{
 if (rclsid == CLSID_ShellExtension) {
  return c_Factory.QueryInterface(riid, ppv);
 }
 *ppv = NULL;
 return CLASS_E_CLASSNOTAVAILABLE;
}

STDAPI DllCanUnloadNow()
{
 return g_cObjs ? S_OK : S_FALSE;
}
</pre>
<p>
I'm assuming that the above code is all old hat.
Consider it a prerequisite.
</p>
<p>
Okay, now the good stuff.
</p>
<p>
The <code>IExecuteCommand</code> interface is used when you
create a static registration for a shell verb but
<a HREF="http://msdn.microsoft.com/en-us/library/bb762475.aspx">
specify <code>DelegateExecute</code> in the command</a>.
Our sample shell extension will be active on text files,
and all it'll do is print the file names to the debugger.
</p>
<p>
Since we're a COM server, we need to register our CLSID.
This should also be very familiar to you.
</p>
<pre>
[HKEY_CLASSES_ROOT\CLSID\{<font COLOR=blue>guid</font>}\InProcServer32]
@="<font COLOR=blue>C:\path\to\scratch.dll</font>"
"ThreadingModel"="Apartment"
</pre>
<p>
Here's where we register our object as a verb for text files,
specifying that it should be invoked via <code>DelegateExecute</code>:
</p>
<pre>
[HKEY_CLASSES_ROOT\txtfile\shell\printnamestodebugger]
@="Print names to debugger"

[HKEY_CLASSES_ROOT\txtfile\shell\printnamestodebugger\command]
"DelegateExecute"="{<font COLOR=blue>guid</font>}"
</pre>
<p>
That was the easy part. Now to roll up our sleeves and write
the shell extension.
</p>
<pre>
#include &lt;shobjidl.h&gt;

CLSID CLSID_ShellExtension = { <font COLOR=blue>...guid...</font> };

class CShellExtension
 : public IExecuteCommand
 , public IInitializeCommand
 , public IObjectWithSelection
{
public:
 CShellExtension();

 // *** IUnknown ***
 STDMETHODIMP QueryInterface(REFIID riid, void **ppv);
 STDMETHODIMP_(ULONG) AddRef();
 STDMETHODIMP_(ULONG) Release();

 // *** IInitializeCommand ***
 STDMETHODIMP Initialize(PCWSTR pszCommandName, IPropertyBag *ppb);

 // *** IObjectWithSelection ***
 STDMETHODIMP SetSelection(IShellItemArray *psia);
 STDMETHODIMP GetSelection(REFIID riid, void **ppv);

 // *** IExecuteCommand ***
 STDMETHODIMP SetKeyState(DWORD grfKeyState) { return S_OK; }
 STDMETHODIMP SetParameters(LPCWSTR pszParameters) { return S_OK; }
 STDMETHODIMP SetPosition(POINT pt) { return S_OK; }
 STDMETHODIMP SetShowWindow(int nShow) { return S_OK; }
 STDMETHODIMP SetNoShowUI(BOOL fNoShowUI) { return S_OK; }
 STDMETHODIMP SetDirectory(LPCWSTR pszDirectory) { return S_OK; }
 STDMETHODIMP Execute();

private:
 ~CShellExtension();
private:
 LONG m_cRef;
 IShellItemArray *m_psia;
};

CShellExtension::CShellExtension()
 : m_cRef(1), m_psia(NULL)
{
 DllAddRef();
}

CShellExtension::~CShellExtension()
{
 if (m_psia) m_psia-&gt;Release();
 DllRelease();
}
</pre>
<p>
I've written this all out longhand; I'm trusting that you're
using some sort of framework (like, say, ATL) which avoids all
this tedium, but since different people may choose different frameworks,
I won't choose a framework here.
Instead, we just have the boring <code>IUnknown</code> methods.
</p>
<pre>
STDMETHODIMP CShellExtension::QueryInterface(
 REFIID riid, void **ppv)
{
 IUnknown *punk = NULL;
 if (riid == IID_IUnknown || riid == IID_IExecuteCommand) {
  punk = static_cast&lt;IExecuteCommand*&gt;(this);
 } else if (riid == IID_IInitializeCommand) {
  punk = static_cast&lt;IInitializeCommand*&gt;(this);
 } else if (riid == IID_IObjectWithSelection) {
  punk = static_cast&lt;IObjectWithSelection*&gt;(this);
 }
 *ppv = punk;
 if (punk) {
  punk-&gt;AddRef();
  return S_OK;
 } else {
  return E_NOINTERFACE;
 }
}

STDMETHODIMP_(ULONG) CShellExtension::AddRef()
{
 return ++m_cRef;
}

STDMETHODIMP_(ULONG) CShellExtension::Release()
{
 ULONG cRef = --m_cRef;
 if (cRef == 0) delete this;
 return cRef;
}
</pre>
<p>
Whew.
Up until now, it's just been boring typing that you have to do
for any shell extension.
Finally we can start doing something interesting.
Windows&nbsp;7 will initialize your shell extension with information
about the command being executed.
For this particular shell extension, we'll just print the command
name to the debugger to prove that something happened.
(In real life, you might use the same <code>CShellExtension</code>
to handle multiple commands, and this lets you determine which
command you're being asked to execute.)
</p>
<pre>
STDMETHODIMP CShellExtension::Initialize(
 PCWSTR pszCommandName,
 IPropertyBag *ppb)
{
 OutputDebugStringW(L"Command: ");
 OutputDebugStringW(pszCommandName);
 OutputDebugStringW(L"\r\n");
 return S_OK;
}
</pre>
<p>
The shell will give you the items on which to execute in the form
of an <code>IShellItemArray</code>:
</p>
<pre>
STDMETHODIMP CShellExtension::SetSelection(IShellItemArray *psia)
{
 if (psia) <a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/04/06/108395.aspx">psia-&gt;AddRef()</a>;
 if (m_psia) m_psia-&gt;Release();
 m_psia = psia;
 return S_OK;
}

STDMETHODIMP CShellExtension::GetSelection(
 REFIID riid, void **ppv)
{
 if (m_psia) return m_psia-&gt;QueryInterface(riid, ppv);
 *ppv = NULL;
 return E_NOINTERFACE;
}
</pre>
<p>
The shell will then call a bunch of <code>IExecuteCommand::SetThis</code>
and
<code>IExecuteCommand::SetThat</code> methods to inform you of the
environment in which you have been asked to execute.
We just ignored them all for simplicity, but in practice,
you may want to pay attention to some of them, particularly
<code>IExecuteCommand::SetPosition</code>,
<code>IExecuteCommand::SetShowWindow</code>, and
<code>IExecuteCommand::SetNoShowUI</code>.
</p>
<p>
After all the <code>IExecuteCommand::SetXxx</code> methods have been called,
it's show time:
</p>
<pre>
STDMETHODIMP CShellExtension::Execute()
{
 HRESULT hr;
 if (m_psia) {
  IEnumShellItems *pesi;
  if (SUCCEEDED(hr = m_psia-&gt;EnumItems(&amp;pesi))) {
   IShellItem *psi;
   while (pesi-&gt;Next(1, &amp;psi, NULL) == S_OK) {
    LPWSTR pszName;
    if (SUCCEEDED(psi-&gt;GetDisplayName(SIGDN_FILESYSPATH,
                                      &amp;pszName))) {
     OutputDebugStringW(L"File: ");
     OutputDebugStringW(pszName);
     OutputDebugStringW(L"\r\n");
     CoTaskMemFree(pszName);
    }
    psi-&gt;Release();
   }
   pesi-&gt;Release();
   hr = S_OK;
  }
 } else {
  hr = E_UNEXPECTED;
 }
 return hr;
}
</pre>
<p>
All we do is enumerate the contents of the <code>IShellItemArray</code>
and print their file names (if they have one).
Instead of <code>IEnumShellItems</code>, you can use
<code>IShellItemArray::GetCount</code> and
<code>IShellItemArray::GetItemAt</code>.
Or, if you are porting an existing context menu that uses
<code>IDataObject</code>,
you can call <code>IShellItemArray::BindToHandler(BHID_DataObject)</code>
to turn your <code>IShellItemArray</code> into an <code>IDataObject</code>.
</p>
<p>
Install this shell extension, right-click on a text file (or
a bunch of text files), and select
<i>Print names to debugger</i>.
If all goes well, the debugger will report
<code>Command: printnamestodebugger</code>
followed by paths of the files you selected.
</p>
<p>
But wait, there's more.
The <code>IPropertyBag</code> passed to
<code>IInitializeCommand::Initialize</code>
contains additional configuration options taken from the
registry.
You can use this to customize the behavior of the shell extension further.
<a HREF="http://msdn.microsoft.com/en-us/library/dd378347.aspx">
Put the bonus information under the command key</a>
like this:
</p>
<pre>
[HKEY_CLASSES_ROOT\txtfile\shell\printnamestodebugger]
"extra"="Special"
</pre>
<pre>
STDMETHODIMP CShellExtension::Initialize(
 PCWSTR pszCommandName,
 IPropertyBag *ppb)
{
 OutputDebugStringW(L"Command: ");
 OutputDebugStringW(pszCommandName);
 OutputDebugStringW(L"\r\n");
 <font COLOR=blue>if (ppb) {
  VARIANT vt;
  VariantInit(&amp;vt);
  if (SUCCEEDED(ppb-&gt;Read(L"extra", &amp;vt, NULL))) {
   if (SUCCEEDED(VariantChangeType(&amp;vt, &amp;vt, 0, VT_BSTR))) {
    OutputDebugStringW(L"extra: ");
    OutputDebugStringW(vt.bstrVal);
    OutputDebugStringW(L"\r\n");
   }
   VariantClear(&amp;vt);
  }
 }</font>
 return S_OK;
}
</pre>
<p>
This updated version of <code>CShellExtension</code> looks for
that registry value <code>extra</code> we set above
and if found prints its value to the debugger.
</p>
<p>
Okay, so it looks like a lot of typing, but most of that was
typing you have to do for any shell extension.
The part that is specific to <code>IExecuteCommand</code> is not
that bad,
and it certainly avoids having to mess with
<code>IContextMenu::QueryContextMenu</code>
and the fifty bajillion variations on
<code>IContextMenu::InvokeCommand</code>.
Furthermore,
the shell doesn't even load your <code>IExecuteCommand</code> handler
until the user selects your command,
so switching to a static registration also gives the system a bit of a
performance boost.
</p>
<p>
<b>Bonus tip</b>:
You can combine the <code>IExecuteCommand</code> technique with
<a HREF="http://msdn.microsoft.com/en-us/library/cc144171.aspx#dynamic_behavior">
<i>Getting Dynamic Behavior for Static Verbs by Using Advanced Query Syntax</i>
</a>
and
<a HREF="http://msdn.microsoft.com/en-us/library/cc144171.aspx#attributes_items">
<i>Using Item Attributes</i></a>
to specify the conditions under which you want your verb to appear
without having to write a single line of C++ code.
<a HREF="http://msdn.microsoft.com/en-us/library/dd758091.aspx">
Choosing a Static or Dynamic Shortcut Menu Method</a>
provides additional guidance on choosing among the various methods
for registering verbs.
</p>
<p>
One nice thing about <code>IExecuteCommand</code> is that it supports
out-of-proc activation (i.e., local server rather than in-proc server).
This means that it supports cross-bitness shell extensions:
If you don't have the time to port your 32-bit shell extension to 64-bit,
you can register it as an out-of-proc <code>IExecuteCommand</code>.
When running on 64-bit Windows,
the 64-bit Explorer will launch your 32-bit server to handle the command.
Conversely, if your <code>IExecuteCommand</code> is a 64-bit local server,
a 32-bit application can still invoke it.
</p>
<p>
(We'll see more about local server shell extensions in a few months.
This was just foreshadowing.) </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-819043">
				<div id="div-comment-819043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">configurator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100312-01/?p=14623#comment-819043">
			March 12, 2010 at 8:58 am</a>		</div>

		<p>I&#8217;m really unsure of the details here, but I&#8217;ve always been under the impression that .Net shell extensions are a bit of a problem because they need the .net runtime in the shell process. Can we create a shell extension in .Net using IExecuteCommand, then?</p>
<p>Nitpicker&#8217;s corner:</p>
<p>This sentence repeats itself a bit: &#8220;If all goes well, the debugger will report Command: printnamestodebugger paths of the files you selected will be printed to the debugger.&#8221;</p>
<div class=post>[<i>Fixed the repetitive sentence that repeated itself, thanks. (As for the .NET question, you already have the information you need to answer that.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-819083">
				<div id="div-comment-819083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jsbangs.wordpress.com' rel='external nofollow' class='url'>JS Bangs</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100312-01/?p=14623#comment-819083">
			March 12, 2010 at 9:10 am</a>		</div>

		<p>The conclusion that I draw from all of this is that if I really want to write a shell extension, I&#8217;ll be doing it in C# with IShellExtnInit and IContextMenu.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-819093">
				<div id="div-comment-819093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">configurator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100312-01/?p=14623#comment-819093">
			March 12, 2010 at 9:34 am</a>		</div>

		<p>I forgot the last part of my question: and by doing so avoid the need to load a version of the CLR in the host process (which could be a problem if two extensions use different versions of the CLR, I think)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-819123">
				<div id="div-comment-819123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100312-01/?p=14623#comment-819123">
			March 12, 2010 at 9:46 am</a>		</div>

		<p>I don&#8217;t know which part made me happier: &quot;the shell doesn&#8217;t even load your IExecuteCommand handler until the user selects your command&quot; or &quot;One nice thing about IExecuteCommand is that it supports out-of-proc activation&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-819133">
				<div id="div-comment-819133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dmz1978</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100312-01/?p=14623#comment-819133">
			March 12, 2010 at 9:48 am</a>		</div>

		<p>@configurator: how come .Net came to picture? Or maybe you are some kind of psychic (seems to be requirement here, really), and you foretold JS Bang&#8217;s post?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-819143">
				<div id="div-comment-819143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://daveamenta.com' rel='external nofollow' class='url'>Dave Amenta</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100312-01/?p=14623#comment-819143">
			March 12, 2010 at 10:03 am</a>		</div>

		<p>configurator: &nbsp;<a rel="nofollow" target="_new" href="http://blogs.msdn.com/clrteam/archive/2009/06/03/in-process-side-by-side-part1.aspx" rel="nofollow">http://blogs.msdn.com/clrteam/archive/2009/06/03/in-process-side-by-side-part1.aspx</a></p>
<p>With .NET4/CLR4, you can load two CLR versions side-by-side, so managed shell extensions won&#8217;t be a problem anymore.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-819153">
				<div id="div-comment-819153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Pryor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100312-01/?p=14623#comment-819153">
			March 12, 2010 at 10:20 am</a>		</div>

		<p>It should also be noted that if you force your extension to be loaded into its own process, .NET shouldn&#8217;t matter either, even before .NET 4.0. &nbsp;Not sure how to force loading into a separate process, but since the support is apparently there you would just need to make use of it&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-819173">
				<div id="div-comment-819173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jpotter@lss.com.au' rel='external nofollow' class='url'>jon</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100312-01/?p=14623#comment-819173">
			March 12, 2010 at 11:02 am</a>		</div>

		<p>Does this mean that your blog IS official Microsoft documentation now, Raymond. Because until 24 hours ago DelegateExecute was undocumented, or at least that&#8217;s what I was told when I asked in the managed newsgroups.</p>
<p>Any chance you could give the same treatment to all the other undocumented-secret-for-no-reason-but-were-just-used-to-being-secretive-despite-the-consent-decree stuff?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-819183">
				<div id="div-comment-819183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100312-01/?p=14623#comment-819183">
			March 12, 2010 at 11:26 am</a>		</div>

		<p>Note that the minimum operating system is listed in MSDN as Windows 7. Since you&#8217;ll want to support XP as well, you cannot actually use this (yet).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-819193">
				<div id="div-comment-819193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100312-01/?p=14623#comment-819193">
			March 12, 2010 at 11:28 am</a>		</div>

		<p>&quot;With .NET4/CLR4, you can load two CLR versions side-by-side, so managed shell extensions won&#8217;t be a problem anymore.&quot;</p>
<p>Apart from the 20MB additional memory usage per process just so you can display a single context menu item or custom icon, yeah.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-819293">
				<div id="div-comment-819293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.develer.com' rel='external nofollow' class='url'>Giovanni Bajo</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100312-01/?p=14623#comment-819293">
			March 13, 2010 at 2:46 am</a>		</div>

		<p>I suggest a third-party commercial product for shell extensions: EzShellExtensionsMFC or EzShellExtensionsNET. For a ridicule price, they expose you all the shell extenion power in a &#8220;fill here please&#8221; format which lets you forget about 99% of the problems.</p>
<div class=post>[<i>The .NET version had better be using a side-by-side-enabled version of the .NET framework but I suspect it doesn&#8217;t. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-819303">
				<div id="div-comment-819303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100312-01/?p=14623#comment-819303">
			March 13, 2010 at 3:27 am</a>		</div>

		<p>I recommend only calling OutputDebugString on newline-terminated strings, otherwise debuggers tend to scroll horizontally back and forth to update the caret position as the text is output.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-819323">
				<div id="div-comment-819323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100312-01/?p=14623#comment-819323">
			March 13, 2010 at 9:16 pm</a>		</div>

		<p>[The .NET version had better be using a side-by-side-enabled version of the .NET framework but I suspect it doesn&#8217;t. -Raymond]</p>
<p>It is not released yet unfortunately but they already advertise support for VS2010.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-819343">
				<div id="div-comment-819343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100312-01/?p=14623#comment-819343">
			March 14, 2010 at 11:31 am</a>		</div>

		<p>Should this code go into a dll library or exe app? (some COM components are exe apps) It would be nice if this example could be a selectable VS project type in the future, for all supported languages.</p>
<p>:: One nice thing about IExecuteCommand is that it supports out-of-proc activation</p>
<p>Why is IExecuteCommand a new feature, it should have been in 64-bit windows from day 1, this delay destroys the porting effort to 64-bit!</p>
<p>And from now (or w7&#8217;s release) it should be the RECOMMENDED way to develop shell extensions.</p>
<p>Is there any non-obvious drawbacks? Except not running on vista+older. Maybe more resources are used ofcourse, but this is often irrelevenat om multicore, and on OSes that has multi gb ram allocated after boot anyway.</p>
<p>Can a shell extensions (using IExecuteCommand) developed in C# (and compiled to AnyCPU) execute as a 64-bit process on 64-bit windows and 32-bit on 32-bit windows?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

