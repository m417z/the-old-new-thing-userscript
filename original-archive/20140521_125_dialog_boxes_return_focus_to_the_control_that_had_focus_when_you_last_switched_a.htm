<html>
<head>
<title>Dialog boxes return focus to the control that had focus when you last switched away; how do I get in on that action for my own windows?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Dialog boxes return focus to the control that had focus when you last switched away; how do I get in on that action for my own windows?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 21, 2014 / year-entry #126</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140521-00/?p=943</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">When you switch away from a dialog box, and then switch back to the dialog box, focus returns to the control that had focus when you last left the dialog box. But if you have a window that manually hosts two controls, then when the user switches away from your window, and then switches back,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
When you switch away from a dialog box,
and then switch back to the dialog box,
focus returns to the control that had focus when you last
left the dialog box.
But if you have a window that manually hosts two controls,
then when the user switches away from your window,
and then switches back,
focus goes to, um...
</p>
<p>
Let's find out what happens!
Take our
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/07/23/54576.aspx">
scratch program</a>
and make these changes.
</p>
<pre>
<font COLOR=blue>HWND g_hwndChild2;</font>

void
OnSize(HWND hwnd, UINT state, int cx, int cy)
{
 <font COLOR=red>// <strike>if (g_hwndChild) {</strike>
 //    <strike>MoveWindow(g_hwndChild, 0, 0, cx, cy, TRUE);</strike>
 // <strike>}</strike></font>
}

BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
 <font COLOR=2>g_hwndChild = CreateWindow(TEXT("button"), TEXT("&amp;1"),
                            WS_CHILD | WS_VISIBLE |
                            WS_TABSTOP | BS_PUSHBUTTON,
                            0, 0, 100, 100,
                            hwnd, nullptr, g_hinst, 0);
 g_hwndChild2 = CreateWindow(TEXT("button"), TEXT("&amp;2"),
                            WS_CHILD | WS_VISIBLE |
                            WS_TABSTOP | BS_PUSHBUTTON,
                            100, 0, 100, 100,
                            hwnd, nullptr, g_hinst, 0);</font>
 return TRUE;
}

// message loop

 while (GetMessage(&amp;msg, NULL, 0, 0)) {
  <font COLOR=blue>if (<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/10/21/55384.aspx">IsDialogMessage</a>(hwnd, &amp;msg)) continue;</font>
  TranslateMessage(&amp;msg);
  DispatchMessage(&amp;msg);
 }
</pre>
<p>
Run the program, and the first thing you notice is that
<i>neither button</i>
has keyboard focus.
Focus is on the frame window,
not that that helps you much, since the frame window ignores
keyboard input.
</p>
<p>
Well, anyway, hit the <kbd>Tab</kbd> key to put focus on
one of the buttons, then switch away to some other application,
then switch back via <kbd>Alt</kbd>+<kbd>Tab</kbd> or clicking on
the taskbar button. (Just don't click on the window itself,
because that would interfere with the experiment, since the click
also sets focus to the window you clicked on.)
</p>
<p>
Again, focus is not on either button because it's on the frame window.
</p>
<p>
Focus is on the frame window
because nobody bothered to put it anywhere else.
Let's fix that.
Let's say that focus goes to the first child button
when the user activates the main frame window.
</p>
<pre>
<font COLOR=blue>void OnActivate(HWND hwnd, UINT state,
                HWND hwndActDeact, BOOL fMinimized)
{
 if (state != WA_INACTIVE &amp;&amp; !fMinimized) {
  SetFocus(g_hwndChild);
 }
}

 HANDLE_MSG(hwnd, WM_ACTIVATE, OnActivate);</font>
</pre>
<p>
There's a little gotcha here:
We don't want to do this when minimized.
When the window is activated while minimized,
the user can't see any of the child windows,
so putting focus on the child causes the user's
keypresses to start doing invisible things.
(If the user hits the space bar, it will push the
invisible button!)
Instead, focus should stay on the frame window.
It is not well-known, but if you hit the
space bar when focus is on a minimized window,
it will open the system menu.
Keeping focus on the frame when minimized preserves this behavior.
</p>
<p>
Okay, at least this time, focus goes somewhere when the user
activates our window.
Of course, it would be better if we restored focus to where
it was when the user last used our window.
(For one thing, it means that the default pushbutton effect
is more likely to remain correct!)
If we don't know where to restore the focus to, then we fall
back to using the first child window.
</p>
<pre>
<font COLOR=blue>HWND g_hwndLastFocus;</font>
void OnActivate(HWND hwnd, UINT state,
                HWND hwndActDeact, BOOL fMinimized)
{
 <font COLOR=blue>if (!fMinimized) {
  if (state == WA_INACTIVE) {
   HWND hwndFocus = GetFocus();
   if (hwndFocus &amp;&amp; IsChild(hwnd, hwndFocus)) {
       g_hwndLastFocus = hwndFocus;
   }
  } else {
   SetFocus(g_hwndLastFocus ? g_hwndLastFocus
                            : g_hwndChild);
  }
 }</font>
}

 <font COLOR=blue>HANDLE_MSG(hwnd, WM_ACTIVATE, OnActivate);</font>
</pre>
<p>
The basic idea is that when the window is deactivated,
we remember the window that had focus, and when the window is
reactivated, we restore the focus to that same window
(or to our first child if we don't know what the previous focus
was).
</p>
<p>
Again, it's important to watch out for the minimized window case.
If the window is minimized when the user deactivates it,
we would end up saving the frame window for future restoration,
when in fact we should just ignore the entire interaction while
minimized.
</p>
<p>
Note that even when not minimized, we do not try to save focus
if it belongs to something outside our frame window.
For our simple program, this is more of a safety check than
something we expect to happen.
</p>
<p>
Next time, we'll see an unexpected consequence
of this auto-restore behavior.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1125293">
				<div id="div-comment-1125293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140521-00/?p=943#comment-1125293">
			May 21, 2014 at 8:15 am</a>		</div>

		<p>How to get rid of an annoying behavior when EDIT control automatically selects the whole text when the dialog box restores focus to it on app activation?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125303">
				<div id="div-comment-1125303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140521-00/?p=943#comment-1125303">
			May 21, 2014 at 8:20 am</a>		</div>

		<p>@alegr1: Basically, use Raymond&#39;s code above to check if the edit control has focus, and save the selection range when the window loses focus and restore the selection range when the window regains focus.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1125313">
				<div id="div-comment-1125313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140521-00/?p=943#comment-1125313">
			May 21, 2014 at 8:26 am</a>		</div>

		<p>No need to remember the edit control selection. It already remembers its own selection. To avoid changing the selection on focus changes, the edit box needs to not return the flag DLGC_HASSETSEL when processing the message WM_GETDLGCODE. Of course then you are changing the behavior not only when the dialog is activated, but also when you Tab between controls. I don&#39;t know of an easy way to distinguish between these cases.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125323">
				<div id="div-comment-1125323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140521-00/?p=943#comment-1125323">
			May 21, 2014 at 8:41 am</a>		</div>

		<p>While I&#39;ve known that the application should keep track of the last child to have focus and to restore it, it&#39;s never been clear to me when to do this. &nbsp;Your sample uses WM_ACTIVATE, which makes sense, but I&#39;ve also seen it done on WM_SETFOCUS itself (when the host window gets focus, it redirects it to the appropriate child). &nbsp;I&#39;m wondering if this is effectively the same behavior, or if there&#39;s some subtlety that makes handling WM_ACTIVATE more appropriate.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1125333">
				<div id="div-comment-1125333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140521-00/?p=943#comment-1125333">
			May 21, 2014 at 8:59 am</a>		</div>

		<p>Where&#39;s the interaction document when you need it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125363">
				<div id="div-comment-1125363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140521-00/?p=943#comment-1125363">
			May 21, 2014 at 3:01 pm</a>		</div>

		<p>It strikes me that this is the sort of standard behaviour that the window manager should do, especially since doing it yourself is tricky and easy to get wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1125353">
				<div id="div-comment-1125353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140521-00/?p=943#comment-1125353">
			May 21, 2014 at 2:20 pm</a>		</div>

		<p>Wow, this is actually something in one of our programs that annoyed me today. &nbsp;*Writes a fix and waits for the next one which explains the &quot;unexpected consequence&quot;*</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125583">
				<div id="div-comment-1125583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140521-00/?p=943#comment-1125583">
			May 23, 2014 at 3:35 am</a>		</div>

		<p>I can&#39;t reproduce the alleged space key system menu behaviour on a minimised window, and I tried it in Windows 95, 2000, XP and 7 just to be sure.</p>
<p>@Adrian WM_SETFOCUS does look as if it might be a better idea because you don&#39;t seem to get that message for minimised windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1125603">
				<div id="div-comment-1125603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140521-00/?p=943#comment-1125603">
			May 23, 2014 at 5:30 am</a>		</div>

		<p>@alegr1: To some it&#39;s not annoying. &nbsp;I&#39;m actually very annoyed when clicking on an edit control does not select the contents. &nbsp;Nine times out of 10, my goal is to delete the existing text and replace it. &nbsp;Those controls that don&#39;t adhere to the Windows convention make more work for me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125613">
				<div id="div-comment-1125613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140521-00/?p=943#comment-1125613">
			May 23, 2014 at 5:41 am</a>		</div>

		<p>@Neil. I got this to work on Windows 7 by: 1. Killing explorer.exe via task manager. 2. Closing all app windows except the one I wanted to pick on (this included Task Manager). 3. Minimising the desired Window. Without explorer there is no taskbar to take over things (my theory). If it is the only window it should have its minimised caption bar highlighted. 4. Press spacebar. The system menu opens. Caveats: 1. I run Win7 in classic mode (or whatever it&#39;s called). 2. There&#39;s probably a better way to skin the cat.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1125673">
				<div id="div-comment-1125673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140521-00/?p=943#comment-1125673">
			May 23, 2014 at 7:46 am</a>		</div>

		<p>@foo: Explorer and most other shell replacements apply SPI_SETMINIMIZEDMETRICS with ARW_HIDE (&quot;Hide minimized windows by moving them off the visible area of the screen&quot;) which is probably why you have to kill explorer to get back to the progman minimized style.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125703">
				<div id="div-comment-1125703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140521-00/?p=943#comment-1125703">
			May 23, 2014 at 8:09 am</a>		</div>

		<p>&#8230;or I want to copy the text to the clipboard for further use. &nbsp;Either way, having the edit control select the contents on focus has been highly useful for me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1125793">
				<div id="div-comment-1125793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140521-00/?p=943#comment-1125793">
			May 26, 2014 at 3:12 am</a>		</div>

		<p>The difference between your use-case and that of alegr1 is: You are talking about focus change within the same app, or the same dialog. alegr1 is talking about switching between different apps. An app switch in itself should not alter the input or dialog state on one of the apps.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-chris-j-leonard odd alt thread-odd thread-alt depth-1" id="comment-1126113">
				<div id="div-comment-1126113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Veltas' rel='external nofollow' class='url'>Veltas</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140521-00/?p=943#comment-1126113">
			May 27, 2014 at 2:55 am</a>		</div>

		<p>Sorry, how exactly do you put focus on a minimized window? Or rather, when would the user get to this situation?, I suppose is a better question.</p>
<p>No wonder &quot;it is not well-known&quot;!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1126133">
				<div id="div-comment-1126133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140521-00/?p=943#comment-1126133">
			May 27, 2014 at 3:54 am</a>		</div>

		<p>@foo Not wanting to kill explorer.exe I searched for another way to create a minimised window but so far I&#39;ve only been able to achieve this on one application running on Windows 95, which just beeps if I hit space on a minimised window.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-themann odd alt thread-odd thread-alt depth-1" id="comment-1126143">
				<div id="div-comment-1126143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zhila' rel='external nofollow' class='url'>Zhila</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140521-00/?p=943#comment-1126143">
			May 27, 2014 at 5:24 am</a>		</div>

		<p>One way to set focus on a mimimized window is to use the Alt+Esc and Alt+Shift+Esc keys. &nbsp;I remember finding out about this as a way to switch from a full screen application back in the days of Windows 95 and Windows 98. &nbsp;The keyboard I was using back then didn&#39;t have the Windows key, but I knew about Ctrl+Esc. &nbsp;However, one time I accidentally pressed Alt+Esc instead, and noticed that the taskbar came up front without the start menu displaying (which is what I wanted), so I became accustomed to Alt+Esc, and favored it more than Alt+Tab. &nbsp;There was also an entry on this blog some time ago on exactly what the combination does, and, because it&#39;s much lesser known than the Alt+Tab combination, most utility apps which intercept the Alt+Tab don&#39;t intercept the Alt+Esc. &nbsp;Alt+Esc takes the current active window, puts it on the bottom of the window stack and at the same time takes the second window on the stack and makes it active. &nbsp;Alt+Shift+Esc does the exact opposite. &nbsp;The only effect this keyboard shortcut has is modifying the window stack as well as making sure the window on top of the stack is active (though it may possibly be a job of the window manager to do the latter, I&#39;m not sure). &nbsp;In most cases, the stack order has all minimized windows on bottom, and all not minimized windows on top, but Alt+Esc can change this order to have minimized windows on top, and thus active. &nbsp;This should allow a simple way to have a minimized window be active without having to kill explorer or attempt to start minimized or anything like that. &nbsp;In fact, I just tested this with Internet Explorer 11 on Windows 7, and I in fact did see the system menu open when pressing space. &nbsp;In fact, I think I may have seen this happen once before and I had wondered how and why this happens, and now I know.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

