<html>
<head>
<title>How is it that WriteProcessMemory succeeds in writing to read-only memory?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How is it that WriteProcessMemory succeeds in writing to read-only memory?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 6, 2018 / year-entry #276</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20181206-00/?p=100415</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Because it tries really hard.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
When you call <code>Write&shy;Process&shy;Memory</code> and tell
it to write to memory that is read-only,
the <code>Write&shy;Process&shy;Memory</code> succeeds.
How can that be?
</p>
<p>
Because
<code>Write&shy;Process&shy;Memory</code> tries really hard to please you.
</p>
<p>
As I noted some time ago,
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20120808-00/?p=6913">
the primary audience for
functions like
<code>Create&shy;Remote&shy;Thread</code>
and
<code>Write&shy;Process&shy;Memory</code>
is debuggers</a>.
And when debuggers try to patch memory,
it's often for things like
patching in a breakpoint instruction
or doing some
<a HREF="https://docs.microsoft.com/en-us/visualstudio/debugger/edit-and-continue?view=vs-2015">
edit-and-continue</a>
magic.
So the
<code>Write&shy;Process&shy;Memory</code> tries really hard to
get those bytes written.
If the page is read-only,
<code>Write&shy;Process&shy;Memory</code> temporarily changes
the permission to read-write, updates the memory,
and then restores the original permission.
</p>
<p>
"No need to thank me, just trying to help."
</p>
<p>
There is a race condition
if the target process happens to be manipulating the
page protection at the same time that
<code>Write&shy;Process&shy;Memory</code> is.
But that's okay, because the intended audience is debuggers,
and debuggers will freeze the target process before
trying to edit its memory.
</p>
<p>
There is no security hole here, because the
way the
<code>Write&shy;Process&shy;Memory</code> function
changes the page protection is basically
<code>Virtual&shy;Protect&shy;Ex</code>,
so it will succeed only if you already could have
modified the protections yourself anyway.
If you didn't have permission to change the protections,
then
<code>Write&shy;Process&shy;Memory</code>'s
attempt to change the protections would fail too.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-aadsso-1live-com0003bffd09811eab even thread-even depth-1" id="comment-1372755">
				<div id="div-comment-1372755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Paul_Topping2' rel='external nofollow' class='url'>Paul_Topping2</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181206-00/?p=100415#comment-1372755">
			December 6, 2018 at 9:38 am</a>		</div>

		<p>Still seems like it should require an option on WriteProcessMemory, or a process state flag, to have it successfully modify read-only memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-richardvoigt odd alt thread-odd thread-alt depth-1 parent" id="comment-1372815">
				<div id="div-comment-1372815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Ben+Voigt' rel='external nofollow' class='url'>Ben Voigt</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181206-00/?p=100415#comment-1372815">
			December 6, 2018 at 3:01 pm</a>		</div>

		<p>This is unexpected.  Not the part about being able to write to ordinarily read-only memory; that I would expect.  The part about the race condition.</p>
<p>I would have expected it to create a new page table entry for the same physical range, and full access through the new mapping.</p>
<p>Also, if the debugger updates the access on the existing PTE, performs the access, and reverts the access, then the race condition is far more severe than &#8220;if the target process happens to be manipulating the page protection at the same time&#8221;.  If the target process tries to write its own memory within the same page, at the same time, then the write will succeed improperly (and the access violation that should have occurred, won&#8217;t).  That possibility to me indicates that a separate view of the same page is needed.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1372825">
				<div id="div-comment-1372825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181206-00/?p=100415#comment-1372825">
			December 6, 2018 at 4:13 pm</a>		</div>

		<p>The theory is that the debugger shouldn&#8217;t be trying to patch a process while it is running. The debugger should suspend all threads first, do the patching, and then resume execution. Otherwise, the running threads will see torn state, because <a href="https://blogs.msdn.microsoft.com/oldnewthing/20140515-00/?p=983">WriteProcessMemory is not atomic</a>.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command odd alt thread-even depth-1" id="comment-1372915">
				<div id="div-comment-1372915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181206-00/?p=100415#comment-1372915">
			December 8, 2018 at 12:19 am</a>		</div>

		<p>I stopped asking this kind of questions the very first day I updated my computer&#8217;s so-called &#8220;ROM BIOS&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

