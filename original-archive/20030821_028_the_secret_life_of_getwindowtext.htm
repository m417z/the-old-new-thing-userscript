<html>
<head>
<title>The secret life of GetWindowText</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The secret life of GetWindowText</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 21, 2003 / year-entry #29</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20030821-00/?p=42833</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">GetWindowText() is more complicated than you think. The documentation tries to explain its complexity with small words, which is great if you don't understand long words, but it also means that you're not getting the full story. Here's an attempt to give the full story. How windows manage their text There are two ways window...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
        GetWindowText() is more complicated than you think. The documentation tries to explain
        its complexity with small words, which is great if you don't understand long words,
        but it also means that you're not getting the full story. 
    </p>
<p>
        Here's an attempt to give the full story. 
    </p>
<h2>How windows manage their text 
    </h2>
<p>
        There are two ways window classes can manage their text. They can either do it manually
        or they can let the system do it. The default is to let the system do it. 
    </p>
<p>
        If a window class lets the system manage its text, the system will do the following: 
    </p>
<ul>
<li>
            Default handling of the WM_NCCREATE message takes the lpWindowName parameter passed
            to CreateWindow/Ex and saves it in a "special place". 
        </li>
<li>
            Default handling of the WM_GETTEXT message retrieves the string from that "special
            place". 
        </li>
<li>
            Default handling of the WM_SETTEXT message copies the string to that "special place". 
        </li>
</ul>
<p>
        On the other hand, if a window class manages its window text manually, the system
        will not do any special handling, and it is the window class's responsibility to respond
        to the WM_GETTEXT/WM_SETTEXT messages and return/save the strings explicitly. 
    </p>
<p>
        Frame windows typically let the system manage their window text. Custom controls typically
        manage their window text manually. 
    </p>
<h2>GetWindowText 
    </h2>
<p>
        GetWindowText has a problem: Window text needs to be readily available without hanging.
        FindWindow() needs to get window text in order to find a window. Task-switching applications
        need to get window text so they can display the window title in the switcher window.
        It should not be possible for a hung application to clog up other applications. This
        is particularly true of the task switcher scenario. 
    </p>
<p>
        This argues <strong>against</strong> sending WM_GETTEXT messages, because the target
        window of the WM_GETTEXT might be hung. Instead, GetWindowText should use the "special
        place" since that cannot be affected by hung applications. 
    </p>
<p>
        On the other hand, GetWindowText is used to retrieve text from controls on a dialog,
        and those controls frequently employ custom text management. This argues <strong>for</strong> sending
        WM_GETTEXT messages, because that is the only way to retrieve custom-managed text. 
    </p>
<p>
        So GetWindowText strikes a compromise. 
    </p>
<ul>
<li>
            If you are trying to GetWindowText() from a window in your own process, then GetWindowText()
            will send the WM_GETTEXT message. 
        </li>
<li>
            If you are trying to GetWindowText() from a window in another process, then GetWindowText()
            will use the string from the "special place" and not send a message. 
        </li>
</ul>
<p>
        According to the first rule, if you are trying to get text from a window in your own
        process, and the window is hung, then GetWindowText() will also hang. But since the
        window belongs to your process, it's your own fault and you deserve to lose. Sending
        the WM_GETTEXT message ensures that text from windows that do custom text management
        (typically, custom controls) are properly retrieved. 
    </p>
<p>
        According to the second rule, if you are trying to get text from a window in another
        process, then GetWindowText() will not send a message; it will just retrieve the string
        from the "special place". Since the most common reason for getting text from a window
        in another process is to get the title of the frame, and since frame windows typically
        do not do custom window text manipulation, this usually gets the right string. 
    </p>
<p>
        The documentation simplifies this as "GetWindowText() cannot retrieve text from a
        window from another application." 
    </p>
<h2>What if I don't like these rules? 
    </h2>
<p>    If the second rule bothers you because you need to get text from a custom control
    in another process, then you can send the WM_GETTEXT message manually. Since you are
    not using GetWindowText(), you are not subject to its rules. </p>
<p>
        Note, however, that if the target window is hung, your application will also hang
        since SendMessage() will not return until the target window responds. 
    </p>
<p>
        Note also that since WM_GETTEXT is in the system message range (0 to WM_USER-1), you
        do not need to do any parameter marshalling (and in fact, you shouldn't). USER will
        do the marshalling for you. 
    </p>
<h2>Can you give an example where this makes a difference? 
    </h2>
<p>    Consider this control: </p>
<pre>SampleWndProc(...)
{
    case WM_GETTEXT:
        lstrcpyn((LPTSTR)lParam, "Booga!", (int)wParam);
        return lstrlen((LPTSTR)lParam);
    case WM_GETTEXTLENGTH: return 7; // lstrlen("Booga!") + null
    ...
}
</pre>
<p>    Now consider application A that does </p>
<pre>hwnd = CreateWindow("Sample", "Frappy", ...);
</pre>
<p>    Now consider process B that gets the handle to the window created by application A
    (by whatever means). </p>
<pre>TCHAR szBuf[80];
GetWindowText(hwnd, szBuf, 80);
</pre>
<p>    This will return szBuf = "Frappy" because it is getting the window text from the "special
    place". However, </p>
<pre>SendMessage(hwnd, WM_GETTEXT, 80, (LPARAM)szBuf);
</pre>
<p>    will return szBuf = "Booga!" 
</body></p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-122273">
				<div id="div-comment-122273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030821-00/?p=42833#comment-122273">
			August 22, 2003 at 5:12 pm</a>		</div>

		<p>Correction:  The documentation does give the full story.  I should have known, because I was the one who wrote that part of the documentation!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-122283">
				<div id="div-comment-122283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Schroedl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030821-00/?p=42833#comment-122283">
			September 4, 2003 at 1:58 pm</a>		</div>

		<p>Thanks for clearing this up!  I&#8217;ve wondered about it in the past.  Now I can update my little focus-spy utility app to try:</p>
<p>GetWindowText()<br />
if (text length ==  0)<br />
  SendMessageTimeout( &#8230; WM_GETTEXT &#8230; );</p>
<p>&#8230;just did it and it works beautifully.  Thanks for sharing!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-185683">
				<div id="div-comment-185683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030821-00/?p=42833#comment-185683">
			June 21, 2004 at 9:53 am</a>		</div>

		<p>Commenting on this article has been closed.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

