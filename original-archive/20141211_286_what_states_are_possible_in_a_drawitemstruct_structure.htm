<html>
<head>
<title>What states are possible in a DRAWITEMSTRUCT structure?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What states are possible in a DRAWITEMSTRUCT structure?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 11, 2014 / year-entry #287</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>24</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The DRAW­ITEM­STRUCT structure has an item­State member which contains a number of bits describing the state of the item being drawn. How do those states map to the underlying control? Most of the states are rather obvious. For a list box item to be selected, it means that the item is part of the selection....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The <code>DRAW&shy;ITEM&shy;STRUCT</code> structure has an <code>item&shy;State</code> member which contains a number of bits describing the state of the item being drawn. How do those states map to the underlying control?</p>
<p> Most of the states are rather obvious. For a list box item to be <i>selected</i>, it means that the item is part of the selection. But what does <i>selected</i> mean for a button? </p>
<p> Since people like tables, I'll put the answer in a table: </p>
<table border="1" bordercolor="black" cellspacing="0" cellpadding="3" style="border-collapse: collapse; margin-bottom: 1em">
<tr>
<th></th>
<th>Menu</th>
<th>Listbox</th>
<th>Combobox</th>
<th>Button</th>
</tr>
<tr>
<td><code>CtlType</code></td>
<td><code>ODT_MENU</code></td>
<td><code>ODT_LISTBOX</code></td>
<td><code>ODT_COMBOBOX</code></td>
<td><code>ODT_BUTTON</code></td>
</tr>
<tr>
<td><code>itemID</code></td>
<td>menu item ID</td>
<td>item index or &minus;1</td>
<td>item index or &minus;1</td>
<td></td>
</tr>
<tr> </tr>
<td><code>ODS_SELECTED</code></td>
<td>Selected</td>
<td>Selected</td>
<td>Selected</td>
<!-- aka Focus -->     </p>
<td>Pushed</td>
<tr>
<td><code>ODS_GRAYED</code></td>
<td>Grayed</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>ODS_DISABLED</code></td>
<td>Disabled</td>
<td>Disabled</td>
<td>Disabled</td>
<td>Disabled</td>
</tr>
<tr>
<td><code>ODS_CHECKED</code></td>
<td>Checked</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>ODS_FOCUS</code></td>
<td></td>
<td>Focus</td>
<td>Focus</td>
<td>Focus</td>
</tr>
<tr>
<td><code>ODS_DEFAULT</code></td>
<td>Default menu item</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>ODS_HOTLIGHT</code></td>
<td>Hover</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>ODS_INACTIVE</code></td>
<td>Inactive</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>ODS_NOACCEL</code></td>
<td>HideAccel</td>
<td>HideAccel</td>
<td>HideAccel</td>
<td>HideAccel</td>
</tr>
<tr>
<td><code>ODS_NOFOCUSRECT</code></td>
<td></td>
<td>HideFocus</td>
<td>HideFocus</td>
<td>HideFocus</td>
</tr>
<tr>
<td><code>ODS_COMBOBOXEDIT</code></td>
<td></td>
<td></td>
<td>Is edit control</td>
<td></td>
</tr>
</table>
<table border="1" bordercolor="black" cellspacing="0" cellpadding="3" style="border-collapse: collapse">
<tr>
<th></th>
<th>Static</th>
<th>Header</th>
<th>Tab</th>
<th>Listview</th>
<th>Status</th>
</tr>
<tr>
<td><code>CtlType</code></td>
<td><code>ODT_STATIC</code></td>
<td><code>ODT_HEADER</code></td>
<td><code>ODT_TAB</code></td>
<td><code>ODT_LISTVIEW</code></td>
<td></td>
</tr>
<tr>
<td><code>itemID</code></td>
<td></td>
<td>item index</td>
<td>item index</td>
<td>item index</td>
<td>part index</td>
</tr>
<tr>
<td><code>ODS_SELECTED</code></td>
<td></td>
<td>Pushed</td>
<td>Selected</td>
<td>Selected</td>
<td></td>
</tr>
<tr>
<td><code>ODS_GRAYED</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>ODS_DISABLED</code></td>
<td><font color="blue">Oops</font></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>ODS_CHECKED</code></td>
<td></td>
<td></td>
<td></td>
<td>AutoChecked</td>
<td></td>
</tr>
<tr>
<td><code>ODS_FOCUS</code></td>
<td></td>
<td></td>
<td></td>
<td>Focus</td>
<td></td>
</tr>
<tr>
<td><code>ODS_DEFAULT</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>ODS_HOTLIGHT</code></td>
<td></td>
<td></td>
<td></td>
<td>Hover</td>
<td></td>
</tr>
<tr>
<td><code>ODS_INACTIVE</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>ODS_NOACCEL</code></td>
<td>HideAccel</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>ODS_NOFOCUSRECT</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>ODS_COMBOBOXEDIT</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</table>
<p> Okay, now that it's all in a table, how do I read the table? </p>
<p> A box is blank if the corresponding flag is not currently used by the control type. (No guarantees about the future.) For example, as of this writing, button controls do not set an <code>itemID</code>, nor do they ever ask for <code>ODS_<wbr>GRAYED</wbr></code>. </p>
<p> You may have noticed that the box for <code>CtlType</code> is blank for status controls. That's an oops. The status bar control forgot to set the <code>CtlType</code> when it sends the <code>WM_<wbr>DRAW&shy;ITEM</wbr></code> message, so the value is uninitialized garbage. The way to detect a status bar control is to check the window handle. (This works in general. You can always detect a control by checking the window handle.) </p>
<p> For list boxes and combo boxes, the <code>itemID</code> can have the special value <code>-1</code> to mean "I am drawing a list box/combo box where no item is selected." For list boxes, this happens when the list box is empty. For combo boxes, this happens when the user types text into the edit box that does not match any of the items in the list portion of the combo box. </p>
<p> Most of the other box entries are self-explanatory. For the most part, the flag name matches the conditions under which the corresponding flag is set. For example, the <code>ODS_<wbr>FOCUS</wbr></code> flag is set when the list box item being drawn is the selected item. </p>
<p> Note that the <code>ODS_<wbr>SELECTED</wbr></code> flag is used for button and header controls to indicate that the control should be drawn in the pushed state. For example, the user may have put focus on a button control and pressed the space bar and not yet released it, or the application may have manually set the <code>BST_<wbr>PUSHED</wbr></code> state. Header controls can get into a <i>pushed</i> state if you enable the <code>HDS_<wbr>BUTTONS</wbr></code> style. </p>
<p> List view controls set the <code>ODS_<wbr>CHECKED</wbr></code> flag if a check box should be drawn over the item. This happens if the <code>LVS_<wbr>EX_<wbr>AUTO&shy;CHECK&shy;SELECT</wbr></wbr></code> extended style is specified and the item is selected. (Normally, the check box is drawn to the side as a state image.) </p>
<p> The <code>ODS_COMBO&shy;BOX&shy;EDIT</code> flag is used only by combo box controls. It is set if the item being drawn is the edit portion of a combo box control. If not set, then the item being drawn is in the list box portion of the combo box control. </p>
<p> Finally, there is a box marked <font color="blue">Oops</font>. </p>
<p> The static control is supposed to set <code>ODS_<wbr>DISABLED</wbr></code> if the static control is disabled. And that's what happens if you are using the classic static control. However, there is a typo in the the fancy themed static control, and it sets the <code>ODS_<wbr>DISBALED</wbr></code> flag incorrectly. If you are owner-drawing a themed static control, and you want to draw differently depending on whether the control is disabled, then you should ignore the <code>ODS_<wbr>DISABLED</wbr></code> flag and instead draw the disabled state based on the result of calling <code>Is&shy;Window&shy;Enabled</code> function. </p>
<p> The bug in the themed static control cannot be fixed for compatibility reasons. I can pretty much guarantee that there is some application which doesn't draw correctly if the <code>ODS_<wbr>DISABLED</wbr></code> flag is not set. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1166213">
				<div id="div-comment-1166213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166213">
			December 11, 2014 at 7:27 am</a>		</div>

		<p>There are a couple of typos in the sentence in which you talk about a typo. Hahaha.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1166233">
				<div id="div-comment-1166233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166233">
			December 11, 2014 at 8:10 am</a>		</div>

		<p>@Paul:</p>
<p>Thatnks for noticing! Have a cookie.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1166253">
				<div id="div-comment-1166253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nikos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166253">
			December 11, 2014 at 10:00 am</a>		</div>

		<p>shouldn&#39;t the themed controls take advantage of (use) the ODS_HOTLIGHT flag so people don&#39;t have to mess with trackmouseevent manually? Or does this break some other great piece of software in your company? :)</p>
<div class="post">[<em>They do use hotlighting, but only in places where the design team wanted hotlighting. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1166263">
				<div id="div-comment-1166263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166263">
			December 11, 2014 at 11:18 am</a>		</div>

		<p>What is the difference between disabled and grayed?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1166273">
				<div id="div-comment-1166273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166273">
			December 11, 2014 at 11:54 am</a>		</div>

		<p>@Random832: In non-themed menus, MF_DISABLED will display the menu item text in the normal text style/color but the item cannot be clicked while MF_GRAYED will also draw the text in disabled style/color. This only applies to the older menu APIs, the newer APIs that use the MENUITEMINFO struct just have #define MFS_DISABLED MFS_GRAYED</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1166283">
				<div id="div-comment-1166283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166283">
			December 11, 2014 at 12:59 pm</a>		</div>

		<p>Is there a use case for a menu item that looks like it can be clicked, but cannot be?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1166313">
				<div id="div-comment-1166313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Beldantazar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166313">
			December 11, 2014 at 3:54 pm</a>		</div>

		<p>@Gabe Clearly there wasn&#39;t much of one. &nbsp;Otherwise they&#39;d have kept it in the later versions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1166323">
				<div id="div-comment-1166323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166323">
			December 11, 2014 at 4:59 pm</a>		</div>

		<p>I notice that the Status control &#39;Oops&#39; is represented by a blank cell and talk about uninitialised garbage, but the Static control &#39;Oops&#39; cell is filled in and coloured. This leads me to guess that the static Oops is deterministic and that people have worked around it in code, hence the fact that it cannot be changed. And now if you&#39;ll excuse me, I have to put my tinfoil hat back on.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fjeldse even thread-even depth-1" id="comment-1166333">
				<div id="div-comment-1166333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Erik+F' rel='external nofollow' class='url'>Erik F</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166333">
			December 11, 2014 at 5:17 pm</a>		</div>

		<p>@Gabe: The only thing that came immediately to mind was popup menus, where you might want a &quot;title&quot;, but even then the greyed-out version would probably be preferable. It&#39;s an odd use case, indeed. Fortunately for us, the greyed state implies disabled; imagine the fun if greyed and disabled were orthogonal!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1166343">
				<div id="div-comment-1166343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166343">
			December 12, 2014 at 12:26 am</a>		</div>

		<p>&quot;I can pretty much guarantee that there is some application which doesn&#39;t draw correctly if the ODS_DISABLED flag is not set.&quot;</p>
<p>Equally, you can surely pretty much guarantee that there is some application which doesn&#39;t draw correctly because they followed the original spec. Is it just policy that bugs in released code should never be fixed &quot;for compatibility&quot;, or has someone actually researched which apps are affected and decided that one group is more deserving than the other?</p>
<div class="post">[<em>The control shows up disabled, and they obviously knew it because it <span style="text-decoration:underline;">always</span> shows up disabled, and since they shipped it that way, then it stands to reason that showing up disabled is what they intended. (Because if it isn&#39;t, they would have fixed it.) We have done similar things in the past, &quot;fixing&quot; a bug, and getting bug reports from customers saying, &quot;The <span style="text-decoration:underline;">Name</span> label used to be gray, and now it&#39;s black.&quot; Customers don&#39;t know what the intent of the app was. They know what they see. They see gray. If it is no longer gray, then it&#39;s a bug. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1166353">
				<div id="div-comment-1166353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166353">
			December 12, 2014 at 2:57 am</a>		</div>

		<p>Expanding on Ken&#39;s point, I&#39;d have thought that the ODS_DISABLED issue would be &quot;better&quot; addressed by fixing the bug for cleanliness and the 99% case, and creating shims for the 1% of apps which rely on the &quot;incorrect&quot; behaviour.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1166373">
				<div id="div-comment-1166373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166373">
			December 12, 2014 at 6:03 am</a>		</div>

		<p>Quote: &quot;You can always detect a control by checking the window handle&quot;. No you can&#39;t. As with the increase of cross-platform applications windowless controls are becoming more and more the norm. The method of checking and getting information of a control through its handle is so 2009. Welcome to the new era where even Micro$oft writes Android applications and Android can run on bare metal of Intel PC&#39;s.</p>
<div class="post">[<em>We&#39;re talking about the <code>DRAW&shy;ITEM&shy;STRUCT</code> structure as generated by the controls listed in the above table. Those controls will always fill in the <code>hwndItem</code> member. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1166383">
				<div id="div-comment-1166383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166383">
			December 12, 2014 at 7:06 am</a>		</div>

		<p>Raymond, FYI &#8211; The table doesn&#39;t fit (and doesn&#39;t wrap) when viewed at normal (i.e. 100%) zoom on a 1280-pixel-wide monitor. The last column visible is for the Tab control. Not sure if you can use a smaller font for wide tables in future articles.</p>
<div class="post">[<em>Yeah, sorry about that. You need 1600 pixels. Let me see what I can do. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1166393">
				<div id="div-comment-1166393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166393">
			December 12, 2014 at 7:10 am</a>		</div>

		<p>@Danny &#8212; true more and more frameworks don&#39;t use actual HWNDs for their controls (for various good reasons most of them revolving around child window translucency which wasn&#39;t properly possible until Windows 8).</p>
<p>However controls in those frameworks are probably not receiving custom/owner draw messages with DRAWITEMSTRUCTs either.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1166363">
				<div id="div-comment-1166363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166363">
			December 12, 2014 at 3:01 am</a>		</div>

		<p>&gt; there is some application which doesn&#39;t draw correctly because they followed the original spec</p>
<p>But that application will *never* have worked correctly. &nbsp;If they haven&#39;t noticed that bug yet, then they clearly think it&#39;s clearly not worth fixing.</p>
<p>In contrast, there may be well-tested deployed apps that depend on the existing behaviour.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1166433">
				<div id="div-comment-1166433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">T. West</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166433">
			December 12, 2014 at 11:01 am</a>		</div>

		<p>Danny, is the $ in Microsoft necessary? &nbsp;It tends to drop the perceived value of the rest of the post.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1166453">
				<div id="div-comment-1166453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas Rejbrand</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166453">
			December 12, 2014 at 3:42 pm</a>		</div>

		<p>@Brian: I have always fixed such issues by removing overflow: hidden from #ctl00_content_ctl00_content.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1166443">
				<div id="div-comment-1166443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166443">
			December 12, 2014 at 11:46 am</a>		</div>

		<p>If it was the customer&#39;s intention to *always* display as disabled, they wouldn&#39;t check the flag at all. I find it hard to contrive a case where an app bothers to check the flag and yet depends on that flag being wrong.</p>
<p>On the other hand, I&#39;ve certainly released code which was then broken by a bug in a later version of Windows which wasn&#39;t fixed because (we were told) someone might be depending on the broken behaviour. You (MS) are probably on a hiding to nothing either way, but I&#39;m curious to know how much information the decision makers collect on &quot;who&#39;s broken now, and who would be broken by a fix?&quot;. That would seem to be a very hard question to answer, which makes me wonder if in fact there is (by default) a tendency to leave bugs unfixed.</p>
<div class="post">[<em>See previous example. The app checks the flag and draws as if disabled. It turns out that they wanted gray text, so this works out great for them. If the bug is fixed, then they will not draw as if disabled any more, and people would report it as a bug. This actually happens. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1166703">
				<div id="div-comment-1166703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166703">
			December 16, 2014 at 2:51 am</a>		</div>

		<p>&quot;I can pretty much guarantee that there is some application which doesn&#39;t draw correctly if the ODS_DISABLED flag is not set.&quot;</p>
<p>I thought Microsoft invented compatibility shims specifically for solving this kind of problem&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1166733">
				<div id="div-comment-1166733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166733">
			December 16, 2014 at 4:18 am</a>		</div>

		<p>But who will test each and every program released years ago, if some compatibility shim would fit?</p>
<p>In the first place, some developer (not the user who suffers from the change in behavior) needs to be tasked/paid on re-testing older software. And second, this developer need to know about all existing compatibility shims *and* the special detail each of them is supposed to fix. Third, this shim must be deployed to all the unknown users of the now-buggy software (I believe it must somehow registered in a shim database at the local PC?).</p>
<p>I don&#39;t see how shims can be useful for most of the Windows programs in use.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1167143">
				<div id="div-comment-1167143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1167143">
			December 17, 2014 at 11:32 am</a>		</div>

		<p>&quot;I thought Microsoft invented compatibility shims specifically for solving this kind of problem&#8230;&quot;</p>
<p>Microsoft can only create a shim if they can get the software. The vast majority of software isn&#39;t sold at retail in a shrink wrapped box.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1166983">
				<div id="div-comment-1166983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1166983">
			December 17, 2014 at 6:10 am</a>		</div>

		<p>&gt;&gt; there is some application which doesn&#39;t draw correctly because they followed the original spec</p>
<p>&gt; But that application will *never* have worked correctly. &nbsp;If they haven&#39;t noticed that bug yet, then they </p>
<p>&gt; clearly think it&#39;s clearly not worth fixing.</p>
<p>Not fixing the bug means future developers will waste their time trying to figure out why their code, that follows the spec, is not working correctly.</p>
<p>A more balanced solution would be to at least fix the bug for applications that manifest themselves as working on the version of Windows that has the bug fix.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1167293">
				<div id="div-comment-1167293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1167293">
			December 18, 2014 at 12:55 am</a>		</div>

		<p>@Tim: Are you sure that applies to their own DLL&#39;s bug-compatibility? All they&#39;d need to apply the &quot;COMCTL32: use bug-compatible owner-drawn static behavior&quot; shim would be the identity of softwares that require it (name/hash of the executable) and this should be obtainable with each support ticket for &quot;my text is no longer displaying correctly&quot;&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1167803">
				<div id="div-comment-1167803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141211-00/?p=43423#comment-1167803">
			December 21, 2014 at 11:38 am</a>		</div>

		<p>I guess that, when considering whether a bug is really a bug to be fixed, some Offices are more relevant than others.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

