<html>
<head>
<title>The Alpha AXP, part 3: Integer constants</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The Alpha AXP, part 3: Integer constants</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 9, 2017 / year-entry #180</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170809-00/?p=96785</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Building them up a piece at a time.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The Alpha AXP does not have a "load immediate 32-bit integer"
instruction.
If you need to load an immediate 32-bit integer,
you need to use some tricks.
</p>
<p>
We saw last time
that
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170808-00/?p=96775">
loading 8-bit constants can be done
by using the <code>ADD</code> and <code>SUB</code> instructions</a>.
But there are also instructions that can be repurposed to
generate signed 16-bit constants.
</p>
<p>
Effective address instructions are basically arithmetic
operations disguised as memory operations.
(Yes, I know we haven't learned about memory operations yet.)
</p>
<pre>
    LDA     Ra, disp16(Rb)  ; Ra = Rb + (int16_t)disp16
    LDAH    Ra, disp16(Rb)  ; Ra = Rb + (int16_t)disp16 * 65536
</pre>
<p>
The first instruction applies a signed 16-bit displacement
to a value in a register and puts the result in the <var>Ra</var>
register.
</p>
<p>
The second one is a little trickier.
It takes the signed 16-bit displacement and shifts it
left 16 positions before adding it to the <var>Rb</var> register.
</p>
<p>
Both of these operations operate on the full 64-bit register,
so they can produce non-canonical results.
</p>
<p>
The basic idea behind loading a 32-bit constant
(in canonical form)
is as follows:
</p>
<ol>
<li>Use the <code>LDAH</code> 
    relative to the <var>zero</var> register
    to load the high-order 48 bits of the
    32-bit constant.</p>
<li>Use the <code>LDA</code> instruction
    relative to the destination register
    of the previous instruction
    to load the low-order 16 bits.</li>
</li>
</ol>
<p>
However, the fact that the 16-bit values are
sign-extended makes things a bit more complicated.
</p>
<p>
Let's say that the 32-bit constant we want to load into
the <var>t0</var> register is
<code>0xXXXXYYYY</code>.
</p>
<p>
Let <code>xxxx</code> be the result you get
when you treat <code>XXXX</code> as a signed 16-bit value.
Similarly, <code>yyyy</code> and <code>YYYY</code>.
</p>
<p>
Let <code>S</code> be the sign bit of <code>XXXX</code>.
The canonical form of the constant we want to load is
<code>0xSSSSSSSS`XXXXYYYY</code>.
</p>
<p>
If <code>yyyy</code> is nonnegative, then
we can just load up the two halves of our constant
and they won't interact with each other.
</p>
<pre>
    LDAH    t0, XXXX(zero)      ; t0 = 0xSSSSSSSS`XXXX0000
    LDA     t0, YYYY(t0)        ; t0 = 0xSSSSSSSS`XXXXYYYY
</pre>
<p>
(Throughout,
I will leave out the obvious simplifications if
<code>XXXX</code> or <code>YYYY</code> is zero.)
</p>
<p>
If
<code>yyyy</code> is negative, then the
<code>LDA</code> is going to undershoot by <code>0x10000</code>,
so we compensate by adding one more to <code>xxxx</code>.
</p>
<p>
<pre>
    LDAH    t0, xxxx+1(zero)    ; t0 = 0xSSSSSSSS`XXXX0000 + 0x10000
    LDA     t0, yyyy(t0)        ; t0 = 0xSSSSSSSS`XXXXYYYY
</pre>
<p>
Aha, but this trick doesn't work if <code>xxxx</code> is exactly
<code>0x7FFF</code>,
because <code>0x7FFF</code> + 1 = <code>0x8000</code>,
which has the wrong sign bit.
In that case, we need a final adjustment step to put the
result into canonical form.
</p>
<pre>
    LDAH    t0, -32768(zero)    ; t0 = 0xFFFFFFFF`80000000
    LDA     t0, yyyy(t0)        ; t0 = 0xFFFFFFFF`7FFFYYYY
    ADDL    zero, t0, t0        ; t0 = 0x00000000`7FFFYYYY
</pre>
<p>
Constants that are in the range
<code>0x7FFF8000</code> to
<code>0x7FFFFFFF</code>
suffer from this problem.&sup1;
</p>
<p>
All of this hassle about creating 32-bit constants
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20031008-00/?p=42223">
has consequences for the Windows NT memory manager</a>,
as I discussed a few years ago.
</p>
<p>
Okay, so that's it for loading constants.
Next time, we'll start looking at memory access.
</p>
<p>
<p>
&sup1;
There is a special shortcut for the value <code>0x7FFFFFFF</code>:
</p>
<pre>
    LDA    t0, -1(zero)         ; t0 = 0xFFFFFFFF`FFFFFFFF
    SRL    t0, #33, t0          ; t0 = 0x00000000`7FFFFFFF
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1305836">
				<div id="div-comment-1305836" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170809-00/?p=96785#comment-1305836">
			August 9, 2017 at 8:25 am</a>		</div>

		<p>If it were up to me, the no-man&#8217;s-land 64kb wouldn&#8217;t have existed, but the loader wouldn&#8217;t load any DLLs there unless their base address was high enough to load there. Oh well.</p>
<p>I&#8217;m disappointed the alpha didn&#8217;t have load32 or load64 instructions. Since you&#8217;re going to end up double-sized anyway the easiest way to implement such a thing is provide LODx instructions that load 16 bit chunks (this takes weight off the machinery). But behold they only did it with signed numbers. Oops.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1305846">
				<div id="div-comment-1305846" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170809-00/?p=96785#comment-1305846">
			August 9, 2017 at 8:40 am</a>		</div>

		<p>Take into account that the Alpha uses fixed-sized 32 bit instructions. You only have 32 bits to encode the opcode and any operands, and having 32 registers means the register number itself spans 5 bits. Fitting a 24 bit immediate constant would be really difficult (assuming you could spare a three bit opcode, of which there are only eight possible). And fitting a 32 bit one is physically impossible (no space left for the register number or the opcode!).</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1305856">
				<div id="div-comment-1305856" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matteo Italia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170809-00/?p=96785#comment-1305856">
			August 9, 2017 at 9:23 am</a>		</div>

		<p>On this topic, ARM is way more fun; most instruction that take an immediate have an implicit &#8220;rotate field&#8221;, so while you have just 8 bits for the immediate value (+4 for rotation), many 32 bit &#8220;interesting&#8221; values can still be expressed in the immediate (think in particular about bit fiddling).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1305866">
				<div id="div-comment-1305866" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matteo Italia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170809-00/?p=96785#comment-1305866">
			August 9, 2017 at 9:26 am</a>		</div>

		<p>Uh, I forgot the link<br />
<a href="https://alisdair.mcdiarmid.org/arm-immediate-value-encoding/" rel="nofollow">https://alisdair.mcdiarmid.org/arm-immediate-value-encoding/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3 parent" id="comment-1305885">
				<div id="div-comment-1305885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170809-00/?p=96785#comment-1305885">
			August 9, 2017 at 9:52 am</a>		</div>

		<p>With my scheme, 2 instructions would suffice to load any 32 bit value, 4 instructions to load any 64 bit value. There&#8217;s plenty of space as the constant is only half the instruction width.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4 parent" id="comment-1305937">
				<div id="div-comment-1305937" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170809-00/?p=96785#comment-1305937">
			August 9, 2017 at 10:25 pm</a>		</div>

		<p>At a cost of consuming 28 bits just for the parameters. (16 bits for the constant, 5 bits for the source register, 5 bits for the destination register, 2 bits to select the position of the 16 bits = 28 bits.) This leaves only 4 bits for the opcode. I think there are more than 16 instructions in the Alpha AXP instruction set.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1305945">
				<div id="div-comment-1305945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Wilson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170809-00/?p=96785#comment-1305945">
			August 10, 2017 at 12:37 am</a>		</div>

		<p>They could have introduced special versions of ldah and lda that dont do the sign extending that are just for loading a 32 bit constant.<br />
That way you can just have ldah t0, XXXX(zero) followed by lda, t0, YYYY(t0) and not need to have to worry about sign extentions.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

