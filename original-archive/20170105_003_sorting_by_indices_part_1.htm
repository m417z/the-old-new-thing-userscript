<html>
<head>
<title>Sorting by indices, part 1</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Sorting by indices, part 1</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 5, 2017 / year-entry #4</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170105-00/?p=95125</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Putting things together.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Okay, now we're going to start using the
<code>apply_permutation</code> function
that we beat to death for first part of this week.
</p>
<p>
Suppose you are sorting a collection of objects
with the property that copying and moving them
is expensive.
(Okay, so in practice, moving is not expensive,
so let's say that the object is not movable at all.)
You want to minimize the number of copies.
</p>
<p>
The typical solution for this is to perform an indirect
sort:
Instead of moving expensive things around,
use an inexpensive thing (like as an integer)
to represent the expensive item, and sort the inexpensive
things.
Once you know where everything ends up, you can move
the expensive things just once.
</p>
<pre>
template&lt;typename Iter, typename Compare&gt;
void sort_minimize_copies(Iter first, Iter last, Compare cmp)
{
 using Diff = std::iterator_traits&lt;Iter1&gt;::difference_type;
 Diff length = last - first;
 std::vector&lt;Diff&gt; indices(length);
 std::iota(indices.begin(), indices.end(), static_cast&lt;Diff&gt;(0));
 std::sort(indices.begin(), indices.end(),
    [&amp;](Diff a, Diff b) { return cmp(first[a], first[b]); });
 apply_permutation(first, last, indices.begin());
}

template&lt;typename Iter&gt;
void sort_minimize_copies(Iter first, Iter last)
{
    return sort_minimize_copies(first, last, std::less&lt;&gt;());
}
</pre>
<p>
We use <code>std::iterator_traits</code> to tell us
what to use to represent indices,
then we create a vector of those indices.
(The difference type is required to be an integral type,
so we didn't have to play any funny games like
<code>first - first</code>
to get the null index.
We could just write <code>0</code>.)
</p>
<p>
We then sort the indices
by using the indices to reference
the original collection.
(We also provide an overload that sorts by
<code>&lt;</code>.)
This performs an indirect sort,
where we are sorting the original collection,
but doing so by mainpulating indices rather
than the actual objects.
</p>
<p>
Once we have the indices we need,
we can use the
<code>apply_permutation</code> function
to rearrange the original items according
to the indices.
</p>
<p>
We'll wrap up next time with another kind of sorting.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1279296">
				<div id="div-comment-1279296" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sebastian Johansson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170105-00/?p=95125#comment-1279296">
			January 5, 2017 at 8:00 am</a>		</div>

		<p>Well, that&#8217;s the first time I&#8217;ve been so quick to a post that the post itself didn&#8217;t exist when it showed up in the list.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1279335">
				<div id="div-comment-1279335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170105-00/?p=95125#comment-1279335">
			January 5, 2017 at 3:03 pm</a>		</div>

		<p>On 64 bit, you may want to consider using uint32_t/int32_t instead of difference_type, which is typically 64 bits (ptrdiff_t). Depends if greater than 4B/2B elements is sane for your application.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude even depth-2" id="comment-1279375">
				<div id="div-comment-1279375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170105-00/?p=95125#comment-1279375">
			January 6, 2017 at 5:55 am</a>		</div>

		<p>The only issue with that is you enter the &#8220;wonderful&#8221; world of narrowing conversions because the result of arithmetic operations on two random access iterators is always <code>difference_type</code>. While 32bit operations are technically faster on intel hardware (and yes use fewer opcode bytes); the difference between them is not significant unless you&#8217;re in a hot loop. Moreover on other platforms using narrowed types may even occur an overhead (Alpha AXP would require sign extending the 32 bit result then operating on it). As such I think the above solution is the best and safest portable solution.</p>
<p>To quote STL: &#8220;Don&#8217;t help the compiler&#8221; in most cases those little &#8216;helps&#8217; can be wrong and even hurt performance or portability.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1279345">
				<div id="div-comment-1279345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170105-00/?p=95125#comment-1279345">
			January 5, 2017 at 11:05 pm</a>		</div>

		<p>@Raymond:<br />
Like ildjarn mentioned yesterday, this line:<br />
<code>using Diff = std::iterator_traits&lt;Iter1&gt;::difference_type;</code><br />
should be:<br />
<code>using Diff = <b>typename</b> std::iterator_traits&lt;Iter&gt;::difference_type;</code><br />
&#8230; because <code>Iter</code> is a template parameter.  Even though cl.exe doesn&#8217;t care about the <code>typename</code> in front, it&#8217;s required by Standard C++ and every other standard-compliant compiler will take issue with it.  If you change your &#8220;Platform Toolset&#8221; to &#8220;Visual Studio 2015 &#8211; Clang with Microsoft CodeGen (v140_clang_c2)&#8221; in Visual Studio 2015, you&#8217;ll immediately see these type of errors as:<br />
<code>error : missing 'typename' prior to dependent type name 'std::iterator_traits&lt;Iter&gt;::difference_type'</code></p>
<p>Also, at the time that I&#8217;m writing this comment, your first template parameter is <code>typename <b>Iter</b></code>, but you are using <code>using Diff = std::iterator_traits&lt;<b>Iter1</b>&gt;::difference_type;</code> in the body &#8230; so just a small typo &#8230; possibly a holdover from your last post.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

