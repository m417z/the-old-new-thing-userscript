<html>
<head>
<title>Why does SHCOLUMNINFO have unusually tight packing?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does SHCOLUMNINFO have unusually tight packing?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 16, 2010 / year-entry #346</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>22</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Alternate title: News flash: Sometimes things happen by mistake rbirkby asks why the SHCOLUMNINFO structure has 1-byte packing. "Was the expectation that there would be so many columns in a details view that the saving would be worthwhile?" Hardly anything that clever or ingenious. It's just the consequence of a mistake. When the SHCOLUMNINFO structure...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Alternate title:
<i>News flash: Sometimes things happen by mistake</i>
</p>
<p>
rbirkby asks
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2007/12/27/6873648.aspx#6880004">
why the <code>SHCOLUMNINFO</code> structure has 1-byte packing</a>.
"Was the expectation that there would be so many columns
in a details view that the saving would be worthwhile?"
</p>
<p>
Hardly anything that clever or ingenious. It's just the consequence of
a mistake.
</p>
<p>
When the <code>SHCOLUMNINFO</code> structure was added to the
header file in the Windows&nbsp;2000 timeframe,
it was added with no specific packing directive.
But it turns out that there <i>was</i> a specific packing directive;
it just wasn't obvious.
Near the top of the <code>shlobj.h</code> header file was the following:
</p>
<pre>
#include &lt;pshpack1.h&gt;   /* Assume byte packing throughout */
</pre>
<p>
(There was of course a matching <code>#include &lt;poppack.h&gt;</code>
at the bottom.)
This set the default packing for the entire header file to byte
packing instead of natural alignment.
</p>
<p>
By the time this mistake was identified, it was too late.
Windows&nbsp;2000 had already shipped, byte packing and all.
And once the code ships,
it's done.
You're stuck with it.
</p>
<p>
Sorry.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-882673">
				<div id="div-comment-882673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-882673">
			December 16, 2010 at 7:24 am</a>		</div>

		<p>Congratulations, this blog post is already Google result #2 for &quot;SHCOLUMNINFO&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-882693">
				<div id="div-comment-882693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-882693">
			December 16, 2010 at 8:06 am</a>		</div>

		<p>Does this have any unwanted consequences then?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-882703">
				<div id="div-comment-882703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-882703">
			December 16, 2010 at 8:38 am</a>		</div>

		<p>@NB</p>
<p>It can lead to members being stored at non naturally aligned offsets. This could lead to lower performance on certain architechtures (not x86) which do not support unaliged access.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-882713">
				<div id="div-comment-882713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-882713">
			December 16, 2010 at 8:45 am</a>		</div>

		<p>@Sunil</p>
<p>Wouldn&#39;t this lead to decreased performance on the x86 and exceptions (crashes) on CPU architectures that do require aligned access? &nbsp;(I would presume that the SHCOLUMNINFO for the embedded Windows platforms would be properly aligned).</p>
<p>Now, you would probably never actually notice the decreased performance on the x86, because I doubt anyone does enough manipulation of the SHCOLUMNINFO to ever notice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-882723">
				<div id="div-comment-882723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-882723">
			December 16, 2010 at 8:48 am</a>		</div>

		<p>SimonRev, For members of a structure declared as packed [rather than, say, pointers that just happen to have an odd numbered value that they shouldn&#39;t], the compiler will generate the extra code needed to unpack the number (i.e. getting two adjacent words and shifting bits of them together, or maybe just accessing the four bytes separately)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-882733">
				<div id="div-comment-882733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henning Makholm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-882733">
			December 16, 2010 at 8:48 am</a>		</div>

		<p>Sunil, it bombs performance on x86 too. The processor makes sure (for legacy instructions at least; don&#39;t try with SIMD ones) that unaligned accesses give you the right result, but it takes its own sweet time doing it (usually involving costly traps to microcode).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-882763">
				<div id="div-comment-882763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-882763">
			December 16, 2010 at 10:17 am</a>		</div>

		<p>Actually, unaligned access is only slower when crossing cache-line boundaries, and then only if you would not have accessed the data on each side of the boundary. If you are processing data and accessing all the elements consecutively, then the performance hit will be undetectable and you could even have a gain, thanks to the higher-density packing, when you have a lot of consecutive elements.</p>
<p>There is no &quot;drop to microcode trap&quot; due to misaligned data access on x86.</p>
<p>Tests: <a rel="nofollow" target="_new" href="http://www.alexonlinux.com/aligned-vs-unaligned-memory-access" rel="nofollow">http://www.alexonlinux.com/aligned-vs-unaligned-memory-access</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-882783">
				<div id="div-comment-882783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-882783">
			December 16, 2010 at 10:23 am</a>		</div>

		<p>@Henning Makholm</p>
<p>I have never actually measured but my understanding was that on x86 unaligned accesses (except for _m128 and it&#39;s ilk) did not perform badly enough to worry. I have ready this in several places mostly recent in a description of IA-32el the dynamic translator of IA-32 to Itanium code. On of the problems it had to handle was the frequent use of unaligned access in IA-32 code and it says &quot;the penalty for unaligned access on the IA-32 architecture is ver low.&quot; Similarly, I know vc does not have an __unaligned ptr type for x86 (unlike IA-64) as it&#39;s not worth it; the UNALIGNED macro is defined as nothing on x86. &nbsp;</p>
<p>Also unaligned SIMD performance is much better on Nehalem. Or so Intel claims.</p>
<p>@SimonRev</p>
<p>If the compiler knows about unaligned access (as it would if you access the members of this structure using . Or -&gt; it can generate fixups.) This is why __unaligned works. In the general case, when the compiler does not know (i.e. If you pass a integer ptr to a separately compiled function) you get exceptions and fireworks etc. Unless the OS emulate unaligned access for you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-882813">
				<div id="div-comment-882813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-882813">
			December 16, 2010 at 12:17 pm</a>		</div>

		<p>But what structure(s) in shlobj.h did require the packing directive that was previously there? Was there a structure that was used so much that packing made a noticeable change in memory usage?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-882833">
				<div id="div-comment-882833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-882833">
			December 16, 2010 at 2:58 pm</a>		</div>

		<p>Given that packing matters so little on the processor platforms on which Windows is most popular, and that the number of these structures allocated will probably be relatively small, I think even calling it a mistake is saying too much. This is a ‘don&#39;t care’.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-882773">
				<div id="div-comment-882773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-882773">
			December 16, 2010 at 10:18 am</a>		</div>

		<p>@Henning:</p>
<p>I&#39;m not sure that&#39;s true. I think I&#39;ve heard somewhere recently that unaligned accesses on x86 actually aren&#39;t too bad. I wrote a little program to at least provide a tiny bit of evidence; after presenting it, I discuss possible failings. I&#39;m on Linux at the moment so this would have to be modified a bit for Windows (e.g. the method of exiting):</p>
<p> &nbsp;_start:</p>
<p> &nbsp; &nbsp;mov rdi, 2000000000 &nbsp;; rdi = 2 billion</p>
<p> &nbsp; &nbsp;mov rsi, rsp &nbsp; &nbsp; &nbsp; &nbsp; ; rsi = rsp</p>
<p> &nbsp; &nbsp;add rsi, 2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; rsi -=2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; OPTIONAL</p>
<p> &nbsp; &nbsp;jmp bottom</p>
<p> &nbsp;top:</p>
<p> &nbsp; &nbsp;mov rbx, [rsi] &nbsp; &nbsp; &nbsp; ; rbx = *rsi</p>
<p> &nbsp; &nbsp;sub rdi, 1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; rdi -= 1</p>
<p> &nbsp;bottom:</p>
<p> &nbsp; &nbsp;cmp rdi, 0</p>
<p> &nbsp; &nbsp;jg top &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; if rdi&gt;0, goto top</p>
<p> &nbsp; &nbsp;mov rax, 1</p>
<p> &nbsp; &nbsp;int 0x80</p>
<p>I compiled it with &#39;~/Downloads/nasm-2.09.04/nasm -f elf64 hello.s&#39; and linked with &#39;ld -s -o hello-unaligned hello.o&#39;. Then I removed the line labeled &quot;OPTIONAL&quot; and rebuilt, naming it &#39;hello-aligned&#39;. I then tested with &#39;time hello-aligned; time hello-unaligned&#39;. I ran it 6 times (there&#39;s no real method to that). This is running on a Core 2 Quad Q9400 (2.66 gHz).</p>
<p>The aligned version completed in 0.753 sec (&quot;total&quot; time) in five out of the six trials; the sixth took 0.754 sec. The unaligned version completed in 0.753 sec in four out of the six trials, and in 0.754 sec in the remaining two trials.</p>
<p>So the unaligned access to [rsp-2] in hello-unaligned vs the aligned access to [rsp] in hello-aligned doesn&#39;t seem to be hurting this particular test case.</p>
<p>The are a couple ways in which this test may not be so great. First, obviously the access is to the same memory location in each iteration of the loop. Thus the cache line will be warmed immediately and then there will be no misses. It&#39;s quite possible that an unaligned access that has to go to either L2 or main memory will incur an unaligned penalty. Second, the results when I was running a 32-bit version of that program (just replace &#39;r&#39; with &#39;e&#39; in all the register names) were a bit different. While most runs were the same, every so often the unaligned version would take far longer.</p>
<p>Some quick searching indicates that there probably *isn&#39;t* a performance penalty to unaligned accesses on x86 unless the accessed region spans a cache line. It&#39;s possible that this is what was happening in the long case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-882863">
				<div id="div-comment-882863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-882863">
			December 16, 2010 at 7:55 pm</a>		</div>

		<p>If it&#39;s a ‘don&#39;t care’, it&#39;s also a ‘don&#39;t use’.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-882873">
				<div id="div-comment-882873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-882873">
			December 16, 2010 at 10:06 pm</a>		</div>

		<p>Am I correct in determining that the member missing padding is VARTYPE vt, which is 2 bytes, thus shifting the following 3 fields (DWORD, UINT, DWORD) out of alignment? After those are a couple Unicode strings which should also have 2-byte alignment, so they shouldn&#39;t be affected by it.</p>
<p>So to me it looks like the padding mistake saves 2 bytes in a 450-byte data structure and causes misaligned accesses to 4-byte 3 members. I would have to agree with Anonymous that this is a ‘don&#39;t care’.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-882883">
				<div id="div-comment-882883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-882883">
			December 17, 2010 at 2:58 am</a>		</div>

		<p>@Nawak ITEMIDLIST used to live in ShlObj.h but it now lives in ShTypes.h; it needs byte packing because it&#39;s a concatenation of SHORT lengths and variable-length BYTE arrays.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zamescurran even thread-even depth-1" id="comment-882893">
				<div id="div-comment-882893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/James+Curran' rel='external nofollow' class='url'>James Curran</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-882893">
			December 17, 2010 at 7:08 am</a>		</div>

		<p>Does this mean your post backlog is now up to just 10 days shy of 3 years? &nbsp;</p>
<div class="post">[<i>&quot;Objection, your honor. Assumes facts not in evidence.&quot; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-883153">
				<div id="div-comment-883153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-883153">
			December 18, 2010 at 9:24 pm</a>		</div>

		<blockquote><p>
  once the code ships, it&#39;s done. You&#39;re stuck with it.
</p></blockquote>
<p>Unless it&#39;s open source code, in which case you can change it and break backwards compatibility, because hey, it&#39;s open source. &nbsp;And then later you can change your mind again and change something else. &nbsp;And then three releases down you can change it again. &nbsp;But hey, it&#39;s still open source.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-883173">
				<div id="div-comment-883173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smartass</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-883173">
			December 19, 2010 at 4:45 pm</a>		</div>

		<p>Apology accepted.</p>
<p>Still waiting for the Windows ME apology.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-883183">
				<div id="div-comment-883183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smaug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-883183">
			December 19, 2010 at 6:59 pm</a>		</div>

		<p>&gt;once the code ships, it&#39;s done. You&#39;re stuck with it.</p>
<p>&gt;Unless it&#39;s open source code</p>
<p>Or unless it&#39;s made by Apple. You know, they (try to) fix their mess-ups every few years, because they allow themselves to break downwards compatibility. And probably MS should do that too. Not all the time for minor things, mind you, but once ever two system versions would be fine. I am writing code for Windows 7 right now, and if it didn&#39;t work on 2k, I wouldn&#39;t be bothered. Because you know why? It does not work on 2k to begin with.</p>
<p>Having a problem nowadays which was made 10 years ago sounds quite a bit harsh to me, considering how fast the software world moves.</p>
<div class="post">[<i>Okay, so fine, you decide that Windows 7 won&#39;t support the Windows 2000 SHCOLUMNINFO structure. But the Windows 2000 SHCOLUMNINFO structure is the same as the Windows XP SHCOLUMNINFO structure, so you can&#39;t change it or you break Windows XP compatibility. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-883193">
				<div id="div-comment-883193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">WinXP</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-883193">
			December 19, 2010 at 10:04 pm</a>		</div>

		<p>Smaug: What you don&#39;t realize is that the only reason people are using Win7 in the first place is that it runs approximately all Win2k software. If Win7 couldn&#39;t run important Win2k software, people just wouldn&#39;t use it, and you would have no market for your Win7-only software. WinXP was released nearly 10 years ago and some major corporations have only recently finished migrating FROM Win2k TO WinXP!</p>
<p>Microsoft doesn&#39;t control the hardware so they have no choice over whether to have backwards compatibility. If they want to sell a new version of Windows, it had damn well better run virtually everything that the old version ran, including that mission-critical VB6 app whose source code was lost 10 years ago. Even with the quite good backwards compatibility of Win7, WinXP still has 50% market share! MS has to stay compatible with everything but the worst security problems for decades if they want to keep selling software.</p>
<p>Companies like Apple that make the only hardware that their software runs on have the luxury of being able to stop making hardware that will run their old software. Since people will eventually need to buy new hardware and new hardware requires a new OS, people have no choice but to &quot;upgrade&quot;, whether their old programs run or not. And of course they make their new software stop supporting old hardware, forcing anybody who wants to run new software to have to upgrade their hardware also. Thus, Apple has a sliding window of just a few years where they have to keep compatibility. Of course, it helps that people generally don&#39;t write their mission-critical apps for Apple operating systems (perhaps because they&#39;d have to keep rewriting them), so backwards compatibility isn&#39;t such a big deal for Apple in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-883203">
				<div id="div-comment-883203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Engywuck</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-883203">
			December 20, 2010 at 12:47 am</a>		</div>

		<p>I see it the same as &quot;WinXP&quot;. Heck, we even still use Win98 on some rare computers because the program running on them won&#39;t work with XP. (Another program could be convinced to work with 2k by some strange ancient voodoo but stops working for good on XP).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-883693">
				<div id="div-comment-883693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-883693">
			December 22, 2010 at 4:34 am</a>		</div>

		<blockquote><p>
  What you don&#39;t realize is that the only reason people are using Win7 in the first place</p>
<p>  is that it runs approximately all Win2k software.
</p></blockquote>
<p>I was going to point out the same thing, the reason why Windows is pretty much the universal environment for computing is because MS bend over backwards to retain backwards-compatibility. &nbsp;I still have users running NT SP6 machines, and my code will run on them without any problems (and, just for reference, on Win7 as well). &nbsp;OTOH doing that with an Apple machine, or Linux, or [&#8230;], not a hope.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-883703">
				<div id="div-comment-883703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101216-00/?p=11993#comment-883703">
			December 22, 2010 at 4:39 am</a>		</div>

		<blockquote><p>
  Companies like Apple that make the only hardware that their software runs on have the</p>
<p>  luxury of being able to stop making hardware that will run their old software.
</p></blockquote>
<p>Another thing that Apple can get away with, which almost no other company can, is to tell their users point-blank &quot;X isn&#39;t being supported any more, gee it sucks to be you, get something newer&quot;, and most users will do so without much complaint. &nbsp;This makes them more a special case-study in abnormal customer behaviour than an example for others to follow.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

