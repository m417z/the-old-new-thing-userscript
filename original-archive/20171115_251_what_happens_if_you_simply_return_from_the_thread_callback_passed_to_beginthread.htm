<html>
<head>
<title>What happens if you simply return from the thread callback passed to _beginthread and _beginthreadex?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What happens if you simply return from the thread callback passed to _beginthread and _beginthreadex?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 15, 2017 / year-entry #252</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Who's got the thread handle?</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Medinoc asks,
"<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115#comment-1310746">What
happens when one simply returns from the thread callback</a>?
I'd suspect the code gluing between
_beginthread() and its callback calls _endthread() upon return,
while the code between _beginthreadex() and its callback
calls _endthreadex() instead?"
</p>
<p>
Yup, that's exactly it.
If your thread callback function returns,
then <code>_begin&shy;thread</code> calls
<code>_end&shy;thread</code> on your behalf,
and
then <code>_begin&shy;thread&shy;ex</code> calls
<code>_end&shy;thread&shy;ex</code> on your behalf.
The value passed to
<code>_end&shy;thread&shy;ex</code>
is the return value of your thread callback function.
</p>
<p>
In response to the remark
"beginthread() initializes the CRT,"
Cesar asked,
"<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115#comment-1310785">Which CRT</a>?
A process can have more than one CRT,
and the thread function can even call functions
from several different C runtimes."
</p>
<p>
The <code>_begin&shy;thread</code> function
initializes the CRT it belongs to.
What other choice does it have?
It's not like <code>msvcr80!</code><code>_beginthread</code>
knows how to initialize the data used by
<code>msvcr90.dll</code>.
If you call
<code>msvcr80!</code><code>_beginthread</code>,
then the new thread is initialized for
the <code>msvcr80</code> runtime,
since that's the only one it knows about.
</p>
<p>
If the thread function calls into multiple C runtimes,
then that's its decision.
If it calls into a C runtime that hasn't been initialized
for that thread,
then what happens next depends on the behavior of that C runtime.
For quite some time now, Microsoft's C runtimes
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115#comment-1310795">
are self-initializing</a>,
meaning that the first time you call into them on a thread,
they will initialize themselves on the spot.
And they will also auto-uninitialize themselves when the thread exits.
</p>
<p>
Wait, if the C runtime initializes itself on demand and auto-uninitializes,
then why bother with <code>_beginthread</code> at all?
</p>
<p>
Well, the functions are still around because they predated the
initialize-on-demand and auto-uninitialize behavior.
And they do guarantee that the C runtime will be initialized
for the new thread.
(If not, then the functions return failure.)
If you go for the initialize-on-demand case,
and the C runtime cannot initialize itself,
then something interesting happens.
</p>
<ul>
<li>
    Some functions will handle the case where the C runtime failed
    to initialize in some way.
    for example,
    <code>_tempnam</code> and <code>strerror</code>
    will return <code>NULL</code> to report a failure.
    (Sometimes this failure mode is documented; sometimes it isn't.)
    Other functions will fall back to a static buffer
    instead of a per-thread buffer.
</li>
<li>
    Other functions will exit the process with the error message
    "<tt>R6016 - not enough space for thread data</tt>."
</li>
</ul>
<p>
But as Harry Johnston noted,
"In practice very few applications will survive
running out of memory anyway."
</p>
<p>
Joshua Shaeffer asks,
"<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115#comment-1310825">Instead
of automatically closing the handle, how about automatically never opening the handle</a>?"
</p>
<p>
Not sure what Joshua is trying to say here,
because the C runtime didn't open the handle.
The handle was created by the operating system
and returned by the <code>Create&shy;Thread</code> function.
So the C runtime really doesn't have a choice.
The handle gets opened as part of the thread-creation process.
All it can do is decide what to do with the handle once it is given one.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1315855">
				<div id="div-comment-1315855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Koro</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1315855">
			November 15, 2017 at 7:44 am</a>		</div>

		<p>I&#8217;m assuming that the functions are required to properly initialize and uninitialize the CRT should you link statically with it inside an EXE, because then there is no DllMain to hook into for thread attach/detach notifications.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1315866">
				<div id="div-comment-1315866" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1315866">
			November 15, 2017 at 1:35 pm</a>		</div>

		<p>Initialization isn&#8217;t a problem for static runtimes, because it doesn&#8217;t have to occur until the new thread calls a CRT function, so there&#8217;s no need to detect thread startup.  In fact if the thread never calls a CRT function it would be wasteful for the CRT to initialize.</p>
<p>Uninitialization is only a problem for static runtimes if you&#8217;re running on Windows XP or earlier.  From Vista onwards, the CRT uses a FLS callback to detect when a thread exits.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-jan-ringos even depth-3 parent" id="comment-1315875">
				<div id="div-comment-1315875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Jan+Ringo%C5%A1' rel='external nofollow' class='url'>Jan Ringo≈°</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1315875">
			November 15, 2017 at 2:13 pm</a>		</div>

		<p>You know, this is peculiar. Everyone operates under the assumption (well documented) that FlsAlloc is available only since Vista, but even on fresh XP SP3 installation, the FlsAlloc is present. If I set Minimal Version to 5.1 in Visual Studio 2017 project, the exe will run, even with v141 toolset (not the v141_xp). I would like to know if it&#8217;s just me &#8230;or if I have just betrayed some kind of secrete everyone else was on.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1315885">
				<div id="div-comment-1315885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1315885">
			November 15, 2017 at 2:46 pm</a>		</div>

		<p>The ability to use FlsAlloc, FlsGetValue, FlsSetValue, etc. from a thread is not documented.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even depth-4" id="comment-1315886">
				<div id="div-comment-1315886" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1315886">
			November 15, 2017 at 3:15 pm</a>		</div>

		<p>MSDN documents Win2003 as the minimum version. There has been some cross contamination between XP and 2003 service packs but my XP SP3 does not have FlsAlloc.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1315856">
				<div id="div-comment-1315856" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1315856">
			November 15, 2017 at 8:20 am</a>		</div>

		<p>I interpreted Joshua Shaeffer&#8217;s question as &#8220;Why not close the handle immediately after CreateThread() returns?&#8221;. Then I realized I don&#8217;t care about the actual answer.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1315915">
				<div id="div-comment-1315915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Guteniev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1315915">
			November 15, 2017 at 11:39 pm</a>		</div>

		<p>With such interpretation, there is still a case when such handle could be useful.<br />
If at some point the thread is waiting for an event, that is fired only after the handle is used, then it&#8217;s safe to use such handle.<br />
Sure you won&#8217;t be using it for waiting on a thread, but you can use it otherwise, like set thread priority, obtain thread id, or duplicate that handle (and then wait on a duplicated handle).<br />
Kinda artificial case, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1316085">
				<div id="div-comment-1316085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1316085">
			November 17, 2017 at 7:44 am</a>		</div>

		<p>&#8220;Closing the handle immediately&#8221; still leaves a non-zero interval where the handle is valid.  Depending on what other threads are doing, this can be a problem.  In particular, if another thread is at exactly the right phase of starting a child process, the handle you wanted closed immediately could be duplicated into the child.  Inheritable handles are problematic beasts.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1316355">
				<div id="div-comment-1316355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1316355">
			November 18, 2017 at 2:37 pm</a>		</div>

		<p>Wait what? I&#8217;m certain handles from.CreateThread aren&#8217;t inheritable.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1316407">
				<div id="div-comment-1316407" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1316407">
			November 19, 2017 at 12:53 pm</a>		</div>

		<p>Not by default, but (according to the documentation) you can set inheritability via the lpThreadAttributes argument.  _beginthread doesn&#8217;t do so.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1315896">
				<div id="div-comment-1315896" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1315896">
			November 15, 2017 at 4:54 pm</a>		</div>

		<p>These functions could immediately close the handle they get from `CreateThread()`.  But the user of `_beginthread()`/`_beginthreadex()` might want to use the handle (it&#8217;s how you can know that a thread has exited).  So instead of closing the handle, they pass it back to the caller.  Of course, `_beginthread()`/`_endthread()` is a little broken in how they handle the handle &#8211; that&#8217;s one of the reasons for the existence of `_beginthreadex()`/`_endthreadex()`.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1316015">
				<div id="div-comment-1316015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IInspectable</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1316015">
			November 17, 2017 at 4:56 am</a>		</div>

		<p>_beginthread() isn&#8217;t broken. It&#8217;s a design decision, that the handle returned by it is owned by the CRT. Callers must not ever use the return value for anything else but checking for success/failure. In contrast, ownership of the handle returned by _beginthreadex() is transferred back to the caller. The difference is one of design, not brokenness.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1316155">
				<div id="div-comment-1316155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1316155">
			November 17, 2017 at 9:41 am</a>		</div>

		<p>_beginthread() is documented to return a handle to the thread.  As far as I know it&#8217;s been documented that way since the beginning (it is documented that way in the VS6 docs).  I&#8217;m pretty sure that the intent was for clients of the API to be able to use that handle to &#8220;join&#8221; the thread.  The VS6 docs for _beginthread() do mention that the caller shouldn&#8217;t close the handle because it gets closed by the runtime.  There&#8217;s no mention about the possibility of the handle becoming invalid (or worse, being reused for another thread), which is mentioned since _beginthreadex().</p>
<p>Retrospectively, the return from _beginthread() can only be used for a success/fail test.  But I&#8217;m pretty sure that wasn&#8217;t the original intent.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1316205">
				<div id="div-comment-1316205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IInspectable</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1316205">
			November 17, 2017 at 11:08 am</a>		</div>

		<p>The documentation doesn&#8217;t leave much room for interpretation. If the handle is closed by the runtime, there is no conceivable way for a caller to do anything meaningful with it, because the handle can be closed at any time. It&#8217;s moot whether the documented contract matched the design goal at one point or didn&#8217;t. The important piece of information is, that the return value of _beginthread() is useless beyond comparing it against -1L (see <a href="https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20170929-00/?p=97115</a>).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1315905">
				<div id="div-comment-1315905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephen Hewitt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1315905">
			November 15, 2017 at 6:42 pm</a>		</div>

		<p>Is there a runtime cost to this automatic initialisation?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1315925">
				<div id="div-comment-1315925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1315925">
			November 16, 2017 at 12:14 am</a>		</div>

		<p>Lazy init is (in general) so close to being free as to not be worth bothering about.<br />
If (!the_pointer_this_function_needs)<br />
  Init ()</p>
<p>If the cache gets missed, it was going to be missed anyway as the function was about to dereference that point.</p>
<p>I guess the only exception is when you can&#8217;t afford for your first call into the CRT to be significantly slower than later calls &#8211; and the solution there is obvious :)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1315926">
				<div id="div-comment-1315926" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephen Hewitt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1315926">
			November 16, 2017 at 3:02 am</a>		</div>

		<p>If binary rewriting was used it could be free (although the initialisation would take slightly longer as the trampolines were removed) but I doubt this approach is used.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1315965">
				<div id="div-comment-1315965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephen Hewitt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1315965">
			November 16, 2017 at 9:55 am</a>		</div>

		<p>Actually, on further thought, this is not doable.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1316016">
				<div id="div-comment-1316016" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IInspectable</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1316016">
			November 17, 2017 at 5:10 am</a>		</div>

		<p>I&#8217;m not sure, what specific counter example you have in mind. I believe this were indeed doable, e.g. by using the same technique that is used for hotpatching (see <a href="https://blogs.msdn.microsoft.com/oldnewthing/20130102-00/?p=5663" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20130102-00/?p=5663</a>). Although replacing the short jumps with a 2-byte NOP upon initialization wouldn&#8217;t lead to zero overhead. Executing the 2-byte NOP still takes time, however little.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1316026">
				<div id="div-comment-1316026" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IInspectable</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1316026">
			November 17, 2017 at 5:58 am</a>		</div>

		<p>Oh, huh, I see now, why this is not possible. The CRT needs to be initialized per thread. Patching the binary would prevent all future threads using the same copy of the CRT from initializing.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude even depth-2" id="comment-1315935">
				<div id="div-comment-1315935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171115-00/?p=97405#comment-1315935">
			November 16, 2017 at 6:07 am</a>		</div>

		<p>you can see the initialization code yourself in the windows kit that ships with VS2017, for me it&#8217;s at C:\Program Files (x86)\Windows Kits\10\Source\10.0.10586.0\ucrt\internal\initialization.cpp it&#8217;s pretty straightforward actually.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

