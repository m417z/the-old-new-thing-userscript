<html>
<head>
<title>How do I load an entire file into a rich text control?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I load an entire file into a rich text control?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 10, 2007 / year-entry #9</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20070110-13/?p=28463</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">To load an entire file into a rich text control, you can use the EM_STREAMIN message, which accepts an IStream of data all at once. Once you find the message, it's pretty straightforward how to use it, but I'll write out the code anyway; DWORD CALLBACK EditStreamCallback(DWORD_PTR dwCookie, LPBYTE lpBuff, LONG cb, PLONG pcb) {...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
To load an entire file into a rich text control, you can use
the <code>EM_STREAMIN</code> message,
which accepts an <code>IStream</code> of data all at once.
Once you find the message, it's pretty straightforward how to use it,
but I'll write out the code anyway;
</p>
<pre>
DWORD CALLBACK EditStreamCallback(DWORD_PTR dwCookie, LPBYTE lpBuff,
                                  LONG cb, PLONG pcb)
{
 HANDLE hFile = (HANDLE)dwCookie;
 return !ReadFile(hFile, lpBuff, cb, (DWORD *)pcb, NULL);
}

BOOL FillRichEditFromFile(HWND hwnd, LPCTSTR pszFile)
{
 BOOL fSuccess = FALSE;
 HANDLE hFile = CreateFile(pszFile, GENERIC_READ, FILE_SHARE_READ,
                           0, OPEN_EXISTING,
                           FILE_FLAG_SEQUENTIAL_SCAN, NULL);
 if (hFile != INVALID_HANDLE_VALUE) {
  EDITSTREAM es = { (DWORD_PTR)hFile, 0, EditStreamCallback };
  if (SendMessage(hwnd, EM_STREAMIN, SF_RTF, (LPARAM)&amp;es) &amp;&amp;
      es.dwError == 0) {
   fSuccess = TRUE;
  }
  CloseHandle(hFile);
 }
 return fSuccess;
}
</pre>
<p>
You pretty much follow your nose.
The <code>EM_STREAMIN</code> message wants you
to tell it the format of the stream (<code>SF_RTF</code>)
and provide a pointer to an <code>EDITSTREAM</code> structure
that controls the input.
Since we want to read from a file, we open a file for reading
and use it as the <code>dwCookie</code> for
our <code>EditStreamCallback</code>.
The only tricky part is getting the return value correct for the
callback.
For some reason, the rich edit control wants zero on success and
nonzero on failure, so we need to flip the sense of the
<code>ReadFile</code> return value accordingly.
Aside from that, there's nothing particularly interesting going on.
</p>
<p>
"But I tried this, and only the first line of the file gets read in.
What am I doing wrong?"
</p>
</p>
<p>Ah, a classic rookie mistake.
You forgot to set the <code>ES_MULTILINE</code> style when you created
the rich edit control.
</p>
<p>
Don't worry, I made this mistake, too.
</p>
<p>
"What if my data is in some other format than a file?"
</p>
<p>
As long as you can write a function that produces the next few bytes
of data,
you can stream it into a rich edit control.
For example, here's a version that loads an arbitrary <code>IStream</code>
into a rich edit control:
</p>
<pre>
DWORD CALLBACK EditStreamCallback(DWORD_PTR dwCookie, LPBYTE lpBuff,
                                  LONG cb, PLONG pcb)
{
 IStream *pstm = (IStream *)dwCookie;
 return FAILED(pstm->Read(lpBuff, cb, (ULONG*)pcb));
}

BOOL FillRichEditFromStream(HWND hwnd, IStream *pstm)
{
 BOOL fSuccess = FALSE;
 EDITSTREAM es = { (DWORD_PTR)pstm, 0, EditStreamCallback };
 if (SendMessage(hwnd, EM_STREAMIN, SF_RTF, (LPARAM)&amp;es) &amp;&amp;
     es.dwError == 0) {
  fSuccess = TRUE;
 }
 return fSuccess;
}
</pre>
<p>
There's still a bug in this code, however,
and it's not where you expect it.
We'll take another look next time.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-460093">
				<div id="div-comment-460093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kokorozashi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070110-13/?p=28463#comment-460093">
			January 10, 2007 at 10:18 am</a>		</div>

		<p>First!</p>
<p>The only way I could get RICHEDIT50W to interpret RTF was to stream it in via callback as you show here. However, earlier versions seem happy to interpret RTF if you just throw it at them in one big message.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-460123">
				<div id="div-comment-460123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://codebetter.com/blogs/sam.gentile/archive/2007/01/10/New-and-Notable-134.aspx' rel='external nofollow' class='url'>Sam Gentile</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070110-13/?p=28463#comment-460123">
			January 10, 2007 at 1:48 pm</a>		</div>

		<p>Completely buried with two projects and the main one is going to CTP #2 at a major back in Paris/London</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-460133">
				<div id="div-comment-460133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kalle Olavi Niemitalo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070110-13/?p=28463#comment-460133">
			January 10, 2007 at 2:27 pm</a>		</div>

		<p>If the rich edit control was created by a different thread, then SendMessage will pass the EM_STREAMIN to that thread, so the IStream could get called from the wrong apartment.</p>
<p>On second thought, even if the control was created by the thread that calls SendMessage, does anything guarantee that the control will call EditStreamCallback on that thread? &nbsp;I don&#8217;t see that specified in the documentation of EM_STREAMIN or EditStreamCallback; I may have missed a general rule somewhere.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-460183">
				<div id="div-comment-460183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070110-13/?p=28463#comment-460183">
			January 10, 2007 at 10:04 pm</a>		</div>

		<p>&gt; There&#8217;s still a bug in this code, however,</p>
<p>&gt; and it&#8217;s not where you expect it.</p>
<p>That sounds like a challenge, and someone lent me a few spare minutes, so let&#8217;s see.</p>
<p>(1) &nbsp;MSDN says:</p>
<p>* &nbsp;The control continues to call the callback</p>
<p>* &nbsp;function until one of the following</p>
<p>* &nbsp;conditions occurs:</p>
<p>[&#8230;]</p>
<p>* &nbsp;or an invalid character in the read buffer</p>
<p>[&#8230;]</p>
<p>Suppose the control says to read 10 bytes, there are 65 bytes remaining readable in the file, and the next 10 bytes consist of 9 single-byte characters plus the first half of 1 double-byte character. &nbsp;The result will be an invalid character in the read buffer.</p>
<p>(2) &nbsp;This code has the CALLBACK macro on the definition of EditStreamCallback, but MSDN&#8217;s specification says not to.</p>
<p>(3) &nbsp;If the assumption that somethings never change might possibly be false in the future, if DWORD might no longer be close enough to the same as LONG or if a DWORD might change to a DWORD_PTR (as some did), then some of this code&#8217;s casts might break in the future. &nbsp;The effect might be silent successful compilation but danger at runtime.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-460233">
				<div id="div-comment-460233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2007/01/11/1450795.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070110-13/?p=28463#comment-460233">
			January 11, 2007 at 10:00 am</a>		</div>

		<p>You need to raise the ceiling.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

