<html>
<head>
<title>The mystery of the icon that never appears</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The mystery of the icon that never appears</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 14, 2014 / year-entry #121</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>22</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer reported a problem showing an icon on their dialog box. We verified that this code does execute during the handling of the WM_INIT­DIALOG message. No assertion fires, yet no icon appears either. SHFILEINFO sfi = { 0 }; DWORD_PTR dwResult = SHGetFileInfo(m_pszFile, &sfi, sizeof(sfi), SHGFI_ICON); assert(dwResult != 0); m_hico = sfi.hIcon; assert(m_hico !=...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer reported a problem showing an icon on their dialog box.
</p>
<blockquote CLASS=q>
<p>
We verified that this code does execute during
the handling of the <code>WM_<wbr>INIT&shy;DIALOG</code> message.
No assertion fires, yet no icon appears either.
</p>
<pre>
SHFILEINFO sfi = { 0 };
DWORD_PTR dwResult = SHGetFileInfo(m_pszFile, &amp;sfi,
                                   sizeof(sfi), SHGFI_ICON);
assert(dwResult != 0);

m_hico = sfi.hIcon;
assert(m_hico != nullptr);

assert(GetDlgItem(hdlg, IDI_CUSTOMICON) != nullptr);
SendDlgItemMessage(hdlg, IDI_CUSTOMICON,
                   WM_SETICON, ICON_BIG, (LPARAM)m_hico);
assert(SendDlgItemMessage(hdlg, IDI_CUSTOMICON,
                   WM_GETICON, ICON_BIG, 0) == (LPARAM)m_hico);
</pre>
<p>
Our dialog template says
</p>
<pre>
  ICON "", IDI_CUSTOMICON, 10, 10, 0, 0
</pre>
</blockquote>
<p>
The customer did some helpful preliminary troubleshooting:
</p>
<ul>
<li>Verify that the code does indeed execute.
    It sounds obvious, but some people forget to check this.
    They get distracted trying to figure out why a function isn't
    working, when in fact the root cause is that
    <i>you forgot to call the function in the first place</i>.</p>
<li>Verify that the <code>SHGet&shy;File&shy;Info</code>
    call succeeded.
    That rules out the case that the static control is
    displaying nothing because you didn't give it anything to display.</p>
<li>Verify via <code>Get&shy;Dlg&shy;Item</code>
    that the control you're trying to talk to really does exist.
    That rules out the case that you are talking to an empty room.
    (For example, maybe you added the control to the wrong template.)</p>
<li>Verify via <code>WM_<wbr>GET&shy;ICON</code> that the attempt
    to change the icon really worked.
</ul>
<p>
The problem is that the customer is using the wrong icon-setting message.
</p>
<p>
The <code>WM_<wbr>SET&shy;ICON</code> message
lets you customize the icon that is
displayed in the window's caption bar.
For this to have any effect, your window naturally needs to have the
<code>WS_<wbr>CAPTION</code> style.
If you don't have a caption, then telling the window manager,
"Please display this icon in my caption" is mostly a waste of time.
It's like signing up for a lawn-mowing service when you don't have
a lawn.
</p>
<p>
The message to change the icon displayed
<i>inside</i> a static control is
<code>STM_<wbr>SET&shy;ICON</code>.
</p>
<pre>
SendDlgItemMessage(hdlg, IDI_CUSTOMICON,
                   STM_SETICON, (LPARAM)m_hico, 0);
</pre>
<p>
<b>Red herring</b>:
Some of you may have noticed that the customer set their
control size to 0&times;0.
"You aren't seeing an icon because you set the control to zero size!"
But since this control was not created with
<code>SS_<wbr>REAL&shy;SIZE&shy;CONTROL</code> or
<code>SS_<wbr>CENTER&shy;IMAGE</code>,
the control will resize itself to match the size of the icon.
</p>
<p>
Here's a sample program to show both types of icons set on the same
window, so you can see the difference.
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;commctrl.h&gt;

LRESULT CALLBACK SubclassProc(HWND hwnd, UINT uMsg, WPARAM wParam,
    LPARAM lParam, UINT_PTR uIdSubclass, DWORD_PTR dwRefData)
{
 switch (uMsg) {
 case WM_NCDESTROY:
  RemoveWindowSubclass(hwnd, SubclassProc, 0);
  PostQuitMessage(0);
  break;
 }
 return DefSubclassProc(hwnd, uMsg, wParam, lParam);
}

int WINAPI WinMain(HINSTANCE hinst, HINSTANCE hinstPrev,
                   PSTR lpCmdLine, int nShowCmd)
{
 HWND hwnd = CreateWindow("static", nullptr,
               WS_OVERLAPPEDWINDOW | WS_VISIBLE |
               SS_ICON | SS_CENTERIMAGE,
               CW_USEDEFAULT, CW_USEDEFAULT,
               CW_USEDEFAULT, CW_USEDEFAULT,
               nullptr, nullptr, hinst, nullptr);
 SetWindowSubclass(hwnd, SubclassProc, 0, 0);

 HICON hicoCaption = LoadIcon(nullptr, IDI_EXCLAMATION)
 SendMessage(hwnd, WM_SETICON, ICON_BIG,
             reinterpret_cast&lt;LPARAM&gt;(hicoCaption));

 HICON hicoClient = LoadIcon(nullptr, IDI_QUESTION);
 SendMessage(hwnd, STM_SETICON,
             reinterpret_cast&lt;LPARAM&gt;(hicoClient), 0);

 MSG msg;
 while (GetMessage(&amp;msg, NULL, 0, 0)) {
  TranslateMessage(&amp;msg);
  DispatchMessage(&msg);
 }

 DestroyIcon(hicoClient);
 DestroyIcon(hicoCaption);

 return 0;
}
</pre>
<p>
We create a top-level static window, which is highly unusual,
since static controls are nearly always children of some other window.
I'm doing this specifically to show the two different icons.
You don't want to do this in a real program.
</p>
<p>
The static control has the <code>SS_<wbr>ICON</code>
style, because we want it to display an icon, and the
<code>SS_<wbr>CENTER&shy;IMAGE</code> style,
because we just want it to center the icon in its client area
without resizing.
(We will control the size.)
</p>
<p>
We subclass the window so that we can post a quit message to exit the program
when the window is destroyed,
which the user can do by pressing <code>Alt</code>+<code>F4</code>.
(Hey, this is just a demo program.
Catching clicks on the &times; button is just extra code that will
distract from the purpose of the demonstration.
Heck, this entire subclass thing is already distracting from the purpose
of the demonstration!)
</p>
<p>
We load up two icons, an exclamation point, which we set as our caption icon,
and a question mark, which we put in our client area.
(We could have used the
<code>Static_<wbr>Set&shy;Icon</code> macro in
<code>windowsx.h</code> to send the
<code>STM_<wbr>SET&shy;ICON</code> message,
but I did it manually just to make the message explicit.)
</p>
<p>
Run the program, and there you can see the two different types of icons:
The exclamation point goes in the caption, and the question mark
goes in the client area.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1124243">
				<div id="div-comment-1124243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1124243">
			May 14, 2014 at 7:03 am</a>		</div>

		<p>Ability to perform basic diagnostics is quite refreshing after all those that couldn&#39;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1124253">
				<div id="div-comment-1124253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Z</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1124253">
			May 14, 2014 at 7:06 am</a>		</div>

		<p>Yeah, I&#39;m prepared to forgive the customer for this one. Icon handling is confusing and using the wrong &quot;set the icon&quot; message seems like a pretty simple mistake to make. And their attempts to figure out what went wrong are quite impressive, especially compared to the average customer stories on this blog. If I were debugging that, it would not occur to me to check the actual message; I would just say to myself &quot;hey, it says SETICON, it must mean set the icon. No worries there.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1124263">
				<div id="div-comment-1124263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1124263">
			May 14, 2014 at 7:12 am</a>		</div>

		<p>I&#39;m surprised it doesn&#39;t react to a click on the Ã—, while an ordinary windows does. That means the controls goes out of its way not to react, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1124293">
				<div id="div-comment-1124293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1124293">
			May 14, 2014 at 8:04 am</a>		</div>

		<p>In this example, the main difference between using SetWindowSubclass vs SetWindowLongPtr with GWLP_WNDPROC is that with the former you just call DefSubclassProc, while with the latter you&#39;d have to store the previous handler by calling GetWindowLongPtr with GWLP_WNDPROC and call it in the new handler.</p>
<p>A feature of SetWindowSubclass is that the provided SUBCLASSPROC is called with the provided uIdSubclass and the dwRefData, but those are not being used in this example. &nbsp;At least uIdSubclass should be used in the call to RemoveWindowSubclass.</p>
<p>Also, it&#39;s very strange to call RemoveWindowSubclass within the same SUBCLASSPROC. &nbsp;Will DefSubclassProc know how to deal with that, e.g. following a copy of the list of subclasses, made before the top SUBCLASSPROC was called?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1124303">
				<div id="div-comment-1124303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1124303">
			May 14, 2014 at 8:33 am</a>		</div>

		<p>2 typos: &nbsp;no semicolon after the first call to LoadIcon, and the second DestroyIcon references hicoCaptionSm (which doesn&#39;t exist) instead of hicoCaption.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1124313">
				<div id="div-comment-1124313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">morlamweb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1124313">
			May 14, 2014 at 10:30 am</a>		</div>

		<p>After years of reading posts where devs make some of the silliest programming mistakes, and not even perform the most basic troubleshooting techniques, it is refreshing to see a post featuring a competent customer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1124333">
				<div id="div-comment-1124333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1124333">
			May 14, 2014 at 2:09 pm</a>		</div>

		<p>@morlamweb: IMO that&#39;s the first principle of debugging: Always verify the obvious, basic things first. &nbsp;To err is human, and it&#39;s always surprising (and slightly embarrassing) to see how often this finds the problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1124343">
				<div id="div-comment-1124343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1124343">
			May 14, 2014 at 3:18 pm</a>		</div>

		<p>&gt; WinMain</p>
<p>&gt; CreateWindow(&quot;</p>
<p>We should probably start using UNICODE functions even in scratch programs, at least until the default ANSI code page is UTF-8.&lt;/pedant&gt;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1124353">
				<div id="div-comment-1124353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Timothy Byrd (ETAP)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1124353">
			May 14, 2014 at 4:13 pm</a>		</div>

		<p>Maurits: Can I set the code page to UTF-8? Though it probably wouldn&#39;t help my situation. We are stuck supporting an ancient MFC grid control that is used in a hundred paces in our software and though our software is built with UNICODE, I can&#39;t put non-code-page text into it. (Someone even figured out a trick to make it usable in our 64-bit build.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1124363">
				<div id="div-comment-1124363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1124363">
			May 14, 2014 at 5:13 pm</a>		</div>

		<p>I successfully set OEMCP to UTF8 and it worked quite well. The editor can&#39;t handle it though so don&#39;t try to paste out of 7 bit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1124373">
				<div id="div-comment-1124373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1124373">
			May 15, 2014 at 12:21 am</a>		</div>

		<p>In order to execute this code from Visual-Studio I created an empty Win32 project, changed the lines as suggested by Rick C and added Comctl32.lib to the linker.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1124383">
				<div id="div-comment-1124383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1124383">
			May 15, 2014 at 3:37 am</a>		</div>

		<p>I used this trick to provide a basic text viewer sample application; it created a readonly edit control as a top-level window. However rather than subclassing the window to notice its destruction I just used IsWindow(hwnd) as my loop test. Note that as @Medinoc suggested I didn&#39;t have to add any code to handle closing the window since the existing default syscommand handling took care of all that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1124603">
				<div id="div-comment-1124603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1124603">
			May 15, 2014 at 12:22 pm</a>		</div>

		<p>@Paul Z: Yeah I wouldn&#39;t even speak of &quot;forgiving&quot;. Everybody makes mistakes and they spent a large amount of work trying to figure out the problem and narrowing it down as much as they could before asking for help. That&#39;s pretty much model student behavior &#8211; what could one ask more for?</p>
<p>If everybody was like this, support calls would be way rarer &#8211; sadly as Ray&#39;s usual posts demonstrate almost nobody goes to that effort :(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt thread-odd thread-alt depth-1" id="comment-1124833">
				<div id="div-comment-1124833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1124833">
			May 16, 2014 at 2:01 pm</a>		</div>

		<p>I also don&#39;t understand why subclassing is necessary. Would this not be enough?</p>
<p>MSG msg;</p>
<p>while (GetMessage(&amp;msg, NULL, 0, 0)) {</p>
<p>&nbsp;if (msg.message == WM_NCDESTROY) PostQuitMessage(0);</p>
<p>&nbsp;TranslateMessage(&amp;msg);</p>
<p>&nbsp;DispatchMessage(&amp;msg);</p>
<p>}</p>
<div class="post">[<em>Try it and see. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1124853">
				<div id="div-comment-1124853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dominic</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1124853">
			May 16, 2014 at 2:21 pm</a>		</div>

		<p>&quot;It sounds obvious, but some people forget to check this.&quot;</p>
<p>Worse, they lock themselves into not checking because they already did and &quot;I didn&#39;t change anything.&quot; e.g. my own experience at Microsoft at 2007 when an IInternetSecurityManager I had created just stopped working the day after I had tested it and checked it in. After a week of increasingly voodoo-driven investigation, and a desperate outreach to the IE team, I finally noticed that another dev had clobbered my OLE siting code in a merge.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1124923">
				<div id="div-comment-1124923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1124923">
			May 17, 2014 at 4:13 pm</a>		</div>

		<p>@Alex Cohn, the WM_NCDESTROY message is sent, not posted, so GetMessage will not return it. &nbsp;You have to somehow have a window proc there.</p>
<p>I was just ranting that SetWindowSubclass and friends are not really necessary in this case (read these 3 words again with care). &nbsp;By using it, this otherwise little program that just uses a static control as a top-level window now requires comctl32.</p>
<p>But I guess Raymond actually wishes the best for people that simply copy-paste his code snippets. &nbsp;Indeed, it&#39;s a much better way of subclassing.</p>
<p>I haven&#39;t tested if calling RemoveWindowSubclass is safe within the subclass&#39;s proc, but I guess it is.</p>
<p>Oh look, he already blogged about it a long time ago, how awesome is that? <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2003/11/11/55653.aspx">blogs.msdn.com/&#8230;/55653.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-1125003">
				<div id="div-comment-1125003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1125003">
			May 19, 2014 at 11:30 pm</a>		</div>

		<p>@John Doe, thanks &#8212; my Win32 got rusty in the last few years, but I took Raymond&#39;s challenge and installed MSVC Express on an ancient Windows laptop running some unsupported version of OS.</p>
<p>True, WM_NCDESTROY does not happen without subclassing. But I found that even without WM_NCDESTROY, the following code simply works, without comctl32.lib and without SetWindowSubclass(). Am I missing simething?</p>
<p> MSG msg;</p>
<p> while (GetMessage(&amp;msg, NULL, 0, 0)) {</p>
<p> &nbsp;if (msg.message == WM_SYSCOMMAND &amp;&amp; msg.wParam == SC_CLOSE)</p>
<p> &nbsp; &nbsp;PostQuitMessage(0);</p>
<p> &nbsp;TranslateMessage(&amp;msg);</p>
<p> &nbsp;DispatchMessage(&amp;msg);</p>
<p> }</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125033">
				<div id="div-comment-1125033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sam Steele</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1125033">
			May 20, 2014 at 3:16 am</a>		</div>

		<p>@Alex Cohn.</p>
<p>If you call the PostQuitMessage function in response to WM_SYSCOMMAND with wParam == SC_CLOSE,</p>
<p>then your application will miss out on getting its last few messages.</p>
<p>These will include WM_CLOSE, WM_DESTROY and WM_NCDESTROY.</p>
<p>Whether or not this will be a problem will depend upon the design of your application.</p>
<div class="post">[<em>It also misses the cases where the window is destroyed by some means other than the user selecting &quot;Close&quot; from the System menu. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-1125183">
				<div id="div-comment-1125183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1125183">
			May 20, 2014 at 11:09 am</a>		</div>

		<p>@Sam Steele: you are definitely correct in general case; but in the specific case of an app that wraps around a standard control, there doesn&#39;t seem to be a problem with that. At least, my debugger shows that WM_NCDESTROY in SubclassProc() has a direct stack trace to message loop with message == WM_SYSCOMMAND &amp;&amp; wParam == SC_CLOSE. And I found no other way to close this tiny app, but for Alt-F4 or Alt-Space + &amp;Close. Am I missing something?</p>
<div class="post">[<em>DestroyWindow is another way to destroy a window. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt thread-odd thread-alt depth-1" id="comment-1125223">
				<div id="div-comment-1125223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1125223">
			May 20, 2014 at 2:09 pm</a>		</div>

		<p>I could not find a way to DestroyWindow() within this program. But I found a minimal change that shows the beauty of subclassing. For a reason I don&#39;t completely understand, when I change the &quot;static&quot; class to &quot;edit&quot;, the program does catch clicks on the &times; button, but nothing except WM_NCLBUTTONDOWN arrives to the message loop. Now you either must check the mouse location and map it to the &times; button, or subclass and see it work all by itself.</p>
<div class="post">[<em>Right now, the program doesn&#39;t use DestroyWindow, but somebody might incorporate it into a program that does. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-1125233">
				<div id="div-comment-1125233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1125233">
			May 20, 2014 at 2:22 pm</a>		</div>

		<p>But why do static and edit windows handle the Ã— button differently? Differently means (if I interpret the evidence correctly): &quot;static&quot; does not handle the caption bar buttons, while &quot;edit&quot; does handle them?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1125283">
				<div id="div-comment-1125283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140514-00/?p=993#comment-1125283">
			May 21, 2014 at 7:02 am</a>		</div>

		<p>@Alex Cohn, I&#39;m conjecturing here: maybe because the edit control was made to be a top-level window by itself, e.g. a very, very simple notepad without a status bar.</p>
<p>The static control, and probably checkboxes, radio buttons, push buttons and such, probably weren&#39;t, IMO following the line of thought that they&#39;re only useful as child windows, or rather distasteful as top-level windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

