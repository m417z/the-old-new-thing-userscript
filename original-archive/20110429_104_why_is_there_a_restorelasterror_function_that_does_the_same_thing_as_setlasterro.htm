<html>
<head>
<title>Why is there a RestoreLastError function that does the same thing as SetLastError?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why is there a RestoreLastError function that does the same thing as SetLastError?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 29, 2011 / year-entry #105</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Matt Pietrek noticed that Set­Last­Error and Restore­Last­Error do exactly the same thing and wondered why there's a separate function for it. It's to assist in debugging and diagnostics. Say you're debugging a problem and when you call Get­Last­Error you get ERROR_ACCESS_DENIED. It would really help a lot if you could figure out who set the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Matt Pietrek noticed that
<a HREF="http://msdn.microsoft.com/en-us/magazine/cc300448.aspx">
<code>Set&shy;Last&shy;Error</code> and
<code>Restore&shy;Last&shy;Error</code> do exactly the same thing
and wondered why there's a separate function for it</a>.
</p>
<p>
It's to assist in debugging and diagnostics.
</p>
<p>
Say you're debugging a problem and
when you call <code>Get&shy;Last&shy;Error</code> you get
<code>ERROR_<wbr>ACCESS_<wbr>DENIED</wbr></wbr></code>.
It would really help a lot if you could figure out
who set the error code to <code>ERROR_<wbr>ACCESS_<wbr>DENIED</wbr></wbr></code>.
If you set a breakpoint on <code>Set&shy;Last&shy;Error</code>,
you find that people call
<code>Set&shy;Last&shy;Error</code> for two different
reasons:
</p>
<ol>
<li>To report an error.
</li>
<li>To restore the error code to what it was before they did something
    that might change the last error code.
</li>
</ol>
<p>
That second one needs a little explanation.
You might have a logging function that goes like this:
</p>
<pre>
<i>// Remember, code in italics is wrong
void LogSomething(blah blah)
{
 DWORD dwError = GetLastError();
 ... do logging stuff ...
 SetLastError(dwError);
}

// or if you prefer RAII

class PreserveLastError
{
public:
    PreserveLastError() : m_dwLastError(GetLastError()) {} 
    ~PreserveLastError() { SetLastError(m_dwLastError); }
private:
    DWORD m_dwLastError;
};</i>

void LogSomething(blah blah)
{
 PreserveLastError preserve;

 ... do logging stuff ...
}
</pre>
<p>
It's important that functions which perform logging,
assertion checking, and other diagnostic operations
are nonintrusive.
You don't want a bug to go away when you turn on logging
because the logging code somehow perturbed the system.
Therefore, your logging function saves the value of
<code>Get&shy;Last&shy;Error()</code> and sets that back as the error
code when it's done, so that any errors that took place
during logging do not escape and inadvertently
affect the rest of the program.
</p>
<p>
Now let's go back to the code that's trying to figure out
who set the error code to <code>ERROR_<wbr>ACCESS_<wbr>DENIED</wbr></wbr></code>.
You set up your debugging diagnostic tool and tell it to
record everybody who calls
<code>Set&shy;Last&shy;Error()</code>
and pay particular attention to everybody who sets
the error to <code>ERROR_<wbr>ACCESS_<wbr>DENIED</wbr></wbr></code>.
You then run your scenario,
your program encounters the failure you're trying to debug,
and you ask the diagnostic tool,
"Tell me who set the error code to
<code>ERROR_<wbr>ACCESS_<wbr>DENIED</wbr></wbr></code>."
The diagnostic tool says,
"Ah, I have that in my history.
The function that set the error code to
<code>ERROR_<wbr>ACCESS_<wbr>DENIED</wbr></wbr></code> is...
<code>Log&shy;Something</code>!"
</p>
<p>
Of course, <code>Log&shy;Something</code> wasn't really the originator of the
<code>ERROR_<wbr>ACCESS_<wbr>DENIED</wbr></wbr></code>;
it was just restoring things to how it found them.
The real <code>ERROR_<wbr>ACCESS_<wbr>DENIED</wbr></wbr></code> came from somebody else,
and the log function was just being careful not to disturb it.
</p>
<pre>
...
  if (!FunctionX()) {
    LogSomething("Function X failed");
  } else {
    LogSomething("Function X succeeded");
   FunctionY(); // also does some logging
  }
  FunctionZ(); // also does some logging
  Assert(EverythingOkay()); // assertion fires
  // GetLastError() returns ERROR_ACCESS_DENIED
...
</pre>
<p>
All those calls to logging functions in between
called <code>Get&shy;Last&shy;Error()</code> and got
<code>ERROR_<wbr>ACCESS_<wbr>DENIED</wbr></wbr></code>
back,
then when the logging was complete, they called
<code>Set&shy;Last&shy;Error(<wbr>ERROR_<wbr>ACCESS_<wbr>DENIED)</wbr></wbr></wbr></code>
to put things back.
Your diagnostic error-tracing tool gleefully points the finger
at your logging function:
"Look! Look! This guy set the error code to
<code>ERROR_<wbr>ACCESS_<wbr>DENIED</wbr></wbr></code>!"
</p>
<p>
Enter <code>Restore&shy;Last&shy;Error</code>.
This function does the same thing as <code>Set&shy;Last&shy;Error</code>,
but its use is a message to diagnostic tools that
"Sure, you may see me set an error code,
but <i>it wasn't my idea</i>.
I'm just trying to put things back the way I found them.
<i>Keep looking backwards in your history</i>."
</p>
<p>
(The message also works forward in time:
If you want to catch <code>ERROR_<wbr>ACCESS_<wbr>DENIED</wbr></wbr></code> in the act,
you might set a breakpoint on <code>Set&shy;Last&shy;Error</code>,
and then get frustrated that the breakpoint keeps getting hit by
your logging function.
Switching the logging function to <code>Restore&shy;Last&shy;Error</code>
keeps the breakpoint on
<code>Set&shy;Last&shy;Error</code> from firing spuriously.)
</p>
<p>
The corrected version of the <code>Log&shy;Something</code>
function is therefore something like this:
</p>
<pre>
void LogSomething(blah blah)
{
 DWORD dwError = GetLastError();
 ... do logging stuff ...
 <font COLOR=blue>Restore</font>LastError(dwError);
}

// or if you prefer RAII

class PreserveLastError
{
public:
    PreserveLastError() : m_dwLastError(GetLastError()) {} 
    ~PreserveLastError() { <font COLOR=blue>Restore</font>LastError(m_dwLastError); }
private:
    DWORD m_dwLastError;
};
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-909753">
				<div id="div-comment-909753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803#comment-909753">
			April 29, 2011 at 7:16 am</a>		</div>

		<p>I just hope that the debugger is smart enough to realize that if these two functions are separate even if they both points at the same address to save space. But that may not be the case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-909763">
				<div id="div-comment-909763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">WndSks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803#comment-909763">
			April 29, 2011 at 7:31 am</a>		</div>

		<p>I did not know about this API, then again <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms679321%28v=VS.85%29.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms679321%28v=VS.85%29.aspx</a> and <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms680347%28v=VS.85%29.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms680347%28v=VS.85%29.aspx</a> don&#39;t know about it either. Did it exist in XP RTM or was it added in a SP? Either way it is safe to use in x64 builds&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-909803">
				<div id="div-comment-909803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephen Cleary</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803#comment-909803">
			April 29, 2011 at 7:52 am</a>		</div>

		<p>@WndSks: Same here. So, if it&#39;s not documented, aren&#39;t we supposed to ignore it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-909823">
				<div id="div-comment-909823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803#comment-909823">
			April 29, 2011 at 8:11 am</a>		</div>

		<p>That class may not be a good idea; as you yourself have said Raymond, who knows when that destructor would run?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-909843">
				<div id="div-comment-909843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803#comment-909843">
			April 29, 2011 at 8:37 am</a>		</div>

		<p>@MAZZTer, C++ destructors have deterministic behavior. They run when the item drops out of scope.</p>
<p>@WndSks, Matt Pietrek&#39;s article says it was introduced in Windows Server 2003, so it&#39;s not in XP.</p>
<p>If more people understand the way *LastError() works, maybe we can get rid of those silly &quot;An Error Occurred: The operation completed successfully&quot; dialogs that some apps love to display. Like this one: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/dancre/archive/2007/08/22/frustrating-error-using-remote-desktop.aspx" rel="nofollow">blogs.msdn.com/&#8230;/frustrating-error-using-remote-desktop.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-909853">
				<div id="div-comment-909853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">WndSks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803#comment-909853">
			April 29, 2011 at 8:50 am</a>		</div>

		<p>@Dave: XP.SP1 does export that function and wikipedia says it was released in 2002 and Win2003.RTM was released in 2003. A couple quotes from the article: &quot;Actually, the majority of the new APIs (relative to Windows 2000) first appeared in Windows XP, rather than in Windows Server 2003&quot; &quot;I&#39;ve compared the exports from the Windows Server 2003 version of NTDLL.DLL to the Windows 2000 version. As you might expect, lots of APIs were added and a few have disappeared&quot; And since the function is not documented as far as I can tell, the only thing we have to go on is whether kernel32 exports it or not&#8230;</p>
<p>(OT: The submit form eats my comment the first time so I have to repost, whats up with that?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-909893">
				<div id="div-comment-909893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hans</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803#comment-909893">
			April 29, 2011 at 11:00 am</a>		</div>

		<p>Isn&#39;t it always been that if you have an API function, which signals failure</p>
<p>by their special means (returning FALSE, NULL handle, INVALID_HANDLE_VALUE or whatever),</p>
<p>you only can get it&#39;s last error by GetLastError() before you call any other API function.</p>
<p>The caller of GetLastError() can not assume if he calls a log function, he still</p>
<p>get the error code of the API function which signaled failure before.</p>
<p>So I don&#39;t think RestoreLastError() helps for debugging, and I didn&#39;t know until reading</p>
<p>your blog that this function exists.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-909923">
				<div id="div-comment-909923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803#comment-909923">
			April 29, 2011 at 12:30 pm</a>		</div>

		<p>wndsks and Stephen Cleary: I can&#39;t find RestoreLastError either, but there&#39;s SetLastErrorEx, which looks even more pointless because it does the same thing AND has an ignored second argument. Umm, Raymond, can you shed light?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-909933">
				<div id="div-comment-909933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hans</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803#comment-909933">
			April 29, 2011 at 1:26 pm</a>		</div>

		<p>Ken, with API I meant windows API (aka system function) of course.</p>
<p>How a function of the the windows API itself uses other windows API functions to get the task done is up to itself, but also not interesting for me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-909943">
				<div id="div-comment-909943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803#comment-909943">
			April 29, 2011 at 1:27 pm</a>		</div>

		<p>@MAZZTer &#8212; the fact that in C++ you know when your destructors run (and the RAII implications that it carries) is most important thing that makes C++ preferable IMO to any managed language. &nbsp;This is in spite of all the bells and whistles that C# adds.</p>
<p>What Raymond did is perfectly fine in C++.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-909963">
				<div id="div-comment-909963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Pietrek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803#comment-909963">
			April 29, 2011 at 2:22 pm</a>		</div>

		<p>Thanks for the background Raymond! I had completely forgotten about point this out till you brought it up. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-909773">
				<div id="div-comment-909773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803#comment-909773">
			April 29, 2011 at 7:32 am</a>		</div>

		<p>Of course, setting a breakpoint in SetLastError will give you bajillions of false positives of various functions doing SetLastError(0) upon entry. &nbsp;You&#39;d probably want to make it a conditional breakpoint with the condition of dwErrCode!=0 (which you may need to write as something like *(int*)(ESP+8)!=0 or RCX!=0, depending on architecture, if you don&#39;t have symbols) to be somewhat useful.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-909973">
				<div id="div-comment-909973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">WndSks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803#comment-909973">
			April 29, 2011 at 2:52 pm</a>		</div>

		<p>@Ken Hagan: IIRC some components call SetLastErrorEx with a non 0 type, see RIP_INFO ( <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms680587%28v=vs.85%29.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms680587%28v=vs.85%29.aspx</a> ) for a list of SLE_* types&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-909913">
				<div id="div-comment-909913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803#comment-909913">
			April 29, 2011 at 12:23 pm</a>		</div>

		<p>But Hans, what about the caller&#39;s caller?</p>
<p>You may be calling an API and that API itself asks some other system to do something. The latter call fails. The first API wants to be able to log the failure but it has to be able to return to the original caller (you) in such a state that you can call GetLastError() and get the right answer, because as far as *you* are concerned, you *are* calling GetLastError() immediately after receiving the error code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-910023">
				<div id="div-comment-910023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803#comment-910023">
			April 30, 2011 at 12:54 am</a>		</div>

		<p>@Hans: I think functions (especially cleanup functions) should usually not call SetLastError on success. For example, a successful CloseHandle(hfile) after a failed WriteFile(hfile, &#8230;) should not unset the error code. However, some functions (such as GlobalUnlock used with the clipboard) do not follow this rule, and in those cases RestoreLastError can be useful.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-910043">
				<div id="div-comment-910043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803#comment-910043">
			April 30, 2011 at 9:29 am</a>		</div>

		<p>&quot;How a function of the the windows API itself uses other windows API functions to get the task done is up to itself, but also not interesting for me.&quot;</p>
<p>&#8230;which is precisely why that function may need to call RestoreLastError. You&#39;d only need it yourself if you wanted to present a similar behaviour to your own clients, which your clients might think is a reasonable thing to do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-910063">
				<div id="div-comment-910063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pavel Lebedinsky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803#comment-910063">
			April 30, 2011 at 7:08 pm</a>		</div>

		<p>The easiest way to catch a specific last error value in debugger is to set ntdll!g_dwLastErrorToBreakOn to that value.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-910153">
				<div id="div-comment-910153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110429-00/?p=10803#comment-910153">
			May 2, 2011 at 7:46 am</a>		</div>

		<p>@rs: You may be interested to know that OpenGL follows that model. &nbsp;If an error occurs inside some OpenGL function, the error is sticky &#8212; that error code does not change until you call glGetError() to retrieve it. &nbsp;This saves you the trouble of having to call glGetError() after every API call (of which there are many), so you can perform a big batch of rendering operations and then check to see if anything had an error.</p>
<p>This works well for a rendering API where function calls are extremely unlikely to fail (and when they do, it&#39;s usually something like an invalid parameter, doing something between glBegin() and glEnd(), or unsupported hardware), but I don&#39;t think that model works as well for an API such as Win32 because if you don&#39;t check forget to call GetLastError() after something inconsequential fails, you&#39;ve suddenly lost the ability to get error codes for other things that fail.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

