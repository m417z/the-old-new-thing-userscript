<html>
<head>
<title>The Windows 95 I/O system assumed that if it wrote a byte, then it could read it back</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The Windows 95 I/O system assumed that if it wrote a byte, then it could read it back</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 27, 2015 / year-entry #180</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150827-00/?p=91721</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In Windows 95, compressed data was read off the disk in three steps.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In Windows&nbsp;95,
compressed data was read off the disk in three steps.
<span id="more-91721"></span></p>
<ol>
<li>The raw compressed data was read into a temporary buffer.
</li>
<li>The compressed data was uncompressed into a second temporary buffer.
</li>
<li>The uncompressed data was copied to the
    application-provided I/O buffer.
</li>
</ol>
<p>
But you could save a step if the I/O buffer
was a full cluster:
</p>
<ol>
<li>The raw compressed data was read into a temporary buffer.
</li>
<li>The compressed data was uncompressed directly into the
    application-provided I/O buffer.
</li>
</ol>
<p>
A common characteristic of dictionary-based compression
is that a compressed stream can contain a code that says
"Generate a copy of bytes X through Y from the existing uncompressed data."
</p>
<p>
As a simplified example, suppose the cluster consisted of
two copies of the same 512-byte block.
The compressed data might say "Take these 512 bytes
and copy them to the output.
Then take bytes 0 through 511 of the uncompressed output
and copy them to the output."
</p>
<p>
So far, so good.
</p>
<p>
Well, except that if
the application wrote to the I/O buffer while the
read was in progress,
then the read would get corrupted because
it would copy the wrong bytes to the second half of the cluster.
</p>
<p>
Fortunately,
<a href="http://blogs.msdn.com/b/oldnewthing/archive/2015/08/26/10637513.aspx#10637667">
writing to the I/O buffer
is forbidden during the
read</a>,
so any application that pulled this sort of trick was breaking
the rules,
and if it got corrupted data,
well, that's its own fault.
(You can construct a similar scenario where writing to the buffer
during a write can result in corrupted data being written to disk.)
</p>
<p>
Things got even weirder if you passed a memory-mapped device
as your I/O buffer.
There was a bug that said,
"The splash screen for this MS-DOS game is all corrupted
if you run it from a compressed volume."
</p>
<p>
The reason was that the game issued an I/O
directly into the video frame buffer.
The EGA and VGA video frame buffers used
<a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/12/01/273018.aspx">
planar memory</a> and
<a href="http://cs.nyu.edu/~yap/classes/machineOrg/info/video.htm">
latching</a>.
When you read or write a byte in video memory,
the resulting behavior is a complicated combination of the byte
you wrote, the values in the latches, other configuration settings,
and the values already in memory.
The details aren't important;
the important thing is that
<i>video memory does not act like system RAM</i>.
Write a byte to video memory, then read it back,
and not only will you not get the same value back,
but you probably modified video memory in a strange way.
</p>
<p>
The game in question loaded its splash screen by issuing I/O
directly into video memory,
knowing that MS-DOS copies the result into the output buffer
byte by byte.
It set up the control registers and the latches in such a way
that then bytes written into memory go exactly where they should.
(It issued four reads into the same buffer,
with different control registers each time,
so that each read ended up being issued to a different plane.)
</p>
<p>
This worked great,
unless the disk was compressed.
</p>
<p>
The optimization above relied on the property that writing a byte
followed by reading the byte produces the byte originally written.
But this doesn't work for video memory because of the weird way
video memory works.
The result was that when the decompression engine tried to read
what it thought was the uncompressed data,
it was actually asking the video controller to do some strange
operations.
The result was corrupted decompressed data,
and corrupted video data.
</p>
<p>
The fix was to force double-buffering in non-device RAM
if the I/O buffer was
into device-mapped memory.
</p></p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1206971">
				<div id="div-comment-1206971" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150827-00/?p=91721#comment-1206971">
			August 27, 2015 at 7:07 am</a>		</div>

		<p>I must be strange for expecting read video memory to work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1206961">
				<div id="div-comment-1206961" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Elliott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150827-00/?p=91721#comment-1206961">
			August 27, 2015 at 7:22 am</a>		</div>

		<p>Reading planar video memory *can* work, depending how you&#39;ve set up the registers and the latches. But the game obviously didn&#39;t bother to do that, because it only wanted DOS to write into the buffer, not read from it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1206951">
				<div id="div-comment-1206951" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150827-00/?p=91721#comment-1206951">
			August 27, 2015 at 7:36 am</a>		</div>

		<p>@Joshua: You should never write a device driver then.</p>
<p>If you configured your memory mapping to be write-only then you are supposed to do only write operations on it. No safeguards from Windows or your compiler (doesn&#39;t matter if you are user-mode or kernel-mode).</p>
<p>And to know its still relevant today just look at the warnings in the DX12 docs about mapped memory:</p>
<p><a rel="nofollow" target="_new" href="https://msdn.microsoft.com/en-us/library/windows/desktop/dn788712.aspx">msdn.microsoft.com/&#8230;/dn788712.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-sean_limingmsn-com odd alt thread-odd thread-alt depth-1" id="comment-1206931">
				<div id="div-comment-1206931" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Sean+Liming' rel='external nofollow' class='url'>Sean Liming</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150827-00/?p=91721#comment-1206931">
			August 27, 2015 at 7:54 am</a>		</div>

		<p>I wonder if this is the reason the original Windows CE video driver was a double copy. The result was a dirty rectangle driver.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1206921">
				<div id="div-comment-1206921" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150827-00/?p=91721#comment-1206921">
			August 27, 2015 at 8:31 am</a>		</div>

		<p>The DOS game would not be governed by the Windows APIâ€™s restriction on reading from or writing to the buffer being used by an I/O operation, unless the DOS API had a similar restriction. Which, as far as I understand, it did not, as DoubleSpace only appeared in DOS 6 (renamed to DriveSpace in 6.22).</p>
<p>It would be DriveSpaceâ€™s responsibility to only extend the optimization to client programs written against the Windows API.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1206901">
				<div id="div-comment-1206901" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150827-00/?p=91721#comment-1206901">
			August 27, 2015 at 9:47 am</a>		</div>

		<p>@Yuri: But the decompression logic would have been handled by the DriveSpace VxD, which had no knowledge of where the request is coming from; it would just see a read request for file XYZ with a buffer at ABC. I don&#39;t think that VxDs really could tell where requests came from (i.e. Windows programs vs. DOS programs), but I could easily be mistaken because I never had to program at that low of a level.</p>
<p>FWIW, I used DriveSpace for a while way back when (and Stacker even before then) and dropped it in WfW 3.11 after too many data corruption events. I&#39;m sure that things got better in Windows 95 but was just bitten too many times to try again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1206891">
				<div id="div-comment-1206891" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150827-00/?p=91721#comment-1206891">
			August 27, 2015 at 3:01 pm</a>		</div>

		<p>&#8230;on Speccy video RAM sometimes was used even for code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1206801">
				<div id="div-comment-1206801" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150827-00/?p=91721#comment-1206801">
			August 28, 2015 at 8:12 am</a>		</div>

		<p>All the machines I have seen that used DOS/Win9x disk compression ran absurdly slow.</p>
<p>Things work much better now: recently I compressed a partition with Windows 10 and VS2015, and I don&#39;t notice any difference in performance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-1206781">
				<div id="div-comment-1206781" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150827-00/?p=91721#comment-1206781">
			August 28, 2015 at 9:41 am</a>		</div>

		<p>@Joshua: But if you multiplex your memory-mapped I/O, you can get away with half as many physical addresses! In general, I/O devices routinely use the same address for different functions if you read from the address versus writing to it. Essentially they use the read/write pin as an additional address line. A &#39;read&#39; may often invoke some behaviour from the device, with the actual value ending up on the data bus being meaningless, or the value written to the data bus for a &#39;write&#39; being unimportant, or being an additional parameter.</p>
<p>In other words, hardware is not RESTful. GET has side-effects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher odd alt thread-odd thread-alt depth-1" id="comment-1206721">
				<div id="div-comment-1206721" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150827-00/?p=91721#comment-1206721">
			August 28, 2015 at 12:06 pm</a>		</div>

		<p>@Joshua:</p>
<p>void cVGA::PutPixel(short int x, short int y, char color)</p>
<p> &nbsp;{</p>
<p> &nbsp; &nbsp;/* Each address accesses four neighboring pixels, so set</p>
<p> &nbsp; &nbsp; &nbsp; Write Plane Enable according to which pixel we want</p>
<p> &nbsp; &nbsp; &nbsp; to modify. &nbsp;The plane is determined by the two least</p>
<p> &nbsp; &nbsp; &nbsp; significant bits of the x-coordinate: */</p>
<p> &nbsp; &nbsp;outportb(0x3c4, 0x02);</p>
<p> &nbsp; &nbsp;outportb(0x3c5, 0x01 &lt;&lt; (x &amp; 3));</p>
<p> &nbsp; &nbsp;/* The offset of the pixel into the video segment is</p>
<p> &nbsp; &nbsp; &nbsp; offset = (width * y + x) / 4, and write the given</p>
<p> &nbsp; &nbsp; &nbsp; color to the plane we selected above. &nbsp;Heed the active</p>
<p> &nbsp; &nbsp; &nbsp; page start selection. */</p>
<p> &nbsp; &nbsp;Screen[(unsigned short int)(YTable[y]) + (x &gt;&gt; 2) + ActiveStart] = color;</p>
<p> }</p>
<p>char cVGA::GetPixel(short int x, short int y)</p>
<p> &nbsp;{</p>
<p> &nbsp; &nbsp;/* Select the plane from which we must read the pixel color: */</p>
<p> &nbsp; &nbsp;outportb(GRAC_ADDR, 0x04);</p>
<p> &nbsp; &nbsp;outportb(GRAC_ADDR+1, x &amp; 3);</p>
<p> &nbsp; &nbsp;return Screen[(unsigned short int)(YTable[y]) + (x &gt;&gt; 2) + ActiveStart];</p>
<p> &nbsp;}</p>
<p>Maybe that&#39;ll help?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher even thread-even depth-1" id="comment-1206701">
				<div id="div-comment-1206701" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150827-00/?p=91721#comment-1206701">
			August 28, 2015 at 12:33 pm</a>		</div>

		<p>Oh and since it&#39;ll come up:</p>
<p>#define outport outpw</p>
<p>#define outportb outp</p>
<p>#define inport inpw</p>
<p>#define inportb inp</p>
<p>#define SEQU_ADDR 0x3c4</p>
<p>#define CRTC_ADDR 0x3d4</p>
<p>#define GRAC_ADDR 0x3ce</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1206661">
				<div id="div-comment-1206661" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">boogaloo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150827-00/?p=91721#comment-1206661">
			August 30, 2015 at 1:55 pm</a>		</div>

		<p>@killer: The Amiga only ever shipped with video ram. You could add non-video ram, but the standard ram expansion on the A500 was a special type of &quot;video&quot; ram that could only be used by the CPU. Although a later Agnus chip revision fixed it so you could.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1206641">
				<div id="div-comment-1206641" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150827-00/?p=91721#comment-1206641">
			August 30, 2015 at 6:55 pm</a>		</div>

		<p>@Dave Bacher: That&#39;s a pretty good expansion of what was higher up. (That is, the readback works if the latches are set correctly.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher odd alt thread-odd thread-alt depth-1" id="comment-1206561">
				<div id="div-comment-1206561" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150827-00/?p=91721#comment-1206561">
			August 31, 2015 at 1:54 pm</a>		</div>

		<p>@Joshua:</p>
<p>That&#39;s the actual code from a 1992 MS-DOS video game, although those two routines are never actually called.</p>
<p>In the DOS version, no routine that does a write ever sets the read page, and no routine that does a read ever sets the write mask. &nbsp;Because the two are asymmetric, and the bus write was really slow. &nbsp;So the odds of the latches being correct are 25%, basically, pure random. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1206541">
				<div id="div-comment-1206541" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">boogaloo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150827-00/?p=91721#comment-1206541">
			September 1, 2015 at 2:18 am</a>		</div>

		<p>@Dave Bacher The odds are less than 25% that a written byte can be read back because the barrel shift or logical operation may have been enabled. <a rel="nofollow" target="_new" href="http://wiki.osdev.org/VGA_Hardware#The_Latches">wiki.osdev.org/VGA_Hardware</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

