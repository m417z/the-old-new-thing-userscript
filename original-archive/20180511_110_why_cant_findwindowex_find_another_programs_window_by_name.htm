<html>
<head>
<title>Why can't FindWindowEx find another program's window by name?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why can&#8217;t FindWindowEx find another program&#8217;s window by name?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 11, 2018 / year-entry #110</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180511-00/?p=98735</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Are you sure it's there?</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer had a test app that did something.
They then wanted to write a test harness for their test app.
The idea is that the test harness launches the test app,
finds the test app's <i>Start</i> button,
waits for it to become enabled,
and then presses it, and then does some more stuff.
The customer was stuck at the second step:
Find the <i>Start</i> button.
</p>
<pre>
  Console.WriteLine($"Main window handle: {hwnd}");
  IntPtr button = IntPtr.Zero;
  while (true) {
    button = FindWindowEx(hwnd, IntPtr.Zero, null, "Start");
    Console.WriteLine($"Start button window handle: {button}");
    if (button != IntPtr.Zero) break;
    Thread.Sleep(TimeSpan.FromSeconds(1));
  }
</pre>
<p>
The retry loop is to cover the race condition where the test harness
looks for the <i>Start</i> button before the test app creates it.
</p>
<blockquote CLASS="q"><p>
The main window handle is the handle we expect from the test app.
But even after a minute, with the <i>Start</i> button right there
on the screen, the test harness can't find it.
</p>
</blockquote>
<p>
Okay, so what would prevent <code>Find&shy;Window&shy;Ex</code> from
finding a window?
Here are some possibilities:
</p>
<ul>
<li>The thing you want isn't actually a window.
    It could be a
    <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20050211-00/?p=36473">
    windowless control</a>.
    (The fact that their test harness is written in C# suggests that
    maybe their test app is a WinForms or WPF program, both of which
    use windowless controls.)</li>
<li>The window title isn't exactly what you specified.
    Maybe there's an accelerator on it: <code>&amp;Start</code>.</li>
<li>The thing you want isn't a direct child of that window.
    Maybe it's a grandchild.</li>
<li>The thing you want isn't a descendent of that window.
    Maybe you're passing the wrong parent window.</li>
</ul>
<p>
Basically, all of these options boil down to
"<code>Find&shy;Window&shy;Ex</code> is not finding your window
because there is in fact no window that meets all the criteria you specified."
<code>Find&shy;Window&shy;Ex</code> is working exactly as defined.
You need to check that the window you want really does satisfy
the criteria you passed.
</p>
<p>
Double-checking with Spy++ showed that the customer was in the last case:
The wrong parent window was being passed.
They got the main window from the
<code>Process.MainWindowHandle</code> property.
But that property is synthetic.
Windows doesn't have a formal concept of a "main window";
a program can create multiple top-level visible windows,
and as far as Windows is
concerned, they are all of equal importance.
</p>
<p>
My guess as to what happened is that the test app created a splash
screen, and that got detected as "the main window".
Too bad the splash screen doesn't have a <i>Start</i> button in it.
</p>
<p>
The customer updated their test harness to perform an
<code>Enum&shy;Windows</code>
to find the top-level window
of the test app whose title indicates that it is the window
with the <i>Start</i> button.
</p>
<p>
But this is really a case of answering the question without
solving the problem.
</p>
<p>
If you have a test harness that wants to communicate with a test app,
you'd be better off having a formal mechanism for the test
harness to tell the test app what to do, and a formal mechanism
for the test app to report results.
Because I suspect the customer's test harness also polls
the test app waiting for the phrase <i>Test passed</i> or
<i>Test failed</i> to appear.
</p>
<p>
For example, the test harness can pass a <code>/auto</code> command line
option to the test app, and the test app goes into automated mode,
where it auto-presses the <i>Start</i> button,
auto-fills in the text boxes with the appropriate test values, and so on.
You might even have <code>/auto:config.xml</code> that configures what
the test app will do.
And then the test app signals whether the test was successful,
say by using special exit codes or printing a specific message to
<code>stdout</code>.
</p>
<p>
Because what's going to happen sooner or later
is that somebody's going to make
changes to the test app,
maybe rename or rearrange some buttons, or add a new text box
that needs to be filled in,
and inadvertently break the test harness.
</p>
<p>
The test harness and the test app are in cahoots.
Make the most of it.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1336655">
				<div id="div-comment-1336655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180511-00/?p=98735#comment-1336655">
			May 11, 2018 at 7:50 am</a>		</div>

		<p>&#8220;and inadvertently break the test harness.&#8221;</p>
<p>That&#8217;s not a bug, that&#8217;s a feature.</p>
<p>Anyway I took &#8220;in cahoots with&#8221; a step farther and compiled the test harness into the binary. It&#8217;s started with /3.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1336695">
				<div id="div-comment-1336695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Topping</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180511-00/?p=98735#comment-1336695">
			May 11, 2018 at 8:21 am</a>		</div>

		<p>Unfortunately, the -auto recommendation means they are testing a different code path than their users. Also, sooner or later somebody&#8217;s going to make changes to the app and forget to update the -auto mechanism. Of course, there are always going to be dependencies between an app under test and its test rig. The goal is to minimize them which is a pretty deep subject.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1336705">
				<div id="div-comment-1336705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180511-00/?p=98735#comment-1336705">
			May 11, 2018 at 8:32 am</a>		</div>

		<p>Yeah, driving a test app like this is crazy.  On the other hand, driving a real application like this is not so crazy, and would have the same problems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1336715">
				<div id="div-comment-1336715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://geelaw.blog/' rel='external nofollow' class='url'>Gee Law</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180511-00/?p=98735#comment-1336715">
			May 11, 2018 at 9:15 am</a>		</div>

		<p>You might want to create your app like Office team does &#8212; GUI is merely another way to manipulate COM objects. If you don&#8217;t do that, you might want to use Automation API and get accessibility at the same time.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1336885">
				<div id="div-comment-1336885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">The_Assimilator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180511-00/?p=98735#comment-1336885">
			May 13, 2018 at 11:32 pm</a>		</div>

		<p>You must be new here&#8230; Raymond&#8217;s blog is all about the customers who purposefully ignore the simplest, most well-documented way of achieving something in favour of the most convoluted, fragile, worst practices possible&#8230; and then bother Microsoft support, and eventually Raymond, when their terrible &#8220;solutions&#8221; fail terribly.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1336985">
				<div id="div-comment-1336985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://geelaw.blog/' rel='external nofollow' class='url'>Gee Law</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180511-00/?p=98735#comment-1336985">
			May 14, 2018 at 12:01 pm</a>		</div>

		<p>I&#8217;d not say I&#8217;m new. What I meant in the previous comment is that Raymond could&#8217;ve given a suggestion (instead of <code>/auto</code> command-line parameter) closer to what the customer was doing/asking for.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4" id="comment-1337015">
				<div id="div-comment-1337015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180511-00/?p=98735#comment-1337015">
			May 14, 2018 at 1:35 pm</a>		</div>

		<p>An <code>/auto</code> flag probably involves the least change to the customer&#8217;s existing infrastructure. Better would be to factor the test into a separate object, and have the test app be a GUI front-end to the test object, and the test harness be a programmatic front-end to the test object.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1336725">
				<div id="div-comment-1336725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180511-00/?p=98735#comment-1336725">
			May 11, 2018 at 11:05 am</a>		</div>

		<p>&#8220;sooner or later &#8230; somebody&#8217;s going to make changes to the test app, maybe rename or rearrange some buttons, or add a new text box that needs to be filled in,&#8221; </p>
<p>Or someone needs to test a localized version, where the Start button isn&#8217;t labeled Start but the translated Start.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1336805">
				<div id="div-comment-1336805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180511-00/?p=98735#comment-1336805">
			May 12, 2018 at 4:32 am</a>		</div>

		<p>Slight misinformation I think, WinForms doesn&#8217;t use windowless controls as far as I can tell. The base class of every WinForms control (&#8220;Control&#8221;) is creating a HWND for each and every control. I don&#8217;t know of any way to suppress that and still staying inside the WinForms framework. (You can of course build your own windowless control framework on top of WinForms, but then its no longer WinForms controls you are using.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1336875">
				<div id="div-comment-1336875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SomeGuyOnTheInternet</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180511-00/?p=98735#comment-1336875">
			May 13, 2018 at 10:15 pm</a>		</div>

		<p>Shoulda used DDE instead :-D</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1337855">
				<div id="div-comment-1337855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert Bennett</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180511-00/?p=98735#comment-1337855">
			May 16, 2018 at 12:45 pm</a>		</div>

		<p>More importantly, why can’t it set extended error information like the documentation promises?</p>
<p>ref: <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms633500" rel="nofollow">https://msdn.microsoft.com/en-us/library/windows/desktop/ms633500</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

