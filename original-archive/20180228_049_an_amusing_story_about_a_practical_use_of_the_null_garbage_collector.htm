<html>
<head>
<title>An amusing story about a practical use of the null garbage collector</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>An amusing story about a practical use of the null garbage collector</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 28, 2018 / year-entry #49</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The computer itself ceases to exist.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Some time ago,
I noted that
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20100809-00/?p=13203">
the null garbage collector is a valid garbage collector</a>
if the amount of RAM available to the runtime
is greater than the total memory requirements of the program.
This insight lets us make some statements about what you can assume
from garbage-collected languages.
</p>
<p>
But it also can be looked at as rules for deciding when you can simply
ignore the memory leaks in your program and just use a null
garbage collector.
Here's
<a HREF="https://groups.google.com/forum/message/raw?msg=comp.lang.ada/E9bNCvDQ12k/1tezW24ZxdAJ">
one developer who learned about an application of this principle</a>:
</p>
<pre>
From: k...@rational.com (Kent Mitchell)
Subject: Re: Does memory leak?
Date: 1995/03/31

Norman H. Cohen (nco...@watson.ibm.com) wrote:
: The only programs I know of with deliberate memory leaks are those whose
: executions are short enough, and whose target machines have enough
: virtual memory space, that running out of memory is not a concern.
: (This class of programs includes many student programming exercises and
: some simple applets and utilities; it includes few if any embedded or
: safety-critical programs.)

This sparked an interesting memory for me.  I was once working with a
customer who was producing on-board software for a missile.  In my analysis
of the code, I pointed out that they had a number of problems with storage
leaks.  Imagine my surprise when the customers chief software engineer said
"Of course it leaks".  He went on to point out that they had calculated the
amount of memory the application would leak in the total possible flight time
for the missile and then doubled that number.  They added this much
additional memory to the hardware to "support" the leaks.  Since the missile
will explode when it hits its target or at the end of its flight, the
ultimate in garbage collection is performed without programmer intervention.

--
Kent Mitchell                   | One possible reason that things aren't
Technical Consultant            | going according to plan is .....
Rational Software Corporation   | that there never *was* a plan!
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title"> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/oldnewthing/20180228-00/?p=98125#respond" style="display:none;">Cancel reply</a></small></h3>			<form action="https://blogs.msdn.microsoft.com/oldnewthing/wp-comments-post.php" method="post" id="commentform" class="comment-form">
				<p class="comment-form-comment"><textarea id="comment" name="comment" cols="45" rows="4" aria-required="true"></textarea></p><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" aria-required='true' required='required' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" maxlength="100" aria-describedby="email-notes" aria-required='true' required='required' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" maxlength="200" /></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit btn btn-default" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='98125' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="66b594a289" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="220"/></p>			</form>
			</div><!-- #respond -->
	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1326995">
				<div id="div-comment-1326995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125#comment-1326995">
			February 28, 2018 at 8:34 am</a>		</div>

		<p>Calling that the &#8220;null&#8221; garbage collector seems like not quite the right term. Maybe it&#8217;s more of a &#8220;stop-the-world&#8221; garbage collector.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125&#038;replytocom=1326995#respond' onclick='return addComment.moveForm( "div-comment-1326995", "1326995", "respond", "98125" )' aria-label='Reply to pc'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1327125">
				<div id="div-comment-1327125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125#comment-1327125">
			February 28, 2018 at 10:50 pm</a>		</div>

		<p>Not so much a garbage collector as a garbage (and everything else) distributor&#8230; in that all your memory, in use or not, is going to be distributed over a large area.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125&#038;replytocom=1327125#respond' onclick='return addComment.moveForm( "div-comment-1327125", "1327125", "respond", "98125" )' aria-label='Reply to Scarlet Manuka'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1327015">
				<div id="div-comment-1327015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125#comment-1327015">
			February 28, 2018 at 9:07 am</a>		</div>

		<p>I haven&#8217;t written embedded software in about 30 years (back then, it was for a Z-80).  However, back in those days we did things differently.<br />
In the &#8220;initialize&#8221; part of the program, we would allocate all the memory the program would ever need (and, in debug builds, we put canaries on the edges of all those allocated blocks).  Once the program was initialized, it ran without every allocating another byte.  Pretty much the opposite of a modern garbage collected app.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125&#038;replytocom=1327015#respond' onclick='return addComment.moveForm( "div-comment-1327015", "1327015", "respond", "98125" )' aria-label='Reply to Brian'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1327265">
				<div id="div-comment-1327265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125#comment-1327265">
			March 1, 2018 at 10:58 am</a>		</div>

		<p>Like Brian, in the embedded things I worked on you did not malloc() anything.  Global or stack allocations as needed. (&#8220;new() you ask ? what&#8217;s that ? You know what that is ? That is an extra 200 MB of libraries. We ain&#8217;t got no space for new()&#8221;</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125&#038;replytocom=1327265#respond' onclick='return addComment.moveForm( "div-comment-1327265", "1327265", "respond", "98125" )' aria-label='Reply to nathan_works'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1327025">
				<div id="div-comment-1327025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125#comment-1327025">
			February 28, 2018 at 9:09 am</a>		</div>

		<p>It&#8217;s all about knowing your run-time environment!</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125&#038;replytocom=1327025#respond' onclick='return addComment.moveForm( "div-comment-1327025", "1327025", "respond", "98125" )' aria-label='Reply to DWalker07'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1327045">
				<div id="div-comment-1327045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve Friedl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125#comment-1327045">
			February 28, 2018 at 9:54 am</a>		</div>

		<p>&#8220;Halt and Catch Fire&#8221; really is the ultimate null garbage collector.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125&#038;replytocom=1327045#respond' onclick='return addComment.moveForm( "div-comment-1327045", "1327045", "respond", "98125" )' aria-label='Reply to Steve Friedl'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1327075">
				<div id="div-comment-1327075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125#comment-1327075">
			February 28, 2018 at 11:29 am</a>		</div>

		<p>Little known air-fight technique, from a Russian classified engagement document:</p>
<p>&#8220;When the missile heads your way, turn on your afterburner. After 5 seconds, it runs of of heap space and falls from the sky.&#8221;</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125&#038;replytocom=1327075#respond' onclick='return addComment.moveForm( "div-comment-1327075", "1327075", "respond", "98125" )' aria-label='Reply to Pierre B.'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1327085">
				<div id="div-comment-1327085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125#comment-1327085">
			February 28, 2018 at 1:26 pm</a>		</div>

		<p>What scares me, is that this is <i>exactly</i> the sort of analysis the designers of the Ariane 4 software did, when they decided that overflow would not be a problem.  When the software was reused on the Ariane 5, they had forgotten they needed to redo that analysis, so they didn&#8217;t.  **BOOM!**</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125&#038;replytocom=1327085#respond' onclick='return addComment.moveForm( "div-comment-1327085", "1327085", "respond", "98125" )' aria-label='Reply to Martin Bonner'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1328195">
				<div id="div-comment-1328195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125#comment-1328195">
			March 6, 2018 at 1:54 pm</a>		</div>

		<p>Not a garbage collector, but a another case where the assumption about use case that was later invalidated was the Patriot missile batteries back during the gulf war.  They stored the time update in a 24 bit register and truncated into it in such a way that the time error accumulated; so the longer the system had been up the further off it was, and it used that value in intercept calculations in such a way as to cause misses when the error got too large.</p>
<p>Patriots being mobile tactical surface to air missiles the batteries were expected to be shut down and relocated frequently (to keep up with troops or to avoid counterattack or artillery).  Prolonged static use wasn&#8217;t an envisioned use case &#8211; so no need to design a system that resisted or compensated for accumulated error; you&#8217;d restart and wipe it out long before it became an issue.<br />
Then. come the gulf war. they ran for days on end looking for inbound Scuds and oops.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125&#038;replytocom=1328195#respond' onclick='return addComment.moveForm( "div-comment-1328195", "1328195", "respond", "98125" )' aria-label='Reply to Jonathan'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1327095">
				<div id="div-comment-1327095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125#comment-1327095">
			February 28, 2018 at 1:41 pm</a>		</div>

		<p>Does this mean that the Halting Problem has been solved?</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125&#038;replytocom=1327095#respond' onclick='return addComment.moveForm( "div-comment-1327095", "1327095", "respond", "98125" )' aria-label='Reply to 12BitSlab'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1327105">
				<div id="div-comment-1327105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125#comment-1327105">
			February 28, 2018 at 4:18 pm</a>		</div>

		<p>Oaw..that&#8217;s..I have no words. Having worked once in embedded world and dealing with cars on that world the constraints were insane from the law point of view. Those cars were Ford and Mazda, and 99% of the code was actually there to implement the law, ass covering and whatnot from judicial point of view. This story triggered me at fundamental level, especially remembering a discussion I had with group leader at the time regarding a possible improvement I had, which made me very proud back then, where the chip load would go below 70% and the GL said: &#8220;then we can go buy a lower specs chip and the load will be bumped back at 90%, and cut some costs, right?&#8221;. You see, back then if the resulted embedded application would not be between 70% and 90% time, the micro-controller would be replaced with a better or worse version of it.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125&#038;replytocom=1327105#respond' onclick='return addComment.moveForm( "div-comment-1327105", "1327105", "respond", "98125" )' aria-label='Reply to Danny'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1327355">
				<div id="div-comment-1327355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dalek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125#comment-1327355">
			March 1, 2018 at 3:45 pm</a>		</div>

		<p>It ends with division by overflow (as in an undefined amount of pieces) or you could look at it as a class whose destructor always succeeds.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125&#038;replytocom=1327355#respond' onclick='return addComment.moveForm( "div-comment-1327355", "1327355", "respond", "98125" )' aria-label='Reply to dalek'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fjeldse even thread-odd thread-alt depth-1" id="comment-1327405">
				<div id="div-comment-1327405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Erik+F' rel='external nofollow' class='url'>Erik F</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125#comment-1327405">
			March 1, 2018 at 8:50 pm</a>		</div>

		<p>How much environmental damage occurs when the bit bucket is blown up? Where do those bits end up? Inquiring minds want to know!</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125&#038;replytocom=1327405#respond' onclick='return addComment.moveForm( "div-comment-1327405", "1327405", "respond", "98125" )' aria-label='Reply to Erik F'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1327655">
				<div id="div-comment-1327655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125#comment-1327655">
			March 3, 2018 at 7:03 pm</a>		</div>

		<p>There is a story (perhaps apocryphal) that the early designs of the gun type (&#8220;little boy&#8221;) atomic bomb gave the Manhattan project grief due to the very heavy barrel they would need to withstand the protected wear on it.</p>
<p>Then they took a step back and realized that they were designing for many shots, but this gun would need to fire only once&#8230;</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125&#038;replytocom=1327655#respond' onclick='return addComment.moveForm( "div-comment-1327655", "1327655", "respond", "98125" )' aria-label='Reply to Yukkuri'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1327845">
				<div id="div-comment-1327845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125#comment-1327845">
			March 5, 2018 at 10:26 am</a>		</div>

		<p>This reminds me of the evolution of Python&#8217;s garbage collection algorithm:</p>
<p>1.x: Everything is reference counted.  If you leak a cycle, it leaks.<br />
2.x &#8211; 3.3: If you leak a cycle, and one or more of the objects involved has a finalizer, the whole cycle leaks.  Non-cyclic garbage is always collected.<br />
3.4+: All garbage is collected (aside from some backwards-compatibility constraints for C extension modules written before 3.4 existed).  Finalizers are run at most once (as an implementation detail of CPython; other implementations are allowed to call them multiple times).</p>
<p>The problem with the 1.x and 2.x approaches is that under both of them, finalizers always ran reliably or not at all, which made finalization seem artificially reliable under testing.  So you see people do evil things like contents = [open(path).read() for path in paths], with the files closed automatically by the finalizer.  Unfortunately, this *still* works, because the reference implementation is refcounted in addition to standard garbage collection.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180228-00/?p=98125&#038;replytocom=1327845#respond' onclick='return addComment.moveForm( "div-comment-1327845", "1327845", "respond", "98125" )' aria-label='Reply to Kevin'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

