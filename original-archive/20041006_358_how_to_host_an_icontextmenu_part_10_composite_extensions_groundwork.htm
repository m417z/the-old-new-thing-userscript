<html>
<head>
<title>How to host an IContextMenu, part 10 - Composite extensions - groundwork</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How to host an IContextMenu, part 10 &#8211; Composite extensions &#8211; groundwork</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 6, 2004 / year-entry #359</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20041006-00/?p=37643</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Preparing to combine multiple context menu extensions into one.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
You might wonder why
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/icontextmenu/icontextmenu.asp">
the <code>IContextMenu</code> interface</a>
operates on menu identifier offsets so much
rather than with the menu identifiers themselves.
</p>
<p>
The reason is to support something which I will call "compositing".
</p>
<p>
You may have multiple context menu extensions that you want to
combine into one giant context menu extension.  The shell does this
all over the place.  For example, the context menu we have been
playing with all this time is really a composite of several
individual context menu extensions: the static registry verbs
plus all the COM-based extensions like "Send To", "Open With",
and anything else that may have been added by a program you installed
(like a virus checker).
</p>
<p>
So before we can write a compositor, we need to 
have a second context menu to composite.  Here's a quickie that
implements two commands, let's call them "Top" and "Next" for lack
of anything interesting to do.
</p>
<pre>
class CTopContextMenu : public IContextMenu
{
public:
  // *** IUnknown ***
  STDMETHODIMP QueryInterface(REFIID riid, void **ppv);
  STDMETHODIMP_(ULONG) AddRef();
  STDMETHODIMP_(ULONG) Release();

  // *** IContextMenu ***
  STDMETHODIMP QueryContextMenu(HMENU hmenu,
                          UINT indexMenu, UINT idCmdFirst,
                          UINT idCmdLast, UINT uFlags);
  STDMETHODIMP InvokeCommand(
                          LPCMINVOKECOMMANDINFO lpici);
  STDMETHODIMP GetCommandString(
                          UINT_PTR    idCmd,
                          UINT        uType,
                          UINT      * pwReserved,
                          LPSTR       pszName,
                          UINT        cchMax);

  static HRESULT Create(REFIID riid, void **ppv);

private:
  CTopContextMenu() : m_cRef(1), m_cids(0) { }

private:
  HRESULT ValidateCommand(UINT_PTR idCmd, BOOL fUnicode,
                          UINT *puOffset);
  HRESULT Top(LPCMINVOKECOMMANDINFO lpici);
  HRESULT Next(LPCMINVOKECOMMANDINFO lpici);

private:
  ULONG m_cRef;
  UINT  m_cids;
};
</pre>
<p>
The class declaration isn't particularly interesting.  We
are not owner-draw so we don't bother implementing
<code><a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/icontextmenu2/icontextmenu2.asp"
>IContextMenu2</a></code> or
<code><a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/icontextmenu3/icontextmenu3.asp"
>IContextMenu3</a></code>.
</p>
<p>
First, some basic paperwork for getting off the ground.</p>
<pre>
HRESULT CTopContextMenu::Create(REFIID riid, void **ppv)
{
  *ppv = NULL;
  HRESULT hr;
  CTopContextMenu *self = new CTopContextMenu();
  if (self) {
    hr = self-&gt;QueryInterface(riid, ppv);
    self-&gt;Release();
  } else {
    hr = E_OUTOFMEMORY;
  }
  return hr;
}
</pre>
<p>
We have two commands. Instead of hard-coding the numbers
<code>0</code> and <code>1</code>,
let's give them nice names.
</p>
<pre>
#define TOPCMD_TOP      0
#define TOPCMD_NEXT     1
#define TOPCMD_MAX      2
</pre>
<p>
And here's a table that we're going to use to help us manage
these two commands.
</p>
<pre>
const struct COMMANDINFO {
  LPCSTR  pszNameA;
  LPCWSTR pszNameW;
  LPCSTR  pszHelpA;
  LPCWSTR pszHelpW;
} c_rgciTop[] = {
  { "top",  L"top",
    "The top command",  L"The top command", }, // TOPCMD_TOP
  { "next", L"next",
    "The next command", L"The next command", },// TOPCMD_NEXT
};
</pre>
<p>
Our <code>TOPCMD_*</code>
values conveniently double as indices into the
<code>c_rgciTop</code> array.
</p>
<p>
Next come the boring parts of a COM object:
</p>
<pre>
HRESULT CTopContextMenu::QueryInterface(REFIID riid, void **ppv)
{
  IUnknown *punk = NULL;
  if (riid == IID_IUnknown) {
    punk = static_cast&lt;IUnknown*&gt;(this);
  } else if (riid == IID_IContextMenu) {
    punk = static_cast&lt;IContextMenu*&gt;(this);
  }

  *ppv = punk;
  if (punk) {
    punk-&gt;AddRef();
    return S_OK;
  } else {
    return E_NOINTERFACE;
  }
}

ULONG CTopContextMenu::AddRef()
{
  return ++m_cRef;
}

ULONG CTopContextMenu::Release()
{
  ULONG cRef = --m_cRef;
  if (cRef == 0) delete this;
  return cRef;
}
</pre>
<p>
Finally, we get to something interesting:
<code><a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/icontextmenu/querycontextmenu.asp"
>IContextMenu::QueryContextMenu</a></code>.
Things to watch out for in the code below:
</p>
<ul>
<li>Checking whether there is room between
    <code>idCmdFirst</code> and
    <code>idCmdLast</code> is complicated by the fact that
    <code>idCmdLast</code> is
    endpoint-<strong>inclusive</strong>, which forces a strange <code>+1</code>.
    Another reason to
    <a HREF="/oldnewthing/archive/2004/02/18/75652.aspx">
    prefer endpoint-exclusive ranges</a>.</p>
<li>If the <code>CMF_DEFAULTONLY</code> flag is set, then we don't bother
    adding our menu items since none of our options is the default
    menu item.
</ul>
<pre>
HRESULT CTopContextMenu::QueryContextMenu(
    HMENU hmenu, UINT indexMenu, UINT idCmdFirst,
    UINT idCmdLast, UINT uFlags)
{
  m_cids = 0;

  if ((int)(idCmdLast - idCmdFirst + 1) &gt;= TOPCMD_MAX &amp;&amp;
    !(uFlags &amp; CMF_DEFAULTONLY)) {
    InsertMenu(hmenu, indexMenu + TOPCMD_TOP, MF_BYPOSITION,
               idCmdFirst + TOPCMD_TOP, TEXT("Top"));
    InsertMenu(hmenu, indexMenu + TOPCMD_NEXT, MF_BYPOSITION,
               idCmdFirst + TOPCMD_NEXT, TEXT("Next"));
    m_cids = TOPCMD_MAX;
  }

  return MAKE_HRESULT(SEVERITY_SUCCESS, 0, m_cids);
}
</pre>
<p>
In order to implement the next few methods, we need to have
some culture-invariant comparison functions.
</p>
<pre>
int strcmpiA_invariant(LPCSTR psz1, LPCSTR psz2)
{
  return CompareStringA(LOCALE_INVARIANT, NORM_IGNORECASE,
                        psz1, -1, psz2, -1) - CSTR_EQUAL;
}

int strcmpiW_invariant(LPCWSTR psz1, LPCWSTR psz2)
{
  return CompareStringW(LOCALE_INVARIANT, NORM_IGNORECASE,
                        psz1, -1, psz2, -1) - CSTR_EQUAL;
}
</pre>
<p>
These are like the strcmpi functions except that they
use the invariant locale since they will be used to compare
canonical strings rather than strings that are meaningful to
an end user.
(<a HREF="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/resources/strings/stringreference/stringfunctions/comparestring.asp"
>More discussion here in MSDN</a>.)
</p>
<p>
Now we have enough to write a helper function which is
central to the context menu: Figuring out which command
somebody is talking about.
</p>
<p>
Commands can be passed to the <code>IContextMenu</code> interface either
(a)&nbsp;by ordinal or by name, and either (b)&nbsp;as ANSI or
as Unicode.  This counts as either three ways or four ways,
depending on whether you treat "ANSI as ordinal" and "Unicode
as ordinal" as the same thing or not.
</p>
<pre>
HRESULT CTopContextMenu::ValidateCommand(UINT_PTR idCmd,
                        BOOL fUnicode, UINT *puOffset)
{
  if (!IS_INTRESOURCE(idCmd)) {
    if (fUnicode) {
      LPCWSTR pszMatch = (LPCWSTR)idCmd;
      for (idCmd = 0; idCmd &lt; TOPCMD_MAX; idCmd++) {
        if (strcmpiW_invariant(pszMatch,
                               c_rgciTop[idCmd].pszNameW) == 0) {
          break;
        }
      }
    } else {
      LPCSTR pszMatch = (LPCSTR)idCmd;
      for (idCmd = 0; idCmd &lt; TOPCMD_MAX; idCmd++) {
        if (strcmpiA_invariant(pszMatch,
                               c_rgciTop[idCmd].pszNameA) == 0) {
          break;
        }
      }
    }
  }

  if (idCmd &lt; m_cids) {
    *puOffset = (UINT)idCmd;
    return S_OK;
  }

  return E_INVALIDARG;
}
</pre>
<p>
This helper function takes a "something" parameter in the
form of a <code>UINT_PTR</code> and a flag that indicates whether that
"something" is ANSI or Unicode.  The function itself checks
whether the "something" is a string or an ordinal.  If a string,
then it converts that string into an ordinal by looking for
it in the table of commands in the appropriate character set
and using a locale-insensitive comparison.
Notice that if the string is not found, then
<code>idCmd</code> is left equal to <code>TOPCMD_MAX</code>,
which is an invalid value (and therefore is neatly handled
by the fall-through).
</p>
<p>
After the (possibly failed) conversion to an ordinal, the
ordinal is checked for validity; if valid, then the ordinal
is returned back for further processing.
</p>
<p>
With this helper function the implementation of the other methods
of the <code>IContextMenu</code> interface are a lot easier.
</p>
<p>
We continue with the <code>IContextMenu::InvokeCommand</code> method:</p>
<pre>
HRESULT CTopContextMenu::InvokeCommand(
                            LPCMINVOKECOMMANDINFO lpici) {

  CMINVOKECOMMANDINFOEX* lpicix = (CMINVOKECOMMANDINFOEX*)lpici;
  BOOL fUnicode = lpici-&gt;cbSize &gt;= sizeof(CMINVOKECOMMANDINFOEX) &amp;&amp;
                  (lpici-&gt;fMask &amp; CMIC_MASK_UNICODE);
  UINT idCmd;
  HRESULT hr = ValidateCommand(fUnicode ? (UINT_PTR)lpicix-&gt;lpVerbW
                                        : (UINT_PTR)lpici-&gt;lpVerb,
                               fUnicode, &amp;idCmd);
  if (SUCCEEDED(hr)) {
    switch (idCmd) {
    case TOPCMD_TOP: hr = Top(lpici); break;
    case TOPCMD_NEXT: hr = Next(lpici); break;
    default: hr = E_INVALIDARG; break;
    }
  }
  return hr;
}
</pre>
<p>
Here is a case where the "Are there three cases or four?" question
lands squarely on the side of "four".  There are two forms of the
<code>CMINVOKECOMMANDINFO</code> structure, the base structure (which is
ANSI-only) and the extended structure
<code>CMINVOKECOMMANDINFOEX</code> which adds Unicode support.
</p>
<p>
If the structure is <code>CMINVOKECOMMANDINFOEX</code> and the
<code>CMIC_MASK_UNICODE</code> flag is set, then the Unicode fields
of the <code>CMINVOKECOMMANDINFOEX</code> structure should be used
in preference to the ANSI ones.
</p>
<p>
This means that there are indeed four scenarios:
</p>
<ol>
<li>ANSI string in <code>lpVerb</code> member.
<li>Ordinal in <code>lpVerb</code> member.
<li>Unicode string in <code>lpVerbW</code> member.
<li>Ordinal in <code>lpVerbW</code> member.
</ol>
<p>
After figuring out whether the parameter is ANSI or Unicode,
we ask <code>ValidateCommand</code> to do the work of validating
the verb and converting it to an ordinal, at which point we use
the ordinal in a <code>switch</code> statement to dispatch the
actual operation.
</p>
<p>
Failing to implement string-based command invocation is an
extremely common oversight in context menu implementations.
Doing so prevents people from invoking
your verbs programmatically.
</p>
<p>
"Why should I bother to let
people invoke my verbs programmatically?"
</p>
<p>
Because if you don't,
then people won't be able to write programs like the one we are
developing in this series of articles!  For example, suppose
your context menu extension lets people "Frob" a file.  If you
don't expose this verb programmability, then it is impossible to write
a program that, say, takes all the files modified in the last
twenty-four hours and Frobs them.
</p>
<p>
(I'm always amused by the people who complain
that Explorer doesn't expose enough customizability
programmatically,
while simultaneously not providing the same degree of
programmatic customizability
in their own programs.)
</p>
<p>
Oh wait, I guess I should implement those two operations.
They don't do anything particularly interesting.
</p>
<pre>
HRESULT CTopContextMenu::Top(LPCMINVOKECOMMANDINFO lpici)
{
  MessageBox(lpici-&gt;hwnd, TEXT("Top"), TEXT("Title"), MB_OK);
  return S_OK;
}

HRESULT CTopContextMenu::Next(LPCMINVOKECOMMANDINFO lpici)
{
  MessageBox(lpici-&gt;hwnd, TEXT("Next"), TEXT("Title"), MB_OK);
  return S_OK;
}
</pre>
<p>
The remaining method is
<code>IContextMenu::GetCommandString</code>, which is probably
the one people most frequently get wrong since the consequences of
getting it wrong are not immediately visible to the implementor.
It is the people who are trying to access the context menu
programmatically who most likely to notice that the method isn't
working properly.
</p>
<pre>
HRESULT CTopContextMenu::GetCommandString(
                            UINT_PTR    idCmd,
                            UINT        uType,
                            UINT      * pwReserved,
                            LPSTR       pszName,
                            UINT        cchMax)
{
  UINT id;
  HRESULT hr = ValidateCommand(idCmd, uType &amp; GCS_UNICODE, &amp;id);
  if (FAILED(hr)) {
    if (uType == GCS_VALIDATEA || uType == GCS_VALIDATEW) {
      hr = S_FALSE;
    }
    return hr;
  }

  switch (uType) {
  case GCS_VERBA:
    lstrcpynA(pszName, c_rgciTop[id].pszNameA, cchMax);
    return S_OK;

  case GCS_VERBW:
    lstrcpynW((LPWSTR)pszName, c_rgciTop[id].pszNameW, cchMax);
    return S_OK;

  case GCS_HELPTEXTA:
    lstrcpynA(pszName, c_rgciTop[id].pszHelpA, cchMax);
    return S_OK;

  case GCS_HELPTEXTW:
    lstrcpynW((LPWSTR)pszName, c_rgciTop[id].pszHelpW, cchMax);
    return S_OK;

  case GCS_VALIDATEA:
  case GCS_VALIDATEW:
    return S_OK;    // all they wanted was validation
  }

  return E_NOTIMPL;
}
</pre>
<p>
Here again we use the
<code>ValidateCommand</code> method to do the hard work
of validating the command, which is passed in the
<code>idCmd</code> parameter, with interpretive assistance
in the <code>GCS_UNICODE</code> flag of the <code>uType</code>
parameter.
</p>
<p>
If the command is not valid, then we propagate the error code,
except in the <code>GCS_VALIDATE</code> cases, where the documentation
says that we should return <code>S_FALSE</code> to indicate that
the command is not valid.
</p>
<p>
If the command is valid, we return the requested
information, which is handled by a simple <code>switch</code>
statement.
</p>
<p>
Okay, now that we have this context menu, we can even test it
out a little bit.  Throw out the changes from
<a HREF="/oldnewthing/archive/2004/10/04/237507.aspx">
part 9</a>
and return to the program as it was in
<a HREF="/oldnewthing/archive/2004/09/28/235242.aspx">
part 6</a>, making the following change to the
<code>OnContextMenu</code> function:
</p>
<pre>
void OnContextMenu(HWND hwnd, HWND hwndContext, int xPos, int yPos)
{
  POINT pt = { xPos, yPos };
  if (pt.x == -1 &amp;&amp; pt.y == -1) {
    pt.x = pt.y = 0;
    ClientToScreen(hwnd, &amp;pt);
  }

  IContextMenu *pcm;
  if (SUCCEEDED(<font COLOR=blue>CTopContextMenu::Create(</font>
                    IID_IContextMenu, (void**)&amp;pcm))) {
    ...
</pre>
<p>
We now obtain our context menu not by calling
the <code>GetUIObjectOfFile</code> function but rather
by constructing a <code>CTopContextMenu</code> object.
Since our <code>CTopContextMenu</code> implements
<code>IContextMenu</code>, all the remaining code can be
left unchanged.
</p>
<p>
When you run this program, observe that even the help text works.
</p>
<p>
Ah, one of the powers of operating with interfaces rather than
objects:  You can swap out the object and the rest of the code
doesn't even realize what happened, so long as the interface stays
the same.
</p>
<p>
Okay, today was a long day spent just laying groundwork,
just writing what has to be written.  No breakthroughs,
no "aha" moments, just typing.  Read the method, understand
what you have to do, and do it.
</p>
<p>
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/10/07/239197.aspx">
Next time</a>, we're going to see context menu composition,
using this context menu as one of the components.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-215173">
				<div id="div-comment-215173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nonamedpirate</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041006-00/?p=37643#comment-215173">
			October 6, 2004 at 8:47 am</a>		</div>

		<p>beautiful</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-215213">
				<div id="div-comment-215213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041006-00/?p=37643#comment-215213">
			October 6, 2004 at 11:47 am</a>		</div>

		<p>This series is great.  Thanks Raymond!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-215263">
				<div id="div-comment-215263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041006-00/?p=37643#comment-215263">
			October 6, 2004 at 4:46 pm</a>		</div>

		<p>Since IContextMenu derives from IUnknown, its assignment to punk means &quot;Give me that IUnknown that IContextMenu is derived from&quot; (as opposed to the IUnknown that some other interface may be derived from). The distinction is important in the case of tear-offs. Could you provide a scenario where the above code is wrong? I&#8217;m not seeing it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-215283">
				<div id="div-comment-215283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041006-00/?p=37643#comment-215283">
			October 6, 2004 at 5:57 pm</a>		</div>

		<p>Err that&#8217;s not right either, you would need IContextMenu to look like : Foo, IUnknown, but you get the idea. You want the IContextMenu interface but you&#8217;re returning the IUnknown one in this code and it just works in MS&#8217;s implementation but it isn&#8217;t guaranteed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-215253">
				<div id="div-comment-215253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041006-00/?p=37643#comment-215253">
			October 6, 2004 at 4:21 pm</a>		</div>

		<p>The new expression should be new (std::nothrow) and the QueryInterface looks bunk to me:</p>
<p>  IUnknown *punk = NULL;<br />
<br />  if (riid == IID_IUnknown) {<br />
<br />    punk = static_cast&lt;IUnknown*&gt;(this);<br />
<br />  } else if (riid == IID_IContextMenu) {<br />
<br />    punk = static_cast&lt;IContextMenu*&gt;(this);<br />
<br />  }</p>
<p>the this ptr gets cast to IUnknown in both cases (the static cast is redundant here) and the ptr that gets returned is the one to the IUnknown base class. Because there is no multiple-inheritence involved, the right thing happens in MS&#8217;s implementation of inheritence, but this code is wrong. punk should be a void * instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-215273">
				<div id="div-comment-215273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041006-00/?p=37643#comment-215273">
			October 6, 2004 at 5:42 pm</a>		</div>

		<p>I thought you&#8217;re not supposed to be returning the IUnknown interface, you&#8217;re supposed to be returning the interface of the class you&#8217;re querying. The code that calls QueryInterface looks like:</p>
<p>IContextMenu *cm;<br />
<br />p-&gt;QueryInterface(IID_IContextMenu, (void**)&amp;cm);</p>
<p>This works because in Microsoft&#8217;s implementation of single inheritence, it uses vtables and no offsetting the this ptr during the call of virtual functions. If you were to do something like:</p>
<p>struct Foo { char dummy; };</p>
<p>class CTopContextMenu : public Foo, public IContextMenu { &#8230; };</p>
<p>This would probably crash (ignoring the fact that QueryInterface is undefined according to the C++ standard in the first place, but I&#8217;ll save that diatribe for later).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-215293">
				<div id="div-comment-215293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041006-00/?p=37643#comment-215293">
			October 6, 2004 at 6:06 pm</a>		</div>

		<p>While it&#8217;s true that</p>
<p>(void*)(IUnknown*)pcm == (void*)pcm</p>
<p>is not guaranteed by the C++ standard, it &gt;is&lt; however guaranteed by the COM ABI.</p>
<p><a target="_new" href="http://weblogs.asp.net/oldnewthing/archive/2004/02/05/68017.aspx" rel="nofollow">http://weblogs.asp.net/oldnewthing/archive/2004/02/05/68017.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-215323">
				<div id="div-comment-215323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">P-M</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041006-00/?p=37643#comment-215323">
			October 7, 2004 at 3:13 am</a>		</div>

		<p>Hello<br />
<br />Won&#8217;t this stuff become obsolete soon,<br />
<br />when Longhorn comes out ?</p>
<p>Thanks</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-215333">
				<div id="div-comment-215333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041006-00/?p=37643#comment-215333">
			October 7, 2004 at 5:46 am</a>		</div>

		<p>None of this stuff will be obsolete for a VERY, VERY, VERY long time :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-357843">
				<div id="div-comment-357843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.ailight.jp/blog/sha256/archive/2006/03/23/11241.aspx' rel='external nofollow' class='url'>社本＠ワック Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041006-00/?p=37643#comment-357843">
			March 22, 2006 at 1:33 pm</a>		</div>

		<p>IContextMenu のホスト方法 &#8211; Shell</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-401263">
				<div id="div-comment-401263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://notgartner.com/posts/744.aspx' rel='external nofollow' class='url'>Community Blogs</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041006-00/?p=37643#comment-401263">
			July 16, 2006 at 11:16 am</a>		</div>

		<p>I&#8217;ve been following in awe the series of posts (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) by Raymond Chen about</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

