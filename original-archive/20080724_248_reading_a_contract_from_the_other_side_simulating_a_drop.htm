<html>
<head>
<title>Reading a contract from the other side: Simulating a drop</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Reading a contract from the other side: Simulating a drop</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 24, 2008 / year-entry #249</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080724-00/?p=21483</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Most people, when they think of the IDropTarget interface, think only of implementing a drop target. But you can read the contract from the other side, because the description of how a drag source interacts with a drop target tells you how to be a drag source. To summarize, the sequence of drop target operations...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Most people, when they think of the
<code>IDropTarget</code> interface,
think only of implementing a drop target.
But you can read the contract from the other side,
because the description of how a drag source interacts with a drop target
tells you how to be a drag source.
</p>
<p>
To summarize, the sequence of drop target operations go like this:
</p>
<ul>
<li><code>IDropTarget::DragEnter</code> is called to indicate that
    an object has been dragged into the drop target.
    If the drop target returns a failure code, then the drop operation
    ends immediately.</p>
<li>Otherwise, <code>IDropTarget::DragOver</code> calls
    are made to advise the drop target as to the object's location.</p>
<li>If the user completes the drop operation, then call
    <code>IDropTarget::Drop</code>.
    Otherwise call <code>IDropTarget::Leave</code>.
    A drop operation can fail to complete because the user hit the
    Escape key, for example, or dragged the mouse out of the drop target.
</ul>
<p>
Let's write a simple program that drops one file onto another.
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;shellapi.h&gt;
#include &lt;tchar.h&gt;

... Insert the function <a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/09/20/231739.aspx">GetUIObjectOfFile</a> here ...

int __cdecl wmain(int argc, WCHAR **argv)
{
 if (argc == 3 &amp;&amp; SUCCEEDED(CoInitialize(NULL))) {
  IDataObject *pdto;
  if (SUCCEEDED(GetUIObjectOfFile(NULL, argv[1],
                         IID_IDataObject, (void**)&amp;pdto))) {
   IDropTarget *pdt;
   if (SUCCEEDED(GetUIObjectOfFile(NULL, argv[2],
                          IID_IDropTarget, (void**)&amp;pdt))) {
    POINTL pt = { 0, 0 };
    DWORD dwEffect = DROPEFFECT_COPY | DROPEFFECT_LINK;
    if (SUCCEEDED(pdt-&gt;DragEnter(pdto, MK_LBUTTON,
                                 pt, &amp;dwEffect))) {
     dwEffect &amp;= DROPEFFECT_COPY | DROPEFFECT_LINK;
     if (dwEffect) {
      pdt-&gt;Drop(pdto, MK_LBUTTON, pt, &amp;dwEffect);
     } else {
      pdt-&gt;DragLeave();
     }
    }
    pdt-&gt;Release();
   }
   pdto-&gt;Release();
  }
  CoUninitialize();
 }
 return 0;
}
</pre>
<p>
This is a pretty straightforward implementation of the
host side of the drag/drop protocol.
Run this program with the <i>full paths</i> to two files,
the first being the file to drop, and the second being
the file you want to drop it onto.
(Modifying this program to accept relative paths is left
as an exercise for the reader.)
For example, you might try
</p>
<pre>
fakedrop c:\autoexec.bat c:\windows\notepad.exe
</pre>
<p>
Now, sure, dropping a file on a program is nothing exciting.
You could've just run the program with the file as the
command line argument, after all.
But that's looking at it too narrowly;
you are simulating a drop operation,
after all.
For example,
you can drop a file onto a shortcut to a printer, and the
file will print;
or you can drop a file onto a folder and it will be copied
there (since we specified <code>DROPEFFECT_COPY | DROPEFFECT_LINK</code>,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/11/12/256472.aspx">
but folders prefer copy to link if the Ctrl+Shift keys are not held down</a>);
or you can drop a file onto the
<code>Mail Recipient.MAPIMail</code> shortcut in your
"Send To" folder to create a mail message with the file as
an attachment.
</p>
<p>
Oh wait, that last example with
<code>Mail Recipient.MAPIMail</code>
doesn't work.
We'll look at why next time,
although I suspect you already know the reason.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-649483">
				<div id="div-comment-649483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080724-00/?p=21483#comment-649483">
			July 24, 2008 at 11:04 am</a>		</div>

		<p>&#8230;uhm&#8230; the Leave called in both cases?!.. I think it is a typo. The code is correct though.</p>
<div class=post>[<i>Fixed, thanks. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-649503">
				<div id="div-comment-649503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080724-00/?p=21483#comment-649503">
			July 24, 2008 at 1:56 pm</a>		</div>

		<p>It&#8217;s been a really long time since I played with this stuff, but isn&#8217;t there a pointer to a window&#8217;s drop target stuffed into one of its properties?</p>
<p>I seem to remember having to hack around this to allow VB6 to support richer drag and drops.</p>
<p>I&#8217;m really rusty on my Win32, but was there a way to get a marshalled pointer to that drop target? &nbsp;Curious for old times sake.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-649513">
				<div id="div-comment-649513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080724-00/?p=21483#comment-649513">
			July 24, 2008 at 1:59 pm</a>		</div>

		<p>Oops&#8230; &nbsp;looks like it&#8217;s explained here:</p>
<p>&quot;The reason why the taskbar doesn&#8217;t do this is that there is no such function GetDropTargetFromWindow function.&quot;</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2004/11/24/269237.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2004/11/24/269237.aspx</a></p>
<p>I imagine the reason you can&#8217;t is because applications should just start the drag and let the user drop it in the right spot. &nbsp;It&#8217;s drag and drop, not some form of DDE! &nbsp;:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-649523">
				<div id="div-comment-649523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Christian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080724-00/?p=21483#comment-649523">
			July 24, 2008 at 2:07 pm</a>		</div>

		<p>Thank you!</p>
<p>I often start a drag&amp;drop operation in IE with e.g. a link by acciedent and don&#8217;t want to navigate to that page.</p>
<p>I didn&#8217;t know that I could press ESC! That&#8217;s a great tip!</p>
<p>(I always tried to drag it to an area that does no harm, like the tray^H^H^H^Hnotification area or let&#8217;s say &quot;the clock&quot; ;-) &nbsp;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-649583">
				<div id="div-comment-649583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rune</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080724-00/?p=21483#comment-649583">
			July 25, 2008 at 9:41 am</a>		</div>

		<p>So&#8230; Is this the preferred way of printing an arbitrary file to a specific printer?</p>
<p>I need to target a specific printer and I can&#8217;t render the documents myself. ShellExecute(&quot;print&quot;, &#8230;) only targets the default printer, but I have a specific printer in mind.</p>
<p>Simulating a file drop provides me with a workaround, but I can&#8217;t help thinking that there surely must be an easier way. How does the shell trick the document&#8217;s application to print to a specific printer?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-649843">
				<div id="div-comment-649843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080724-00/?p=21483#comment-649843">
			July 25, 2008 at 10:41 pm</a>		</div>

		<p>Rune, have you looked at PrintTo?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-649973">
				<div id="div-comment-649973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rune</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080724-00/?p=21483#comment-649973">
			July 28, 2008 at 8:33 am</a>		</div>

		<p>Thanks Greg! IFileViewer::PrintTo looks promising, but the description of the IFileViewer interface gives me pause. I&#8217;ll just have to give it a try I guess.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-650213">
				<div id="div-comment-650213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080724-00/?p=21483#comment-650213">
			July 28, 2008 at 9:02 pm</a>		</div>

		<p>Rune, I just meant using the printto verb instead of the print verb in ShellExecute.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

