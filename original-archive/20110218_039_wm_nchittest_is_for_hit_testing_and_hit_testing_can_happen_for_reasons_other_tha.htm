<html>
<head>
<title>WM_NCHITTEST is for hit-testing, and hit-testing can happen for reasons other than the mouse being over your window</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>WM_NCHITTEST is for hit-testing, and hit-testing can happen for reasons other than the mouse being over your window</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 18, 2011 / year-entry #40</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110218-00/?p=11453</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The WM_NC­HIT­TEST message is sent to your window in order determine what part of the window corresponds to a particular point. The most common reason for this is that the mouse is over your window. The default WM_SET­CURSOR handler uses the result of WM_NC­HIT­TEST to figure out what type of cursor to show. for example,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The <code>WM_<wbr>NC&shy;HIT&shy;TEST</wbr></code> message is sent to your window
in order determine what part of the window corresponds to a
particular point.
The most common reason for this is that
the mouse is over your window.</p>
<ul>
<li>
The default <code>WM_<wbr>SET&shy;CURSOR</wbr></code> handler
uses the result of <code>WM_<wbr>NC&shy;HIT&shy;TEST</wbr></code>
to figure out what type of cursor to show.
for example, if you return <code>HT&shy;LEFT</code>,
then <code>Def&shy;Window&shy;Proc</code>
will show the <code>IDC_<wbr>SIZE&shy;WE</wbr></code> cursor.
</li>
<li>
If the user clicks the mouse,
the default <code>WM_<wbr>NC&shy;LBUTTON&shy;DOWN</wbr></code> handler
uses the result of <code>WM_<wbr>NC&shy;HIT&shy;TEST</wbr></code> to figure out
where on the window you clicked.
For example, if you return <code>HT&shy;CLOSE</code>, then it will
act as if the user clicked on the Close button.
</li>
</ul>
<p>
Although <code>WM_<wbr>NC&shy;HIT&shy;TEST</wbr></code> triggers most often
for mouse activity, that is not the only reason why
somebody might want to ask,
"What part of the window does this point correspond to?"
</p>
<ul>
<li>
The <code>Window&shy;From&shy;Point</code> function uses
<code>WM_<wbr>NC&shy;HIT&shy;TEST</wbr></code> in its quest to figure
out which window is under the point you passed in.
If you return <code>HT&shy;TRANSPARENT</code>,
then it will skip your window and keep looking.
</li>
<li>
Drag/drop operations use the result of
<code>WM_<wbr>NC&shy;HIT&shy;TEST</wbr></code> to figure out what part of the
window you are dragging over.
</li>
<li>
Accessibility tools use the result of
<code>WM_<wbr>NC&shy;HIT&shy;TEST</wbr></code> to help the user understand
what's on the screen.
</li>
<li>
Anybody can use the result of
<code>WM_<wbr>NC&shy;HIT&shy;TEST</wbr></code> to see how your window is laid out.
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/10/27/55461.aspx">
We used it a few years ago</a>
to detect a right-click on the caption button.
</li>
</ul>
<p>
Consider a program that wants to beep
when the mouse is over the Close button.
This is an artificial example, but you can use your imagination
to come up with more realistic ones,
like showing a custom mouseover animation or
displaying a balloon tip if the document is unsaved.
I chose beeping because it requires less code;
otherwise, all the details of its implementation would distract
from the point of the example.
</p>
<p>
Start with
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/07/23/54576.aspx">
the scratch program</a>
and make the following changes:
</p>
<pre>
BOOL g_fInCloseButton = FALSE;

void EnterCloseButton(HWND hwnd)
{
 if (g_fInCloseButton) return;
 g_fInCloseButton = TRUE;
 MessageBeep(-1); // obviously something more interesting goes here
 TRACKMOUSEEVENT tme = { sizeof(tme), TME_NONCLIENT | TME_LEAVE, hwnd };
 TrackMouseEvent(&amp;tme);
}

void LeaveCloseButton(HWND hwnd)
{
 if (g_fInCloseButton) {
  // stop animation, remove balloon, etc.
  g_fInCloseButton = FALSE;
 }
}

<i>// This code is wrong - see text
UINT OnNcHitTest(HWND hwnd, int x, int y)
{
 UINT ht = FORWARD_WM_NCHITTEST(hwnd, x, y, DefWindowProc);
 if (ht == HTCLOSE) {
  EnterCloseButton(hwnd);
 } else {
  LeaveCloseButton(hwnd);
 }
 return ht;
}</i>

HANDLE_MSG(hwnd, WM_NCHITTEST, OnNcHitTest);
case WM_NCMOUSELEAVE:
 LeaveCloseButton(hwnd);
 break;
</pre>
<p>
We keep track of whether or not the mouse is in the close button
so that we don't double-start the animation or double-cancel it.
(For us, this keeps us from beeping
when the mouse moves around <i>within</i> the Close button.)
When the mouse leaves the close button&mdash;either because it
moved to another part of the window or because it left the
window
entirely&mdash;we reset the flag.
</p>
<p>
When you run this program, it pretty much behaves as intended.
But that's because we haven't tried anything interesting yet.
</p>
<p>
Merge in the changes from our
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/12/06/275659.aspx">
sample drag/drop program</a>,
so now you have a program that both performs drag/drop and which
has special Close button behavior.
</p>
<p>
Now things get interesting.
Run the program and drag out of the client area (triggering
the drag/drop behavior) and hover the mouse over the Close button.
</p>
<p>
Ow, my ears!
</p>
<p>
What happened here?
</p>
<p>
When the drag/drop loop is in progress, the mouse is captured
to the drag/drop window.
Mouse capture means that all mouse messages go to that window
(for as long as a mouse button is held down).
"I don't care what window you think the mouse is over; it's over me!"
Another way of looking at this is that the capture window
logically covers the entire screen
(for the purpose of determining who gets the mouse message).
</p>
<p>
The drag/drop loop wants to know which window is under the drag cursor
so it can figure out whose <i>IDropTarget</i> should receive
the drag/drop notifications.
This <i>WindowFromPoint</i> call triggers a
<code>WM_<wbr>NC&shy;HIT&shy;TEST</wbr></code>
message, which our program incorrectly interprets as a
"the mouse is now in my window".
(Since the mouse is captured,
the mouse really isn't in your window;
it's in the window that has capture because that window is stealing
all the mouse input.)
It then performs its "The mouse is in the Close button"
activities (BEEP).
But since the mouse <i>was never in the window to begin with</i>,
the <code>Track&shy;Mouse&shy;Event</code> call that requests
"let me know when the mouse leaves my window"
posts a <code>WM&shy;_NC&shy;MOUSE&shy;LEAVE</code> message immediately.
The window then cleans up its "mouse is in the Close button"
behaviors, ready for the next cycle.
</p>
<p>
And the next cycle begins pretty much as soon as the previous
cycle finished,
because the mouse
is still physically (but not logically) in the Close button.
</p>
<p>
Result: Infinite beep loop.
</p>
<p>
(The real-life situation that triggered this article was much more
complicated than this, involving an animation rather than a beep,
but the result was effectively the same:
Under the right circumstances, just moving the mouse over the caption
resulted in the animation becoming an epileptic-seizure-inducing
flicker as the animation continuously started and stopped.)
</p>
<p>
As we saw some time ago,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/10/13/55279.aspx">
the <code>WM_<wbr>MOUSE&shy;MOVE</wbr></code> message is the way to detect
that the mouse has entered your window</a>.
(Though
some people haven't figured this out and
<a HREF="http://bytes.com/topic/visual-basic-net/answers/385246-code-wm_mouseenter">
continue on their
fruitless quest for the <code>WM_<wbr>MOUSE&shy;ENTER</wbr></code> message</a>.)
</p>
<p>
In our case, the applicable message is
<code>WM_<wbr>NC&shy;MOUSE&shy;MOVE</wbr></code>
rather than <code>WM_<wbr>MOUSE&shy;MOVE</wbr></code>,
since we are operating on the nonclient area.
Therefore, the fix is to move the code that starts the animation from
<code>WM_<wbr>NC&shy;HIT&shy;TEST</wbr></code>
to <code>WM_<wbr>NC&shy;MOUSE&shy;MOVE</wbr></code>.
</p>
<pre>
// Delete the old OnNcHitTest function and replace it with this
void OnNcMouseMove(HWND hwnd, int x, int y, UINT codeHitTest)
{
 FORWARD_WM_NCMOUSEMOVE(hwnd, x, y, codeHitTest, DefWindowProc);
 if (codeHitTest == HTCLOSE) {
  EnterCloseButton(hwnd);
 } else {
  LeaveCloseButton(hwnd);
 }
 return ht;
}

// delete HANDLE_MSG(hwnd, WM_NCHITTEST, OnNcHitTest);
HANDLE_MSG(hwnd, WM_NCMOUSEMOVE, OnNcMouseMove);
</pre>
<p>
Remember, if you want to do something when the mouse
enters your window,
wait until the mouse actually enters your window.
The <code>WM_<wbr>NC&shy;HIT&shy;TEST</wbr></code> message doesn't mean that
the mouse is in your window;
it just means that somebody is asking,
"If the mouse <i>were</i> in your window,
what would it be doing?"
</p></p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-896113">
				<div id="div-comment-896113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110218-00/?p=11453#comment-896113">
			February 18, 2011 at 8:31 am</a>		</div>

		<p>@Leo, when all else fails try the wine sources. I think it&#39;s not used.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-896123">
				<div id="div-comment-896123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeremy Drake</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110218-00/?p=11453#comment-896123">
			February 18, 2011 at 10:08 am</a>		</div>

		<p>&quot;If the mouse &lt;u&gt;were&lt;/u&gt; in your window, what &lt;b&gt;would&lt;/b&gt; it be doing?&quot;</p>
<p>Long live the subjunctive!</p>
<p><a rel="nofollow" target="_new" href="http://www.ceafinney.com/subjunctive/index.html" rel="nofollow">http://www.ceafinney.com/&#8230;/index.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896143">
				<div id="div-comment-896143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110218-00/?p=11453#comment-896143">
			February 18, 2011 at 3:11 pm</a>		</div>

		<p>You wrote âWhy isn&#39;t there a WM_MOUSEENTER message? Because you can easily figure that out for yourself.â but I strongly suspect the real answer is that Windows 3.1 didn&#39;t have visual mouse hover feedback on every button.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-896093">
				<div id="div-comment-896093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110218-00/?p=11453#comment-896093">
			February 18, 2011 at 7:14 am</a>		</div>

		<p>At the bottom of the defines for WM_NCHITTEST results in WinUser.h:</p>
<p>#if(WINVER &gt;= 0x0400)</p>
<p>#define HTOBJECT &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;19</p>
<p>#define HTCLOSE &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 20</p>
<p>#define HTHELP &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;21</p>
<p>#endif /* WINVER &gt;= 0x0400 */</p>
<p>Is HTOBJECT documented anywhere (even informally)? I can only find other people asking the same question.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896153">
				<div id="div-comment-896153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110218-00/?p=11453#comment-896153">
			February 19, 2011 at 1:29 am</a>		</div>

		<p>Is it just me? The thing I was thinking of have happen was when the mouse got close to the close button, the whole window moves. Extra points for having the window skitter away to a random location&#8230; unclosable (with the mouse)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-896213">
				<div id="div-comment-896213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miral</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110218-00/?p=11453#comment-896213">
			February 20, 2011 at 4:18 pm</a>		</div>

		<p>@Worf: no, it&#39;s not just you. :)</p>
<p>Although all this talk of non-client areas brings to mind an old idle curiosity of mine: what the One True Way is to make a custom caption button (preferably one that plays nicely with the other caption buttons, both in style and in avoiding overlaps even with other custom buttons). &nbsp;I&#39;ve never really seriously investigated this, though, since I&#39;ve never had any software that would really need it. &nbsp;So it&#39;s not an attempt to sneak something into the Suggestion Box. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-896233">
				<div id="div-comment-896233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110218-00/?p=11453#comment-896233">
			February 20, 2011 at 5:40 pm</a>		</div>

		<p>@Worf: In your case, just press Alt-F4 and problem solved. :)</p>
<p>Although I think it&#39;d make neat April Fool joke by create your own version of notepad that act like this way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-896733">
				<div id="div-comment-896733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110218-00/?p=11453#comment-896733">
			February 23, 2011 at 1:38 am</a>		</div>

		<p>Raymond,</p>
<p>wanted to add some missing information in the MSDN recently closed topic that interests me &#8211;</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2010/12/30/10110077.aspx" rel="nofollow">blogs.msdn.com/&#8230;/10110077.aspx</a> (&quot;WindowFromPoint &#8230;&quot;).</p>
<p>Tried to describe all compactly and clearly: as a demo</p>
<p><a rel="nofollow" target="_new" href="http://files.rsdn.ru/42164/windowfrompoint_review.zip" rel="nofollow">files.rsdn.ru/&#8230;/windowfrompoint_review.zip</a> ,</p>
<p>snapshot &#8211; &nbsp;<a rel="nofollow" target="_new" href="http://files.rsdn.ru/42164/windowfrompoint_review.png" rel="nofollow">files.rsdn.ru/&#8230;/windowfrompoint_review.png</a> .</p>
<p>Found no other option but to turn to you here, do not be angry:)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

