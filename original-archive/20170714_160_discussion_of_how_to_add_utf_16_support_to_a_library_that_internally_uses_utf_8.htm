<html>
<head>
<title>Discussion of how to add UTF-16 support to a library that internally uses UTF-8</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Discussion of how to add UTF-16 support to a library that internally uses UTF-8</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 14, 2017 / year-entry #161</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Convert it, but make sure it can convert back.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer was incorporating an external library
that internally manages file names in UTF-8.
They wanted to add UTF-16 support&sup1;
and to avoid having to make a lot of changes to
the library to change its internal data format,
they figured it'd be less risky to keep the internal
format as UTF-8 and convert the file names from
UTF-16 to UTF-8 as they enter the library,
and convert them from UTF-8 back to UTF-16 whenever
the library needs to call out to Windows
(for example, by passing the file name to
the
<code>Create&shy;File</code> function).
</p>
<p>
The customer wanted to know if there were any
pitfalls to this approach.
In particular,
is it guaranteed that converting a UTF-16 string
to UTF-8 and then converting back to UTF-16 will
result in a string that is byte-for-byte identical
to the original?
</p>
<p>
<a HREF="https://blogs.msdn.microsoft.com/shawnste/">
Shawn Steele</a>
replied that the conversion is reversible, provided
that the original UTF-16 string is valid.
He cautioned that sometimes people are under the
false impression that a UTF-8-encoded string or a
UTF-16-encoded string can contain
arbitrary binary data.
As a result, they end up passing things like unmatched
high and low surrogates (for UTF-16)
or improper continuation bytes (for UTF-8).
There might also be incorrect substring or string
concatenation algorithms which expect that a string
can be chopped at any point and produce a meaningful result.
</p>
<p>
He also pointed out that many characters have multiple encodings.
For example, "&Auml;" can be encoded as the single code point
U+00C4 (LATIN CAPITAL A WITH DIAERESIS)
or as the sequence of code points
U+0041 (LATIN CAPITAL A) followed by
U+0308 (COMBINING DIAERESIS).&sup2;
</p>
<p>
The customer thanked Shawn for his advice.
They had already encountered the second problem (known as Normalization),
but since the Windows file system does not perform normalization,
they figured their program shouldn't do it either.
They were a bit concerned about the issue with substrings and
string concatenation and were wondering if this was a case
where <code>_mbscat_s</code> would be used instead of
<code>strcat_s</code>.
</p>
<p>
This led to an extended discussion about surrogate pairs,
zero-width-joiners,
extended grapheme clusters,
and
<a HREF="http://manishearth.github.io/blog/2017/01/14/stop-ascribing-meaning-to-unicode-code-points/">
stop ascribing meaning to Unicode code points</a>.
</p>
<p>
I stepped in and tried to return to the customer's question.
All of these issues with substrings and concatenation and
extended grapheme clusters are issues for the library itself,
not for the UTF-16 wrapper the customer is building.
If there are any problems in the library, they can raise
them with the maintainers of the library.
</p>
<p>
The customer wanted a UTF-16 entry point to the library
which forwards to the existing UTF-8 entry point.
In that case, they can call
<code>Multi&shy;Byte&shy;To&shy;Wide&shy;Char</code> with the
<code>MB_</code><code>ERR_</code><code>INVALID_</code><code>CHARS</code> flag
and return an appropriate failure if the string is not well-formed.
If the string successfully converts from UTF-16 to UTF-8,
then it will also successfully convert back from UTF-8 to UTF-16
with no loss of fidelity.&sup3;
</p>
<p>
&sup1;
In the context of Windows,
Unicode strings are encoded in UTF-16LE
if not explicitly called out otherwise.
</p>
<p>
&sup2;
I find it somewhat quaint that names of Unicode code points
are written in all-caps.
</p>
<p>
&sup3;
The customer thanked both Shawn and me for our assistance,
even though my contribution was basically to take the long
discussion and focus the answer to the customer's actual problem.
I confessed that I didn't add any information;
I merely deleted the distractions.
Shawn replied,
"Yea, but you're better at saying things shorter than I can."</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1302065">
				<div id="div-comment-1302065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302065">
			July 14, 2017 at 7:16 am</a>		</div>

		<p>It&#8217;s hard to keep technical discussions short.  I have trouble keeping e-mails short, mainly because I anticipate possible counter-arguments and I try to address them in the middle of what I&#8217;m trying to say.  I need to stop doing that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1302085">
				<div id="div-comment-1302085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302085">
			July 14, 2017 at 7:48 am</a>		</div>

		<p>Deleting is often more useful than adding, especially if it accomplishes the objectives faster.</p>
<p>I love this story of writing negative 2000 lines of code in a particularly productive week: <a href="http://www.folklore.org/StoryView.py?story=Negative_2000_Lines_Of_Code.txt" rel="nofollow">http://www.folklore.org/StoryView.py?story=Negative_2000_Lines_Of_Code.txt</a></p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1302105">
				<div id="div-comment-1302105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302105">
			July 14, 2017 at 9:23 am</a>		</div>

		<p>@pc Nothing gives me greater pleasure in writing code than adding functionality while simultaneously removing code and increasing readability.  That&#8217;s always a highly productive day!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1302095">
				<div id="div-comment-1302095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dmitry_vk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302095">
			July 14, 2017 at 8:24 am</a>		</div>

		<p>This reminds me of WTF-8 encoding (<a href="https://simonsapin.github.io/wtf-8/" rel="nofollow">https://simonsapin.github.io/wtf-8/</a>) which was invented because Windows allows ill-formed UTF-16 in file names and unix-originated software likes to use UTF-8 internally.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1302125">
				<div id="div-comment-1302125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302125">
			July 14, 2017 at 5:51 pm</a>		</div>

		<p>Well Unix software has to deal with filenames that are invalid UTF8 so we&#8217;re even.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1302155">
				<div id="div-comment-1302155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302155">
			July 15, 2017 at 12:47 am</a>		</div>

		<p>Not quite even, I think? Overlong UTF-8 sequences (&#8220;/&#8221; → 0x2F → 0xC0AF → 0xE080AF → &#8230;) may cause havoc on *nix. There&#8217;s no problem on Windows, where filenames with invalid UTF-16 sequences (such as unmatched surrogates) are harmless.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1302156">
				<div id="div-comment-1302156" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nekotoba.nfshost.com' rel='external nofollow' class='url'>Kakurady</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302156">
			July 15, 2017 at 8:49 am</a>		</div>

		<p>You can&#8217;t actually code your *nix software to expect UTF-8 filenames, because, for example, ext2/3/4 allows any C-string as filename as long as it doesn&#8217;t contain &#8216;/&#8217; (or so I heard), without regard to character encoding.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1302115">
				<div id="div-comment-1302115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aur Saraf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302115">
			July 14, 2017 at 5:10 pm</a>		</div>

		<p>Next time, simply point them at <a href="http://utf8everywhere.org#windows" rel="nofollow">http://utf8everywhere.org#windows</a></p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1302145">
				<div id="div-comment-1302145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302145">
			July 14, 2017 at 10:28 pm</a>		</div>

		<p>I&#8217;m dubious &#8211; that document ignores the fact that real-world software often has to be able to deal with malformed UTF-16 strings, e.g., Windows file names.  (This might or might not be a problem for the software that was being discussed; it depends on the context.)</p>
<p>Personally I&#8217;m of the opinion that filenames aren&#8217;t text, and shouldn&#8217;t be treated as text.  You might want to <em>convert</em> them to text, e.g., to display them to the user, but internally they should remain 8-bit or 16-bit strings as appropriate to the OS.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1302205">
				<div id="div-comment-1302205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302205">
			July 17, 2017 at 9:29 am</a>		</div>

		<p>What&#8217;s so great about UTF-8? Sure it has some nice features, but *everywhere*? </p>
<p>Java, JavaScript, C#, Visual Basic 4+, VBA, VBScript all use UTF-16 as their internal representation. Modern C and C++ has UTF-16 string literals and UTF-16 strings. Why not UTF-16 everywhere?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-3 parent" id="comment-1302267">
				<div id="div-comment-1302267" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302267">
			July 17, 2017 at 8:09 pm</a>		</div>

		<p>That&#8217;s because we live in a weird world that the most popular CPU type (x86 based) is little-endian, but pretty much anything else is big-endian. So if your data need to travel across different system type, you need to cater for UTF16LE/UTF16BE difference.</p>
<p>On the other hand, UTF-8 is endianness independent so it&#8217;ll save you some headache on that.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong odd alt depth-4" id="comment-1302276">
				<div id="div-comment-1302276" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302276">
			July 17, 2017 at 8:11 pm</a>		</div>

		<p><a href="http://unicode.org/faq/utf_bom.html#utf8-2" rel="nofollow">http://unicode.org/faq/utf_bom.html#utf8-2</a><br />
Q: Is the UTF-8 encoding scheme the same irrespective of whether the underlying processor is little endian or big endian?<br />
A: Yes. Since UTF-8 is interpreted as a sequence of bytes, there is no endian problem as there is for encoding forms that use 16-bit or 32-bit code units. Where a BOM is used with UTF-8, it is  only used as an encoding signature to distinguish UTF-8 from other encodings — it has nothing to do with byte order.  [AF]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-4" id="comment-1302296">
				<div id="div-comment-1302296" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302296">
			July 18, 2017 at 1:10 am</a>		</div>

		<p>ARM is also little-endian and according to Wikipedia always was. </p>
<p>PDP-11, IBM Power and Z series, and SUN Sparc were/are big-endian though, so as a consequence many network standards deriving from the unix and mainframe worlds specify big-endian format on the wire or on disk.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4 parent" id="comment-1302386">
				<div id="div-comment-1302386" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GEO255</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302386">
			July 18, 2017 at 5:27 pm</a>		</div>

		<p>Oh, that&#8217;s what the &#8220;LE&#8221; means. I thought it meant &#8220;Limited Edition&#8221;&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1303526">
				<div id="div-comment-1303526" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">D-Coder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1303526">
			July 25, 2017 at 6:56 am</a>		</div>

		<p>&#8220;Limited Edition&#8221; is for cars.<br />
&#8220;Little Endian&#8221; is for chars.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1302146">
				<div id="div-comment-1302146" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302146">
			July 14, 2017 at 11:59 pm</a>		</div>

		<p>That page answers this question (which is really only about Unicode encoding, and not Windows-related) quite well:<br />
<a href="http://unicode.org/faq/utf_bom.html" rel="nofollow">http://unicode.org/faq/utf_bom.html</a><br />
Normalization and such is irrelevant here. You just have to deal with 21bits per character that are encoded in two different ways.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1302165">
				<div id="div-comment-1302165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302165">
			July 17, 2017 at 1:42 am</a>		</div>

		<blockquote><p>I find it somewhat quaint that names of Unicode code points are written in all-caps.</p></blockquote>
<p>Hey, there&#8217;s no point putting a set of names to characters if you can&#8217;t write those names using BCDIC :)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1302175">
				<div id="div-comment-1302175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302175">
			July 17, 2017 at 2:08 am</a>		</div>

		<p>Not having lower-case letters is part of a long and distinguished history: Latin and Ancient Greek didn&#8217;t have them either (and Ancient Greek went one better and often didn&#8217;t use vowels in written form!) Unicode wants to be distinguished too. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1302185">
				<div id="div-comment-1302185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302185">
			July 17, 2017 at 5:26 am</a>		</div>

		<p>&#8220;is it guaranteed that converting a UTF-16 string to UTF-8 and then converting back to UTF-16 will result in a string that is byte-for-byte identical to the original?&#8221;</p>
<p>The misleading thing here is &#8220;byte-for-byte identical &#8220;. Converting back and forth between UTF-8 and UTF-16 will guarantee a transparent character-by-character transfer. But invalid Unicode strings may screw things up even when the library would use UTF-16.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt thread-odd thread-alt depth-1" id="comment-1302566">
				<div id="div-comment-1302566" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302566">
			July 19, 2017 at 1:23 pm</a>		</div>

		<p>If (or rather, because) some WCHAR strings are actually broken UTF-16, I would suggest some other encoding that will not rely on UTF compliance of input, e.g. convert the file names to hexadecimal strings on input. This will solve the question of &#8220;\x00C4&#8221; vs. &#8220;\x0041\xU+0308&#8221;: one file name will be represented as &#8220;00C4&#8221;, the second &#8211; as &#8220;00410308&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1302695">
				<div id="div-comment-1302695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">French Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170714-00/?p=96605#comment-1302695">
			July 20, 2017 at 2:41 am</a>		</div>

		<p>What would it take for Windows to enforce UTF-16 compliance in its file names (no unpaired surrogates)?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

