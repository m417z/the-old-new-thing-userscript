<html>
<head>
<title>How can I conditionally compile based on a preprocessor macro value, while ensuring that the macro is correctly spelled?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I conditionally compile based on a preprocessor macro value, while ensuring that the macro is correctly spelled?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 10, 2018 / year-entry #204</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180910-00/?p=99685</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Another stupid preprocessor trick.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Continuing on the extremely sporadic topic of
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180628-00/?p=99115">
stupid C preprocessor tricks</a>.
</p>
<p>
It is common to have preprocessor macros that control
compile-time behavior.
C++11 has <code>std::enable_if</code> to conditionally
remove functions and template specializations from consideration,
and
C++17 adds <code>if constexpr</code> to allow statements
to removed conditionally.
Removing variables is a bit trickier, though.
You can probably manage it by wrapping the variable inside
a class that itself uses <code>std::enable_if</code>, but that's
even more clunky than <code>std::enable_if</code> already is.
</p>
<p>
Anyway, for whatever reason, you might want to use the preprocessor's
<code>#if</code> directive to perform your tests.
Maybe you are preprocessing something for a purpose other than
compilation by a C or C++ compiler.
</p>
<p>
But you're also worried that somebody might misspell your
symbol.
</p>
<pre>
// The FEATURE_BLAH macro is defined either as 0 or 1

#if FEATURE_BLUH
... do stuff with feature Blah ...
#endif
</pre>
<p>
Oops, they misspelled <code>FEATURE_<code></code>BLAH</code>,
but the preprocessor doesn't know that,
so it happily says,
"Nope, it's not defined, skip the body of the <code>#if</code>."
</p>
<p>
How do you catch this typo?
</p>
<p>
You can use your adversary's power against him.
</p>
<p>
Since undefined symbols are treated as having the value zero,
you can use an expression that blows up if the value is zero.
</p>
<pre>
// The FEATURE_BLAH macro is defined either as 1 (off) or 2 (on)

#define GET_NONZERO_VALUE(x) (0/(x) + (x))

#if GET_NONZERO_VALUE(FEATURE_BLAH) == 2
... do stuff with feature Blah ...
#endif
</pre>
<p>
The <code>GET_<code></code>NONZERO_<code></code>VALUE</code> macro
first tries to divide by its parameter.
If the parameter is not defined or is defined with the value zero,
then that results in a division by
zero and you get a compiler error.
If the parameter is defined with a nonzero value,
then the result of <code>0/(x)</code> is zero, and adding that
to <code>x</code> yields <code>x</code>.
</p>
<p>
The last wrinkle is using the <code>defined</code>
preprocessor pseudo-function to distinguish between
an undefined macro and a defined macro whose value is zero.
</p>
<pre>
// The FEATURE_BLAH macro is defined to 0 or 1
// The FEATURE_BLAH_OPTION macro is some value

#define GET_FEATURE_VALUE(x) (0/defined(FEATURE_##x) + (FEATURE_##x))

#if GET_FEATURE_VALUE(BLAH)
#if GET_FEATURE_VALUE(BLAH_OPTION) == 1
... do stuff with feature Blah and option 1...
#elif GET_FEATURE_VALUE(BLAH_OPTION) == 2
... do stuff with feature Blah and option 2...
#else
#error Unknown option for FEATURE_BLAH_OPTION.
#endif
#endif
</pre>
<p>
If <code>FEATURE_<code></code>BLAH</code>
is not defined,
then the <code>defined(FEATURE_<code></code>BLAH)</code> will
evaluate to zero, and then you get a divide by zero error in the
preprocessor.
If it is defined, then <code>defined(FEATURE_<code></code>BLAH)</code>
evaluates to 1,
and the expression <code>0/1 + FEATURE_<code></code>BLAH</code>
reduces to just
<code>FEATURE_<code></code>BLAH</code>.
</p>
<p>
This is an abuse of the preprocessor, but it may come in handy
in a pinch.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1359945">
				<div id="div-comment-1359945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deleted' rel='external nofollow' class='url'>Pierre B.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180910-00/?p=99685#comment-1359945">
			September 10, 2018 at 7:13 am</a>		</div>

		<p>&#8230;. or you can use #ifdef. That checks if the value is defined. So first #ifdef, then #if inside. (Or #ifndef beforei wraping an #error, #if after. Bonus: you can put a readable error message instead of a confusing division by zero message.)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mzzt odd alt depth-2" id="comment-1359965">
				<div id="div-comment-1359965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/The+MAZZTer' rel='external nofollow' class='url'>The MAZZTer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180910-00/?p=99685#comment-1359965">
			September 10, 2018 at 8:11 am</a>		</div>

		<p>That works great until the typo made only affects the #if and not the #ifdef.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1359975">
				<div id="div-comment-1359975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lucitor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180910-00/?p=99685#comment-1359975">
			September 10, 2018 at 9:25 am</a>		</div>

		<p>&#8230; or you can enable C4668/-Wundef. For older compilers this would trigger a lot of warnings, but there are ways around that too.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1360185">
				<div id="div-comment-1360185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dezgeg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180910-00/?p=99685#comment-1360185">
			September 11, 2018 at 12:34 pm</a>		</div>

		<p>Sadly, the proposed solution relies on undefined behaviour. Quote from C99 part 6.10.1.4:</p>
<p>If the token `defined` is generated as a result of this replacement process or use of the `defined` unary operator does not match one of the two specified forms prior to macro replacement, the behavior is undefined.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

