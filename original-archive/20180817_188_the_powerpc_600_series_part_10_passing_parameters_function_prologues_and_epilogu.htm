<html>
<head>
<title>The PowerPC 600 series, part 10: Passing parameters, function prologues and epilogues</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The PowerPC 600 series, part 10: Passing parameters, function prologues and epilogues</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 17, 2018 / year-entry #188</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180817-00/?p=99515</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The most dangerous parts of flying a function are take-off and landing.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We saw a little bit of the Windows NT software convention with
our introduction to the table of contents.
Today we'll start looking at the conventions related to the stack.
(Believe it or not, this will connect back to the table of contents,
but it'll take a while before we get there.)
</p>
<p>
The format of the stack is as follows:
</p>
<table BORDER=0 STYLE="border-collapse: collapse"
       CELLPADDING=3 CLASS="cp3">
<tr>
<td ALIGN=center>&#x22ee;</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">inbound param 10</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">inbound param 9</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">inbound param 8 home space</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">inbound param 7 home space</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">inbound param 6 home space</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">inbound param 5 home space</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">inbound param 4 home space</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">inbound param 3 home space</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">inbound param 2 home space</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">inbound param 1 home space</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">reserved 6</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">reserved 5</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">reserved 4</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">reserved 3</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">reserved 2</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">reserved 1: previous sp</td>
<td>&larr; stack pointer at function entry</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black;">
<div>saved register space</div>
<div>&#x22ee;</div>
</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black;">
<div>local variables</div>
<div>&#x22ee;</div>
</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black;">
<div>outbound parameters</div>
<div>beyond 8 (if any)</div>
<div>&#x22ee;</div>
</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">outbound param 8 home space</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">outbound param 7 home space</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">outbound param 6 home space</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">outbound param 5 home space</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">outbound param 4 home space</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">outbound param 3 home space</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">outbound param 2 home space</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">outbound param 1 home space</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">reserved 6</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">reserved 5</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">reserved 4</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">reserved 3</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">reserved 2</td>
</tr>
<tr>
<td ALIGN=center STYLE="border: solid 1px black">reserved 1: previous sp</td>
<td>&larr; stack pointer after prologue complete</td>
</tr>
</table>
<p>
That's a big stack.
</p>
<p>
Starting at the top of the diagram (deepest on the stack)
are the stack-based parameters, which are the parameters beyond
the first 8.
</p>
<p>
Next is home space for the first 8 parameters.
Those parameters are passed in registers, but reserve
space for them on the stack in case the function needs to spill them.
Even if the function has fewer than eight parameters,
there is home space for all eight of them.
</p>
<p>
Integer parameters are passed in <var>r3</var> through
<var>r10</var>, and floating point parameters come in
<var>f1</var> through <var>f13</var>.
The register assignment is like the Alpha AXP and MIPS,
where each parameter
can go into either an integer or floating point register,
and if you use one, then the other goes unused.
</p>
<p>
After the home space come
24 bytes (6 words) of system-reserved space.
One of them is required to hold the previous stack pointer,
as we'll see soon.
The others are uninitialized.
</p>
<p>
At entry to the function, the prologue needs to set up its own
stack frame.
It saves nonvolatile registers into the saved variable space
and then atomically updates the stack pointer and links it to
the previous stack frame.
Here's a sample prologue.
I've added blank lines to separate the major sections.
</p>
<pre>
01ae2398 7c0802a6  mflr    r0           ; move return address to r0

01ae239c 93c1fff8  stw     r30,-8(r1)   ; save nonvolatile register
01ae23a0 93e1fffc  stw     r31,-4(r1)   ; save nonvolatile register

01ae23a4 9001fff4  stw     r0,-0xC(r1)  ; save return address

01ae23a8 9421ffb0  stwu    r1,-0x50(r1) ; create stack frame
</pre>
<p>
The first thing a function does is save the link register
in <var>r0</var> so it doesn't lose the return address.
In my experience,
the only thing the Microsoft
compiler uses the <var>r0</var> register for is
transferring to and from the link register.
</p>
<p>
The next thing a function does is save to the stack
the nonvolatile registers it intends to use.
(Recall that <var>r1</var> is the stack pointer register.)
This function uses two nonvolatile registers
<var>r30</var> and <var>r31</var>,
and it saves them onto the stack immediately below
the stack pointer, in order.
I'm not sure if it's a requirement of the software convention,
but the Microsoft compiler
always allocates its nonvolatile registers top-down,
so that the set of nonvolatile registers is a contiguous
range ending at <var>r31</var>.&sup1;
Furthermore, it always saves the registers in the same place:
<var>r31</var> goes on the stack first,
then
<var>r30</var>, and so on.
Even if it's not a requirement, the Microsoft compiler is pretty
consistent about it, which makes unwinding the stack in the debugger
a lot easier because you always know that, for example,
the saved value of <var>r29</var> is at offset &minus;12
from the inbound <var>sp</var>.&sup2;
</p>
<p>
The third step is saving the <var>r0</var> register
(which holds the return address).
The Microsoft compiler always stores the return address
immediately below the saved registers.
Again, I don't know if it's a requirement, but it's a handy thing
to take advantage if you need to manually unwind the stack.
</p>
<p>
The final step of the prologue is creating the stack frame
with the <code>stwu</code> instruction.
This instruction stores the current stack pointer
at the specified negative offset from the top of the stack
(creating the next node in the linked list)
and then updates the stack pointer to the address it just stored to.
This all happens atomically in a single instruction,
which means that the linked list of stack frames is always
preserved at any moment in time.
This is great for sampling profilers,
which might otherwise have a hard
time building a proper stack trace if it happened to catch the prologue
at a bad time.
</p>
<p>
The compiler is permitted to
advance instructions from the function body proper
into the prologue,
provided it doesn't alter any nonvolatile registers
or perform any branches.
</p>
<p>
The function epilogue also follows a consistent pattern:
</p>
<pre>
01ae2444 7ca32b78  mr      r3,r5        ; set return value

01ae2448 80010044  lwz     r0,0x44(r1)  ; load return address

01ae244c 83c10048  lwz     r30,0x48(r1) ; restore nonvolatile register
01ae2450 83e1004c  lwz     r31,0x4C(r1) ; restore nonvolatile register

01ae2454 7c0803a6  mtlr    r0           ; move return address to link register

01ae2458 38210050  addi    r1,r1,0x50   ; pop the stack frame

01ae245c 4e800020  blr                  ; return
</pre>
<p>
The main body of the function ends with the desired return value
in <var>r3</var>.
At this point, we enter the epilogue.
</p>
<p>
First, the epilogue loads the return address from the stack.
These offsets are different from the ones used at the start of the
function because they were saved before the frame was pushed,
but they are being restored whlie the frame is still active.
Since the size of the stack frame is 80 bytes,
the values will differ by 80.
</p>
<p>
Next, the epilogue restores the nonvolatile registers.
</p>
<p>
Step three is moving the return address into the link register
in preparation for the actual return.
</p>
<p>
Step four is popping off the stack frame by moving the stack
pointer back to where it was when the function started.
</p>
<p>
The last step is to return back to the caller with the
Windows NT-approved <code>blr</code> instruction.
</p>
<p>
Function prologues and epilogues are tightly-controlled
because the system exception dispatcher needs to be able to 
unwind a function's stack even when it's in the middle of a prologue
or epilogue.
This means that the system needs to be able to reverse-execute
a prologue and forward-execute an epilogue in order to get
the registers properly set up when dispatching an exception
to the caller of the function that was interrupted.
(The function that was interrupted cannot have an exception
handler in place because exception handlers cannot be active
during a prologue or epilogue.)
</p>
<p>
The fact that the initial portion of the stack frame is
constructed at negative offsets from the stack pointer
means that the system must have a large enough red zone
to accommodate the worst-case scenario of a function that
needs to save all of the nonvolatile registers, plus the
return address.
</p>
<p>
So let's do some math.
Integer registers <var>r14</var> through <var>r31</var>
are nonvolatile, so that's 18 &times; 4 = 72 bytes for
nonvolatile integer registers.
Floating point registers <var>f14</var> through <var>f31</var>
are also nonvolatile, and floating point registers are 8 bytes in size,
so that means another 18 &times; 8 = 144 bytes,
added to the 72 we already have makes 216.
And then there are the stragglers:
</p>
<ul>
<li>Parts of the condition register are also nonvolatile,
    and in practice you just save the whole thing,
</li>
<li>Similarly, the floating point control register.
</li>
<li>The return address.
</li>
</ul>
<p>
That adds twelve more bytes, bringing us to 232 bytes.
Since the stack must be 8-byte aligned, we round up to the next
multiple of 8, but hey, it's already a multiple of 8,
so we're good.
[<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180817-00/?p=99515#comment-1356835">Corrected from 16</a>.]
</p>
<p>
<b>Exercise</b>:
Why don't we need to count the system reserved bytes (specifically
the the link to the previous stack frame) toward the red zone?
</p>
<p>
At the start of this entry,
I promised that this would lead to the table of contents eventually.
We're almost there.
The story continues
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180820-00/?p=99525">
next time</a>.
</p>
<p>
<b>Bonus chatter</b>:
I lied when I said that the prologue cannot contain any branch
instructions.
There is one branch instruction that is specifically permitted:
A call to a helper function to spill the registers.
There could be a lot of registers to spill,
and the software convention permits you to use helpers function
for the following operations:
</p>
<ul>
<li>Bulk-saving integer registers.</li>
<li>Bulk-saving floating point registers.</li>
<li>Bulk-restoring integer registers.</li>
<li>Bulk-restoring floating point registers.</li>
</ul>
<p>
These bulk save/restore functions must follow a specific format
so that the exception unwinder understands how to recover
in case an interrupt occurs inside the helper.
The details are not important aside from knowing that they use the
<var>r12</var> register to specify where the registers go.
(Obviously they can't use the standard calling convention because
those registers are being used by the function whose prologue is
being executed!)
</p>
<p>
<b>Bonus bonus chatter</b>:
The size of the red zone is described in the <code>ntppc.h</code>
header file as
</p>
<pre>
#define STK_SLACK_SPACE 232
</pre>
<p>
It didn't explain how the number 232 was arrived at.
</p>
<p>
<a HREF="https://msdn.microsoft.com/en-us/library/7kcdt6fy.aspx">
The x64 software conventions for Windows NT are well-documented</a>,
but I couldn't find any documents covering the older platforms.
All of the software conventions for the PowerPC
were reverse-engineered by studying
compiler output and reading very old kernel source code.&sup3;
</p>
<p>
&sup1;
Doing it this way allows the bulk save/restore functions to be
shared among multiple functions.
Special
"store multiple contiguous registers"
and
"load multiple contiguous registers"
instructions are available in big-endian mode,
but not in little-endian mode.
In little-endian mode, you have to save them one at a time,
hence the bulk save/restore helpers.
</p>
<p>
&sup2;
Well, not always.
If floating point registers need to be saved, they get saved first.
But you don't see floating point in system code much,
so in practice you can usually get away with pretending they don't exist.
</p>
<p>
&sup3;
The code has some nice diagrams in the comments about the stack layout.
Too bad those diagrams are wrong.
I suspect the ABI was redesigned at some point,
and the comments and diagrams weren't fully updated to match.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1356795">
				<div id="div-comment-1356795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180817-00/?p=99515#comment-1356795">
			August 17, 2018 at 7:59 am</a>		</div>

		<p>&gt;&gt; The code has some nice diagrams in the comments about the stack layout. Too bad those diagrams are wrong<br />
Oh, I do so love incorrect comments.  They excel in muddifying issues.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1356805">
				<div id="div-comment-1356805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vas Crabb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180817-00/?p=99515#comment-1356805">
			August 17, 2018 at 10:14 am</a>		</div>

		<p>I find the differences in ABIs for the same processor interesting.  OSX on 32-bit PowerPC reserved space at 4(R1) to save CR, and at 8(R1) to save LR.  As with WinNT, the parameter shadow space started at 24(SP), so there were three reserved words instead of five.  Classic MacOS used R2 to hold a table-of-contents pointer, but OSX did away with this and R2 had no special significance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1356825">
				<div id="div-comment-1356825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180817-00/?p=99515#comment-1356825">
			August 17, 2018 at 11:48 am</a>		</div>

		<p>With this particular epilogue code, I&#8217;m pretty sure if it ever took an exception that isn&#8217;t resolved by kernel page-in I want the process to crash immediately. That requires stack register r1 to be corrupted or something worse.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com000340019af3cc36 odd alt thread-odd thread-alt depth-1 parent" id="comment-1356835">
				<div id="div-comment-1356835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Richard+T+Russell' rel='external nofollow' class='url'>Richard T Russell</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180817-00/?p=99515#comment-1356835">
			August 17, 2018 at 2:22 pm</a>		</div>

		<p>&#8220;bringing us to 232 bytes. Since the stack must be 16-byte aligned, we round up to the next multiple of 16, but hey, it&#8217;s already a multiple of 16, so we&#8217;re good&#8221;.</p>
<p>I&#8217;m obviously misunderstanding something here: 232 isn&#8217;t a multiple of 16.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1356845">
				<div id="div-comment-1356845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180817-00/?p=99515#comment-1356845">
			August 17, 2018 at 4:01 pm</a>		</div>

		<p>I am obviously unable to reverse-engineer very old kernel code. The stack alignment requirement is 8 not 16. I will update.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1356855">
				<div id="div-comment-1356855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180817-00/?p=99515#comment-1356855">
			August 19, 2018 at 1:00 pm</a>		</div>

		<p>When your function calls need another call just to deal with the registers I feel something has gone wrong</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-odd thread-alt depth-1 parent" id="comment-1356885">
				<div id="div-comment-1356885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180817-00/?p=99515#comment-1356885">
			August 20, 2018 at 10:22 am</a>		</div>

		<p>Since big-endian mode supports more features, did Microsoft ever consider using big-endian in the early days of NT? Too much porting work I&#8217;m guessing since some of the SDK structs (BMP headers etc.) are probably used in files and in memory?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1356905">
				<div id="div-comment-1356905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180817-00/?p=99515#comment-1356905">
			August 20, 2018 at 11:52 am</a>		</div>

		<p>It&#8217;s not just SDK structs.  Remember, the idea back then was to get people to port 16-bit Windows apps to the NT world.  Memory was insanely tight in those days (compared to today).  Every software vendor had bits and bytes stored carefully in their structs.  Forcing them to (optionally) swizzle every struct would have slowed down the porting efforts a lot.  Any big-endian architecture port would have been placed at the end of the list and no-one would have gotten that far down the list.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1356965">
				<div id="div-comment-1356965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom L</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180817-00/?p=99515#comment-1356965">
			August 21, 2018 at 5:14 am</a>		</div>

		<p>232 bytes&#8230; Anyone notice this post was made on day 232 of the year 2018? How long have you been planning that, Raymond?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

