<html>
<head>
<title>Why can't I have variadic COM methods?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why can&#8217;t I have variadic COM methods?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 24, 2015 / year-entry #85</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150424-00/?p=44163</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">COM methods cannot be variadic. Why not? Answer: Because the marshaler doesn't know when to stop. Suppose variadic COM methods were possible. And then you wrote this code: interface IVariadic { HRESULT Mystery([in] int code, ...); }; IVariadic *variadic = something; uint32_t ipaddr; HRESULT hr = variadic->Mystery(9, 192, 168, 1, 1, &ipaddr); How would COM...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
COM methods cannot be variadic.
Why not?
</p>
<p>
Answer:
Because the marshaler doesn't know when to stop.
</p>
<p>
Suppose variadic COM methods were possible.
And then you wrote this code:
</p>
<pre>
interface IVariadic
{
 HRESULT Mystery([in] int code, ...);
};

IVariadic *variadic = something;
uint32_t ipaddr;
HRESULT hr = variadic-&gt;Mystery(9, 192, 168, 1, 1, &amp;ipaddr);
</pre>
<p>
How would COM know how to marshal this function call?
In other words, suppose that <code>variadic</code>
is a pointer to a proxy that refers to an object in
another process.
The COM marshaler needs to take all the parameters
to <code>IVariadic::<wbr>Mystery</code>,
package them up,
send them to the other process,
then unpack the parameters,
and pass them to the implementation.
And then when the implementation returns,
it needs to take the return value
and any output parameters,
package them up,
send them back to the originating process,
where they are unpacked and applied to the
original parameters.
</p>
<p>
Consider, for example,
</p>
<pre>
interface IDyadic
{
 HRESULT Enigma([in] int a, [out] int *b);
};

IDyadic *dyadic = something;
int b;
HRESULT hr = dyadic-&gt;Enigma(1, &amp;b);
</pre>
<p>
If <code>dyadic</code> refers to an object
in another process,
the marshaler does this:
</p>
<ul>
<li>Allocate a block of memory containing the
    following information:</p>
<ul>
<li>Information to identify the <code>dyadic</code>
    object in the other process,</p>
<li>the integer 1.
    </ul>
<li>Transmit that block of memory to the other process.
</ul>
<p>
The other process receives the block of memory and
does the following:
</p>
<ul>
<li>Use the information in the memory block
    to identify the <code>dyadic</code> object.</p>
<li>Extract the parameter <code>1</code> from the
    memory block.</p>
<li>Allocate a local integer variable, call it <code>x</code>.
<li>Call <code>dyadic-&gt;Enigma(1, &amp;x)</code>.
    Let's say that the function stores 42 into <code>x</code>,
    and it returns <code>E_PENDING</code>.</p>
<li>Allocate a block of memory containing the following
    information:</p>
<ul>
<li>The value <code>E_PENDING</code>
    (the <code>HRESULT</code> returned by
    <code>dyadic-&gt;Enigma</code>),</p>
<li>The integer 42 (the value that <code>dyadic-&gt;Enigma</code>
    stored in the local variable <code>x</code>).
    </ul>
<li>Transmit that block of memory to the originating process.
</ul>
<p>
The originating process receives the block of memory
and does the following:
</p>
<ul>
<li>Extracts the <code>HRESULT</code> <code>E_PENDING</code>.
<li>Extracts the value 42.
<li>Stores the value 42 into <code>b</code>.
<li>Returns the value <code>E_PENDING</code> to the caller.
</ul>
<p>
Note that in order for the marshaler to do its job,
it needs to know every parameter to the method,
whether that parameter is an input parameter
(which is sent from the originating process to the remote process),
an output parameter
(which is sent from the remote process to the originating process),
and how to send that parameter.
In our case, the parameter is just an integer, so sending it is just
copying the bits,
but in the more general case, the parameter could be a more complicated
data structure.
</p>
<p>
Now let's look at that variadic method again.
How is the marshaler supposed to know what to do with the
<code>...</code>?
It doesn't know how many parameters it needs to transfer.
It doesn't know what types those parameters are.
It doesn't know which ones are input parameters
and which ones are output parameters.
</p>
<p>
In order to know that, it would have to reverse-engineer the
implementation of the <code>IVariadic::<wbr>Mystery</code>
function and figure out that the first parameter, the
<a HREF="http://en.wikipedia.org/wiki/Revolution_9">
number 9</a>,
is a code that means that the method takes four 8-bit integers as
input and outputs a 32-bit integer.
</p>
<p>
This is a rather tall order for the client side of the marshaler,
since it has to do its work without access
to the other process.
It would have to use its psychic powers to figure out how to package
up the parameters, as well as how to unpack them afterward.
</p>
<p>
Therefore, COM says,
"Sorry, you can't do that."
</p>
<p>
But what you can do is encode the parameters in a form that
the marshaler understands.
For example, you might use a counted array of <code>VARIANT</code>s
or a <code>SAFEARRAY</code>.
The COM folks already did the work to teach the marshaler how
to, for example,
decode the <code>vt</code> member of the <code>VARIANT</code>
and understand that,
"Oh, if the value is <code>VT_I4</code>, then the <code>VARIANT</code>
contains a 32-bit signed integer."
</p>
<p>
<b>Bonus chatter</b>:
But wait,
<a HREF="http://msdn.microsoft.com/en-us/library/windows/desktop/aa367304.aspx">
there is a MIDL attribute called
<code>[vararg]</code></a>.
You said that COM doesn't support variadic methods,
but there is a MIDL keyword that says variadic right on the tin!
</p>
<p>
Ah, but that <code>[varargs]</code> attribute is just a sleight of hand
trick.
Bceause when you say <code>[varargs]</code>,
what you're saying is,
"The last parameter of this method is a <code>SAFEARRAY</code>
of <code>VARIANT</code>s.
A scripting language can expose this method to scripts as variadic,
but what it actually does is take all the variadic parameters
and store them into a <code>SAFEARRAY</code>,
and then pass the <code>SAFEARRAY</code>."
</p>
<p>
In other words, it indicates that the last parameter of the
method acts like the C# <code>params</code> keyword.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1186723">
				<div id="div-comment-1186723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JamesJohnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150424-00/?p=44163#comment-1186723">
			April 24, 2015 at 7:10 am</a>		</div>

		<p>Another reason might be that variadic functions aren&#39;t supported for stdcall calling convention&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1186733">
				<div id="div-comment-1186733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Logan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150424-00/?p=44163#comment-1186733">
			April 24, 2015 at 7:30 am</a>		</div>

		<p><a rel="nofollow" target="_new" href="https://msdn.microsoft.com/en-us/library/windows/hardware/ff553183(v=vs.85).aspx">msdn.microsoft.com/&#8230;/ff553183(v=vs.85).aspx</a></p>
<p>You can have variadic functions in &quot;lightweight COM&quot; though!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1186753">
				<div id="div-comment-1186753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">wqw</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150424-00/?p=44163#comment-1186753">
			April 24, 2015 at 12:12 pm</a>		</div>

		<p>So are these &quot;scripting&quot; [varargs] [in], [out] or [in/out] for the std marshaller?</p>
<div class="post">[<em>[in] and [out] are not just for scripting. The standard marshaler uses those. But some of the attributes like [varargs] and [retval] and [optional] are purely for scripting since they affect how the method is exposed to scripting languages, not how it marshals. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt thread-odd thread-alt depth-1" id="comment-1186783">
				<div id="div-comment-1186783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150424-00/?p=44163#comment-1186783">
			April 25, 2015 at 12:35 am</a>		</div>

		<p>For all practical purposes, SAFEARRAY of VARIANTs is equivalent to variadic parameters list. The overhead which may be important for printf() and her kin, is negligible when COM marshalling is involved.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1186773">
				<div id="div-comment-1186773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150424-00/?p=44163#comment-1186773">
			April 24, 2015 at 6:41 pm</a>		</div>

		<p>There are two variadic conventions which would be easy to support: counter (a specially-marked input parameter has the number of parameters in the &quot;&#8230;&quot; part) and sentinel (the parameters in the &quot;&#8230;&quot; part are all pointers, and the last one is always a NULL pointer). Of course, it would also need a way to specify the size every parameter in the &quot;&#8230;&quot; part must have (machine word, a pair of machine words, pointer, float, or double), and they would have to be all the same size.</p>
<p>The other common variadic convention, which I&#39;ll call &quot;printf&quot;, would be much harder to support in the marshaller; not only you have to parse the format string to know how many parameters there are, the format string also specifies the *size* of each parameter individually.</p>
<p>(The gcc compiler, by the way, has a way to mark in the prototype of a variadic function that it uses a sentinel or that it uses a printf-style format string; it also knows several kinds of format strings. That information is used to warn the developer when a variadic function is misused.)</p>
<div class="post">[<em>Also requires that all the parameters be of the same type (or if not, you need some way of telling the marshaller the type of each parameter. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1186813">
				<div id="div-comment-1186813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150424-00/?p=44163#comment-1186813">
			April 26, 2015 at 12:49 pm</a>		</div>

		<p>@Cesar: It&#39;s not enough to know there is a list of pointers, that all pointers are the same size, and where the list ends.</p>
<p>The content pointed-to must also be marshaled (potentially in both directions), and therein lies the problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1186823">
				<div id="div-comment-1186823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Deanna</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150424-00/?p=44163#comment-1186823">
			April 26, 2015 at 12:55 pm</a>		</div>

		<p>It&#39;s the same as VB6&#39;s &quot;ParamArray ByRef xxx() As Variant&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1187054">
				<div id="div-comment-1187054" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Axel Rietschin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150424-00/?p=44163#comment-1187054">
			April 27, 2015 at 11:13 am</a>		</div>

		<p>@Logan: only on [local] interfaces or methods, i.e. not marshaled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1187374">
				<div id="div-comment-1187374" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150424-00/?p=44163#comment-1187374">
			April 29, 2015 at 7:25 am</a>		</div>

		<p>I just want to use this opportunity to thank Raymond for all his &quot;highly technical&quot; articles (like this one). I consider the amount of the insight and clarity in them unprecedented to any other source handling the same topics.</p>
<p>A personal anecdote: Until up to a few days ago, I&#39;ve never had to do anything with the &quot;shell namespace&quot; objects. As soon as I&#39;ve discovered the OldNewThing articles I&#39;ve had a good examples for the start.</p>
<p>This article now I really, really respect for its depth:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2013/12/20/10483672.aspx">blogs.msdn.com/&#8230;/10483672.aspx</a></p>
<p>Thanks Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

