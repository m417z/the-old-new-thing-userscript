<html>
<head>
<title>What's the atom returned by RegisterClass useful for?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What&#8217;s the atom returned by RegisterClass useful for?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 11, 2004 / year-entry #363</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20041011-00/?p=37603</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The RegisterClass and RegisterClassEx functions return an ATOM. What is that ATOM good for? The names of all registered window classes is kept in an atom table internal to USER32. The value returned by the class registration functions is that atom. You can also retrieve the atom for a window class by asking a window...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The <code> <a href="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/windowclasses/windowclassreference/windowclassfunctions/registerclass.asp"> RegisterClass</a></code> and <code> <a href="http://msdn.microsoft.com/library/en-us/winui/WinUI/WindowsUserInterface/Windowing/WindowClasses/WindowClassReference/WindowClassFunctions/RegisterClassEx.asp"> RegisterClassEx</a></code> functions return an <code> <a href="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/dataexchange/atoms.asp"> ATOM</a>.</code> What is that <code>ATOM</code> good for?</p>
<p> The names of all registered window classes is kept in an <a href="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/dataexchange/atoms/aboutatomtables.asp"> atom table</a> internal to USER32.  The value returned by the class registration functions is that atom. You can also retrieve the atom for a window class by asking a window of that class for its class atom via <code>GetClassWord(hwnd, GCW_ATOM)</code>. </p>
<p> The atom can be converted to an integer atom via <a href="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/dataexchange/atoms/atomreference/atommacros/makeintatom.asp"> the <code>MAKEINTATOM</code> macro</a>, which then can be used by functions that accept class names in the form of strings or atoms. The most common case is the <code>lpClassName</code> parameter to <a href="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/windows/windowreference/windowfunctions/createwindow.asp"> the <code>CreateWindow</code> macro</a> and <a href="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/windows/windowreference/windowfunctions/createwindowex.asp"> the <code>CreateWindowEx</code> function</a>. Less commonly, you can also use it as the <code>lpClassName</code> parameter for <a href="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/windowclasses/windowclassreference/windowclassfunctions/getclassinfo.asp"> the <code>GetClassInfo</code></a> and <a href="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/windowclasses/windowclassreference/windowclassfunctions/getclassinfoex.asp"> <code>GetClassInfoEx</code> functions</a>. (Though why you would do this I can't figure out. In order to have the atom to pass to <code>GetClassInfo</code> in the first place, you must have registered the class (since that's what returns the atom), in which case why are you asking for information about a class that you registered?) </p>
<p> To convert a class name to a class atom, you can create a dummy window of that class and then do the aforementioned <code>GetClassWord(hwnd, GCW_ATOM)</code>. Or you can take advantage of the fact that the return value from the <code>GetClassInfoEx</code> function is the atom for the class, cast to a <code>BOOL</code>. This lets you do the conversion without having to create a dummy window. (Beware, however, that <code>GetClassInfoEx</code>'s return value is <strong>not</strong> the atom on Windows&nbsp;95-derived operating systems.) </p>
<p> But what good is the atom? </p>
<p> Not much, really. Sure, it saves you from having to pass a string to functions like <code>CreateWindow</code>, but all it did was replace a string with with an integer you now have to save in a global variable for later use. What used to be a string that you could hard-code is now an atom that you have to keep track of. Unclear that you actually won anything there. </p>
<p> I guess you could use it to check quickly whether a window belongs to a particular class.  You get the atom for that class (via <code>GetClassInfo</code>, say) and then get the atom for the window and compare them.  But you can't cache the class atom since the class might get unregistered and then re-registered (which will give it a new atom number). And you can't prefetch the class atom since the class may not yet be registered at the point you prefetch it. (And as noted above, you can't cache the prefetched value anyway.) So this case is pretty much a non-starter anyway; you may as well use <a href="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/windowclasses/windowclassreference/windowclassfunctions/getclassname.asp"> the <code>GetClassName</code> function</a> and compare the resulting class name against the class you're looking for. </p>
<p> In other words, window class atoms are an anachronism. Like <a href="http://blogs.msdn.com/oldnewthing/archive/2003/11/13/55662.aspx"> replacement dialog box classes</a>, it's one of those generalities of the Win32 API that never really got off the ground, but which must be carried forward for backwards compatibility. </p>
<p> But at least now you know what they are. </p>
<p> [Typos fixed October 12.] </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-215743">
				<div id="div-comment-215743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041011-00/?p=37603#comment-215743">
			October 11, 2004 at 7:25 am</a>		</div>

		<blockquote><p>
  you can take advantage of the fact that the return value from the GetClassInfoEx function is the atom for the class, cast to a BOOL.</p>
<p>Is this guaranteed, or is it subject to change in future versions?
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-215753">
				<div id="div-comment-215753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041011-00/?p=37603#comment-215753">
			October 11, 2004 at 11:08 am</a>		</div>

		<p>Yeah, I was wondering the same thing about casting to BOOL yesterday. The dialog procedure is supposed to handle some messages by casting the return value to BOOL instead of using DWL_MSGRESULT (WM_CTLCOLORBTN, WM_CTLCOLORSTATIC, etc, probably others). How does that translate to 64 bit? Is BOOL 64 bit, or is HBRUSH 32 bit on a 64 bit system?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-215763">
				<div id="div-comment-215763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041011-00/?p=37603#comment-215763">
			October 11, 2004 at 11:10 am</a>		</div>

		<p><a target="_new" href="http://weblogs.asp.net/oldnewthing/archive/2004/01/15/58973.aspx#59082" rel="nofollow">http://weblogs.asp.net/oldnewthing/archive/2004/01/15/58973.aspx#59082</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-215783">
				<div id="div-comment-215783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">superclasser</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041011-00/?p=37603#comment-215783">
			October 11, 2004 at 1:12 pm</a>		</div>

		<p>GetClassInfoEx is useful for superclassing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-215793">
				<div id="div-comment-215793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041011-00/?p=37603#comment-215793">
			October 11, 2004 at 1:20 pm</a>		</div>

		<p>Right, but why would you superclass a class that you yourself registered? Wouldn&#8217;t you just fix your original class?  I can see superclassing somebody else&#8217;s class, but in that case you don&#8217;t have their atom since you didn&#8217;t call RegisterClass originally.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-215803">
				<div id="div-comment-215803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">doynax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041011-00/?p=37603#comment-215803">
			October 11, 2004 at 1:25 pm</a>		</div>

		<p>I&#8217;m using the ATOM as a handle when writing my win32 wrapper classes. Saves having to deal with string allocation, especially since the names were auto generated anyway.</p>
<p>But why can&#8217;t I patch a window class without creating an actual window instance?<br />
<br />This feels kinda strange since I can get a handle (i.e. the ATOM) and even retreive it&#8217;s data (GetClassInfoEx) without having a window around. Not to mention that I have to create a dummy window to subclass standard controls.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-215823">
				<div id="div-comment-215823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ryan Myers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041011-00/?p=37603#comment-215823">
			October 11, 2004 at 3:30 pm</a>		</div>

		<p>I use it for a similar reason to doynax.  If you&#8217;re making a C++ wrapper for a window class and want to delete the wrapper as part of the destructor, you have to keep around either the name of the class or the atom returned by RegisterClassEx.  Although I didn&#8217;t know about the legacy reasons for atoms &#8212; that might lead me to store it as a string instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-215833">
				<div id="div-comment-215833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">teebee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041011-00/?p=37603#comment-215833">
			October 11, 2004 at 5:35 pm</a>		</div>

		<p>I find it terribly helpful/useful to use the GCW_ATOM to determine the window class during the WM_NOTIFY processing of my C appication.  Prior to using GCW_ATOM we used a strcmp loop through all the currently supported window classes we&#8217;ve implemented.  The overhead of 30 or more strcmp and a strcpy seems much worse that a loop comparing 30 ATOMS.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

