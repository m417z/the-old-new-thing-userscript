<html>
<head>
<title>Extracting pages from a PDF document and saving them as separate image files, JavaScript edition with Promises</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Extracting pages from a PDF document and saving them as separate image files, JavaScript edition with Promises</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 27, 2017 / year-entry #147</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170627-00/?p=96475</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Trying it out a different way.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<!-- backref: Extracting pages from a PDF document and saving them as separate image files, C# edition -->
Last time</a>,
we converted the
C# version of the
<a HREF="https://github.com/Microsoft/Windows-universal-samples/tree/v1.0.11/Samples/PdfDocument">
PDF Document</a> sample program so that it
saved the pages to disk as image files.
Today we'll port those changes to JavaScript with Promises.
</p>
<pre>
function viewPage() {
  WinJS.log &amp;&amp; WinJS.log("", "sample", "status");

  var pageNumber = parseInt(pageNumberBox.value, 10);
  if (isNaN(pageNumber) || (pageNumber &lt; 1) ||
    (pageNumber &gt; pdfDocument.pageCount)) {
    WinJS.log &amp;&amp; WinJS.log("Invalid page number.", "sample", "error");
    return;
  }

  output.src = "";
  progressControl.style.display = "block";

  // Convert from 1-based page number to 0-based page index.
  var pageIndex = pageNumber - 1;

  var page = pdfDocument.getPage(pageIndex);

  <font COLOR="blue">var picker = new Windows.Storage.Pickers.FileSavePicker();
  picker.fileTypeChoices["PNG image"] = [".png"];
  picker.pickSaveFileAsync().then(outfile =&gt; {
    if (outfile) {
      outfile.openTransactedWriteAsync().then(transaction =&gt; {
        var options = new PdfPageRenderOptions();
        options.destinationHeight = page.size.height * 2;
        options.destinationWidth = page.size.width * 2;
        page.renderToStreamAsync(transaction.stream, options).then(() =&gt; {
          transaction.close();
        });
      });
    }
  })</font>.done(() =&gt; {
    page.close();
    // Delete the code that sets the blob into the image
    progressControl.style.display = "none";
  });
}
</pre>
<p>
This is an uninspired direct translation of the C# code to JavaScript.
We can imbue it with a little JavaScript inspiration by flattening the
promise chain a bit.
</p>
<pre>
  <font COLOR="blue">var transaction;</font>
  var picker = new Windows.Storage.Pickers.FileSavePicker();
  picker.fileTypeChoices["PNG image"] = [".png"];
  picker.pickSaveFileAsync().then(outfile =&gt; {
    if (outfile) {
      <font COLOR="blue">return outfile.openTransactedWriteAsync();</font>
    }
  })<font COLOR="blue">.then(trans =&gt; {
    transaction = trans;
    if (transaction) {</font>
        var options = new PdfPageRenderOptions();
        options.destinationHeight = page.size.height * 2;
        options.destinationWidth = page.size.width * 2;
        <font COLOR="blue">return page.renderToStreamAsync(transaction.stream, options);
    }
  }).then(() =&gt; {
    transaction &amp;&amp;</font> transaction.close();<font COLOR="blue">
  })</font>.done(() =&gt; {
    page.close();
    // Delete the code that sets the blob into the image
    progressControl.style.display = "none";
  });
</pre>
<p>
Instead of nesting the promises, I chained them, and each step of
the chain checks whether the previous step succeeded before proceeding.
(If not, then that step does nothing.)
</p>
<p>
Alternatively, I could've thrown the Promise into an error state,
but WinRT tries to reserve exceptions for unrecoverable errors,
primarily out-of-memory conditions for a small allocation,
or a programmer error.
Errors that a program is expected to recover from are generally
reported by an in-API mechanism.
(There are notable exceptions to this principle,
primarily in the I/O area.)
</p>
<p>
Anyway, you may have noticed that I used arrow functions,
which are feature of ES6.
Next time, I'm going to take it even further.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1300775">
				<div id="div-comment-1300775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170627-00/?p=96475#comment-1300775">
			June 27, 2017 at 1:20 pm</a>		</div>

		<p>I would really hope that WinJS would support <code>async</code> and <code>await</code> which would make this a lot more readable, but I&#8217;m not sure if it tracks the same version of chakra that Edge uses.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1300795">
				<div id="div-comment-1300795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Yates</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170627-00/?p=96475#comment-1300795">
			June 27, 2017 at 4:00 pm</a>		</div>

		<p>You could transpire with typescript?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1300816">
				<div id="div-comment-1300816" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170627-00/?p=96475#comment-1300816">
			June 28, 2017 at 3:20 am</a>		</div>

		<p>The async-less version of chained Promises are particularly annoying due to the awkward way of storing intermediate results.</p>
<p>I&#8217;m not sure why Raymond used `transaction &amp;&amp; transaction.close()` but not `outfile &amp;&amp; outfile.openTransactedWriteAsync()` (either with `return` or using implicit expression return).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-3" id="comment-1300825">
				<div id="div-comment-1300825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170627-00/?p=96475#comment-1300825">
			June 28, 2017 at 6:44 am</a>		</div>

		<p>The &#8220;transaction &#038;&#038;&#8221; was introduced as part of the chain flattening. The &#8220;if (outfile)&#8221; was part of the original code. If I had changed the &#8220;if (outfile)&#8221; then that would&#8217;ve confused the issue, since it was not related to the stated transformation.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1301236">
				<div id="div-comment-1301236" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">contextfree</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170627-00/?p=96475#comment-1301236">
			July 3, 2017 at 9:37 am</a>		</div>

		<p>WinJS is a JavaScript library, it&#8217;s not a general term for the WinRT support for JavaScript</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1300815">
				<div id="div-comment-1300815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170627-00/?p=96475#comment-1300815">
			June 28, 2017 at 12:55 am</a>		</div>

		<p>Where / how could this JavaScript script be executed, if not in a browser?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1300845">
				<div id="div-comment-1300845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dmitry Onoshko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170627-00/?p=96475#comment-1300845">
			June 28, 2017 at 7:31 am</a>		</div>

		<p>2 Someone<br />
Not sure I understood your question correctly, but from what I can tell, those UWP applications are yet another terribly (un?)documented piece of ZIPped manifests plus a tiny amount of useful stuff which can optionally be written in JavaScript and can call some APIs by (usually) using the WinJS library.</p>
<p>I gave up trying to build such a thing manually quite soon, since the documentation was contradicting itself and split into multiple pieces. (I didn&#8217;t want to use the multi-gigabyte Visual Studio just to write a tiny useful app of a few kilobytes.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1300925">
				<div id="div-comment-1300925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170627-00/?p=96475#comment-1300925">
			June 29, 2017 at 3:45 am</a>		</div>

		<p>I didn&#8217;t get where one could execute this code. (For example, I would expect that JavaScript in a browser is sandboxed so this code snippet would not be able to save files at some custom folder at all.)</p>
<p>&gt;&gt;those UWP applications&lt;&lt;</p>
<p>Applications in JavaScript sounds very strange to me.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1300875">
				<div id="div-comment-1300875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Osxpert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170627-00/?p=96475#comment-1300875">
			June 28, 2017 at 11:26 am</a>		</div>

		<p>The first JS example is a lot more readable than async await (dont like them)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1300935">
				<div id="div-comment-1300935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170627-00/?p=96475#comment-1300935">
			June 29, 2017 at 4:37 am</a>		</div>

		<p>New things take a bit to get used to, but async/await are great tools to simplify asynchronous code. The main advantages:<br />
&#8211; the logic is kept linear instead of being wrapped in callbacks which gets confusing very quickly when you are four levels nested<br />
&#8211; exception handling can be done in the standard way of the language instead of needing different callbacks </p>
<p>Yes you&#8217;ll have to use some new technology, but it&#8217;s pretty simple, particularly for the standard use cases.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

