<html>
<head>
<title>Why the compiler can't autoconvert foreach to for</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why the compiler can&#8217;t autoconvert foreach to for</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 21, 2004 / year-entry #152</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040421-00/?p=39703</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">People have discovered that the "natural" C# loop construct ArrayList list = ...; foreach (Object o in list) { ... do something with o ... } is fractionally slower than the corresponding manual loop: ArrayList list = ...; for (int i = 0; i < list.Length; i++) { Object o = list[i]; ... do something...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
People have discovered that the "natural" C# loop construct
</p>
<pre>
ArrayList list = ...;
foreach (Object o in list) {
  ... do something with o ...
}
</pre>
<p>
is fractionally slower than the corresponding manual loop:
</p>
<pre>
ArrayList list = ...;
for (int i = 0; i &lt; list.Length; i++) {
    Object o = list[i];
  ... do something with o ...
}
</pre>
<p>
The first thing that needs to be said here is that
</p>
<blockquote><p>
The performance difference is almost certainly insignificant.
</p>
</blockquote>
<p>
Don't go running around changing all your <b>foreach</b>
loops into corresponding <b>for</b> loops thinking that your
program will magically run faster.  It almost certainly won't,
because loop overhead is rarely where a non-benchmark program
spends most of its time.
</p>
<p>
My topic for today is not how to make your code faster by abandoning
your <b>foreach</b> loops.  My topic is to answer the question,
"Why doesn't the compiler autoconvert the <b>foreach</b> into
the corresponding <b>for</b>, so I don't lose readability but
get to take advantage of the performance benefit."
</p>
<p>
The reason is that the two loops are in fact not identical.
</p>
<p>
The semantics for enumeration is that you aren't allowed to change
the object being enumerated while an enumeration is in progress.
If you do, then the enumerator will throw an
InvalidOperationException the next time you talk to it.
On the other hand, the <b>for</b> loop doesn't care if you change the
collection while you're enumerating it.  If you insert items into
the collection inside the <b>for</b> loop, the loop will keep on
going and depending on where the insertion happened, you might
double-enumerate an item.
</p>
<p>
If the compiler changed the <b>foreach</b> to a <b>for</b>, then
a program that used to throw an exception would now run without
a hiccup.  Whether you consider this an "improvement" is a matter
of opinion.
(Depending on the circumstances, it may be better for the
program to crash than to produce incorrect results.)
</p>
<p>
Now, the compiler might be able to prove that you don't change
the collection inside the loop, but that is often hard to prove.
For example, does this loop change the collection?
</p>
<pre>
ArrayList list = target.GetTheList();
foreach (Object o in list) {
  o.GetHashCode();
}
</pre>
<p>
Well, it doesn't look like it.  But who knows, maybe <tt>target</tt>
looks like this:
</p>
<pre>
class Sneaky {
  ArrayList list_;

  public Sneaky(ArrayList list) { list_ = list; }
  public override int GetHashCode()
  {
    list_.Add(this);
    return base.GetHashCode();
  }
}

class SneakyContainer {
  public ArrayList GetTheList()
  {
    ArrayList list = new ArrayList();
    list.Add(new Sneaky(list));
    return list;
  }
}

class Program {
  static public void Main()
  {
    SneakyContainer target = new SneakyContainer();
<font COLOR=blue>    ArrayList list = target.GetTheList();
    foreach (object o in list) {
      o.GetHashCode();
    }
</font>  }
}
</pre>
<p>
Ah, little did you know that <tt>o.GetHashCode()</tt> modifies
the ArrayList.  And yet it looked so harmless!
</p>
<p>
If the <tt>SneakyContainer</tt> class came from another
assembly, then the compiler must assume the worst, because
it's possible that somebody will make that assembly sneaky
after you compiled your assembly.
</p>
<p>
If that's not a messed-up enough reason, here's another:
The <tt>ArrayList</tt> class is not sealed.
Therefore, somebody can override its IEnumerable.GetEnumerator
and return a nonstandard enumerator. For example, here's a
class that always returns an empty enumerator:
</p>
<pre>
class ApparentlyEmptyArrayList : ArrayList {
  static int[] empty = new int[] { };
  public override IEnumerator GetEnumerator()
    { return empty.GetEnumerator(); }
}
</pre>
<p>
"Who would be so crazy as to override the enumerator?"
</p>
<p>
Well, this one is rather bizarro, but more generally one might
override the enumerator in order to add a filter or to change the
order of enumeration.
</p>
<p>
So you can't even trust that your ArrayList really is an ArrayList.
It might be an ApparentlyEmptyArrayList!
</p>
<p>
Now if the compiler wanted to do this rewrite optimization, not only
would it have to prove that the object being enumerated is not
modified inside the enumeration, it also has to prove that the
object really is an ArrayList and not a derived class that may have
overridden the GetEnumerator method.
</p>
<p>
Given the late-binding nature of cross-assembly classes, the number
of cases where the compiler can prove these requirements
is very restricted indeed, to the point where the number of places
where the optimization can safely be performed without changing
semantics becomes so vanishingly small as to be not worth the effort.
</p>
<p>
(By some astonishing universal synchronicity, this topic got picked up
by several people all at once:</p>
<ul>
<li><a HREF=/ericgu/archive/2004/04/18/115566.aspx>
Efficiency of iteration over arrays</a>?</p>
<li><a HREF=/Kevin_Ransom/archive/2004/04/19/116072.aspx>
To foreach or not to foreach that is the question</a>.
</ul>
<p>Sort of the same way a movie subject gets covered all at once.
My favorite is the year that there were
two volcano disaster movies,
<i><a HREF=http://www.rottentomatoes.com/m/Volcano-1076267/reviews.php
>Volcano</a></i> and
<i><a HREF=http://www.rottentomatoes.com/m/DantesPeak-1075784/
>Dante's Peak</a></i>.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-166103">
				<div id="div-comment-166103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.25hoursaday.com/weblog' rel='external nofollow' class='url'>kpako@yahoo.com (Dare Obasanjo)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040421-00/?p=39703#comment-166103">
			April 21, 2004 at 10:01 am</a>		</div>

		<p>My favorite movie subject all at once period was Antz and A Bug&#8217;s Life. The Deep Impact/Armageddon period was also interesting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166133">
				<div id="div-comment-166133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ericlippert' rel='external nofollow' class='url'>Eric Lippert</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040421-00/?p=39703#comment-166133">
			April 21, 2004 at 10:29 am</a>		</div>

		<p>On a related topic, the way JScript/JScript .NET handle this is a little weird.  I wrote a couple of articles on that a while back:</p>
<p><a target="_new" href="http://blogs.msdn.com/ericlippert/archive/2003/09/22/53063.aspx" rel="nofollow">http://blogs.msdn.com/ericlippert/archive/2003/09/22/53063.aspx</a></p>
<p><a target="_new" href="http://blogs.msdn.com/ericlippert/archive/2003/10/01/53134.aspx" rel="nofollow">http://blogs.msdn.com/ericlippert/archive/2003/10/01/53134.aspx</a></p>
<p>Remember 1988, when all those terrible mind-body-switch movies came out at the same time?   That was weird.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166143">
				<div id="div-comment-166143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://haack.org/' rel='external nofollow' class='url'>nospamplease75@yahoo.com (Haacked)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040421-00/?p=39703#comment-166143">
			April 21, 2004 at 11:13 am</a>		</div>

		<p>To prove your point, I had written an enumerator called PageRangeEnumerator.  You give it a string like &quot;1-4,7,18+&quot; and it would only enumerate over those pages.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166193">
				<div id="div-comment-166193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clinton Pierce</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040421-00/?p=39703#comment-166193">
			April 21, 2004 at 1:01 pm</a>		</div>

		<p>Larry Wall talks about optimizing for the Programmer as well as for Runtime speed.  I&#8217;ll give up quite a few CPU cycles to maintain foreach(&#8230;) over a corresponding for(&#8230;) loop anytime.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166213">
				<div id="div-comment-166213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Kafrissen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040421-00/?p=39703#comment-166213">
			April 21, 2004 at 2:55 pm</a>		</div>

		<p>You have described why the compiler cannot optimize one form into another, but you did not describe why one form is less efficient than the other.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166223">
				<div id="div-comment-166223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040421-00/?p=39703#comment-166223">
			April 21, 2004 at 2:59 pm</a>		</div>

		<p>My topic is &quot;Why the compiler can&#8217;t autoconvert foreach to for&quot;, not &quot;Which one is faster&quot;. That&#8217;s a topic for somebody else (try the links I provided).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-167383">
				<div id="div-comment-167383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JFo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040421-00/?p=39703#comment-167383">
			April 24, 2004 at 6:20 pm</a>		</div>

		<p>It turns out that sometimes a foreach can be faster than a for loop &#8211; some people have been converting their loops from this:</p>
<p>foreach (Control c in this.Controls) {<br />
<br /> // &#8230;<br />
<br />}</p>
<p>to this:</p>
<p>for (int i = 0; i &lt; this.Controls.Count; i++) {<br />
<br />  // &#8230;<br />
<br />}</p>
<p>Since you&#8217;re now accessing the &quot;Controls&quot; property on every iteration instead of using the enumerator it significantly slows down the loop.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-168573">
				<div id="div-comment-168573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">indranil banerjee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040421-00/?p=39703#comment-168573">
			April 27, 2004 at 3:07 pm</a>		</div>

		<p>but this just begs the question: Why were they designed to be semantically different?</p>
<p>Sure, &quot;depending on the circumstances, it may be better for the program to crash than to produce incorrect results&quot;. And sometimes the other way around. The language designer can never know. So why the inconsistency? </p>
<p>I would choose the more permissive of the two choices, apply it consistently to both keywords and leave error handling to the programmer.</p>
<p>BTW, JFo a really smart foreach would generate this :-</p>
<p>int end = this.Controls.Count<br />
<br />for (int i = 0; i &lt; end; ++i) {<br />
<br />// &#8230;<br />
<br />} </p>
<p>thats what happens in STL</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-168593">
				<div id="div-comment-168593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040421-00/?p=39703#comment-168593">
			April 27, 2004 at 3:51 pm</a>		</div>

		<p>They are different because &quot;foreach&quot; is a generalized enumerator whereas &quot;for&quot; works only for integer-indexed objects. One is generalized and one is specialized.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-171433">
				<div id="div-comment-171433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.lemanix.com/nick/archive/2004/05/05/455.aspx' rel='external nofollow' class='url'>Nick's Delphi Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040421-00/?p=39703#comment-171433">
			May 5, 2004 at 12:34 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-190683">
				<div id="div-comment-190683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040421-00/?p=39703#comment-190683">
			July 5, 2004 at 12:03 pm</a>		</div>

		<p>Commenting on this entry has been closed.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

