<html>
<head>
<title>Understanding the classical model for linking: Taking symbols along for the ride</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Understanding the classical model for linking: Taking symbols along for the ride</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 8, 2013 / year-entry #6</td></tr>
<tr><td><b>Tags:</b></td><td>code;linker</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time, we learned the basics of the classical model for linking. Today, we'll look at the historical background for that model, and how the model is exploited by libraries. In the classical model, compilers and assemblers consume source code and spit out an OBJ file. They do as much as they can, but eventually...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last time, we learned the basics of
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/01/07/10382714.aspx">
the classical model for linking</a>.
Today, we'll look at the historical background for that model,
and how the model is exploited by libraries.
</p>
<p>
In the classical model,
compilers and assemblers consume source code and spit out
an OBJ file.
They do as much as they can, but eventually they get stuck
because they don't have the entire module at their disposal.
To record the work remaining to be done, the OBJ file contains
various sections:
a data section, a code section (historically
and confusingly called <i>text</i>),
an uninitialized data section, and so on.
The linker resolves symbols, and then for each OBJ file
that got pulled into the module,
it combines all the code sections into one giant code section,
all the data sections into one giant data section, and so on.
</p>
<p>
One thing you may have noticed is that the unit of consumption
is the OBJ file.
If an OBJ file is added to the module,
the whole thing gets added,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/04/27/10002865.aspx">
even if you needed only a tiny part</a>
of the OBJ file.
Historically,
the reason for this rule is that the compilers and assemblers
did not include information in the OBJ file to indicate
how to separate all the little pieces.
It's like if somebody said,
"Can you get me a portable mp3 player?"
and the only thing available in the library
was a smartphone.
Sure, it plays mp3 files, but there's a lot of other
electronic junk in there that you <i>didn't</i> ask for,
but it came along for the ride.
And you don't know how to disassemble the smartphone
and extract just the mp3-player part.
</p>
<p>
This behavior is actually exploited as a <i>feature</i>,
because it allows for tricks like this:
</p>
<pre>
/* magicnumber.h */
extern int magicNumber;

/* magicnumber.c */
int magicNumber;

class InitMagicNumber
{
 InitMagicNumber()
 {
    magicNumber = ...;
 }
}
g_InitMagicNumber;
</pre>
<p>
I'm not going to go into the magic of
<a HREF="http://msdn.microsoft.com/library/7977wcck.aspx">
how the compiler knows to construct the
<code>g_Init&shy;Magic&shy;Number</code>
object at module entry</a>;
I'll let you read up on that.
</p>
<p>
The point is that if anybody in the module refers
to the <code>magic&shy;Number</code> variable,
then that causes <code>magic&shy;number<wbr>.obj</code>
to be pulled into the module, which brings in not
just the <code>magic&shy;Number</code> variable,
but also the
<code>g_Init&shy;Magic&shy;Number</code> object,
which initializes the magic number when
the process starts.
</p>
<p>
One place the C runtime library took advantage of this
was in deciding whether or not to include floating point
support.
</p>
<p>
As you may recall, the 8086 processor did not have
native floating support.
You had to buy the 8087 coprocessor for that.
It was therefore customary for programs of that era
to include a floating point library if they
did any floating point arithmetic.
The library would redirect floating point
operations from the coprocessor to the emulator.
</p>
<p>
The floating point emulation library was pretty
hefty, and it would have been a waste to include
it for programs that didn't use floating point
(which was most of them),
so the compiler used a trick to allow it to pull
in the floating point library only if the
program used floating point:
If you used floating point,
then the compiler added a <i>needed</i> symbol
to your OBJ file:
<code>__fltused</code>.
</p>
<p>
That magical
<code>__fltused</code> symbol was marked as
<i>provided</i>
by... the floating point emulation library!
</p>
<p>
The linker found the symbol in an OBJ in
the floating point emulation library,
and that served as the loose thread that
caused the rest of the floating point
emulation library to be pulled into your module.
</p>
<p>
Next time,
we'll look at the interaction between OBJ files and LIB files.
</p>
<p>
<b>Bonus reading</b>:
Larry Osterman gives
<a HREF="http://blogs.msdn.com/b/larryosterman/archive/2004/09/27/234840.aspx">
another example</a>
of this trick.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1031643">
				<div id="div-comment-1031643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031643">
			January 8, 2013 at 8:18 am</a>		</div>

		<p>FYI: you can&#39;t split by deciding when one symbol starts the previous ends. Symbols can share code. Most famously, malloc and realloc in certain old libraries were about 10 bytes apart.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031653">
				<div id="div-comment-1031653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031653">
			January 8, 2013 at 8:37 am</a>		</div>

		<p>@Joshua</p>
<p>While it is certainly true that one procedure can &quot;validly&quot; spill into another, it could be easily argued that this was bad practice even when memory was tight. We are talking about an extra 5 bytes for the routine that spills to instead call the function that it spills into.</p>
<p>Of course, back then programming was quite a bit more clever than it is today so the definition of &quot;bad practice&quot; was also different. It wasnt uncommon to calculate a code offset at runtime based on the size of the instruction(s) that repeatedly perform some operation in an unrolled loop manner (ex: the assembly precursor to Duffs Device)</p>
<div class="post">[<em>The linker is language-agnostic. By the time the OBJ reaches the linker, it&#39;s just a bunch of bytes with symbolic labels attached. Some languages support multiple entry points for a single function. (<a href="http://c-faq.com/misc/entry.html" rel="nofollow">Even C considered such support</a> but eventually decided against it.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031673">
				<div id="div-comment-1031673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031673">
			January 8, 2013 at 10:23 am</a>		</div>

		<p>Thanks, Raymond, for the g_InitMagicNumber example. I&#39;ve wondered before, and again prompted by yesterday&#39;s post, about how useful it would be if the compiler did something like automatically split out each symbol into its own object file to reduce dependencies, but that would be a good reason why that wouldn&#39;t work. I&#39;ve used stuff like your example on a few occasions (I even have &quot;ConstructionRunner&quot; and &quot;DestructionRunner&quot; classes that I pull around to various projects &#8212; you write &#39;void foo() { &#8230; }; ConstructionRunner dummy(foo);&#39;), so I find it very sympathetic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1031683">
				<div id="div-comment-1031683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031683">
			January 8, 2013 at 11:27 am</a>		</div>

		<p>@joshua:</p>
<p>This is why gods gave the man the great power of COMDAT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031703">
				<div id="div-comment-1031703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031703">
			January 8, 2013 at 2:35 pm</a>		</div>

		<p>[The magic is how the constructor manages to run when there is no explicit caller. -Raymond]</p>
<p>Maybe I should show Raymond how to make code run without an implicit caller either.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031713">
				<div id="div-comment-1031713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031713">
			January 8, 2013 at 7:39 pm</a>		</div>

		<p>@alegr1:</p>
<p>It&#39;s sad that MASM doesn&#39;t have a way to declare COMDATs. &nbsp;If you use /Gy /Fa on cl.exe&#39;s command line to generate function COMDATs and output assembly source, the COMDAT flag is only a comment. &nbsp;If you were to assemble the output file, it wouldn&#39;t have COMDATs.</p>
<p>@Brian_EE:</p>
<p>Global constructors work in Visual C++ by the compiler putting a pointer to the constructor into a specifically-named .obj section. &nbsp;Part of the msvcrt startup code goes through the list of pointers in this section and calls each function; in Visual Studio 2010, that&#39;s the function _initterm in crt0dat.c. &nbsp;See also crt0init.c.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1031693">
				<div id="div-comment-1031693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031693">
			January 8, 2013 at 12:12 pm</a>		</div>

		<p>&quot;I&#39;m not going to go into the magic of &#8230;.&quot;</p>
<p>Wait. You created a global object of type InitMagicNumber, so the object must get constructed. How is that magic? Perhaps you mis-spelled *logic* ?</p>
<div class="post">[<em>The magic is how the constructor manages to run when there is no explicit caller. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031723">
				<div id="div-comment-1031723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031723">
			January 9, 2013 at 3:19 am</a>		</div>

		<p>Thus the note in *printf pointing out that you couldn&#39;t use any of the floating-point formats unless you actually did some floating-point operation that caused the floating-point library to get linked in.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031733">
				<div id="div-comment-1031733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031733">
			January 9, 2013 at 3:23 am</a>		</div>

		<p>Another version of the trick is when you have a dllexport symbol in a library; a fake reference to the symbol in an unused function in an explicit object file will cause the exported symbol to get resolved. Firefox used to do this but now they just skip the intermediate library step and simply link all their bazillion object files together.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1031743">
				<div id="div-comment-1031743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031743">
			January 9, 2013 at 6:48 am</a>		</div>

		<p>@Myria:</p>
<p>I understand how that works. I was questioning why Raymond considered it to be &quot;magic&quot;.</p>
<p>And in DSP-land the section is called .init_array and is called in c_int00.</p>
<div class="post">[<em>It&#39;s even more magical than the __fltused magic, since it employs a trick beyond merely resolving symbols. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031933">
				<div id="div-comment-1031933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1031933">
			January 9, 2013 at 8:37 am</a>		</div>

		<p>I suspect the use of &quot;magic&quot; to describe the operating of constructors and destructors is because by my understanding if you went back to, I dunno, 1980 runtimes, they wouldn&#39;t get run. The g_InitMagicNumber symbol would be present, but wouldn&#39;t do anything. (1980 is arbitrary. Maybe it&#39;d have to be 1975 or something.)</p>
<p>As Raymond&#39;s latest response (to Brian_EE) suggests, even something like __fltused fits into the classical model of linking, and you&#39;d be able to pull that trick with 1980 linkers.</p>
<div class="post">[<em>They get run even under the classical model, but by a technique not described in this series of articles (but described by Larry). -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1032073">
				<div id="div-comment-1032073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1032073">
			January 9, 2013 at 12:09 pm</a>		</div>

		<p>I don&#39;t get why you need __fltused. &nbsp;I thought that something like 1.2 + 3.4 gets compiled into something like __fltadd(1.2, 3.4). &nbsp;Then you can resolve __fltadd instead of a bogus symbol like __fltused.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1032153">
				<div id="div-comment-1032153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gregory</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1032153">
			January 9, 2013 at 3:23 pm</a>		</div>

		<p>Why do we want magicNumber initialization to happen through g_InitMagicNumber exactly?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1032293">
				<div id="div-comment-1032293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1032293">
			January 10, 2013 at 5:59 am</a>		</div>

		<p>@Gregory: Um, simply because it is a contrived example used to describe the issue in general terms maybe?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1032383">
				<div id="div-comment-1032383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gregory</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130108-00/?p=5623#comment-1032383">
			January 10, 2013 at 2:51 pm</a>		</div>

		<p>Can someone come up with a more concrete scenario then?</p>
<div class="post">[<em>See the entire printf discussion. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

