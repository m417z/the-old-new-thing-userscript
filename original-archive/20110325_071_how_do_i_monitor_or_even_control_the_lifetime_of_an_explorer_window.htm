<html>
<head>
<title>How do I monitor, or even control, the lifetime of an Explorer window?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I monitor, or even control, the lifetime of an Explorer window?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 25, 2011 / year-entry #72</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer wanted help with monitoring the lifetime of an Explorer window. We want to launch a copy of Explorer to open a specific folder, then wait until the user closes the folder before continuing. We tried launching a copy of Explorer with the folder on the command line, then doing a Wait­For­Single­Object on the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer wanted help with monitoring the lifetime of an
Explorer window.
</p>
<blockquote CLASS=q><p>
We want to launch a copy of Explorer to open a specific folder,
then wait until the user closes the folder before continuing.
We tried launching a copy of Explorer with the folder on the
command line, then doing a <code>Wait&shy;For&shy;Single&shy;Object</code>
on the process handle, but the wait sometimes completes immediately
without waiting.
How do we wait until the user closes the Explorer window?
</p>
</blockquote>
<p>
This is another case of solving a problem halfway and then
having trouble with the other half.
</p>
<p>
The reason that <code>Wait&shy;For&shy;Single&shy;Object</code>
returns immediately
is that Explorer is a single-instance program (well, limited-instance).
When you open an Explorer window, the request is handed off to
a running copy of Explorer, and the copy of Explorer you launched
exits.
That's why your <code>Wait&shy;For&shy;Single&shy;Object</code>
returns immediately.
</p>
<p>
Fortunately, the customer was willing to explain their underlying
problem.
</p>
<blockquote CLASS=q><p>
We have a wizard that creates some files in a directory
based on information provided by the user,
and we want to launch Explorer to view that directory
so users can verify that things
are set up the way they want them.
When users close the Explorer window, we ask them if everything
was good; if not, then we back up and let the user try again.
</p>
</blockquote>
<p>
Aha, the program is using Explorer as a "view this folder for
a little while" subroutine.
Unfortunately, Explorer doesn't work that way.
For example, the user might decide to use the Address Bar
and go visit some other folders completely unrelated to your
program, and your program would just be sitting there waiting
for the user to close that window;
meanwhile, the user doesn't realize that your program is waiting
for it.
</p>
<p>
What you can do is host the Explorer Browser control inside
a page of your wizard
and control it with interfaces like
<a HREF="http://msdn.microsoft.com/en-us/library/ms645992.aspx">
<code>IExplorer&shy;Browser</code></a>.
You can disable navigation in the Explorer Browser
(so the user can look only at the folder
you want to preview),
and the user can click <i>Back</i> if they want to try again
or <i>Next</i> if they are happy and want to continue.
This has the additional advantage of keeping all the parts of
your wizard inside the wizard framework itself,
allowing users to continue using the wizard navigation model
that they are already familiar with.
</p>
<p>
A
<a HREF="http://msdn.microsoft.com/en-us/library/dd940357.aspx">
sample program which uses the Explorer Browser control</a>
can be found in the Platform SDK.
</p>
<p>
For the impatient, here's the
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/07/23/54576.aspx">
scratch program</a> version.
Note that this is the minimal version;
in real life, you would probably want to set some options and stuff like that.
</p>
<pre>
<font COLOR=blue>#include &lt;shlobj.h&gt;

IExplorerBrowser *g_peb;</font>

void
OnSize(HWND hwnd, UINT state, int cx, int cy)
{
<font COLOR=blue>    if (g_peb) {
        RECT rc = { 0, 0, cx, cy };
        g_peb-&gt;SetRect(NULL, rc);
    }</font>
}

BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
<font COLOR=blue>    BOOL fSuccess = FALSE;
    RECT rc;
    PIDLIST_ABSOLUTE pidl = NULL;
    if (SUCCEEDED(CoCreateInstance(CLSID_ExplorerBrowser, NULL,
                         CLSCTX_INPROC, IID_PPV_ARGS(&amp;g_peb))) &amp;&amp;
        GetClientRect(hwnd, &amp;rc) &amp;&amp;
        SUCCEEDED(g_peb-&gt;Initialize(hwnd, &amp;rc, NULL)) &amp;&amp;
        SUCCEEDED(SHParseDisplayName(
                         L"C:\\Program Files\\Internet Explorer",
                                        NULL, &amp;pidl, 0, NULL)) &amp;&amp;
        SUCCEEDED(g_peb-&gt;SetOptions(EBO_NAVIGATEONCE)) &amp;&amp;
        SUCCEEDED(g_peb-&gt;BrowseToIDList(pidl, SBSP_ABSOLUTE))) {
        fSuccess = TRUE;
    }
    ILFree(pidl);
    return fSuccess;</font>
}

void
OnDestroy(HWND hwnd)
{
    <font COLOR=blue>if (g_peb) {
        g_peb-&gt;Destroy();
        g_peb-&gt;Release();
    }</font>
    PostQuitMessage(0);
}
</pre>
<p>
This same technique of hosting the Explorer Browser control
can be used for other types of "build your own burrito" scenarios:
For example, you might
host the Explorer Browser control in a window and tell users
to copy files into that window.
When they click OK or Next or whatever, you can enumerate
the contents of the folder and do your business.
</p>
<p>
Armed with this knowledge, you can answer these customers' questions:
</p>
<blockquote CLASS=q>
<p>
We have found that the process state of Explorer.exe changes to signaled
<i>before</i> the process terminates.
Here's a sample program:
</p>
<pre>
int _tmain(int argc, TCHAR **argv)
{
 STARTUPINFO si = { sizeof(si) };
 PROCESS_INFORMATION pi;
 if (CreateProcess(TEXT("C:\\Windows\\Explorer.exe"), TEXT(" /e,C:\\usr"),
                   NULL, NULL, FALSE, 0, NULL, NULL, &amp;si, &amp;pi)) {
  WaitForSingleObject(pi.hProcess);
  CloseHandle(pi.hProcess);
  CloseHandle(pi.hThread);
 }
 return 0;
}
</pre>
<p>
If we change "Explorer.exe" to "Notepad.exe" then the process handle
is signaled after Notepad terminates, as expected.
</p>
</blockquote>
<blockquote CLASS=q><p>
We have a 32-bit shell extension for which a 64-bit version is not
available.
Since our clients are running 64-bit Windows,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/09/29/10069021.aspx">
the 32-bit shell extension is not available in Explorer</a>.
How can we obtain access to this context menu?
</p>
</blockquote>
<blockquote CLASS=q><p>
We have a shell extension that is not UAC-compliant.
It requires that the user have administrative privileges in order
to function properly.
We would rather not disable UAC across the board just for this
one shell extension.
Is there a workaround that lets us run Explorer elevated temporarily?
</p>
</blockquote>
<p>
<b>Bonus sample program</b>:
The
<a HREF="http://msdn.microsoft.com/en-us/library/dd940358.aspx">
Explorer Browser Search Sample</a>
shows how to filter the view.
</p>
<p>
<b>Bonus alternative</b>:
If you really just want to watch Explorer windows rather than
host one,
you can use
<a HREF="http://msdn.microsoft.com/en-us/library/bb757028.aspx">
the ShellWindows object</a>,
something I covered
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/07/20/188696.aspx">
many years ago</a>
(and followed up with a much shorter
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2005/07/05/435657.aspx">
scripting version</a>).</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-903353">
				<div id="div-comment-903353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903353">
			March 25, 2011 at 7:09 am</a>		</div>

		<p>Query 1:</p>
<p>The handle is being signalled after the launched process terminates. But the process they launched just handed over control to an existing explorer process, which hasn&#39;t terminated.</p>
<p>Query 2:</p>
<p>Host an explorer browser control in a 32-bit process in which the shell extension is loaded.</p>
<p>Query 3:</p>
<p>Host an explorer browswer control in an elevated process in which the shell extension is loaded.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-903363">
				<div id="div-comment-903363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903363">
			March 25, 2011 at 7:12 am</a>		</div>

		<p>I smell a trap at the end. The shell is not limited to explorer.exe, it can be nearly any program on the computer that is using it. As such, a shell extension does not just need explorer.exe elevanted, but every possible application that loads the shell extension (lets assume it can be loaded by all shell users). The consequences are way too big to justify running the shell extension elevated, because it would mean that (nearly) everything is elevated.</p>
<p>And that is before we discuss the fact that when explorer.exe starts stuff said stuff will inherit the elevation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-903383">
				<div id="div-comment-903383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903383">
			March 25, 2011 at 7:23 am</a>		</div>

		<p>&quot;We have a wizard that creates some files in a directory based on information provided by the user, and we want to launch Explorer to view that directory so users can verify that things are set up the way they want them. When users close the Explorer window, we ask them if everything was good;&quot;</p>
<p>Marketing asks the programmers do the darndest and stupidest things&#8230; News at 11.</p>
<p>@Sunil:</p>
<p>Q1: A program that calls CreateProcess doesn&#39;t have a clue about what the target process does. The handle state only reflects the target process state, nothing more.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-903393">
				<div id="div-comment-903393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903393">
			March 25, 2011 at 7:24 am</a>		</div>

		<p>Funny that this sample program with c:\Program Files &nbsp;hard-coded comes so soon after a posting on SHGetFolderPath. &nbsp;I know&#8230;just a stripped down sample program to demonstrate the concepts&#8230;but it shows how seductive it can be to do things the easy way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-903403">
				<div id="div-comment-903403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903403">
			March 25, 2011 at 7:28 am</a>		</div>

		<p>@Alex Grigoriev</p>
<p>I know that &#8211; the problem in customer query 1 is just another example of the original problem that Mr Chen handles at the top of the article.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-903423">
				<div id="div-comment-903423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903423">
			March 25, 2011 at 7:53 am</a>		</div>

		<p>@sunil Neither 2 or 3 indicate they want to host an explorer window. &nbsp;The whole point of a shell extension is that it is available in ANY explorer window&#8230; otherwise it&#39;s fairly useless and you might as well just have the functionality incorporated in the program you were going to host the Explorer window in.</p>
<p>Plus, you can only host Explorer windows starting with Vista, and plenty of people still use XP.</p>
<p>My answers:</p>
<p>1) Explorer can only run as a single instance except in a very specific circumstance, so other instances will signal the main process and immediately exit.</p>
<p>2) Build a 64-bit version of your shell extension for 64-bit systems if you have the source, or install the 32-bit version of your OS.</p>
<p>3) This is a bad idea, since if you succeed all processes run afterwards will be elevated, so you have in effect disabled UAC anyway. &nbsp;Instead, change necessary folder/registry key permissions so the extension can run under a normal user account. &nbsp;Though it would be best just to fix the extension if possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-903433">
				<div id="div-comment-903433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903433">
			March 25, 2011 at 7:53 am</a>		</div>

		<p>This is unrelated to customer #1&#39;s problem (others have already pointed out the problem), but this command line:</p>
<p>CreateProcess(TEXT(&quot;C:\Windows\Explorer.exe&quot;), TEXT(&quot; /e,C:\usr&quot;), &#8230;)</p>
<p>Will start up Explorer with argv[0] as &quot;/e,C:\usr&quot; instead of argv[1] as that, which will fail to set the starting directory of the new window.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-903443">
				<div id="div-comment-903443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903443">
			March 25, 2011 at 7:59 am</a>		</div>

		<p>@The MAZZTer</p>
<p>I think in Q2 and Q3 it&#39;s strongly implied that the extensions are 3rd party and that the sources aren&#39;t to hand. Clearly they need some functionality in the extension which they can&#39;t otherwise reproduce.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-903473">
				<div id="div-comment-903473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903473">
			March 25, 2011 at 8:14 am</a>		</div>

		<p>Actually I take that back, it will start Explorer with argv[0] as the empty string, which is probably ok (most programs ignore argv[0]; sometimes they print it out with error messages, but even that is harmless). &nbsp;I didn&#39;t notice the leading space, which I presume is meaningful to CommandLineToArgvW.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-903493">
				<div id="div-comment-903493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903493">
			March 25, 2011 at 8:34 am</a>		</div>

		<p>@Bob</p>
<p>I think you will find the use of hard coded paths isn&#39;t a case of doing things the &quot;easy way&quot; but actually results in an example free from code noise that isn&#39;t relevant to the point.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-903513">
				<div id="div-comment-903513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jmthomas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903513">
			March 25, 2011 at 9:23 am</a>		</div>

		<p>Would substituting something like &quot;common open&quot; avoid the customer&#39;s problem, or is it tied too much to explorer?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-903553">
				<div id="div-comment-903553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chen #2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903553">
			March 25, 2011 at 12:51 pm</a>		</div>

		<p>I think I will start to blog and let my readers solve my customer&#39;s problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-903603">
				<div id="div-comment-903603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fred</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903603">
			March 25, 2011 at 4:26 pm</a>		</div>

		<p>I think if you use the program group (program manager) api&#39;s you can get explorer to do this for you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-903623">
				<div id="div-comment-903623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903623">
			March 25, 2011 at 6:02 pm</a>		</div>

		<p>My immediate thought (besides &quot;that&#39;s maybe not a wonderful thing to want to do&quot;) was that explorer takes a /separate flag that tells it to start a new process. (I&#39;ve used that to make explorer windows with &#39;runas&#39;.) I wonder if that would work.</p>
<p>@Paul:</p>
<p>And why does using hard-coded paths result in an example &quot;free from code noise&quot;? Because it&#39;s easier and more direct than doing it right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-903633">
				<div id="div-comment-903633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903633">
			March 25, 2011 at 6:45 pm</a>		</div>

		<p>Just saw a file in Windows XP Explorer modified &quot;Tomorrow&quot;. Amusing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-903643">
				<div id="div-comment-903643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pete.d</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903643">
			March 25, 2011 at 8:45 pm</a>		</div>

		<p>See also the Windows API Code Pack, which provides (among other things) a convenient managed code (.NET) library supporting the ExplorerBrowser control.</p>
<p><a rel="nofollow" target="_new" href="http://archive.msdn.microsoft.com/WindowsAPICodePack" rel="nofollow">archive.msdn.microsoft.com/WindowsAPICodePack</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-903653">
				<div id="div-comment-903653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Troll</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903653">
			March 25, 2011 at 9:34 pm</a>		</div>

		<p>The way the shell team has handled 32-bit shell extensions in 64-bit Windows is the most wrongest and worst possible way for users who want to migrate to 64-bit Windows. They even killed off the ability to run 32-bit Explorer in 64-bit Windows 7. Ultimately, users suffer because MS didn&#39;t bother to create a bridge for 32-bit shell extensions in 64-bit Explorer. I recently found a little tool (<a rel="nofollow" target="_new" href="http://www.gasanov.net/WOW64Menu.asp" rel="nofollow">http://www.gasanov.net/WOW64Menu.asp</a>) that lets you access 32-bit context menu and property sheet handlers at least in 64-bit Explorer. Something like this should be built-in into WIndows. Windows 8 maybe. Shell team, take a look at that tool and ease people&#39;s lives.</p>
<p>MS even screwed up with their own Windows Live Essentials which wrongly install 32-bit AutoPlay handlers on 64-bit Windows. See <a rel="nofollow" target="_new" href="http://sticklebackplastic.com/post/2009/05/20/The-case-of-the-missing-AutoPlay-handler.aspx" rel="nofollow">sticklebackplastic.com/&#8230;/The-case-of-the-missing-AutoPlay-handler.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-903663">
				<div id="div-comment-903663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903663">
			March 26, 2011 at 6:32 am</a>		</div>

		<p>@Evan</p>
<p>I guess I was just annoyed at this cropping up again, nearly every single post Raymond does that includes a hard coded path gets a comment like that. The main part of the example in this article is about 11 lines, if wrapping is ignored) &#8211; would it really be improved by adding another 10 lines or so of code that is dealing with simply returning a path?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-903703">
				<div id="div-comment-903703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110325-00/?p=11133#comment-903703">
			March 28, 2011 at 1:48 am</a>		</div>

		<p>@Chen #2 &#8230; it already exists: it&#39;s called Stackoverflow :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

