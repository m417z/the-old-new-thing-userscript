<html>
<head>
<title>Applying a permutation to a vector, part 5</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Applying a permutation to a vector, part 5</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 10, 2017 / year-entry #7</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170110-00/?p=95155</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Error checking.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Our
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170102-00/?p=95095">
<code>apply_permutation</code> function</a>
assumes that the integers form a valid permutation.
Let's add error checking.
</p>
<p>
There are two ways the integers could fail to be
a permutation:
One is that the collection includes a value that is out
of range.
The other problem case is that all the values are in range,
but a value appears more than once.
We can detect that when we encounter a single-element
cycle when we expected a longer cycle.
(Another way of looking at it is that we detect the error
when we discover that
we're about to move an item for the second time,
because the permutation application algorithm is supposed
to move each item only once.)
</p>
<pre>
template&lt;typename Iter1, typename Iter2&gt;
void
apply_permutation(
    Iter1 first,
    Iter1 last,
    Iter2 indices)
{
 using T = typename std::iterator_traits&lt;Iter1&gt;::value_type;
 using Diff = typename std::iterator_traits&lt;Iter2&gt;::value_type;
 Diff length = std::distance(first, last);
 for (Diff i = 0; i &lt; length; i++) {
  Diff current = i;
  while (i != indices[current]) {
   Diff next = indices[current];
   <font COLOR="blue">if (next &lt; 0 || next &gt;= length) {
    throw std::range_error("Invalid index in permutation");
   }
   if (next == current) {
    throw std::range_error("Not a permutation");
   }</font>
   swap(first[current], first[next]);
   indices[current] = current;
   current = next;
  }
  indices[current] = current;
 }
}
</pre>
<p>
(I added the <code>typename</code> keyword at the suggestion of
commenter ildjarn.
And I used <code>std::distance</code> to calculate the distance
between two iterators.
The second change was not technically necessary because
<code>std::distance</code> is defined as subtraction when the
iterators are random-access, but if you're going to go with the
standard library, you may as well go all the way, right?)
</p>
<p>
I switched to the swapping version of the algorithm because
that allows me to ensure a useful exit condition in the
case of exception:
If an exception occurs, the elements in
<code>[first, last)</code> have been permuted in an
unspecified manner.
Even though the resulting order is unspecified,
you at least know that no items were lost.
It's the same set of items, just in some other order.
The indices, on the other hand, are left in an unspecified state.
They won't be a permutation of the original indices.
</p>
<p>
But wait, we can even restore the <code>indices</code>
to a permutation of their former selves:&sup1;
We can take the duplicate index and drop it back into
<code>indices[i]</code>.
That entry optimistically was set to the value we expected to
find when we reached the end of the cycle.
If we never find that value, then we can put the value we
actually found into that slot, thereby correcting our optimistic
assumption.
</p>
<pre>
template&lt;typename Iter1, typename Iter2&gt;
void
apply_permutation(
    Iter1 first,
    Iter1 last,
    Iter2 indices)
{
 using T = typename std::iterator_traits&lt;Iter1&gt;::value_type;
 using Diff = typename std::iterator_traits&lt;Iter2&gt;::value_type;
 Diff length = std::distance(first, last);
 for (Diff i = 0; i &lt; length; i++) {
  Diff current = i;
  while (i != indices[current]) {
   Diff next = indices[current];
   if (next &lt; 0 || next &gt;= length) {
    <font COLOR="blue">indices[i] = next;</font>
    throw std::range_error("Invalid index in permutation");
   }
   if (next == current) {
    <font COLOR="blue">indices[i] = next;</font>
    throw std::range_error("Not a permutation");
   }
   swap(first[current], first[next]);
   indices[current] = current;
   current = next;
  }
  indices[current] = current;
 }
}
</pre>
<p>
&sup1;
This is valuable because it improves post-mortem debuggability:
You can inspect the <code>indices</code> to look for the
out-of-range or duplicate index.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-john-schroedl even thread-even depth-1" id="comment-1279605">
				<div id="div-comment-1279605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/schroedl' rel='external nofollow' class='url'>schroedl</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170110-00/?p=95155#comment-1279605">
			January 10, 2017 at 7:49 am</a>		</div>

		<p>I really like this permutation/sorting series! Thanks</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1279615">
				<div id="div-comment-1279615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170110-00/?p=95155#comment-1279615">
			January 10, 2017 at 11:00 am</a>		</div>

		<p>I *love* the footnote.  Preserving the &#8220;is a permutation of the input&#8221; seemed somewhat pointless for the indices &#8211; but yay for debuggability!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1279645">
				<div id="div-comment-1279645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smithers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170110-00/?p=95155#comment-1279645">
			January 11, 2017 at 9:06 am</a>		</div>

		<p>I don&#8217;t think <code>indices</code> is being restored correctly in the first error case. <code>next</code> is already in <code>indices[current]</code> the value we want to store in <code>indices[i]</code> is whatever value has been overwritten in its original position but not written back anywhere else. That value happens to be <code>current</code> if we&#8217;ve been round the while loop already, otherwise nothing. So I think <code>indices[i] = next;</code> should be replaced with <code>indices[i] = i == current ? next : current;</code> or, equivalently, <code>if (i != current) indices[i] = current;</code>.</p>
<p>That said, where it is wrong, it is only losing a valid entry and duplicating the invalid one, so it ought to still be debuggable enough (although not touching anything at all would be equally so).</p>
<p>In lighter news, the <code>using T</code> line is redundant as we never refer to <code>T</code>.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

