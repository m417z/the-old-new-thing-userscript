<html>
<head>
<title>Why don't elevated processes inherit their environment variables from their non-elevated parent?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why don&#8217;t elevated processes inherit their environment variables from their non-elevated parent?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 3, 2013 / year-entry #178</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>23</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">As a general rule, child processes inherit the environment of their parent. But if the parent is non-elevated and the child is elevated, then this inheritance does not happen. Why not? There are two answers to this question. For the kernel-color glasses answer, I defer to Chris Jackson, the App Compat Guy. It's interesting to...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>As a general rule, child processes inherit the environment of their parent. But if the parent is non-elevated and the child is elevated, then this inheritance does not happen. Why not?</p>
<p> There are two answers to this question. For the kernel-color glasses answer, I defer to <a href="http://blogs.msdn.com/b/cjacks/archive/2008/10/29/why-don-t-elevated-applications-receive-environment-variables-set-by-non-elevated-calling-process.aspx"> Chris Jackson, the App Compat Guy</a>. It's interesting to see how it all works, but it doesn't explain <i>why</i> the mechanism was designed to block environment variable inheritance. </p>
<p> The reason for the design is that allowing an elevated process to inherit the <code>PATH</code> from a non-elevated process creates an attack vector. </p>
<p> The non-elevated process sets its <code>PATH</code> to put some attacker-controlled directories ahead of the directories the elevated application actually expects. For example, suppose the elevated application links to <code>C:\Program Files\<wbr>Common Files\<wbr>Contoso\<wbr>Contoso&shy;Grid&shy;Control.dll</wbr></wbr></wbr></code>. It arranges for this by setting the system <code>PATH</code> to include the <code>C:\Program Files\<wbr>Common Files\<wbr>Contoso</wbr></wbr></code> directory. Or maybe the program calls <code>Load&shy;Library</code> on a DLL that might not exist, and it handles the case that the call fails by disabling some optional feature. (Whether this is a good idea or not is beside the point.) </p>
<p> The attacker changes the <code>PATH</code> to read <code>\\rogue\<wbr>server;<wbr>C:\Program Files\<wbr>Common Files\<wbr>Contoso</wbr></wbr></wbr></wbr></code>, so that the library search finds the evil copy on the rogue server before finding the expected version in the <code>Common Files</code> directory (or in the case of a DLL that may not exist, it finds the evil copy on the rogue server instead of failing outright). </p>
<p> Bingo, the attacker has injected arbitrary code into an elevated process. Game over. </p>
<p> For similar reasons, <a href="http://blogs.msdn.com/b/oldnewthing/archive/2007/12/11/6648397.aspx"> the current directory is reset to the system directory when a non-elevated program launches an elevated program</a>. </p>
<p> If the environment and current directory were inherited, then malware could ask to elevate Program&nbsp;X with a custom current directory or environment. The user will merely be asked if they want to run Program&nbsp;X elevated, unaware that it is being run in a nonstandard manner, using an execution environment that did not receive administrator approval. As a result, the malware would be able to sneak into the administrator account under sheep's clothing (the sheep being Program&nbsp;X). </p>
<p> What if you want to run another program elevated, and with a custom current directory or environment? </p>
<p> Write a wrapper program which sets the current directory and environment, then launches the desired target process. Then ask the user for permission to run the wrapper elevated. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-joshuaganes even thread-even depth-1" id="comment-1065153">
				<div id="div-comment-1065153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065153">
			July 3, 2013 at 7:43 am</a>		</div>

		<p>I find your articles on security issues intriguing. This is another example of an issue I wouldn&#39;t have considered on the face of it, but makes perfect sense once explained. It&#39;s a wonder that anyone can make secure software given the wide range of exploits that come to light. I wonder if, in hindsight, there was a better initial design that could have prevented this type of exploit in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1065163">
				<div id="div-comment-1065163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065163">
			July 3, 2013 at 7:54 am</a>		</div>

		<p>I wonder how many security vulnerabilities on Unix systems have resulted from the fact the setuid binaries do inherit their environment and current working directory from their parent processes.</p>
<p>Unix&#39;s sudo(1) does clear the environment by default (except for a few whitelisted environment variables), but you can override it and ask it to preserve the environment with the -E option.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1065173">
				<div id="div-comment-1065173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065173">
			July 3, 2013 at 7:59 am</a>		</div>

		<p>&quot;To improve security, it&#39;s a good idea revert all implicit path-resolving settings to safe and boring defaults for elevated child processes.&quot; I guess that&#39;s the point of education â€” that you get told simple yet not immediately apparent things. When you are told it, it makes perfect sense, but before being told, very few would think about it off the top of their heads.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1065183">
				<div id="div-comment-1065183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065183">
			July 3, 2013 at 8:08 am</a>		</div>

		<p>Wake me when the pipeline can be preserved during elevation. I can fix the environment variables. I can&#39;t fix the pipeline.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1065193">
				<div id="div-comment-1065193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065193">
			July 3, 2013 at 8:48 am</a>		</div>

		<p>@Joshua:</p>
<p>Even if you are sarcastic about it or whatever, isn&#39;t it obvious that the pipe would also not work across elevation?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1065213">
				<div id="div-comment-1065213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065213">
			July 3, 2013 at 10:01 am</a>		</div>

		<p>@Crescens2k it&#39;s not obvious, at least to me. Why shouldn&#39;t the pipe work across elevation?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1065223">
				<div id="div-comment-1065223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065223">
			July 3, 2013 at 10:12 am</a>		</div>

		<p>@Maurits: Because elevation happens via WinExec or ShellExecute but not CreateProcess.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1065263">
				<div id="div-comment-1065263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065263">
			July 3, 2013 at 11:34 am</a>		</div>

		<p>@Marutis [MSFT]:</p>
<p>It should be obvious because of the affect the integrity level has on inter-process communication.</p>
<p>As far as I am aware, Windows doesn&#39;t do any fiddling with the handles, so the high integrity process will have its end open with the default high integrity level, and the lower integrity process will have its end open with a lower integrity level.</p>
<p>This means that the lower integrity process will be WRITING to stdout, and the higher integrity process will be reading from stdin. The writing is capitalised there because the default integrity level associated with a process has the MANDATORY_LEVEL_NO_WRITE_UP mask set in the access mask of the ACE. The pipe is doing exactly that, writing to a higher level process, therefore writes get blocked.</p>
<p>I am also pretty sure that this is done via named pipes in Windows.</p>
<p>For the lower integrity process to be able to write to stdout in this case, the pipe would have to have a lower integrity level assigned to it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1065273">
				<div id="div-comment-1065273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065273">
			July 3, 2013 at 11:44 am</a>		</div>

		<p>Can the elevated process voluntarily lower the integrity level on its input pipe? I assume so.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1065283">
				<div id="div-comment-1065283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065283">
			July 3, 2013 at 11:51 am</a>		</div>

		<p>@Crescens2k: You know even the MAC checks are only done at open time, do you not?</p>
<p>It&#39;s also nontrivial to get the exit code of the elevated process to the point where I don&#39;t currently know how to do it (I only know how to wait for it by searching the process table for it, with the obvious race condition).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1065293">
				<div id="div-comment-1065293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065293">
			July 3, 2013 at 1:27 pm</a>		</div>

		<p>I wish that elevated processes could more easily start non-elevated children. &nbsp;There are so many programs out there whose installer asks at the end whether you want to run the program you just installed. &nbsp;When you click yes, the program runs, but because the installer was running elevated, the child is elevated, too. &nbsp;This can result in data files created during this first execution being inaccessible to subsequent executions. &nbsp;It has caused us tech support issues, sadly.</p>
<p>A hack I came up with is to use Explorer&#39;s token. &nbsp;I feel bad about using it, and thankfully have not in a real application. &nbsp;GetShellWindow to find Explorer, GetWindowThreadProcessId to get its PID, OpenProcess, OpenProcessToken, DuplicateTokenEx, CreateProcessAsUser. &nbsp;You don&#39;t need SeAssignPrimaryTokenPrivilege because a non-elevated version of your token is considered a restricted version of your token for CreateProcessAsUser. &nbsp;If you want Explorer to be the parent rather than yourself, use STARTUPINFOEX with PROC_THREAD_ATTRIBUTE_PARENT_PROCESS. &nbsp;One downside to this is that the child still gets the elevated process&#39;s environment, rather than your user environment, the point of this article. =)</p>
<div class="post">[<em>There&#39;s no need to hack it this way. There&#39;s a completely documented and supported solution. I have an article in the queue on this topic, but you can also find it if you just look through the SDK samples. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1065303">
				<div id="div-comment-1065303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lars Skovlund</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065303">
			July 3, 2013 at 1:34 pm</a>		</div>

		<p>Adam Rosenfeld: The sudo(1) manpage on my Linux system states:</p>
<p>&quot;The -E (preserve environment) option indicates to the security policy that the user wishes to preserve their existing environment variables. &nbsp;The security policy may return an error if the -E option is specified and the user does not have permission to preserve the environment.&quot;</p>
<p>And there are indeed settings in the sudoers file to control this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1065313">
				<div id="div-comment-1065313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065313">
			July 3, 2013 at 1:35 pm</a>		</div>

		<p>@Maurits [MSFT]: Yes, but it&#39;s a bit painful in the way I know. &nbsp;Make a new SACL with a single entry containing a SYSTEM_MANDATORY_LABEL_ACE, specifying the well-known SID WinLowLabelSid or whatever, and mask = SYSTEM_MANDATORY_LABEL_NO_WRITE_UP. &nbsp;Initialize a security descriptor with nothing in it but a SetSecurityDescriptorSacl. &nbsp;Then call SetKernelObjectSecurity with LABEL_SECURITY_INFORMATION.</p>
<p>This can also be done at the time of pipe creation by specifying a security descriptor with this SACL. &nbsp;(In both cases, ACCESS_SYSTEM_SECURITY is apparently not required for lowering the label despite being in the SACL.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1065323">
				<div id="div-comment-1065323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065323">
			July 3, 2013 at 1:53 pm</a>		</div>

		<p>&quot;(In both cases, ACCESS_SYSTEM_SECURITY is apparently not required for lowering the label despite being in the SACL.)&quot;</p>
<p>Yes, you only need the rights that standard users have. This is why you use the LABEL_SECURITY_INFORMATION constant instead of the SACL one. This allows even standard users to lower the integrity level of objects and processes they spawn.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1065233">
				<div id="div-comment-1065233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065233">
			July 3, 2013 at 10:36 am</a>		</div>

		<p>*Somewhere* there&#39;s a CreateProcess.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1065373">
				<div id="div-comment-1065373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mappu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065373">
			July 3, 2013 at 11:41 pm</a>		</div>

		<p>[ I wish that elevated processes could more easily start non-elevated children. &#8211; Myria ]</p>
<p>The hack i used in my most recent installer-project is to shell out to schtasks.exe, to register a scheduled task for the target executable that runs as the current interactive user, don&#39;t add a schedule, invoke it immediately and then unregister it.</p>
<p>It seems like an absurd solution but i have seen it mentioned on MSDN somewhere, although i can&#39;t find the citation right now (so feel free to throw things at me for being part of the eventual Win32 compatibility problem instead of using the Right Solution)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1065393">
				<div id="div-comment-1065393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">command prompt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065393">
			July 4, 2013 at 2:00 am</a>		</div>

		<p>well that explains why elevated command prompts start in system32 then</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1065403">
				<div id="div-comment-1065403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065403">
			July 4, 2013 at 3:25 am</a>		</div>

		<p>But an elevated app still has &quot;my&quot; %TEMP% so presumably I can access its temporary files (if it has any).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1065413">
				<div id="div-comment-1065413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">floyd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065413">
			July 4, 2013 at 6:30 am</a>		</div>

		<p>@Neil: Since %TEMP% has no effect on the Dynamic-Link Library Search Order it cannot be abused to cause an elevated process to run an attacker&#39;s module&#39;s code.</p>
<p>.f</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk odd alt thread-odd thread-alt depth-1" id="comment-1065443">
				<div id="div-comment-1065443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065443">
			July 4, 2013 at 9:40 am</a>		</div>

		<p>@Myria, @mappu: &quot;There are so many programs out there whose installer asks at the end whether you want to run the program you just installed.&quot;</p>
<p>Personally, I think the easiest solution is to NOT have the installer ask if you want to run the program. &nbsp;</p>
<p> &nbsp;&#8211; It&#39;s not a huge feature (I personally don&#39;t care if the program gives me a way to run the program when it&#39;s done)</p>
<p> &nbsp;&#8211; I have to know how to run the program using the &quot;normal&quot; method anyway, or the program will not be useful</p>
<p> &nbsp;&#8211; It only happens once (at the end of the install)</p>
<p> &nbsp;&#8211; Some programmers are apparently having trouble with it</p>
<p>Why go to a lot of trouble for a tiny feature?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1065473">
				<div id="div-comment-1065473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065473">
			July 4, 2013 at 2:51 pm</a>		</div>

		<p>@DWalker: it&#39;s not even a feature, in my book, it&#39;s an anti-feature. &nbsp;But I suspect the marketing folk want it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1065533">
				<div id="div-comment-1065533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065533">
			July 4, 2013 at 7:42 pm</a>		</div>

		<p>DWalker: It&#39;s not an entirely useless feature. There have been plenty of times I&#39;ve want to run some trivial utility program that requires installation before I can use it. If I have to go through the annoying install process, it&#39;s nice to not have to then go and try to find what I just installed.</p>
<p>When you&#39;re installing an app to make it permanently available on your computer (like Office), it&#39;s have it run the app when the installer&#39;s done. When you&#39;re trying to run a program, and installation is just an impediment to using it, offering to run the program at the end of the install is the least they can do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1065563">
				<div id="div-comment-1065563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mappu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130703-00/?p=3903#comment-1065563">
			July 4, 2013 at 11:18 pm</a>		</div>

		<p>Some other times when running the application post-install is useful:</p>
<p>&#8211; The software has an always-on component running as the user (e.g. a tray icon)</p>
<p>&#8211; The installation was an upgrade, and the software was open prior to the installation &#8211; restarting it would simply be the polite thing to do (especially if the installation was run silently in the background, or initiated from within the application itself)</p>
<p>&#8211; If configuration needs to be performed on first application launch, then it makes sense to continue straight into it once installation is complete</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

