<html>
<head>
<title>Crash course in async and await</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Crash course in async and await</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 20, 2017 / year-entry #165</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Hang on a second, I'll get back to you.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
I'm going to assume that you know how the <code>async</code>
and <code>await</code> keywords work.
If you need a refresher, you can
<a HREF="https://blogs.msdn.microsoft.com/ericlippert/tag/async/">
read Eric Lippert's extensive exposition of the subject</a>.
Here's the short version.
<b>People who know how <code>async</code> and <code>await</code>
work can go take a nap.</b>
</p>
<p>
When you write a function that is marked <code>async</code>,
then the function is broken up
into a series of mini-functions
at each <code>await</code> call.
The code executes synchronously up until the first
<code>await</code>,
at which point the rest of the code is scheduled for
resumption when the awaited thing produces a result.
Optionally, a task is returned so that the caller
can schedule its own continuation when the async
function executes its <code>return</code> statement.
</p>
<p>
For example, let's take this function:
</p>
<pre>
async Task&lt;int&gt; GetTotalAsync()
{
  int total = GetStartValue();
  int increment = await GetIncrementAsync();
  return total + increment;
}
</pre>
<p>
This is shorthand for the following,
with
error checking has been elided for expository simplicity.
</p>
<pre>
Task&lt;int&gt; GetTotalAsync()
{
  int total = GetStartValue();
  return GetIncrementAsync().ContinueWith((incrementTask) =&gt; {
    int increment = incrementTask.Result;
    return total + increment;
  });
}
</pre>
<p>
(Actually, that's not really what happens;
<a HREF="https://msdn.microsoft.com/en-us/magazine/hh456403.aspx">
here are the gory details</a>.)
</p>
<p>
The point is that the function executes normally until
it encounters the first <code>await</code>, at which point
it schedules itself as a continuation of the thing being awaited,
and returns a new task that represents the continuation.
When the thing being awaited completes, execution resumes with
the continuation. That continuation might do some work, and then
perform another <code>await</code>, which once again schedules
itself as a continuation of the thing being awaited.
Eventually, the original function runs to completion, at which
point the chain of tasks terminates with a result,
namely the thing that the original function returned.
</p>
<p>
Note that when dealing with <code>async</code> functions,
you have to distinguish with what the function <i>returns</i>
and what it <i>produces</i> as a <i>result</i>
when it <i>completes</i>.
The <i>return value</i> is the thing that is returned synchronously
by the function, typically a task of some sort.
When execution reaches the end of the task chain, the task is
said to have <i>completed</i>.
The thing that comes out the end is called the <i>result</i>.
</p>
<p>
In other words, there are two ways to call an <code>async</code>
function.
</p>
<pre>
var task = SomethingAsync();
var result = await SomethingAsync();
</pre>
<p>
If you call it without <code>await</code>
then you get the raw task back.
If you call it with <code>await</code>,
then when the task completes, you get the result.
</p>
<p>
<b>People who know how <code>async</code> and <code>await</code>
work can start waking up now.</b>
You still know the stuff coming up next, but at least you'll be
primed for the discussion to come after.
</p>
<p>
There are three ways of writing an <code>async</code> function:
</p>
<ul>
<li><code>async Task&lt;T&gt; SomethingAsync() { ... return t; }</code>
<li><code>async Task SomethingAsync() { ... }</code>
<li><code>async void SomethingAsync() { ... }</code>
</ul>
<p>
In all the cases, the function is transformed into a chain
of tasks. The difference is what the function returns.
</p>
<p>
In the first case, the function returns a task that eventually
produces the <code>t</code>.
</p>
<p>
In the second case, the function returns a task
which has no product, but you can still <code>await</code>
on it to know when it has run to completion.
</p>
<p>
The third case is the nasty one.
The third case is like the second case,
except that
<i>you don't even get the task back</i>.
You have no way of knowing when the function's task has completed.
</p>
<p>
The <code>async void</code> case is a "fire and forget":
You start the task chain, but you don't care about when it's finished.
When the function returns, all you know is that everything
up to the first <code>await</code> has executed.
Everything after the first <code>await</code> will run at
some unspecified point in the future that you have no access to.
</p>
<p>
Now that I've set up the story,
we'll dig into the consequences next time.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1302735">
				<div id="div-comment-1302735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302735">
			July 20, 2017 at 8:20 am</a>		</div>

		<p>There is no point in calling ReadAsync on a GZipStream (or any arbitrary stream you don&#8217;t know what it does). The default is to fulfill it synchronously anyway. FileStream, SocketStream, and NamedPipeStream actually implement ReadAsync but almost nothing else does.</p>
<p>I&#8217;m pretty sure that if you actually call the &#8220;void SomethingAsync&#8221; without the await keyword it&#8217;s really returning a Task, but there&#8217;s no good manual on how to resolve Tasks.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-raceprouk odd alt depth-2 parent" id="comment-1302736">
				<div id="div-comment-1302736" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/RaceProUK' rel='external nofollow' class='url'>RaceProUK</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302736">
			July 20, 2017 at 8:54 am</a>		</div>

		<p>Typically, you&#8217;d consume a Task by awaiting, but when you need to do so explicitly, the best I&#8217;ve found is .GetAwaiter().GetResult().</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1302845">
				<div id="div-comment-1302845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302845">
			July 20, 2017 at 5:05 pm</a>		</div>

		<p>And if you have more than one task?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1302876">
				<div id="div-comment-1302876" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua Schaeffer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302876">
			July 20, 2017 at 6:34 pm</a>		</div>

		<p>If you have more than one task, you save them to a collection then pass the collection to Task.WhenAll() or Task.WhenAny(). Then you read back from the task in question.</p>
<p>Task.Result has the result and a read on it will synchronously block until a result is obtained. You have to make double sure that any continuations the task needs to complete aren&#8217;t posted back to the thread you&#8217;re blocking on or you will deadlock. Async/await has a few of these common situations which really deserve a book. GetAwaiter() and GetResult() are for the compiler to call, not you (rejoice).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-raceprouk even depth-5" id="comment-1302946">
				<div id="div-comment-1302946" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/RaceProUK' rel='external nofollow' class='url'>RaceProUK</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302946">
			July 21, 2017 at 2:54 am</a>		</div>

		<p>Task.Result also has a rather annoying habit of wrapping exceptions in an AggregateException, but with GetAwaiter().GetResult(), you get the naked exception.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1302986">
				<div id="div-comment-1302986" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302986">
			July 21, 2017 at 7:06 am</a>		</div>

		<p>I wouldn&#8217;t worry too much about the continuations being posted to my thread. There&#8217;s no continuation handler above me.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1303116">
				<div id="div-comment-1303116" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Gilbert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1303116">
			July 21, 2017 at 2:19 pm</a>		</div>

		<p>&gt; I&#8217;m pretty sure that if you actually call the &#8220;void SomethingAsync&#8221; without the await keyword it&#8217;s really returning a Task, but there&#8217;s no good manual on how to resolve Tasks.</p>
<p>Not the case. The method really has `void` as a return type. The reason this feature exists is to allow an `async` method to operate as an event handler, where the event handler delegate type returns `void`. From what I&#8217;ve read, there really is no other good reason to use `async void`.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-raceprouk odd alt thread-odd thread-alt depth-1 parent" id="comment-1302745">
				<div id="div-comment-1302745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/RaceProUK' rel='external nofollow' class='url'>RaceProUK</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302745">
			July 20, 2017 at 8:55 am</a>		</div>

		<p>I may be wrong, but I believe the reason for the `async void` syntax is compatibility with event handlers, which typically must return `void` (as much as you can return `void`). If it wasn&#8217;t for that, the whole nasty case would simply not exist.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1302895">
				<div id="div-comment-1302895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua Schaeffer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302895">
			July 20, 2017 at 6:41 pm</a>		</div>

		<p>In practice async void is for anything that accepts a delegate, especially work items to thread pools if you&#8217;re scaling hard and tight.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-andycadley2 odd alt depth-3" id="comment-1302916">
				<div id="div-comment-1302916" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302916">
			July 20, 2017 at 9:40 pm</a>		</div>

		<p>There&#8217;s a Microsoft sample of how to write an Interleave combinatory for awaiting on large numbers of Tasks without suffering the penalties of excessive continuations being creating (if you use WhenAny and do it the naïve way it&#8217;s O(n^2)) and that avoids the problems of async void.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1302905">
				<div id="div-comment-1302905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://geelaw.blog/' rel='external nofollow' class='url'>GL</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302905">
			July 20, 2017 at 8:47 pm</a>		</div>

		<p>Next time I guess you&#8217;re talking about <code>async void</code>, in which when an exception escapes the function body as it normally reads, uncaught, <strong>after the first</strong> <code>await</code>, crash manifests itself, because there&#8217;s no exception handler.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1302915">
				<div id="div-comment-1302915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302915">
			July 20, 2017 at 9:31 pm</a>		</div>

		<p>Talking about async calls in C#.</p>
<p>There&#8217;s one common mistake on writing async method with anonymous method: you write a try&#8230;catch&#8230; block that wraps it and forgot to write another to wrap within the anonymous method. It has been asked in a few times in the C# board in MSDN forum why the external try&#8230;catch&#8230; block doesn&#8217;t fire.</p>
<p>Hope there is static analysis rule to check that. (I didn&#8217;t aware of such rule in VS2015)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00037ffe8545d1b7 even thread-even depth-1" id="comment-1302995">
				<div id="div-comment-1302995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/David+Totzke' rel='external nofollow' class='url'>David Totzke</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170720-00/?p=96655#comment-1302995">
			July 21, 2017 at 7:13 am</a>		</div>

		<p>Stephen Toub of Microsoft has an excellent document on the &#8220;Task-based Asynchronous Pattern&#8221;.<br />
<a href="https://www.microsoft.com/en-us/download/details.aspx?id=19957" rel="nofollow">https://www.microsoft.com/en-us/download/details.aspx?id=19957</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

