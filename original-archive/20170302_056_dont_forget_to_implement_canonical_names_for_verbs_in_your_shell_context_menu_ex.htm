<html>
<head>
<title>Don't forget to implement canonical names for verbs in your shell context menu extension</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Don&#8217;t forget to implement canonical names for verbs in your shell context menu extension</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 2, 2017 / year-entry #57</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170302-00/?p=95635</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The system uses it to find you later.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20041006-00/?p=37643">
commonly-overlooked</a>
implementation detail of shell context menu extensions
is the canonical verb,
which is returned by the
<code>IContext&shy;Menu::<wbr>Get&shy;Command&shy;String</code>
method
and which can be passed to
<code>IContext&shy;Menu::<wbr>Invoke&shy;Command</code>.
Canonical verbs permit your context menu to be
consistently invoked programmatically,
since they no longer need to rely on the menu text's
display name,
which can change based on the user's preferred language,
or which can change due to the whim of the shell
extension.
(For example, the shell extension might decide that instead
of a generic
<i>Revert to previous version</i> menu item,
it'll tailor the text to say something like
<i>Revert to March 1, 2017 6:34pm</i>,
which may look nicer to the user,
but it becomes impossible to identify
programmatically.)
</p>
<p>
Another reason to support canonical verbs is to ensure
that Explorer itself invokes your verb consistently.
</p>
<p>
A large category of Explorer hangs were traced back to
hangs in shell context menu extensions.
To mitigate this problem,
Explorer actually juggles two context menus.
The first context menu is shown to the user on the UI thread.
If the user picks a command from the context menu,
then Explorer hands the request to a background thread.
The background thread creates a second context menu&sup1;
and uses it to perform the requested operation.
That way, if the operation hangs,
it's a background thread that hangs,
and that isn't quite so bad as hanging a UI thread.
</p>
<p>
Now, how does Explorer hand the request to a background thread?
It takes the menu item the user selected and tries to obtain
its corresponding canonical verb.
If successful, then it uses that same canonical verb to invoke
the command from the background thread.
If the shell extension responsible for the menu item does not
produce a canonical verb,
then the shell applies various heuristics to the second context
menu to try to find the item that appears to resemble the one
selected by the user most closely.
</p>
<p>
If you cough up a canonical verb, then Explorer can reliably
invoke your verb from the background thread.
If you don't, then you end up being subjected to a heuristic,
and heuristics sometimes fail.
</p>
<p>
&sup1;
Explorer cannot simply use the original context menu from
a background thread because the original context menu is
a COM object that was created on the UI thread,
which is a single-threaded apartment.
Using it from a background thread requires marshaling,
but if you did that and invoked the verb from the background thread,
the marshaler would simply switch back to the UI thread
and perform the operation there,
because it must respect the threading model of the COM object,
and the COM object says,
"I can be used only on the UI thread."
</p>
<p>
Marshaling back to the UI thread to perform the operation
means that if the operation hangs, we hang the UI thread,
which was exactly the problem we were trying to avoid!</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1 parent" id="comment-1286975">
				<div id="div-comment-1286975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170302-00/?p=95635#comment-1286975">
			March 2, 2017 at 8:19 am</a>		</div>

		<p>This seems overcomplicated to me. Why not just create another UI thread with a &#8220;invisible&#8221; 1&#215;1 window at the menu point and then show the menu and execute in this thread?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1286986">
				<div id="div-comment-1286986" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170302-00/?p=95635#comment-1286986">
			March 2, 2017 at 8:37 am</a>		</div>

		<p>Because context menu handlers might do things like query the site chain for other services (e.g., to manipulate the host window).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks even depth-3" id="comment-1287105">
				<div id="div-comment-1287105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170302-00/?p=95635#comment-1287105">
			March 2, 2017 at 7:12 pm</a>		</div>

		<p>Does that mean that you cannot interact with the site you got from IObjectWithSite in InvokeCommand?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1287386">
				<div id="div-comment-1287386" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua A Schaeffer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170302-00/?p=95635#comment-1287386">
			March 4, 2017 at 5:27 pm</a>		</div>

		<p>What if the 1st context menu acts on shell items that needed UI intervention to unlock and deep-enumerate aka IShellFolder::EnumObjects(HWND)? You create the 2nd context menu on the 2nd thread that parses a different instance of the same namespace (which I assume because of STA), what will happen if it doesn&#8217;t see the same enumeration state and needs user input?</p>
<p>I don&#8217;t think the design is overcomplicated, I&#8217;m just not convinced it&#8217;s correct. I must be overlooking something.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

