<html>
<head>
<title>How can I control the directory from which my delay-loaded DLL is loaded?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I control the directory from which my delay-loaded DLL is loaded?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 26, 2017 / year-entry #19</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Use the hook.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer had a DLL that is a COM in-process server.
This DLL gets loaded by arbitrary client applications,
and it also uses the <code>/DELAYLOAD</code> linker flag
to delay-load many of the DLLs which it depends upon.
The customer observed that these delay-loaded DLLs were
being loaded according to the standard DLL-loading search algorithm.&sup1;
The problem is that the DLL which they are dependent upon
is not in the standard search path;
it's in its own private directory.
</p>
<p>
The customer explained that they are working around this problem
by providing a custom
<a HREF="https://msdn.microsoft.com/library/09t6x5ds.aspx">
delay-load helper function</a>
which calls
<code>Set&shy;Dll&shy;Directory</code>
to add the private directory to the DLL search path.
</p>
<p>
The customer wanted to know whether
<code>Set&shy;Dll&shy;Directory</code>
affects the DLL search path for the entire process.
The customer doesn't want to affect the DLL search path
for the entire process because the DLL is
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20110803-00/?p=9983">
a guest in the host process</a>,
so it shouldn't be
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20091202-00/?p=15823">
changing the carpet</a>.
(Hey, at least they're not
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20111118-00/?p=9083">
calling in a demolition team</a>.)
"If it affects only the DLL we need to load, then it looks like
<code>Set&shy;Dll&shy;Directory</code> is what we need.
But if it affects the entire process, then
we would have to switch to
<code>Add&shy;Dll&shy;Directory</code>."
</p>
<p>
Yes, the
<code>Set&shy;Dll&shy;Directory</code>
function affects the DLL search path for the entire process.
It's not clear what the customer's mental model is for "affects
only the DLL we need to load",
seeing as you don't actually pass
<code>Set&shy;Dll&shy;Directory</code>
the name of the DLL you need
to load, so it has no idea which DLL to apply this path to.
</p>
<p>
The customer's proposed alternative of using
<code>Add&shy;Dll&shy;Directory</code> doesn't
solve the problem, because it too affects the DLL search
path for the entire process.
Maybe they were thinking of calling
<code>Add&shy;Dll&shy;Directory</code> to add the
private directory,
then calling
<code>Remove&shy;Dll&shy;Directory</code> to remove it
at some unspecified point in the future.
But that creates a window in which the process DLL path
has the private directory, and if another thread also calls
<code>Load&shy;Library</code>, it will see that other private
directory, which is presumably unwanted.
</p>
<p>
The customer is making things too hard for themselves by
manipulating the DLL search paths.
Since they know what directory the DLL is in, they don't
need to do any searching at all.
When the notification handler is called, it is given
<a HREF="https://msdn.microsoft.com/library/f0fkfy9y.aspx">
a few pieces of information</a>.
</p>
<ul>
<li>The reason why the handler is being called.</li>
<li>Information about the DLL being loaded.</li>
</ul>
<p>
Since the customer already has a custom handler, they can just
write their custom handler like this:
</p>
<pre>
FARPROC WINAPI delayHook(unsigned dliNotify, PDelayLoadInfo pdli)
{
 if (dliNotify == dliNotePreLoadLibrary &amp;&amp;
     StrCmpIC(pdli-&gt;szDll, "special.dll") == 0)
 {
  return LoadTheSpecialDll();
 }
 ...
}

HMODULE LoadTheSpecialDll()
{
 .. calculate the full path to the special DLL in its
 .. private directory
 return LoadLibrary(fullPathToSpecialDll);
}
</pre>
<p>
If the notification handler is being told that we are about
to load <code>special.dll</code>, then load the special DLL
using whatever custom algorithm you need,
and return that handle.
The delay-load library will use that module instead of
trying to load via the standard DLL search directory.
There's no need to mess around with
<code>Get</code>/<code>Set&shy;Dll&shy;Directory</code>,
which is a good thing, since that avoids applying a global
solution to a local problem.
</p>
<p>
&sup1;
This is explained in the documentation,
because it says that the default delay-load helper function
calls the <code>Load&shy;Library</code> function, which is subject
to the standard DLL search path.
Though technically, it calls <code>Load&shy;Library&shy;Ex</code>
and passes a flags value of 0, which is functionally equivalent.
You can see this and more in the file
<code>delayhlp.cpp</code> in the <code>VC\Include</code> directory.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1 parent" id="comment-1281506">
				<div id="div-comment-1281506" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1281506">
			January 26, 2017 at 7:19 am</a>		</div>

		<p>Shell32 and friends should be changed to do this (force loading from system32) to stop .dll hijacking attacks on applications that are not calling SetDefaultDllDirectories.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1281565">
				<div id="div-comment-1281565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1281565">
			January 27, 2017 at 12:57 am</a>		</div>

		<p>No, that would break a lot of use-cases.</p>
<p>For example, DLL hijacking is what enables a lot of fixes for old games (ie. put third-party library DDrawCompat, or nGlide, or dgVoodoo2, as &#8220;ddraw.dll&#8221;/&#8221;Glide2X.dll&#8221; alongside the game&#8217;s executable, and watch this 90s game work on Windows 10 !).</p>
<p>It would be a shame to get rid of that.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks even depth-3 parent" id="comment-1281575">
				<div id="div-comment-1281575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1281575">
			January 27, 2017 at 3:15 am</a>		</div>

		<p>I&#8217;m talking about .dlls shell32/shlwapi will load (insecurely) behind your back inside certain functions, mainly version/userenv/crypt32/crypbase/comres/clbcatq/uxtheme/setupapi/apphelp/propsys.dll. I would imagine that most games link directly to the 3d functions, not with delay-loading.</p>
<p>If MS decides to fix this they could disable the hardening if the &#8220;appname.exe.local&#8221; file is present.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1281585">
				<div id="div-comment-1281585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1281585">
			January 27, 2017 at 4:43 am</a>		</div>

		<p>Ah, my bad. When I googled &#8220;dll hijacking&#8221; it described what I described. Here lies my error.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1281645">
				<div id="div-comment-1281645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1281645">
			January 27, 2017 at 9:48 am</a>		</div>

		<p>You are trying to secure the wrong side of the airtight hatchway. The bad guy can just plant a rogue version.dll, in which case your &#8220;fixes&#8221; to version.dll are useless because the &#8220;fixed&#8217; version.dll isn&#8217;t even running.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-3 parent" id="comment-1281655">
				<div id="div-comment-1281655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1281655">
			January 27, 2017 at 11:09 am</a>		</div>

		<p>No? Create a program that only links to kernel32 and shell32 and then call SHGetFileInfo or some other function that causes shell32 to delay-load a function in propsys.dll or version.dll and then the delay-loader in shell32 calls LoadLibrary without a full path and your application might load a evil .dll you never asked for, it is only loaded as a implementation detail inside Microsoft controlled code. </p>
<p>To fix it the shell32 delay-load hook would try to load from a full path to system32 before falling back to normal LoadLibrary.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1281666">
				<div id="div-comment-1281666" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1281666">
			January 27, 2017 at 11:12 am</a>		</div>

		<p>I can&#8217;t tell whether you are saying that &#8220;shell32 should use this technique when it loads other DLLs&#8221; or &#8220;other DLLs should use this technique when it loads shell32.&#8221; Either way, you have lost. In the case where you want shell32 to use this technique, the bad guy simply places an evil shell32.dll in the same directory and that will be used instead of the real one. Any fixes you make to the real one have no effect because evil has already won.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-5" id="comment-1281685">
				<div id="div-comment-1281685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1281685">
			January 27, 2017 at 11:35 am</a>		</div>

		<p>Yes, shell32 should use this technique when it loads other DLLs. Shell32 is on the known-dlls list, version.dll and propsys.dll are not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-5" id="comment-1281695">
				<div id="div-comment-1281695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1281695">
			January 27, 2017 at 11:54 am</a>		</div>

		<p>The known-DLLs list is <a href="https://blogs.msdn.microsoft.com/oldnewthing/20130802-00/?p=3633">not a security feature</a>.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1281525">
				<div id="div-comment-1281525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1281525">
			January 26, 2017 at 8:53 am</a>		</div>

		<p>Yes, technically Add­Dll­Directory is a global solution to a local problem, and thus, technically incorrect. But *adding* a directory controlled by the COM server to the DLL search path (instead of *replacing* the full path) may not break anything. It would only affect if the host process tries to load a non-existent DLL *and* a DLL with the exact same name exists in the COM server&#8217;s directory. Which is, in the worst case, very unlikely.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1281555">
				<div id="div-comment-1281555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1281555">
			January 26, 2017 at 10:37 pm</a>		</div>

		<p>I am puzzled how the customer got to where they were.  We had a similar problem (DLL loaded via LoadLibrary, needs other DLLs that are in the same directory as the main DLL, and unfindable by the standard rules).  The solution I found by googling was to switch to delay load, and explicitly LoadLibrary the path we wanted.  I don&#8217;t understand why the customer switched to delay load, but didn&#8217;t do the explicit load.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1 parent" id="comment-1281705">
				<div id="div-comment-1281705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1281705">
			January 27, 2017 at 12:08 pm</a>		</div>

		<p>@Raymond: Yes I know it is not a security feature but it does act like one. If you look at all the .dll hijacking vulnerabilities disclosed last year for both Microsoft and 3rd-party products ( <a href="http://seclists.org/fulldisclosure/2016/Aug/50#" rel="nofollow">http://seclists.org/fulldisclosure/2016/Aug/50#</a> etc.) they all hijack DLLs that are not on the known-DLLs list.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1281715">
				<div id="div-comment-1281715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1281715">
			January 27, 2017 at 12:12 pm</a>		</div>

		<p>That still won&#8217;t help because any DLLs that are non-delay-loaded will still be hijackable. You are trying to secure the wrong side of the airtight hatchway.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-3 parent" id="comment-1281716">
				<div id="div-comment-1281716" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1281716">
			January 27, 2017 at 12:50 pm</a>		</div>

		<p>DLLs loaded by the application are the developers responsibility but the delay-loaded stuff deep inside the call stack of a public API is not and it would not be hard for Microsoft to fix. </p>
<p>WiX for example had to add a workaround for the problem; manually load DLLs they never use directly early in WinMain before calling shell functions ( <a href="https://github.com/firegiant/wix3/blob/master/src/burn/stub/stub.cpp" rel="nofollow">https://github.com/firegiant/wix3/blob/master/src/burn/stub/stub.cpp</a> )</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1281725">
				<div id="div-comment-1281725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1281725">
			January 27, 2017 at 1:28 pm</a>		</div>

		<p>I&#8217;m not talking about DLLs loaded by the app. I&#8217;m talking about DLLs linked (non-delay) by shell32. Those would still be plantable. Basically, in order for this to be effective, every DLL in the system needs to delay-load <u>all</u> of its dependencies.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-5" id="comment-1281745">
				<div id="div-comment-1281745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1281745">
			January 27, 2017 at 2:27 pm</a>		</div>

		<p>That might be true in theory but as long as the application explicitly links to shell32 then there is no problem because shell32 is well known and &#8220;&#8230; the \KnownDlls sections are computed as the transitive closure of the DLLs listed in KnownDLLs.  So if a DLL’s listed in KnownDLLs, all of the DLL’s that are statically linked with the DLL are ALSO listed in the \KnownDlls section&#8221;(1) This leads is back to the real world situation where the delay-loaded DLLs are the problem. Fixing it is just GetSystemDirectory + PathAppend + LoadLibrary in the delay-load callback.</p>
<p>1: <a href="https://blogs.msdn.microsoft.com/larryosterman/2004/07/19/what-are-known-dlls-anyway/" rel="nofollow">https://blogs.msdn.microsoft.com/larryosterman/2004/07/19/what-are-known-dlls-anyway/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-5" id="comment-1281755">
				<div id="div-comment-1281755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1281755">
			January 27, 2017 at 3:01 pm</a>		</div>

		<p>Like I said, you&#8217;re trying to secure the wrong side of the airtight hatchway. If shell32 gets removed from the Known DLLs list (which it could, since it&#8217;s just a performance setting, not a security setting), then your plan breaks down.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt depth-5" id="comment-1281765">
				<div id="div-comment-1281765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1281765">
			January 27, 2017 at 3:43 pm</a>		</div>

		<p>Even if applications only explicitly link to kernel32 and delay-load with callback hardening for everything else you still have to deal with kernel32. There is no PE/manifest setting to control where DLLs are allowed to load from so you basically have to rely on known-DLLs and/or the internals of CreateProcess to safely load kernel32 and ntdll for you. </p>
<p>Shell32 is on the known-DLLs list in every version of Windows from Win95 to Win10 so my suggestion would fix all supported versions and MS could provide a manifest setting for vNext in the unlikely event that it is removed from the list. This is just the tip of the iceberg of course but it would make a big roadblock for evil hijackers if Microsoft did it, even if just for shell32, shlwapi? and advapi32.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1282805">
				<div id="div-comment-1282805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryce Wagner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170126-00/?p=95265#comment-1282805">
			February 6, 2017 at 9:36 am</a>		</div>

		<p>I do something similar to this in the .NET world using the AppDomain.AssemblyResolve event.  But DllImport signatures within those delay loaded assemblies could theoretically end up pointing at the wrong native DLL.  Is it possible to use this technique to explicitly load native DLL files under C#, or is this a C++ specific feature?  It looks like it&#8217;s a C++ linker symbol, but maybe I&#8217;m missing something.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

