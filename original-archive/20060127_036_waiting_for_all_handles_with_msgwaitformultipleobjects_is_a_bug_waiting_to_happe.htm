<html>
<head>
<title>Waiting for all handles with MsgWaitForMultipleObjects is a bug waiting to happen</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Waiting for all handles with MsgWaitForMultipleObjects is a bug waiting to happen</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 27, 2006 / year-entry #37</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060127-17/?p=32493</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The MsgWaitForMultipleObjects and MsgWaitForMultipleObjectsEx functions allow you to specify whether you want to want for any or all of the handles (either by passing bWaitAll = TRUE or by passing dwFlags = MWMO_WAITALL, accordingly). But you never want to wait for all handles. Waiting for all handles means that the call does not return unless...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The <code>MsgWaitForMultipleObjects</code> and <code>MsgWaitForMultipleObjectsEx</code> functions allow you to specify whether you want to want for any or all of the handles (either by passing <code>bWaitAll = TRUE</code> or by passing <code>dwFlags = MWMO_WAITALL</code>, accordingly). But you never want to wait for all handles.</p>
<p> Waiting for all handles means that the call does not return unless all the handles are signalled <strong>and</strong> a window message meeting your wake criteria has arrived. Since you are typically waiting for messages out of a sense of obligation (keeping the UI thread responsive) rather than one of expectation, even if all the handles you pass become signalled, your program will still stall until a window message arrives. (And if you thought you were being a good UI citizen by using <code>MsgWaitForMultipleObjectsEx</code>, you aren't actually helping any because waiting for all objects means that the call will not return even if a message is ready, since it's also waiting for those handles you passed.) Functions which are built on top of the <code>MsgWaitForMultipleObjectsEx</code> function such as <code>MsgWaitForMultipleObjects</code> and <code>CoWaitForMultipleHandles</code> suffer from the same problem. </p>
<p> The reason for this can be gleaned from the <code>MsgWaitForMultipleObjectsEx</code> documentation; you just have to put on your thinking cap. Notice that if a message arrives when you are waiting for any handle, the return value is <nobr><code>WAIT_OBJECT_0 + cHandles</code></nobr>. Notice also that the maximum number of objects you can wait on is <nobr><code>MAXIMUM_WAIT_OBJECTS - 1</code></nobr>. Obviously, what's happening under the covers is that the <code>MsgWaitForMultipleObjectsEx</code> function creates a handle that will be signalled when the message queue reaches one of the states you requested in the wake mask, adds that handle to the end of the array you passed in, and then passes the whole thing to the <code>WaitForMultipleObjectsEx</code> function. (Note that the getting access to that internal handle won't be of any use to you, the application, since you don't know how to tell the window manager what wait states should result in the event being set.) </p>
<p> (Larry Osterman reminded me that he <a href="http://blogs.msdn.com/larryosterman/archive/2004/06/02/146800.aspx"> covered the same topic a while back</a>. So now you get to see it twice.) </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-341393">
				<div id="div-comment-341393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060127-17/?p=32493#comment-341393">
			January 27, 2006 at 12:43 pm</a>		</div>

		<p>If you never want to wait for all handles, then why was the option ever specified in the first place?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-341403">
				<div id="div-comment-341403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Good Point</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060127-17/?p=32493#comment-341403">
			January 27, 2006 at 12:55 pm</a>		</div>

		<p>The latest documentation is pretty clear.  Under dwWakeMask it says &quot;Input types for which an input event object handle will be added to the array of object handles&quot;</p>
<p>Now, how does one go about creating an &quot;input event object handle&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-341413">
				<div id="div-comment-341413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060127-17/?p=32493#comment-341413">
			January 27, 2006 at 12:58 pm</a>		</div>

		<p>Neil: Probably because somebody said, &quot;We should expose all the functionality of WaitForMultipleObjects &#8211; otherwise I&#8217;m sure somebody will complain that we hid the functionality for some evil purpose.&quot;</p>
<p>GP: You don&#8217;t create the event object handle; the window manager does.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-341423">
				<div id="div-comment-341423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jerry Pisk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060127-17/?p=32493#comment-341423">
			January 27, 2006 at 1:32 pm</a>		</div>

		<p>Waiting on a UI thread is a problem no mater what you do. If you need to wait for something then fire off a thread to do that. UI thread should be handling UI events, not waiting for some background processing to finish.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-341443">
				<div id="div-comment-341443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060127-17/?p=32493#comment-341443">
			January 27, 2006 at 2:34 pm</a>		</div>

		<p>Jerry &#8212; so what do you do when you have to wait until the thread that you fired off finishes?</p>
<p>(Not just a thread to wait for something else, but think about a thread doing a bunch of CPU intensive work.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-341453">
				<div id="div-comment-341453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pavel Lebedinsky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060127-17/?p=32493#comment-341453">
			January 27, 2006 at 3:41 pm</a>		</div>

		<blockquote><p>
  what do you do when you have to wait until the thread that you fired off finishes?</p>
<p>The worker thread could post a &quot;finished&quot; message to the UI thread.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-341463">
				<div id="div-comment-341463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060127-17/?p=32493#comment-341463">
			January 27, 2006 at 4:12 pm</a>		</div>

		<p>&#8230;</p>
<p>Oh, yeah, that would be an option, wouldn&#8217;t it.  Heh.  So much for that then.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-341483">
				<div id="div-comment-341483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bmm6o</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060127-17/?p=32493#comment-341483">
			January 27, 2006 at 5:11 pm</a>		</div>

		<p>BrianK:  I agree.  The docs as quoted by Larry are pretty clear.  I could see how a casual reader could miss it though, especially as it seems much more useful for the function to return when all passed in handles are signalled OR there is a new message.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-341503">
				<div id="div-comment-341503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://apipes.blogspot.com' rel='external nofollow' class='url'>Tim Lesher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060127-17/?p=32493#comment-341503">
			January 27, 2006 at 8:35 pm</a>		</div>

		<p>BrianK: not to split hairs, but the post says &quot;The reason for this can be gleaned from the MsgWaitForMultipleObjectsEx documentation; you just have to put on your thinking cap.&quot;</p>
<p>It doesn&#8217;t say &quot;the fact that this happens can be gleaned&#8230;&quot;. If it did, I&#8217;d agree with you.  No, you don&#8217;t <em>need</em> to think about the implementation.  But Raymond&#8217;s saying that if you <em>care</em> about the implementation, with a tiny bit of thought you can figure it out.</p>
<p>Nothing personal, but I always get a bad feeling from programmers who automatically trust the documentation and assume it tells them everything they need to know, and that they never need to think about the implementation or read between the lines. </p>
<p>Or maybe I&#8217;ve just been programming Windows too long&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-341473">
				<div id="div-comment-341473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060127-17/?p=32493#comment-341473">
			January 27, 2006 at 4:25 pm</a>		</div>

		<p>Er, hang on a minute&#8230;</p>
<p>&gt; The reason for this can be gleaned from the<br />
<br />&gt; MsgWaitForMultipleObjectsEx documentation; you<br />
<br />&gt; just have to put on your thinking cap.</p>
<p>I think you just have to read carefully.  Note the documentation&#8217;s description of bWaitAll (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/msgwaitformultipleobjects.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/msgwaitformultipleobjects.asp</a>):</p>
<p>&#8212;&#8212;&#8211;</p>
<p>bWaitAll</p>
<p>If this parameter is TRUE, the function returns when the states of all objects in the pHandles array have been set to signaled *and an input event has been received*.</p>
<p>&#8212;&#8212;&#8211;</p>
<p>(Emphasis mine.)</p>
<p>This is explicit enough to tell me that it will wait until a message comes in *AND* all the handles are signaled.  I don&#8217;t need to think about the implementation, I just need to read the description of the parameter and notice the difference between it and WaitForMultipleObjects.</p>
<p>Larry, if you&#8217;re reading this, your post has the same issue.  You even quote the MSDN doc page on MsgWaitForMultipleObjects (the text I&#8217;ve quoted above), and you say that it&#8217;s &quot;the same as WaitForMultipleObjects&quot; &#8212; but it isn&#8217;t.  The WaitForMultipleObjects page says:</p>
<p>&#8212;&#8212;&#8211;</p>
<p>bWaitAll</p>
<p>If this parameter is TRUE, the function returns when the state of all objects in the lpHandles array is signaled.</p>
<p>&#8212;&#8212;&#8211;</p>
<p>Perhaps this used to be an issue in the documentation or something, I don&#8217;t know.  But it&#8217;s not an issue anymore &#8212; if people are still doing this, it has to be because they either can&#8217;t or won&#8217;t read the docs, not because there&#8217;s some deep thinking that they have to do.</p>
<p>(Unless I misunderstand what an &quot;input event&quot; is.  That&#8217;s always possible.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-341543">
				<div id="div-comment-341543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060127-17/?p=32493#comment-341543">
			January 28, 2006 at 8:57 am</a>		</div>

		<p>I can think of a reason to use MsgWaitForMultipleObjects with bWaitAll set to true: if you are waiting for a non-gui message, like a socket message from WSAAsyncSelect, or a background timer message.</p>
<p>Your thread could be waiting for an event from an overlapped file operation, a mutex lock, and a socket select (delivered by msg) to be ready at the same time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-341623">
				<div id="div-comment-341623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gideon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060127-17/?p=32493#comment-341623">
			January 30, 2006 at 1:11 am</a>		</div>

		<p>Even with bWaitAll=FALSE there is (or was) a well-known problem with starvation.  The kernel checks the event array sequentially.  So basically if Handle[n] is constantly tripping it can starve all the handles &gt; n.</p>
<p>I noticed it when writing an NT network server application.  The lowest numbered socket got serviced while the higher number sockets timed out.  Investigation revealed that the select() Winsock API was calling MsgWaitForMultipleObjects().</p>
<p>I dunno if they fixed it since NT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-341643">
				<div id="div-comment-341643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060127-17/?p=32493#comment-341643">
			January 30, 2006 at 8:11 am</a>		</div>

		<p>I was trying to say that I&#8217;m not so sure anything has to be &quot;gleaned&quot; &#8212; it&#8217;s pretty obvious just reading the bWaitAll docs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-341633">
				<div id="div-comment-341633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Steward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060127-17/?p=32493#comment-341633">
			January 30, 2006 at 7:13 am</a>		</div>

		<p>Gideon: surely by definition select returns all sockets that are ready?  I admittedly don&#8217;t have experience of early NT, but it seems a major bug if it only returns one.  And if simply doesn&#8217;t bother to check the entire set *after* calling MsgWaitForMultipleObjects, the next call to select would catch any others.</p>
<p>But anyway, MsgWaitForMultipleObjects is documented as only returning the first handle in the array.  &quot;If multiple objects become signaled, the function returns the index of the first handle in the array whose object was signaled.&quot;  I think this is something you have to program around :)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

