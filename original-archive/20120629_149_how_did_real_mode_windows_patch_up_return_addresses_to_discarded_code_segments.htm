<html>
<head>
<title>How did real-mode Windows patch up return addresses to discarded code segments?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How did real-mode Windows patch up return addresses to discarded code segments?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 29, 2012 / year-entry #150</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last week, I described how real-mode Windows fixed up jumps to functions that got discarded. But what about return addresses to functions that got discarded? The naïve solution would be to allocate a special "return address recovery" function for each return address you found, but that idea comes with its own problems: You are patching...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Last week, I described <a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/06/22/10322767.aspx"> how real-mode Windows fixed up jumps to functions that got discarded</a>. But <a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/06/22/10322767.aspx#10323055"> what about return addresses to functions that got discarded</a>?</p>
<p> The na&iuml;ve solution would be to allocate a special "return address recovery" function for each return address you found, but that idea comes with its own problems: You are patching addresses on the stack because you are trying to free up memory. It would be a bad idea to try to allocate memory while you're trying to free memory! What if in order to satisfy the allocation, you had to discard still <i>more</i> memory? You would start moving and patching stacks before they were fully patched from the previous round of memory motion. The stack patcher would get re-entered and see an inconsistent stack because the previous stack patcher didn't get a chance to finish. The result would be rampant memory corruption. </p>
<p> Therefore, you have to preallocate your "return address recovery" functions. But you don't know how many return addresses you're going to need until you walk the stack (at which point it's too late), and you definitely don't want to preallocate the worst-case scenario since each stack can be up to 64<a href="http://blogs.msdn.com/b/oldnewthing/archive/2009/06/11/9725386.aspx">KB</a> in size, and can hold up to 16384 return addresses. You'd end up allocating nearly all your available memory just for return address recovery stubs! </p>
<p> How did real-mode Windows solve this problem? </p>
<p> <i>It magically found a way to put ten pounds of flour in a five-pound bag.</i> </p>
<p> For each segment, there was a special "return thunk" that was shared by all return addresses which returned back into that segment. Since there is only one per segment, you can preallocate it as part of the segment bookkeeping data. To patch the return address, the original return address was overwritten by this shared return thunk. Okay, so you have 32 bits of information you need to save (the original return address, which consists of 16 bits for the segment and 16 bits for the offset), and you have a return thunk that captures the segment information. But you still have 16 bits left over. Where do you put the offset? </p>
<p> We saw some time ago that <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/03/16/10141735.aspx"> the BP register associated with far calls was incremented before being pushed on the stack</a>. This was necessary so that the stack patcher knew whether to decode the frame as a near frame or a far frame. But that wasn't the only rule associated with far stack frames. On entry to a far function, </p>
<ul>
<li>The first thing you do is increment the BP register and push it onto     the stack. </li>
<li>The second thing you do is push the DS register.     (DS is the data segment register,     which holds a segment containing data     the caller function wanted to be able to access.) </li>
</ul>
<p> Every far call therefore looks like this on the stack: </p>
<table border="0" cellpadding="3" cellspacing="0">
<tr>
<td>xxxx+6</td>
<td>IP of return address</td>
</tr>
<tr>
<td>xxxx+4</td>
<td>CS of return address</td>
</tr>
<tr>
<td>xxxx+2</td>
<td>pointer to next stack frame (bottom bit set)</td>
</tr>
<tr>
<td>xxxx+0</td>
<td>DS of caller</td>
</tr>
</table>
<p> The stack patcher overwrote the saved CS:IP with the address of the return thunk. The return thunk describes the segment that got discarded, so the CS is implied by your choice of return thunk, but the stack patcher still needed to save the IP somewhere. So it saved it where the DS used to be. </p>
<p> Wait, you've just traded one problem for another. Sure, you found a place to put the IP, but now you have to find a place to put the DS. </p>
<p> Here comes the magic. </p>
<p> Recall that on the 8086, the combination segment:offset corresponds to the physical address segment&times;16 + offset. For example, the address 1234:0005 refers to physical byte 0x1234 * 16 + 0x0005 = 0x12345. </p>
<p> Since the segment and offset were both 16-bit values, there were multiple ways to refer to the same physical address. For example, 1000:2345 would also resolve to physical address 0x12345. But there are other ways to refer to the same byte, like the not entirely obvious 0FFF:2355. In fact, there's a whole range of values you can use, starting from 0235:FFF5 and ending at 1234:0005. In general, there are 4096 different ways of referring to the same address. </p>
<p> There's a bit of a problem with very low addresses, though. To access byte 0x00400, for example, you could use 0000:0400 through 0040:0000, but that's as far as you could go, so these very low addresses do not have the full complement of aliases. </p>
<p> Aha, but they do <i>if you take advantage of wraparound</i>. Since the 8086 had only 20 address lines, any overflow in the calculations was simply taken mod 0x100000. Therefore, you could also use F041:FFF0 to refer to the address, because 0xF041 &times; 16 + 0xFFF0 = 0x100400 &equiv; 0x00400. Wraparound allowed the full range of 4096 aliases since you could use F041:FFF0 to FFFF:0410, and then 0000:0400 to 0040:0000. </p>
<p> <b>Related reading</b>: <a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/02/06/10264229.aspx"> <i>The story of the mysterious WINA20.386 file</i></a>. </p>
<p> Okay, back to stack patching. </p>
<p> Once you consider aliasing, you realize that the 32 bits of flour actually had a lot of air in it. By rewriting the address of the return thunk into the form XXXX:000Y, you can see the 12 bits of air, and to stash the 12-bit value N into that air pocket, you would set the segment to XXXX&minus;N and the offset to N&times;16+Y. </p>
<p> Recall that we were looking for a place to put that saved DS value, which is a 16-bit value, and we have found 12 bits of air in which to save it. We need to find 4 more bits of air somewhere. </p>
<p> The next trick is realizing that DS is not an arbitrary 16-bit value. It's a 16-bit segment value that was obtained from the Windows memory manager. Therefore, if the Windows memory manager imposed a generous artificial limit of 4096 segments, it could convert the DS segment value into an integer segment index. </p>
<p> That index got saved in the upper 12 bits of the offset. </p>
<p> Okay, let's see what happens when the code tries to unwind to the patched return address. </p>
<p> The function whose return address got patched goes through the usual function epilogue. It pops what it thinks is the original DS off the stack, even though that DS has been <a href="https://www.youtube.com/watch?v=CxigbiEEOkk"> secretly replaced</a> by the original return address's IP. The epilogue then pops the old BP, decrements it, and returns to the return thunk. The return thunk now knows where the real return address is (it knows which segment it is responsible for, and it can figure out the IP from the incoming DS register). It can also study its own IP to extract the segment index and from that recover the original DS value. Now that it knows what the original code was trying to do, it can reload the segment, restore the registers to their proper values, and jump to the original return address inside the newly-loaded segment. </p>
<p> I continue to be amazed at how real-mode Windows managed to get so much done with so little. </p>
<p> <b>Exercise</b>: The arbitrary limit of 4096 segments was quite generous, seeing as the maximum number of selectors in protected mode was defined by the processor to be 8191. What small change could you make to expand the segment limit in real mode to match that of protected mode? </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-995013">
				<div id="div-comment-995013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995013">
			June 29, 2012 at 7:09 am</a>		</div>

		<p>Could you require all functions to be 2-byte aligned so that you could repurpose the bottom bit of the IP for another bit of selector?</p>
<div class="post">[<i>Wouldn&#39;t be much help here because we are patching return addresses, not function entry points. You would have to require all return addresses to be 2-byte aligned, which given the 8086 instruction set, would be expensive to enforce. (&quot;Why is there a NOP immediately before half of my function calls?&quot;) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-995073">
				<div id="div-comment-995073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mijzelf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995073">
			June 29, 2012 at 8:05 am</a>		</div>

		<p>The stack is 16 bits wide, so the pointer to the next stackframe has one bit left. (Actually more, I suppose. With a 64kB stack I suppose the frames were never 32kB from each other, so the most significant bit could be stripped either.</p>
<div class="post">[<i>The bottom bit of the pointer to the next stack frame was already being used: &quot;We saw some time ago that the BP register associated with far calls was incremented before being pushed on the stack.&quot; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-995083">
				<div id="div-comment-995083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995083">
			June 29, 2012 at 8:13 am</a>		</div>

		<ul>
<li>The second thing you do is push the DS register. (DS is the data segment register, which holds a segment containing data the caller function wanted to be able to access.) </li>
</ul>
<p>Wow I dodged a bullet by not supporting Real Mode Windows. I had <em>no idea</em> you had to do that when programming targeting 16 bit Windows. Win 3.1 didn&#39;t seem to care.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-995103">
				<div id="div-comment-995103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mijzelf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995103">
			June 29, 2012 at 8:43 am</a>		</div>

		<p>[quote][The bottom bit of the pointer to the next stack frame was already being used: &quot;We saw some time ago that the BP register associated with far calls was incremented before being pushed on the stack.&quot; -Raymond][/quote]</p>
<p>True, but you already know it was a far call, right? For a near call the stack wouldn&#39;t have to be patched, as the code segment wouldn&#39;t be swapped away with running code in it.</p>
<div class="post">[<i>The way we knew it was a far call was by checking the bottom bit! -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-995133">
				<div id="div-comment-995133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henning Makholm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995133">
			June 29, 2012 at 8:49 am</a>		</div>

		<p>You can have two different entry points to the return thunk for almost the price of one, if you prefix the actual code with a single-byte INC BP instruction. The called function&#39;s epilogue will already have reset the low bit of BP to 0, so now it can be used as a local temporary in the return-fixup code, remembering whether the INC BP was executed or not while we save the user code&#39;s register values. Voil&agrave;! we then have freedom to choose 13 bits of the return offset.</p>
<div class="post">[<i>That is brilliant. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-995153">
				<div id="div-comment-995153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SMW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995153">
			June 29, 2012 at 9:05 am</a>		</div>

		<p>I can&#39;t tell whether Raymond&#39;s reply to Henning is sincere or sarcastic.</p>
<div class="post">[<i>Sincere. He found another bit of air that could be squeezed out. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-995163">
				<div id="div-comment-995163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zwieback</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995163">
			June 29, 2012 at 9:31 am</a>		</div>

		<p>Real-mode Windows was the real innovation, once we switched over to protected mode we just used what Intel gave us. Not that I wish those day back&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-995193">
				<div id="div-comment-995193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995193">
			June 29, 2012 at 10:29 am</a>		</div>

		<p>I can see a possible problem with this system: Suppose the DS index is 0xFFF and the return thunk&#39;s physical address is 0x1234F (or anything else that ends with a high nybble). The thunk will be invoked by returning to 0235:FFFF, but this will likely crash because code execution wraps around to 0235:0000.</p>
<p>This could be fixed either by limiting the number of segments to 4095 instead of 4096, or by aligning return thunks so they never need to cross from one 16-byte paragraph to the next.</p>
<div class="post">[<i>I glossed over many tiny details. This is one of them. But +1 on you for noticing. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-995203">
				<div id="div-comment-995203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995203">
			June 29, 2012 at 10:36 am</a>		</div>

		<p>@Joshua, when Raymond says &quot;you&quot; he didn&#39;t mean you per se. &nbsp;The compiler took care of a lot of this for you; IIRC the main thing you had to do was make sure no functions or individual data items (like an array) were bigger than 64KB. &nbsp;In particular, the compiler inserted all that function prolog/epilog stuff for you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-995213">
				<div id="div-comment-995213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995213">
			June 29, 2012 at 11:00 am</a>		</div>

		<p>[Wouldn&#39;t be much help here because we are patching return addresses, not function entry points. You would have to require all return addresses to be 2-byte aligned, which given the 8086 instruction set, would be expensive to enforce. (&quot;Why is there a NOP immediately before half of my function calls?&quot;) -Raymond]</p>
<p>I was obviously not thinking clearly when I wrote that. &nbsp;If we were dealing with a fixed-width instruction set (like many RISC ISAs), we could be sure of instruction alignment for all return addresses, but yeah, imposing that on x86 would be a bad idea.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-995233">
				<div id="div-comment-995233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995233">
			June 29, 2012 at 11:14 am</a>		</div>

		<p>@Rick C: I dabbled in 16 bit assembly language.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-995273">
				<div id="div-comment-995273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995273">
			June 29, 2012 at 1:35 pm</a>		</div>

		<p>@Joshua, so did I, but I targetted DOS not Windows, to avoid that stuff.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-995143">
				<div id="div-comment-995143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/stephen.oberholtzer_4000_freedompay.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>stephen.oberholtzer@freedompay.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995143">
			June 29, 2012 at 8:51 am</a>		</div>

		<p>I don&#39;t know how &quot;small&quot; this change is, but&#8230;</p>
<p>As I understand it, *after* being patched, the pushed values look like this:</p>
<p>DS = original return IP</p>
<p>CS:IP = Address of return thunk, directly encoding 12 bits of the original DS, and indirectly encoding the original CS (by way of pointing to the return thunk for that CS).</p>
<p>Therefore, the remaining 4 bits of DS must be derivable from the preserved 12 bits (the easiest way is probably to make them all 0 or 1).</p>
<p>To push up to 8192 values, I would have two copies of each return thunk (or at least, two entry points for each thunk.) If DS is even, use thunk #1; if odd, use thunk #2:</p>
<p>mov bx, dword ptr [thunk_entry_point]</p>
<p>mov ax, ds</p>
<p>; not sure if this is better or worse than a test-jz</p>
<p>and ax, &nbsp;1</p>
<p>not ax</p>
<p>inc ax</p>
<p>and ax, THUNK2_OFFSET</p>
<p>add bx, ax</p>
<div class="post">[<i>Having two return thunks is the solution I had in mind. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-995323">
				<div id="div-comment-995323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995323">
			June 29, 2012 at 8:53 pm</a>		</div>

		<blockquote><p>
  [self] Wow I dodged a bullet by not supporting Real Mode Windows.
</p></blockquote>
<p>I went back and checked. None of my assembly functions ever yielded so I was safe anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-995353">
				<div id="div-comment-995353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995353">
			June 30, 2012 at 4:15 am</a>		</div>

		<p>@Joshua: Including not calling far functions in discardable segments?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-995363">
				<div id="div-comment-995363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995363">
			June 30, 2012 at 7:40 am</a>		</div>

		<p>@Neil: As it happened, yes. (I&#39;m assuming kernel is not discardable.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-995573">
				<div id="div-comment-995573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995573">
			July 2, 2012 at 12:34 pm</a>		</div>

		<p>@Myria: Windows doesn&#39;t need to fix it &#8211; this is a call, not a return. The function has its own dedicated INT 3F thunk (as described in <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2012/06/22/10322767.aspx" rel="nofollow">blogs.msdn.com/&#8230;/10322767.aspx</a>) which &quot;meow&quot; will point to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-995543">
				<div id="div-comment-995543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995543">
			July 2, 2012 at 12:25 pm</a>		</div>

		<p>How were far function pointers stored as local variables on the stack handled?</p>
<p>void (__far *meow)() = SomeFunction;</p>
<p>SomeOtherFunction();</p>
<p>(*meow)();</p>
<p>How could the Windows kernel fix the copy of &quot;meow&quot; saved to the stack during the SomeOtherFunction call? &nbsp;Specifically, how did the kernel know about it in the stack trace?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-995673">
				<div id="div-comment-995673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120629-00/?p=7253#comment-995673">
			July 2, 2012 at 8:14 pm</a>		</div>

		<p>Dare I ask what happens when somebody does a longjmp into a discardable segment?</p>
<div class="post">[<em><a href="http://blogs.msdn.com/b/oldnewthing/archive/2014/01/03/10486694.aspx" rel="nofollow">Sure</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

