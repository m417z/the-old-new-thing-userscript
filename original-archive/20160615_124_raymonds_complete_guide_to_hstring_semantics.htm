<html>
<head>
<title>Raymond's complete guide to HSTRING semantics</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Raymond&#8217;s complete guide to HSTRING semantics</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 15, 2016 / year-entry #125</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160615-00/?p=93675</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It's reference-counted, except when it isn't.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The title of today's article is
<a HREF="https://blogs.msdn.microsoft.com/ericlippert/2003/09/12/erics-complete-guide-to-bstr-semantics/">
a blatant ripoff of Eric Lippert's complete guide to BSTR semantics</a>.
</p>
<p>
I'm going to start with a lie:
An <code>HSTRING</code>
is a reference-counted Unicode string.
</p>
<p>
Work with me here.
</p>
<p>
The string is immutable,
and it uses the UTF-16LE encoding,
as is traditional in Windows.
</p>
<p>
Here are the basic operations on <code>HSTRING</code>s:
</p>
<p>
<b>WindowsCreateString</b> creates an <code>HSTRING</code>
from a UTF-16LE-encoded buffer and a specified length.
The buffer does not require a terminating null.
If the buffer contains embedded null characters,
then the resulting <code>HSTRING</code> will have embedded
null characters.
(In particular, if you pass a null-terminated string
and you include the null terminator in the length,
then the resulting string has an embedded null character.
Note also that the length is in <code>wchar_t</code> code units,
not in bytes.)
</p>
<p>
<b>WindowsDuplicateString</b> increments the reference
count on an <code>HSTRING</code>,
and returns a new <code>HSTRING</code> which you should use
to refer to the string.
</p>
<p>
<b>WindowsDeleteString</b> decrements the reference count
on an <code>HSTRING</code>.
If the reference count drops to zero, then the string is destroyed.
You shouldn't use the <code>HSTRING</code> after passing it to
<b>WindowsDeleteString</b>.
</p>
<p>
There are a small number of string manipulation functions
like <b>WindowsSubstring</b>
and <b>WindowsConcatString</b>
which create new strings from old strings.
The set of operations is rather limited, however.
If you want to perform fancy operations on <code>HSTRING</code>s,
you'll probably need to do them yourself.
(Of course, if you're using a projected language,
the <code>HSTRING</code> will project as something closer to
what your projected language operates on natively,
at which point you will most likely have a rich collection of
library functions available to do advanced manipulations.)
</p>
<p>
To access the characters in the <code>HSTRING</code>,
use the
<b>WindowsGetStringRawBuffer</b> function,
which gives you two things:
The return value is
a pointer to the first character in the <code>HSTRING</code>,
and the optional output parameter is the number of
code units.
The buffer should be treated as read-only
because <code>HSTRING</code>s are immutable.
</p>
<p>
The string contents in the buffer are always followed by
a null character (which doesn't count toward the string length);
as a result, you can
treat the string buffer as if it were a null-terminated string
and get away with it most of the time.
</p>
<p>
The time you don't get away with it is if the string contains
embedded null characters.
In that case, treating it as a null-terminated string will stop
prematurely,
mistaking the embedded null for the terminal null.
You can use the
<b>WindowsStringHasEmbeddedNull</b> function to detect whether
an <code>HSTRING</code> contains an embedded null
and reject the operation if you don't support embedded nulls.
</p>
<p>
One of the special rules for <code>HSTRING</code> is similar
to the corresponding rule for <code>BSTR</code>,
namely that a null pointer is equivalent to a zero-length string.
But
<code>HSTRING</code> takes it further:
Not only is a null pointer equivalent to a zero-length string,
but in fact a null pointer <i>is</i> the representation of a
zero-length string.
In other words, if you call
<b>WindowsCreateString</b> and specify that the string has length
zero, then out will come a null pointer.
It is legal to assume that a non-null <code>HSTRING</code>
represents a non-empty string.
Conversely, it is legal to test an <code>HSTRING</code> against
a null pointer to see whether the string is empty.
</p>
<p>
Okay, so now I cop to the lie:
An <code>HSTRING</code> is not always a reference-counted string.
</p>
<p>
There are these things called
<a HREF="https://disneyland.disney.go.com/guest-services/fastpass/">
fast-pass</a> strings.
Fast-pass strings are <code>HSTRING</code>s that involve no memory
allocation.
If you have a buffer that you want to turn into an <code>HSTRING</code>,
and you promise not to modify the buffer for the lifetime of your
<code>HSTRING</code>,
then you can use the
<b>WindowsCreateStringReference</b> function
to create an <code>HSTRING</code> <i>around</i> your buffer.
The resulting <code>HSTRING</code> is a legal <code>HSTRING</code>,
but instead of allocating memory on the heap for a reference-counted
object,
it uses the
<code>HSTRING_HEADER</code> structure
which you passed to the
<b>WindowsCreateStringReference</b> function
to store the metadata,
and it uses
the buffer you passed to the function to store the string contents.
</p>
<p>
It's called a fast-pass string because this special string doesn't
require any memory allocation, and no data copying occurs.
</p>
<p>
When you are finished with a fast-pass string, you just abandon
the <code>HSTRING</code>.
The underlying memory for the fast-pass string was provided by you,
so you are still on the hook for freeing that memory as appropriate.
</p>
<p>
The existence of fast-pass strings explains why the
<b>WindowsDuplicateString</b> function returns you another
<code>HSTRING</code>:
If the original string is fast-pass, then
the <b>WindowsDuplicateString</b> function needs to convert it
to a true reference-counted heap-allocated object,
and then it returns an <code>HSTRING</code> to that heap-allocated
string.
(On the other hand, if the <code>HSTRING</code> is already a
heap-allocated string with a reference count,
then the
<b>WindowsDuplicateString</b> function merely increments the
reference count and returns the same <code>HSTRING</code> back.)&sup1;
</p>
<p>
The rules for managing <code>HSTRING</code>s therefore go like this:
</p>
<ul>
<li>If you receive an <code>HSTRING</code> as a function parameter,
    you are welcome to use it as-is until your function returns,
    but don't call <b>WindowsDeleteString</b> on that string,
    because you are not the owner of the string.
    It was merely lent to you.
    (This is the same rule that applies to COM reference counts.)&sup2;</p>
<li>If you need to keep using the <code>HSTRING</code> after the function
    returns (say, because you're saving it in a member variable),
    you must use <code>WindowsDuplicateString</code>
    and use the duplicate.</p>
<li>Each call to <b>WindowsCreateString</b> or
    <b>WindowsDuplicateString</b> (or one of the helper functions
    that creates a string) should be matched to exactly one
    call to <b>WindowsDeleteString</b> which is passed the same handle
    that <b>WindowsCreateString</b> or <b>WindowsDuplicateString</b>
    returned.
</ul>
<p>
You can think of fast-pass strings as lazy-heap-allocated strings:
They get copied to the heap only if somebody needs to extend the
lifetime of the string beyond the lifetime of the function.
</p>
<p>
The WRL library has wrapper classes for <code>HSTRING</code>s:
The <code>HString</code> class manages an <code>HSTRING</code>,
and the <code>HStringReference</code> manages a fast-pass
<code>HSTRING</code>.
</p>
<p>
&sup1; In theory, a debugging version of the
<b>WindowsDuplicateString</b> function could
create a full duplicate of the string anyway.
That way, when you have an <code>HSTRING</code> leak,
you can use heap leak tools to find the code that
duplicated the string and failed to destroy it.
I don't know if this theory actually occurs in practice.
</p>
<p>
&sup2; COM violates its own rule with the
<code>Co&shy;Get&shy;Interface&shy;And&shy;Release&shy;Stream</code>
function,
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20151023-00/?p=91291">
and that lapse came back to bite us</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1252755">
				<div id="div-comment-1252755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Vine [MSFT]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160615-00/?p=93675#comment-1252755">
			June 15, 2016 at 8:17 am</a>		</div>

		<p>Interestingly, docs for WindowsDuplicateString say it can only succeed or fail if the input argument for the output HSTRING* was nullptr. This makes it hard to fail if out-of-memory happens which it seems could happen if the input string was fast-pass (?). I assume this is a doc bug and logged as so.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-chris_guzak odd alt depth-2" id="comment-1253525">
				<div id="div-comment-1253525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Chris+Guzak' rel='external nofollow' class='url'>Chris Guzak</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160615-00/?p=93675#comment-1253525">
			June 22, 2016 at 3:53 pm</a>		</div>

		<p>Yes, doc bug.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1252805">
				<div id="div-comment-1252805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Govert van Drimmelen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160615-00/?p=93675#comment-1252805">
			June 15, 2016 at 3:43 pm</a>		</div>

		<p>I&#8217;m curious about the CLR projection for WinRT which maps HSTRING  System.String. There are some WindowsCreateStringReference calls in the coreclr code, but I&#8217;ve not found any guidelines to help understand when WinRT interop will make copies of string contents, going either way. Will calling an API like Windows.Storage.FileIO.ReadLinesAsync copy the strings an extra time when called from .NET?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-even depth-1" id="comment-1252825">
				<div id="div-comment-1252825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160615-00/?p=93675#comment-1252825">
			June 15, 2016 at 5:11 pm</a>		</div>

		<p>In some ways the fast-pass concept also exists in the COM/BSTR world where it is not uncommon to see code that does pBrowser-&gt;Navigate((BSTR)L&#8221;http://example.com&#8221;,&#8230;). This is not correct code but I suspect the functions in question have to allow it for compatibility because their initial implementation just treated it as a LPCWSTR. I assume a HSTRING is very similar to a BSTR except that it does not point directly to the wide string because the ABI has already been down that road.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command even thread-odd thread-alt depth-1" id="comment-1252845">
				<div id="div-comment-1252845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160615-00/?p=93675#comment-1252845">
			June 16, 2016 at 1:17 am</a>		</div>

		<p>Hey, you fixed the random line break problem! :)</p>
<p>[<i>I fixed nothing. It was a server problem. The server team fixed it. -Raymond</i>]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1252895">
				<div id="div-comment-1252895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160615-00/?p=93675#comment-1252895">
			June 16, 2016 at 5:53 pm</a>		</div>

		<p>1. WindowsPreallocateStringBuffer(0, &#8230;) returns the same empty stock char array as WindowsGetStringRawBuffer(0, 0) returns.</p>
<p>However, the MSDN documentation for WindowsPreallocateStringBuffer says &#8220;You must ensure that mutableBuffer ends in a terminating NUL character&#8221;.</p>
<p>Does the documentation mean &#8220;only in the call to WindowsPromoteStringBuffer&#8221; or &#8220;at all times&#8221;?</p>
<p>If it means &#8220;only in the call to WindowsPromoteStringBuffer&#8221; then it implies that I can overwrite the NUL character of the empty stock char array except until I pass it to WindowsPromoteStringBuffer.</p>
<p>If it means &#8220;at all times&#8221; then it implies that I can overwrite the NUL character as long as it&#8217;s the NUL character. But it turns out that the empty stock char array located in read only memory and you get an access violation if you try to do that.</p>
<p>I think the MSDN documentation should be updated rather than the API changed to allow for the above.</p>
<p>2. The documentation for WindowsPreallocateStringBuffer says it allows bufferHandle to be NULL if length is 0 but the actual implementation will result in an error if you do that. Is this a documentation error or an implementation error?</p>
<p>3. The documentation for WindowsGetStringRawBuffer says the return value is &#8220;the empty string if string is NULL or the empty string.&#8221; But I thought NULL was the empty string. I think it should be reworded to something akin to &#8220;the stock empty string if string is NULL.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

