<html>
<head>
<title>Ready... cancel... wait for it! (part 2)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Ready&#8230; cancel&#8230; wait for it! (part 2)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 3, 2011 / year-entry #25</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110203-00/?p=11603</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer had a question about I/O cancellation. They have a pending Read­File­Ex call with a completion procedure. They then cancel the I/O with Cancel­Io­Ex and wait for the completion by passing TRUE as the bWait parameter to Get­Overlapped­Result. Assuming both return success, can I assume that my completion procedure will not be called after...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer had a question about I/O cancellation. They have a pending <code>Read&shy;File&shy;Ex</code> call with a completion procedure. They then cancel the I/O with <code>Cancel&shy;Io&shy;Ex</code> and wait for the completion by passing <code>TRUE</code> as the <code>bWait</code> parameter to <code>Get&shy;Overlapped&shy;Result</code>.</p>
<blockquote class="q"><p> Assuming both return success, can I assume that my completion procedure will not be called after GetOverlappedResult returns? It appears that GetOverlappedResult waits non-alertably for the I/O to complete, so I'm assuming it just eats the APC if there was one. But if an APC had been posted just before I called CancelIoEx, will it also cancel that APC? </p>
</blockquote>
<p> <code>Get&shy;Overlapped&shy;Result</code> does not magically revoke completion callbacks. Why should it? </p>
<p> Recall that completion is not the same as success. Completion means that the I/O subsystem has closed the books on the I/O operation. The underlying operation may have completed successfully or it may have failed (and cancellation is just one of the many possible reasons for failure). Either way, the completion procedure signed up to be notified when the I/O completes, and therefore it will be called to be informed of the completion due to cancellation. </p>
<p> Besides, as the customer noted, there is a race condition if the <code>Cancel&shy;Io&shy;Ex</code> call is made just after the I/O completed, in which case it didn't get cancelled after all. </p>
<p> This answers our question from last time, namely, <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/02/02/10123392.aspx"> how our fix for the cancellation code was incomplete</a>. If the I/O had been issued with a completion routine (or equivalently, if it had been issued against an I/O completion port), then the code frees the <code>OVERLAPPED</code> structure before the completion routine runs. The kernel doesn't care that you did that (the kernel is finished with the <code>OVERLAPPED</code> structure), but your completion routine is probably not going to be happy that it was given a pointer to freed memory as its <code>lpOverlapped</code> parameter. </p>
<p> You have to delay freeing the <code>OVERLAPPED</code> structure until the completion routine executes. Typically, this is done by allocating the <code>OVERLAPPED</code> structure on the heap rather than the stack, and making it the completion routine's responsibility to free the memory as its final act. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-893043">
				<div id="div-comment-893043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110203-00/?p=11603#comment-893043">
			February 3, 2011 at 9:25 am</a>		</div>

		<p>Don&#39;t be discouraged by the lack of comments.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-893063">
				<div id="div-comment-893063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110203-00/?p=11603#comment-893063">
			February 3, 2011 at 9:45 am</a>		</div>

		<p>@Joshua: Agreed. &nbsp;Apparently silence around here is a perverse form of approval?</p>
<p>Anyway, while best practice would be heap allocate the OVERLAPPED structure, stack allocation isn&#39;t out of the question. &nbsp;The problem with stack allocation, of course, is that the function where the OVERLAPPED struct is stack-allocated must not return until after the cancellation is complete. &nbsp;As proposed in comments to the previous article, using an alertable wait on hEvent in a loop along with the completion routing signaling the hEvent member would be sufficient. &nbsp;Certainly, however, heap allocation works better with less complicated code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-893093">
				<div id="div-comment-893093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110203-00/?p=11603#comment-893093">
			February 3, 2011 at 9:55 am</a>		</div>

		<p>Um&#8230; GetOverlappedResult doesn&#39;t support IOs issued by ReadFileEx/WriteFileEx AT ALL. The whole point is moot.</p>
<p>Semantics of ReadFileEx doesn&#39;t involve setting any event you can wait for or GetOverlappedResult can check for. Doesn&#39;t even involve setting the signalled state of FILE_OBJECT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-893103">
				<div id="div-comment-893103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Actually</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110203-00/?p=11603#comment-893103">
			February 3, 2011 at 10:04 am</a>		</div>

		<p>Funny how when Raymond posts anything remotely involved, the old &quot;look at me, I&#39;m smarter than Micro$oft crowd&quot; goes mute. Very indicative of a fundamental inability to comprehend the post by the general nitpicker population here. But don&#39;t worry you&#39;ll get at least 40 posts when Raymond has a spelling error. LOL</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-893113">
				<div id="div-comment-893113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110203-00/?p=11603#comment-893113">
			February 3, 2011 at 10:06 am</a>		</div>

		<p>@Alex Grigoriev</p>
<p>You are correct that GetOverlappedResult() is unusable, but WaitForSingleObjectEx() could be used in conjunction with manually firing the hEvent member of the OVERLAPPED structure. &nbsp;Just because ReadFileEx() doesn&#39;t fire hEvent doesn&#39;t mean that the completion function couldn&#39;t fire hEvent itself. &nbsp;Once the completion function finishes (having fired hEvent), WaitForSingleObjectEx() would return (because of the APC completion), at which point the loop would restart and then WaitForSingleObjectEx() would return immediately because hEvent had been fired.</p>
<p>As I said previously, it&#39;s messy, but workable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-893183">
				<div id="div-comment-893183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110203-00/?p=11603#comment-893183">
			February 3, 2011 at 9:15 pm</a>		</div>

		<p>Are you using some unicode characters in your formatting? I noticed that when I copied CancelÂ­IoÂ­Ex into MSDN search (curious about the function) it only returned a match for this post. If I paste into notepad I see &quot;Cancel-Io-Ex&quot;. Manually typing in the function name displayed the expected page of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-893193">
				<div id="div-comment-893193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110203-00/?p=11603#comment-893193">
			February 4, 2011 at 1:51 am</a>		</div>

		<p>@Actually: This is apparently called a bike-shed discussion: <a rel="nofollow" target="_new" href="http://www.unixguide.net/freebsd/faq/16.19.shtml" rel="nofollow">http://www.unixguide.net/&#8230;/16.19.shtml</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-893203">
				<div id="div-comment-893203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">yekop</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110203-00/?p=11603#comment-893203">
			February 4, 2011 at 2:03 am</a>		</div>

		<p>@Scott: It appears to be a 0x00AD &quot;soft hyphen&quot;: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/michkap/archive/2006/09/02/736881.aspx" rel="nofollow">blogs.msdn.com/&#8230;/736881.aspx</a></p>
<p>(sorry if this double-posts, nothing happened when I clicked &quot;post&quot; the first time..)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-893483">
				<div id="div-comment-893483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110203-00/?p=11603#comment-893483">
			February 4, 2011 at 10:35 pm</a>		</div>

		<p>@yekop That explains the &quot;Sometimes rendered as a hyphen&quot; behavior. I was wondering why the Bing search didn&#39;t ignore it if it was a non-printable character.</p>
<p>Such articles make me glad I never became a Unicode guru.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

