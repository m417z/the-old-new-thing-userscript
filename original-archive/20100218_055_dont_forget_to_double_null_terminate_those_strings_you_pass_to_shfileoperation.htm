<html>
<head>
<title>Don't forget to double-null-terminate those strings you pass to SHFileOperation</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Don&#8217;t forget to double-null-terminate those strings you pass to SHFileOperation</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 18, 2010 / year-entry #56</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>30</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">About once every two months for the past six months (I stopped checking further back), somebody reports a problem with the SHFileOperation function. Often, they don't include very much information at all. They just say, "I call the function and it doesn't work." Here's an example: I'm hitting a problem with SHFileOperation when using it...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
About once every two months for the past six months
(I stopped checking further back),
somebody reports a problem with the
<code>SHFileOperation</code> function.
Often, they don't include very much information at all.
They just say, "I call the function and it doesn't work."
Here's an example:
</p>
<blockquote CLASS=m>
<p>
I'm hitting a problem with <code>SHFileOperation</code>
when using it to frob files in the gonzo directory
when the user's SID ends in an odd number.
</p>
<pre>
    //
    // Delete the file.
    // szDeletePath contains the full path to the file.
    //
    shFileOp.hwnd = NULL;
    shFileOp.wFunc = FO_DELETE;
    shFileOp.pFrom = szDeletePath;
    shFileOp.pTo = NULL;
    shFileOp.fFlags = FOF_NO_UI;
    iRet = SHFileOperation( &amp;shFileOp );
</pre>
<p>
The function returns file not found, but the file
is definitely there.
</p>
</blockquote>
<p>
If you read the variable names carefully, you can see the problem.
</p>
<p>
The <code>pFrom</code> and <code>pTo</code> members of the
<code>SHFILEOPSTRUCT</code> structure are
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2009/10/08/9904646.aspx">
double-null-terminated strings</a>.
(There's even a callout box for this in the MSDN documentation.)
But a variable named <code>szDeletePath</code> is probably
a single-null-terminated string.
(The name for a double-null-terminated string would be
<code>szzDeletePath</code>.)
</p>
<blockquote CLASS=m><p>
My psychic powers tell me that
<code>szDeletePath</code> is not double-null-terminated.
</p>
</blockquote>
<p>
So far, my psychic powers haven't failed.
</p>
<p>
Now, you might say that the fact that people make this mistake
so often is a sign that the function is flawed.
And if the function were designed today, I would agree with you.
But this function in its public form is over fifteen years old
(and in its private form, is around 20 years old),
and back in those days,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/10/21/483438.aspx">
programmers were assumed to have the time to understand the subtleties
of what they were doing</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (30)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-matteo even thread-even depth-1" id="comment-812863">
				<div id="div-comment-812863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-812863">
			February 18, 2010 at 7:08 am</a>		</div>

		<p>Hooray! The Hungarian notation at least once has been useful! Don&#8217;t miss the next time this will happen, at the next blue moon!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-812873">
				<div id="div-comment-812873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://johntopley.com/' rel='external nofollow' class='url'>John Topley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-812873">
			February 18, 2010 at 7:25 am</a>		</div>

		<p>Did SHFileOperation debut in its private form in Windows 3.x or Windows NT 3.x then? I&#8217;d always assumed that the SH* APIs were new for Windows 95.</p>
<div class=post>[<i>Not sure what your point is. Yes, before it made its public debut, SHFileOperation was a private function. (Didn&#8217;t I basically already say this in the article?) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-812883">
				<div id="div-comment-812883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-812883">
			February 18, 2010 at 7:25 am</a>		</div>

		<p>Really, makes you appreciate .NET, where people finally got around to a decent String[] type. And strong typing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-812893">
				<div id="div-comment-812893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-812893">
			February 18, 2010 at 8:11 am</a>		</div>

		<p>@Marquess: Except most parts of the .NET libraries don&#8217;t support paths longer than MAX_PATH, so System.IO becomes of limited use and you have to fall back to the win32 functions.</p>
<p>It&#8217;s an irritating weakness &#8211; and if it were changed, suddenly a whole bunch of software would pseudo-magically support long paths. But, as ever, there are probably backwards compatibility issues.</p>
<div class=post>[<i>For example, extending beyond MAX_PATH means that &#8220;foo&#8221; and &#8220;foo.&#8221; (trailing dot) and &#8221;&nbsp;foo&nbsp;&#8221; (leading and trailing space) are no longer the same file. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-812903">
				<div id="div-comment-812903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-812903">
			February 18, 2010 at 8:44 am</a>		</div>

		<p>MAX_PATH: 260 characters.</p>
<p>NTFS file name limit: 255 characters.</p>
<p>Did nobody think that this might become a problem, back in 1993? No CreateFileEx?</p>
<div class=post>[<i>Of course somebody thought of it, but there are also arguments against setting MAX_PATH too high. E.g., stack buffers. (In Win16, MAX_PATH was 64, and it became common to put path buffers on the stack.) I&#8217;m always impressed by people who view engineering decisions in black and white. (Like an idiot, I&#8217;m prolonging the off-topic discussion instead of just deleting it.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-812913">
				<div id="div-comment-812913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Boris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-812913">
			February 18, 2010 at 9:07 am</a>		</div>

		<p>How would you design it today given the same language limitations (no .NET)? Require to specify a length to the string you&#8217;re passing? Separate file names by some other character? What if teat character because valid in a future file system?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-812953">
				<div id="div-comment-812953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">googly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-812953">
			February 18, 2010 at 11:07 am</a>		</div>

		<p>@Marquees: CreateFileW.</p>
<p>Use &quot;&#92;?\C:\very_long_path_to_file.ext&quot; or &quot;&#92;UNC\very_long_path_to_file.ext&quot;</p>
<p>File name canonicalization will be turned off though, so you have to perform that yourself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-812963">
				<div id="div-comment-812963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tadmas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-812963">
			February 18, 2010 at 11:26 am</a>		</div>

		<p>@Boris: If we had a time machine and redesigned the function, you could change the member from LPCTSTR to LPCTSTR* with an additional count member. &nbsp;At least that way if you try to pass a simple string without reading the documentation, the compiler complains.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-812973">
				<div id="div-comment-812973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-812973">
			February 18, 2010 at 11:28 am</a>		</div>

		<p>Simple debugging of this using Process Monitor would have revealed the FILE_NOT_FOUND generated on a query of the second filename, which would have been garbage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-812983">
				<div id="div-comment-812983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter da Silva</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-812983">
			February 18, 2010 at 11:39 am</a>		</div>

		<p>20 years ago isn&#8217;t so long. This function is screaming for a null-terminated vector of string pointers, which has been pretty much the normal way to pass an array of strings in C since, oh, the early &#8217;70s. About the only time I can recall seeing a double-null-terminated array since I&#8217;ve been writing in C is in implementation-dependent internals of the way crt0.o reconstructs argv on the PDP-11. In 1978 or 79.</p>
<p>But then I&#8217;m an unreconstructed oldschool type who doesn&#8217;t see anything wrong with &quot;foo&quot; and &quot;foo.&quot; being different files. So what do I know.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-812993">
				<div id="div-comment-812993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-812993">
			February 18, 2010 at 11:50 am</a>		</div>

		<p>@googly:</p>
<p>Yeah, I&#8217;m aware of this. But as you pointed out, you have to canonicalize the file name yourself, and the OS itself could do that best. Now if there were a function for that &#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-813003">
				<div id="div-comment-813003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-813003">
			February 18, 2010 at 11:56 am</a>		</div>

		<p>It is my opinion that just because something has been wrong for 15 (or 20) years does not make it any less wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-813013">
				<div id="div-comment-813013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kv3</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-813013">
			February 18, 2010 at 12:27 pm</a>		</div>

		<p>@steve</p>
<p>I think what Raymond is saying is that while it may seem like a mistake now, it was considered fine back then. And anyway, changing it now would just break backwards compatibility(and annoy the people who already know how to properly use it) for no good reason. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-813023">
				<div id="div-comment-813023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Duke of New York</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-813023">
			February 18, 2010 at 12:36 pm</a>		</div>

		<p>20 years ago is a d&#8212; long time. Think about the computer specs that were available then.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-813033">
				<div id="div-comment-813033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Christian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-813033">
			February 18, 2010 at 12:45 pm</a>		</div>

		<p>double null terminated strings are great and efficient and I wrote new code using them last year</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-813043">
				<div id="div-comment-813043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-813043">
			February 18, 2010 at 12:53 pm</a>		</div>

		<p>Null-terminated strings are painfully inefficient. Finding the length of a string is an O(n) operation. It really should be O(1). And that&#8217;s only one of their problems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-813053">
				<div id="div-comment-813053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sideh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-813053">
			February 18, 2010 at 1:31 pm</a>		</div>

		<p>Steve, it sounds like you have the time machine that Raymond keeps talking about.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-813063">
				<div id="div-comment-813063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-813063">
			February 18, 2010 at 2:26 pm</a>		</div>

		<p>I remember the old Shell: Revealed blog mentioning this, seems like it is gone now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-813073">
				<div id="div-comment-813073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-813073">
			February 18, 2010 at 5:25 pm</a>		</div>

		<p>Yeah&#8230; It made me wonder why they don&#8217;t just use something like Pascal string for paths, back in the days when I first learn about Win16 APIs&#8230; (And yes, the programming language we were taught in school is Pascal&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-813083">
				<div id="div-comment-813083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-813083">
			February 18, 2010 at 5:25 pm</a>		</div>

		<p>It&#8217;s not a double-null-terminated string, darn it.</p>
<p>It&#8217;s an empty-string-terminated list of strings.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-813113">
				<div id="div-comment-813113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Will</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-813113">
			February 18, 2010 at 8:49 pm</a>		</div>

		<p>@googly</p>
<p>For long UNC paths you should use:</p>
<p>&quot;&#92;?\UNC&#91;servername][path]&quot;</p>
<p>Note that you can&#8217;t use DIR from CMD on that type of long path for some reason, though it works fine for the non-UNC long path version.</p>
<p>The error being: The filename, directory name, or volume label syntax is incorrect.</p>
<p>Not sure why DIR fails there since you can use FindFirstFile()/FindNextFile() just fine with that type of path (at least on Windows 7). Also not sure where a built-in canonicalization API is that can handle those long paths (I read the documentation, I know that the prefix turns it off, but is there something that can handle it maybe that you can call manually that won&#8217;t blow up because the path is too long? people doing their own canonicalization logic seems prone to failure).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-813133">
				<div id="div-comment-813133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Christian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-813133">
			February 18, 2010 at 11:18 pm</a>		</div>

		<p>I never need to get the number of strings in my double null terminated lists. I only traverse them. And enjoy freeing only one pointer. And there they are very efficient: malloc and free aren&#8217;t free, you know? They add several bytes of management data and fragment the heap.</p>
<p>I just need to free one pointer to free the list.</p>
<p>I even allocate memory for the filesize of a file with entries and then walk through the data once to remove e.g. newlines or filtered entries. At the end my destination pointer stops in the middle of the data and the rest is dead memory. But that doesn&#8217;t matter, soon the whole memery block will be discarded anyway</p>
<p>Other parts of the code are using .net and not c&#8230;</p>
<p>But I really believe that if you just need to traverse through lists of strings and then just need to traverse through the characters in these strings, that this data structure is very very efficient. Not just O(1), but only one traversal at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-813153">
				<div id="div-comment-813153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Christian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-813153">
			February 19, 2010 at 12:39 am</a>		</div>

		<blockquote><p>
  It&#8217;s not a double-null-terminated string, darn it.</p>
<p>  It&#8217;s an empty-string-terminated list of strings.
</p></blockquote>
<p>They are actually differnet formats.</p>
<p>That was discussed last time Raymond brought this format up (also the efficiency, especially with win16): It&#8217;s a common mistake to encode an empty list as    or to require it that way. But it surely is more safe to terminate it with two   all the time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-813173">
				<div id="div-comment-813173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://johntopley.com/' rel='external nofollow' class='url'>John Topley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-813173">
			February 19, 2010 at 2:10 am</a>		</div>

		<p>@Raymond I wasn&#8217;t making a point, I was just interested because of find the history of Windows interesting; that&#8217;s why I visit your site. Next time I won&#8217;t bother asking.</p>
<div class=post>[<i>I didn&#8217;t understand what your point was because you were asking a question that was already answered in the article&#8230; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-813453">
				<div id="div-comment-813453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">The Other Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-813453">
			February 19, 2010 at 11:12 am</a>		</div>

		<p>Double-null terminated strings are an invention of the Gods themselves. Compact and easy to parse; who can&#8217;t love em?</p>
<p>Mike reminded me of something that has cracked me up for a long time. People who insist on checking error returns on functions that if they do fail mean you system is so screwed up there&#8217;s nothing you can do about it anyway. (Heck, even I do it sometimes and cackle evilly while doing so.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-813183">
				<div id="div-comment-813183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-813183">
			February 19, 2010 at 4:26 am</a>		</div>

		<p>The odd thing is that few Windows APIs need to care about how long the string could be. Those that simply take a path as an input parameter &#8211; basically just CreateFile &#8211; could be modified so that the programmer could provide a non-canonical long path.</p>
<p>On the other side, most functions that *provide* a path have a parameter indicating the size of the buffer that was provided. There are a few that don&#8217;t &#8211; GetTempFileName is one that I can think of, off the top of my head. A major one is the WIN32_FIND_DATA structure used by FindFirstFile(Ex), though IIRC this only gives the file name, not the full path. But I don&#8217;t think it would be too problematic, in the main, to modify the Win32 functions to support longer paths than the classic definition of MAX_PATH.</p>
<p>However, many programs &#8211; even most &#8211; may have assumed they will never get anything bigger than MAX_PATH and so they may well not handle the errors that would occur if asking for the path of a file that&#8217;s longer than that. I admit that I do generally assume that GetModuleFileName(NULL) will not fail. It might be too large a set of programs to allow them to opt out through compatibility shims &#8211; it might have to be opt-in and even then it would be risky.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-813573">
				<div id="div-comment-813573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-813573">
			February 19, 2010 at 3:04 pm</a>		</div>

		<p>It seems like John Topley was attempting to discern which version of Windows first privately used this API. Since that information was definitely not in the article, his post makes sense.</p>
<div class=post>[<i>I omitted the details from the article on purpose. It&#8217;s not relevant to the story, and it hardly takes any effort to figure out what version of Windows publically supported SHFileOperation or what version of Windows preceded it. It&#8217;s the sort of comment I would have expected from Yuhong Bao. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-813853">
				<div id="div-comment-813853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aneurin Price</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-813853">
			February 22, 2010 at 4:54 am</a>		</div>

		<p>Raymond: &lt;implies that ShFoo is present as a private function in version X&gt;</p>
<p>Poster: Oh, that&#8217;s interesting &#8211; I thought the ShXXX functions were only present in version Y. Was I wrong then?</p>
<p>Raymond: &lt;overflowing contempt&gt;</p>
<p>It upsets me to see people treating each other so badly, especially when there is no reason for it.</p>
<p>Please trying to remember that you are talking to actual people; if somebody expresses interest in something you find boring, isn&#8217;t it better to ignore it than to ridicule it?</p>
<div class=post>[<i>The problem is that he was playing &#8220;out the function&#8221;, something that is explicitly forbidden by the ground rules. The vagueness was intentional. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-813863">
				<div id="div-comment-813863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://johntopley.com/' rel='external nofollow' class='url'>John Topley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-813863">
			February 22, 2010 at 7:14 am</a>		</div>

		<p>@Gabe, @Aneurin Don&#8217;t worry, Raymond just lost a reader, although I doubt he&#8217;s bothered since he seems to find people who comment on his posts a nuisance anyway.</p>
<div class=post>[<i>Over the years I have been unfortunately become biased towards assuming that commenters are trying to prove something/boost their egos/be snarky/nitpicky, because annoying people are more likely to comment than friendly people. Sorry you got caught in the dragnet. (Fortunately this attribute of blog commenters doesn&#8217;t appear to apply in face-to-face communications.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-814133">
				<div id="div-comment-814133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://johntopley.com/' rel='external nofollow' class='url'>John Topley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100218-00/?p=14893#comment-814133">
			February 23, 2010 at 1:09 am</a>		</div>

		<p>Hi Raymond,</p>
<p>Don&#8217;t worry about it. I have seen some of the other commenters that you attract on here, so I do understand why you assume that.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

