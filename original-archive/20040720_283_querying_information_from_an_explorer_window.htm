<html>
<head>
<title>Querying information from an Explorer window</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Querying information from an Explorer window</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 20, 2004 / year-entry #284</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>37</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Sometimes software development is inventing new stuff. But often, it's just putting together the stuff you already have. Today's puzzle is one of the latter type of problem. Given a window handle, you can you determine (1) whether it is an Explorer window, and if so (2) what folder it is viewing, and (3) what item is currently...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Sometimes software development is inventing new stuff.
But often, it's just putting together the stuff you already have.
Today's puzzle is one of the latter type of problem.
</p>
<p>
Given a window handle, you can you determine (1)&nbsp;whether it is
an Explorer window, and if so (2)&nbsp;what folder it is viewing, and
(3)&nbsp;what item is currently focused.
</p>
<p>
This is not an inherently difficult task.
You just have to put together lots of small pieces.
</p>
<p>
Start with
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/objects/shellwindows/shellwindows.asp">
the ShellWindows object</a>
which represents all the open shell windows.
You can enumerate through them all with
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/objects/shellwindows/item.asp"
>the Item property</a>.
This is rather clumsy from C++ because the ShellWindows object
was designed for use by a scripting language like JScript or Visual Basic.
</p>
<pre>
 IShellWindows *psw;
 if (SUCCEEDED(CoCreateInstance(CLSID_ShellWindows, NULL, CLSCTX_ALL,
                                IID_IShellWindows, (void**)&amp;psw))) {
  VARIANT v;
  V_VT(&amp;v) = VT_I4;
  IDispatch  *pdisp;
  BOOL fFound = FALSE;
  for (V_I4(&amp;v) = 0; !fFound && psw-&gt;Item(v, &amp;pdisp) == S_OK;
       V_I4(&amp;v)++) {
    ...
    pdisp->Release();
  }
  psw-&gt;Release();
 }
</pre>
<p>
From each item, we can ask it for its window handle and see if it's the one
we want.</p>
<pre>
   IWebBrowserApp *pwba;
   if (SUCCEEDED(pdisp-&gt;QueryInterface(IID_IWebBrowserApp, (void**)&amp;pwba))) {
     HWND hwndWBA;
     if (SUCCEEDED(pwba-&gt;get_HWND((LONG_PTR*)&amp;hwndWBA)) &amp;&amp;
       hwndWBA == hwndFind) {
       fFound = TRUE;
       ...
     }
     pwba-&gt;Release();
   }
</pre>
<p>
Okay, now that we have found the folder via its IWebBrowserApp,
we need to get to the top shell browser.  This is done by
querying for the SID_STopLevelBrowser service and asking for
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/IShellBrowser/IShellBrowser.asp">
the IShellBrowser interface</a>.
</p>
<pre>
       IServiceProvider *psp;
       if (SUCCEEDED(pwba-&gt;QueryInterface(IID_IServiceProvider, (void**)&amp;psp))) {
         IShellBrowser *psb;
         if (SUCCEEDED(psp-&gt;QueryService(SID_STopLevelBrowser,
                              IID_IShellBrowser, (void**)&amp;psb))) {
           ...
           psb-&gt;Release();
         }
         psp-&gt;Release();
       }
</pre>
<p>
From the IShellBrowser, we can ask for the current shell view
via
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/ishellbrowser/queryactiveshellview.asp">
the QueryActiveShellView method</a>.
</p>
<pre>
           IShellView *psv;
           if (SUCCEEDED(psb-&gt;QueryActiveShellView(&amp;psv))) {
             ...
             psv-&gt;Release();
           }
</pre>
<p>
Of course, what we really want is
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/ifolderview/ifolderview.asp">
the IFolderView interface</a>,
which is the automation object that contains all the real goodies.
</p>
<pre>
             IFolderView *pfv;
             if (SUCCEEDED(psv-&gt;QueryInterface(IID_IFolderView,
                                               (void**)&amp;pfv))) {
               ...
               pfv-&gt;Release();
             }
</pre>
<p>
Okay, now we're golden.  What do you want to get from the view?
How about the location of the IShellFolder being viewed.
To do that, we need to use
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/ipersistfolder2/ipersistfolder2.asp">
IPersistFolder2</a>::<a
HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/ipersistfolder2/getcurfolder.asp">GetCurFolder</a>.
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/ifolderview/getfolder.asp">
The GetFolder method</a> will give us access to the shell folder,
from which we ask for IPersistFolder2.
(Most of the time you want the IShellFolder interface,
since that's where most of the cool stuff hangs out.)
</p>
<pre>
               IPersistFolder2 *ppf2;
               if (SUCCEEDED(pfv-&gt;GetFolder(IID_IPersistFolder2,
                                            (void**)&amp;ppf2))) {
                 LPITEMIDLIST pidlFolder;
                 if (SUCCEEDED(ppf2-&gt;GetCurFolder(&amp;pidlFolder))) {
                   ...
                   CoTaskMemFree(pidlFolder);
                 }
                 ppf2-&gt;Release();
               }
</pre>
<p>
Let's convert that <code>pidl</code> into a path, for display purposes.
</p>
<pre>
                   if (!SHGetPathFromIDList(pidlFolder, g_szPath)) {
                     lstrcpyn(g_szPath, TEXT("&lt;not a directory&gt;"), MAX_PATH);
                   }
                   ...
</pre>
<p>
What else can we do with what we've got?  Oh right, let's see what the
currently-focused object is.
</p>
<pre>
                   int iFocus;
                   if (SUCCEEDED(pfv-&gt;GetFocusedItem(&amp;iFocus))) {
                     ...
                   }
</pre>
<p>
Let's display the name of the focused item.
To do that we need the item's pidl and the IShellFolder.
(See, I told you the IShellFolder is where the cool stuff is.)
The item comes from
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/ifolderview/item.asp">
the Item method</a> (surprisingly enough).
</p>
<pre>
                     LPITEMIDLIST pidlItem;
                     if (SUCCEEDED(pfv-&gt;Item(iFocus, &amp;pidlItem))) {
                       ...
                       CoTaskMemFree(pidlItem);
                     }
</pre>
<p>
(If we had wanted a list of selected items we could have used
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/ifolderview/items.asp">
the Items method</a>, passing SVGIO_SELECTION.)
</p>
<p>
After we get the item's pidl, we also need the IShellFolder:
</p>
<pre>
                       IShellFolder *psf;
                       if (SUCCEEDED(ppf2-&gt;QueryInterface(IID_IShellFolder,
                                                          (void**)&amp;psf))) {
                         ...
                         psf-&gt;Release();
                       }
</pre>
<p>
Then we put the two together to get the item's display name,
with the help of
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/ishellfolder/getdisplaynameof.asp">
the GetDisplayNameOf method</a>.
</p>
<pre>
                         STRRET str;
                         if (SUCCEEDED(psf-&gt;GetDisplayNameOf(pidlItem,
                                                   SHGDN_INFOLDER,
                                                   &amp;str))) {
                           ...
                         }
</pre>
<p>
We can use the helper function
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/shlwapi/string/strrettobuf.asp">
StrRetToBuf</a> to convert the kooky
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/structures/strret.asp">
STRRET structure</a> into
a boring string buffer.
(The history of the kooky STRRET structure will have to wait for
another day.)
</p>
<pre>
                           StrRetToBuf(&amp;str, pidlItem, g_szItem, MAX_PATH);
</pre>
<p>
Okay, let's put this all together.
It looks rather ugly because I put everything into one huge
function instead of breaking them out into subfunctions.
In "real life" I would have broken things up into little helper
functions to make things more manageable.
</p>
<p>
Start with
<a href="http://weblogs.asp.net/oldnewthing/archive/2003/07/23/54576.aspx">the
scratch program</a> and add this new function:
</p>
<pre>
#include &lt;shlobj.h&gt;
#include &lt;exdisp.h&gt;

TCHAR g_szPath[MAX_PATH];
TCHAR g_szItem[MAX_PATH];

void CALLBACK RecalcText(HWND hwnd, UINT, UINT_PTR, DWORD)
{
 HWND hwndFind = GetForegroundWindow();
 g_szPath[0] = TEXT('\0');
 g_szItem[0] = TEXT('\0');

 IShellWindows *psw;
 if (SUCCEEDED(CoCreateInstance(CLSID_ShellWindows, NULL, CLSCTX_ALL,
                                IID_IShellWindows, (void**)&amp;psw))) {
  VARIANT v;
  V_VT(&amp;v) = VT_I4;
  IDispatch  *pdisp;
  BOOL fFound = FALSE;
  for (V_I4(&amp;v) = 0; !fFound && psw-&gt;Item(v, &amp;pdisp) == S_OK;
       V_I4(&amp;v)++) {
   IWebBrowserApp *pwba;
   if (SUCCEEDED(pdisp-&gt;QueryInterface(IID_IWebBrowserApp, (void**)&amp;pwba))) {
     HWND hwndWBA;
     if (SUCCEEDED(pwba-&gt;get_HWND((LONG_PTR*)&amp;hwndWBA)) &amp;&amp;
       hwndWBA == hwndFind) {
       fFound = TRUE;
       IServiceProvider *psp;
       if (SUCCEEDED(pwba-&gt;QueryInterface(IID_IServiceProvider, (void**)&amp;psp))) {
         IShellBrowser *psb;
         if (SUCCEEDED(psp-&gt;QueryService(SID_STopLevelBrowser,
                              IID_IShellBrowser, (void**)&amp;psb))) {
           IShellView *psv;
           if (SUCCEEDED(psb-&gt;QueryActiveShellView(&amp;psv))) {
             IFolderView *pfv;
             if (SUCCEEDED(psv-&gt;QueryInterface(IID_IFolderView,
                                               (void**)&amp;pfv))) {
               IPersistFolder2 *ppf2;
               if (SUCCEEDED(pfv-&gt;GetFolder(IID_IPersistFolder2,
                                            (void**)&amp;ppf2))) {
                 LPITEMIDLIST pidlFolder;
                 if (SUCCEEDED(ppf2-&gt;GetCurFolder(&amp;pidlFolder))) {
                   if (!SHGetPathFromIDList(pidlFolder, g_szPath)) {
                     lstrcpyn(g_szPath, TEXT("&lt;not a directory&gt;"), MAX_PATH);
                   }
                   int iFocus;
                   if (SUCCEEDED(pfv-&gt;GetFocusedItem(&amp;iFocus))) {
                     LPITEMIDLIST pidlItem;
                     if (SUCCEEDED(pfv-&gt;Item(iFocus, &amp;pidlItem))) {
                       IShellFolder *psf;
                       if (SUCCEEDED(ppf2-&gt;QueryInterface(IID_IShellFolder,
                                                          (void**)&amp;psf))) {
                         STRRET str;
                         if (SUCCEEDED(psf-&gt;GetDisplayNameOf(pidlItem,
                                                   SHGDN_INFOLDER,
                                                   &amp;str))) {
                           StrRetToBuf(&amp;str, pidlItem, g_szItem, MAX_PATH);
                         }
                         psf-&gt;Release();
                       }
                       CoTaskMemFree(pidlItem);
                     }
                   }
                   CoTaskMemFree(pidlFolder);
                 }
                 ppf2-&gt;Release();
               }
               pfv-&gt;Release();
             }
             psv-&gt;Release();
           }
           psb-&gt;Release();
         }
         psp-&gt;Release();
       }
     }
     pwba-&gt;Release();
   }
    pdisp->Release();
  }
  psw-&gt;Release();
 }
 InvalidateRect(hwnd, NULL, TRUE);
}
</pre>
<p>
Now all we have to do is call this function periodically
and print the results.
</p>
<pre>
BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
    <font COLOR=blue>SetTimer(hwnd, 1, 1000, RecalcText);</font>
    return TRUE;
}

void
PaintContent(HWND hwnd, PAINTSTRUCT *pps)
{
<font COLOR=blue>  TextOut(pps-&gt;hdc, 0, 0, g_szPath, lstrlen(g_szPath));
  TextOut(pps-&gt;hdc, 0, 20, g_szItem, lstrlen(g_szItem));</font>
}
</pre>
<p>
We're ready to roll.  Run this program and set it to the side.
Then launch an Explorer window and watch the program track the folder
you're in and what item you have focused.
</p>
<p>
Okay, so I hope I made my point:
Often, the pieces you need are already there; you just have to
figure out how to put them together.  Notice that each of the
pieces is in itself not very big.  You just had to recognize
that they could be put together in an interesting way.
</p>
<p>
Exercise: Change this program so it takes the folder and
switches it to details view.
</p>
<p>
[Raymond is currently on vacation; this message was pre-recorded.]</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (37)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-196433">
				<div id="div-comment-196433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dr. Jekyll</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196433">
			July 20, 2004 at 7:28 am</a>		</div>

		<p>If everything is so nicely scoped, why not use CComPtr&lt;&gt;s / CComQIPtr&lt;&gt;s ? This very same code would be so much more readable (no ugly QueryInterfaces, Releases, uninitialized variables)&#8230;</p>
<p>Guess it&#8217;s a habit thing.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196443">
				<div id="div-comment-196443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196443">
			July 20, 2004 at 7:35 am</a>		</div>

		<p>I try to avoid using any extra libraries in these articles. If you like those libraries, you can translate raw C++ into your library; but it&#8217;s harder for others to translate a library into raw C++. (For example, I could&#8217;ve used a library to auto-free the pidlFolder, but that would have confused anybody who wasn&#8217;t familiar with that library.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196453">
				<div id="div-comment-196453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A. Reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196453">
			July 20, 2004 at 7:37 am</a>		</div>

		<p>Hideous.  That screams &quot;potential memory leaks!&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196473">
				<div id="div-comment-196473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Cooke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196473">
			July 20, 2004 at 8:17 am</a>		</div>

		<p>That code is hilarious. It&#8217;s stuff like that which really puts me off learning about COM. Fortunately, I&#8217;ve managed to basically ignore COM so far, and if all this .NET stuff becomes popular maybe I can just pretend it never happened. :)</p>
<p>Pleaaase release me, let me gooooooo&#8230;&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196483">
				<div id="div-comment-196483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196483">
			July 20, 2004 at 8:30 am</a>		</div>

		<p>Well, you could easily flatten out that code with a CComPtr class, a CComMemoryHandle class, and a function called GuaranteeSuccess that throws an exception on a bad HRESULT and catch that in the function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196493">
				<div id="div-comment-196493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196493">
			July 20, 2004 at 8:44 am</a>		</div>

		<p>Any reader who wants to make an ATL version of this function is free to do so. It would probably be a lot prettier. But I write in pure C++ in order to avoid arguing over which template library is best.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196503">
				<div id="div-comment-196503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196503">
			July 20, 2004 at 8:51 am</a>		</div>

		<p>cant compile : error C2065: &#8216;StrRetToBuf&#8217; : undeclared identifier</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196533">
				<div id="div-comment-196533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196533">
			July 20, 2004 at 9:39 am</a>		</div>

		<p>Does Explorer lock windows that external clients are looking at (or indeed &lt;em&gt;all&lt;/em&gt; of them while the windows are being enumerated) or is this code vulnerable to race conditions?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196543">
				<div id="div-comment-196543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196543">
			July 20, 2004 at 9:54 am</a>		</div>

		<blockquote><p>
  I try to avoid using any extra libraries in these articles. &lt;</p>
<p>I for one am glad you approach your problems this way.  It shows me what is &quot;really going on&quot;.   Keep up the good work!!
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196553">
				<div id="div-comment-196553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://beust.com/weblog' rel='external nofollow' class='url'>Cedric Beust</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196553">
			July 20, 2004 at 10:27 am</a>		</div>

		<p>I believe the only point you&#8217;ve made is that only   VB or C# should ever be used to access COM :-)</p>
<p>&#8212;<br />
<br />Cedric<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196563">
				<div id="div-comment-196563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">drebin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196563">
			July 20, 2004 at 10:47 am</a>		</div>

		<p>I have a burning sensation in my eyes, is that normal??</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196583">
				<div id="div-comment-196583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196583">
			July 20, 2004 at 12:55 pm</a>		</div>

		<p>Never use goto statements?  I LOVE goto statements :)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196603">
				<div id="div-comment-196603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196603">
			July 20, 2004 at 1:05 pm</a>		</div>

		<p>Zach: Ummm, except now you can&#8217;t use C++ construction/destruction semantics with yoru code&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196613">
				<div id="div-comment-196613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicole DesRosiers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196613">
			July 20, 2004 at 1:14 pm</a>		</div>

		<p>Having had to actually code up a program using a raw dispatch interface in C++, I really appreciate that you wrote this example without libraries.  When I was trying to design my program I nearly tore my hair out trying to translate the things written on MSDN with the wrapper code into raw function calls that were actually useful to me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196633">
				<div id="div-comment-196633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MadHungarian :)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196633">
			July 20, 2004 at 2:23 pm</a>		</div>

		<p>The thing that bugs me is the use of Hungarian notation. &#8216;psf&#8217; doesn&#8217;t say much, &#8216;shellFolder&#8217; does.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196643">
				<div id="div-comment-196643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196643">
			July 20, 2004 at 2:39 pm</a>		</div>

		<p>Zachary: Note however that some of your code goto&#8217;s over variable initialization &#8211; for example if the initial CoCreateInstance fails. This results in the RELEASE trying to use an uninitialized variable.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196653">
				<div id="div-comment-196653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196653">
			July 20, 2004 at 3:49 pm</a>		</div>

		<p>Zachary, you have to make sure that when you make macros you take care to write them correctly.  For instance, this hypothetical code is wrong:<br />
<br />if(&#8211;i == 0) // we have no more use for the object<br />
<br />  RELEASE(pObj);<br />
<br />else<br />
<br />  COM_CALL(pObj-&gt;foo(), finish);</p>
<p>First, because the RELEASE() macro has a semi-colon, you end up with two semi-colons and that&#8217;ll terminate the if statement before the else.  If you remove the extra semi-colon, then the else clause gets attached to the if statement in the macro, and not the if(&#8211;i == 0).</p>
<p>I think the usual way of handling this is to use:<br />
<br />#define RELEASE(ptr)</p>
<p>if (ptr) ptr-&gt;Release(); else</p>
<p>So that the semi-colon at the end of RELEASE(foo); will close the else.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196663">
				<div id="div-comment-196663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196663">
			July 20, 2004 at 4:35 pm</a>		</div>

		<p>Or instead of a macro, you use something like a CComPtr, and to fix the nesting, you do like this:</p>
<p>enum EBadResult<br />
<br />{<br />
<br />  kBadResult<br />
<br />};</p>
<p>void Succeed( HRESULT hr )<br />
<br />{<br />
<br />  if ( !SUCCEEDED(hr) )<br />
<br />  {<br />
<br />    throw kBadResult;<br />
<br />  }<br />
<br />}</p>
<p>&#8230;  then in your code, you can simply do &#8230;</p>
<p>try<br />
<br />{<br />
<br />  Object obj;</p>
<p>  Succeed( incoming-&gt;DoThis( obj.GetPtrPtr() ) );<br />
<br />  Succeed( obj-&gt;DoThisNow() );<br />
<br />}<br />
<br />catch ( EBadResult )<br />
<br />{<br />
<br />  // Do what you need to in order to fail<br />
<br />}</p>
<p>&#8230;  and you will get automatic destruction of the intermediate objects that you didn&#8217;t use.  You write a small amount more code, you get similar ease of use as goto, and much MUCH more robust error handling in the language.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196693">
				<div id="div-comment-196693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Schroedl</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196693">
			July 20, 2004 at 6:25 pm</a>		</div>

		<p>Great post.  Keep &#8217;em coming with more good stuff for the shell!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196573">
				<div id="div-comment-196573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zachary Turner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196573">
			July 20, 2004 at 11:51 am</a>		</div>

		<p>Even in pure C++, better to just stick a label at the bottom and have a goto statement if the COM call fails, rather than use deeper nesting if the call succeeds.</p>
<p>To the poster who said it&#8217;s things like that make you not want to learn COM, it&#8217;s very simple and easy to read as long as you provide an appropriate framework for making it easy to read.  For example, consider the following two macros:</p>
<p>#define COM_CALL(pfn, lbl)<br />
<br />   if (FAILED(pfn)) goto lbl;</p>
<p>#define RELEASE(ptr)<br />
<br />   if (ptr) ptr-&gt;Release();</p>
<p>Now the RecalcText function is as follows:</p>
<p>void CALLBACK RecalcText(HWND hwnd, UINT, UINT_PTR, DWORD)<br />
<br />{<br />
<br />	HWND hwndFind = GetForegroundWindow();<br />
<br />	g_szPath[0] = TEXT(&#8216; &#8217;);<br />
<br />	g_szItem[0] = TEXT(&#8216; &#8217;);</p>
<p>	IShellWindows *psw;<br />
<br />	COM_CALL(CoCreateInstance(CLSID_ShellWindows, NULL, CLSCTX_ALL, IID_IShellWindows, (void**)&amp;psw), finish);</p>
<p>	VARIANT v;<br />
<br />	V_VT(&amp;v) = VT_I4;<br />
<br />	IDispatch  *pdisp;<br />
<br />	BOOL fFound = FALSE;<br />
<br />	for (V_I4(&amp;v) = 0; !fFound &amp;&amp; psw-&gt;Item(v, &amp;pdisp) == S_OK; V_I4(&amp;v)++)<br />
<br />	{</p>
<p>	}</p>
<p>	IWebBrowserApp *pwba = NULL;<br />
<br />	IServiceProvider *psp = NULL;<br />
<br />	IShellBrowser *psb = NULL;<br />
<br />	IShellView *psv = NULL;<br />
<br />	IFolderView *pfv = NULL;<br />
<br />	IPersistFolder2 *ppf2 = NULL;<br />
<br />	LPITEMIDLIST pidlFolder = NULL;<br />
<br />	LPITEMIDLIST pidlItem = NULL;<br />
<br />	IShellFolder *psf = NULL;<br />
<br />	STRRET str;<br />
<br />	COM_CALL(pdisp-&gt;QueryInterface(IID_IWebBrowserApp, (void**)&amp;pwba), finish);<br />
<br />	if (hwndWBA != hwndFind)<br />
<br />		goto finish;<br />
<br />	COM_CALL(pwba-&gt;QueryInterface(IID_IServiceProvider, (void**)&amp;psp), finish);<br />
<br />	COM_CALL(psp-&gt;QueryService(SID_STopLevelBrowser, IID_IShellBrowser, (void**)&amp;psb), finish);<br />
<br />	COM_CALL(psb-&gt;QueryActiveShellView(&amp;psv), finish);<br />
<br />	COM_CALL(psv-&gt;QueryInterface(IID_IFolderView, (void**)&amp;pfv), finish);<br />
<br />	COM_CALL(pfv-&gt;GetFolder(IID_IPersistFolder2, (void**)&amp;ppf2), finish);<br />
<br />	COM_CALL(ppf2-&gt;GetCurFolder(&amp;pidlFolder), finish);</p>
<p>	if (!SHGetPathFromIDList(pidlFolder, g_szPath))<br />
<br />		lstrcpyn(g_szPath, TEXT(&quot;&lt;not a directory&gt;&quot;), MAX_PATH);</p>
<p>	int iFocus;<br />
<br />	COM_CALL(pfv-&gt;GetFocusedItem(&amp;iFocus), finish);<br />
<br />	COM_CALL(pfv-&gt;Item(iFocus, &amp;pidlItem), finish);<br />
<br />	COM_CALL(ppf2-&gt;QueryInterface(IID_IShellFolder, (void**)&amp;psf), finish);<br />
<br />	COM_CALL(psf-&gt;GetDisplayNameOf(pidlItem, SHGDN_INFOLDER, &amp;str), finish);<br />
<br />	StrRetToBuf(&amp;str, pidlItem, g_szItem, MAX_PATH);</p>
<p>finish:<br />
<br />	RELEASE(psf);<br />
<br />	TASK_FREE(pidlItem);<br />
<br />	TASK_FREE(pidlFolder);<br />
<br />	RELEASE(ppf2);<br />
<br />	RELEASE(pfv);<br />
<br />	RELEASE(psv);<br />
<br />	RELEASE(psb);<br />
<br />	RELEASE(psp);<br />
<br />	RELEASE(pwba);<br />
<br />	RELEASE(pdisp);<br />
<br />	RELEASE(psw);</p>
<p>	InvalidateRect(hwnd, NULL, TRUE);<br />
<br />}</p>
<p>I probably introduced a few bugs here, but I just typed this in notepad and didn&#8217;t bother compiling.  The point is obvious, just change the logic flow and COM is much easier to follow.  Don&#8217;t listen to what they say, that you should &quot;never&quot; use goto statements.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196703">
				<div id="div-comment-196703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.livejournal.com/users/sengelha' rel='external nofollow' class='url'>Steven Engelhardt</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196703">
			July 20, 2004 at 8:25 pm</a>		</div>

		<p>For writing anything but the simplest macros, I typically recommend enclosing in a do { &#8230; } while(0) block as follows:</p>
<p>#define DoStuff()<br />
<br />    do {<br />
<br />        // statement 1;<br />
<br />        // statement 2;<br />
<br />        // &#8230;;<br />
<br />    } while (0)</p>
<p>The if (&#8230;) else trick should work as well.</p>
<p>I also explained my C/C++ error-handling style which uses gotos, along with its limitations, in:</p>
<p><a target="_new" href="http://www.livejournal.com/users/sengelha/35640.html" rel="nofollow">http://www.livejournal.com/users/sengelha/35640.html</a><br />
<br /><a target="_new" href="http://www.livejournal.com/users/sengelha/37087.html" rel="nofollow">http://www.livejournal.com/users/sengelha/37087.html</a><br />
<br /><a target="_new" href="http://www.livejournal.com/users/sengelha/37182.html" rel="nofollow">http://www.livejournal.com/users/sengelha/37182.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196733">
				<div id="div-comment-196733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Robinson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196733">
			July 21, 2004 at 2:30 am</a>		</div>

		<blockquote><p>
  I try to avoid using any extra libraries in these articles.</p>
<p>Even the Microsoft C++ runtime library includes COM support classes. For most Windows developers, that&#8217;s hardly an &#8216;extra library&#8217;.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196753">
				<div id="div-comment-196753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stewart Tootill</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196753">
			July 21, 2004 at 6:05 am</a>		</div>

		<p>I tend to use the exception concept and ATL com smart pointers. I know the example wasn&#8217;t written in ATL, but even if thats the only ATL functionality you use its worth it in my opinion.</p>
<p>As for the macro, I typically use</p>
<p>inline HRESULT TestComCall( HRESULT hr ) throw (_com_error)<br />
<br />{<br />
<br />    if ( FAILED( hr ) )<br />
<br />        _com_issue_error( hr );<br />
<br />    return hr;<br />
<br />}</p>
<p>it returns hr so you can use it with the Next method on IEnum interfaces. You can replace the _com_error with your favourite exception. Also its a shame, but the microsoft compiler whinges about the exception specification.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196783">
				<div id="div-comment-196783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tudor Tihan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196783">
			July 21, 2004 at 7:31 am</a>		</div>

		<p>Hy,</p>
<p>Is there any way to similarly get a handle of the text inputs in the Internet Explorer ?</p>
<p>If it could be a write-only way (for setting texts inside) that would be great, because it would mean that I could write a program to fill my credentials on my visited sites without sharing them with password manager and such.</p>
<p>So, is it possible?<br />
<br />Could you give me some guidelines, please, as I am new to advanced COM programming.</p>
<p>Thank you!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196793">
				<div id="div-comment-196793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196793">
			July 21, 2004 at 7:43 am</a>		</div>

		<p>mshtml.h contains the interfaces you need. I leave filling in the details as an exercise. (Besides, this is an IE question and that&#8217;s not my area.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196883">
				<div id="div-comment-196883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.geary.com/' rel='external nofollow' class='url'>Michael Geary</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196883">
			July 21, 2004 at 9:48 am</a>		</div>

		<p>Steve, I&#8217;m curious about the use of do&#8230;while(0) in your macro. I&#8217;ve written scads of multiline code macros, and all I ever do is enclose them in braces. So your example would be:</p>
<p>#define DoStuff()<br />
<br />{<br />
<br />// statement 1;<br />
<br />// statement 2;<br />
<br />// &#8230;;<br />
<br />}</p>
<p>Is there a situation where that would fail and do&#8230;while(0) would fix it?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196983">
				<div id="div-comment-196983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.livejournal.com/users/sengelha' rel='external nofollow' class='url'>Steven Engelhardt</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196983">
			July 21, 2004 at 11:32 am</a>		</div>

		<p>Michael Geary: The #define DoStuff() { &#8230; } style works in most cases but not all.  See <a target="_new" href="http://www.livejournal.com/users/sengelha/38124.html" rel="nofollow">http://www.livejournal.com/users/sengelha/38124.html</a> for details.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196993">
				<div id="div-comment-196993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zachary Turner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-196993">
			July 21, 2004 at 11:36 am</a>		</div>

		<p>Well as I said, I typed it in notepad and didn&#8217;t compile anything ;-)  The point was just to illustrate a general concept, which when applied would simplify readability.  Thanks for pointing out the errors though.   To respond to the individual comments (I&#8217;m sure everyone knows everything I&#8217;m about to say, but I might as well say it anyway for the sake of completeness):</p>
<p>Raymond: Skipping over variable initialization is easily handled by moving all declarations and setting them equal to 0.  The release macro checks whether or not the value of the pointer is 0, and if it is it does nothing.  So you never release garbage that way.  Obviously you know that already, but like I said just pointing it out for completeness&#8217; sake.</p>
<p>Jack: Are you referring to construction/destruction semantics with regards to COM smart pointers auto add-refing and releasing?  You can use whatever you want, this was just an attempt to simplify readability in a way that didn&#8217;t use any smart pointer template library, which was Raymond&#8217;s initial goal as well.  Since some readers said &quot;it sucks, you can&#8217;t read it without smart pointers&quot;, I was just providing a way by which you could ;-)</p>
<p>Joe: Good point, thanks :)</p>
<p>Jack (2nd message): Raymond&#8217;s original goal was specifically NOT to use any library such as that, so that people didn&#8217;t have to argue over which template library was best.</p>
<p>Michael:  Yes, the do while macro allows you to put a semicolon at the end Consider your macro to be called DOMICHAEL, and steve&#8217;s to be called DOSTEVE.  Now consider the following code:</p>
<p>if (1)<br />
<br />     DOMIKE();<br />
<br />else<br />
<br />     DOSTEVE();</p>
<p>if (1)<br />
<br />     DOSTEVE();<br />
<br />else<br />
<br />     DOMIKE();</p>
<p>The first if/else block generates a compiler error, because a ; after DOMIKE() terminates the if block, as Joe pointed out earlier.  The second if block does NOT generate a compiler error, however, as you are required to put a ; to terminate the do while.</p>
<p>That&#8217;s the only difference that I see.  This only applies for single line if blocks as well, if you already had enclosing braces for the if block there would be no difference.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-197063">
				<div id="div-comment-197063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Moore</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-197063">
			July 21, 2004 at 1:12 pm</a>		</div>

		<p>Seems to me you might as well stick with the simple braces method since a do { &#8230; } while (0) approach also results in a syntax error if you leave off the semicolon.</p>
<p>i.e. this won&#8217;t compile either:</p>
<p>if ( expression )<br />
<br />  do { a(); b(); } while (0)<br />
<br />else<br />
<br />  c();</p>
<p>so its really just a question of whether you think semicolon&#8217;s should be used to terminate macro usage.</p>
<p>I&#8217;ll grant you the lack of a semicolon is a bit more obvious a syntax error for the macro than a mismatched else.</p>
<p>-Michael</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-197003">
				<div id="div-comment-197003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://beust.com/weblog/archives/000156.html' rel='external nofollow' class='url'>Otaku, Cedric's weblog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-197003">
			July 21, 2004 at 2:46 pm</a>		</div>

		<p>I was once reminded of the constant controversy that surrounds the use of goto by the two following posts: Raymond Chen&#8217;s article on a COM trick to track the Explorer&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-197093">
				<div id="div-comment-197093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.geary.com/' rel='external nofollow' class='url'>Michael Geary</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-197093">
			July 21, 2004 at 5:22 pm</a>		</div>

		<p>Stephen and Zachary, many thanks for the explanation on the do&#8230;while(0) bit. All makes sense now, and I&#8217;ll start doing my own macros that way.</p>
<p>Michael M., when I write a code macro like this, I like to do it in such a way that I can use the semicolon when I use the macro. The idea is that the code that calls the macro should look the same whether it&#8217;s a macro or a function.</p>
<p>Taking a simpler example, I would write a macro like this:</p>
<p>#define DoStuff() CallSomething()</p>
<p>and not like this:</p>
<p>#define DoStuff() CallSomething();</p>
<p>because when I call DoStuff, I want to call it like this:</p>
<p>DoStuff();</p>
<p>and not like this:</p>
<p>DoStuff()</p>
<p>The latter style means that the caller has to know it&#8217;s a macro, which I wouldn&#8217;t want.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-197103">
				<div id="div-comment-197103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-197103">
			July 21, 2004 at 5:57 pm</a>		</div>

		<p>The semicolon-less style also messes up most code auto-formatters / syntax colorers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-197143">
				<div id="div-comment-197143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sir</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-197143">
			July 21, 2004 at 10:52 pm</a>		</div>

		<p>buncha jealous heytah&#8217;s ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-197243">
				<div id="div-comment-197243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.arcavia.com/kyle/BLOG/index.html' rel='external nofollow' class='url'>Kyle Lahnakoski</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-197243">
			July 22, 2004 at 9:07 am</a>		</div>

		<p>Looks like this turned into a discussion about code readability and the use of gotos.</p>
<p>Gotos are not good, but suggest the need for better error handling than the inadequate try-catch semantics.  I suggest Structured Cascaded Exception Handling solves this problem and should be adopted in the next generation of languages.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-197483">
				<div id="div-comment-197483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve Donie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-197483">
			July 22, 2004 at 9:52 pm</a>		</div>

		<p>You forgot to mention the Accessibilty Interfaces! Go straight to the focused item, get notified when it changes rather than polling&#8230;</p>
<p>Run the magnifier (Start-&gt;Programs-&gt;Accessories-&gt;Accessibility-&gt;Magnifier) or Narrator (same place) to see what those can do. Then see <a target="_new" href="http://microsoft.com/enable/" rel="nofollow">http://microsoft.com/enable/</a> for a ling to the developer docs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-240813">
				<div id="div-comment-240813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://chrisoverbeek.com/crashblog/archive/0001/01/01/721.aspx' rel='external nofollow' class='url'>crashBlog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-240813">
			January 9, 2005 at 2:40 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-288853">
				<div id="div-comment-288853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/07/05/435657.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040720-00/?p=38393#comment-288853">
			July 5, 2005 at 10:00 am</a>		</div>

		<p>The ShellWindows object was designed for scripting.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

