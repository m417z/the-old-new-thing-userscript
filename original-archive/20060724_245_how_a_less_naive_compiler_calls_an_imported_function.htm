<html>
<head>
<title>How a less naive compiler calls an imported function</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How a less naive compiler calls an imported function</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 24, 2006 / year-entry #246</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060724-00/?p=30403</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If a function is declared with the dllimport declaration specifier, this instructs the Visual Studio C/C++ compiler that the function in question is an imported function rather than a normal function with external linkage. With this additional information, the compiler generates slightly different code when it needs to reference an imported function, since the compiler...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
If a function is declared with the <code>dllimport</code>
declaration specifier,
this instructs the Visual Studio C/C++ compiler
that the function in question is an imported function rather
than a normal function with external linkage.
With this additional information, the compiler generates
slightly different code when it needs to reference an imported
function, since the compiler is aware of the special way
imported functions are implemented.
</p>
<p>
First, there is no need for the stub function any more,
because the compiler can generate the special
<code>call [__imp__FunctionName]</code> instruction inline.
Furthermore, the compiler knows that the address of an
imported function never changes, and consequently it can
optimize away multiple loads of the function pointer:
</p>
<pre>
    mov   ebx, [__imp__FunctionName]
    push  1
    call  ebx ; FunctionName(1)
    push  2
    call  ebx ; FunctionName(2)
</pre>
<p>
(Note to crazy people:
This optimization means that you can run into problems
if you patch a module's import table once it has started
running, because the function pointer may have been
optimized into a register before you patched the import.
Consider, in the above example. that you patched the
<code>__imp__FunctionName</code> table entry after the
<code>mov ebx, [__imp__FunctionName]</code> instruction:
Your replacement import table entry won't be called since
the old function address was cached in the <code>ebx</code> register.)
</p>
<p>
Similarly, if your program tries to take the address of an imported
function that has been declared with the <code>dllimport</code>
declaration specifier, the compiler recognizes this and converts it to
a load from the imported function address table.
</p>
<p>
As a result of this extra knowledge imparted to the compiler,
the stub function is no longer needed; the compiler knows to
go straight to the imported function address table.
</p>
<p>
Note that there are still occasional circumstances wherein
you can induce the stub function to be created.
We'll take a look at them (and related dangers) next time.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-403023">
				<div id="div-comment-403023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Grant</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060724-00/?p=30403#comment-403023">
			July 24, 2006 at 11:26 am</a>		</div>

		<p>Is there a reason these &#8216;<strong>imp</strong>&#8216; functions don&#8217;t show up in &#8216;dumpbin /exports&#8217;, or am I just looking at the wrong dlls?</p>
<p>I ask because I&#8217;m generating some .coff files myself, and functions are linking fine but pointers to structs aren&#8217;t resolving properly. &nbsp;I thought dumpbin.exe output would be definitive, and everything looks good there, but it looks like I might need to look at the raw data.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-403033">
				<div id="div-comment-403033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060724-00/?p=30403#comment-403033">
			July 24, 2006 at 11:39 am</a>		</div>

		<p>@Grant: the <strong>imp</strong> function dont show up in the dumpbin, because they dont exist in the Dll. They exist only in the .lib</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-403063">
				<div id="div-comment-403063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Vargas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060724-00/?p=30403#comment-403063">
			July 24, 2006 at 3:58 pm</a>		</div>

		<p>Hmmm.. so it turns &quot;a = &amp;b;&quot; into &quot;a = *_imp_b;&quot;? I can be pretty sure people have lost a lot of hair trying to debug his programs and realizing the compiler was changing the code behind their backs&#8230; nice trick anyhow ^^</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-403093">
				<div id="div-comment-403093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060724-00/?p=30403#comment-403093">
			July 24, 2006 at 9:10 pm</a>		</div>

		<p>Antonio: I&#8217;d expect the register optimisation Raymond describes is only done for Release builds, not Debug.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-403113">
				<div id="div-comment-403113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Moff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060724-00/?p=30403#comment-403113">
			July 25, 2006 at 4:01 am</a>		</div>

		<p>Uh &#8211; oh. Finally it makes sense what Jeffery Richter wrote in his book (&quot;Advanced Windows Programming&quot;), when elaborating about thread injection and getting an address of the function stub. Thank you, Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-403123">
				<div id="div-comment-403123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">peterchen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060724-00/?p=30403#comment-403123">
			July 25, 2006 at 4:38 am</a>		</div>

		<blockquote><p>
  &gt;Note to crazy people<br />
  <br />I like that term :)</p>
<p>Curious: What are performance implications? Why do PSDK headers not<br />
  use this (for supported compilers) &#8211; to much work for to little<br />
  benefit, or something else?</p>
<div CLASS=post>[<i>The performance implications of what? The <strong>imp</strong> mechanism? THe SKD headers do use this &#8211; see the first sentence of this posting. -Raymond</i>]</div>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-403163">
				<div id="div-comment-403163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/07/25/677878.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060724-00/?p=30403#comment-403163">
			July 25, 2006 at 10:05 am</a>		</div>

		<p>When you ask C to do things it can&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-403413">
				<div id="div-comment-403413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://a@b.com' rel='external nofollow' class='url'>moo</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060724-00/?p=30403#comment-403413">
			July 25, 2006 at 5:42 pm</a>		</div>

		<p>The patching would still be safe if it was done from inside the function at the original address and was idempotent.</p>
<p>(In other words: if calling the old function through the cached address in the register simply resulted in it being patched again and then the new function being called)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-403813">
				<div id="div-comment-403813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">peterchen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060724-00/?p=30403#comment-403813">
			July 27, 2006 at 1:38 am</a>		</div>

		<p>Ooops &#8211; checked again, and it was there in all it&#8217;s glory:<br />
<br />#if !defined(<em>USER32</em>)<br />
<br />#define WINUSERAPI DECLSPEC_IMPORT<br />
<br />#else<br />
<br />#define WINUSERAPI<br />
<br />#endif</p>
<p>Last time I checked I noticed onl the empty definition branch. There aredefinitely advantages to those who can read :-)</p>
<p>Seems like the typical define you make for building vs. consuming a DLL.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

