<html>
<head>
<title>It rather involved being on the other side of this airtight hatchway: Invalid parameters from one security level crashing code at the same security level (yet again)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>It rather involved being on the other side of this airtight hatchway: Invalid parameters from one security level crashing code at the same security level (yet again)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 22, 2015 / year-entry #83</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>23</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It's the bogus vulnerability that keeps on giving. This time a security researcher found a horrible security flaw in Sys­Alloc­String­Len: The Sys­Alloc­String­Len function is vulnerable to a denial-of-service attack. [Long description of reverse-engineering deleted.] The Sys­Alloc­String­Len does not check the length parameter properly. If the provided length is larger than the actual length of the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
It's the bogus vulnerability that keeps on giving.
This time a security researcher found a horrible security
flaw in <code>Sys&shy;Alloc&shy;String&shy;Len</code>:
</p>
<blockquote CLASS=q>
<p>
The <code>Sys&shy;Alloc&shy;String&shy;Len</code> function is
vulnerable to a denial-of-service attack.
[Long description of reverse-engineering deleted.]
</p>
<p>
The <code>Sys&shy;Alloc&shy;String&shy;Len</code>
does not check the length parameter properly.
If the provided length is larger than the actual length of the buffer,
it may encounter an access violation when reading beyond the end
of the buffer.
Proof of concept:
</p>
<pre>
SysAllocStringLen(L"Example", 0xFFFFFF);
</pre>
<p>
Credit for this vulnerability should be given to
XYZ Security Labs.
Copyright &copy; XYZ Security Labs.
All rights reserved.
</p>
</blockquote>
<p>
As with other issues of this type,
there is no elevation.
The attack code and the code that crashes
are on the same side of the airtight hatchway.
If your goal was to make the process crash,
then instead of passing invalid parameters to the
<code>Sys&shy;Alloc&shy;String&shy;Len</code> function,
you can launch the denial of service attack much more easily:
</p>
<pre>
int __cdecl main(int, char**)
{
    ExitProcess(0);
}
</pre>
<p>
Congratulations, you just launched a denial-of-service attack
against yourself.
</p>
<p>
In order to trigger an access violation in the
<code>Sys&shy;Alloc&shy;String&shy;Len</code>
function,
you must already have had enough privilege to run code,
which means that you already have enough privilege to
terminate the application
without needing the <code>Sys&shy;Alloc&shy;String&shy;Len</code>
function.
</p>
<p>
Once again, we have a case of
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2007/08/07/4268706.aspx#4282521">
MS07-052: Code execution results in code execution</a>.&sup1;
</p>
<p>
<b>Earlier in the series</b>:
</p>
<ul>
<li>
    <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/04/02/10512890.aspx">
    Episode 2</a>.</p>
<li>
    <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/12/08/10101773.aspx">
    Episode 1</a>.
</ul>
<p>
<b>Bonus bogus vulnerability report</b>:
</p>
<blockquote CLASS=q><p>
The <code>Draw&shy;Text</code> function is vulnerability to a denial-of-service
attack because it does not validate that the
<code>lpchText</code> parameter is a valid pointer.
If you pass <code>NULL</code> as the second parameter,
the function crashes.
We have found many functions in the system which are vulnerable to the
same issue.
</p>
</blockquote>
<p>
&sup1; Now, of course, if there were some way you could externally
induce a program into passing invalid parameters to the
<code>Sys&shy;Alloc&shy;String&shy;Length</code> function,
then you'd be onto something.
But even then, the vulnerability would be in the program that is
passing the invalid parameters,
not in the
<code>Sys&shy;Alloc&shy;String&shy;Length</code> function itself.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1186413">
				<div id="div-comment-1186413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186413">
			April 22, 2015 at 7:25 am</a>		</div>

		<p>I would like to report a serious vulnerability in Windows. memcpy_s does not check the dest buffer is actually of the size numberOfElements! It is trivially easy to create a buffer overflow using code similar to the following:</p>
<p>memcpy_s( pLittleUnassumingBuffer, 0xFFFFFFFF, pHaxorBuffer, HaxorBufferSize );</p>
<p>This issue must be resolved with the utmost haste!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1186423">
				<div id="div-comment-1186423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Spike_tt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186423">
			April 22, 2015 at 7:34 am</a>		</div>

		<p>I&#39;ve noticed from reading StackOverflow that when using the C++ language it is trivially easy to invoke &quot;Undefined behaviour&quot;. &nbsp;In this state apparently your code can do anything. &nbsp;The example often quoted is that it can format your hard drive.</p>
<p>What are Microsoft doing about this vulnerability in Windows?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1186433">
				<div id="div-comment-1186433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">farseerfc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186433">
			April 22, 2015 at 7:54 am</a>		</div>

		<p>Isn&#39;t this the same issue as the exercise part of the episode 1?</p>
<div class="post">[<em>They are <span style="text-decoration:underline;">all</span> the same issue as the exercise part of episode 1! -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1186443">
				<div id="div-comment-1186443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186443">
			April 22, 2015 at 8:11 am</a>		</div>

		<p>It&#39;d be nice if you tagged the secure hatchway posts so I&#39;d have a link to send the occasional overzealous security person that I run into.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1186453">
				<div id="div-comment-1186453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mason Wheeler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186453">
			April 22, 2015 at 8:44 am</a>		</div>

		<p>Bonus bogus vulnerability report.</p>
<p>* Closed with status code ID-10T-058: User is unaware of the &quot;Fail Fast Philosophy&quot; principle of software design.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1186473">
				<div id="div-comment-1186473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Keith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186473">
			April 22, 2015 at 8:57 am</a>		</div>

		<p>@Tim, here you go:</p>
<p><a rel="nofollow" target="_new" href="https://social.msdn.microsoft.com/Search/en-US?query=airtight%20hatchway&amp;beta=0&amp;rn=The+Old+New+Thing&amp;rq=site:blogs.msdn.com/b/oldnewthing/&amp;ac=3">social.msdn.microsoft.com/&#8230;/en-US</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mndos even thread-even depth-1" id="comment-1186483">
				<div id="div-comment-1186483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MacIn173' rel='external nofollow' class='url'>MacIn173</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186483">
			April 22, 2015 at 9:07 am</a>		</div>

		<p>The last one bit reminds me about one issue I&#39;ve seen once, maybe someone can comment it. When you work with ini files using functions like WritePrivateProfileString etc, some functions accept optional parameters. In case parameter is optional (omitted) NULL is passed instead. But it turns out that if you pass a valid pointer to a buffer that has 0 length asciiz string (first byte is 0), it crashes by trying to write(!) to that buffer. To me it seemed absolutely valid to pass valid pointer to an empty string, but seems that it is not. So I had to add a wrapper so that if strlen == 0, NULL would be passed instead of actual pointer. Any ideas if this is valid behaviour?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1186493">
				<div id="div-comment-1186493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186493">
			April 22, 2015 at 9:52 am</a>		</div>

		<p>Well assuming it really is WritePrivateProfileString, that&#39;s kind of a bad bug, writing to LPCTSTR.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1186503">
				<div id="div-comment-1186503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186503">
			April 22, 2015 at 9:57 am</a>		</div>

		<p>Oh man, I hope Nicholas Lemonias never discovers Windows. This sounds just like the stream of nonsense &quot;vulnerabilities&quot; he&#39;s been posting to FD.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1186513">
				<div id="div-comment-1186513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186513">
			April 22, 2015 at 11:38 am</a>		</div>

		<p>What&#39;s with the &quot;denial-of-service attack&quot; wording? &nbsp;I am only familiar with this in the context of interconnected machines on a network.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1186523">
				<div id="div-comment-1186523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186523">
			April 22, 2015 at 1:06 pm</a>		</div>

		<p>Well, it is what you&#39;d expect from the network. A say you have a local web server on your system, again the denial of service is not being able to use a web browser to load pages from that web server.</p>
<p>Really, a server is just a program that provides a service of some kind, like web pages or streaming music or even a corporate program to work with data. A client is a program that connects to the server to use the services it provides. The network context has very little to do with denial of service.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1186533">
				<div id="div-comment-1186533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186533">
			April 22, 2015 at 1:15 pm</a>		</div>

		<p>@ Tim!</p>
<p>Usually when we think of DOS or DDOS, we assume it is an attack against a network. &nbsp;However, rouge/broken processes on a machine can effectively deny operation of that machine and other processes on the machine when CPU, memory, disk, or other critical items are completely consumed. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1186543">
				<div id="div-comment-1186543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186543">
			April 22, 2015 at 2:08 pm</a>		</div>

		<p>&quot;However, rouge/broken processes on a machine can effectively deny operation of that machine and other processes on the machine when CPU, memory, disk, or other critical items are completely consumed.&quot;</p>
<p>Or on a crash. For example, consider a system that runs a print spooler daemon in the background. The process continually lives, accepting print requests and forwarding them to printers. (I don&#39;t know if this is how spoolers work in general.) If I can send a malformed document to the spooler and cause it to crash &#8212; thereby denying the ability to print to other users of the system &#8212; that&#39;s still a denial of service attack.</p>
<p>The &quot;overwhelm a server with a ton of requests&quot; is only one specific kind of DOS attack.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1186553">
				<div id="div-comment-1186553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186553">
			April 22, 2015 at 2:17 pm</a>		</div>

		<p>&gt; [Long description of reverse-engineering deleted.]</p>
<p>That&#39;s my favourite part. Apparently they needed to reverse-engineer the function to come up with that &quot;vulnerability&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1186563">
				<div id="div-comment-1186563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186563">
			April 22, 2015 at 2:46 pm</a>		</div>

		<p>Sometimes I question the &quot;It rather involved being on the other side of this airtight hatchway&quot; philosophy for the rest of Microsoft: parts of Microsoft seem to consider code signing to be a security boundary, and some parts don&#39;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1186463">
				<div id="div-comment-1186463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186463">
			April 22, 2015 at 8:53 am</a>		</div>

		<p>The timeGetTime function has a security vulnerability where dereferencing its return value can cause an access violation depending on system clock state. For example:</p>
<p>#include &lt;Windows.h&gt;</p>
<p>#include &lt;UIAutomationCoreApi.h&gt;</p>
<p>UiaCacheRequest r = *(UiaCacheRequest*)timeGetTime();</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1186603">
				<div id="div-comment-1186603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186603">
			April 22, 2015 at 9:01 pm</a>		</div>

		<p>Raymond, I know you&#39;ve often said in the past that even vulnerability reports that seem to be obvious nonsense, like this one, must be investigated in depth, in case there is a real exploit being masked by poor reporting. Can you share with us (suitably anonymised if necessary) any case where that investigation actually turned up a real exploit?</p>
<p>I have been wondering about the cost-benefit ratio of all that extra investigation, so it would be very interesting to see an example of a case where it did make a difference, and turned up something that otherwise might not have been found.</p>
<div class="post">[<em>It was something like, &quot;It sounds like they are saying that the problem is X (which is bogus), but maybe they really mean Y (even though they never mentioned Y)&quot; and it turns out that Y was a genuine issue. Another case was &quot;Their report and proof of concept demonstrates X (which is bogus), but a deeper investigation shows that you can trigger X from inside the airtight hatchway via sneaky technique Y (not mentioned in the report), which is a real problem.&quot; What I don&#39;t know is whether the finder really meant Y and was bad at communication, or whether they really meant X and just got lucky that Y was a few steps away from X (even though they didn&#39;t know what those steps was). It&#39;s like calling in a false alarm to the fire department, and it turns out there was a fire three houses down the street. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1186613">
				<div id="div-comment-1186613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186613">
			April 22, 2015 at 10:46 pm</a>		</div>

		<p>Btw, is there a few missing F in the value?</p>
<p>Since the length parameter us uint, I would think 0xFFFFFF is a safe value to pass in.</p>
<p>Afterall, this value is sufficiently smaller than the actual limit of uint. (The parameter use unsigned value suggested that it&#39;s safe to use values even if with leftmost bit set). And the function documentation said the function will return null if no memory blocks that can fit the size is found. I would have possibly go just check for null after read the documentation.</p>
<p>Not a security vulnerability, but possibly a bug in the function if that&#39;s not a typo.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1186623">
				<div id="div-comment-1186623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">boogaloo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186623">
			April 23, 2015 at 1:47 am</a>		</div>

		<p>&quot;Since the length parameter us uint, I would think 0xFFFFFF is a safe value to pass in.&quot;</p>
<p>@cheong00: Yes 0xffffff is perfectly safe to pass in, as long as you pass in a string that is 0xffffff characters long. The example passes the text &quot;Example&quot; that is 7 characters long, so you ideally shouldn&#39;t pass in a higher value than 7.</p>
<p><a rel="nofollow" target="_new" href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms221639(v=vs.85).aspx">msdn.microsoft.com/&#8230;/ms221639(v=vs.85).aspx</a></p>
<p>&quot;Allocates a new string, copies the specified number of characters from the passed string, and appends a null-terminating character.&quot;</p>
<p>The string length can&#39;t always be checked as there is no requirement that it is null terminated. So you could plaster the function with a load of time wasting validation that might catch some failures and promote them to just returning null, which the application could then add another load of time wasting validation to catch. The result will be a greater chance of bugs and when it does work it will be slower, I&#39;m sure marketing would love to put that on the box. The people who wrote the bug report have no business writing software (<a rel="nofollow" target="_new" href="http://idioms.thefreedictionary.com/have+no+business+doing">idioms.thefreedictionary.com/have+no+business+doing</a> <a rel="nofollow" target="_new" href="http://dictionary.cambridge.org/dictionary/british/have-no-business-doing-sth">dictionary.cambridge.org/&#8230;/have-no-business-doing-sth</a>).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hikari odd alt thread-odd thread-alt depth-1" id="comment-1186633">
				<div id="div-comment-1186633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Chris+Crowther' rel='external nofollow' class='url'>Chris Crowther</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186633">
			April 23, 2015 at 6:07 am</a>		</div>

		<p>12BitSlab: It doesn&#39;t even to have be rogue program: I&#39;ve had numerous deadlocking issues I&#39;ve had to resolve; that&#39;s effectively a program DoSing itself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1186643">
				<div id="div-comment-1186643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mr Cranky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186643">
			April 23, 2015 at 8:37 am</a>		</div>

		<p>I hope &quot;XYZ Security Labs&quot; got the public credit they demanded. &nbsp;It&#39;s good to know who&#39;s the best at detecting bogus vulnerabilities.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1186703">
				<div id="div-comment-1186703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186703">
			April 23, 2015 at 6:23 pm</a>		</div>

		<p>@boogaloo: Oh, I misread the main point.</p>
<p>I read the documentation and found it will append a null character to resulting string, and then assume it&#39;s about &quot;when allocating a buffer the size of UINT_MAX, it&#39;ll crash instead of just returning null&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1186713">
				<div id="div-comment-1186713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">boogaloo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150422-00/?p=44183#comment-1186713">
			April 24, 2015 at 1:25 am</a>		</div>

		<p>There is a vulnerability in Microsoft Visual Studio as it allows you to write, compile and link malicious code. The same vulnerability is also found in GCC and clang.</p>
<p>Proposed fix(*). Prevent linker from generating files that can be executed.</p>
<p>(*) this is a joke, my actual proposed fix would be to demote, redeploy or sack a developer who doesn&#39;t understand undecidable problems.</p>
<p><a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Undecidable_problem#In_computability_theory" rel="nofollow">en.wikipedia.org/&#8230;/Undecidable_problem</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

