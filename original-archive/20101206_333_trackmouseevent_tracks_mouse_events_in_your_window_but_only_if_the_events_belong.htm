<html>
<head>
<title>TrackMouseEvent tracks mouse events in your window, but only if the events belong to your window</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>TrackMouseEvent tracks mouse events in your window, but only if the events belong to your window</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 6, 2010 / year-entry #334</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20101206-00/?p=12113</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Greg Williams wonders why Track­Mouse­Event fails to detect mouse hover events when responding to Do­Drag­Drop callbacks. "My suspicion is that Do­Drag­Drop monopolizes the window so that a WM_MOUSEHOVER message is never posted, so it won't end up being useful." That's basically it, for the appropriate sense of the word "monopolize." The Track­Mouse­Event monitors mouse events...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Greg Williams wonders <a href="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#2511240"> why <code>Track&shy;Mouse&shy;Event</code> fails to detect mouse hover events when responding to <coe>Do&shy;Drag&shy;Drop callbacks</coe></a>. "My suspicion is that <code>Do&shy;Drag&shy;Drop</code> monopolizes the window so that a <code>WM_<wbr>MOUSEHOVER</wbr></code> message is never posted, so it won't end up being useful."</p>
<p> That's basically it, for the appropriate sense of the word "monopolize." </p>
<p> The <code>Track&shy;Mouse&shy;Event</code> monitors mouse events that take place in your window and notifies your window when events of interest occur. But this requires that the events actually take place in your window! </p>
<p> The <code>Do&shy;Drag&shy;Drop</code> function calls <code>Set&shy;Capture</code> so that it can carry out the task of following the mouse anywhere on the screen. Recall that mouse events normally are delivered to the window beneath the mouse, but <code>Set&shy;Capture</code> lets you say, "No, I want all mouse events to go to me for as long as the mouse button is held down. Mine! All mine!" This function is typically called when you are performing some sort of mouse drag operation so that the window can respond to mouse events even after the use has dragged the mouse out of the window. (Which, in many cases, is the only interesting case.) </p>
<p> That's why <code>Track&shy;Mouse&shy;Event</code> has no effect when you try to use it to detect mouse hovering during a drag/drop operation: The <code>Track&shy;Mouse&shy;Event</code> function is not seeing any mouse events! They're all being stolen by <code>Do&shy;Drag&shy;Drop</code>. </p>
<p> The unfortunate consequence of this is that if you want to have a special behavior during drag/drop hover, you'll have to detect the hover manually by remembering the mouse position and timestamp and waiting for the appropriate amount of time to elapse without a significant mouse motion. </p>
<p> <b>Exercise</b>: But wait, since I don't get drag/drop events when the mouse is not inside my window, how can I simulate <code>WM_<wbr>MOUSELEAVE</wbr></code>? </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-879393">
				<div id="div-comment-879393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101206-00/?p=12113#comment-879393">
			December 6, 2010 at 7:07 am</a>		</div>

		<p>IDropTarget.DragLeave would appear to be your friend, if you really need a WM_MOUSELEAVE event. &nbsp;Which makes me wonder if you could send your own WM_MOUSEMOVE messages from IDropTarget.DragOver and therefore make TrackMouseEvent work correctly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-879403">
				<div id="div-comment-879403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101206-00/?p=12113#comment-879403">
			December 6, 2010 at 7:07 am</a>		</div>

		<p>Well, this won&#39;t be the most efficient thing in the world, but certainly GetCursorPos combined with WM_TIMER would do the trick.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-879413">
				<div id="div-comment-879413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">peterchen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101206-00/?p=12113#comment-879413">
			December 6, 2010 at 7:28 am</a>		</div>

		<p>For WM_MOUSELEAVE, I&#39;ve either used SetCapture myself, or a timer-based method as already suggested by SimonRev.</p>
<p>The first affects other windows (which basically miss their first WM_MOUSEMOVE, so a skilled mouser could move the mouse over another window without that window noticing), the second uses polling with all its downsides (even though the additional CPU load and &quot;hot code pages&quot; are minimal by odays standards).</p>
<p>So yeah, is there a better method?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-879423">
				<div id="div-comment-879423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tihiy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101206-00/?p=12113#comment-879423">
			December 6, 2010 at 7:33 am</a>		</div>

		<p>Set a hook on WM_MOUSEMOVE messages and watch for coordinates?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-879463">
				<div id="div-comment-879463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">peterchen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101206-00/?p=12113#comment-879463">
			December 6, 2010 at 8:59 am</a>		</div>

		<p>Hook would work, too, but you&#39;d have to use a system-wide hook, i.e. the code should be in a DLL that can get injected into other processes, and certain processes might be shielded from injected code. &nbsp;Hm&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-879483">
				<div id="div-comment-879483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clipboarder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101206-00/?p=12113#comment-879483">
			December 6, 2010 at 11:07 am</a>		</div>

		<p>Hooking ist just an awful idea. It slows the system down, doesn&#39;t work with elevated or wow32 processes and can make the whole system unstable.</p>
<p>I&#39;d try to respond to IDropTarget::DragLeave()&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-879503">
				<div id="div-comment-879503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tihiy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101206-00/?p=12113#comment-879503">
			December 6, 2010 at 12:09 pm</a>		</div>

		<p>I meant only current thread hook, since it&#39;s supposed my thread does start drag-and-drop? It shouldn&#39;t be costly at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-879513">
				<div id="div-comment-879513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Cohn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101206-00/?p=12113#comment-879513">
			December 6, 2010 at 12:28 pm</a>		</div>

		<p>I could be missing something, but polling on timer for WM_MOUSELEAVE is not a burden &#8211; you only find out that WM_MOUSEMOVE does not arrive in due time. I don&#39;t think you even need to GetCursorPos to make sure the mouse has left the window.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-879563">
				<div id="div-comment-879563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Born without imagination</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101206-00/?p=12113#comment-879563">
			December 6, 2010 at 4:06 pm</a>		</div>

		<p>In Soviet Russia, the mouse tracks you!</p>
<p>Sorry, I couldn&#39;t resist&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-879493">
				<div id="div-comment-879493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101206-00/?p=12113#comment-879493">
			December 6, 2010 at 11:40 am</a>		</div>

		<p>I agree, *stay away* from system wide hooking, lest your application make the BLODA.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-879703">
				<div id="div-comment-879703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101206-00/?p=12113#comment-879703">
			December 7, 2010 at 2:28 pm</a>		</div>

		<p>Lol@&#8230;hmm, how to say this&#8230;play safe programmers?</p>
<p>I guess you never wrote a good system wide hook, all you did is wrote something that got called by the system, you did ALL the code inside and then when system hung due to your callback function doing too much work you come up with the impression &quot;boo, don&#39;t use system wide hooks, they slow down the system and bla bla bla&quot; &#8211; learn to use them properly. I wonder how you would wrote a kernel driver..same way as you wrote that callback function for the hook?</p>
<p>Learn programming properly, don&#39;t rely on &quot;oh, hardware is sky rocketing at speed I don&#39;t need to optimize my code&quot; crap.</p>
<p>To answer to Ray exercise..system wide hook would do the trick..always.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-879713">
				<div id="div-comment-879713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101206-00/?p=12113#comment-879713">
			December 7, 2010 at 3:01 pm</a>		</div>

		<p>or you can hook the SetCursor function and be lazy and destroy the user experience for all apps on that machine.</p>
<p>I cant believe how common this is :(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-879723">
				<div id="div-comment-879723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">B Hess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101206-00/?p=12113#comment-879723">
			December 7, 2010 at 3:06 pm</a>		</div>

		<p>Devs just don&#39;t want to do the right thing because the right thing is harder to do and we all know how lazy most devs want to be.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-879913">
				<div id="div-comment-879913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101206-00/?p=12113#comment-879913">
			December 8, 2010 at 6:38 am</a>		</div>

		<p>@Ens</p>
<p>And there you go, you answered to your own specific scenario..so still need the wide hook, ha?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-879853">
				<div id="div-comment-879853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ens</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101206-00/?p=12113#comment-879853">
			December 7, 2010 at 11:23 pm</a>		</div>

		<p>If you&#39;re only interested in the hover during your own app&#39;s known DoDragDrop handling, then a hook, used judiciously, is alright, since you can get rid of it right away. &nbsp;Running one all the time is a potential performance issue, though. &nbsp;If you attach a debugger to your program, then you can forget about using your mouse on that system. &nbsp;Technically it will work, but at a resolution that&#39;s too frustrating to do use beyond detaching the debugger (unless you fudge the registry setting).</p>
<p>@peterchen</p>
<p>You could use a low level mouse hook; then you aren&#39;t injecting code into anybody.</p>
<p>@Danny</p>
<p>Relying on a hook *IS* depending on the hardware to take care of your performance impact. &nbsp;It&#39;s a great way to cause incredible amounts of context switching. &nbsp;The documentation for hooks specifically calls out that you should use them sparingly. &nbsp;I agree you could make a mouse hook work here, if you set it whenever you would call TrackMouseEvent and unset it as soon as you do the WM_MOUSELEAVE happens, thus keeping it tightly scoped to what should be a very temporary situation.</p>
<p>But given that Raymond&#39;s exact question seems to be specifically about WM_MOUSELEAVE during drag/drop events (&quot;&#8230;since I don&#39;t get &lt;b&gt;drag/drop events&lt;/b&gt;&#8230;&quot;), IDropTarget::DragLeave is a better answer here. &nbsp;That&#39;s what I used when I hit this exact problem a few months back (actually, I used DragEnter, but the reasons are similar &#8212; it would make a mouse hook a terrible, terrible choice in that case). &nbsp;It&#39;s a completely passive solution that doesn&#39;t require you to manually set and unset things all the time to avoid performance impact. &nbsp;You need to use a hook if you want WM_MOUSELEAVE even when other applications have mouse capture for arbitrary reasons.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

