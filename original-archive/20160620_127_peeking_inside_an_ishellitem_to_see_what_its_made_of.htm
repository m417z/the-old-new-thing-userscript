<html>
<head>
<title>Peeking inside an IShellItem to see what it's made of</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Peeking inside an IShellItem to see what it&#8217;s made of</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 20, 2016 / year-entry #128</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160620-00/?p=93705</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">There are a folder and a pidl in there, but only if you look.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Windows XP introduced
<a HREF="https://msdn.microsoft.com/library/windows/desktop/bb761144(v=vs.85).aspx">
the
<code>IShell&shy;Item</code>
interface</a>
which represents an item in the shell namespace.
This
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20110831-00/?p=9763">
encapsulates what traditionally is represented
by a pair of things</a>,
the
<a HREF="https://msdn.microsoft.com/library/windows/desktop/bb775075(v=vs.85).aspx">
the
<code>IShell&shy;Folder</code>
interface</a>
and
an
<a HREF="https://msdn.microsoft.com/library/windows/desktop/bb773321(v=vs.85).aspx">
<code>ITEMID_CHILD</code></a>.
The shell item lets you carry just one object around instead of two.
</p>
<p>
Another way of representing an item in the shell namespace is in the form of a single
<code>ITEMID_ABSOLUTE</code>,
and you can also create a shell item from that.
</p>
<p>
Creating a single unit of currency to represent a shell item
tries to solve the problem of
<a HREF="https://en.wikipedia.org/wiki/Category:Currencies_replaced_by_the_euro">
having to exchange money every time you cross a boundary</a>.
The <code>IShell&shy;Item</code>
also gives you some methods which simplifies various
operations by wrapping
low-level methods on
<code>IShell&shy;Folder</code>.
For example,
the
<code>IShell&shy;Item::<wbr>Bind&shy;To&shy;Handler</code>
method
figures out the right way to get the item you ask for
rather than making you puzzle out the arcane rules behind
<code>IShell&shy;Folder::<wbr>Bind&shy;To&shy;Object</code>,
<code>IShell&shy;Folder::<wbr>Bind&shy;To&shy;Storage</code>,
<code>IShell&shy;Folder::<wbr>Create&shy;View&shy;Object</code>,
<code>IShell&shy;Folder::<wbr>Get&shy;UI&shy;Object&shy;Of</code>,
and more.
</p>
<p>
But what if you need something that <code>IShell&shy;Item</code>
doesn't provide a convenience wrapper for?
Then you need to peek inside.
</p>
<p>
If you want to peek inside and get the
<code>IShell&shy;Folder</code> and
<code>ITEMID_<wbr>CHILD</code>, you can use
<a HREF="https://msdn.microsoft.com/library/windows/desktop/bb775360(v=vs.85).aspx">
the
<code>IParent&shy;And&shy;Item</code> interface</a>,
specifically,
<a HREF="https://msdn.microsoft.com/library/windows/desktop/bb775358(v=vs.85).aspx">
the
<code>IParent&shy;And&shy;Item::<wbr>Get&shy;Parent&shy;And&shy;Item</code>
method</a>.
Once nice thing about the
<code>IParent&shy;And&shy;Item::<wbr>Get&shy;Parent&shy;And&shy;Item</code>
method
is that you can pass <code>nullptr</code>
for the things you aren't interested in.
</p>
<p>
Alternatively, if you want to peek inside and get the
<code>ITEMIDLIST_<wbr>ABSOLUTE</code>,
then you can use
<a HREF="https://msdn.microsoft.com/library/windows/desktop/bb775326(v=vs.85).aspx">
the
<code>IPersist&shy;ID&shy;List::<wbr>Get&shy;ID&shy;List</code>
method</a>
to suck it out.
We saw this
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20130128-00/?p=5433">
a while back</a>,
but I'll repeat it here just so the information is all in one place.
</p>
<p>
If you are willing to abandon Windows XP support,
you can use
<a HREF="https://msdn.microsoft.com/library/windows/desktop/bb762184(v=vs.85).aspx">
the
<code>SH&shy;Get&shy;ID&shy;List&shy;From&shy;Object</code> function</a>
which knows how to do this.
(It tries other things, too.)
</p>
<p>
Okay, let's take things out for a spin.
We'll get the normal display name for a shell item in four ways:
</p>
<ul>
<li>By asking the item directly.
<li>By using the <code>IShell&shy;Folder::<wbr>Get&shy;Display&shy;Name</code>
    method.</p>
<li>By using the
    <code>IPersist&shy;ID&shy;List::<wbr>Get&shy;ID&shy;List</code>
    method,
    and then the
    <code>SH&shy;Get&shy;Name&shy;From&shy;ID&shy;List</code> function.</p>
<li>By using the
    <code>SH&shy;Get&shy;ID&shy;List&shy;From&shy;Object</code>
    function,
    and then the
    <code>SH&shy;Get&shy;Name&shy;From&shy;ID&shy;List</code> function.
</ul>
<p>
If all goes well, we should get the same string printed each time.
</p>
<p>
Remember that Little Programs
do little to no error checking.
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;atlbase.h&gt;
#include &lt;atlalloc.h&gt;
#include &lt;stdio.h&gt;     // horrors! mixing C and C++!

void PrintNameDirectlyFromItem(IShellItem* item)
{
    CComHeapPtr&lt;wchar_t&gt; name;
    item-&gt;GetDisplayName(SIGDN_NORMALDISPLAY, &amp;name);
    _putws(name);
}

void PrintNameViaIShellFolder(IShellItem* item)
{
    CComPtr&lt;IShellFolder&gt; folder;
    CComHeapPtr&lt;ITEMID_CHILD&gt; child;
    CComQIPtr&lt;IParentAndItem&gt;(item)-&gt;GetParentAndItem(nullptr, &amp;folder, &amp;child);
    <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20040823-00/?p=38073">STRRET</a> ret;
    folder-&gt;GetDisplayNameOf(child, SHGDN_NORMAL, &amp;ret);
    CComHeapPtr&lt;wchar_t&gt; name;
    StrRetToStrW(&amp;ret, child, &amp;name);
    _putws(name);
}

void PrintNameViaAbsoluteIDList(IShellItem* item)
{
    CComHeapPtr&lt;ITEMIDLIST_ABSOLUTE&gt; absolute;
    CComQIPtr&lt;IPersistIDList&gt;(item)-&gt;GetIDList(&amp;absolute);
    CComHeapPtr&lt;wchar_t&gt; name;
    SHGetNameFromIDList(absolute, SIGDN_NORMALDISPLAY, &amp;name);
    _putws(name);
}

void PrintNameViaAbsoluteIDList2(IShellItem* item)
{
    CComHeapPtr&lt;ITEMIDLIST_ABSOLUTE&gt; absolute;
    SHGetIDListFromObject(item, &amp;absolute);
    CComHeapPtr&lt;wchar_t&gt; name;
    SHGetNameFromIDList(absolute, SIGDN_NORMALDISPLAY, &amp;name);
    _putws(name);
}

int main(int, char**)
{
    <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20040520-00/?p=39243">CCoInitialize</a> init;

    CComPtr&lt;IShellItem&gt; item;
    SHGetKnownFolderItem(FOLDERID_Downloads, KF_FLAG_DEFAULT, nullptr, IID_PPV_ARGS(&amp;item));

    PrintNameDirectlyFromItem(item);
    PrintNameViaIShellFolder(item);
    PrintNameViaAbsoluteIDList(item);
    PrintNameViaAbsoluteIDList2(item);

    return 0;
}
</pre>
<p>
<b>Bonus chatter</b>:
When you create a shell item, it takes the things you created it from,
and it produces the other equivalent things on demand.
For example, if you create a shell item from
an absolute item ID list,
and then you ask for the folder and child item ID,
it will convert the absolute item ID list into a folder
and child item ID list.
(It also caches the result so that the next time you ask,
it'll be able to answer the question more quickly.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1253185">
				<div id="div-comment-1253185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160620-00/?p=93705#comment-1253185">
			June 20, 2016 at 7:12 am</a>		</div>

		<p>Not sure if I fully agree with your description of Bind­To­Handler. It does take away some of the pain but it still requires you to pass in a BHID. If you need a IContextMenu you still need to know that BHID_SFUIObject is the correct BHID because it maps to IShellFolder::Get­UI­Object­Of&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1253195">
				<div id="div-comment-1253195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri Khan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160620-00/?p=93705#comment-1253195">
			June 20, 2016 at 7:57 am</a>		</div>

		<p>Nitpicker’s corner: You forgot to roll your dice to determine today’s COM smart pointer library!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1253215">
				<div id="div-comment-1253215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160620-00/?p=93705#comment-1253215">
			June 20, 2016 at 9:50 am</a>		</div>

		<p>How safe are IShellItems to use between threads? Let&#8217;s say I enumerate a folder on a background thread, but use the items on the main UI thread. Is that allowed?</p>
<p>I&#8217;ve always converted shell items to ITEMIDLIST_ABSOLUTE for passing between threads or for long-term storage in data structures. But your &#8220;Bonus chatter&#8221; remark makes me thing that&#8217;s been unnecessary.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1253235">
				<div id="div-comment-1253235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160620-00/?p=93705#comment-1253235">
			June 20, 2016 at 10:10 am</a>		</div>

		<p>IShellItems are COM objects and therefore follow standard COM rules, which includes &#8220;if you want to use the object in a different apartment, you must marshal it.&#8221; ITEMIDLIST_ABSOLUTE is still useful if you would prefer to marshal things yourself, or to serialize them for later use.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

