<html>
<head>
<title>The PowerPC 600 series, part 3: Arithmetic</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The PowerPC 600 series, part 3: Arithmetic</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 8, 2018 / year-entry #181</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>22</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Who knew there were so many ways to add numbers.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Before we start with arithmetic, we need to have a talk about carry.
</p>
<p>
The PowerPC uses true carry for both addition and subtraction.
This is different from the x86 family of processors, for which
the carry flag is actually a borrow bit when used in subtraction.
<a HREF="https://en.wikipedia.org/wiki/Carry_flag#Carry_flag_vs._borrow_flag">
You can read more about the difference on Wikipedia</a>.
There are some
instructions which perform a combined addition and subtraction,
and in that case, the only sane choice is to use true carry.
(If you had chosen carry as borrow, then it wouldn't be clear whether
the final carry bit represented the carry from the addition or the
borrow from subtraction.)
</p>
<p>
To emphasize the fact that the PowerPC uses true carry,
I will rewrite all subtractions as additions,
taking advantage of the twos complement identity
</p>
<pre>
    -x = ~x + 1
</pre>
<p>
Okay, now we can do some arithmetic.
Let's start with addition.
</p>
<pre>
    add     rd, ra, rb      ; rd = ra + rb
    add.    rd, ra, rb      ; rd = ra + rb, update cr0
    addo    rd, ra, rb      ; rd = ra + rb, update         XER overflow bits
    addo.   rd, ra, rb      ; rd = ra + rb, update cr0 and XER overflow bits
</pre>
<p>
These instructions add two source registers and optionally
update the <var>xer</var> register to capture any possible overflow
(by appending an <code>o</code>),
and also optionally
update the <var>cr0</var> register to reflect the sign of
the result and any summary overflow (by appending a period).
</p>
<p>
I don't know what they were thinking, using an easily-overlooked
mark of punctuation to carry important information.
</p>
<p>
There is also a version of the above instruction that takes
a signed 16-bit immediate:
</p>
<pre>
    addi    rd, ra/0, imm16 ; rd = ra/0 + (int16_t)imm16
</pre>
<p>
Note that this variant does not accept <code>o</code> or <code>.</code>
suffixes.
</p>
<p>
The <var>ra/0</var> notation means
"This can be any general purpose register,
but if you ask for <var>r0</var>,
you actually get the constant zero."
The register <var>r0</var> is weird like that.
Sometimes it stands for itself,
but sometimes it reads as zero.
As a result, the <var>r0</var> register isn't used much.
</p>
<p>
The assembler lets you write <var>r0</var> through <var>r31</var>
as synonyms for the integers 0 through 31,
so the following are equivalent:
</p>
<pre>
    add     r3, r0, r4      ; r3 = r0 + r4
    add      3,  0,  4      ; r3 = r0 + r4
    add     r3, r0,  4      ; r3 = r0 + r4
</pre>
<p>
This can get very confusing.
That last example sure looks like you're setting
<var>r3</var> to <var>r0</var> plus 4,
but it's not.
The 4 is in a position where a register is expected,
so it actually means <var>r4</var>.
</p>
<p>
Similarly, you might think you're adding an immediate to <var>r0</var>
when you write
</p>
<pre>
    addi    r3, r0, 256     ; r3 = r0 + 256, right?
</pre>
<p>
but nope, the value of 0 as the second operand to <code>addi</code>
is interpreted as the constant zero, not register number zero.
</p>
<p>
Fortunately, the Windows disassembler always calls registers
by their mnemonic rather than by number.
</p>
<p>
Wait, we're not done with addition yet.
</p>
<pre>
    ; add and set carry
    addc    rd, ra, rb      ; rd = ra + rb, update carry
    addc.   rd, ra, rb      ; rd = ra + rb, update carry and cr0
    addco   rd, ra, rb      ; rd = ra + rb, update carry         and XER overflow bits
    addco.  rd, ra, rb      ; rd = ra + rb, update carry and cr0 and XER overflow bits
</pre>
<p>
The "add and set carry" instructions
act like the corresponding regular add instructions,
except that the also update the carry bit in <var>xer</var>
based on whether a carry propagated out of the highest-order bit.
</p>
<pre>
    ; add extended
    adde    rd, ra, rb      ; rd = ra + rb + carry, update carry
    adde.   rd, ra, rb      ; rd = ra + rb + carry, update carry and cr0
    addeo   rd, ra, rb      ; rd = ra + rb + carry, update carry         and XER overflow bits
    addeo.  rd, ra, rb      ; rd = ra + rb + carry, update carry and cr0 and XER overflow bits
</pre>
<p>
The "add extended" instructions act like the corresponding
"add and set carry" instructions, except that they also add
1 if the carry bit was set.
This makes multiword addition convenient.
</p>
<pre>
    ; add minus one extended
    addme   rd, ra          ; rd = ra + carry + ~0, update carry
    addme.  rd, ra          ; rd = ra + carry + ~0, update carry and cr0
    addmeo  rd, ra          ; rd = ra + carry + ~0, update carry         and XER overflow bits
    addmeo. rd, ra          ; rd = ra + carry + ~0, update carry and cr0 and XER overflow bits
</pre>
<p>
The "add minus one extended" instruction is like
"add extended" except that the second parameter is hard-coded to &minus;1.
I wrote <code>~0</code> instead of &minus;1 to emphasize that
we are using true carry.
(This is the combined addition-and-subtraction instruction I alluded
to at the top of the article.
It adds carry and then subtracts one.)
<b>Added</b>: As commenter Neil noted below, through the magic of true carry,
this is the same as "subtract zero extended",
which makes it handy for multiword arithmetic.
</p>
<pre>
    ; add zero extended
    addze   rd, ra          ; rd = ra + carry, update carry
    addze.  rd, ra          ; rd = ra + carry, update carry and cr0
    addzeo  rd, ra          ; rd = ra + carry, update carry         and XER overflow bits
    addzeo. rd, ra          ; rd = ra + carry, update carry and cr0 and XER overflow bits
</pre>
<p>
The "add zero extended" instruction is like "add extended"
except that the second parameter is hard-coded to zero.
</p>
<p>
And then there are some instructions that take signed 16-bit
immediates:
</p>
<pre>
    ; add immediate shifted
    addis   rd, ra/0, imm16  ; rd = ra/0 + (imm16 &lt;&lt; 16)

    ; add immediate and set carry
    addic   rd, ra, imm16    ; rd = ra + (int16_t)imm16, update carry

    ; add immediate and set carry and update cr0
    addic.  rd, ra, imm16    ; rd = ra + (int16_t)imm16, update carry and cr0
</pre>
<p>
Phew, that was addition.
There are also subtraction instructions,
which should look mostly familiar now that you've seen addition.
</p>
<pre>
    ; subtract from
    subf    rd, ra, rb      ; rd = ~ra + rb + 1
    subf.   rd, ra, rb      ; rd = ~ra + rb + 1, update cr0
    subfo   rd, ra, rb      ; rd = ~ra + rb + 1, update         XER overflow bits
    subfo.  rd, ra, rb      ; rd = ~ra + rb + 1, update cr0 and XER overflow bits

    ; subtract from and set carry
    subfc   rd, ra, rb      ; rd = ~ra + rb + 1, update carry
    subfc.  rd, ra, rb      ; rd = ~ra + rb + 1, update carry and cr0
    subfco  rd, ra, rb      ; rd = ~ra + rb + 1, update carry         and XER overflow bits
    subfco. rd, ra, rb      ; rd = ~ra + rb + 1, update carry and cr0 and XER overflow bits

    ; subtract from extended
    subfe    rd, ra, rb     ; rd = ~ra + rb + carry, update carry
    subfe.   rd, ra, rb     ; rd = ~ra + rb + carry, update carry and cr0
    subfeo   rd, ra, rb     ; rd = ~ra + rb + carry, update carry         and XER overflow bits
    subfeo.  rd, ra, rb     ; rd = ~ra + rb + carry, update carry and cr0 and XER overflow bits

    ; subtract from minus one extended
    subfme   rd, ra         ; rd = ~ra + carry + ~0, update carry
    subfme.  rd, ra         ; rd = ~ra + carry + ~0, update carry and cr0
    subfmeo  rd, ra         ; rd = ~ra + carry + ~0, update carry         and XER overflow bits
    subfmeo. rd, ra         ; rd = ~ra + carry + ~0, update carry and cr0 and XER overflow bits

    ; subtract from zero extended
    subfze   rd, ra         ; rd = ~ra + carry, update carry
    subfze.  rd, ra         ; rd = ~ra + carry, update carry and cr0
    subfzeo  rd, ra         ; rd = ~ra + carry, update carry         and XER overflow bits
    subfzeo. rd, ra         ; rd = ~ra + carry, update carry and cr0 and XER overflow bits

    ; subtract from immediate and set carry
    subfic  rd, ra, imm16   ; rd = ~ra + (int16_t)imm16 + 1, update carry
</pre>
<p>
Note that the instruction is "subtract from", not "subtract".
The second operand is subtracted from the third operand;
in other words, the two operands are backwards.
Fortunately, the assembler provides a family of
synthetic instructions that simply swap the last two operands:
</p>
<pre>
    subf    rd, rb, ra      ; sub  rd, ra, rb
    ; similarly "sub.", "subo", and "subo.".

    subfc   rd, rb, ra      ; subc rd, ra, rb
    ; similarly "subc.", "subco", and "subco.".
</pre>
<p>
Second problem is that there is no
<code>subfis</code> to subtract a shifted immediate,
nor is there <code>subfic.</code> to update flags after subtracting
from an immediate.
But the assembler can synthesize those too:
</p>
<pre>
    addi    rd, ra/0, -imm16 ; subi   rd, ra/0, imm16
    addis   rd, ra/0, -imm16 ; subis  rd, ra/0, imm16
    addic   rd, ra, -imm16   ; subic  rd, ra, imm16
    addic.  rd, ra, -imm16   ; subic. rd, ra, imm16
</pre>
<p>
PowerPC's use of true carry allows this trick to work
while still preserving the semantics of carry and overflow.
</p>
<p>
We wrap up with multiplication and division.
</p>
<pre>
    ; multiply low immediate
    mulli   rd, ra, imm16    ; rd = (int32_t)ra * (int16_t)imm16

    ; multiply low word
    mullw   rd, ra, rb       ; rd = (int32_t)ra * (int32_t)rb
    ; also "mullw.", "mullwo", and "mullwo.".

    ; multiply high word
    mulhw   rd, ra, rb       ; rd = ((int32_t)ra * (int32_t)rb) &gt;&gt; 32
    ; also "mulhw."

    ; multiply high word unsigned
    mulhwu  rd, ra, rb       ; rd = ((uint32_t)ra * (uint32_t)rb) &gt;&gt; 32
    ; also "mulhwu."
</pre>
<p>
The "multiply low" instructions perform the multiplication and return
the low-order 32 bits.
The "multiply high" instructions return the high-order 32 bits.
</p>
<p>
Finally, we have division:
</p>
<pre>
    ; divide word
    divw    rd, ra, rb       ; rd = (int32_t)ra &divide; (int32_t)rb
    ; also "divw.", "divwo", and "divwo.".

    ; divide word unsigned
    divwu   rd, ra, rb       ; rd = (uint32_t)ra &divide; (uint32_t)rb
    ; also "divwu.", "divwuo", and "divwuo.".
</pre>
<p>
If you try to divide by zero or (for <code>divw</code>)
if you try to divide <code>0x80000000</code> by &minus;1,
then the results are garbage,
and if you used the <code>o</code> version of the instruction,
then the overflow flag is set.
No trap is generated.
(If you didn't use the <code>o</code> version, then you get
no indication that anything went wrong.
You just get garbage.)
</p>
<p>
There is no modulus instruction.
If you want to get the remainder, take the quotient,
multiple it by the divisor, and subtract it from the
dividend.
</p>
<p>
Okay, that was arithmetic.
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180809-00/?p=99455">
Next up</a>
are the bitwise logical operators and
combining arithmetic and logical operators to load constants.
</p>
<p>
<b>Bonus snark</b>:
For a reduced instruction set computer,
it sure has an awful lot of instructions.
And we haven't even gotten to control flow yet.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1355895">
				<div id="div-comment-1355895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1355895">
			August 8, 2018 at 9:09 am</a>		</div>

		<p>In the mid-to-late 90s we entered the post-RISC epoch. RISC architectures got more complex while CISC ones migrated to RISC back ends with CISC-to-RISC translation units as front ends (if you read documentation about the Pentium Pro or any newer x86/x64 architecture, make a mental s/micro-op/RISC instruction/). And both introduced advanced techniques such as out-of-order execution, register renaming, branch prediction and speculative execution at about the same time. In the end, the biggest architectural difference between both families is the presence (or absence) of the translation unit.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude odd alt depth-2 parent" id="comment-1355935">
				<div id="div-comment-1355935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1355935">
			August 8, 2018 at 11:26 am</a>		</div>

		<p>Actually not even that, many &#8216;RISC&#8217; machines have translation units so they can run different internal microarchitectures.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1355955">
				<div id="div-comment-1355955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tanveer Badar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1355955">
			August 8, 2018 at 11:40 am</a>		</div>

		<p>All right, they might have translation units but the intention is completely different. In a x86 like CISC architecture, translation unit&#8217;s job is to punch out simpler micro-instructions which are easier to implement, pipeline etc. In processors like MIPS, the translation unit provides architectural emulation and some times bug for bug compatibility.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1355905">
				<div id="div-comment-1355905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1355905">
			August 8, 2018 at 10:13 am</a>		</div>

		<p>If they&#8217;re going to do that with r0 they should have gone all the way and hardwired r0 to 0</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1355965">
				<div id="div-comment-1355965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">HiTechHiTouch</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1355965">
			August 8, 2018 at 11:58 am</a>		</div>

		<p>The IBM way is/was to pass function return values in R0.  Thus R0 was kept accessible for holding stuff.  </p>
<p>The traditional rule is that when address arithmetic (calculation) is involved, R0=constant zero=omitted from the calculation.  Zero in the register field of instructions that directly use the ALU (arithmetic, logical, compare, etc.) refer to the register contents.  In other instructions, a zero in the register field could be used for signaling instruction variations. </p>
<p>Note that I&#8217;m speaking about architectures previous to PowerPC which influenced the designers.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1356375">
				<div id="div-comment-1356375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://peeterjoot.com' rel='external nofollow' class='url'>Peeter Joot</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1356375">
			August 12, 2018 at 6:10 am</a>		</div>

		<p>A commenter wrote: &#8220;The IBM way is/was to pass function return values in R0.&#8221;</p>
<p>That isn&#8217;t the case on AIX.  function return values (and the first param) are always in r3.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1355945">
				<div id="div-comment-1355945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tanveer Badar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1355945">
			August 8, 2018 at 11:37 am</a>		</div>

		<p>Raymond, reduced in &#8220;RISC&#8221; means reduced complexity not reduced number of instructions. If that were the case, most CISC ISA would be called RISC instead.</p>
<p>I hope your bonus chatter was intentional and you are checking how attentive your readers are.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1355975">
				<div id="div-comment-1355975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1355975">
			August 8, 2018 at 1:25 pm</a>		</div>

		<p>&gt; The second operand is subtracted from the third operand; in other words, the two operands are backwards. [and other quotes from previous articles]</p>
<p>Sometimes I wonder if people who design assembly languages deliberately make them awful because it makes them feel more like a Real Programmer.</p>
<p>&lt;flamebait&gt; See also: AT&amp;T syntax for x86 &lt;/flamebait&gt; :-)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1356045">
				<div id="div-comment-1356045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1356045">
			August 9, 2018 at 1:00 am</a>		</div>

		<p>The &#8220;subtract from&#8221; thing is actually there for a reason, namely the immediate variants! Note that &#8220;addi&#8221; has a signed immediate. There&#8217;s no need to have a &#8220;subtract immediate&#8221; instruction because to say subtract 123 from r0, you can just add -123 to it.</p>
<p>However, the variant you can&#8217;t do with a signed &#8220;add immediate&#8221; is &#8221; &#8211; register&#8221;. Which is, conveniently, exactly what &#8220;subfi&#8221; does. For register-register variants, it doesn&#8217;t really matter which convention you choose (regular sub is &#8220;a + ~b + 1&#8221;, subtract-from is &#8220;~a + b + 1&#8221;), but IBM picked the one that makes the immediate forms more useful, while also keeping the instruction encoding regular. PPC is one of relatively few architectures that let you do this in one instruction; on most, you need two instructions (either a load immediate follow by a register-register subtract, or a negate followed by an add-immediate). The only other example I can think of off the top of my head is 32-bit ARM which has &#8220;rsb&#8221; (reverse subtract). (The 64-bit A64 encoding removes it.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1356145">
				<div id="div-comment-1356145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1356145">
			August 9, 2018 at 9:31 am</a>		</div>

		<p>I&#8217;m not talking about the actual operations that are accessible or what the processor does, and don&#8217;t dispute that something like &#8220;subfi&#8221; is be useful in a semantic sense. I&#8217;m just talking about the concrete assembler syntax.</p>
<p>In the case of the sub instructions, the question would be why the &#8216;subf&#8217; form are the &#8220;native&#8221; instructions while the &#8216;sub&#8217; forms are the synthetic instructions. But that&#8217;s just the most recent example. Yesterday there was the &#8220;only a processor&#8217;s mother could love&#8221; comment about <i>crand   4*cr3+eq, 4*cr2+lt, 4*cr6+gt</i> vs <i>crand   14, 8, 25</i>, but even the first of those is pretty terrible compared to something with a more &#8220;native&#8221; syntactic support in the assembler. Even the fact that, in &#8220;native&#8221; syntax, you can&#8217;t tell immediates from register names without knowing what the instruction does because &#8220;r3&#8221; is just written &#8220;3&#8221;.</p>
<p>And you may say this doesn&#8217;t matter because you can just write the asm in the way you want with macros and using the <i>sub</i> synthetic instructions instead of the &#8220;native&#8221; <i>subf</i>, but I think that this is a woefully incomplete solution. It means that all code you might want to read should be written that way, but in reality that won&#8217;t be true. I&#8217;m probably biased by my own uses of assembly, but nearly all ways *I* use it are reading what is produced either by <i>-S</i> to the compiler or by a disassembler. And guess what it will produce? Not <i>sub</i>, but <i>subf</i>. GNU objdump <i>does</i> apparently produce by default the alias-based things like <i>4*cr3+eq</i>, and uses &#8220;r&#8221; prefixes for registers; Raymond earlier wrote that the Windows disassembler substitutes some, but not all, of those symbolic names. (And like I said, even &#8220;4*cr3+eq&#8221; is pretty awful, especially if the assembler would accept a mistaken &#8220;cr3+eq&#8221; thing.) Apparently neither GCC nor Clang do either of these things with <i>-S</i> however, by default. (I didn&#8217;t play around with options.)</p>
<p>You might argue that it&#8217;s closer to the actual instruction encoding, but I don&#8217;t think this is a great argument either. Again I&#8217;m probably biased by my own uses of assembly, but I (i) use asm a lot, especially if you include reading, and (ii) almost never care about the actual physical encoding in machine code. I suspect that&#8217;s pretty typical.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1356435">
				<div id="div-comment-1356435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vas Crabb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1356435">
			August 12, 2018 at 11:08 pm</a>		</div>

		<p>PowerPC is regular enough that you can disassemble a lot of it mentally (provided you can &#8220;see&#8221; bitfields in your head).  You just need to remember the fields are 6-5-5-5-10-1 for most instructions.  The fields three 5-bit fields line up with the three instruction operands.  This gives you a bit of inconsistency like stores having the source register (officially the &#8220;target register&#8221;) on the left, and the &#8220;subtract from&#8221; syntax, but it makes dealing with the machine code by hand easier.  Contrast this with SPARC where the order of operands in the assembly language differs from the order of fields in the instruction encoding.  PowerPC is easier to deal with if you need to actually deal with the instruction encoding.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1356175">
				<div id="div-comment-1356175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1356175">
			August 9, 2018 at 1:34 pm</a>		</div>

		<p>This got a bit mangled due to careless markup on my side. It was intended to read &#8220;immediate &#8211; register&#8221;, but I foolish put the word &#8220;immediate&#8221; in angle brackets. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1356205">
				<div id="div-comment-1356205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1356205">
			August 10, 2018 at 6:22 am</a>		</div>

		<p>&#8220;The “subtract from” thing is actually there for a reason.&#8221;</p>
<p>The assembler syntax (in this case, the order of source and destination of the OP) should be consistent, regardless of how the bits in the actual instruction are assigned.</p>
<p>For an extreme example of instruction encoding, see 4.6.12 T4, an ARM Thumb-2 instruction: <a href="http://read.pudn.com/downloads159/doc/709030/Thumb-2SupplementReferenceManual.pdf" rel="nofollow">http://read.pudn.com/downloads159/doc/709030/Thumb-2SupplementReferenceManual.pdf</a>  (taken from <a href="https://googleprojectzero.blogspot.com/2017/04/over-air-exploiting-broadcoms-wi-fi_4.html" rel="nofollow">https://googleprojectzero.blogspot.com/2017/04/over-air-exploiting-broadcoms-wi-fi_4.html</a>). It&#8217;s the job of the assembler to put it all together in the right form and order.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bbanelli odd alt thread-even depth-1 parent" id="comment-1355995">
				<div id="div-comment-1355995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/bbanelli' rel='external nofollow' class='url'>bbanelli</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1355995">
			August 8, 2018 at 1:59 pm</a>		</div>

		<p>Well, except &#8220;reduced&#8221; doesn&#8217;t really implies bare number of instructions, rather their complexity (or simplicity, that is), right?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1356125">
				<div id="div-comment-1356125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wear</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1356125">
			August 9, 2018 at 7:33 am</a>		</div>

		<p>One would assume that implementing 1 instruction is simpler than implementing 2 which in turn means that reduced complexity would imply reduced number of instructions.</p>
<p>Also it&#8217;s Bonus snark which would imply it&#8217;s not serious.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1356035">
				<div id="div-comment-1356035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vas Crabb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1356035">
			August 9, 2018 at 12:57 am</a>		</div>

		<p>Ah, the tricksy r0.  The Apple assembler actually required you to use r0, r1, r2, etc. when referring to registers, and 0 for constant zero.  It would throw an error if you wrote r0 when a zero that field represents constant zero, and vice versa, to help avoid confusion.  On the other hand, the IBM assembler doesn&#8217;t accept r0, r1, r2, etc. and requires you to just use numbers everywhere.  You could make macros, but that wouldn&#8217;t get you you the safety benefit.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1356245">
				<div id="div-comment-1356245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1356245">
			August 10, 2018 at 8:37 am</a>		</div>

		<p>&#8220;The IBM assembler doesn&#8217;t accept r0, r1, etc.&#8221;  </p>
<p>Which IBM assembler are you talking about?  I wrote a lot of code in IBM S/370 and S/390 assembler (Assembler G, Assembler H, etc.) for many years.  We absolutely used R0, R1, etc. in our code.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1356495">
				<div id="div-comment-1356495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1356495">
			August 13, 2018 at 8:19 am</a>		</div>

		<p>Of course, you might have been talking about &#8220;the IBM assembler for PowerPC&#8221;.  In which case you may well be right.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1356565">
				<div id="div-comment-1356565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vas Crabb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1356565">
			August 13, 2018 at 8:32 pm</a>		</div>

		<p>Yeah, I was talking about the IBM POWER/PowerPC assembler for AIX on RS/6000 (and similarly the Apple PowerPC assembler) back in the &#8217;90s.  It&#8217;s a bit of a weird implementation choice given they already allowed rN syntax on S/390 etc.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1356075">
				<div id="div-comment-1356075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1356075">
			August 9, 2018 at 5:15 am</a>		</div>

		<p>Subtract from? Are these guys looking through microcode-coloured glasses?</p>
<p>I tried to work out what the difference between &#8220;add minus one extended&#8221; and a hypothetical &#8220;subtract zero extended&#8221; (which is the operation I&#8217;d want to use) but I can&#8217;t tell whether the carry semantics are the same.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1356115">
				<div id="div-comment-1356115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vas Crabb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1356115">
			August 9, 2018 at 7:18 am</a>		</div>

		<p>Yes, that&#8217;s the whole point of it.  It&#8217;s to apply the borrow when you want to subtract a 32-bit value from a 64-bit value.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1356285">
				<div id="div-comment-1356285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180808-00/?p=99445#comment-1356285">
			August 10, 2018 at 12:54 pm</a>		</div>

		<p>Even today, is there any compiler that can use that much instruction variations for such simple operations like integer addition/subtraction?</p>
<p>Also: Did they cut the more useful features, because they wasted too much OP codes for every thinkable variation of things like that?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

