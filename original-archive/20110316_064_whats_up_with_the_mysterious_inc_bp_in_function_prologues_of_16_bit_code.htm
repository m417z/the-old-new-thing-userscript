<html>
<head>
<title>What's up with the mysterious inc bp in function prologues of 16-bit code?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What&#8217;s up with the mysterious inc bp in function prologues of 16-bit code?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 16, 2011 / year-entry #65</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>24</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A little while ago, we learned about the EBP chain. The EBP chain in 32-bit code is pretty straightforward because there is only one type of function call. But in 16-bit code there are two types of function calls, the near call and the far call. A near call pushes a 16-bit return address on...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A little while ago, <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/03/09/10138401.aspx"> we learned about the EBP chain</a>. The EBP chain in 32-bit code is pretty straightforward because there is only one type of function call. But in 16-bit code there are two types of function calls, the <i>near call</i> and the <i>far call</i>.</p>
<p> A <i>near call</i> pushes a 16-bit return address on the stack before branching to the function entry point, which must reside in the same code segment as the caller. The function then uses a <code>ret</code> instruction (a <i>near return</i>) when it wants to return to the caller, indicating that the CPU should resume execution at the specified address within the same code segment. </p>
<p> By comparison, a <i>far call</i> pushes both the segment (or <i>selector</i> if in protected mode) and the offset of the return address on the stack (two 16-bit values), and the function being called is expected to use a <code>retf</code> instruction (a <i>far return</i>) to indicate that the CPU should pop two 16-bit values off the stack to determine where execution should resume. </p>
<p> When Windows was first introduced, it ran on an 8086 with 384KB of RAM. This posed a challenge because the 8086 processor had no memory manager, had no CPU privilege levels, and had no concept of task switching. And in order to squeeze into 384KB of RAM, Windows needed to be able to load code from disk on demand and discard it when memory pressure required it. </p>
<p> One of the really tricky parts of the real-mode memory manager was fixing up all the function pointers when code was loaded and unloaded. When you unloaded a function, you had to make sure that any existing code in memory that called that function didn't actually call it, because the function wasn't there. If you had a memory manager, you could mark the segment or page not present, but there is no such luxury on the 8086. </p>
<p> There are multiple parts to the solution, but the part that leads to the answer to the title question is the way the memory manager patched up all the stacks in the system. After all, if you discarded a function, you had to make sure that any reference to that function as a return address on somebody's stack got fixed up before the code tried to execute that <code>retf</code> instruction and found itself returning to a function that didn't exist. </p>
<p> And that's where <a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/02/47184.aspx#47283"> the mysterious <code>inc bp</code> came from</a>. </p>
<p> The first rule of stack frames in real-mode Windows is that <i>you must have a bp-based stack frame</i>. FPO was not permitted. (Fortunately, FPO was also not very tempting because the 16-bit instruction set <a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/02/47184.aspx"> made it cumbersome to access stack memory by means other than the <code>bp</code> register</a>, so the easiest way to do something was also the right way.) In other words, the first rule required that every stack have a valid <code>bp</code> chain at all times. </p>
<p> The second rule of stack frames in real-mode Windows is that if you are going to return with a <code>retf</code>, then <i>you must increment the <code>bp</code> register before you push it</i> (and must therefore perform the corresponding decrement after you pop it). This second rule means that code which walks the <code>bp</code> chain can find the next function up the stack. If <code>bp</code> is even, then the function will use a near return, so it looks at the 16-bit value stored on the stack after the <code>bp</code> and doesn't change the <code>cs</code> register. On the other hand, if the <code>bp</code> is odd, then it knows to look at both the 16-bit offset and the 16-bit segment that were pushed on the stack. </p>
<p> Okay, so let's put it all together: When code got discarded, the kernel walked all the stacks in the system (which it could now do due to these two rules), and if it saw that a return address corresponded to a function that got discarded, it patched the return address to point to a chunk of code which called back into the memory manager to reload the function, re-patch all the return addresses so they now point to the new address where the function got loaded (probably different from where the function was when it was discarded), and then jumped back to the original code as if nothing had happened. </p>
<p> I continue to be amazed at how much Windows&nbsp;1.0 managed to accomplish given that it had so little to work with. It even used an LRU algorithm to choose which functions to discard by implementing a software version of the "accessed bit", something that modern CPUs manage in hardware. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-901633">
				<div id="div-comment-901633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tyler Durden</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-901633">
			March 16, 2011 at 7:10 am</a>		</div>

		<p>The first rule of stack frames in real-mode Windows is: do not talk about stack frames in real-mode Windows.</p>
<p>The second rule of stack frames in real-mode Windows is: DO NOT TALK ABOUT STACK FRAMES IN REAL-MODE WINDOWS.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-901643">
				<div id="div-comment-901643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-901643">
			March 16, 2011 at 7:54 am</a>		</div>

		<p>Ah, an 8086. &nbsp;Was that the one that ran at 4.77 MHz?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-901673">
				<div id="div-comment-901673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-901673">
			March 16, 2011 at 8:43 am</a>		</div>

		<p>As far as I know, these could be omitted without issue on Win95. I tried it but well could have missed something nasty.</p>
<div class="post">[<i>As far as I know, Windows 95 didn&#39;t run the real-mode kernel. (Mind you, debuggers would generate bad stack traces if you didn&#39;t mark your frames correctly.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-nathan_works odd alt thread-odd thread-alt depth-1" id="comment-901683">
				<div id="div-comment-901683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/nathan_works' rel='external nofollow' class='url'>nathan_works</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-901683">
			March 16, 2011 at 8:45 am</a>		</div>

		<p>That is really, really fascinating.. I remember writing a very interesting memory manager for the NACHOS in college, where you didn&#39;t get quite down to this level.. Brilliant engineering..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-901693">
				<div id="div-comment-901693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">blah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-901693">
			March 16, 2011 at 9:10 am</a>		</div>

		<p>I&#39;m not surprised at the accomplishment. It was not the Ballmer era.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-901713">
				<div id="div-comment-901713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DonH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-901713">
			March 16, 2011 at 9:58 am</a>		</div>

		<p>Actually, blah, it was the Ballmer era. &nbsp;Back in the early Windows era Steve wasn&#39;t the company president, he was the head of the Systems division.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-901733">
				<div id="div-comment-901733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">benjamin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-901733">
			March 16, 2011 at 11:10 am</a>		</div>

		<p>Nice. These are the kinds of articles that make me love this blog.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-901753">
				<div id="div-comment-901753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-901753">
			March 16, 2011 at 12:34 pm</a>		</div>

		<p>I have often wondered why the sp/esp register is not default choice for referencing the stack. Supposedly the compiler has to keep track of the pushs/pops anyway, so it could just compute the resulting offset from sp/esp, no need to use bp/ebp.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-901763">
				<div id="div-comment-901763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-901763">
			March 16, 2011 at 12:46 pm</a>		</div>

		<p>Wow, implementing paging without a memory manager&#8211;kind of reminds me of the Boehm garbage collector, which does garbage collection in native C.</p>
<p>So that hot-patching maneuver handles fixing up the running stacks, but how about fixing jumps in the rest of the code to the discarded functions? &nbsp;As in, say I&#39;m running along, and a few instructions ahead of EIP is a jump to another procedure. &nbsp;If the kernel wants to discard that procedure, it has to find that jump address in my code, and redirect it to a page fault handler, so that when my process gets to it, it will call the procedure and fault the code back in. &nbsp;How does it find all of the references to that function across the program, so that it can patch them all up?</p>
<p>It would get even crazier if you&#39;re calculating the addresses procedurally, or storing function pointers for things like callbacks or C++ vtbl entries&#8211;I&#39;m not sure I understand how the kernel could possibly find all of these. &nbsp;Could you elaborate a bit more on how it pulled off this voodoo?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-901773">
				<div id="div-comment-901773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">silasd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-901773">
			March 16, 2011 at 12:47 pm</a>		</div>

		<p>@rs: the 8086 instruction set doesn&#39;t let you reference the stack via SP. &nbsp;Only BP, or (with segment override) BX, SI, DI, or various combinations of those four registers. &nbsp;See <a rel="nofollow" target="_new" href="http://www.sandpile.org/ia32/opc_rm16.htm" rel="nofollow">http://www.sandpile.org/&#8230;/opc_rm16.htm</a> for details.</p>
<p>The &#39;386 instruction set lets you use just about any 32-bit register or combo you want, and it even works in 16-bit mode. &nbsp;(The high 16 bits of the 32-bit register must be zero, or you get a segmentation violation.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-901783">
				<div id="div-comment-901783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-901783">
			March 16, 2011 at 12:48 pm</a>		</div>

		<p>rs: Congratulations, you&#39;ve just invented FPO (Frame Pointer Optimization).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-901843">
				<div id="div-comment-901843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henning Makholm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-901843">
			March 16, 2011 at 3:26 pm</a>		</div>

		<p>@David Walker: The 4.77 MHz was the original 8088-based IBM Personal Computer. The 8088 was essentially an 8086 with the external data bus narrowed to 8 bits and bus driver logic that would divide each word-sized memory access into two separately addressed byte accesses. It could run somewhat faster than 4.77 MHz, but IBM underclocked it such that it could share an oscillator with circuitry that modulated the NTSC color signal in the composite video output. Once non-IBM manufacturers started producing PC clones, all or most of them used real 8086&#39;s usually clocked at 8 MHz.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-901663">
				<div id="div-comment-901663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-901663">
			March 16, 2011 at 8:27 am</a>		</div>

		<p>Absolutely fascinating. &nbsp;An interesting side effect is that if *any* of the call stacks are hosed and Windows discards a function, the kernel will trash random parts of memory. &nbsp;Not a whole lot could be done about that, though.</p>
<p>Regardless, the solution was quite ingenious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-901863">
				<div id="div-comment-901863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bekenn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-901863">
			March 16, 2011 at 4:11 pm</a>		</div>

		<p>Matt: I believe those offsets are stored as data in the executable image.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-901873">
				<div id="div-comment-901873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-901873">
			March 16, 2011 at 9:21 pm</a>		</div>

		<p>[As far as I know, Windows 95 didn&#39;t run the real-mode kernel.]</p>
<p>FYI, real mode Windows was removed in Windows 3.1.</p>
<div class="post">[<i>I think you missed the joke. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-901883">
				<div id="div-comment-901883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-901883">
			March 16, 2011 at 9:25 pm</a>		</div>

		<p>Even with a 16-bit app running on a 32-bit OS, iretd did not restore the high word of ESP if the SS was a 16-bit stack.</p>
<div class="post">[<i>You have an annoying knack for stating things which are factually correct but completely irrelevant. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-901893">
				<div id="div-comment-901893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-901893">
			March 16, 2011 at 11:55 pm</a>		</div>

		<p>I&#39;d really like to know how they implemented an &quot;access bit&quot; in software! The only thing I can think of is to patch function calls to redirect to an &quot;access bit setter&quot; function, which would set the access bit, patch itself out, and jump to the real function. Does anybody know if I am right, or was it something more clever?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-901983">
				<div id="div-comment-901983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-901983">
			March 17, 2011 at 11:25 am</a>		</div>

		<p>It is such a pity that we might never see the source code for these old versions of Windows (1.0, 3.0, 3.1&#8230;). I hope Microsoft management is enlightened enough to at least escrow the code so it can be published in the future, perhaps after copyright in it runs out.</p>
<p>It might not be of any practical use anymore, but it is an important piece of human computing history.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902033">
				<div id="div-comment-902033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-902033">
			March 17, 2011 at 11:10 pm</a>		</div>

		<p>You do realize that copyright won&#39;t run out until probably the next century, if not longer, right?</p>
<p>No, it would be neat if Microsoft released the code to be studied way before copyright on it runs out &#8211; maybe even this year as say an academic study exercise on how to do frugal computing.</p>
<p>Of course, it makes the assumption that Microsoft can even find the original code&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902053">
				<div id="div-comment-902053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-902053">
			March 18, 2011 at 4:22 am</a>		</div>

		<p>I don&#39;t think find it would be trouble (Microsoft archives a lot of things), but copyright would be stil lproblem due to third &nbsp;party code and possibly other things like patents&#8230; (some might by still in effect)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902203">
				<div id="div-comment-902203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-902203">
			March 18, 2011 at 7:52 am</a>		</div>

		<p>@Klimax: patents are not a problem, since you would not be using the source code for anything, just reading it. If patents were a problem in this case, you would have to license a patent just to read the patent document itself, which is plainly ridiculous.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902223">
				<div id="div-comment-902223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-902223">
			March 18, 2011 at 8:30 am</a>		</div>

		<p>Patent wouldn&#39;t be for &quot;reading&quot;, but distribution of implementation of patent. I wouldn&#39;t be suprised if system is not that broken. (Not aplicable here no sw patents&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902063">
				<div id="div-comment-902063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">j_random_hacker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-902063">
			March 18, 2011 at 4:52 am</a>		</div>

		<p>One thing I&#39;m not quite understanding: If f() calls g() with a far call, then I take it g() will INC BP before PUSH BP; MOV BP,SP. &nbsp;The pushed BP will be odd, and all is good in the world. &nbsp;Now if g() calls h() with a far call, won&#39;t BP already be odd? &nbsp;So that when h() calls INC BP; PUSH BP; MOV BP,SP itself, the pushed value of BP will be *even*.</p>
<p>Perhaps when you said &quot;(and must therefore perform the corresponding decrement after you pop it)&quot; you actually meant &quot;(and must perform the corresponding decrement immediately after *pushing* it)&quot;. &nbsp;At least doing things that way seems to preserve the property that all the &quot;images&quot; of BP that get pushed on the stack are odd if and only if the function expects to be far-called, since BP will be its usual even self at all times, except possibly for a short window around PUSH BP instructions.</p>
<div class="post">[<i>The &quot;MOV BP,SP&quot; makes BP even again. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902293">
				<div id="div-comment-902293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110316-00/?p=11203#comment-902293">
			March 18, 2011 at 11:56 am</a>		</div>

		<p>@j_random_hacker: The value of BP that is put on the stack is the CALLERS frame point (+ 1 if a far call) Then BP is immediately changed to the current functions frame pointer (mov bp, sp)</p>
<p>So at any given time after a functions prologue, the BP register is correctly the frame pointer for that function, untainted by these +1 shenanigans. If it was the callers job to save its own frame pointer, then FPO would not even be possible&#8230; so it will always be the callee&#39;s job, not the callers, to save the frame pointer state.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

