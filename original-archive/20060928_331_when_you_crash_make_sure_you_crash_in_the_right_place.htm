<html>
<head>
<title>When you crash, make sure you crash in the right place</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When you crash, make sure you crash in the right place</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 28, 2006 / year-entry #332</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time, I recommended that functions should just crash when given invalid pointers. There's a subtlety to this advice, however, and that's making sure you crash in the right place. If your function and your function's caller both reside on the same side of a security boundary, then go ahead and crash inside your function....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Last time, I recommended that functions should just crash when given invalid pointers. There's a subtlety to this advice, however, and that's making sure you crash in the right place.</p>
<p> If your function and your function's caller both reside on the same side of a security boundary, then go ahead and crash inside your function. If the caller is a bad guy who is trying to get your function to crash, then there's nothing the caller has accomplished if your function runs in the same security context as the caller. After all, if the caller wanted to make your program do something bad, it could've just done that bad thing itself! If it gave you a pointer to invalid memory and you crashed trying to access it, well the caller could have accomplished the same thing by just accessing the invalid memory directly. </p>
<p> If your function resides on the other side of a security boundary, however, then having your function crash or behave erratically gives the malicious caller a power which he did not already have. For example, your function may reside in a service or local server, where the call arrives from another process. A malicious caller can pass intentionally malformed data to you via some form of IPC, causing your service or local server to crash. Or your function might reside in the same process as the caller but under a different security context. For example, it might be impersonating, or it may be operating on untrusted data. </p>
<p> Another example of a security boundary is the boundary between user mode and kernel mode. Kernel mode cannot crash on parameters passed from user mode, because kernel mode runs at a higher protection level from user mode. </p>
<p> In these cases, you want to make sure you crash in the correct context. In the IPC case, there typically will be a stub on the client side that does the hard work of taking the parameters and packaging them up for IPC. If the stub is given an invalid pointer, it should crash <strong>in the stub</strong>, so that the crash occurs in the same security context as the caller. A caller who passes an invalid pointer by mistake can then debug the crash in a context that is meaningful to the caller. (Of course, a malicious caller won't use your stub but will instead package the data manually and IPC it directly to the server. Your server can't crash on malicious inbound data, since that data came from a different security context.) </p>
<p> If you're feeling really ambitious (and few people do), you can have the server react to malformed data by returning a special error code, which the stub detects and converts to an exception. Again, this doesn't do anything to crash the malicious caller, because the malicious caller is bypassing your stub. But it may help the caller who thought it was passing a valid pointer. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-425363">
				<div id="div-comment-425363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DeepICE2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-425363">
			September 28, 2006 at 11:02 am</a>		</div>

		<p>Well the type of errors that you would choke on in a IPC scenerio is different from the type of errors that would really mess you up localy.</p>
<p>Most IPC calls cannot actually refer to memory positions / pointer at the phyisical server hardware level &#8211; rather they will refer to a special object created and manged by your own service &#8211; that is definatlly something that your service should be able to validate without bringing down the whole service.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-425373">
				<div id="div-comment-425373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-425373">
			September 28, 2006 at 11:10 am</a>		</div>

		<p>When you say &#8220;Kernel mode cannot crash on parameters passed from user mode, because kernel mode runs at a higher protection level from user mode&#8221; and &#8220;Your server can&#8217;t crash on malicious inbound data, since that data came from a different security context&#8221;, do you mean &#8220;shouldn&#8217;t&#8221; instead of &#8220;can&#8217;t&#8221;? &nbsp;</p>
<p>Kernel mode and server code CAN crash wherever they are poorly coded, or rely on invalid incoming pointers without checking them. &nbsp;I don&#8217;t understand the &#8220;can&#8217;t&#8221; here.</p>
<div class="post">[<i>Yes, that was a prescriptive &#8220;can&#8217;t&#8221;, not a descriptive one. In the same way that you can&#8217;t drive a car without a license. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-425383">
				<div id="div-comment-425383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-425383">
			September 28, 2006 at 11:16 am</a>		</div>

		<p>Can you really pass raw pointers via normal NT kernel/userspace IPC? That sounds like a bad idea.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-425403">
				<div id="div-comment-425403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-425403">
			September 28, 2006 at 11:57 am</a>		</div>

		<p>David: &nbsp;It makes sense that the ambiguity should be resolved as should, as you stated, though &quot;must not&quot; seems like the more formal way of stating it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-425423">
				<div id="div-comment-425423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-425423">
			September 28, 2006 at 12:19 pm</a>		</div>

		<p>I would also suggest changing &#8216;cannot&#8217; and &#8216;can&#8217;t&#8217; to &#8216;must not&#8217; and &#8216;mustn&#8217;t&#8217;.</p>
<p>Chris: kernel mode simply reads directly from the user mode addresses. User mode has the top 2GB (3GB if booted /3GB) (variable between 2GB and 3GB if booted /USERVA) (8TB on x64) of the address space, kernel mode the bottom 2GB (1GB, 4GB minus whatever user-mode got, 8TB). When calling into kernel mode directly, or taking an interrupt, the user-mode addresses are still valid for the process that called into kernel mode, or that was running on the processor that handled the interrupt.</p>
<p>Kernel mode routines that have to do something asynchronously &#8211; most of them &#8211; have to copy or map the user&#8217;s buffer into kernel address space so that when an interrupt occurs, signalling the end of the operation, the addresses are correct. This is because the processor could have been switched to a thread in another process in the meantime (or the interrupt could happen on a different processor).</p>
<p>From the perspective of the user-mode code, the thread could be making a blocking call, but the kernel does not wait for the request to complete. Instead it notes that the thread needs to be woken up when the I/O completes, marks the thread as blocking (so won&#8217;t be scheduled), and finds a different thread to run.</p>
<p>Alternatively the thread might be making an asynchronous call, in which case the kernel might want to make a copy of the user mode buffer so that the program doesn&#8217;t change the data while the asynchronous action is occurring, at least for any part of the buffer that influences a security decision.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-425463">
				<div id="div-comment-425463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-425463">
			September 28, 2006 at 1:25 pm</a>		</div>

		<p>Mike: thanks; I&#8217;d forgotten about the 2/2 split. What&#8217;s confusing me here is Raymond&#8217;s assertion of the need to validate the pointer in the userspace glue code rather than in the kernel. Or do I misunderstand?</p>
<p>I guess my question is: (a) can you do anything useful with a pointer direct from userspace and if so, then (b) if you try to use such a pointer and it&#8217;s a bad one, you&#8217;ve just invoked a BSOD, right? Iff that&#8217;s all true, it seems rather dangerous, because somebody could craft malicious glue code.</p>
<p>I&#8217;m sure I&#8217;m misunderstanding something. :) My experience with kernel development is with OS X, where you have a bit of extra overhead with kernel&lt;-&gt;user IPC, but it is completely safe &#8212; as long as the kernel-side bits validate all of the parameters.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-425473">
				<div id="div-comment-425473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-425473">
			September 28, 2006 at 1:50 pm</a>		</div>

		<p>Re: <br />&#8212;- <br />In the IPC case, there typically will be a stub on the client side that does the hard work of taking the parameters and packaging them up for IPC. If the stub is given an invalid pointer, it should crash in the stub, so that the crash occurs in the same security context as the caller. <br />&#8212;- </p>
<p>This approach might be useful for debuggability (so we crash &#8216;early&#8217;) but it is insufficient for security. </p>
<p>If the parameter-validation functions are in the same security context as the code that conjured up the parameter values, then a bad guy can let the check proceed, and then (maybe via a debugger) get in and poison the checked values. </p>
<p>In order words, for security, the check MUST be made in a context that is inaccessible to the caller. Which is to say, on the &#8216;secure&#8217; side of the barrier. </p>
<p>For user/kernel interfaces, this means that the check has to be made in kernel mode. &nbsp;Not only that, but you need to copy the arguments out of user space before you validate them. Otherwise, something else in user space (another thread, say) could poison the args after they had been validated by the thread on which the kernel service was called. </p>
<p>I&#8217;m not saying all data has to be copied in &#8212; &nbsp;only that which has a security significance. &nbsp;So you might need to copy a pointer, but not necessarily the thing that is pointed to. Though you&#8217;ll need to take care in case the pointed-to thing gets invalidated (removed from the address space) after the pointer was copied and checked. </p>
<p>So, the check has to be made in secure context. </p>
<p>The crash, of course, must occur back in the caller&#8217;s insecure context. &nbsp;For the user/kernel case, that means reflecting the access-violation exception back to user mode. </p>
<p>Back in the IPC case, the server has to perform any necesarary validation even if the client stub already did it. (&#8220;Never crash because of something you see in a network message&#8221;). &nbsp;The job might be rather easier, since it&#8217;s probable that the args have been serialized for transport on the wire in such a way that there are no pointers that need to be checked. </p>
<div CLASS=post>[<i>Um, didn&#8217;t I say this in my parenthetical? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-425483">
				<div id="div-comment-425483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JeffCurless</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-425483">
			September 28, 2006 at 2:03 pm</a>		</div>

		<p>@Mike: &nbsp;You have that backwords, kernel is the top 2gb, user is the bottom. &nbsp;Of course there are the flags which change the relative sizes of the address spaces.</p>
<p>@Chris: &nbsp;Raymond didn&#8217;t mean all access checks are in user mode. &nbsp;In the case of the user-&gt;kernel, the access check MUST be done in the kernel&#8230; or else things wouldn&#8217;t be too secure, would they!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-425523">
				<div id="div-comment-425523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dare</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-425523">
			September 28, 2006 at 3:57 pm</a>		</div>

		<p>Mike: Why do you think try/except can&#8217;t be used in kernel mode? &nbsp;The following MSDN article (reposted from a comment made yesterday) says that exceptions can be handled (with some limitations, perhaps):</p>
<p>Handling exceptions in kernel mode:<br />
<br /><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/kernel_d/hh/Kernel_d/other_f7259c51-1557-42e6-8264-ac8dae0177e3.xml.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/kernel_d/hh/Kernel_d/other_f7259c51-1557-42e6-8264-ac8dae0177e3.xml.asp</a><br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-425513">
				<div id="div-comment-425513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-425513">
			September 28, 2006 at 2:42 pm</a>		</div>

		<p>It&#8217;s interesting (well to me anyway) that the kernel-mode discussion comes around full circle. &nbsp;The kernel needs to protect itself from bad data coming from user mode, usually via copying the data while under a try/except. &nbsp;However, once in the kernel everything is considered trusted and if you touch an invalid address you bluescreen, and try/except *cannot* stop it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-425563">
				<div id="div-comment-425563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-425563">
			September 28, 2006 at 9:58 pm</a>		</div>

		<p>I agree with Raymond here, user mode code should crash and burn (and lousy programmer should be flogged with shielded SCSI cable in public) if it passes invalid arguments to the API. I am sure that having to check those arguments both in kernel and in user mode slows things down a lot without doing any good.</p>
<p>So the only place where you should check for argument validity is in kernel mode because bad guys have already learned to bypass the user mode stubs and are &quot;ringing in&quot; directly.</p>
<p>Link:<br />
<br /><a rel="nofollow" target="_new" href="http://www.metasploit.com/users/opcode/syscalls.html" rel="nofollow">http://www.metasploit.com/users/opcode/syscalls.html</a><br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-425593">
				<div id="div-comment-425593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.explorewindows.com' rel='external nofollow' class='url'>Vipin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-425593">
			September 28, 2006 at 11:01 pm</a>		</div>

		<p>Miral said:-<br />
<br />&quot;I must admit, it would have been nice if some of the WinAPI functions would have &#8216;crashed&#8217;/thrown an exception if given garbage, rather than simply returning error codes that nobody remembers to check :) &nbsp;But I can see why they didn&#8217;t, since the structured exception mechanism is a pain in the butt to work with and C++ exceptions aren&#8217;t portable (and didn&#8217;t really exist back then anyway).&quot;</p>
<p>Firstly, the win32 api code as I understand is written by Microsoft in &quot;C&quot;. Someone from Microsoft correct me if I am wrong with the language part.Which api according to you should crash? Ofcourse there are some apis which do crash on being passed invalid arguements.That is not because they intentionally crash, but they crash when using invalid parameters. Also exception handling makes the process slow, even if you use within your application, there is always a rule to use it with caution.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-425603">
				<div id="div-comment-425603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-425603">
			September 28, 2006 at 11:07 pm</a>		</div>

		<p>There is a lot of C++ in Windows. &nbsp;I couldn&#8217;t tell you where the C++ stops and the C starts, but when I have to step into windows to try to debug strange issues, I often find myself in C++ named routines. &nbsp;OLE is full of C++.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-425613">
				<div id="div-comment-425613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.explorewindows.com' rel='external nofollow' class='url'>Vipin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-425613">
			September 28, 2006 at 11:16 pm</a>		</div>

		<p>Tim, what about winapi? I will be surprised if it were to be in c++</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-425533">
				<div id="div-comment-425533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miral</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-425533">
			September 28, 2006 at 8:48 pm</a>		</div>

		<p>I&#8217;m assuming that the &quot;security boundaries&quot; you&#8217;re speaking of refer to any IPC, not just cross-user IPC? &nbsp;Because otherwise you can run afoul of cases where some third-party system is assigning additional privileges on a per-process basis without actually running at different official privilege levels. &nbsp;(Application layer firewalls are a good example of this &#8212; only some processes are permitted to open ports or connect to the Internet.)</p>
<p>So essentially this whole thing boils down to &quot;in internal functions, crash rather than returning error codes. &nbsp;For any function that&#8217;s exposed to the outside world, return error codes instead of crashing &#8212; and if you want to be helpful, *also* have a client-side wrapper that makes it crash when it receives that error code.&quot;</p>
<p>I must admit, it would have been nice if some of the WinAPI functions would have &#8216;crashed&#8217;/thrown an exception if given garbage, rather than simply returning error codes that nobody remembers to check :) &nbsp;But I can see why they didn&#8217;t, since the structured exception mechanism is a pain in the butt to work with and C++ exceptions aren&#8217;t portable (and didn&#8217;t really exist back then anyway).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kjkhyperion odd alt thread-odd thread-alt depth-1" id="comment-425663">
				<div id="div-comment-425663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-425663">
			September 29, 2006 at 9:42 am</a>		</div>

		<p>Mike, you are right and wrong at the same time. In kernel mode you *can* use try/except to protect against bad memory, but there are cases in which it won&#8217;t help. For example, if the memory wasn&#8217;t mapped to a physical address, it will be a BSOD (you are supposed to use probe&amp;lock in that case). Or if the code was executing in a hardware interrupt (IRQL &gt; DISPATCH_LEVEL), any SEH exception is automatically fatal, because virtually no part of the kernel is designed to be used in a more critical context than a software interrupt (except of course the DPC queue API to schedule a software interrupt that handles a hardware interrupt&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-426073">
				<div id="div-comment-426073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-426073">
			September 29, 2006 at 5:38 pm</a>		</div>

		<p>Raymond, you state in your previous post that one should never use IsBadXXXPtr, while in this post you state that code that takes input from another security context should not crash on said input but should return a &#8220;special&#8221; error code. So, assuming I want to make sure that an incoming pointer argument does not cause me to inadvertently trip some other thread&#8217;s stack guard page, how do I validate the incoming data? Do I use VirtualQuery? Expensive! What are my alternatives?</p>
<div class=post>[<i>Don&#8217;t pass pointers across security boundaries. (As always, I&#8217;m providing ground rules not absolutes; there may be specific cases that come with their own guidance, such as the user mode/kernel mode boundary.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-426123">
				<div id="div-comment-426123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RichardRudek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-426123">
			September 29, 2006 at 8:42 pm</a>		</div>

		<p>Thanks JeffCurless. Mike nearly had me go off and reread the Kernel documention, in fear of needing to change my meme(*) about the 2GB/2GB split.</p>
<p>(*) I&#8217;m not sure &quot;meme&quot; is the correct here. Perhaps knowledge tag/phrase is more appropriate. Basically, I remember that to live above the 2GB boundary, code needs to be 32-bit-clean. In other words, all pointer arithmetic has to be done using unsigned 32-bit, and NOT Integer. User code is usually not 32-bit-clean, requiring effort to validate that it is &#8211; all off it !.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-426343">
				<div id="div-comment-426343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://codeka.com/blogs' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-426343">
			October 2, 2006 at 7:40 am</a>		</div>

		<blockquote><p>
  Tim, what about winapi? I will be surprised if it were to be in c++</p>
<p>Newer parts of it are C++, wrapped in a C API. For example, I know the new TaskDialog API in Vista is a wrapper around a C++ object.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-699503">
				<div id="div-comment-699503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.hilpers.com/1240007-win-api-datentypen-frueher-und' rel='external nofollow' class='url'>Win-API-Datentypen fr?her und heute | hilpers</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060928-04/?p=29543#comment-699503">
			January 9, 2009 at 6:55 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.hilpers.com/1240007-win-api-datentypen-frueher-und" rel="nofollow">http://www.hilpers.com/1240007-win-api-datentypen-frueher-und</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

