<html>
<head>
<title>You can read a contract from the other side</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>You can read a contract from the other side</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 26, 2003 / year-entry #178</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20031226-00/?p=41343</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">An interface is a contract, but remember that a contract applies to both parties. Most of the time, when you read an interface, you look at it from the point of view of the client side of the contract, but often it helps to read it from the server side. For example, let's look at...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
An interface is a contract,
but remember that a contract applies to both parties.
Most of the time, when you read an interface,
you look at it from the point of view of the client side of the contract,
but often it helps to read it from the server side.
</p>
<p>
For example, let's look at
<a HREF=http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/programmersguide/shell_adv/conpanel.asp>the
interface for control panel applications</a>.
</p>
<p>
Most of the time, when you're reading this documentation,
you are wearing your "I am writing a Control Panel application" hat.
So, for example, the documentation says
</p>
<blockquote CLASS=q><p>
When the controlling application first loads the Control Panel application,
it retrieves the address of the <b>CPlApplet</b> function and
subsequently uses the address to call the function and pass it messages.
</p>
</blockquote>
<p>
With your "I am writing a Control Panel application" hat,
this means
"Gosh, I had better have a function called CPlApplet
and export it so I can receive messages."
</p>
<p>
But if you are instead wearing your
"I am hosting a Control Panel application" hat,
this means,
"Gosh, I had better call GetProcAddress()
to get the address of the application's CPlApplet function
so I can send it messages."
</p>
<p>
Similarly, under the "Message Processing" section
it lists the messages that are sent from the controlling application
to the Control Panel application.
If you are wearing your
"I am writing a Control Panel application" hat,
this means
"Gosh, I had better be ready to receive these messages in this order."
But if you are wearing your "I am hosting a Control Panel application" hat,
this means "Gosh, I had better send these messages in the order listed."
</p>
<p>
And finally, when it says
"the controlling application release the Control Panel application
by calling the FreeLibrary function,"
your "I am writing a Control Panel application" hat says
"I had better be prepared to be unloaded,"
whereas your "I am hosting a Control Panel application" hat says,
"This is where I unload the DLL."
</p>
<p>
So let's try it.
As always, start with our scratch program and change the WinMain:
</p>
<pre>
<font COLOR=red>#include &lt;cpl.h&gt;</font>

int WINAPI WinMain(HINSTANCE hinst, HINSTANCE hinstPrev,
                   LPSTR lpCmdLine, int nShowCmd)
{
  HWND hwnd;

  g_hinst = hinst;

  if (!InitApp()) return 0;

  if (SUCCEEDED(CoInitialize(NULL))) {/* In case we use COM */

      hwnd = CreateWindow(
          "Scratch",                      /* Class Name */
          "Scratch",                      /* Title */
          WS_OVERLAPPEDWINDOW,            /* Style */
          CW_USEDEFAULT, CW_USEDEFAULT,   /* Position */
          CW_USEDEFAULT, CW_USEDEFAULT,   /* Size */
          NULL,                           /* Parent */
          NULL,                           /* No menu */
          hinst,                          /* Instance */
          0);                             /* No special parameters */
<font COLOR=red>
      if (hwnd) {
        TCHAR szPath[MAX_PATH];
        LPTSTR pszLast;
        DWORD cch = SearchPath(NULL, TEXT("access.cpl"),
                     NULL, MAX_PATH, szPath, &amp;pszLast);
        if (cch &gt; 0 &amp;&amp; cch &lt; MAX_PATH) {
          RunControlPanel(hwnd, szPath);
      }
    }</font>
    CoUninitialize();
  }

  return 0;
}
</pre>
<p>
Instead of showing the window and entering the message loop,
we start acting like a Control Panel host.
Our victim today is access.cpl, the accessibility control panel.
After locating the program on the path,
we ask RunControlPanel to do the heavy lifting:</p>
<pre>
void RunControlPanel(HWND hwnd, LPCTSTR pszPath)
{
<font COLOR=red>  // Maybe this control panel application has a custom manifest
  ACTCTX act = { 0 };
  act.cbSize = sizeof(act);
  act.dwFlags = 0;
  act.lpSource = pszPath;
  act.lpResourceName = MAKEINTRESOURCE(123);
  HANDLE hctx = CreateActCtx(&amp;act);
  ULONG_PTR ulCookie;
  if (hctx == INVALID_HANDLE_VALUE ||
      ActivateActCtx(hctx, &amp;ulCookie)) {</font>

    HINSTANCE hinstCPL = LoadLibrary(pszPath);
    if (hinstCPL) {
      APPLET_PROC pfnCPlApplet = (APPLET_PROC)
        GetProcAddress(hinstCPL, "CPlApplet");
      if (pfnCPlApplet) {
        if (pfnCPlApplet(hwnd, CPL_INIT, 0, 0)) {
          int cApplets = pfnCPlApplet(hwnd, CPL_GETCOUNT, 0, 0);
          //  We're going to run application zero
          //  (In real life we might show the user a list of them
          //  and let them pick one)
          if (cApplets &gt; 0) {
            CPLINFO cpli;
            pfnCPlApplet(hwnd, CPL_INQUIRE, 0, (LPARAM)&amp;cpli);
            pfnCPlApplet(hwnd, CPL_DBLCLK, 0, cpli.lData);
            pfnCPlApplet(hwnd, CPL_STOP, 0, cpli.lData);
          }
        }
        pfnCPlApplet(hwnd, CPL_EXIT, 0, 0);
      }

      FreeLibrary(hinstCPL);
    }
<font COLOR=red>
    if (hctx != INVALID_HANDLE_VALUE) {
      DeactivateActCtx(0, ulCookie);
      ReleaseActCtx(hctx);
    }</font>
  }
}
</pre>
<p>
Ignore the red lines for now; we'll discuss them later.
</p>
<p>
All we're doing is following the specification
but reading it from the host side.
So we load the library, locate its entry point,
and call it with CPL_INIT, then CPL_GETCOUNT.
If there are any control panel applications inside this CPL file,
we inquire after the first one,
double-click it (this is where all the interesting stuff happens),
then stop it.
After all that excitement,
we clean up according to the rules set out for the host
(namely, by sending a CPL_EXIT message.)
</p>
<p>
So that's all. Well, except for the red parts. What's that about?
</p>
<p>The red parts are to support Control Panel applications
that have a custom manifest.
This is something new with Windows XP and is
<a HREF=http://msdn.microsoft.com/library/en-us/shellcc/platform/commctls/userex/cookbook.asp>documented
in MSDN here</a>.
</p>
<p>
If you go down to the
"Using ComCtl32 Version 6 in Control Panel or a DLL That Is Run
by RunDll32.exe" section,
you'll see that the application provides its manifest
to the Control Panel host by attaching it as resource number 123.
So that's what the red code does:
It loads and activates the manifest,
then invites the Control Panel application to do its thing
(with its manifest active), then cleans up.
If there is no manifest, CreateActCtx will return INVALID_HANDLE_VALUE.
We do not treat that as an error,
since many programs don't yet provide a manifest.
</p>
<p><b>Exercise</b>: What are the security implications of passing NULL
as the first parameter to SearchPath?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-118113">
				<div id="div-comment-118113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031226-00/?p=41343#comment-118113">
			December 26, 2003 at 8:54 am</a>		</div>

		<p>Well, someone could either:</p>
<p>Jam a new .cpl in the same dir as the EXE..  Or if they&#8217;re on a LUA, they could put a malicious .cpl in their home directory and set it as the current directory before running your program.  That would let them run their own code, bypassing policies.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-118153">
				<div id="div-comment-118153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031226-00/?p=41343#comment-118153">
			December 26, 2003 at 10:50 am</a>		</div>

		<p>&quot;What are the security implications of passing NULL as the first parameter to SearchPath?&quot;</p>
<p>A rogue access.cpl file could be placed in the current directory, and SearchPath would find it before the one in the system directory. (?)</p>
<p>BTW: Why do some functions (such as this CreateFile and this CreateActCtx) return INVALID_HANDLE_VALUE when they fail while others return zero?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-118163">
				<div id="div-comment-118163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031226-00/?p=41343#comment-118163">
			December 26, 2003 at 10:51 am</a>		</div>

		<p>Somehow I missed Jack&#8217;s comment. Whoops.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-118253">
				<div id="div-comment-118253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.myshoggoth.com/' rel='external nofollow' class='url'>Andrew Boardman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031226-00/?p=41343#comment-118253">
			December 26, 2003 at 4:31 pm</a>		</div>

		<blockquote>
<pre><code>   if (cch &amp;gt; 0 &amp;amp;&amp;amp; cch &amp;lt; MAX_PATH) {
</code></pre>
<p>&gt;          RunControlPanel(hwnd, szPath);<br />
  <br />&gt;      }</p>
<p>Missing a }  :-)
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-118273">
				<div id="div-comment-118273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031226-00/?p=41343#comment-118273">
			December 26, 2003 at 5:50 pm</a>		</div>

		<p>Sorry bout that. Lost during editing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-119843">
				<div id="div-comment-119843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://alias:ndiamond@msdn.discussions.microsoft.com' rel='external nofollow' class='url'>Norman Diamond</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031226-00/?p=41343#comment-119843">
			January 5, 2004 at 8:25 pm</a>		</div>

		<p>Why does INVALID_HANDLE_VALUE even exist?  When CreateFile() fails to open a file, its return value can be either 0 or -1.  The only reliable way to check is to ignore the MSDN Library and just test the result for &lt;= 0.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-119853">
				<div id="div-comment-119853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031226-00/?p=41343#comment-119853">
			January 5, 2004 at 9:44 pm</a>		</div>

		<p>Believe it or not, that&#8217;s a topic I already had planned out for a future entry.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-144873">
				<div id="div-comment-144873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JBohm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031226-00/?p=41343#comment-144873">
			February 16, 2004 at 7:10 pm</a>		</div>

		<p>INVALID_HANDLE_VALUE is -1 cast to the data type HANDLE.  HANDLE is either ULONG_PTR or PVOID depending if STRICT is defined at compile time (always is for C++, optional for C).  In either case, the test &lt;= 0 is wrong because ((HANDLE)-200) is not an error (it is a real handle in some functions) and because ((ULONG_PTR)-1) &gt; 0 .</p>
<p>Anyway, INVALID_HANDLE_VALUE exists just for the benefit of people porting code from the POSIX/UNIX/C functions that return -1 on error rather then NULL, such as creat(), open() lseek() etc.</p>
<p>I have never heard of CreateFile returning NULL, but then my code routinly does:</p>
<p>if (h == INVALID_HANDLE_VALUE) h = NULL;<br />
<br />if (!h)<br />
<br />   ItFailed!</p>
<p>Oh and INVALID_HANDLE_VALUE is a valid handle to the current process (at least on ntoskrnl.exe based operating systems).  It is the success return value from GetCurrentProcess().</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

