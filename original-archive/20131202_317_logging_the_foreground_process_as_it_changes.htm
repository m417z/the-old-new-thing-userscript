<html>
<head>
<title>Logging the foreground process as it changes</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Logging the foreground process as it changes</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 2, 2013 / year-entry #318</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20131202-00/?p=2503</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's Little Program simply logs all changes to the foreground window by recording the path to the application the user switched to. You might use this as part of a usability study to monitor what applications users spend most of their time in. Most of this code is just taking things we already know and...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program simply logs all changes to the foreground
window by recording the path to the application the user switched to.
You might use this as part of a usability study to monitor what
applications users spend most of their time in.
</p>
<p>
Most of this code is just taking things we already know and snapping
them together.
</p>
<ol>
<li>
    <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/03/25/10404940.aspx">
    Using accessibility to monitor events</a>, specifically
    to
    <!-- backref: Playing a sound every time the foreground window changes -->
    monitor foreground changes</a>.</p>
<li><code>Get&shy;Window&shy;Thread&shy;Process&shy;Id</code>
    to get the process ID from a window.</p>
<li><code>Open&shy;Process</code> to get a handle to a process
    given the process ID.</p>
<li><code>Query&shy;Full&shy;Process&shy;ImageName</code> to
    get the path to the application from the handle.
    (For Windows XP, you can use
    <code>Get&shy;Process&shy;Image&shy;File&shy;Name</code>.)
</ol>
<p>
Take our
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/07/23/54576.aspx">
scratch program</a>
and make these changes:
</p>
<pre>
BOOL QueryWindowFullProcessImageName(
    HWND hwnd,
    DWORD dwFlags,
    PTSTR lpExeName,
    DWORD dwSize)
{
 DWORD pid = 0;
 BOOL fRc = FALSE;
 if (GetWindowThreadProcessId(hwnd, &amp;pid)) {
  HANDLE hProcess = OpenProcess(
          PROCESS_QUERY_LIMITED_INFORMATION, FALSE, pid);
  if (hProcess) {
   fRc = QueryFullProcessImageName(
          hProcess, dwFlags, lpExeName, &amp;dwSize);
   CloseHandle(hProcess);
  }
 }
 return fRc;
}
</pre>
<p>
The <code>Query&shy;Window&shy;Full&shy;Process&shy;Image&shy;Name</code>
function is the meat of the program,
performing steps 2&nbsp;through&nbsp;4 above.
</p>
<p>
Now we just hook this up in our event callback function.
This should look really familiar, since we
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/03/25/10404940.aspx">
did pretty much the same thing earlier this year</a>.
</p>
<pre>
BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
 <font COLOR=blue>g_hwndChild = CreateWindow(TEXT("listbox"), NULL,
     LBS_HASSTRINGS | WS_CHILD | WS_VISIBLE | WS_VSCROLL,
     0, 0, 0, 0, hwnd, NULL, g_hinst, 0);
 if (!g_hwndChild) return FALSE;</font>
 return TRUE;
}

<font COLOR=blue>void CALLBACK WinEventProc(
    HWINEVENTHOOK hWinEventHook,
    DWORD event,
    HWND hwnd,
    LONG idObject,
    LONG idChild,
    DWORD dwEventThread,
    DWORD dwmsEventTime
)
{
 if (event == EVENT_SYSTEM_FOREGROUND &amp;amp;
     idObject == OBJID_WINDOW &amp;&amp;
     idChild == CHILDID_SELF)
 {
  PCTSTR pszMsg;
  TCHAR szBuf[MAX_PATH];
  if (hwnd) {
   DWORD cch = ARRAYSIZE(szBuf);
   if (QueryWindowFullProcessImageName(hwnd, 0,
                      szBuf, ARRAYSIZE(szBuf))) {
    pszMsg = szBuf;
   } else {
    pszMsg = TEXT("&lt;unknown&gt;");
   }
  } else {
   pszMsg = TEXT("&lt;none&gt;");
  }

  ListBox_AddString(g_hwndChild, pszMsg);
 }
}</font>

int WINAPI WinMain(HINSTANCE hinst, HINSTANCE hinstPrev,
                   LPSTR lpCmdLine, int nShowCmd)
{
 ...
  ShowWindow(hwnd, nShowCmd);

 <font COLOR=blue>HWINEVENTHOOK hWinEventHook = SetWinEventHook(
     EVENT_SYSTEM_FOREGROUND,
     EVENT_SYSTEM_FOREGROUND,
     NULL, WinEventProc, 0, 0,
     WINEVENT_OUTOFCONTEXT);</font>

  while (GetMessage(&msg, NULL, 0, 0)) {
   TranslateMessage(&msg);
   DispatchMessage(&msg);
  }

  <font COLOR=blue>if (hWinEventHook) UnhookWinEvent(hWinEventHook);</font>
...
}
</pre>
<p>
The main program installs an accessibility hook for the
<code>EVENT_<wbr>SYSTEM_<wbr>FOREGROUND</code> event,
and each time the event fires,
it extracts the process name and logs it to
the screen.
Since the notification is asynchronous, the foreground window
may have been destroyed by the time the notification is received,
so we have to be prepared for that case.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1092473">
				<div id="div-comment-1092473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131202-00/?p=2503#comment-1092473">
			December 2, 2013 at 7:06 am</a>		</div>

		<p>Hmmm I don&#39;t think csrss.exe is all that reasonable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1092653">
				<div id="div-comment-1092653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131202-00/?p=2503#comment-1092653">
			December 3, 2013 at 3:06 am</a>		</div>

		<p>Not sure what QueryProcessFullImageName gets you that GetProcessImageFileName doesn&#39;t, apart from being newer and therefore &quot;obviously&quot; better.</p>
<div class="post">[<em>A much more convenient output format. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1092713">
				<div id="div-comment-1092713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131202-00/?p=2503#comment-1092713">
			December 3, 2013 at 8:07 am</a>		</div>

		<p>Neil, GPIFN gives you the path in &quot;native&quot; format (e.g., &quot;DeviceHarddisk0Partition1WindowsSystem32Ctype.nls&quot;) while QPFIN gives you the option of getting the path in Windows format (e.g., &quot;c:windowssystem32ctype.nls&quot;).</p>
<p>You have to read both function&#39;s docs, though, to find that out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1092873">
				<div id="div-comment-1092873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nitpicker (Corner?)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131202-00/?p=2503#comment-1092873">
			December 3, 2013 at 1:54 pm</a>		</div>

		<p>&gt; Rick C</p>
<p>&gt; &quot;native&quot; format</p>
<p>NT format.</p>
<p>&gt; Rick C</p>
<p>&gt; Windows format</p>
<p>DOS format.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1092903">
				<div id="div-comment-1092903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131202-00/?p=2503#comment-1092903">
			December 3, 2013 at 7:14 pm</a>		</div>

		<p>@Nitpicker: &nbsp;Go back and read the documentation. &nbsp;I used MSDN&#39;s terms. &nbsp;For QPFIM, a value of 1 in dwFlags means &quot;The name should use the native system path format&quot;; a 0 means &quot;The name should use the Win32 path format.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1092913">
				<div id="div-comment-1092913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nitpicker (Corner?)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131202-00/?p=2503#comment-1092913">
			December 3, 2013 at 7:30 pm</a>		</div>

		<p>The &quot;native system&quot; is NT (6.3 now, isn&#39;t it?). The &quot;Win32 path format&quot; is borrowed, for backward compatibility, from DOS (if you gloss over the detail of LFNs).</p>
<p>Remember, this is the same MSDN that seems not to know that there were ANY operating systems before Windows 2000. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1093053">
				<div id="div-comment-1093053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131202-00/?p=2503#comment-1093053">
			December 4, 2013 at 7:11 am</a>		</div>

		<p>Nitpicker, thank you for your valuable contribution to this topic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1093143">
				<div id="div-comment-1093143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nitpicker (Corner?)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131202-00/?p=2503#comment-1093143">
			December 4, 2013 at 3:50 pm</a>		</div>

		<p>Anytime, Rick. :)</p>
<p>(more text to evade the spam blocker)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1093153">
				<div id="div-comment-1093153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131202-00/?p=2503#comment-1093153">
			December 4, 2013 at 4:11 pm</a>		</div>

		<p>@Nitpicker: &nbsp;Your opinion does not trump the documentation, no matter how many smileys you put in your posts. &nbsp;If Microsoft wants to name the underlying kernel format &quot;native&quot; and the Win32 format &quot;Win32&quot;, its up to them, not you. &nbsp;Historical names don&#39;t matter either, otherwise we would all be using ridiculously old names for everything.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

