<html>
<head>
<title>Extracting pages from a PDF document and saving them as separate image files, C++/CX edition with co_await</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Extracting pages from a PDF document and saving them as separate image files, C++/CX edition with co_await</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 30, 2017 / year-entry #150</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170630-00/?p=96495</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Everybody seems to be converging on C#.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<!-- backref: Extracting pages from a PDF document and saving them as separate image files, C++/CX edition with explicit tasks -->
Last time</a>,
we converted the
C++/CX version of the
<a HREF="https://github.com/Microsoft/Windows-universal-samples/tree/v1.0.11/Samples/PdfDocument">
PDF Document</a> sample program so that it
saved the pages to disk as image files,
using PPL tasks.
Today we'll do it again, but using the proposed
<code>co_await</code> syntax.
</p>
<pre>
<font COLOR="blue">#include &lt;pplawait.h&gt;</font>

void Scenario1_Render::ViewPage()
{
    ViewPageAsync();
}

task&lt;void&gt; Scenario1_Render::ViewPageAsync()
{
    rootPage-&gt;NotifyUser("", NotifyType::StatusMessage);

    // If the text is not a valid number, then wcstoul returns 0,
    // which is an invalid page number, so we don't need to
    // special-case that possibility.
    unsigned long pageNumber = wcstoul(PageNumberBox-&gt;Text-&gt;Data(),
                                       nullptr, 10);

    if ((pageNumber &lt; 1) || (pageNumber &gt; pdfDocument-&gt;PageCount))
    {
        rootPage-&gt;NotifyUser("Invalid page number.",
                             NotifyType::ErrorMessage);
        return;
    }

    Output-&gt;Source = nullptr;
    ProgressControl-&gt;Visibility =
        Windows::UI::Xaml::Visibility::Visible;

    // Convert from 1-based page number to 0-based page index.
    unsigned long pageIndex = pageNumber - 1;

    auto picker = ref new FileSavePicker();
    picker-&gt;FileTypeChoices-&gt;Insert("PNG image",
        ref new Platform::Collections::Vector&lt;String^&gt;({ ".png" }));
    <font COLOR="blue">auto outfile = co_await picker-&gt;PickSaveFileAsync();</font>
    if (outfile)
    {
        auto page = pdfDocument-&gt;GetPage(pageIndex);

        <font COLOR="blue">auto transaction =
            co_await outfile-&gt;OpenTransactedWriteAsync();</font>
        auto options = ref new PdfPageRenderOptions();
        options-&gt;DestinationHeight = (unsigned)(page-&gt;Size.Height * 2);
        options-&gt;DestinationWidth = (unsigned)(page-&gt;Size.Width * 2);
        <font COLOR="blue">co_await page-&gt;RenderToStreamAsync(transaction-&gt;Stream, options);</font>
        delete transaction;
        delete page;
    }
    ProgressControl-&gt;Visibility =
        Windows::UI::Xaml::Visibility::Collapsed;
}

// Plus appropriate changes to the Scenario1_Render.xaml.h
// header file to match the new function, left to the reader.
</pre>
<p>
We are using the proposed
<code>co_await</code> language keyword
which turns the function into a state machine,
the same way that the <code>await</code> keyword
does in C#.
But instead of using C#
<code>Task&lt;T&gt;</code> objects,
the <code>co_await</code> keyword converts the
function into whatever you specified in the
traits type.
In our case, we use the
<code>pplawait.h</code>
header file, which describes how to convert an
<code>IAsyncAction</code> or
<code>IAsyncOperation&lt;T&gt;</code>
into a
<code>Concurrency::</code><code>task&lt;T&gt;</code>.
</p>
<p>
But wait! (await?)
I'm not done yet.
We'll pick up the story next time.
</p>
<p>
<b>Bonus chatter</b>:
Here's the C++/WinRT version.
This is a theoretical exercise because the XAML compiler
doesn't support C++/WinRT yet,
but I'll put it here for completeness.
</p>
<pre>
task&lt;void&gt; Scenario1_Render::ViewPageAsync()
{
    rootPage-&gt;NotifyUser("", NotifyType::StatusMessage);

    // If the text is not a valid number, then wcstoul returns 0,
    // which is an invalid page number, so we don't need to
    // special-case that possibility.
    unsigned long pageNumber = wcstoul(PageNumberBox-&gt;Text-&gt;Data(),
                                       nullptr, 10);

    if ((pageNumber &lt; 1) || (pageNumber &gt; pdfDocument.PageCount()))
    {
        rootPage-&gt;NotifyUser("Invalid page number.",
                             NotifyType::ErrorMessage);
        return;
    }

    Output-&gt;Source = nullptr;
    ProgressControl-&gt;Visibility =
        Windows::UI::Xaml::Visibility::Visible;

    // Convert from 1-based page number to 0-based page index.
    unsigned long pageIndex = pageNumber - 1;

    <font COLOR="blue">FileSavePicker picker;
    picker.FileTypeChoices().Insert("PNG image", { ".png" })</font>;
    auto outfile = co_await <font COLOR="blue">picker.PickSaveFileAsync</font>();
    if (outfile)
    {
        auto page = <font COLOR="blue">pdfDocument.GetPage</font>(pageIndex);

        auto transaction =
            co_await <font COLOR="blue">outfile.OpenTransactedWriteAsync</font>();
        <font COLOR="blue">PdfPageRenderOptions options</font>;
        options.DestinationHeight((unsigned)(page-&gt;Size.Height * 2));
        options.DestinationWidth((unsigned)(page-&gt;Size.Width * 2));
        co_await <font COLOR="blue">page.RenderToStreamAsync</font>(<font COLOR="blue">transaction.Stream()</font>, options);
        <font COLOR="blue">transaction.Close();
        page.Close();</font>
    }
    ProgressControl-&gt;Visibility =
        Windows::UI::Xaml::Visibility::Collapsed;
}
</pre>
<p>
The changes are as follows:
</p>
<ul>
<li>Method calls use dot notation rather than arrow notation.
</li>
<li>Fetching properties is done by calling a method (via dot)
    with the name of the property, and no parameters.
</li>
<li>Setting properties is done by calling a method (via dot)
    and passing the desired new value as the parameter.
</li>
<li>Closing an object is done by calling the <code>Close()</code>
    method, as opposed to C++/CX which overloaded the <code>delete</code>
    operator.
</li>
<li>Constructing an object is done by merely declaring it.</li>
<li>Wrapping a pointer is done by constructing an object around it.
    (Though it is common to use assignment-style construction.)</li>
<li>C++/WinRT lets you pass an initializer list when an aggregate
    is expected.
</li>
<li>We didn't use it here (thanks to the magic of <code>co_await</code>)
    but the parameter passed to task continuations
    is an <code>adapter</code> if the underlying class
    does not have a default constructor.
</li>
</ul>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-archangelpip even thread-even depth-1" id="comment-1301075">
				<div id="div-comment-1301075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170630-00/?p=96495#comment-1301075">
			June 30, 2017 at 9:31 am</a>		</div>

		<p>Everybody seems to be converging on C#. Yeah, because C++/CX is just terrible and C++/WinRT is looking like a serious case of too little too late.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1301136">
				<div id="div-comment-1301136" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erkin Alp GÃ¼ney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170630-00/?p=96495#comment-1301136">
			July 1, 2017 at 12:25 pm</a>		</div>

		<p>Can you translate for we ISO C++ programmers?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-2" id="comment-1301145">
				<div id="div-comment-1301145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170630-00/?p=96495#comment-1301145">
			July 1, 2017 at 1:12 pm</a>		</div>

		<p>He already has, look at the C++/WinRT version.<br />
They call this a standard C++ projection, and it is a header only library which wraps the runtime. But as mentioned in the post, the XAML compiler doesn&#8217;t support it yet, so if you wanted to use the C++/WinRT library to target the UWP, then you would have to use the XAML classes manually.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1301635">
				<div id="div-comment-1301635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pietro Gagliardi (andlabs)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170630-00/?p=96495#comment-1301635">
			July 7, 2017 at 10:51 am</a>		</div>

		<p>Here&#8217;s something I do wonder, if it isn&#8217;t too late: judging from MSDN, the file picker wraps around IFileDialog somehow, and judging from Googling C#&#8217;s async/await, I&#8217;d have to return to the outermost message pump somehow. So is there a way to open a IFileDialog in a non-code-modal way?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

